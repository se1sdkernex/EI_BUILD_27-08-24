
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025cdc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005a14  08025edc  08025edc  00035edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b8f0  0802b8f0  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802b8f0  0802b8f0  0003b8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b8f8  0802b8f8  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b8f8  0802b8f8  0003b8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b8fc  0802b8fc  0003b8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0802b900  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  0802baa4  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  0802bb44  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001970c  200002e4  0802bbe4  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200199f0  0802bbe4  000499f0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039a7d  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000861b  00000000  00000000  00079d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002500  00000000  00000000  000823b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002220  00000000  00000000  000848b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043898  00000000  00000000  00086ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047434  00000000  00000000  000ca368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013c172  00000000  00000000  0011179c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0024d90e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a22c  00000000  00000000  0024d960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08025ec4 	.word	0x08025ec4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08025ec4 	.word	0x08025ec4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a68 	.word	0x20000a68
 8000a70:	08025edc 	.word	0x08025edc
 8000a74:	08025ee8 	.word	0x08025ee8
 8000a78:	08025ef8 	.word	0x08025ef8
 8000a7c:	08025f08 	.word	0x08025f08
 8000a80:	08025f1c 	.word	0x08025f1c
 8000a84:	08025f30 	.word	0x08025f30
 8000a88:	08025f44 	.word	0x08025f44
 8000a8c:	08025f50 	.word	0x08025f50
 8000a90:	20000e50 	.word	0x20000e50

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01c fd15 	bl	801d4d4 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f024 f841 	bl	8024b3c <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20011390 	.word	0x20011390
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f019 fbe9 	bl	801a2b4 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f019 fbd9 	bl	801a2b4 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f019 fbc8 	bl	801a2b4 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a60 	.word	0x20000a60
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f023 fe04 	bl	8024788 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00e fbcb 	bl	800f320 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f016 fbad 	bl	80172f4 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f016 fb5c 	bl	8017274 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f023 feba 	bl	8024958 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f023 ff2e 	bl	8024a90 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f023 fe84 	bl	8024958 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f023 feff 	bl	8024a90 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f023 fe52 	bl	8024958 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f023 feeb 	bl	8024a90 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f023 fe35 	bl	8024958 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f023 fe27 	bl	8024958 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f023 fec0 	bl	8024a90 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f023 fe07 	bl	8024958 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f023 fdf9 	bl	8024958 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f023 fe92 	bl	8024a90 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f023 fdd4 	bl	8024958 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f023 fdb2 	bl	8024958 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f023 fd99 	bl	8024958 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f023 fd8b 	bl	8024958 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f023 fd7d 	bl	8024958 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f023 fe15 	bl	8024a90 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00f f807 	bl	800fe88 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000f74c 	.word	0x2000f74c
 8000e88:	08025f58 	.word	0x08025f58
 8000e8c:	2000065c 	.word	0x2000065c
 8000e90:	08025f70 	.word	0x08025f70
 8000e94:	20000a9a 	.word	0x20000a9a
 8000e98:	08025fb0 	.word	0x08025fb0
 8000e9c:	2000065d 	.word	0x2000065d
 8000ea0:	08025fc4 	.word	0x08025fc4
 8000ea4:	20000acc 	.word	0x20000acc
 8000ea8:	08025fe0 	.word	0x08025fe0
 8000eac:	08025ffc 	.word	0x08025ffc
 8000eb0:	2000198c 	.word	0x2000198c
 8000eb4:	0802600c 	.word	0x0802600c
 8000eb8:	20000afe 	.word	0x20000afe
 8000ebc:	08026020 	.word	0x08026020
 8000ec0:	20000b30 	.word	0x20000b30
 8000ec4:	08026030 	.word	0x08026030
 8000ec8:	20000b62 	.word	0x20000b62
 8000ecc:	20000b94 	.word	0x20000b94
 8000ed0:	20000bc6 	.word	0x20000bc6
 8000ed4:	0802604c 	.word	0x0802604c
 8000ed8:	20000bf8 	.word	0x20000bf8
 8000edc:	0802605c 	.word	0x0802605c
 8000ee0:	20000c2a 	.word	0x20000c2a

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f023 fbfc 	bl	8024718 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a68 	.word	0x20000a68
 8000f48:	20000e50 	.word	0x20000e50

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f023 fc0f 	bl	8024788 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00e fd94 	bl	800faa4 <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00e fd45 	bl	800fa7c <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d906      	bls.n	800101a <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8a3 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001020:	bf00      	nop
 8001022:	3788      	adds	r7, #136	; 0x88
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	; 0x88
 800102c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	227c      	movs	r2, #124	; 0x7c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f023 fba1 	bl	8024788 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <Process_Hitachi_Packets_Com+0x12c>)
 8001054:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <Process_Hitachi_Packets_Com+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00e f95d 	bl	800f320 <HAL_Elaps_Ticks>
 8001066:	4603      	mov	r3, r0
 8001068:	2b13      	cmp	r3, #19
 800106a:	d96e      	bls.n	800114a <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 800106c:	e04a      	b.n	8001104 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800106e:	2003      	movs	r0, #3
 8001070:	f016 f940 	bl	80172f4 <Com_Get_Byte>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800107a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800107e:	2b7e      	cmp	r3, #126	; 0x7e
 8001080:	d90a      	bls.n	8001098 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <Process_Hitachi_Packets_Com+0x134>)
 800108c:	f023 fc64 	bl	8024958 <iprintf>
			Traverser = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001096:	e03d      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001098:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800109c:	2bf4      	cmp	r3, #244	; 0xf4
 800109e:	d002      	beq.n	80010a6 <Process_Hitachi_Packets_Com+0x7e>
 80010a0:	2bf6      	cmp	r3, #246	; 0xf6
 80010a2:	d00c      	beq.n	80010be <Process_Hitachi_Packets_Com+0x96>
 80010a4:	e01b      	b.n	80010de <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010b0:	3388      	adds	r3, #136	; 0x88
 80010b2:	443b      	add	r3, r7
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010b8:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010bc:	e01e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c8:	3388      	adds	r3, #136	; 0x88
 80010ca:	443b      	add	r3, r7
 80010cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010dc:	e00e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010f0:	3388      	adds	r3, #136	; 0x88
 80010f2:	443b      	add	r3, r7
 80010f4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010f8:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001104:	2003      	movs	r0, #3
 8001106:	f016 f8b5 	bl	8017274 <Com_DataReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ae      	bne.n	800106e <Process_Hitachi_Packets_Com+0x46>
 8001110:	e000      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001112:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 800111c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d906      	bls.n	8001132 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001124:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f817 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f023 fb22 	bl	8024788 <memset>
 8001144:	e002      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 800114a:	bf00      	nop
	}
}
 800114c:	3788      	adds	r7, #136	; 0x88
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000304 	.word	0x20000304
 8001158:	2000f748 	.word	0x2000f748
 800115c:	08026098 	.word	0x08026098

08001160 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	227c      	movs	r2, #124	; 0x7c
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f023 fb05 	bl	8024788 <memset>
	uint16_t des_index=0,src_index=0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001196:	e034      	b.n	8001202 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bf0      	cmp	r3, #240	; 0xf0
 80011a4:	d118      	bne.n	80011d8 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b4:	3301      	adds	r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3390      	adds	r3, #144	; 0x90
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011d6:	e00a      	b.n	80011ee <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3390      	adds	r3, #144	; 0x90
 80011e8:	443b      	add	r3, r7
 80011ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80011ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800120a:	429a      	cmp	r2, r3
 800120c:	d3c4      	bcc.n	8001198 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 800120e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f805 	bl	8001228 <EI_Data_Analyzer>
}
 800121e:	bf00      	nop
 8001220:	3790      	adds	r7, #144	; 0x90
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	2300      	movs	r3, #0
 800123e:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001248:	f016 fb7c 	bl	8017944 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800124e:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <EI_Data_Analyzer+0x2c4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <EI_Data_Analyzer+0x52>
 8001256:	f016 fb75 	bl	8017944 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	4293      	cmp	r3, r2
 8001262:	d90a      	bls.n	800127a <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001264:	48a2      	ldr	r0, [pc, #648]	; (80014f0 <EI_Data_Analyzer+0x2c8>)
 8001266:	f023 fc13 	bl	8024a90 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800126a:	49a2      	ldr	r1, [pc, #648]	; (80014f4 <EI_Data_Analyzer+0x2cc>)
 800126c:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <EI_Data_Analyzer+0x2d0>)
 800126e:	f7fe ffe7 	bl	8000240 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 81a1 	bne.w	80015bc <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3303      	adds	r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	2110      	movs	r1, #16
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f9c6 	bl	8000614 <ExtractBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800128e:	e00b      	b.n	80012a8 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001294:	3366      	adds	r3, #102	; 0x66
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d009      	beq.n	80012b6 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	7ffa      	ldrb	r2, [r7, #31]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ed      	bcc.n	8001290 <EI_Data_Analyzer+0x68>
 80012b4:	e000      	b.n	80012b8 <EI_Data_Analyzer+0x90>
		{
			break;
 80012b6:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d309      	bcc.n	80012d8 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8179 	bne.w	80015c0 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	488c      	ldr	r0, [pc, #560]	; (8001504 <EI_Data_Analyzer+0x2dc>)
 80012d2:	f023 fb41 	bl	8024958 <iprintf>
		}
		return;
 80012d6:	e173      	b.n	80015c0 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	2110      	movs	r1, #16
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff f997 	bl	8000614 <ExtractBits>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012f0:	3370      	adds	r3, #112	; 0x70
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d012      	beq.n	8001324 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80012fe:	4882      	ldr	r0, [pc, #520]	; (8001508 <EI_Data_Analyzer+0x2e0>)
 8001300:	f023 fbc6 	bl	8024a90 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	4881      	ldr	r0, [pc, #516]	; (800150c <EI_Data_Analyzer+0x2e4>)
 8001308:	f023 fb26 	bl	8024958 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001310:	3370      	adds	r3, #112	; 0x70
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	487c      	ldr	r0, [pc, #496]	; (8001510 <EI_Data_Analyzer+0x2e8>)
 800131e:	f023 fb1b 	bl	8024958 <iprintf>
		return;
 8001322:	e14e      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	7fba      	ldrb	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d111      	bne.n	8001364 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001340:	4875      	ldr	r0, [pc, #468]	; (8001518 <EI_Data_Analyzer+0x2f0>)
 8001342:	f023 fba5 	bl	8024a90 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	4874      	ldr	r0, [pc, #464]	; (800151c <EI_Data_Analyzer+0x2f4>)
 800134a:	f023 fb05 	bl	8024958 <iprintf>
			Destin_Address = 333;
 800134e:	f240 134d 	movw	r3, #333	; 0x14d
 8001352:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4870      	ldr	r0, [pc, #448]	; (8001520 <EI_Data_Analyzer+0x2f8>)
 8001360:	f023 fafa 	bl	8024958 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	429a      	cmp	r2, r3
 800136e:	d307      	bcc.n	8001380 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001370:	486c      	ldr	r0, [pc, #432]	; (8001524 <EI_Data_Analyzer+0x2fc>)
 8001372:	f023 fb8d 	bl	8024a90 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <EI_Data_Analyzer+0x300>)
 800137a:	f023 faed 	bl	8024958 <iprintf>
		return;
 800137e:	e120      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d121      	bne.n	80013cc <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <EI_Data_Analyzer+0x304>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <EI_Data_Analyzer+0x170>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <EI_Data_Analyzer+0x178>
 8001396:	e007      	b.n	80013a8 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001398:	4865      	ldr	r0, [pc, #404]	; (8001530 <EI_Data_Analyzer+0x308>)
 800139a:	f023 fb79 	bl	8024a90 <puts>
			break;
 800139e:	e015      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013a0:	4864      	ldr	r0, [pc, #400]	; (8001534 <EI_Data_Analyzer+0x30c>)
 80013a2:	f023 fb75 	bl	8024a90 <puts>
			break;
 80013a6:	e011      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80013ac:	4413      	add	r3, r2
 80013ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <EI_Data_Analyzer+0x310>)
 80013b8:	f023 fb6a 	bl	8024a90 <puts>
 80013bc:	e006      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <EI_Data_Analyzer+0x304>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485d      	ldr	r0, [pc, #372]	; (800153c <EI_Data_Analyzer+0x314>)
 80013c8:	f023 fac6 	bl	8024958 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <EI_Data_Analyzer+0x304>)
 80013d8:	5c8a      	ldrb	r2, [r1, r2]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d014      	beq.n	8001408 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <EI_Data_Analyzer+0x31c>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4957      	ldr	r1, [pc, #348]	; (8001548 <EI_Data_Analyzer+0x320>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <EI_Data_Analyzer+0x304>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <EI_Data_Analyzer+0x324>)
 8001404:	f023 fb44 	bl	8024a90 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <EI_Data_Analyzer+0x304>)
 800140e:	5c89      	ldrb	r1, [r1, r2]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <EI_Data_Analyzer+0x328>)
 8001412:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f00d ff7f 	bl	800f320 <HAL_Elaps_Ticks>
 8001422:	4602      	mov	r2, r0
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001428:	338a      	adds	r3, #138	; 0x8a
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d318      	bcc.n	8001464 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4947      	ldr	r1, [pc, #284]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <EI_Data_Analyzer+0x31c>)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <EI_Data_Analyzer+0x320>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001454:	3366      	adds	r3, #102	; 0x66
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <EI_Data_Analyzer+0x330>)
 8001460:	f023 fa7a 	bl	8024958 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	493b      	ldr	r1, [pc, #236]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 800146e:	2281      	movs	r2, #129	; 0x81
 8001470:	2100      	movs	r1, #0
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <EI_Data_Analyzer+0x334>)
 8001474:	f023 f988 	bl	8024788 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <EI_Data_Analyzer+0x334>)
 8001480:	f023 f95a 	bl	8024738 <memcpy>
	Rx_Print_st.Size = Size;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <EI_Data_Analyzer+0x334>)
 800148a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3307      	adds	r3, #7
 8001492:	461a      	mov	r2, r3
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f8bc 	bl	8000614 <ExtractBits>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <EI_Data_Analyzer+0x338>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <EI_Data_Analyzer+0x33c>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fddb 	bl	800807c <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d870      	bhi.n	80015b0 <EI_Data_Analyzer+0x388>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <EI_Data_Analyzer+0x2ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001579 	.word	0x08001579
 80014dc:	08001589 	.word	0x08001589
 80014e0:	08001591 	.word	0x08001591
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015a1 	.word	0x080015a1
 80014ec:	20000108 	.word	0x20000108
 80014f0:	080260c4 	.word	0x080260c4
 80014f4:	08026104 	.word	0x08026104
 80014f8:	20000305 	.word	0x20000305
 80014fc:	20000304 	.word	0x20000304
 8001500:	2000065d 	.word	0x2000065d
 8001504:	08026110 	.word	0x08026110
 8001508:	0802614c 	.word	0x0802614c
 800150c:	08026168 	.word	0x08026168
 8001510:	0802618c 	.word	0x0802618c
 8001514:	2000198c 	.word	0x2000198c
 8001518:	080261c4 	.word	0x080261c4
 800151c:	080261e8 	.word	0x080261e8
 8001520:	080261f8 	.word	0x080261f8
 8001524:	08026208 	.word	0x08026208
 8001528:	0802623c 	.word	0x0802623c
 800152c:	200010b0 	.word	0x200010b0
 8001530:	0802625c 	.word	0x0802625c
 8001534:	0802626c 	.word	0x0802626c
 8001538:	0802627c 	.word	0x0802627c
 800153c:	08026294 	.word	0x08026294
 8001540:	20000fac 	.word	0x20000fac
 8001544:	20000fd4 	.word	0x20000fd4
 8001548:	20000ffc 	.word	0x20000ffc
 800154c:	080262b8 	.word	0x080262b8
 8001550:	20001054 	.word	0x20001054
 8001554:	20001060 	.word	0x20001060
 8001558:	080262d0 	.word	0x080262d0
 800155c:	20001c40 	.word	0x20001c40
 8001560:	200016a4 	.word	0x200016a4
 8001564:	20000e8c 	.word	0x20000e8c
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f82d 	bl	80015d0 <Init_Msg_extr>
		break;
 8001576:	e024      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fbc3 	bl	8002d0c <Vital_Msg_extr>
		break;
 8001586:	e01c      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <EI_Data_Analyzer+0x3a0>)
 800158a:	f023 fa81 	bl	8024a90 <puts>
		break;
 800158e:	e018      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7ffa      	ldrb	r2, [r7, #31]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 ff39 	bl	8005410 <Status_Msg_Extr>
		break;
 800159e:	e010      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 f9b1 	bl	8006910 <Service_Msg_Extr>
		break;
 80015ae:	e008      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <EI_Data_Analyzer+0x3a4>)
 80015b6:	f023 f9cf 	bl	8024958 <iprintf>
		break;
 80015ba:	e002      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
			return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
		return;
 80015c0:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	080262ec 	.word	0x080262ec
 80015cc:	08026310 	.word	0x08026310

080015d0 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80015fa:	f016 f9a3 	bl	8017944 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b05      	subs	r3, #5
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f012 fc2e 	bl	8013e74 <CalculateDirectReverseCrc>
 8001618:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b05      	subs	r3, #5
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fff4 	bl	8000614 <ExtractBits>
 800162c:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d013      	beq.n	800165e <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <Init_Msg_extr+0x110>)
 800163a:	3366      	adds	r3, #102	; 0x66
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <Init_Msg_extr+0x114>)
 8001646:	f023 f987 	bl	8024958 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <Init_Msg_extr+0x118>)
 800164e:	f023 f983 	bl	8024958 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <Init_Msg_extr+0x11c>)
 8001656:	f023 f97f 	bl	8024958 <iprintf>
		return;
 800165a:	f000 be32 	b.w	80022c2 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <Init_Msg_extr+0x120>)
 8001662:	2101      	movs	r1, #1
 8001664:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <Init_Msg_extr+0x124>)
 800166a:	2101      	movs	r1, #1
 800166c:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 021d 	add.w	r2, r3, #29
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	2110      	movs	r1, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffcb 	bl	8000614 <ExtractBits>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Init_Msg_extr+0x110>)
 8001686:	33f4      	adds	r3, #244	; 0xf4
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	8b7a      	ldrh	r2, [r7, #26]
 8001690:	429a      	cmp	r2, r3
 8001692:	d03d      	beq.n	8001710 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <Init_Msg_extr+0x128>)
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <Init_Msg_extr+0x110>)
 80016a0:	3366      	adds	r3, #102	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <Init_Msg_extr+0x12c>)
 80016ac:	f023 f954 	bl	8024958 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016b0:	8b7b      	ldrh	r3, [r7, #26]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <Init_Msg_extr+0x130>)
 80016b6:	f023 f94f 	bl	8024958 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Init_Msg_extr+0x110>)
 80016be:	33f4      	adds	r3, #244	; 0xf4
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <Init_Msg_extr+0x134>)
 80016ca:	f023 f945 	bl	8024958 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <Init_Msg_extr+0x138>)
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Init_Msg_extr+0x13c>)
 80016d2:	f7fe fdb5 	bl	8000240 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01d      	beq.n	8001718 <Init_Msg_extr+0x148>
		{
			return;
 80016dc:	f000 bdf1 	b.w	80022c2 <Init_Msg_extr+0xcf2>
 80016e0:	20000304 	.word	0x20000304
 80016e4:	0802632c 	.word	0x0802632c
 80016e8:	08026348 	.word	0x08026348
 80016ec:	08026358 	.word	0x08026358
 80016f0:	20001024 	.word	0x20001024
 80016f4:	2000103c 	.word	0x2000103c
 80016f8:	20001030 	.word	0x20001030
 80016fc:	08026368 	.word	0x08026368
 8001700:	080263a0 	.word	0x080263a0
 8001704:	080263c4 	.word	0x080263c4
 8001708:	08026104 	.word	0x08026104
 800170c:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001710:	78bb      	ldrb	r3, [r7, #2]
 8001712:	4aab      	ldr	r2, [pc, #684]	; (80019c0 <Init_Msg_extr+0x3f0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800171e:	8bbb      	ldrh	r3, [r7, #28]
 8001720:	2108      	movs	r1, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff76 	bl	8000614 <ExtractBits>
 8001728:	4603      	mov	r3, r0
 800172a:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	4aa5      	ldr	r2, [pc, #660]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001736:	7e7a      	ldrb	r2, [r7, #25]
 8001738:	429a      	cmp	r2, r3
 800173a:	d01f      	beq.n	800177c <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001740:	3366      	adds	r3, #102	; 0x66
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <Init_Msg_extr+0x3f8>)
 800174c:	f023 f904 	bl	8024958 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001754:	4413      	add	r3, r2
 8001756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800175a:	4619      	mov	r1, r3
 800175c:	489b      	ldr	r0, [pc, #620]	; (80019cc <Init_Msg_extr+0x3fc>)
 800175e:	f023 f8fb 	bl	8024958 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001762:	7e7b      	ldrb	r3, [r7, #25]
 8001764:	4619      	mov	r1, r3
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <Init_Msg_extr+0x400>)
 8001768:	f023 f8f6 	bl	8024958 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800176c:	4999      	ldr	r1, [pc, #612]	; (80019d4 <Init_Msg_extr+0x404>)
 800176e:	489a      	ldr	r0, [pc, #616]	; (80019d8 <Init_Msg_extr+0x408>)
 8001770:	f7fe fd66 	bl	8000240 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 85a2 	bne.w	80022c0 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4997      	ldr	r1, [pc, #604]	; (80019dc <Init_Msg_extr+0x40c>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4a95      	ldr	r2, [pc, #596]	; (80019e0 <Init_Msg_extr+0x410>)
 800178a:	2101      	movs	r1, #1
 800178c:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <Init_Msg_extr+0x414>)
 8001792:	2100      	movs	r1, #0
 8001794:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4993      	ldr	r1, [pc, #588]	; (80019e8 <Init_Msg_extr+0x418>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017a4:	3308      	adds	r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <Init_Msg_extr+0x1dc>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
 80017b6:	8bbb      	ldrh	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	425a      	negs	r2, r3
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	bf58      	it	pl
 80017ca:	4253      	negpl	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff1a 	bl	8000614 <ExtractBits>
 80017e0:	4602      	mov	r2, r0
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	b291      	uxth	r1, r2
 80017e6:	4a81      	ldr	r2, [pc, #516]	; (80019ec <Init_Msg_extr+0x41c>)
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	3310      	adds	r3, #16
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <Init_Msg_extr+0x41c>)
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <Init_Msg_extr+0x420>)
 8001802:	f023 f8a9 	bl	8024958 <iprintf>
	BITSTUFFINC(16);
 8001806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800180a:	3310      	adds	r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <Init_Msg_extr+0x242>
 8001810:	3307      	adds	r3, #7
 8001812:	10db      	asrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	425a      	negs	r2, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	bf58      	it	pl
 8001830:	4253      	negpl	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	441a      	add	r2, r3
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <ExtractBits>
 8001846:	4602      	mov	r2, r0
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	b291      	uxth	r1, r2
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <Init_Msg_extr+0x41c>)
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4413      	add	r3, r2
 8001852:	330e      	adds	r3, #14
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Init_Msg_extr+0x41c>)
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4413      	add	r3, r2
 8001860:	330e      	adds	r3, #14
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <Init_Msg_extr+0x424>)
 8001868:	f023 f876 	bl	8024958 <iprintf>
	BITSTUFFINC(16);
 800186c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001870:	3310      	adds	r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	da00      	bge.n	8001878 <Init_Msg_extr+0x2a8>
 8001876:	3307      	adds	r3, #7
 8001878:	10db      	asrs	r3, r3, #3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	8bbb      	ldrh	r3, [r7, #28]
 80018a4:	2108      	movs	r1, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe feb4 	bl	8000614 <ExtractBits>
 80018ac:	4602      	mov	r2, r0
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <Init_Msg_extr+0x41c>)
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018c0:	3308      	adds	r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <Init_Msg_extr+0x2f8>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b21b      	sxth	r3, r3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	2108      	movs	r1, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe8c 	bl	8000614 <ExtractBits>
 80018fc:	4602      	mov	r2, r0
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Init_Msg_extr+0x41c>)
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4413      	add	r3, r2
 8001908:	3301      	adds	r3, #1
 800190a:	460a      	mov	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800190e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001912:	3308      	adds	r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <Init_Msg_extr+0x34a>
 8001918:	3307      	adds	r3, #7
 800191a:	10db      	asrs	r3, r3, #3
 800191c:	b29a      	uxth	r2, r3
 800191e:	8bfb      	ldrh	r3, [r7, #30]
 8001920:	4413      	add	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	425a      	negs	r2, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f002 0207 	and.w	r2, r2, #7
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	441a      	add	r2, r3
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe63 	bl	8000614 <ExtractBits>
 800194e:	4602      	mov	r2, r0
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <Init_Msg_extr+0x41c>)
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001964:	3308      	adds	r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <Init_Msg_extr+0x39c>
 800196a:	3307      	adds	r3, #7
 800196c:	10db      	asrs	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	425a      	negs	r2, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f002 0207 	and.w	r2, r2, #7
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	441a      	add	r2, r3
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe3a 	bl	8000614 <ExtractBits>
 80019a0:	4602      	mov	r2, r0
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	b291      	uxth	r1, r2
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <Init_Msg_extr+0x428>)
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b6:	3310      	adds	r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da1f      	bge.n	80019fc <Init_Msg_extr+0x42c>
 80019bc:	3307      	adds	r3, #7
 80019be:	e01d      	b.n	80019fc <Init_Msg_extr+0x42c>
 80019c0:	20001030 	.word	0x20001030
 80019c4:	20000304 	.word	0x20000304
 80019c8:	080263e8 	.word	0x080263e8
 80019cc:	08026410 	.word	0x08026410
 80019d0:	08026424 	.word	0x08026424
 80019d4:	08026104 	.word	0x08026104
 80019d8:	20000305 	.word	0x20000305
 80019dc:	20000fd4 	.word	0x20000fd4
 80019e0:	2000103c 	.word	0x2000103c
 80019e4:	200010bc 	.word	0x200010bc
 80019e8:	200010c8 	.word	0x200010c8
 80019ec:	20001294 	.word	0x20001294
 80019f0:	08026438 	.word	0x08026438
 80019f4:	08026440 	.word	0x08026440
 80019f8:	200011f4 	.word	0x200011f4
 80019fc:	10db      	asrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	83fb      	strh	r3, [r7, #30]
 8001a06:	8bbb      	ldrh	r3, [r7, #28]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <Init_Msg_extr+0x68c>)
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 811d 	beq.w	8001c70 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8bbb      	ldrh	r3, [r7, #28]
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fde7 	bl	8000614 <ExtractBits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	78ba      	ldrb	r2, [r7, #2]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4984      	ldr	r1, [pc, #528]	; (8001c60 <Init_Msg_extr+0x690>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a62:	3308      	adds	r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <Init_Msg_extr+0x49a>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4413      	add	r3, r2
 8001a72:	83fb      	strh	r3, [r7, #30]
 8001a74:	8bbb      	ldrh	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	425a      	negs	r2, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	bf58      	it	pl
 8001a88:	4253      	negpl	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	441a      	add	r2, r3
 8001a94:	8bbb      	ldrh	r3, [r7, #28]
 8001a96:	2108      	movs	r1, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdbb 	bl	8000614 <ExtractBits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	78ba      	ldrb	r2, [r7, #2]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	496e      	ldr	r1, [pc, #440]	; (8001c60 <Init_Msg_extr+0x690>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001ab6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aba:	3308      	adds	r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <Init_Msg_extr+0x4f2>
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	10db      	asrs	r3, r3, #3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	4413      	add	r3, r2
 8001aca:	83fb      	strh	r3, [r7, #30]
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	f002 0207 	and.w	r2, r2, #7
 8001ade:	bf58      	it	pl
 8001ae0:	4253      	negpl	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	441a      	add	r2, r3
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	2108      	movs	r1, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd8f 	bl	8000614 <ExtractBits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4958      	ldr	r1, [pc, #352]	; (8001c60 <Init_Msg_extr+0x690>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	3303      	adds	r3, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b12:	3308      	adds	r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <Init_Msg_extr+0x54a>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	4413      	add	r3, r2
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	f002 0207 	and.w	r2, r2, #7
 8001b36:	bf58      	it	pl
 8001b38:	4253      	negpl	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	2108      	movs	r1, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd63 	bl	8000614 <ExtractBits>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4942      	ldr	r1, [pc, #264]	; (8001c60 <Init_Msg_extr+0x690>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <Init_Msg_extr+0x5a0>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4413      	add	r3, r2
 8001b78:	83fb      	strh	r3, [r7, #30]
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	f002 0207 	and.w	r2, r2, #7
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	8bbb      	ldrh	r3, [r7, #28]
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <Init_Msg_extr+0x690>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da00      	bge.n	8001bc8 <Init_Msg_extr+0x5f8>
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	8bbb      	ldrh	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	425a      	negs	r2, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	bf58      	it	pl
 8001be6:	4253      	negpl	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	8bbb      	ldrh	r3, [r7, #28]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd0c 	bl	8000614 <ExtractBits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	78ba      	ldrb	r2, [r7, #2]
 8001c00:	b2d8      	uxtb	r0, r3
 8001c02:	4917      	ldr	r1, [pc, #92]	; (8001c60 <Init_Msg_extr+0x690>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <Init_Msg_extr+0x650>
 8001c1e:	3307      	adds	r3, #7
 8001c20:	10db      	asrs	r3, r3, #3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4413      	add	r3, r2
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	f002 0207 	and.w	r2, r2, #7
 8001c3c:	bf58      	it	pl
 8001c3e:	4253      	negpl	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fa86 	bl	8009158 <IS_MLK_EIPC_TIME_MATCHING>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <Init_Msg_extr+0x698>
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <Init_Msg_extr+0x694>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	54d1      	strb	r1, [r2, r3]
 8001c5a:	e009      	b.n	8001c70 <Init_Msg_extr+0x6a0>
 8001c5c:	200011f4 	.word	0x200011f4
 8001c60:	200011b8 	.word	0x200011b8
 8001c64:	20001108 	.word	0x20001108
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	4aa4      	ldr	r2, [pc, #656]	; (8001efc <Init_Msg_extr+0x92c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fcca 	bl	8000614 <ExtractBits>
 8001c80:	4602      	mov	r2, r0
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <Init_Msg_extr+0x930>)
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c96:	3308      	adds	r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da00      	bge.n	8001c9e <Init_Msg_extr+0x6ce>
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	10db      	asrs	r3, r3, #3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bbb      	ldrh	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f002 0207 	and.w	r2, r2, #7
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fca1 	bl	8000614 <ExtractBits>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	b291      	uxth	r1, r2
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <Init_Msg_extr+0x930>)
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	3312      	adds	r3, #18
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce8:	3310      	adds	r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <Init_Msg_extr+0x720>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	f002 0207 	and.w	r2, r2, #7
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <Init_Msg_extr+0x930>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2206      	movs	r2, #6
 8001d26:	4619      	mov	r1, r3
 8001d28:	f022 fd06 	bl	8024738 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d30:	3310      	adds	r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <Init_Msg_extr+0x768>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	4413      	add	r3, r2
 8001d40:	83fb      	strh	r3, [r7, #30]
 8001d42:	8bbb      	ldrh	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	f002 0207 	and.w	r2, r2, #7
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d60:	3310      	adds	r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da00      	bge.n	8001d68 <Init_Msg_extr+0x798>
 8001d66:	3307      	adds	r3, #7
 8001d68:	10db      	asrs	r3, r3, #3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	4413      	add	r3, r2
 8001d70:	83fb      	strh	r3, [r7, #30]
 8001d72:	8bbb      	ldrh	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	3310      	adds	r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <Init_Msg_extr+0x7c8>
 8001d96:	3307      	adds	r3, #7
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	4413      	add	r3, r2
 8001da0:	83fb      	strh	r3, [r7, #30]
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dbc:	8bfb      	ldrh	r3, [r7, #30]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	8bbb      	ldrh	r3, [r7, #28]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc24 	bl	8000614 <ExtractBits>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	b291      	uxth	r1, r2
 8001dd2:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <Init_Msg_extr+0x930>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3314      	adds	r3, #20
 8001dda:	460a      	mov	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001de2:	3310      	adds	r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <Init_Msg_extr+0x81a>
 8001de8:	3307      	adds	r3, #7
 8001dea:	10db      	asrs	r3, r3, #3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	4413      	add	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	f002 0207 	and.w	r2, r2, #7
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	2110      	movs	r1, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbfb 	bl	8000614 <ExtractBits>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	4413      	add	r3, r2
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e34:	3310      	adds	r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <Init_Msg_extr+0x86c>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	4413      	add	r3, r2
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	8bbb      	ldrh	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	f002 0207 	and.w	r2, r2, #7
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbd2 	bl	8000614 <ExtractBits>
 8001e70:	4602      	mov	r2, r0
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e86:	3310      	adds	r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <Init_Msg_extr+0x8be>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	4413      	add	r3, r2
 8001e96:	83fb      	strh	r3, [r7, #30]
 8001e98:	8bbb      	ldrh	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	78bc      	ldrb	r4, [r7, #2]
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ec8:	0123      	lsls	r3, r4, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Init_Msg_extr+0x938>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4403      	add	r3, r0
 8001eea:	3308      	adds	r3, #8
 8001eec:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Init_Msg_extr+0x93c>
 8001ef8:	3307      	adds	r3, #7
 8001efa:	e007      	b.n	8001f0c <Init_Msg_extr+0x93c>
 8001efc:	20001108 	.word	0x20001108
 8001f00:	20001294 	.word	0x20001294
 8001f04:	200011f4 	.word	0x200011f4
 8001f08:	200016a4 	.word	0x200016a4
 8001f0c:	10db      	asrs	r3, r3, #3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4413      	add	r3, r2
 8001f14:	83fb      	strh	r3, [r7, #30]
 8001f16:	8bbb      	ldrh	r3, [r7, #28]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	8bbb      	ldrh	r3, [r7, #28]
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb6a 	bl	8000614 <ExtractBits>
 8001f40:	4602      	mov	r2, r0
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4ab1      	ldr	r2, [pc, #708]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	49ad      	ldr	r1, [pc, #692]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4aab      	ldr	r2, [pc, #684]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	460a      	mov	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <Init_Msg_extr+0x9a4>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83fb      	strh	r3, [r7, #30]
 8001f7e:	8bbb      	ldrh	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <Init_Msg_extr+0xc40>)
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <Init_Msg_extr+0x9f6>
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	10db      	asrs	r3, r3, #3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4413      	add	r3, r2
 8001fce:	83fb      	strh	r3, [r7, #30]
 8001fd0:	8bbb      	ldrh	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f002 0207 	and.w	r2, r2, #7
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb0d 	bl	8000614 <ExtractBits>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <Init_Msg_extr+0xc3c>)
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 800200c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002010:	3308      	adds	r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	da00      	bge.n	8002018 <Init_Msg_extr+0xa48>
 8002016:	3307      	adds	r3, #7
 8002018:	10db      	asrs	r3, r3, #3
 800201a:	b29a      	uxth	r2, r3
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
 8002022:	8bbb      	ldrh	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	425a      	negs	r2, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	f002 0207 	and.w	r2, r2, #7
 8002034:	bf58      	it	pl
 8002036:	4253      	negpl	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <Init_Msg_extr+0xc3c>)
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3303      	adds	r3, #3
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <Init_Msg_extr+0xc44>)
 800204c:	440b      	add	r3, r1
 800204e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002052:	429a      	cmp	r2, r3
 8002054:	d015      	beq.n	8002082 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <Init_Msg_extr+0xc48>)
 8002058:	f022 fd1a 	bl	8024a90 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <Init_Msg_extr+0xc44>)
 8002060:	4413      	add	r3, r2
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	; (800221c <Init_Msg_extr+0xc4c>)
 800206a:	f022 fc75 	bl	8024958 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <Init_Msg_extr+0xc3c>)
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <Init_Msg_extr+0xc50>)
 800207e:	f022 fc6b 	bl	8024958 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	2108      	movs	r1, #8
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fac1 	bl	8000614 <ExtractBits>
 8002092:	4602      	mov	r2, r0
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	b2d1      	uxtb	r1, r2
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <Init_Msg_extr+0xc40>)
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	330b      	adds	r3, #11
 80020a0:	460a      	mov	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a8:	3308      	adds	r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <Init_Msg_extr+0xae0>
 80020ae:	3307      	adds	r3, #7
 80020b0:	10db      	asrs	r3, r3, #3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	4413      	add	r3, r2
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	2108      	movs	r1, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa98 	bl	8000614 <ExtractBits>
 80020e4:	4602      	mov	r2, r0
 80020e6:	78bb      	ldrb	r3, [r7, #2]
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <Init_Msg_extr+0xc40>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	4413      	add	r3, r2
 80020f0:	330c      	adds	r3, #12
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80020f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da00      	bge.n	8002102 <Init_Msg_extr+0xb32>
 8002100:	3307      	adds	r3, #7
 8002102:	10db      	asrs	r3, r3, #3
 8002104:	b29a      	uxth	r2, r3
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	4413      	add	r3, r2
 800210a:	83fb      	strh	r3, [r7, #30]
 800210c:	8bbb      	ldrh	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	425a      	negs	r2, r3
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f002 0207 	and.w	r2, r2, #7
 800211e:	bf58      	it	pl
 8002120:	4253      	negpl	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Init_Msg_extr+0xc40>)
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	4413      	add	r3, r2
 800212e:	330c      	adds	r3, #12
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <Init_Msg_extr+0xc40>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4837      	ldr	r0, [pc, #220]	; (8002224 <Init_Msg_extr+0xc54>)
 8002146:	f022 fc07 	bl	8024958 <iprintf>
		printf("This Value has to be \"1\"\n");
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <Init_Msg_extr+0xc58>)
 800214c:	f022 fca0 	bl	8024a90 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	441a      	add	r2, r3
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2108      	movs	r1, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa5a 	bl	8000614 <ExtractBits>
 8002160:	4602      	mov	r2, r0
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <Init_Msg_extr+0xc40>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	330d      	adds	r3, #13
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002176:	3308      	adds	r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <Init_Msg_extr+0xbae>
 800217c:	3307      	adds	r3, #7
 800217e:	10db      	asrs	r3, r3, #3
 8002180:	b29a      	uxth	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	4413      	add	r3, r2
 8002186:	83fb      	strh	r3, [r7, #30]
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	f002 0207 	and.w	r2, r2, #7
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021a2:	8bfb      	ldrh	r3, [r7, #30]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	441a      	add	r2, r3
 80021a8:	78bc      	ldrb	r4, [r7, #2]
 80021aa:	8bbb      	ldrh	r3, [r7, #28]
 80021ac:	2120      	movs	r1, #32
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa30 	bl	8000614 <ExtractBits>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <Init_Msg_extr+0xc40>)
 80021b8:	0163      	lsls	r3, r4, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	331c      	adds	r3, #28
 80021be:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <Init_Msg_extr+0xbfc>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
 80021d6:	8bbb      	ldrh	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21b      	sxth	r3, r3
 80021de:	425a      	negs	r2, r3
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	bf58      	it	pl
 80021ea:	4253      	negpl	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80021f0:	787a      	ldrb	r2, [r7, #1]
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f86c 	bl	80022d4 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <Init_Msg_extr+0xc5c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	e012      	b.n	8002230 <Init_Msg_extr+0xc60>
 800220a:	bf00      	nop
 800220c:	200011f4 	.word	0x200011f4
 8002210:	20001294 	.word	0x20001294
 8002214:	20000304 	.word	0x20000304
 8002218:	08026448 	.word	0x08026448
 800221c:	08026410 	.word	0x08026410
 8002220:	08026424 	.word	0x08026424
 8002224:	08026464 	.word	0x08026464
 8002228:	08026490 	.word	0x08026490
 800222c:	200016a4 	.word	0x200016a4
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002238:	78ba      	ldrb	r2, [r7, #2]
 800223a:	4923      	ldr	r1, [pc, #140]	; (80022c8 <Init_Msg_extr+0xcf8>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3305      	adds	r3, #5
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002272:	2218      	movs	r2, #24
 8002274:	2100      	movs	r1, #0
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002278:	f022 fa86 	bl	8024788 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002288:	4413      	add	r3, r2
 800228a:	2218      	movs	r2, #24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002290:	f022 fa52 	bl	8024738 <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002294:	f240 2001 	movw	r0, #513	; 0x201
 8002298:	f00d fdf6 	bl	800fe88 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <Init_Msg_extr+0xcf8>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022b0:	78bc      	ldrb	r4, [r7, #2]
 80022b2:	f015 fb47 	bl	8017944 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <Init_Msg_extr+0xd00>)
 80022ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022be:	e000      	b.n	80022c2 <Init_Msg_extr+0xcf2>
			return;
 80022c0:	bf00      	nop
}
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	200016a4 	.word	0x200016a4
 80022cc:	20001884 	.word	0x20001884
 80022d0:	20000e5c 	.word	0x20000e5c

080022d4 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	; 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f022 fa49 	bl	8024788 <memset>
	uint32_t Calc_CRC = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002300:	2300      	movs	r3, #0
 8002302:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	441a      	add	r2, r3
 8002310:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002314:	23f4      	movs	r3, #244	; 0xf4
 8002316:	2108      	movs	r1, #8
 8002318:	f7fe fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800231c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Send_Init_Msg+0x54>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	4413      	add	r3, r2
 8002332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800233a:	3308      	adds	r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	425a      	negs	r2, r3
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	f002 0207 	and.w	r2, r2, #7
 800234a:	bf58      	it	pl
 800234c:	4253      	negpl	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	441a      	add	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4977      	ldr	r1, [pc, #476]	; (8002540 <Send_Init_Msg+0x26c>)
 8002362:	3366      	adds	r3, #102	; 0x66
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800236e:	2110      	movs	r1, #16
 8002370:	f7fe f9dc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002378:	3310      	adds	r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	da00      	bge.n	8002380 <Send_Init_Msg+0xac>
 800237e:	3307      	adds	r3, #7
 8002380:	10db      	asrs	r3, r3, #3
 8002382:	b29a      	uxth	r2, r3
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	4413      	add	r3, r2
 800238a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800238e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002392:	3310      	adds	r3, #16
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	425a      	negs	r2, r3
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	f002 0207 	and.w	r2, r2, #7
 80023a2:	bf58      	it	pl
 80023a4:	4253      	negpl	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	441a      	add	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <Send_Init_Msg+0x26c>)
 80023ba:	3370      	adds	r3, #112	; 0x70
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023c6:	2110      	movs	r1, #16
 80023c8:	f7fe f9b0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023d0:	3310      	adds	r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <Send_Init_Msg+0x104>
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	4413      	add	r3, r2
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023ea:	3310      	adds	r3, #16
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Send_Init_Msg+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d031      	beq.n	8002476 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Send_Init_Msg+0x270>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d137      	bne.n	800248c <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002422:	4849      	ldr	r0, [pc, #292]	; (8002548 <Send_Init_Msg+0x274>)
 8002424:	f019 ff40 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8002428:	4602      	mov	r2, r0
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <Send_Init_Msg+0x278>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <Send_Init_Msg+0x27c>)
 8002444:	f022 fb24 	bl	8024a90 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002448:	2100      	movs	r1, #0
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <Send_Init_Msg+0x280>)
 800244c:	f022 fa84 	bl	8024958 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002450:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	; (8002558 <Send_Init_Msg+0x284>)
 8002458:	f022 fa7e 	bl	8024958 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	441a      	add	r2, r3
 8002466:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800246a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800246e:	2108      	movs	r1, #8
 8002470:	f7fe f95c 	bl	800072c <InsertBits>
 8002474:	e00a      	b.n	800248c <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	441a      	add	r2, r3
 8002480:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	2108      	movs	r1, #8
 8002488:	f7fe f950 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800248c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002490:	3308      	adds	r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <Send_Init_Msg+0x1c4>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	4413      	add	r3, r2
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024aa:	3308      	adds	r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	425a      	negs	r2, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	f002 0207 	and.w	r2, r2, #7
 80024ba:	bf58      	it	pl
 80024bc:	4253      	negpl	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Send_Init_Msg+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Send_Init_Msg+0x270>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	79fa      	ldrb	r2, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d165      	bne.n	80025a8 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <Send_Init_Msg+0x274>)
 80024e4:	f019 fee0 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <Send_Init_Msg+0x278>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <Send_Init_Msg+0x288>)
 8002500:	f022 fac6 	bl	8024a90 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <Send_Init_Msg+0x28c>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <Send_Init_Msg+0x290>)
 8002514:	f022 fa20 	bl	8024958 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002518:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <Send_Init_Msg+0x294>)
 8002520:	f022 fa1a 	bl	8024958 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	441a      	add	r2, r3
 800252e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002536:	2108      	movs	r1, #8
 8002538:	f7fe f8f8 	bl	800072c <InsertBits>
 800253c:	e034      	b.n	80025a8 <Send_Init_Msg+0x2d4>
 800253e:	bf00      	nop
 8002540:	20000304 	.word	0x20000304
 8002544:	2000198c 	.word	0x2000198c
 8002548:	2000f3c4 	.word	0x2000f3c4
 800254c:	51eb851f 	.word	0x51eb851f
 8002550:	080264ac 	.word	0x080264ac
 8002554:	080264d0 	.word	0x080264d0
 8002558:	080264f0 	.word	0x080264f0
 800255c:	08026510 	.word	0x08026510
 8002560:	200011f4 	.word	0x200011f4
 8002564:	08026534 	.word	0x08026534
 8002568:	08026554 	.word	0x08026554

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	48c4      	ldr	r0, [pc, #784]	; (800288c <Send_Init_Msg+0x5b8>)
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4402      	add	r2, r0
 800257e:	3202      	adds	r2, #2
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	3201      	adds	r2, #1
 8002584:	b2d4      	uxtb	r4, r2
 8002586:	48c1      	ldr	r0, [pc, #772]	; (800288c <Send_Init_Msg+0x5b8>)
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	4402      	add	r2, r0
 800258c:	3202      	adds	r2, #2
 800258e:	4620      	mov	r0, r4
 8002590:	7010      	strb	r0, [r2, #0]
 8002592:	4abe      	ldr	r2, [pc, #760]	; (800288c <Send_Init_Msg+0x5b8>)
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025a0:	460a      	mov	r2, r1
 80025a2:	2108      	movs	r1, #8
 80025a4:	f7fe f8c2 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025ac:	3308      	adds	r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da00      	bge.n	80025b4 <Send_Init_Msg+0x2e0>
 80025b2:	3307      	adds	r3, #7
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	4413      	add	r3, r2
 80025be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025c6:	3308      	adds	r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f002 0207 	and.w	r2, r2, #7
 80025d6:	bf58      	it	pl
 80025d8:	4253      	negpl	r3, r2
 80025da:	b21b      	sxth	r3, r3
 80025dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025ee:	2301      	movs	r3, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	f7fe f89b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80025f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025fa:	3308      	adds	r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <Send_Init_Msg+0x32e>
 8002600:	3307      	adds	r3, #7
 8002602:	10db      	asrs	r3, r3, #3
 8002604:	b29a      	uxth	r2, r3
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	4413      	add	r3, r2
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002614:	3308      	adds	r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	425a      	negs	r2, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	f002 0207 	and.w	r2, r2, #7
 8002624:	bf58      	it	pl
 8002626:	4253      	negpl	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a96      	ldr	r2, [pc, #600]	; (800288c <Send_Init_Msg+0x5b8>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3306      	adds	r3, #6
 8002638:	2205      	movs	r2, #5
 800263a:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	441a      	add	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4990      	ldr	r1, [pc, #576]	; (800288c <Send_Init_Msg+0x5b8>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3306      	adds	r3, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002656:	2110      	movs	r1, #16
 8002658:	f7fe f868 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800265c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002660:	3310      	adds	r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <Send_Init_Msg+0x394>
 8002666:	3307      	adds	r3, #7
 8002668:	10db      	asrs	r3, r3, #3
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002670:	4413      	add	r3, r2
 8002672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267a:	3310      	adds	r3, #16
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21b      	sxth	r3, r3
 8002680:	425a      	negs	r2, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	f002 0207 	and.w	r2, r2, #7
 800268a:	bf58      	it	pl
 800268c:	4253      	negpl	r3, r2
 800268e:	b21b      	sxth	r3, r3
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026a2:	2317      	movs	r3, #23
 80026a4:	2108      	movs	r1, #8
 80026a6:	f7fe f841 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da00      	bge.n	80026b6 <Send_Init_Msg+0x3e2>
 80026b4:	3307      	adds	r3, #7
 80026b6:	10db      	asrs	r3, r3, #3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	4413      	add	r3, r2
 80026c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c8:	3308      	adds	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	425a      	negs	r2, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	f002 0207 	and.w	r2, r2, #7
 80026d8:	bf58      	it	pl
 80026da:	4253      	negpl	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	f7fe f81a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80026f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026fc:	3310      	adds	r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Send_Init_Msg+0x430>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	4413      	add	r3, r2
 800270e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002716:	3310      	adds	r3, #16
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	425a      	negs	r2, r3
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	441a      	add	r2, r3
 800273a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <Send_Init_Msg+0x5bc>)
 8002740:	2120      	movs	r1, #32
 8002742:	f7fd fff3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002746:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800274a:	3320      	adds	r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <Send_Init_Msg+0x47e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275a:	4413      	add	r3, r2
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002764:	3320      	adds	r3, #32
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	425a      	negs	r2, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	f002 0207 	and.w	r2, r2, #7
 8002774:	bf58      	it	pl
 8002776:	4253      	negpl	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800278c:	2300      	movs	r3, #0
 800278e:	2110      	movs	r1, #16
 8002790:	f7fd ffcc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002798:	3310      	adds	r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <Send_Init_Msg+0x4cc>
 800279e:	3307      	adds	r3, #7
 80027a0:	10db      	asrs	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	4413      	add	r3, r2
 80027aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	3310      	adds	r3, #16
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027da:	2300      	movs	r3, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f7fd ffa5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	3310      	adds	r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Send_Init_Msg+0x51a>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	4413      	add	r3, r2
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002800:	3310      	adds	r3, #16
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21b      	sxth	r3, r3
 8002806:	425a      	negs	r2, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002828:	2300      	movs	r3, #0
 800282a:	2110      	movs	r1, #16
 800282c:	f7fd ff7e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002834:	3310      	adds	r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <Send_Init_Msg+0x568>
 800283a:	3307      	adds	r3, #7
 800283c:	10db      	asrs	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002844:	4413      	add	r3, r2
 8002846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800284e:	3310      	adds	r3, #16
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	425a      	negs	r2, r3
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f002 0207 	and.w	r2, r2, #7
 800285e:	bf58      	it	pl
 8002860:	4253      	negpl	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002876:	2300      	movs	r3, #0
 8002878:	2110      	movs	r1, #16
 800287a:	f7fd ff57 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800287e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002882:	3310      	adds	r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	da05      	bge.n	8002894 <Send_Init_Msg+0x5c0>
 8002888:	3307      	adds	r3, #7
 800288a:	e003      	b.n	8002894 <Send_Init_Msg+0x5c0>
 800288c:	200011f4 	.word	0x200011f4
 8002890:	33e232af 	.word	0x33e232af
 8002894:	10db      	asrs	r3, r3, #3
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028a6:	3310      	adds	r3, #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	425a      	negs	r2, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	f002 0207 	and.w	r2, r2, #7
 80028b6:	bf58      	it	pl
 80028b8:	4253      	negpl	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <Send_Init_Msg+0x8bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90d      	bls.n	80028ee <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4aad      	ldr	r2, [pc, #692]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	49aa      	ldr	r1, [pc, #680]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00c      	b.n	8002908 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3308      	adds	r3, #8
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	3201      	adds	r2, #1
 80028fe:	49a3      	ldr	r1, [pc, #652]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	330c      	adds	r3, #12
 8002906:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	441a      	add	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	330c      	adds	r3, #12
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002922:	2118      	movs	r1, #24
 8002924:	f7fd ff02 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4997      	ldr	r1, [pc, #604]	; (8002b8c <Send_Init_Msg+0x8b8>)
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4897      	ldr	r0, [pc, #604]	; (8002b94 <Send_Init_Msg+0x8c0>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4403      	add	r3, r0
 8002942:	330c      	adds	r3, #12
 8002944:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002946:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800294a:	3318      	adds	r3, #24
 800294c:	2b00      	cmp	r3, #0
 800294e:	da00      	bge.n	8002952 <Send_Init_Msg+0x67e>
 8002950:	3307      	adds	r3, #7
 8002952:	10db      	asrs	r3, r3, #3
 8002954:	b29a      	uxth	r2, r3
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	4413      	add	r3, r2
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002960:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002964:	3318      	adds	r3, #24
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	425a      	negs	r2, r3
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a85      	ldr	r2, [pc, #532]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002982:	5cd2      	ldrb	r2, [r2, r3]
 8002984:	3201      	adds	r2, #1
 8002986:	b2d1      	uxtb	r1, r2
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800298a:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2bb3      	cmp	r3, #179	; 0xb3
 8002994:	d804      	bhi.n	80029a0 <Send_Init_Msg+0x6cc>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029a4:	210a      	movs	r1, #10
 80029a6:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	441a      	add	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4978      	ldr	r1, [pc, #480]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029bc:	2108      	movs	r1, #8
 80029be:	f7fd feb5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <Send_Init_Msg+0x6fa>
 80029cc:	3307      	adds	r3, #7
 80029ce:	10db      	asrs	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d6:	4413      	add	r3, r2
 80029d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029e0:	3308      	adds	r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	f002 0207 	and.w	r2, r2, #7
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f107 020c 	add.w	r2, r7, #12
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	f7fd fe8e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a14:	3308      	adds	r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da00      	bge.n	8002a1c <Send_Init_Msg+0x748>
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	10db      	asrs	r3, r3, #3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	4413      	add	r3, r2
 8002a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3308      	adds	r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f002 0207 	and.w	r2, r2, #7
 8002a3e:	bf58      	it	pl
 8002a40:	4253      	negpl	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a56:	2301      	movs	r3, #1
 8002a58:	2108      	movs	r1, #8
 8002a5a:	f7fd fe67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da00      	bge.n	8002a6a <Send_Init_Msg+0x796>
 8002a68:	3307      	adds	r3, #7
 8002a6a:	10db      	asrs	r3, r3, #3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	4413      	add	r3, r2
 8002a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	425a      	negs	r2, r3
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	f002 0207 	and.w	r2, r2, #7
 8002a8c:	bf58      	it	pl
 8002a8e:	4253      	negpl	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	f7fd fe40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <Send_Init_Msg+0x7e4>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aca:	3308      	adds	r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	f002 0207 	and.w	r2, r2, #7
 8002ada:	bf58      	it	pl
 8002adc:	4253      	negpl	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <Send_Init_Msg+0x8e0>
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d15b      	bne.n	8002bb4 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002afc:	230c      	movs	r3, #12
 8002afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <Send_Init_Msg+0x8cc>)
 8002b04:	f019 fbd0 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <Send_Init_Msg+0x8d0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	4613      	mov	r3, r2
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1aca      	subs	r2, r1, r3
 8002b1e:	b2d3      	uxtb	r3, r2
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <Send_Init_Msg+0x8d4>)
 8002b28:	f021 ffb2 	bl	8024a90 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <Send_Init_Msg+0x8d8>)
 8002b3c:	f021 ff0c 	bl	8024958 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <Send_Init_Msg+0x8dc>)
 8002b6e:	f021 fef3 	bl	8024958 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fd fdd1 	bl	800072c <InsertBits>
	{
 8002b8a:	e022      	b.n	8002bd2 <Send_Init_Msg+0x8fe>
 8002b8c:	200011f4 	.word	0x200011f4
 8002b90:	00ffffef 	.word	0x00ffffef
 8002b94:	200016a4 	.word	0x200016a4
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	2000198c 	.word	0x2000198c
 8002ba0:	2000f3c4 	.word	0x2000f3c4
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	08026574 	.word	0x08026574
 8002bac:	080265a4 	.word	0x080265a4
 8002bb0:	080265c0 	.word	0x080265c0
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	441a      	add	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	494e      	ldr	r1, [pc, #312]	; (8002cfc <Send_Init_Msg+0xa28>)
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bc8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002bcc:	2108      	movs	r1, #8
 8002bce:	f7fd fdad 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002bd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <Send_Init_Msg+0x90a>
 8002bdc:	3307      	adds	r3, #7
 8002bde:	10db      	asrs	r3, r3, #3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be6:	4413      	add	r3, r2
 8002be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	bf58      	it	pl
 8002c02:	4253      	negpl	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c24:	3308      	adds	r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da00      	bge.n	8002c2c <Send_Init_Msg+0x958>
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	10db      	asrs	r3, r3, #3
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c34:	4413      	add	r3, r2
 8002c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	3308      	adds	r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	f002 0207 	and.w	r2, r2, #7
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f011 f906 	bl	8013e74 <CalculateDirectReverseCrc>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	f7fd fd56 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c84:	3320      	adds	r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da00      	bge.n	8002c8c <Send_Init_Msg+0x9b8>
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	4413      	add	r3, r2
 8002c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f002 0207 	and.w	r2, r2, #7
 8002cae:	bf58      	it	pl
 8002cb0:	4253      	negpl	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <Send_Init_Msg+0xa0a>
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <Send_Init_Msg+0xa30>)
 8002cd2:	f021 fedd 	bl	8024a90 <puts>
		printf("Not Sending Reply");
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Send_Init_Msg+0xa34>)
 8002cd8:	f021 fe3e 	bl	8024958 <iprintf>
 8002cdc:	e009      	b.n	8002cf2 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fe2e 	bl	800794c <Process_Sending_Reply>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	375c      	adds	r7, #92	; 0x5c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	2000198c 	.word	0x2000198c
 8002d04:	080265dc 	.word	0x080265dc
 8002d08:	080265f4 	.word	0x080265f4

08002d0c <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b0ab      	sub	sp, #172	; 0xac
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70bb      	strb	r3, [r7, #2]
 8002d22:	4613      	mov	r3, r2
 8002d24:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint32_t Calc_CRC = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t Recv_CRC = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t Ticks = HAL_GetTick();
 8002d38:	f014 fe04 	bl	8017944 <HAL_GetTick>
 8002d3c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint8_t noofIP = 0, uc_index = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	uint8_t LinkEstablishFlag = RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t Temp_Vital_Data_Buff[HITACHI_MAX_PAYLOAD] = {0,};
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	227c      	movs	r2, #124	; 0x7c
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f021 fd12 	bl	8024788 <memset>
	BITSTUFFINIT(0, 0);
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d70:	49a9      	ldr	r1, [pc, #676]	; (8003018 <Vital_Msg_extr+0x30c>)
 8002d72:	48aa      	ldr	r0, [pc, #680]	; (800301c <Vital_Msg_extr+0x310>)
 8002d74:	f7fd fa64 	bl	8000240 <strcmp>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8149 	beq.w	8003012 <Vital_Msg_extr+0x306>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d80:	4ba7      	ldr	r3, [pc, #668]	; (8003020 <Vital_Msg_extr+0x314>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d031      	beq.n	8002df0 <Vital_Msg_extr+0xe4>
 8002d8c:	4ba4      	ldr	r3, [pc, #656]	; (8003020 <Vital_Msg_extr+0x314>)
 8002d8e:	791b      	ldrb	r3, [r3, #4]
 8002d90:	78ba      	ldrb	r2, [r7, #2]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d12c      	bne.n	8002df0 <Vital_Msg_extr+0xe4>
	{
		uint32_t Rand_Number = 22;
 8002d96:	2316      	movs	r3, #22
 8002d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002d9c:	48a1      	ldr	r0, [pc, #644]	; (8003024 <Vital_Msg_extr+0x318>)
 8002d9e:	f019 fa83 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4ba0      	ldr	r3, [pc, #640]	; (8003028 <Vital_Msg_extr+0x31c>)
 8002da6:	fba3 1302 	umull	r1, r3, r3, r2
 8002daa:	0dd9      	lsrs	r1, r3, #23
 8002dac:	460b      	mov	r3, r1
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	1a5b      	subs	r3, r3, r1
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002dba:	489c      	ldr	r0, [pc, #624]	; (800302c <Vital_Msg_extr+0x320>)
 8002dbc:	f021 fe68 	bl	8024a90 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002dc0:	78bb      	ldrb	r3, [r7, #2]
 8002dc2:	4a9b      	ldr	r2, [pc, #620]	; (8003030 <Vital_Msg_extr+0x324>)
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3308      	adds	r3, #8
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4899      	ldr	r0, [pc, #612]	; (8003034 <Vital_Msg_extr+0x328>)
 8002dd0:	f021 fdc2 	bl	8024958 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dd4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002dd8:	4897      	ldr	r0, [pc, #604]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002dda:	f021 fdbd 	bl	8024958 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002dde:	f107 020c 	add.w	r2, r7, #12
 8002de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de6:	2118      	movs	r1, #24
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd fc9f 	bl	800072c <InsertBits>
	{
 8002dee:	e00b      	b.n	8002e08 <Vital_Msg_extr+0xfc>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002df0:	78bb      	ldrb	r3, [r7, #2]
 8002df2:	4a8f      	ldr	r2, [pc, #572]	; (8003030 <Vital_Msg_extr+0x324>)
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	3308      	adds	r3, #8
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f107 020c 	add.w	r2, r7, #12
 8002e00:	2118      	movs	r1, #24
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fd fc92 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002e0e:	e010      	b.n	8002e32 <Vital_Msg_extr+0x126>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e10:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	441a      	add	r2, r3
 8002e18:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e1c:	3303      	adds	r3, #3
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	33a8      	adds	r3, #168	; 0xa8
 8002e22:	443b      	add	r3, r7
 8002e24:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e28:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002e32:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	3b05      	subs	r3, #5
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	dbe8      	blt.n	8002e10 <Vital_Msg_extr+0x104>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e3e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3303      	adds	r3, #3
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f011 f810 	bl	8013e74 <CalculateDirectReverseCrc>
 8002e54:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	3b05      	subs	r3, #5
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	441a      	add	r2, r3
 8002e60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002e64:	2120      	movs	r1, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fbd4 	bl	8000614 <ExtractBits>
 8002e6c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f000 80f5 	beq.w	8003068 <Vital_Msg_extr+0x35c>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3305      	adds	r3, #5
 8002e82:	461a      	mov	r2, r3
 8002e84:	2108      	movs	r1, #8
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fbc4 	bl	8000614 <ExtractBits>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <Vital_Msg_extr+0x19c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3305      	adds	r3, #5
 8002e96:	461a      	mov	r2, r3
 8002e98:	2108      	movs	r1, #8
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fd fbba 	bl	8000614 <ExtractBits>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	f040 809f 	bne.w	8002fe6 <Vital_Msg_extr+0x2da>
		{
			printf("Tx seq Roll over Detected\n");
 8002ea8:	4864      	ldr	r0, [pc, #400]	; (800303c <Vital_Msg_extr+0x330>)
 8002eaa:	f021 fdf1 	bl	8024a90 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002eae:	f107 030c 	add.w	r3, r7, #12
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f021 fc66 	bl	8024788 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002ebc:	78bb      	ldrb	r3, [r7, #2]
 8002ebe:	4a5c      	ldr	r2, [pc, #368]	; (8003030 <Vital_Msg_extr+0x324>)
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f107 020c 	add.w	r2, r7, #12
 8002ece:	2118      	movs	r1, #24
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd fc2b 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002edc:	e010      	b.n	8002f00 <Vital_Msg_extr+0x1f4>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ede:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	441a      	add	r2, r3
 8002ee6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002eea:	3303      	adds	r3, #3
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	33a8      	adds	r3, #168	; 0xa8
 8002ef0:	443b      	add	r3, r7
 8002ef2:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ef6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002efa:	3301      	adds	r3, #1
 8002efc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002f00:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	3b05      	subs	r3, #5
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbe8      	blt.n	8002ede <Vital_Msg_extr+0x1d2>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002f0c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3303      	adds	r3, #3
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	f107 030c 	add.w	r3, r7, #12
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f010 ffa9 	bl	8013e74 <CalculateDirectReverseCrc>
 8002f22:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	3b05      	subs	r3, #5
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002f32:	2120      	movs	r1, #32
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fb6d 	bl	8000614 <ExtractBits>
 8002f3a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			if(Calc_CRC == Recv_CRC)
 8002f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d137      	bne.n	8002fba <Vital_Msg_extr+0x2ae>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f4a:	483d      	ldr	r0, [pc, #244]	; (8003040 <Vital_Msg_extr+0x334>)
 8002f4c:	f021 fda0 	bl	8024a90 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f50:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002f54:	483b      	ldr	r0, [pc, #236]	; (8003044 <Vital_Msg_extr+0x338>)
 8002f56:	f021 fcff 	bl	8024958 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f5a:	78bb      	ldrb	r3, [r7, #2]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	4413      	add	r3, r2
 8002f62:	3308      	adds	r3, #8
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	4837      	ldr	r0, [pc, #220]	; (8003048 <Vital_Msg_extr+0x33c>)
 8002f6a:	f021 fcf5 	bl	8024958 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f6e:	78bb      	ldrb	r3, [r7, #2]
 8002f70:	492f      	ldr	r1, [pc, #188]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f72:	011a      	lsls	r2, r3, #4
 8002f74:	440a      	add	r2, r1
 8002f76:	3208      	adds	r2, #8
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	3201      	adds	r2, #1
 8002f7c:	492c      	ldr	r1, [pc, #176]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	440b      	add	r3, r1
 8002f82:	3308      	adds	r3, #8
 8002f84:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f86:	78bb      	ldrb	r3, [r7, #2]
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3308      	adds	r3, #8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	482d      	ldr	r0, [pc, #180]	; (800304c <Vital_Msg_extr+0x340>)
 8002f96:	f021 fcdf 	bl	8024958 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	78ba      	ldrb	r2, [r7, #2]
 8002f9e:	4924      	ldr	r1, [pc, #144]	; (8003030 <Vital_Msg_extr+0x324>)
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	4829      	ldr	r0, [pc, #164]	; (8003050 <Vital_Msg_extr+0x344>)
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4403      	add	r3, r0
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002fb8:	e057      	b.n	800306a <Vital_Msg_extr+0x35e>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fba:	78bb      	ldrb	r3, [r7, #2]
 8002fbc:	4a25      	ldr	r2, [pc, #148]	; (8003054 <Vital_Msg_extr+0x348>)
 8002fbe:	3366      	adds	r3, #102	; 0x66
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4823      	ldr	r0, [pc, #140]	; (8003058 <Vital_Msg_extr+0x34c>)
 8002fca:	f021 fcc5 	bl	8024958 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002fd2:	4822      	ldr	r0, [pc, #136]	; (800305c <Vital_Msg_extr+0x350>)
 8002fd4:	f021 fcc0 	bl	8024958 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fd8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002fdc:	4820      	ldr	r0, [pc, #128]	; (8003060 <Vital_Msg_extr+0x354>)
 8002fde:	f021 fcbb 	bl	8024958 <iprintf>
				return;
 8002fe2:	f000 bf78 	b.w	8003ed6 <Vital_Msg_extr+0x11ca>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fe6:	78bb      	ldrb	r3, [r7, #2]
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <Vital_Msg_extr+0x348>)
 8002fea:	3366      	adds	r3, #102	; 0x66
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	481b      	ldr	r0, [pc, #108]	; (8003064 <Vital_Msg_extr+0x358>)
 8002ff6:	f021 fcaf 	bl	8024958 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002ffa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002ffe:	4817      	ldr	r0, [pc, #92]	; (800305c <Vital_Msg_extr+0x350>)
 8003000:	f021 fcaa 	bl	8024958 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8003004:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003008:	4815      	ldr	r0, [pc, #84]	; (8003060 <Vital_Msg_extr+0x354>)
 800300a:	f021 fca5 	bl	8024958 <iprintf>
			return;
 800300e:	f000 bf62 	b.w	8003ed6 <Vital_Msg_extr+0x11ca>
		goto ROLLOVER_VITAL;
 8003012:	bf00      	nop
 8003014:	e029      	b.n	800306a <Vital_Msg_extr+0x35e>
 8003016:	bf00      	nop
 8003018:	08026104 	.word	0x08026104
 800301c:	20000305 	.word	0x20000305
 8003020:	2000198c 	.word	0x2000198c
 8003024:	2000f3c4 	.word	0x2000f3c4
 8003028:	80008001 	.word	0x80008001
 800302c:	08026608 	.word	0x08026608
 8003030:	200011f4 	.word	0x200011f4
 8003034:	08026628 	.word	0x08026628
 8003038:	08026650 	.word	0x08026650
 800303c:	08026678 	.word	0x08026678
 8003040:	08026694 	.word	0x08026694
 8003044:	080266ac 	.word	0x080266ac
 8003048:	080266cc 	.word	0x080266cc
 800304c:	080266ec 	.word	0x080266ec
 8003050:	200016a4 	.word	0x200016a4
 8003054:	20000304 	.word	0x20000304
 8003058:	08026718 	.word	0x08026718
 800305c:	08026348 	.word	0x08026348
 8003060:	08026358 	.word	0x08026358
 8003064:	08026738 	.word	0x08026738
		}
	}

	ROLLOVER_VITAL:
 8003068:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 800306a:	78bb      	ldrb	r3, [r7, #2]
 800306c:	49c4      	ldr	r1, [pc, #784]	; (8003380 <Vital_Msg_extr+0x674>)
 800306e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8003076:	78bb      	ldrb	r3, [r7, #2]
 8003078:	49c2      	ldr	r1, [pc, #776]	; (8003384 <Vital_Msg_extr+0x678>)
 800307a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003082:	78bb      	ldrb	r3, [r7, #2]
 8003084:	4ac0      	ldr	r2, [pc, #768]	; (8003388 <Vital_Msg_extr+0x67c>)
 8003086:	2101      	movs	r1, #1
 8003088:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800308a:	78ba      	ldrb	r2, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	015b      	lsls	r3, r3, #5
 8003090:	4413      	add	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4abd      	ldr	r2, [pc, #756]	; (800338c <Vital_Msg_extr+0x680>)
 8003096:	4413      	add	r3, r2
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f021 fb73 	bl	8024788 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 80030a2:	78ba      	ldrb	r2, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	4413      	add	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4ab7      	ldr	r2, [pc, #732]	; (800338c <Vital_Msg_extr+0x680>)
 80030ae:	4413      	add	r3, r2
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f021 fb3f 	bl	8024738 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 80030ba:	78ba      	ldrb	r2, [r7, #2]
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	b298      	uxth	r0, r3
 80030c0:	49b2      	ldr	r1, [pc, #712]	; (800338c <Vital_Msg_extr+0x680>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	4413      	add	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	440b      	add	r3, r1
 80030cc:	3340      	adds	r3, #64	; 0x40
 80030ce:	4602      	mov	r2, r0
 80030d0:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030d2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80030d6:	3308      	adds	r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da00      	bge.n	80030de <Vital_Msg_extr+0x3d2>
 80030dc:	3307      	adds	r3, #7
 80030de:	10db      	asrs	r3, r3, #3
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80030e6:	4413      	add	r3, r2
 80030e8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80030ec:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80030f0:	3308      	adds	r3, #8
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	425a      	negs	r2, r3
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	f002 0207 	and.w	r2, r2, #7
 8003100:	bf58      	it	pl
 8003102:	4253      	negpl	r3, r2
 8003104:	b21b      	sxth	r3, r3
 8003106:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800310a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	441a      	add	r2, r3
 8003112:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003116:	2110      	movs	r1, #16
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fa7b 	bl	8000614 <ExtractBits>
 800311e:	4603      	mov	r3, r0
 8003120:	78ba      	ldrb	r2, [r7, #2]
 8003122:	b298      	uxth	r0, r3
 8003124:	499a      	ldr	r1, [pc, #616]	; (8003390 <Vital_Msg_extr+0x684>)
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	440b      	add	r3, r1
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	4602      	mov	r2, r0
 8003134:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 8003136:	78ba      	ldrb	r2, [r7, #2]
 8003138:	4995      	ldr	r1, [pc, #596]	; (8003390 <Vital_Msg_extr+0x684>)
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	440b      	add	r3, r1
 8003144:	3328      	adds	r3, #40	; 0x28
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	4892      	ldr	r0, [pc, #584]	; (8003394 <Vital_Msg_extr+0x688>)
 800314c:	f021 fc04 	bl	8024958 <iprintf>
	BITSTUFFINC(16);
 8003150:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003154:	3310      	adds	r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	da00      	bge.n	800315c <Vital_Msg_extr+0x450>
 800315a:	3307      	adds	r3, #7
 800315c:	10db      	asrs	r3, r3, #3
 800315e:	b29a      	uxth	r2, r3
 8003160:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003164:	4413      	add	r3, r2
 8003166:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800316a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800316e:	3310      	adds	r3, #16
 8003170:	b29b      	uxth	r3, r3
 8003172:	b21b      	sxth	r3, r3
 8003174:	425a      	negs	r2, r3
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	f002 0207 	and.w	r2, r2, #7
 800317e:	bf58      	it	pl
 8003180:	4253      	negpl	r3, r2
 8003182:	b21b      	sxth	r3, r3
 8003184:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003188:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	441a      	add	r2, r3
 8003190:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003194:	2110      	movs	r1, #16
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fa3c 	bl	8000614 <ExtractBits>
 800319c:	4603      	mov	r3, r0
 800319e:	78ba      	ldrb	r2, [r7, #2]
 80031a0:	b298      	uxth	r0, r3
 80031a2:	497b      	ldr	r1, [pc, #492]	; (8003390 <Vital_Msg_extr+0x684>)
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	440b      	add	r3, r1
 80031ae:	3326      	adds	r3, #38	; 0x26
 80031b0:	4602      	mov	r2, r0
 80031b2:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 80031b4:	78ba      	ldrb	r2, [r7, #2]
 80031b6:	4976      	ldr	r1, [pc, #472]	; (8003390 <Vital_Msg_extr+0x684>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	440b      	add	r3, r1
 80031c2:	3326      	adds	r3, #38	; 0x26
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4873      	ldr	r0, [pc, #460]	; (8003398 <Vital_Msg_extr+0x68c>)
 80031ca:	f021 fbc5 	bl	8024958 <iprintf>
	BITSTUFFINC(16);
 80031ce:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80031d2:	3310      	adds	r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da00      	bge.n	80031da <Vital_Msg_extr+0x4ce>
 80031d8:	3307      	adds	r3, #7
 80031da:	10db      	asrs	r3, r3, #3
 80031dc:	b29a      	uxth	r2, r3
 80031de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80031e2:	4413      	add	r3, r2
 80031e4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80031e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80031ec:	3310      	adds	r3, #16
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b21b      	sxth	r3, r3
 80031f2:	425a      	negs	r2, r3
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	f002 0207 	and.w	r2, r2, #7
 80031fc:	bf58      	it	pl
 80031fe:	4253      	negpl	r3, r2
 8003200:	b21b      	sxth	r3, r3
 8003202:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003206:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	441a      	add	r2, r3
 800320e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003212:	2108      	movs	r1, #8
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f9fd 	bl	8000614 <ExtractBits>
 800321a:	4602      	mov	r2, r0
 800321c:	78bb      	ldrb	r3, [r7, #2]
 800321e:	b2d1      	uxtb	r1, r2
 8003220:	4a5e      	ldr	r2, [pc, #376]	; (800339c <Vital_Msg_extr+0x690>)
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	3302      	adds	r3, #2
 8003228:	460a      	mov	r2, r1
 800322a:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800322c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003230:	3308      	adds	r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	da00      	bge.n	8003238 <Vital_Msg_extr+0x52c>
 8003236:	3307      	adds	r3, #7
 8003238:	10db      	asrs	r3, r3, #3
 800323a:	b29a      	uxth	r2, r3
 800323c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003240:	4413      	add	r3, r2
 8003242:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003246:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800324a:	3308      	adds	r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	b21b      	sxth	r3, r3
 8003250:	425a      	negs	r2, r3
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	f002 0207 	and.w	r2, r2, #7
 800325a:	bf58      	it	pl
 800325c:	4253      	negpl	r3, r2
 800325e:	b21b      	sxth	r3, r3
 8003260:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003264:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	441a      	add	r2, r3
 800326c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003270:	2108      	movs	r1, #8
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f9ce 	bl	8000614 <ExtractBits>
 8003278:	4602      	mov	r2, r0
 800327a:	78bb      	ldrb	r3, [r7, #2]
 800327c:	b2d1      	uxtb	r1, r2
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <Vital_Msg_extr+0x690>)
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4413      	add	r3, r2
 8003284:	3301      	adds	r3, #1
 8003286:	460a      	mov	r2, r1
 8003288:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800328a:	78bb      	ldrb	r3, [r7, #2]
 800328c:	4a43      	ldr	r2, [pc, #268]	; (800339c <Vital_Msg_extr+0x690>)
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	3301      	adds	r3, #1
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d138      	bne.n	800330c <Vital_Msg_extr+0x600>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800329a:	78bb      	ldrb	r3, [r7, #2]
 800329c:	4a40      	ldr	r2, [pc, #256]	; (80033a0 <Vital_Msg_extr+0x694>)
 800329e:	3366      	adds	r3, #102	; 0x66
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4619      	mov	r1, r3
 80032a8:	483e      	ldr	r0, [pc, #248]	; (80033a4 <Vital_Msg_extr+0x698>)
 80032aa:	f021 fb55 	bl	8024958 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	4a3a      	ldr	r2, [pc, #232]	; (800339c <Vital_Msg_extr+0x690>)
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	483a      	ldr	r0, [pc, #232]	; (80033a8 <Vital_Msg_extr+0x69c>)
 80032be:	f021 fb4b 	bl	8024958 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	4935      	ldr	r1, [pc, #212]	; (800339c <Vital_Msg_extr+0x690>)
 80032c6:	011a      	lsls	r2, r3, #4
 80032c8:	440a      	add	r2, r1
 80032ca:	320c      	adds	r2, #12
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	3201      	adds	r2, #1
 80032d0:	4932      	ldr	r1, [pc, #200]	; (800339c <Vital_Msg_extr+0x690>)
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	440b      	add	r3, r1
 80032d6:	330c      	adds	r3, #12
 80032d8:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032da:	78bb      	ldrb	r3, [r7, #2]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <Vital_Msg_extr+0x690>)
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	330c      	adds	r3, #12
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4619      	mov	r1, r3
 80032e8:	4830      	ldr	r0, [pc, #192]	; (80033ac <Vital_Msg_extr+0x6a0>)
 80032ea:	f021 fb35 	bl	8024958 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032ee:	78bb      	ldrb	r3, [r7, #2]
 80032f0:	78ba      	ldrb	r2, [r7, #2]
 80032f2:	492a      	ldr	r1, [pc, #168]	; (800339c <Vital_Msg_extr+0x690>)
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	440b      	add	r3, r1
 80032f8:	330c      	adds	r3, #12
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	482c      	ldr	r0, [pc, #176]	; (80033b0 <Vital_Msg_extr+0x6a4>)
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4403      	add	r3, r0
 8003308:	330c      	adds	r3, #12
 800330a:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 800330c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003310:	3308      	adds	r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	da00      	bge.n	8003318 <Vital_Msg_extr+0x60c>
 8003316:	3307      	adds	r3, #7
 8003318:	10db      	asrs	r3, r3, #3
 800331a:	b29a      	uxth	r2, r3
 800331c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003320:	4413      	add	r3, r2
 8003322:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003326:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800332a:	3308      	adds	r3, #8
 800332c:	b29b      	uxth	r3, r3
 800332e:	b21b      	sxth	r3, r3
 8003330:	425a      	negs	r2, r3
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	f002 0207 	and.w	r2, r2, #7
 800333a:	bf58      	it	pl
 800333c:	4253      	negpl	r3, r2
 800333e:	b21b      	sxth	r3, r3
 8003340:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003344:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	441a      	add	r2, r3
 800334c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003350:	2108      	movs	r1, #8
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f95e 	bl	8000614 <ExtractBits>
 8003358:	4603      	mov	r3, r0
 800335a:	78ba      	ldrb	r2, [r7, #2]
 800335c:	b2d8      	uxtb	r0, r3
 800335e:	490c      	ldr	r1, [pc, #48]	; (8003390 <Vital_Msg_extr+0x684>)
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	440b      	add	r3, r1
 800336a:	3302      	adds	r3, #2
 800336c:	4602      	mov	r2, r0
 800336e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003370:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003374:	3308      	adds	r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	da1c      	bge.n	80033b4 <Vital_Msg_extr+0x6a8>
 800337a:	3307      	adds	r3, #7
 800337c:	e01a      	b.n	80033b4 <Vital_Msg_extr+0x6a8>
 800337e:	bf00      	nop
 8003380:	20000fd4 	.word	0x20000fd4
 8003384:	20000ffc 	.word	0x20000ffc
 8003388:	20001048 	.word	0x20001048
 800338c:	200019ac 	.word	0x200019ac
 8003390:	200013d4 	.word	0x200013d4
 8003394:	08026438 	.word	0x08026438
 8003398:	08026440 	.word	0x08026440
 800339c:	200011f4 	.word	0x200011f4
 80033a0:	20000304 	.word	0x20000304
 80033a4:	0802674c 	.word	0x0802674c
 80033a8:	08026790 	.word	0x08026790
 80033ac:	080267a0 	.word	0x080267a0
 80033b0:	200016a4 	.word	0x200016a4
 80033b4:	10db      	asrs	r3, r3, #3
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80033bc:	4413      	add	r3, r2
 80033be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80033c2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80033c6:	3308      	adds	r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	425a      	negs	r2, r3
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	f002 0207 	and.w	r2, r2, #7
 80033d6:	bf58      	it	pl
 80033d8:	4253      	negpl	r3, r2
 80033da:	b21b      	sxth	r3, r3
 80033dc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	441a      	add	r2, r3
 80033e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80033ec:	2110      	movs	r1, #16
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f910 	bl	8000614 <ExtractBits>
 80033f4:	4602      	mov	r2, r0
 80033f6:	78bb      	ldrb	r3, [r7, #2]
 80033f8:	b291      	uxth	r1, r2
 80033fa:	4abd      	ldr	r2, [pc, #756]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	460a      	mov	r2, r1
 8003404:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003406:	49bb      	ldr	r1, [pc, #748]	; (80036f4 <Vital_Msg_extr+0x9e8>)
 8003408:	48bb      	ldr	r0, [pc, #748]	; (80036f8 <Vital_Msg_extr+0x9ec>)
 800340a:	f7fc ff19 	bl	8000240 <strcmp>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <Vital_Msg_extr+0x728>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8003414:	78bb      	ldrb	r3, [r7, #2]
 8003416:	4ab6      	ldr	r2, [pc, #728]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	78bb      	ldrb	r3, [r7, #2]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	b291      	uxth	r1, r2
 8003428:	4ab1      	ldr	r2, [pc, #708]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	460a      	mov	r2, r1
 8003432:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003434:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003438:	3310      	adds	r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	da00      	bge.n	8003440 <Vital_Msg_extr+0x734>
 800343e:	3307      	adds	r3, #7
 8003440:	10db      	asrs	r3, r3, #3
 8003442:	b29a      	uxth	r2, r3
 8003444:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003448:	4413      	add	r3, r2
 800344a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800344e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003452:	3310      	adds	r3, #16
 8003454:	b29b      	uxth	r3, r3
 8003456:	b21b      	sxth	r3, r3
 8003458:	425a      	negs	r2, r3
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	f002 0207 	and.w	r2, r2, #7
 8003462:	bf58      	it	pl
 8003464:	4253      	negpl	r3, r2
 8003466:	b21b      	sxth	r3, r3
 8003468:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 800346c:	78bb      	ldrb	r3, [r7, #2]
 800346e:	4aa0      	ldr	r2, [pc, #640]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8145 	beq.w	800370c <Vital_Msg_extr+0xa00>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003482:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	441a      	add	r2, r3
 800348a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800348e:	2108      	movs	r1, #8
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f8bf 	bl	8000614 <ExtractBits>
 8003496:	4603      	mov	r3, r0
 8003498:	78ba      	ldrb	r2, [r7, #2]
 800349a:	b2d8      	uxtb	r0, r3
 800349c:	4997      	ldr	r1, [pc, #604]	; (80036fc <Vital_Msg_extr+0x9f0>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	440b      	add	r3, r1
 80034a8:	3305      	adds	r3, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80034ae:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80034b2:	3308      	adds	r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da00      	bge.n	80034ba <Vital_Msg_extr+0x7ae>
 80034b8:	3307      	adds	r3, #7
 80034ba:	10db      	asrs	r3, r3, #3
 80034bc:	b29a      	uxth	r2, r3
 80034be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80034c2:	4413      	add	r3, r2
 80034c4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80034c8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80034cc:	3308      	adds	r3, #8
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	425a      	negs	r2, r3
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	f002 0207 	and.w	r2, r2, #7
 80034dc:	bf58      	it	pl
 80034de:	4253      	negpl	r3, r2
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	441a      	add	r2, r3
 80034ee:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80034f2:	2108      	movs	r1, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd f88d 	bl	8000614 <ExtractBits>
 80034fa:	4603      	mov	r3, r0
 80034fc:	78ba      	ldrb	r2, [r7, #2]
 80034fe:	b2d8      	uxtb	r0, r3
 8003500:	497e      	ldr	r1, [pc, #504]	; (80036fc <Vital_Msg_extr+0x9f0>)
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	440b      	add	r3, r1
 800350c:	3304      	adds	r3, #4
 800350e:	4602      	mov	r2, r0
 8003510:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8003512:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003516:	3308      	adds	r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	da00      	bge.n	800351e <Vital_Msg_extr+0x812>
 800351c:	3307      	adds	r3, #7
 800351e:	10db      	asrs	r3, r3, #3
 8003520:	b29a      	uxth	r2, r3
 8003522:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003526:	4413      	add	r3, r2
 8003528:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800352c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003530:	3308      	adds	r3, #8
 8003532:	b29b      	uxth	r3, r3
 8003534:	b21b      	sxth	r3, r3
 8003536:	425a      	negs	r2, r3
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	f002 0207 	and.w	r2, r2, #7
 8003540:	bf58      	it	pl
 8003542:	4253      	negpl	r3, r2
 8003544:	b21b      	sxth	r3, r3
 8003546:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800354a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	441a      	add	r2, r3
 8003552:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003556:	2108      	movs	r1, #8
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd f85b 	bl	8000614 <ExtractBits>
 800355e:	4603      	mov	r3, r0
 8003560:	78ba      	ldrb	r2, [r7, #2]
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	4965      	ldr	r1, [pc, #404]	; (80036fc <Vital_Msg_extr+0x9f0>)
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	440b      	add	r3, r1
 8003570:	3303      	adds	r3, #3
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8003576:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800357a:	3308      	adds	r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	da00      	bge.n	8003582 <Vital_Msg_extr+0x876>
 8003580:	3307      	adds	r3, #7
 8003582:	10db      	asrs	r3, r3, #3
 8003584:	b29a      	uxth	r2, r3
 8003586:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800358a:	4413      	add	r3, r2
 800358c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003590:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003594:	3308      	adds	r3, #8
 8003596:	b29b      	uxth	r3, r3
 8003598:	b21b      	sxth	r3, r3
 800359a:	425a      	negs	r2, r3
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	f002 0207 	and.w	r2, r2, #7
 80035a4:	bf58      	it	pl
 80035a6:	4253      	negpl	r3, r2
 80035a8:	b21b      	sxth	r3, r3
 80035aa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	441a      	add	r2, r3
 80035b6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80035ba:	2108      	movs	r1, #8
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd f829 	bl	8000614 <ExtractBits>
 80035c2:	4603      	mov	r3, r0
 80035c4:	78ba      	ldrb	r2, [r7, #2]
 80035c6:	b2d8      	uxtb	r0, r3
 80035c8:	494c      	ldr	r1, [pc, #304]	; (80036fc <Vital_Msg_extr+0x9f0>)
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	440b      	add	r3, r1
 80035d4:	4602      	mov	r2, r0
 80035d6:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035d8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80035dc:	3308      	adds	r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da00      	bge.n	80035e4 <Vital_Msg_extr+0x8d8>
 80035e2:	3307      	adds	r3, #7
 80035e4:	10db      	asrs	r3, r3, #3
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80035ec:	4413      	add	r3, r2
 80035ee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80035f2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80035f6:	3308      	adds	r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	425a      	negs	r2, r3
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	f002 0207 	and.w	r2, r2, #7
 8003606:	bf58      	it	pl
 8003608:	4253      	negpl	r3, r2
 800360a:	b21b      	sxth	r3, r3
 800360c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003610:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	441a      	add	r2, r3
 8003618:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800361c:	2108      	movs	r1, #8
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc fff8 	bl	8000614 <ExtractBits>
 8003624:	4603      	mov	r3, r0
 8003626:	78ba      	ldrb	r2, [r7, #2]
 8003628:	b2d8      	uxtb	r0, r3
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <Vital_Msg_extr+0x9f0>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	440b      	add	r3, r1
 8003636:	3301      	adds	r3, #1
 8003638:	4602      	mov	r2, r0
 800363a:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 800363c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003640:	3308      	adds	r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	da00      	bge.n	8003648 <Vital_Msg_extr+0x93c>
 8003646:	3307      	adds	r3, #7
 8003648:	10db      	asrs	r3, r3, #3
 800364a:	b29a      	uxth	r2, r3
 800364c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003650:	4413      	add	r3, r2
 8003652:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003656:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800365a:	3308      	adds	r3, #8
 800365c:	b29b      	uxth	r3, r3
 800365e:	b21b      	sxth	r3, r3
 8003660:	425a      	negs	r2, r3
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	f002 0207 	and.w	r2, r2, #7
 800366a:	bf58      	it	pl
 800366c:	4253      	negpl	r3, r2
 800366e:	b21b      	sxth	r3, r3
 8003670:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003674:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	441a      	add	r2, r3
 800367c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003680:	2108      	movs	r1, #8
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ffc6 	bl	8000614 <ExtractBits>
 8003688:	4603      	mov	r3, r0
 800368a:	78ba      	ldrb	r2, [r7, #2]
 800368c:	b2d8      	uxtb	r0, r3
 800368e:	491b      	ldr	r1, [pc, #108]	; (80036fc <Vital_Msg_extr+0x9f0>)
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	3302      	adds	r3, #2
 800369c:	4602      	mov	r2, r0
 800369e:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 80036a0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80036a4:	3308      	adds	r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da00      	bge.n	80036ac <Vital_Msg_extr+0x9a0>
 80036aa:	3307      	adds	r3, #7
 80036ac:	10db      	asrs	r3, r3, #3
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80036b4:	4413      	add	r3, r2
 80036b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80036ba:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80036be:	3308      	adds	r3, #8
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	425a      	negs	r2, r3
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	f002 0207 	and.w	r2, r2, #7
 80036ce:	bf58      	it	pl
 80036d0:	4253      	negpl	r3, r2
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fd3c 	bl	8009158 <IS_MLK_EIPC_TIME_MATCHING>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <Vital_Msg_extr+0x9f8>
 80036e6:	78bb      	ldrb	r3, [r7, #2]
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <Vital_Msg_extr+0x9f4>)
 80036ea:	2100      	movs	r1, #0
 80036ec:	54d1      	strb	r1, [r2, r3]
 80036ee:	e00d      	b.n	800370c <Vital_Msg_extr+0xa00>
 80036f0:	200011f4 	.word	0x200011f4
 80036f4:	08026104 	.word	0x08026104
 80036f8:	20000305 	.word	0x20000305
 80036fc:	200011b8 	.word	0x200011b8
 8003700:	20001108 	.word	0x20001108
 8003704:	78bb      	ldrb	r3, [r7, #2]
 8003706:	4a91      	ldr	r2, [pc, #580]	; (800394c <Vital_Msg_extr+0xc40>)
 8003708:	2101      	movs	r1, #1
 800370a:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800370c:	78bb      	ldrb	r3, [r7, #2]
 800370e:	4a90      	ldr	r2, [pc, #576]	; (8003950 <Vital_Msg_extr+0xc44>)
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4413      	add	r3, r2
 8003714:	3304      	adds	r3, #4
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <Vital_Msg_extr+0xa1a>
	{
		LinkEstablishFlag = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003726:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	441a      	add	r2, r3
 800372e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003732:	2108      	movs	r1, #8
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc ff6d 	bl	8000614 <ExtractBits>
 800373a:	4603      	mov	r3, r0
 800373c:	78ba      	ldrb	r2, [r7, #2]
 800373e:	b2d8      	uxtb	r0, r3
 8003740:	4984      	ldr	r1, [pc, #528]	; (8003954 <Vital_Msg_extr+0xc48>)
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	440b      	add	r3, r1
 800374c:	3303      	adds	r3, #3
 800374e:	4602      	mov	r2, r0
 8003750:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003752:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003756:	3308      	adds	r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	da00      	bge.n	800375e <Vital_Msg_extr+0xa52>
 800375c:	3307      	adds	r3, #7
 800375e:	10db      	asrs	r3, r3, #3
 8003760:	b29a      	uxth	r2, r3
 8003762:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003766:	4413      	add	r3, r2
 8003768:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800376c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003770:	3308      	adds	r3, #8
 8003772:	b29b      	uxth	r3, r3
 8003774:	b21b      	sxth	r3, r3
 8003776:	425a      	negs	r2, r3
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	f002 0207 	and.w	r2, r2, #7
 8003780:	bf58      	it	pl
 8003782:	4253      	negpl	r3, r2
 8003784:	b21b      	sxth	r3, r3
 8003786:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 800378a:	78ba      	ldrb	r2, [r7, #2]
 800378c:	4971      	ldr	r1, [pc, #452]	; (8003954 <Vital_Msg_extr+0xc48>)
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	440b      	add	r3, r1
 8003798:	3303      	adds	r3, #3
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4619      	mov	r1, r3
 800379e:	486e      	ldr	r0, [pc, #440]	; (8003958 <Vital_Msg_extr+0xc4c>)
 80037a0:	f021 f8da 	bl	8024958 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80037a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	441a      	add	r2, r3
 80037ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037b0:	2108      	movs	r1, #8
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc ff2e 	bl	8000614 <ExtractBits>
 80037b8:	4603      	mov	r3, r0
 80037ba:	78ba      	ldrb	r2, [r7, #2]
 80037bc:	b2d8      	uxtb	r0, r3
 80037be:	4965      	ldr	r1, [pc, #404]	; (8003954 <Vital_Msg_extr+0xc48>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	440b      	add	r3, r1
 80037ca:	3304      	adds	r3, #4
 80037cc:	4602      	mov	r2, r0
 80037ce:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037d0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80037d4:	3308      	adds	r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da00      	bge.n	80037dc <Vital_Msg_extr+0xad0>
 80037da:	3307      	adds	r3, #7
 80037dc:	10db      	asrs	r3, r3, #3
 80037de:	b29a      	uxth	r2, r3
 80037e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037e4:	4413      	add	r3, r2
 80037e6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80037ea:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037ee:	3308      	adds	r3, #8
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b21b      	sxth	r3, r3
 80037f4:	425a      	negs	r2, r3
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	f002 0207 	and.w	r2, r2, #7
 80037fe:	bf58      	it	pl
 8003800:	4253      	negpl	r3, r2
 8003802:	b21b      	sxth	r3, r3
 8003804:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 8003808:	78ba      	ldrb	r2, [r7, #2]
 800380a:	4952      	ldr	r1, [pc, #328]	; (8003954 <Vital_Msg_extr+0xc48>)
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	440b      	add	r3, r1
 8003816:	3303      	adds	r3, #3
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (noofIP != 0)
 8003822:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <Vital_Msg_extr+0xb3c>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 800382a:	78ba      	ldrb	r2, [r7, #2]
 800382c:	4949      	ldr	r1, [pc, #292]	; (8003954 <Vital_Msg_extr+0xc48>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	440b      	add	r3, r1
 8003838:	3303      	adds	r3, #3
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	08db      	lsrs	r3, r3, #3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003846:	e00b      	b.n	8003860 <Vital_Msg_extr+0xb54>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003848:	78ba      	ldrb	r2, [r7, #2]
 800384a:	4942      	ldr	r1, [pc, #264]	; (8003954 <Vital_Msg_extr+0xc48>)
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	440b      	add	r3, r1
 8003856:	3303      	adds	r3, #3
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	08db      	lsrs	r3, r3, #3
 800385c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003860:	2300      	movs	r3, #0
 8003862:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003866:	e04c      	b.n	8003902 <Vital_Msg_extr+0xbf6>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003868:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	441a      	add	r2, r3
 8003870:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003874:	2108      	movs	r1, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fecc 	bl	8000614 <ExtractBits>
 800387c:	4603      	mov	r3, r0
 800387e:	78ba      	ldrb	r2, [r7, #2]
 8003880:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003884:	b2dc      	uxtb	r4, r3
 8003886:	4833      	ldr	r0, [pc, #204]	; (8003954 <Vital_Msg_extr+0xc48>)
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4403      	add	r3, r0
 8003892:	440b      	add	r3, r1
 8003894:	3305      	adds	r3, #5
 8003896:	4622      	mov	r2, r4
 8003898:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 800389a:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 800389e:	78ba      	ldrb	r2, [r7, #2]
 80038a0:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 80038a4:	4c2b      	ldr	r4, [pc, #172]	; (8003954 <Vital_Msg_extr+0xc48>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4423      	add	r3, r4
 80038b0:	440b      	add	r3, r1
 80038b2:	3305      	adds	r3, #5
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	4601      	mov	r1, r0
 80038ba:	4828      	ldr	r0, [pc, #160]	; (800395c <Vital_Msg_extr+0xc50>)
 80038bc:	f021 f84c 	bl	8024958 <iprintf>
		BITSTUFFINC(8);
 80038c0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80038c4:	3308      	adds	r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da00      	bge.n	80038cc <Vital_Msg_extr+0xbc0>
 80038ca:	3307      	adds	r3, #7
 80038cc:	10db      	asrs	r3, r3, #3
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038d4:	4413      	add	r3, r2
 80038d6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80038da:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038de:	3308      	adds	r3, #8
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	425a      	negs	r2, r3
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	f002 0207 	and.w	r2, r2, #7
 80038ee:	bf58      	it	pl
 80038f0:	4253      	negpl	r3, r2
 80038f2:	b21b      	sxth	r3, r3
 80038f4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003902:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003906:	b29b      	uxth	r3, r3
 8003908:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800390c:	429a      	cmp	r2, r3
 800390e:	d3ab      	bcc.n	8003868 <Vital_Msg_extr+0xb5c>
	}
	printf("\n");
 8003910:	200a      	movs	r0, #10
 8003912:	f021 f839 	bl	8024988 <putchar>
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8003916:	78bb      	ldrb	r3, [r7, #2]
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <Vital_Msg_extr+0xc54>)
 800391a:	4413      	add	r3, r2
 800391c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003920:	2b02      	cmp	r3, #2
 8003922:	d10e      	bne.n	8003942 <Vital_Msg_extr+0xc36>
	{
		printf("Online Bit Status:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8003924:	78ba      	ldrb	r2, [r7, #2]
 8003926:	490b      	ldr	r1, [pc, #44]	; (8003954 <Vital_Msg_extr+0xc48>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	440b      	add	r3, r1
 8003932:	3305      	adds	r3, #5
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	4619      	mov	r1, r3
 800393c:	4809      	ldr	r0, [pc, #36]	; (8003964 <Vital_Msg_extr+0xc58>)
 800393e:	f021 f80b 	bl	8024958 <iprintf>
	}

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003942:	2300      	movs	r3, #0
 8003944:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003948:	e048      	b.n	80039dc <Vital_Msg_extr+0xcd0>
 800394a:	bf00      	nop
 800394c:	20001108 	.word	0x20001108
 8003950:	200011f4 	.word	0x200011f4
 8003954:	200013d4 	.word	0x200013d4
 8003958:	080267b0 	.word	0x080267b0
 800395c:	080267b8 	.word	0x080267b8
 8003960:	20000304 	.word	0x20000304
 8003964:	080267c8 	.word	0x080267c8
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003968:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	441a      	add	r2, r3
 8003970:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003974:	2108      	movs	r1, #8
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fe4c 	bl	8000614 <ExtractBits>
 800397c:	4603      	mov	r3, r0
 800397e:	78ba      	ldrb	r2, [r7, #2]
 8003980:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003984:	b2dc      	uxtb	r4, r3
 8003986:	486b      	ldr	r0, [pc, #428]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	4403      	add	r3, r0
 8003992:	440b      	add	r3, r1
 8003994:	3315      	adds	r3, #21
 8003996:	4622      	mov	r2, r4
 8003998:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800399a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800399e:	3308      	adds	r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da00      	bge.n	80039a6 <Vital_Msg_extr+0xc9a>
 80039a4:	3307      	adds	r3, #7
 80039a6:	10db      	asrs	r3, r3, #3
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80039ae:	4413      	add	r3, r2
 80039b0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80039b4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80039b8:	3308      	adds	r3, #8
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	b21b      	sxth	r3, r3
 80039be:	425a      	negs	r2, r3
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	f002 0207 	and.w	r2, r2, #7
 80039c8:	bf58      	it	pl
 80039ca:	4253      	negpl	r3, r2
 80039cc:	b21b      	sxth	r3, r3
 80039ce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80039d2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80039d6:	3301      	adds	r3, #1
 80039d8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80039dc:	78ba      	ldrb	r2, [r7, #2]
 80039de:	4955      	ldr	r1, [pc, #340]	; (8003b34 <Vital_Msg_extr+0xe28>)
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	440b      	add	r3, r1
 80039ea:	3304      	adds	r3, #4
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d3b7      	bcc.n	8003968 <Vital_Msg_extr+0xc5c>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 80039f8:	787a      	ldrb	r2, [r7, #1]
 80039fa:	78bb      	ldrb	r3, [r7, #2]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 fc04 	bl	800720c <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 8003a04:	78bb      	ldrb	r3, [r7, #2]
 8003a06:	4a4c      	ldr	r2, [pc, #304]	; (8003b38 <Vital_Msg_extr+0xe2c>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 8003a0c:	78bb      	ldrb	r3, [r7, #2]
 8003a0e:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <Vital_Msg_extr+0xe2c>)
 8003a10:	3302      	adds	r3, #2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003a1a:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8003a1c:	78ba      	ldrb	r2, [r7, #2]
 8003a1e:	4947      	ldr	r1, [pc, #284]	; (8003b3c <Vital_Msg_extr+0xe30>)
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	440b      	add	r3, r1
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d116      	bne.n	8003a60 <Vital_Msg_extr+0xd54>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8003a32:	2246      	movs	r2, #70	; 0x46
 8003a34:	2100      	movs	r1, #0
 8003a36:	4842      	ldr	r0, [pc, #264]	; (8003b40 <Vital_Msg_extr+0xe34>)
 8003a38:	f020 fea6 	bl	8024788 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8003a3c:	78bb      	ldrb	r3, [r7, #2]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <Vital_Msg_extr+0xe34>)
 8003a42:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <Vital_Msg_extr+0xe34>)
 8003a4a:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	483c      	ldr	r0, [pc, #240]	; (8003b44 <Vital_Msg_extr+0xe38>)
 8003a54:	f020 fe70 	bl	8024738 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 8003a58:	f240 2003 	movw	r0, #515	; 0x203
 8003a5c:	f00c fa14 	bl	800fe88 <TransmitCanPkt>

	/* To check Whether the Data received is from Active system or Not By checking the 1st bit Vital Data
	 * This checking is Only required for Serial Interface
	 */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET))
 8003a60:	78bb      	ldrb	r3, [r7, #2]
 8003a62:	4a39      	ldr	r2, [pc, #228]	; (8003b48 <Vital_Msg_extr+0xe3c>)
 8003a64:	4413      	add	r3, r2
 8003a66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d128      	bne.n	8003ac0 <Vital_Msg_extr+0xdb4>
 8003a6e:	78ba      	ldrb	r2, [r7, #2]
 8003a70:	4930      	ldr	r1, [pc, #192]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3305      	adds	r3, #5
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11b      	bne.n	8003ac0 <Vital_Msg_extr+0xdb4>
	{
		printf("Online Bit Drop\n");
 8003a88:	4830      	ldr	r0, [pc, #192]	; (8003b4c <Vital_Msg_extr+0xe40>)
 8003a8a:	f021 f801 	bl	8024a90 <puts>
		LinkEstablishFlag = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		Act_InactiveFlag[Source_Index] = SET;
 8003a94:	78bb      	ldrb	r3, [r7, #2]
 8003a96:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <Vital_Msg_extr+0xe44>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	54d1      	strb	r1, [r2, r3]
		LastActCount[Source_Index] = RESET;
 8003a9c:	78bb      	ldrb	r3, [r7, #2]
 8003a9e:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	54d1      	strb	r1, [r2, r3]
		memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 8003aa4:	78ba      	ldrb	r2, [r7, #2]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3305      	adds	r3, #5
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f020 fe65 	bl	8024788 <memset>
 8003abe:	e05d      	b.n	8003b7c <Vital_Msg_extr+0xe70>
	}
	else if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == SET) && (LinkEstablishFlag == SET))
 8003ac0:	78bb      	ldrb	r3, [r7, #2]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <Vital_Msg_extr+0xe3c>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d156      	bne.n	8003b7c <Vital_Msg_extr+0xe70>
 8003ace:	78ba      	ldrb	r2, [r7, #2]
 8003ad0:	4918      	ldr	r1, [pc, #96]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	440b      	add	r3, r1
 8003adc:	3305      	adds	r3, #5
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d049      	beq.n	8003b7c <Vital_Msg_extr+0xe70>
 8003ae8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d145      	bne.n	8003b7c <Vital_Msg_extr+0xe70>
	{
		if(Act_InactiveFlag[Source_Index] == SET)
 8003af0:	78bb      	ldrb	r3, [r7, #2]
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <Vital_Msg_extr+0xe44>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d140      	bne.n	8003b7c <Vital_Msg_extr+0xe70>
		{
			++LastActCount[Source_Index];
 8003afa:	78bb      	ldrb	r3, [r7, #2]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003afe:	5cd2      	ldrb	r2, [r2, r3]
 8003b00:	3201      	adds	r2, #1
 8003b02:	b2d1      	uxtb	r1, r2
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b06:	54d1      	strb	r1, [r2, r3]
			printf("Updated Count:%u\n",LastActCount[Source_Index]);
 8003b08:	78bb      	ldrb	r3, [r7, #2]
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b0c:	5cd3      	ldrb	r3, [r2, r3]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4811      	ldr	r0, [pc, #68]	; (8003b58 <Vital_Msg_extr+0xe4c>)
 8003b12:	f020 ff21 	bl	8024958 <iprintf>
			if(LastActCount[Source_Index] >= MAX_LAST_ACT_COUNT)
 8003b16:	78bb      	ldrb	r3, [r7, #2]
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d91d      	bls.n	8003b5c <Vital_Msg_extr+0xe50>
			{
				Act_InactiveFlag[Source_Index] = RESET;
 8003b20:	78bb      	ldrb	r3, [r7, #2]
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <Vital_Msg_extr+0xe44>)
 8003b24:	2100      	movs	r1, #0
 8003b26:	54d1      	strb	r1, [r2, r3]
				LastActCount[Source_Index] = MAX_LAST_ACT_COUNT; /* To avoid Overflow of Variable */
 8003b28:	78bb      	ldrb	r3, [r7, #2]
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	54d1      	strb	r1, [r2, r3]
 8003b30:	e024      	b.n	8003b7c <Vital_Msg_extr+0xe70>
 8003b32:	bf00      	nop
 8003b34:	200013d4 	.word	0x200013d4
 8003b38:	20001cc4 	.word	0x20001cc4
 8003b3c:	200016a4 	.word	0x200016a4
 8003b40:	200018b4 	.word	0x200018b4
 8003b44:	200018ba 	.word	0x200018ba
 8003b48:	20000304 	.word	0x20000304
 8003b4c:	080267e0 	.word	0x080267e0
 8003b50:	20000edc 	.word	0x20000edc
 8003b54:	20000ee8 	.word	0x20000ee8
 8003b58:	080267f0 	.word	0x080267f0
			}
			else
			{
				LinkEstablishFlag = RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 8003b62:	78ba      	ldrb	r2, [r7, #2]
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4ab0      	ldr	r2, [pc, #704]	; (8003e30 <Vital_Msg_extr+0x1124>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	3305      	adds	r3, #5
 8003b72:	2210      	movs	r2, #16
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f020 fe06 	bl	8024788 <memset>
		}
	}


	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8003b7c:	78ba      	ldrb	r2, [r7, #2]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4aab      	ldr	r2, [pc, #684]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f020 fdf9 	bl	8024788 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003b96:	78ba      	ldrb	r2, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4aa4      	ldr	r2, [pc, #656]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	1c58      	adds	r0, r3, #1
 8003ba6:	78ba      	ldrb	r2, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4a9f      	ldr	r2, [pc, #636]	; (8003e30 <Vital_Msg_extr+0x1124>)
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3305      	adds	r3, #5
 8003bb6:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f020 fdbc 	bl	8024738 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003bc0:	78ba      	ldrb	r2, [r7, #2]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4a9a      	ldr	r2, [pc, #616]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003bd4:	b212      	sxth	r2, r2
 8003bd6:	78bc      	ldrb	r4, [r7, #2]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f010 f890 	bl	8013d00 <GetCRC16>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4619      	mov	r1, r3
 8003be4:	4a93      	ldr	r2, [pc, #588]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003be6:	4623      	mov	r3, r4
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4423      	add	r3, r4
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	3312      	adds	r3, #18
 8003bf2:	460a      	mov	r2, r1
 8003bf4:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003bf6:	78ba      	ldrb	r2, [r7, #2]
 8003bf8:	498e      	ldr	r1, [pc, #568]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3311      	adds	r3, #17
 8003c06:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003c0a:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003c0c:	78ba      	ldrb	r2, [r7, #2]
 8003c0e:	4989      	ldr	r1, [pc, #548]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	78ba      	ldrb	r2, [r7, #2]
 8003c1c:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003c1e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d174      	bne.n	8003d10 <Vital_Msg_extr+0x1004>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003c26:	78ba      	ldrb	r2, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a81      	ldr	r2, [pc, #516]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003c32:	4413      	add	r3, r2
 8003c34:	3301      	adds	r3, #1
 8003c36:	2210      	movs	r2, #16
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f020 fda4 	bl	8024788 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003c40:	78ba      	ldrb	r2, [r7, #2]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a7b      	ldr	r2, [pc, #492]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003c4c:	1898      	adds	r0, r3, r2
 8003c4e:	78ba      	ldrb	r2, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a76      	ldr	r2, [pc, #472]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003c5a:	4413      	add	r3, r2
 8003c5c:	2214      	movs	r2, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f020 fd6a 	bl	8024738 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003c64:	78bb      	ldrb	r3, [r7, #2]
 8003c66:	4975      	ldr	r1, [pc, #468]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003c68:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003c70:	78bb      	ldrb	r3, [r7, #2]
 8003c72:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <Vital_Msg_extr+0x1134>)
 8003c74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003c78:	78ba      	ldrb	r2, [r7, #2]
 8003c7a:	486f      	ldr	r0, [pc, #444]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	3312      	adds	r3, #18
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	4299      	cmp	r1, r3
 8003c8c:	d040      	beq.n	8003d10 <Vital_Msg_extr+0x1004>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003c8e:	78ba      	ldrb	r2, [r7, #2]
 8003c90:	78b9      	ldrb	r1, [r7, #2]
 8003c92:	4869      	ldr	r0, [pc, #420]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4403      	add	r3, r0
 8003c9e:	3312      	adds	r3, #18
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <Vital_Msg_extr+0x1134>)
 8003ca4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003ca8:	2214      	movs	r2, #20
 8003caa:	2100      	movs	r1, #0
 8003cac:	4865      	ldr	r0, [pc, #404]	; (8003e44 <Vital_Msg_extr+0x1138>)
 8003cae:	f020 fd6b 	bl	8024788 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003cb2:	78ba      	ldrb	r2, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a5e      	ldr	r2, [pc, #376]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	2214      	movs	r2, #20
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	485f      	ldr	r0, [pc, #380]	; (8003e44 <Vital_Msg_extr+0x1138>)
 8003cc6:	f020 fd37 	bl	8024738 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8003cca:	f240 2007 	movw	r0, #519	; 0x207
 8003cce:	f00c f8db 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 8003cd2:	78bb      	ldrb	r3, [r7, #2]
 8003cd4:	4a5c      	ldr	r2, [pc, #368]	; (8003e48 <Vital_Msg_extr+0x113c>)
 8003cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d118      	bne.n	8003d10 <Vital_Msg_extr+0x1004>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003cde:	78bb      	ldrb	r3, [r7, #2]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4a5a      	ldr	r2, [pc, #360]	; (8003e4c <Vital_Msg_extr+0x1140>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	1c98      	adds	r0, r3, #2
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4a51      	ldr	r2, [pc, #324]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f020 fd1c 	bl	8024738 <memcpy>
#ifdef EI_1

#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif
				TransmitCanPkt(EI_PROCESS_DATA);
 8003d00:	f240 1019 	movw	r0, #281	; 0x119
 8003d04:	f00c f8c0 	bl	800fe88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8003d08:	4a51      	ldr	r2, [pc, #324]	; (8003e50 <Vital_Msg_extr+0x1144>)
 8003d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d0e:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003d10:	78b9      	ldrb	r1, [r7, #2]
 8003d12:	78ba      	ldrb	r2, [r7, #2]
 8003d14:	4848      	ldr	r0, [pc, #288]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003d16:	460b      	mov	r3, r1
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4403      	add	r3, r0
 8003d20:	3312      	adds	r3, #18
 8003d22:	8818      	ldrh	r0, [r3, #0]
 8003d24:	494b      	ldr	r1, [pc, #300]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	440b      	add	r3, r1
 8003d30:	3306      	adds	r3, #6
 8003d32:	4602      	mov	r2, r0
 8003d34:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003d36:	78ba      	ldrb	r2, [r7, #2]
 8003d38:	4946      	ldr	r1, [pc, #280]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	440b      	add	r3, r1
 8003d44:	3314      	adds	r3, #20
 8003d46:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003d4a:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003d4c:	78ba      	ldrb	r2, [r7, #2]
 8003d4e:	4941      	ldr	r1, [pc, #260]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	3305      	adds	r3, #5
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003d60:	78ba      	ldrb	r2, [r7, #2]
 8003d62:	493c      	ldr	r1, [pc, #240]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	440b      	add	r3, r1
 8003d6e:	78ba      	ldrb	r2, [r7, #2]
 8003d70:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003d72:	78ba      	ldrb	r2, [r7, #2]
 8003d74:	4937      	ldr	r1, [pc, #220]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	3301      	adds	r3, #1
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003d86:	78ba      	ldrb	r2, [r7, #2]
 8003d88:	4932      	ldr	r1, [pc, #200]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	3302      	adds	r3, #2
 8003d96:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8003d9a:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003d9c:	2218      	movs	r2, #24
 8003d9e:	2100      	movs	r1, #0
 8003da0:	482d      	ldr	r0, [pc, #180]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003da2:	f020 fcf1 	bl	8024788 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003da6:	78ba      	ldrb	r2, [r7, #2]
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003db2:	4413      	add	r3, r2
 8003db4:	2218      	movs	r2, #24
 8003db6:	4619      	mov	r1, r3
 8003db8:	4827      	ldr	r0, [pc, #156]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003dba:	f020 fcbd 	bl	8024738 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8003dbe:	f240 2001 	movw	r0, #513	; 0x201
 8003dc2:	f00c f861 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003dc6:	78ba      	ldrb	r2, [r7, #2]
 8003dc8:	4922      	ldr	r1, [pc, #136]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003dda:	78bb      	ldrb	r3, [r7, #2]
 8003ddc:	491f      	ldr	r1, [pc, #124]	; (8003e5c <Vital_Msg_extr+0x1150>)
 8003dde:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003de6:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d13e      	bne.n	8003e6c <Vital_Msg_extr+0x1160>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003dee:	78bb      	ldrb	r3, [r7, #2]
 8003df0:	491b      	ldr	r1, [pc, #108]	; (8003e60 <Vital_Msg_extr+0x1154>)
 8003df2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003dfa:	78ba      	ldrb	r2, [r7, #2]
 8003dfc:	4919      	ldr	r1, [pc, #100]	; (8003e64 <Vital_Msg_extr+0x1158>)
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	3304      	adds	r3, #4
 8003e0a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e0e:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003e10:	78ba      	ldrb	r2, [r7, #2]
 8003e12:	4914      	ldr	r1, [pc, #80]	; (8003e64 <Vital_Msg_extr+0x1158>)
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3301      	adds	r3, #1
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8003e24:	78bb      	ldrb	r3, [r7, #2]
 8003e26:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <Vital_Msg_extr+0x115c>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	54d1      	strb	r1, [r2, r3]
 8003e2c:	e04e      	b.n	8003ecc <Vital_Msg_extr+0x11c0>
 8003e2e:	bf00      	nop
 8003e30:	200013d4 	.word	0x200013d4
 8003e34:	20001de8 	.word	0x20001de8
 8003e38:	20001eb0 	.word	0x20001eb0
 8003e3c:	20000f08 	.word	0x20000f08
 8003e40:	20000f30 	.word	0x20000f30
 8003e44:	20002040 	.word	0x20002040
 8003e48:	20000ef4 	.word	0x20000ef4
 8003e4c:	20001114 	.word	0x20001114
 8003e50:	20000e88 	.word	0x20000e88
 8003e54:	200016a4 	.word	0x200016a4
 8003e58:	20001884 	.word	0x20001884
 8003e5c:	20000e5c 	.word	0x20000e5c
 8003e60:	20000f44 	.word	0x20000f44
 8003e64:	20001cf8 	.word	0x20001cf8
 8003e68:	20000f94 	.word	0x20000f94
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8003e6c:	78bb      	ldrb	r3, [r7, #2]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <Vital_Msg_extr+0x11d0>)
 8003e70:	2100      	movs	r1, #0
 8003e72:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003e74:	78ba      	ldrb	r2, [r7, #2]
 8003e76:	491a      	ldr	r1, [pc, #104]	; (8003ee0 <Vital_Msg_extr+0x11d4>)
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3308      	adds	r3, #8
 8003e84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e88:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8003e8a:	78ba      	ldrb	r2, [r7, #2]
 8003e8c:	4914      	ldr	r1, [pc, #80]	; (8003ee0 <Vital_Msg_extr+0x11d4>)
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	3301      	adds	r3, #1
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003e9e:	78ba      	ldrb	r2, [r7, #2]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <Vital_Msg_extr+0x11d8>)
 8003eaa:	4413      	add	r3, r2
 8003eac:	3301      	adds	r3, #1
 8003eae:	2210      	movs	r2, #16
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f020 fc68 	bl	8024788 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8003eb8:	78ba      	ldrb	r2, [r7, #2]
 8003eba:	490a      	ldr	r1, [pc, #40]	; (8003ee4 <Vital_Msg_extr+0x11d8>)
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3312      	adds	r3, #18
 8003ec8:	2200      	movs	r2, #0
 8003eca:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ed0:	4805      	ldr	r0, [pc, #20]	; (8003ee8 <Vital_Msg_extr+0x11dc>)
 8003ed2:	f016 fa20 	bl	801a316 <HAL_GPIO_TogglePin>

}
 8003ed6:	37ac      	adds	r7, #172	; 0xac
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	20000f94 	.word	0x20000f94
 8003ee0:	20001cf8 	.word	0x20001cf8
 8003ee4:	20001eb0 	.word	0x20001eb0
 8003ee8:	40021c00 	.word	0x40021c00

08003eec <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b0a5      	sub	sp, #148	; 0x94
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	71fb      	strb	r3, [r7, #7]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003efc:	2300      	movs	r3, #0
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f04:	2238      	movs	r2, #56	; 0x38
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f020 fc3d 	bl	8024788 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	f107 0310 	add.w	r3, r7, #16
 8003f16:	2238      	movs	r2, #56	; 0x38
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f020 fc34 	bl	8024788 <memset>
	uint8_t uc_index = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003f32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f36:	223c      	movs	r2, #60	; 0x3c
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f020 fc24 	bl	8024788 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003f40:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f48:	441a      	add	r2, r3
 8003f4a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f4e:	23f4      	movs	r3, #244	; 0xf4
 8003f50:	2108      	movs	r1, #8
 8003f52:	f7fc fbeb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003f56:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da00      	bge.n	8003f62 <Send_Vital_Data_Message+0x76>
 8003f60:	3307      	adds	r3, #7
 8003f62:	10db      	asrs	r3, r3, #3
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f74:	3308      	adds	r3, #8
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	b21b      	sxth	r3, r3
 8003f7a:	425a      	negs	r2, r3
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	f002 0207 	and.w	r2, r2, #7
 8003f84:	bf58      	it	pl
 8003f86:	4253      	negpl	r3, r2
 8003f88:	b21b      	sxth	r3, r3
 8003f8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003f8e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f96:	441a      	add	r2, r3
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	49c6      	ldr	r1, [pc, #792]	; (80042b4 <Send_Vital_Data_Message+0x3c8>)
 8003f9c:	3366      	adds	r3, #102	; 0x66
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fa8:	2110      	movs	r1, #16
 8003faa:	f7fc fbbf 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003fae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003fb2:	3310      	adds	r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	da00      	bge.n	8003fba <Send_Vital_Data_Message+0xce>
 8003fb8:	3307      	adds	r3, #7
 8003fba:	10db      	asrs	r3, r3, #3
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003fc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fcc:	3310      	adds	r3, #16
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	425a      	negs	r2, r3
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	f002 0207 	and.w	r2, r2, #7
 8003fdc:	bf58      	it	pl
 8003fde:	4253      	negpl	r3, r2
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003fe6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fee:	441a      	add	r2, r3
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	49b0      	ldr	r1, [pc, #704]	; (80042b4 <Send_Vital_Data_Message+0x3c8>)
 8003ff4:	3370      	adds	r3, #112	; 0x70
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004000:	2110      	movs	r1, #16
 8004002:	f7fc fb93 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8004006:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800400a:	3310      	adds	r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	da00      	bge.n	8004012 <Send_Vital_Data_Message+0x126>
 8004010:	3307      	adds	r3, #7
 8004012:	10db      	asrs	r3, r3, #3
 8004014:	b29a      	uxth	r2, r3
 8004016:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800401a:	4413      	add	r3, r2
 800401c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004020:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004024:	3310      	adds	r3, #16
 8004026:	b29b      	uxth	r3, r3
 8004028:	b21b      	sxth	r3, r3
 800402a:	425a      	negs	r2, r3
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	f002 0207 	and.w	r2, r2, #7
 8004034:	bf58      	it	pl
 8004036:	4253      	negpl	r3, r2
 8004038:	b21b      	sxth	r3, r3
 800403a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800403e:	4b9e      	ldr	r3, [pc, #632]	; (80042b8 <Send_Vital_Data_Message+0x3cc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d035      	beq.n	80040b8 <Send_Vital_Data_Message+0x1cc>
 800404c:	4b9a      	ldr	r3, [pc, #616]	; (80042b8 <Send_Vital_Data_Message+0x3cc>)
 800404e:	791b      	ldrb	r3, [r3, #4]
 8004050:	79fa      	ldrb	r2, [r7, #7]
 8004052:	429a      	cmp	r2, r3
 8004054:	d130      	bne.n	80040b8 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800405c:	4897      	ldr	r0, [pc, #604]	; (80042bc <Send_Vital_Data_Message+0x3d0>)
 800405e:	f018 f923 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8004062:	4602      	mov	r2, r0
 8004064:	4b96      	ldr	r3, [pc, #600]	; (80042c0 <Send_Vital_Data_Message+0x3d4>)
 8004066:	fba3 1302 	umull	r1, r3, r3, r2
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	21c8      	movs	r1, #200	; 0xc8
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8004078:	4892      	ldr	r0, [pc, #584]	; (80042c4 <Send_Vital_Data_Message+0x3d8>)
 800407a:	f020 fd09 	bl	8024a90 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	4a91      	ldr	r2, [pc, #580]	; (80042c8 <Send_Vital_Data_Message+0x3dc>)
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	4413      	add	r3, r2
 8004086:	3301      	adds	r3, #1
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	4619      	mov	r1, r3
 800408c:	488f      	ldr	r0, [pc, #572]	; (80042cc <Send_Vital_Data_Message+0x3e0>)
 800408e:	f020 fc63 	bl	8024958 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8004092:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004096:	4619      	mov	r1, r3
 8004098:	488d      	ldr	r0, [pc, #564]	; (80042d0 <Send_Vital_Data_Message+0x3e4>)
 800409a:	f020 fc5d 	bl	8024958 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 800409e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040a6:	441a      	add	r2, r3
 80040a8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80040ac:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040b0:	2108      	movs	r1, #8
 80040b2:	f7fc fb3b 	bl	800072c <InsertBits>
	{
 80040b6:	e00f      	b.n	80040d8 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80040b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040c0:	441a      	add	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	4980      	ldr	r1, [pc, #512]	; (80042c8 <Send_Vital_Data_Message+0x3dc>)
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	440b      	add	r3, r1
 80040ca:	3301      	adds	r3, #1
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040d2:	2108      	movs	r1, #8
 80040d4:	f7fc fb2a 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80040d8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040dc:	3308      	adds	r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	da00      	bge.n	80040e4 <Send_Vital_Data_Message+0x1f8>
 80040e2:	3307      	adds	r3, #7
 80040e4:	10db      	asrs	r3, r3, #3
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040ec:	4413      	add	r3, r2
 80040ee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040f6:	3308      	adds	r3, #8
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b21b      	sxth	r3, r3
 80040fc:	425a      	negs	r2, r3
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	f002 0207 	and.w	r2, r2, #7
 8004106:	bf58      	it	pl
 8004108:	4253      	negpl	r3, r2
 800410a:	b21b      	sxth	r3, r3
 800410c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004110:	4b69      	ldr	r3, [pc, #420]	; (80042b8 <Send_Vital_Data_Message+0x3cc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	08db      	lsrs	r3, r3, #3
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d035      	beq.n	800418a <Send_Vital_Data_Message+0x29e>
 800411e:	4b66      	ldr	r3, [pc, #408]	; (80042b8 <Send_Vital_Data_Message+0x3cc>)
 8004120:	791b      	ldrb	r3, [r3, #4]
 8004122:	79fa      	ldrb	r2, [r7, #7]
 8004124:	429a      	cmp	r2, r3
 8004126:	d130      	bne.n	800418a <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 800412e:	4863      	ldr	r0, [pc, #396]	; (80042bc <Send_Vital_Data_Message+0x3d0>)
 8004130:	f018 f8ba 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8004134:	4602      	mov	r2, r0
 8004136:	4b62      	ldr	r3, [pc, #392]	; (80042c0 <Send_Vital_Data_Message+0x3d4>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	21c8      	movs	r1, #200	; 0xc8
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 800414a:	4862      	ldr	r0, [pc, #392]	; (80042d4 <Send_Vital_Data_Message+0x3e8>)
 800414c:	f020 fca0 	bl	8024a90 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	4a5d      	ldr	r2, [pc, #372]	; (80042c8 <Send_Vital_Data_Message+0x3dc>)
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	4413      	add	r3, r2
 8004158:	3302      	adds	r3, #2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	4619      	mov	r1, r3
 800415e:	485e      	ldr	r0, [pc, #376]	; (80042d8 <Send_Vital_Data_Message+0x3ec>)
 8004160:	f020 fbfa 	bl	8024958 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004164:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004168:	4619      	mov	r1, r3
 800416a:	485c      	ldr	r0, [pc, #368]	; (80042dc <Send_Vital_Data_Message+0x3f0>)
 800416c:	f020 fbf4 	bl	8024958 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8004170:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004174:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004178:	441a      	add	r2, r3
 800417a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800417e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004182:	2108      	movs	r1, #8
 8004184:	f7fc fad2 	bl	800072c <InsertBits>
	{
 8004188:	e00f      	b.n	80041aa <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 800418a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800418e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004192:	441a      	add	r2, r3
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	494c      	ldr	r1, [pc, #304]	; (80042c8 <Send_Vital_Data_Message+0x3dc>)
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	440b      	add	r3, r1
 800419c:	3302      	adds	r3, #2
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041a4:	2108      	movs	r1, #8
 80041a6:	f7fc fac1 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 80041aa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041ae:	3308      	adds	r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da00      	bge.n	80041b6 <Send_Vital_Data_Message+0x2ca>
 80041b4:	3307      	adds	r3, #7
 80041b6:	10db      	asrs	r3, r3, #3
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041be:	4413      	add	r3, r2
 80041c0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041c8:	3308      	adds	r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b21b      	sxth	r3, r3
 80041ce:	425a      	negs	r2, r3
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	f002 0207 	and.w	r2, r2, #7
 80041d8:	bf58      	it	pl
 80041da:	4253      	negpl	r3, r2
 80041dc:	b21b      	sxth	r3, r3
 80041de:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80041e2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041ea:	441a      	add	r2, r3
 80041ec:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041f0:	2302      	movs	r3, #2
 80041f2:	2108      	movs	r1, #8
 80041f4:	f7fc fa9a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041f8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041fc:	3308      	adds	r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da00      	bge.n	8004204 <Send_Vital_Data_Message+0x318>
 8004202:	3307      	adds	r3, #7
 8004204:	10db      	asrs	r3, r3, #3
 8004206:	b29a      	uxth	r2, r3
 8004208:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800420c:	4413      	add	r3, r2
 800420e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004212:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004216:	3308      	adds	r3, #8
 8004218:	b29b      	uxth	r3, r3
 800421a:	b21b      	sxth	r3, r3
 800421c:	425a      	negs	r2, r3
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	f002 0207 	and.w	r2, r2, #7
 8004226:	bf58      	it	pl
 8004228:	4253      	negpl	r3, r2
 800422a:	b21b      	sxth	r3, r3
 800422c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	4a2b      	ldr	r2, [pc, #172]	; (80042e0 <Send_Vital_Data_Message+0x3f4>)
 8004234:	5cd3      	ldrb	r3, [r2, r3]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d15a      	bne.n	80042f0 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800423a:	f007 fbf7 	bl	800ba2c <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800423e:	79fa      	ldrb	r2, [r7, #7]
 8004240:	4613      	mov	r3, r2
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	4413      	add	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <Send_Vital_Data_Message+0x3f8>)
 800424a:	4413      	add	r3, r2
 800424c:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <Send_Vital_Data_Message+0x3fc>)
 800424e:	6811      	ldr	r1, [r2, #0]
 8004250:	6019      	str	r1, [r3, #0]
 8004252:	8892      	ldrh	r2, [r2, #4]
 8004254:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8004256:	4825      	ldr	r0, [pc, #148]	; (80042ec <Send_Vital_Data_Message+0x400>)
 8004258:	f020 fc1a 	bl	8024a90 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <Send_Vital_Data_Message+0x3f4>)
 8004260:	2100      	movs	r1, #0
 8004262:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004264:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004268:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800426c:	441a      	add	r2, r3
 800426e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004272:	2368      	movs	r3, #104	; 0x68
 8004274:	2110      	movs	r1, #16
 8004276:	f7fc fa59 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800427a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800427e:	3310      	adds	r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	da00      	bge.n	8004286 <Send_Vital_Data_Message+0x39a>
 8004284:	3307      	adds	r3, #7
 8004286:	10db      	asrs	r3, r3, #3
 8004288:	b29a      	uxth	r2, r3
 800428a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800428e:	4413      	add	r3, r2
 8004290:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004294:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004298:	3310      	adds	r3, #16
 800429a:	b29b      	uxth	r3, r3
 800429c:	b21b      	sxth	r3, r3
 800429e:	425a      	negs	r2, r3
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	f002 0207 	and.w	r2, r2, #7
 80042a8:	bf58      	it	pl
 80042aa:	4253      	negpl	r3, r2
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80042b2:	e044      	b.n	800433e <Send_Vital_Data_Message+0x452>
 80042b4:	20000304 	.word	0x20000304
 80042b8:	2000198c 	.word	0x2000198c
 80042bc:	2000f3c4 	.word	0x2000f3c4
 80042c0:	51eb851f 	.word	0x51eb851f
 80042c4:	08026804 	.word	0x08026804
 80042c8:	200011f4 	.word	0x200011f4
 80042cc:	08026828 	.word	0x08026828
 80042d0:	08026848 	.word	0x08026848
 80042d4:	08026510 	.word	0x08026510
 80042d8:	08026534 	.word	0x08026534
 80042dc:	08026554 	.word	0x08026554
 80042e0:	20001108 	.word	0x20001108
 80042e4:	200011b8 	.word	0x200011b8
 80042e8:	200028e4 	.word	0x200028e4
 80042ec:	08026868 	.word	0x08026868
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 80042f0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042f8:	441a      	add	r2, r3
 80042fa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042fe:	2328      	movs	r3, #40	; 0x28
 8004300:	2110      	movs	r1, #16
 8004302:	f7fc fa13 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004306:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800430a:	3310      	adds	r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	da00      	bge.n	8004312 <Send_Vital_Data_Message+0x426>
 8004310:	3307      	adds	r3, #7
 8004312:	10db      	asrs	r3, r3, #3
 8004314:	b29a      	uxth	r2, r3
 8004316:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800431a:	4413      	add	r3, r2
 800431c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004320:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004324:	3310      	adds	r3, #16
 8004326:	b29b      	uxth	r3, r3
 8004328:	b21b      	sxth	r3, r3
 800432a:	425a      	negs	r2, r3
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	f002 0207 	and.w	r2, r2, #7
 8004334:	bf58      	it	pl
 8004336:	4253      	negpl	r3, r2
 8004338:	b21b      	sxth	r3, r3
 800433a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800433e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004342:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004346:	18d1      	adds	r1, r2, r3
 8004348:	79fa      	ldrb	r2, [r7, #7]
 800434a:	48cd      	ldr	r0, [pc, #820]	; (8004680 <Send_Vital_Data_Message+0x794>)
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4403      	add	r3, r0
 8004356:	3305      	adds	r3, #5
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800435e:	460a      	mov	r2, r1
 8004360:	2108      	movs	r1, #8
 8004362:	f7fc f9e3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004366:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800436a:	3308      	adds	r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	da00      	bge.n	8004372 <Send_Vital_Data_Message+0x486>
 8004370:	3307      	adds	r3, #7
 8004372:	10db      	asrs	r3, r3, #3
 8004374:	b29a      	uxth	r2, r3
 8004376:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800437a:	4413      	add	r3, r2
 800437c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004380:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004384:	3308      	adds	r3, #8
 8004386:	b29b      	uxth	r3, r3
 8004388:	b21b      	sxth	r3, r3
 800438a:	425a      	negs	r2, r3
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	f002 0207 	and.w	r2, r2, #7
 8004394:	bf58      	it	pl
 8004396:	4253      	negpl	r3, r2
 8004398:	b21b      	sxth	r3, r3
 800439a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 800439e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043a6:	18d1      	adds	r1, r2, r3
 80043a8:	79fa      	ldrb	r2, [r7, #7]
 80043aa:	48b5      	ldr	r0, [pc, #724]	; (8004680 <Send_Vital_Data_Message+0x794>)
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4403      	add	r3, r0
 80043b6:	3304      	adds	r3, #4
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043be:	460a      	mov	r2, r1
 80043c0:	2108      	movs	r1, #8
 80043c2:	f7fc f9b3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043c6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043ca:	3308      	adds	r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da00      	bge.n	80043d2 <Send_Vital_Data_Message+0x4e6>
 80043d0:	3307      	adds	r3, #7
 80043d2:	10db      	asrs	r3, r3, #3
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043da:	4413      	add	r3, r2
 80043dc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043e4:	3308      	adds	r3, #8
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	425a      	negs	r2, r3
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	f002 0207 	and.w	r2, r2, #7
 80043f4:	bf58      	it	pl
 80043f6:	4253      	negpl	r3, r2
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 80043fe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004402:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004406:	18d1      	adds	r1, r2, r3
 8004408:	79fa      	ldrb	r2, [r7, #7]
 800440a:	489d      	ldr	r0, [pc, #628]	; (8004680 <Send_Vital_Data_Message+0x794>)
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4403      	add	r3, r0
 8004416:	3303      	adds	r3, #3
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800441e:	460a      	mov	r2, r1
 8004420:	2108      	movs	r1, #8
 8004422:	f7fc f983 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004426:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800442a:	3308      	adds	r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	da00      	bge.n	8004432 <Send_Vital_Data_Message+0x546>
 8004430:	3307      	adds	r3, #7
 8004432:	10db      	asrs	r3, r3, #3
 8004434:	b29a      	uxth	r2, r3
 8004436:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800443a:	4413      	add	r3, r2
 800443c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004440:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004444:	3308      	adds	r3, #8
 8004446:	b29b      	uxth	r3, r3
 8004448:	b21b      	sxth	r3, r3
 800444a:	425a      	negs	r2, r3
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	f002 0207 	and.w	r2, r2, #7
 8004454:	bf58      	it	pl
 8004456:	4253      	negpl	r3, r2
 8004458:	b21b      	sxth	r3, r3
 800445a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 800445e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004462:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004466:	18d1      	adds	r1, r2, r3
 8004468:	79fa      	ldrb	r2, [r7, #7]
 800446a:	4885      	ldr	r0, [pc, #532]	; (8004680 <Send_Vital_Data_Message+0x794>)
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4403      	add	r3, r0
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800447c:	460a      	mov	r2, r1
 800447e:	2108      	movs	r1, #8
 8004480:	f7fc f954 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004484:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004488:	3308      	adds	r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	da00      	bge.n	8004490 <Send_Vital_Data_Message+0x5a4>
 800448e:	3307      	adds	r3, #7
 8004490:	10db      	asrs	r3, r3, #3
 8004492:	b29a      	uxth	r2, r3
 8004494:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004498:	4413      	add	r3, r2
 800449a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800449e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80044a2:	3308      	adds	r3, #8
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	b21b      	sxth	r3, r3
 80044a8:	425a      	negs	r2, r3
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	f002 0207 	and.w	r2, r2, #7
 80044b2:	bf58      	it	pl
 80044b4:	4253      	negpl	r3, r2
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80044bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044c4:	18d1      	adds	r1, r2, r3
 80044c6:	79fa      	ldrb	r2, [r7, #7]
 80044c8:	486d      	ldr	r0, [pc, #436]	; (8004680 <Send_Vital_Data_Message+0x794>)
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4403      	add	r3, r0
 80044d4:	3301      	adds	r3, #1
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80044dc:	460a      	mov	r2, r1
 80044de:	2108      	movs	r1, #8
 80044e0:	f7fc f924 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80044e4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80044e8:	3308      	adds	r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da00      	bge.n	80044f0 <Send_Vital_Data_Message+0x604>
 80044ee:	3307      	adds	r3, #7
 80044f0:	10db      	asrs	r3, r3, #3
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044f8:	4413      	add	r3, r2
 80044fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80044fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004502:	3308      	adds	r3, #8
 8004504:	b29b      	uxth	r3, r3
 8004506:	b21b      	sxth	r3, r3
 8004508:	425a      	negs	r2, r3
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	f002 0207 	and.w	r2, r2, #7
 8004512:	bf58      	it	pl
 8004514:	4253      	negpl	r3, r2
 8004516:	b21b      	sxth	r3, r3
 8004518:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 800451c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004520:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004524:	18d1      	adds	r1, r2, r3
 8004526:	79fa      	ldrb	r2, [r7, #7]
 8004528:	4855      	ldr	r0, [pc, #340]	; (8004680 <Send_Vital_Data_Message+0x794>)
 800452a:	4613      	mov	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4413      	add	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4403      	add	r3, r0
 8004534:	3302      	adds	r3, #2
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800453c:	460a      	mov	r2, r1
 800453e:	2108      	movs	r1, #8
 8004540:	f7fc f8f4 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004544:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004548:	3308      	adds	r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	da00      	bge.n	8004550 <Send_Vital_Data_Message+0x664>
 800454e:	3307      	adds	r3, #7
 8004550:	10db      	asrs	r3, r3, #3
 8004552:	b29a      	uxth	r2, r3
 8004554:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004558:	4413      	add	r3, r2
 800455a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800455e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004562:	3308      	adds	r3, #8
 8004564:	b29b      	uxth	r3, r3
 8004566:	b21b      	sxth	r3, r3
 8004568:	425a      	negs	r2, r3
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	f002 0207 	and.w	r2, r2, #7
 8004572:	bf58      	it	pl
 8004574:	4253      	negpl	r3, r2
 8004576:	b21b      	sxth	r3, r3
 8004578:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 800457c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004580:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004584:	441a      	add	r2, r3
 8004586:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800458a:	2301      	movs	r3, #1
 800458c:	2108      	movs	r1, #8
 800458e:	f7fc f8cd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004592:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004596:	3308      	adds	r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	da00      	bge.n	800459e <Send_Vital_Data_Message+0x6b2>
 800459c:	3307      	adds	r3, #7
 800459e:	10db      	asrs	r3, r3, #3
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045a6:	4413      	add	r3, r2
 80045a8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045b0:	3308      	adds	r3, #8
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	b21b      	sxth	r3, r3
 80045b6:	425a      	negs	r2, r3
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	f002 0207 	and.w	r2, r2, #7
 80045c0:	bf58      	it	pl
 80045c2:	4253      	negpl	r3, r2
 80045c4:	b21b      	sxth	r3, r3
 80045c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 80045ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045d2:	441a      	add	r2, r3
 80045d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80045d8:	2300      	movs	r3, #0
 80045da:	2108      	movs	r1, #8
 80045dc:	f7fc f8a6 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80045e0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80045e4:	3308      	adds	r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da00      	bge.n	80045ec <Send_Vital_Data_Message+0x700>
 80045ea:	3307      	adds	r3, #7
 80045ec:	10db      	asrs	r3, r3, #3
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045f4:	4413      	add	r3, r2
 80045f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045fe:	3308      	adds	r3, #8
 8004600:	b29b      	uxth	r3, r3
 8004602:	b21b      	sxth	r3, r3
 8004604:	425a      	negs	r2, r3
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	f002 0207 	and.w	r2, r2, #7
 800460e:	bf58      	it	pl
 8004610:	4253      	negpl	r3, r2
 8004612:	b21b      	sxth	r3, r3
 8004614:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004618:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800461c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004620:	441a      	add	r2, r3
 8004622:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004626:	2301      	movs	r3, #1
 8004628:	2108      	movs	r1, #8
 800462a:	f7fc f87f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800462e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004632:	3308      	adds	r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	da00      	bge.n	800463a <Send_Vital_Data_Message+0x74e>
 8004638:	3307      	adds	r3, #7
 800463a:	10db      	asrs	r3, r3, #3
 800463c:	b29a      	uxth	r2, r3
 800463e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004642:	4413      	add	r3, r2
 8004644:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004648:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800464c:	3308      	adds	r3, #8
 800464e:	b29b      	uxth	r3, r3
 8004650:	b21b      	sxth	r3, r3
 8004652:	425a      	negs	r2, r3
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	f002 0207 	and.w	r2, r2, #7
 800465c:	bf58      	it	pl
 800465e:	4253      	negpl	r3, r2
 8004660:	b21b      	sxth	r3, r3
 8004662:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <Send_Vital_Data_Message+0x798>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d02c      	beq.n	80046ce <Send_Vital_Data_Message+0x7e2>
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <Send_Vital_Data_Message+0x798>)
 8004676:	791b      	ldrb	r3, [r3, #4]
 8004678:	79fa      	ldrb	r2, [r7, #7]
 800467a:	429a      	cmp	r2, r3
 800467c:	d127      	bne.n	80046ce <Send_Vital_Data_Message+0x7e2>
 800467e:	e003      	b.n	8004688 <Send_Vital_Data_Message+0x79c>
 8004680:	200011b8 	.word	0x200011b8
 8004684:	2000198c 	.word	0x2000198c
	{
		uint32_t Rand_Number = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 800468e:	484e      	ldr	r0, [pc, #312]	; (80047c8 <Send_Vital_Data_Message+0x8dc>)
 8004690:	f017 fe0a 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8004694:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8004698:	484c      	ldr	r0, [pc, #304]	; (80047cc <Send_Vital_Data_Message+0x8e0>)
 800469a:	f020 f9f9 	bl	8024a90 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	4a4b      	ldr	r2, [pc, #300]	; (80047d0 <Send_Vital_Data_Message+0x8e4>)
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	4413      	add	r3, r2
 80046a6:	330c      	adds	r3, #12
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4619      	mov	r1, r3
 80046ac:	4849      	ldr	r0, [pc, #292]	; (80047d4 <Send_Vital_Data_Message+0x8e8>)
 80046ae:	f020 f953 	bl	8024958 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 80046b2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80046b6:	4848      	ldr	r0, [pc, #288]	; (80047d8 <Send_Vital_Data_Message+0x8ec>)
 80046b8:	f020 f94e 	bl	8024958 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 80046bc:	f107 020c 	add.w	r2, r7, #12
 80046c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046c4:	2118      	movs	r1, #24
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fc f830 	bl	800072c <InsertBits>
	{
 80046cc:	e00b      	b.n	80046e6 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <Send_Vital_Data_Message+0x8e4>)
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	4413      	add	r3, r2
 80046d6:	330c      	adds	r3, #12
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f107 020c 	add.w	r2, r7, #12
 80046de:	2118      	movs	r1, #24
 80046e0:	2000      	movs	r0, #0
 80046e2:	f7fc f823 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80046ec:	e011      	b.n	8004712 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 80046ee:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80046f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80046f6:	3303      	adds	r3, #3
 80046f8:	3290      	adds	r2, #144	; 0x90
 80046fa:	443a      	add	r2, r7
 80046fc:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004700:	3390      	adds	r3, #144	; 0x90
 8004702:	443b      	add	r3, r7
 8004704:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004708:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800470c:	3301      	adds	r3, #1
 800470e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004712:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004716:	b29b      	uxth	r3, r3
 8004718:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800471c:	429a      	cmp	r2, r3
 800471e:	d8e6      	bhi.n	80046ee <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004720:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004724:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004728:	18d4      	adds	r4, r2, r3
 800472a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800472e:	b29b      	uxth	r3, r3
 8004730:	3303      	adds	r3, #3
 8004732:	b29a      	uxth	r2, r3
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f00f fb9a 	bl	8013e74 <CalculateDirectReverseCrc>
 8004740:	4603      	mov	r3, r0
 8004742:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004746:	4622      	mov	r2, r4
 8004748:	2120      	movs	r1, #32
 800474a:	f7fb ffef 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800474e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004752:	3320      	adds	r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	da00      	bge.n	800475a <Send_Vital_Data_Message+0x86e>
 8004758:	3307      	adds	r3, #7
 800475a:	10db      	asrs	r3, r3, #3
 800475c:	b29a      	uxth	r2, r3
 800475e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004762:	4413      	add	r3, r2
 8004764:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004768:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800476c:	3320      	adds	r3, #32
 800476e:	b29b      	uxth	r3, r3
 8004770:	b21b      	sxth	r3, r3
 8004772:	425a      	negs	r2, r3
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	f002 0207 	and.w	r2, r2, #7
 800477c:	bf58      	it	pl
 800477e:	4253      	negpl	r3, r2
 8004780:	b21b      	sxth	r3, r3
 8004782:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <Send_Vital_Data_Message+0x8f0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	0a5b      	lsrs	r3, r3, #9
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <Send_Vital_Data_Message+0x8c0>
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <Send_Vital_Data_Message+0x8f0>)
 8004796:	791b      	ldrb	r3, [r3, #4]
 8004798:	79fa      	ldrb	r2, [r7, #7]
 800479a:	429a      	cmp	r2, r3
 800479c:	d106      	bne.n	80047ac <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 800479e:	4810      	ldr	r0, [pc, #64]	; (80047e0 <Send_Vital_Data_Message+0x8f4>)
 80047a0:	f020 f976 	bl	8024a90 <puts>
		printf("Not Sending Reply");
 80047a4:	480f      	ldr	r0, [pc, #60]	; (80047e4 <Send_Vital_Data_Message+0x8f8>)
 80047a6:	f020 f8d7 	bl	8024958 <iprintf>
 80047aa:	e009      	b.n	80047c0 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80047ac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047b0:	b2d9      	uxtb	r1, r3
 80047b2:	79fa      	ldrb	r2, [r7, #7]
 80047b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047b8:	4618      	mov	r0, r3
 80047ba:	f003 f8c7 	bl	800794c <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	3794      	adds	r7, #148	; 0x94
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd90      	pop	{r4, r7, pc}
 80047c8:	2000f3c4 	.word	0x2000f3c4
 80047cc:	08026880 	.word	0x08026880
 80047d0:	200011f4 	.word	0x200011f4
 80047d4:	080268a4 	.word	0x080268a4
 80047d8:	080268c8 	.word	0x080268c8
 80047dc:	2000198c 	.word	0x2000198c
 80047e0:	080265dc 	.word	0x080265dc
 80047e4:	080265f4 	.word	0x080265f4

080047e8 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b0c0      	sub	sp, #256	; 0x100
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	70fb      	strb	r3, [r7, #3]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70bb      	strb	r3, [r7, #2]
 80047fe:	4613      	mov	r3, r2
 8004800:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004814:	f013 f896 	bl	8017944 <HAL_GetTick>
 8004818:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004822:	2300      	movs	r3, #0
 8004824:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 800482e:	2300      	movs	r3, #0
 8004830:	667b      	str	r3, [r7, #100]	; 0x64
 8004832:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004836:	227c      	movs	r2, #124	; 0x7c
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f01f ffa4 	bl	8024788 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004840:	2300      	movs	r3, #0
 8004842:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004846:	2300      	movs	r3, #0
 8004848:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	b299      	uxth	r1, r3
 8004850:	78ba      	ldrb	r2, [r7, #2]
 8004852:	48c3      	ldr	r0, [pc, #780]	; (8004b60 <Vital_Msg_extr_from_CAN+0x378>)
 8004854:	4613      	mov	r3, r2
 8004856:	015b      	lsls	r3, r3, #5
 8004858:	4413      	add	r3, r2
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	4403      	add	r3, r0
 800485e:	3340      	adds	r3, #64	; 0x40
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	4299      	cmp	r1, r3
 8004864:	d11a      	bne.n	800489c <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 8004866:	78ba      	ldrb	r2, [r7, #2]
 8004868:	4613      	mov	r3, r2
 800486a:	015b      	lsls	r3, r3, #5
 800486c:	4413      	add	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4abb      	ldr	r2, [pc, #748]	; (8004b60 <Vital_Msg_extr_from_CAN+0x378>)
 8004872:	4413      	add	r3, r2
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f01f ff4d 	bl	8024718 <memcmp>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004884:	78bb      	ldrb	r3, [r7, #2]
 8004886:	4ab7      	ldr	r2, [pc, #732]	; (8004b64 <Vital_Msg_extr_from_CAN+0x37c>)
 8004888:	3366      	adds	r3, #102	; 0x66
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	48b5      	ldr	r0, [pc, #724]	; (8004b68 <Vital_Msg_extr_from_CAN+0x380>)
 8004894:	f020 f860 	bl	8024958 <iprintf>
			return;
 8004898:	f000 bda0 	b.w	80053dc <Vital_Msg_extr_from_CAN+0xbf4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	3b05      	subs	r3, #5
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	441a      	add	r2, r3
 80048a4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80048a8:	2120      	movs	r1, #32
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb feb2 	bl	8000614 <ExtractBits>
 80048b0:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80048b4:	4bad      	ldr	r3, [pc, #692]	; (8004b6c <Vital_Msg_extr_from_CAN+0x384>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d034      	beq.n	800492a <Vital_Msg_extr_from_CAN+0x142>
 80048c0:	4baa      	ldr	r3, [pc, #680]	; (8004b6c <Vital_Msg_extr_from_CAN+0x384>)
 80048c2:	791b      	ldrb	r3, [r3, #4]
 80048c4:	78ba      	ldrb	r2, [r7, #2]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d12f      	bne.n	800492a <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 80048ca:	2316      	movs	r3, #22
 80048cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 80048d0:	48a7      	ldr	r0, [pc, #668]	; (8004b70 <Vital_Msg_extr_from_CAN+0x388>)
 80048d2:	f017 fce9 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 80048d6:	4602      	mov	r2, r0
 80048d8:	4ba6      	ldr	r3, [pc, #664]	; (8004b74 <Vital_Msg_extr_from_CAN+0x38c>)
 80048da:	fba3 1302 	umull	r1, r3, r3, r2
 80048de:	0dd9      	lsrs	r1, r3, #23
 80048e0:	460b      	mov	r3, r1
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	1a5b      	subs	r3, r3, r1
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 80048ee:	48a2      	ldr	r0, [pc, #648]	; (8004b78 <Vital_Msg_extr_from_CAN+0x390>)
 80048f0:	f020 f8ce 	bl	8024a90 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048f4:	78ba      	ldrb	r2, [r7, #2]
 80048f6:	49a1      	ldr	r1, [pc, #644]	; (8004b7c <Vital_Msg_extr_from_CAN+0x394>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	3308      	adds	r3, #8
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	489d      	ldr	r0, [pc, #628]	; (8004b80 <Vital_Msg_extr_from_CAN+0x398>)
 800490a:	f020 f825 	bl	8024958 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 800490e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004912:	489c      	ldr	r0, [pc, #624]	; (8004b84 <Vital_Msg_extr_from_CAN+0x39c>)
 8004914:	f020 f820 	bl	8024958 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004918:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800491c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004920:	2118      	movs	r1, #24
 8004922:	2000      	movs	r0, #0
 8004924:	f7fb ff02 	bl	800072c <InsertBits>
	{
 8004928:	e00e      	b.n	8004948 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800492a:	78ba      	ldrb	r2, [r7, #2]
 800492c:	4993      	ldr	r1, [pc, #588]	; (8004b7c <Vital_Msg_extr_from_CAN+0x394>)
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	440b      	add	r3, r1
 8004938:	3308      	adds	r3, #8
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004940:	2118      	movs	r1, #24
 8004942:	2000      	movs	r0, #0
 8004944:	f7fb fef2 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004948:	2300      	movs	r3, #0
 800494a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800494e:	e011      	b.n	8004974 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004950:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	441a      	add	r2, r3
 8004958:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800495c:	3303      	adds	r3, #3
 800495e:	7812      	ldrb	r2, [r2, #0]
 8004960:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004964:	443b      	add	r3, r7
 8004966:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800496a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800496e:	3301      	adds	r3, #1
 8004970:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004974:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	3b05      	subs	r3, #5
 800497c:	429a      	cmp	r2, r3
 800497e:	dbe7      	blt.n	8004950 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8004980:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004984:	b29b      	uxth	r3, r3
 8004986:	3303      	adds	r3, #3
 8004988:	b29a      	uxth	r2, r3
 800498a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f00f fa6f 	bl	8013e74 <CalculateDirectReverseCrc>
 8004996:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 800499a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800499e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049a2:	429a      	cmp	r2, r3
 80049a4:	f000 8104 	beq.w	8004bb0 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3305      	adds	r3, #5
 80049ac:	461a      	mov	r2, r3
 80049ae:	2108      	movs	r1, #8
 80049b0:	2000      	movs	r0, #0
 80049b2:	f7fb fe2f 	bl	8000614 <ExtractBits>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 80ba 	bne.w	8004b32 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80049be:	4872      	ldr	r0, [pc, #456]	; (8004b88 <Vital_Msg_extr_from_CAN+0x3a0>)
 80049c0:	f020 f866 	bl	8024a90 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80049c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049c8:	2280      	movs	r2, #128	; 0x80
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f01f fedb 	bl	8024788 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 80049d2:	78ba      	ldrb	r2, [r7, #2]
 80049d4:	4969      	ldr	r1, [pc, #420]	; (8004b7c <Vital_Msg_extr_from_CAN+0x394>)
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	3308      	adds	r3, #8
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80049ea:	2118      	movs	r1, #24
 80049ec:	2000      	movs	r0, #0
 80049ee:	f7fb fe9d 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80049f8:	e011      	b.n	8004a1e <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80049fa:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a06:	3303      	adds	r3, #3
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a0e:	443b      	add	r3, r7
 8004a10:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004a14:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004a1e:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	3b05      	subs	r3, #5
 8004a26:	429a      	cmp	r2, r3
 8004a28:	dbe7      	blt.n	80049fa <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8004a2a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3303      	adds	r3, #3
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00f fa1a 	bl	8013e74 <CalculateDirectReverseCrc>
 8004a40:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	3b05      	subs	r3, #5
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	441a      	add	r2, r3
 8004a4c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a50:	2120      	movs	r1, #32
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fb fdde 	bl	8000614 <ExtractBits>
 8004a58:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8004a5c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004a60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d14e      	bne.n	8004b06 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 8004a68:	4848      	ldr	r0, [pc, #288]	; (8004b8c <Vital_Msg_extr_from_CAN+0x3a4>)
 8004a6a:	f020 f811 	bl	8024a90 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8004a6e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004a72:	4847      	ldr	r0, [pc, #284]	; (8004b90 <Vital_Msg_extr_from_CAN+0x3a8>)
 8004a74:	f01f ff70 	bl	8024958 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004a78:	78ba      	ldrb	r2, [r7, #2]
 8004a7a:	4940      	ldr	r1, [pc, #256]	; (8004b7c <Vital_Msg_extr_from_CAN+0x394>)
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	3308      	adds	r3, #8
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4841      	ldr	r0, [pc, #260]	; (8004b94 <Vital_Msg_extr_from_CAN+0x3ac>)
 8004a8e:	f01f ff63 	bl	8024958 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8004a92:	78ba      	ldrb	r2, [r7, #2]
 8004a94:	4939      	ldr	r1, [pc, #228]	; (8004b7c <Vital_Msg_extr_from_CAN+0x394>)
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1c59      	adds	r1, r3, #1
 8004aa6:	4835      	ldr	r0, [pc, #212]	; (8004b7c <Vital_Msg_extr_from_CAN+0x394>)
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4403      	add	r3, r0
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	6019      	str	r1, [r3, #0]
 8004ab6:	78b9      	ldrb	r1, [r7, #2]
 8004ab8:	4830      	ldr	r0, [pc, #192]	; (8004b7c <Vital_Msg_extr_from_CAN+0x394>)
 8004aba:	4613      	mov	r3, r2
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4403      	add	r3, r0
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4833      	ldr	r0, [pc, #204]	; (8004b98 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004aca:	010b      	lsls	r3, r1, #4
 8004acc:	4403      	add	r3, r0
 8004ace:	3308      	adds	r3, #8
 8004ad0:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004ad2:	78bb      	ldrb	r3, [r7, #2]
 8004ad4:	4a30      	ldr	r2, [pc, #192]	; (8004b98 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	4413      	add	r3, r2
 8004ada:	3308      	adds	r3, #8
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	482e      	ldr	r0, [pc, #184]	; (8004b9c <Vital_Msg_extr_from_CAN+0x3b4>)
 8004ae2:	f01f ff39 	bl	8024958 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8004ae6:	78bb      	ldrb	r3, [r7, #2]
 8004ae8:	78ba      	ldrb	r2, [r7, #2]
 8004aea:	492b      	ldr	r1, [pc, #172]	; (8004b98 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	440b      	add	r3, r1
 8004af0:	3308      	adds	r3, #8
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	482a      	ldr	r0, [pc, #168]	; (8004ba0 <Vital_Msg_extr_from_CAN+0x3b8>)
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4403      	add	r3, r0
 8004b00:	3308      	adds	r3, #8
 8004b02:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004b04:	e055      	b.n	8004bb2 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004b06:	78bb      	ldrb	r3, [r7, #2]
 8004b08:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <Vital_Msg_extr_from_CAN+0x37c>)
 8004b0a:	3366      	adds	r3, #102	; 0x66
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4823      	ldr	r0, [pc, #140]	; (8004ba4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004b16:	f01f ff1f 	bl	8024958 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004b1a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004b1e:	4822      	ldr	r0, [pc, #136]	; (8004ba8 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004b20:	f01f ff1a 	bl	8024958 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004b24:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004b28:	4820      	ldr	r0, [pc, #128]	; (8004bac <Vital_Msg_extr_from_CAN+0x3c4>)
 8004b2a:	f01f ff15 	bl	8024958 <iprintf>
				return;
 8004b2e:	f000 bc55 	b.w	80053dc <Vital_Msg_extr_from_CAN+0xbf4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004b32:	78bb      	ldrb	r3, [r7, #2]
 8004b34:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <Vital_Msg_extr_from_CAN+0x37c>)
 8004b36:	3366      	adds	r3, #102	; 0x66
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4818      	ldr	r0, [pc, #96]	; (8004ba4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004b42:	f01f ff09 	bl	8024958 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004b46:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004b4a:	4817      	ldr	r0, [pc, #92]	; (8004ba8 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004b4c:	f01f ff04 	bl	8024958 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004b50:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004b54:	4815      	ldr	r0, [pc, #84]	; (8004bac <Vital_Msg_extr_from_CAN+0x3c4>)
 8004b56:	f01f feff 	bl	8024958 <iprintf>
			return;
 8004b5a:	f000 bc3f 	b.w	80053dc <Vital_Msg_extr_from_CAN+0xbf4>
 8004b5e:	bf00      	nop
 8004b60:	200019ac 	.word	0x200019ac
 8004b64:	20000304 	.word	0x20000304
 8004b68:	080268ec 	.word	0x080268ec
 8004b6c:	2000198c 	.word	0x2000198c
 8004b70:	2000f3c4 	.word	0x2000f3c4
 8004b74:	80008001 	.word	0x80008001
 8004b78:	08026608 	.word	0x08026608
 8004b7c:	20001794 	.word	0x20001794
 8004b80:	08026628 	.word	0x08026628
 8004b84:	08026650 	.word	0x08026650
 8004b88:	08026678 	.word	0x08026678
 8004b8c:	08026930 	.word	0x08026930
 8004b90:	080266ac 	.word	0x080266ac
 8004b94:	08026954 	.word	0x08026954
 8004b98:	200011f4 	.word	0x200011f4
 8004b9c:	080266ec 	.word	0x080266ec
 8004ba0:	200016a4 	.word	0x200016a4
 8004ba4:	08026970 	.word	0x08026970
 8004ba8:	08026348 	.word	0x08026348
 8004bac:	08026358 	.word	0x08026358
		}
	}
	ROLLOVER_VITAL_CAN:
 8004bb0:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004bb2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	da00      	bge.n	8004bbe <Vital_Msg_extr_from_CAN+0x3d6>
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	10db      	asrs	r3, r3, #3
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bcc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	b21b      	sxth	r3, r3
 8004bd6:	425a      	negs	r2, r3
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	f002 0207 	and.w	r2, r2, #7
 8004be0:	bf58      	it	pl
 8004be2:	4253      	negpl	r3, r2
 8004be4:	b21b      	sxth	r3, r3
 8004be6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004bea:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bf6:	2110      	movs	r1, #16
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fb fd0b 	bl	8000614 <ExtractBits>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004c06:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	48c6      	ldr	r0, [pc, #792]	; (8004f28 <Vital_Msg_extr_from_CAN+0x740>)
 8004c0e:	f01f fea3 	bl	8024958 <iprintf>
	BITSTUFFINC(16);
 8004c12:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c16:	3310      	adds	r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	da00      	bge.n	8004c1e <Vital_Msg_extr_from_CAN+0x436>
 8004c1c:	3307      	adds	r3, #7
 8004c1e:	10db      	asrs	r3, r3, #3
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c26:	4413      	add	r3, r2
 8004c28:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c2c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c30:	3310      	adds	r3, #16
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	b21b      	sxth	r3, r3
 8004c36:	425a      	negs	r2, r3
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	f002 0207 	and.w	r2, r2, #7
 8004c40:	bf58      	it	pl
 8004c42:	4253      	negpl	r3, r2
 8004c44:	b21b      	sxth	r3, r3
 8004c46:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004c4a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	441a      	add	r2, r3
 8004c52:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c56:	2110      	movs	r1, #16
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fcdb 	bl	8000614 <ExtractBits>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004c66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	48af      	ldr	r0, [pc, #700]	; (8004f2c <Vital_Msg_extr_from_CAN+0x744>)
 8004c6e:	f01f fe73 	bl	8024958 <iprintf>
	BITSTUFFINC(16);
 8004c72:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c76:	3310      	adds	r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da00      	bge.n	8004c7e <Vital_Msg_extr_from_CAN+0x496>
 8004c7c:	3307      	adds	r3, #7
 8004c7e:	10db      	asrs	r3, r3, #3
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c86:	4413      	add	r3, r2
 8004c88:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c8c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c90:	3310      	adds	r3, #16
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	b21b      	sxth	r3, r3
 8004c96:	425a      	negs	r2, r3
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	f002 0207 	and.w	r2, r2, #7
 8004ca0:	bf58      	it	pl
 8004ca2:	4253      	negpl	r3, r2
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004caa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cb6:	2108      	movs	r1, #8
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fcab 	bl	8000614 <ExtractBits>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004cc6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cca:	3308      	adds	r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da00      	bge.n	8004cd2 <Vital_Msg_extr_from_CAN+0x4ea>
 8004cd0:	3307      	adds	r3, #7
 8004cd2:	10db      	asrs	r3, r3, #3
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cda:	4413      	add	r3, r2
 8004cdc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ce0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	b21b      	sxth	r3, r3
 8004cea:	425a      	negs	r2, r3
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	f002 0207 	and.w	r2, r2, #7
 8004cf4:	bf58      	it	pl
 8004cf6:	4253      	negpl	r3, r2
 8004cf8:	b21b      	sxth	r3, r3
 8004cfa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004cfe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	441a      	add	r2, r3
 8004d06:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d0a:	2108      	movs	r1, #8
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb fc81 	bl	8000614 <ExtractBits>
 8004d12:	4603      	mov	r3, r0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004d1a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d1e:	3308      	adds	r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	da00      	bge.n	8004d26 <Vital_Msg_extr_from_CAN+0x53e>
 8004d24:	3307      	adds	r3, #7
 8004d26:	10db      	asrs	r3, r3, #3
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d2e:	4413      	add	r3, r2
 8004d30:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d34:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d38:	3308      	adds	r3, #8
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	b21b      	sxth	r3, r3
 8004d3e:	425a      	negs	r2, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	f002 0207 	and.w	r2, r2, #7
 8004d48:	bf58      	it	pl
 8004d4a:	4253      	negpl	r3, r2
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d52:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	441a      	add	r2, r3
 8004d5a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d5e:	2108      	movs	r1, #8
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb fc57 	bl	8000614 <ExtractBits>
 8004d66:	4603      	mov	r3, r0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",CAN_Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004d6e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d72:	3308      	adds	r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	da00      	bge.n	8004d7a <Vital_Msg_extr_from_CAN+0x592>
 8004d78:	3307      	adds	r3, #7
 8004d7a:	10db      	asrs	r3, r3, #3
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d82:	4413      	add	r3, r2
 8004d84:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d88:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	b21b      	sxth	r3, r3
 8004d92:	425a      	negs	r2, r3
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	f002 0207 	and.w	r2, r2, #7
 8004d9c:	bf58      	it	pl
 8004d9e:	4253      	negpl	r3, r2
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004da6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	441a      	add	r2, r3
 8004dae:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004db2:	2110      	movs	r1, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fb fc2d 	bl	8000614 <ExtractBits>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004dc0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da00      	bge.n	8004dcc <Vital_Msg_extr_from_CAN+0x5e4>
 8004dca:	3307      	adds	r3, #7
 8004dcc:	10db      	asrs	r3, r3, #3
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004dda:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004dde:	3310      	adds	r3, #16
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b21b      	sxth	r3, r3
 8004de4:	425a      	negs	r2, r3
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	f002 0207 	and.w	r2, r2, #7
 8004dee:	bf58      	it	pl
 8004df0:	4253      	negpl	r3, r2
 8004df2:	b21b      	sxth	r3, r3
 8004df4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004df8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80fe 	beq.w	8005000 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e04:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e10:	2108      	movs	r1, #8
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb fbfe 	bl	8000614 <ExtractBits>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004e20:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e24:	3308      	adds	r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da00      	bge.n	8004e2c <Vital_Msg_extr_from_CAN+0x644>
 8004e2a:	3307      	adds	r3, #7
 8004e2c:	10db      	asrs	r3, r3, #3
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e34:	4413      	add	r3, r2
 8004e36:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e3a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e3e:	3308      	adds	r3, #8
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	b21b      	sxth	r3, r3
 8004e44:	425a      	negs	r2, r3
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	f002 0207 	and.w	r2, r2, #7
 8004e4e:	bf58      	it	pl
 8004e50:	4253      	negpl	r3, r2
 8004e52:	b21b      	sxth	r3, r3
 8004e54:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e58:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	441a      	add	r2, r3
 8004e60:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e64:	2108      	movs	r1, #8
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fb fbd4 	bl	8000614 <ExtractBits>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004e74:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e78:	3308      	adds	r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	da00      	bge.n	8004e80 <Vital_Msg_extr_from_CAN+0x698>
 8004e7e:	3307      	adds	r3, #7
 8004e80:	10db      	asrs	r3, r3, #3
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e88:	4413      	add	r3, r2
 8004e8a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e8e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e92:	3308      	adds	r3, #8
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	425a      	negs	r2, r3
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	f002 0207 	and.w	r2, r2, #7
 8004ea2:	bf58      	it	pl
 8004ea4:	4253      	negpl	r3, r2
 8004ea6:	b21b      	sxth	r3, r3
 8004ea8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004eac:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004eb8:	2108      	movs	r1, #8
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fbaa 	bl	8000614 <ExtractBits>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004ec6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004eca:	3308      	adds	r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	da00      	bge.n	8004ed2 <Vital_Msg_extr_from_CAN+0x6ea>
 8004ed0:	3307      	adds	r3, #7
 8004ed2:	10db      	asrs	r3, r3, #3
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004eda:	4413      	add	r3, r2
 8004edc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ee0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	425a      	negs	r2, r3
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	f002 0207 	and.w	r2, r2, #7
 8004ef4:	bf58      	it	pl
 8004ef6:	4253      	negpl	r3, r2
 8004ef8:	b21b      	sxth	r3, r3
 8004efa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004efe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	441a      	add	r2, r3
 8004f06:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f0a:	2108      	movs	r1, #8
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb fb81 	bl	8000614 <ExtractBits>
 8004f12:	4603      	mov	r3, r0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004f18:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da06      	bge.n	8004f30 <Vital_Msg_extr_from_CAN+0x748>
 8004f22:	3307      	adds	r3, #7
 8004f24:	e004      	b.n	8004f30 <Vital_Msg_extr_from_CAN+0x748>
 8004f26:	bf00      	nop
 8004f28:	08026438 	.word	0x08026438
 8004f2c:	08026440 	.word	0x08026440
 8004f30:	10db      	asrs	r3, r3, #3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f38:	4413      	add	r3, r2
 8004f3a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f3e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f42:	3308      	adds	r3, #8
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	b21b      	sxth	r3, r3
 8004f48:	425a      	negs	r2, r3
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	f002 0207 	and.w	r2, r2, #7
 8004f52:	bf58      	it	pl
 8004f54:	4253      	negpl	r3, r2
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f5c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	441a      	add	r2, r3
 8004f64:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f68:	2108      	movs	r1, #8
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fb fb52 	bl	8000614 <ExtractBits>
 8004f70:	4603      	mov	r3, r0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004f76:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	da00      	bge.n	8004f82 <Vital_Msg_extr_from_CAN+0x79a>
 8004f80:	3307      	adds	r3, #7
 8004f82:	10db      	asrs	r3, r3, #3
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f90:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f94:	3308      	adds	r3, #8
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	425a      	negs	r2, r3
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	f002 0207 	and.w	r2, r2, #7
 8004fa4:	bf58      	it	pl
 8004fa6:	4253      	negpl	r3, r2
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004fae:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fba:	2108      	movs	r1, #8
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb fb29 	bl	8000614 <ExtractBits>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004fc8:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004fcc:	3308      	adds	r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	da00      	bge.n	8004fd4 <Vital_Msg_extr_from_CAN+0x7ec>
 8004fd2:	3307      	adds	r3, #7
 8004fd4:	10db      	asrs	r3, r3, #3
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fdc:	4413      	add	r3, r2
 8004fde:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fe2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	b21b      	sxth	r3, r3
 8004fec:	425a      	negs	r2, r3
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	f002 0207 	and.w	r2, r2, #7
 8004ff6:	bf58      	it	pl
 8004ff8:	4253      	negpl	r3, r2
 8004ffa:	b21b      	sxth	r3, r3
 8004ffc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8005000:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005010:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	441a      	add	r2, r3
 8005018:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800501c:	2108      	movs	r1, #8
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb faf8 	bl	8000614 <ExtractBits>
 8005024:	4603      	mov	r3, r0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 800502c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005030:	3308      	adds	r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	da00      	bge.n	8005038 <Vital_Msg_extr_from_CAN+0x850>
 8005036:	3307      	adds	r3, #7
 8005038:	10db      	asrs	r3, r3, #3
 800503a:	b29a      	uxth	r2, r3
 800503c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005040:	4413      	add	r3, r2
 8005042:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005046:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800504a:	3308      	adds	r3, #8
 800504c:	b29b      	uxth	r3, r3
 800504e:	b21b      	sxth	r3, r3
 8005050:	425a      	negs	r2, r3
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	f002 0207 	and.w	r2, r2, #7
 800505a:	bf58      	it	pl
 800505c:	4253      	negpl	r3, r2
 800505e:	b21b      	sxth	r3, r3
 8005060:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8005064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005068:	4619      	mov	r1, r3
 800506a:	484b      	ldr	r0, [pc, #300]	; (8005198 <Vital_Msg_extr_from_CAN+0x9b0>)
 800506c:	f01f fc74 	bl	8024958 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005070:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	441a      	add	r2, r3
 8005078:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800507c:	2108      	movs	r1, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb fac8 	bl	8000614 <ExtractBits>
 8005084:	4603      	mov	r3, r0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 800508c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005090:	3308      	adds	r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	da00      	bge.n	8005098 <Vital_Msg_extr_from_CAN+0x8b0>
 8005096:	3307      	adds	r3, #7
 8005098:	10db      	asrs	r3, r3, #3
 800509a:	b29a      	uxth	r2, r3
 800509c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80050a0:	4413      	add	r3, r2
 80050a2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80050a6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80050aa:	3308      	adds	r3, #8
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	425a      	negs	r2, r3
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	f002 0207 	and.w	r2, r2, #7
 80050ba:	bf58      	it	pl
 80050bc:	4253      	negpl	r3, r2
 80050be:	b21b      	sxth	r3, r3
 80050c0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 80050c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 80050d0:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 80050d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050dc:	08db      	lsrs	r3, r3, #3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80050e6:	e004      	b.n	80050f2 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 80050e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80050f2:	2300      	movs	r3, #0
 80050f4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80050f8:	e040      	b.n	800517c <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80050fa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	441a      	add	r2, r3
 8005102:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005106:	2108      	movs	r1, #8
 8005108:	4618      	mov	r0, r3
 800510a:	f7fb fa83 	bl	8000614 <ExtractBits>
 800510e:	4602      	mov	r2, r0
 8005110:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800511a:	443b      	add	r3, r7
 800511c:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8005120:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8005124:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005128:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800512c:	443b      	add	r3, r7
 800512e:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8005132:	461a      	mov	r2, r3
 8005134:	4819      	ldr	r0, [pc, #100]	; (800519c <Vital_Msg_extr_from_CAN+0x9b4>)
 8005136:	f01f fc0f 	bl	8024958 <iprintf>
		BITSTUFFINC(8);
 800513a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800513e:	3308      	adds	r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	da00      	bge.n	8005146 <Vital_Msg_extr_from_CAN+0x95e>
 8005144:	3307      	adds	r3, #7
 8005146:	10db      	asrs	r3, r3, #3
 8005148:	b29a      	uxth	r2, r3
 800514a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800514e:	4413      	add	r3, r2
 8005150:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005154:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005158:	3308      	adds	r3, #8
 800515a:	b29b      	uxth	r3, r3
 800515c:	b21b      	sxth	r3, r3
 800515e:	425a      	negs	r2, r3
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	f002 0207 	and.w	r2, r2, #7
 8005168:	bf58      	it	pl
 800516a:	4253      	negpl	r3, r2
 800516c:	b21b      	sxth	r3, r3
 800516e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8005172:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005176:	3301      	adds	r3, #1
 8005178:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800517c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005180:	b29b      	uxth	r3, r3
 8005182:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005186:	429a      	cmp	r2, r3
 8005188:	d3b7      	bcc.n	80050fa <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 800518a:	200a      	movs	r0, #10
 800518c:	f01f fbfc 	bl	8024988 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005190:	2300      	movs	r3, #0
 8005192:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005196:	e037      	b.n	8005208 <Vital_Msg_extr_from_CAN+0xa20>
 8005198:	0802698c 	.word	0x0802698c
 800519c:	08026994 	.word	0x08026994
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80051a0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	441a      	add	r2, r3
 80051a8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80051ac:	2108      	movs	r1, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb fa30 	bl	8000614 <ExtractBits>
 80051b4:	4602      	mov	r2, r0
 80051b6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051c0:	443b      	add	r3, r7
 80051c2:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80051c6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80051ca:	3308      	adds	r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da00      	bge.n	80051d2 <Vital_Msg_extr_from_CAN+0x9ea>
 80051d0:	3307      	adds	r3, #7
 80051d2:	10db      	asrs	r3, r3, #3
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80051da:	4413      	add	r3, r2
 80051dc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80051e0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80051e4:	3308      	adds	r3, #8
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	b21b      	sxth	r3, r3
 80051ea:	425a      	negs	r2, r3
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	f002 0207 	and.w	r2, r2, #7
 80051f4:	bf58      	it	pl
 80051f6:	4253      	negpl	r3, r2
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 80051fe:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005202:	3301      	adds	r3, #1
 8005204:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005208:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800520c:	b29b      	uxth	r3, r3
 800520e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005212:	429a      	cmp	r2, r3
 8005214:	d3c4      	bcc.n	80051a0 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	3301      	adds	r3, #1
 800521c:	2210      	movs	r2, #16
 800521e:	2100      	movs	r1, #0
 8005220:	4618      	mov	r0, r3
 8005222:	f01f fab1 	bl	8024788 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005226:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800522a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800522e:	1d59      	adds	r1, r3, #5
 8005230:	f107 0308 	add.w	r3, r7, #8
 8005234:	3301      	adds	r3, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f01f fa7e 	bl	8024738 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 800523c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005240:	b21a      	sxth	r2, r3
 8005242:	f107 0308 	add.w	r3, r7, #8
 8005246:	3301      	adds	r3, #1
 8005248:	4619      	mov	r1, r3
 800524a:	2000      	movs	r0, #0
 800524c:	f00e fd58 	bl	8013d00 <GetCRC16>
 8005250:	4603      	mov	r3, r0
 8005252:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005254:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005258:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 800525a:	78bb      	ldrb	r3, [r7, #2]
 800525c:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 800525e:	78bb      	ldrb	r3, [r7, #2]
 8005260:	4a60      	ldr	r2, [pc, #384]	; (80053e4 <Vital_Msg_extr_from_CAN+0xbfc>)
 8005262:	4413      	add	r3, r2
 8005264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005268:	2b01      	cmp	r3, #1
 800526a:	d17f      	bne.n	800536c <Vital_Msg_extr_from_CAN+0xb84>
 800526c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005270:	2b01      	cmp	r3, #1
 8005272:	d17b      	bne.n	800536c <Vital_Msg_extr_from_CAN+0xb84>
 8005274:	8b79      	ldrh	r1, [r7, #26]
 8005276:	78ba      	ldrb	r2, [r7, #2]
 8005278:	485b      	ldr	r0, [pc, #364]	; (80053e8 <Vital_Msg_extr_from_CAN+0xc00>)
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4403      	add	r3, r0
 8005284:	3312      	adds	r3, #18
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	4299      	cmp	r1, r3
 800528a:	d06f      	beq.n	800536c <Vital_Msg_extr_from_CAN+0xb84>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800528c:	78ba      	ldrb	r2, [r7, #2]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4a54      	ldr	r2, [pc, #336]	; (80053e8 <Vital_Msg_extr_from_CAN+0xc00>)
 8005298:	4413      	add	r3, r2
 800529a:	3301      	adds	r3, #1
 800529c:	2210      	movs	r2, #16
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f01f fa71 	bl	8024788 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80052a6:	78ba      	ldrb	r2, [r7, #2]
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4a4d      	ldr	r2, [pc, #308]	; (80053e8 <Vital_Msg_extr_from_CAN+0xc00>)
 80052b2:	4413      	add	r3, r2
 80052b4:	f107 0108 	add.w	r1, r7, #8
 80052b8:	2214      	movs	r2, #20
 80052ba:	4618      	mov	r0, r3
 80052bc:	f01f fa3c 	bl	8024738 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80052c0:	78bb      	ldrb	r3, [r7, #2]
 80052c2:	494a      	ldr	r1, [pc, #296]	; (80053ec <Vital_Msg_extr_from_CAN+0xc04>)
 80052c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80052c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80052cc:	78bb      	ldrb	r3, [r7, #2]
 80052ce:	4a48      	ldr	r2, [pc, #288]	; (80053f0 <Vital_Msg_extr_from_CAN+0xc08>)
 80052d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80052d4:	78ba      	ldrb	r2, [r7, #2]
 80052d6:	4844      	ldr	r0, [pc, #272]	; (80053e8 <Vital_Msg_extr_from_CAN+0xc00>)
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4403      	add	r3, r0
 80052e2:	3312      	adds	r3, #18
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	4299      	cmp	r1, r3
 80052e8:	d040      	beq.n	800536c <Vital_Msg_extr_from_CAN+0xb84>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80052ea:	78ba      	ldrb	r2, [r7, #2]
 80052ec:	78b9      	ldrb	r1, [r7, #2]
 80052ee:	483e      	ldr	r0, [pc, #248]	; (80053e8 <Vital_Msg_extr_from_CAN+0xc00>)
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4403      	add	r3, r0
 80052fa:	3312      	adds	r3, #18
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	4b3c      	ldr	r3, [pc, #240]	; (80053f0 <Vital_Msg_extr_from_CAN+0xc08>)
 8005300:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005304:	2214      	movs	r2, #20
 8005306:	2100      	movs	r1, #0
 8005308:	483a      	ldr	r0, [pc, #232]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc0c>)
 800530a:	f01f fa3d 	bl	8024788 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800530e:	78ba      	ldrb	r2, [r7, #2]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4a33      	ldr	r2, [pc, #204]	; (80053e8 <Vital_Msg_extr_from_CAN+0xc00>)
 800531a:	4413      	add	r3, r2
 800531c:	2214      	movs	r2, #20
 800531e:	4619      	mov	r1, r3
 8005320:	4834      	ldr	r0, [pc, #208]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005322:	f01f fa09 	bl	8024738 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005326:	f240 2007 	movw	r0, #519	; 0x207
 800532a:	f00a fdad 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 800532e:	78bb      	ldrb	r3, [r7, #2]
 8005330:	4a31      	ldr	r2, [pc, #196]	; (80053f8 <Vital_Msg_extr_from_CAN+0xc10>)
 8005332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d118      	bne.n	800536c <Vital_Msg_extr_from_CAN+0xb84>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800533a:	78bb      	ldrb	r3, [r7, #2]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	4a2f      	ldr	r2, [pc, #188]	; (80053fc <Vital_Msg_extr_from_CAN+0xc14>)
 8005340:	4413      	add	r3, r2
 8005342:	1c98      	adds	r0, r3, #2
 8005344:	78ba      	ldrb	r2, [r7, #2]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <Vital_Msg_extr_from_CAN+0xc00>)
 8005350:	4413      	add	r3, r2
 8005352:	3301      	adds	r3, #1
 8005354:	2210      	movs	r2, #16
 8005356:	4619      	mov	r1, r3
 8005358:	f01f f9ee 	bl	8024738 <memcpy>
#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif

#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 800535c:	f240 1019 	movw	r0, #281	; 0x119
 8005360:	f00a fd92 	bl	800fe88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005364:	4a26      	ldr	r2, [pc, #152]	; (8005400 <Vital_Msg_extr_from_CAN+0xc18>)
 8005366:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800536a:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800536c:	78ba      	ldrb	r2, [r7, #2]
 800536e:	4925      	ldr	r1, [pc, #148]	; (8005404 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	440b      	add	r3, r1
 800537a:	78ba      	ldrb	r2, [r7, #2]
 800537c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800537e:	78ba      	ldrb	r2, [r7, #2]
 8005380:	4920      	ldr	r1, [pc, #128]	; (8005404 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	3301      	adds	r3, #1
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005392:	2218      	movs	r2, #24
 8005394:	2100      	movs	r1, #0
 8005396:	481c      	ldr	r0, [pc, #112]	; (8005408 <Vital_Msg_extr_from_CAN+0xc20>)
 8005398:	f01f f9f6 	bl	8024788 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800539c:	78ba      	ldrb	r2, [r7, #2]
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <Vital_Msg_extr_from_CAN+0xc1c>)
 80053a8:	4413      	add	r3, r2
 80053aa:	2218      	movs	r2, #24
 80053ac:	4619      	mov	r1, r3
 80053ae:	4816      	ldr	r0, [pc, #88]	; (8005408 <Vital_Msg_extr_from_CAN+0xc20>)
 80053b0:	f01f f9c2 	bl	8024738 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80053b4:	f240 2001 	movw	r0, #513	; 0x201
 80053b8:	f00a fd66 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80053bc:	78ba      	ldrb	r2, [r7, #2]
 80053be:	4911      	ldr	r1, [pc, #68]	; (8005404 <Vital_Msg_extr_from_CAN+0xc1c>)
 80053c0:	4613      	mov	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	440b      	add	r3, r1
 80053ca:	3301      	adds	r3, #1
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80053d0:	78bb      	ldrb	r3, [r7, #2]
 80053d2:	490e      	ldr	r1, [pc, #56]	; (800540c <Vital_Msg_extr_from_CAN+0xc24>)
 80053d4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80053d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 80053dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000304 	.word	0x20000304
 80053e8:	20001eb0 	.word	0x20001eb0
 80053ec:	20000f08 	.word	0x20000f08
 80053f0:	20000f30 	.word	0x20000f30
 80053f4:	20002040 	.word	0x20002040
 80053f8:	20000ef4 	.word	0x20000ef4
 80053fc:	20001114 	.word	0x20001114
 8005400:	20000e88 	.word	0x20000e88
 8005404:	200016a4 	.word	0x200016a4
 8005408:	20001884 	.word	0x20001884
 800540c:	20000e5c 	.word	0x20000e5c

08005410 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b095      	sub	sp, #84	; 0x54
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	4608      	mov	r0, r1
 800541a:	4611      	mov	r1, r2
 800541c:	461a      	mov	r2, r3
 800541e:	4603      	mov	r3, r0
 8005420:	70fb      	strb	r3, [r7, #3]
 8005422:	460b      	mov	r3, r1
 8005424:	70bb      	strb	r3, [r7, #2]
 8005426:	4613      	mov	r3, r2
 8005428:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	f107 030c 	add.w	r3, r7, #12
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f01f f9a6 	bl	8024788 <memset>
	uint8_t uc_index = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = RESET;
 800544a:	2300      	movs	r3, #0
 800544c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005450:	f012 fa78 	bl	8017944 <HAL_GetTick>
 8005454:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 800545c:	2300      	movs	r3, #0
 800545e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005460:	2300      	movs	r3, #0
 8005462:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005464:	499a      	ldr	r1, [pc, #616]	; (80056d0 <Status_Msg_Extr+0x2c0>)
 8005466:	489b      	ldr	r0, [pc, #620]	; (80056d4 <Status_Msg_Extr+0x2c4>)
 8005468:	f7fa feea 	bl	8000240 <strcmp>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 812c 	beq.w	80056cc <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005474:	4b98      	ldr	r3, [pc, #608]	; (80056d8 <Status_Msg_Extr+0x2c8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02c      	beq.n	80054da <Status_Msg_Extr+0xca>
 8005480:	4b95      	ldr	r3, [pc, #596]	; (80056d8 <Status_Msg_Extr+0x2c8>)
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	78ba      	ldrb	r2, [r7, #2]
 8005486:	429a      	cmp	r2, r3
 8005488:	d127      	bne.n	80054da <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 800548e:	4893      	ldr	r0, [pc, #588]	; (80056dc <Status_Msg_Extr+0x2cc>)
 8005490:	f016 ff0a 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8005494:	4602      	mov	r2, r0
 8005496:	4b92      	ldr	r3, [pc, #584]	; (80056e0 <Status_Msg_Extr+0x2d0>)
 8005498:	fba3 1302 	umull	r1, r3, r3, r2
 800549c:	0bd9      	lsrs	r1, r3, #15
 800549e:	460b      	mov	r3, r1
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	1a5b      	subs	r3, r3, r1
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80054a8:	488e      	ldr	r0, [pc, #568]	; (80056e4 <Status_Msg_Extr+0x2d4>)
 80054aa:	f01f faf1 	bl	8024a90 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80054ae:	78bb      	ldrb	r3, [r7, #2]
 80054b0:	4a8d      	ldr	r2, [pc, #564]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	4413      	add	r3, r2
 80054b6:	3308      	adds	r3, #8
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	488b      	ldr	r0, [pc, #556]	; (80056ec <Status_Msg_Extr+0x2dc>)
 80054be:	f01f fa4b 	bl	8024958 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80054c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c4:	488a      	ldr	r0, [pc, #552]	; (80056f0 <Status_Msg_Extr+0x2e0>)
 80054c6:	f01f fa47 	bl	8024958 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 80054ca:	f107 0208 	add.w	r2, r7, #8
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	2118      	movs	r1, #24
 80054d2:	2000      	movs	r0, #0
 80054d4:	f7fb f92a 	bl	800072c <InsertBits>
	{
 80054d8:	e00b      	b.n	80054f2 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80054da:	78bb      	ldrb	r3, [r7, #2]
 80054dc:	4a82      	ldr	r2, [pc, #520]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	4413      	add	r3, r2
 80054e2:	3308      	adds	r3, #8
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f107 0208 	add.w	r2, r7, #8
 80054ea:	2118      	movs	r1, #24
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7fb f91d 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80054f8:	e010      	b.n	800551c <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 80054fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	441a      	add	r2, r3
 8005502:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005506:	3303      	adds	r3, #3
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	3350      	adds	r3, #80	; 0x50
 800550c:	443b      	add	r3, r7
 800550e:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005512:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005516:	3301      	adds	r3, #1
 8005518:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800551c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	3b05      	subs	r3, #5
 8005524:	429a      	cmp	r2, r3
 8005526:	dbe8      	blt.n	80054fa <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005528:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800552c:	b29b      	uxth	r3, r3
 800552e:	3303      	adds	r3, #3
 8005530:	b29a      	uxth	r2, r3
 8005532:	f107 0308 	add.w	r3, r7, #8
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f00e fc9b 	bl	8013e74 <CalculateDirectReverseCrc>
 800553e:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	3b05      	subs	r3, #5
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	441a      	add	r2, r3
 8005548:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800554a:	2120      	movs	r1, #32
 800554c:	4618      	mov	r0, r3
 800554e:	f7fb f861 	bl	8000614 <ExtractBits>
 8005552:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005558:	429a      	cmp	r2, r3
 800555a:	f000 80df 	beq.w	800571c <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3305      	adds	r3, #5
 8005562:	461a      	mov	r2, r3
 8005564:	2108      	movs	r1, #8
 8005566:	2000      	movs	r0, #0
 8005568:	f7fb f854 	bl	8000614 <ExtractBits>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005572:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <Status_Msg_Extr+0x174>
 800557a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800557e:	2b01      	cmp	r3, #1
 8005580:	f040 8090 	bne.w	80056a4 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005584:	78bb      	ldrb	r3, [r7, #2]
 8005586:	4a5b      	ldr	r2, [pc, #364]	; (80056f4 <Status_Msg_Extr+0x2e4>)
 8005588:	3366      	adds	r3, #102	; 0x66
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4619      	mov	r1, r3
 8005592:	4859      	ldr	r0, [pc, #356]	; (80056f8 <Status_Msg_Extr+0x2e8>)
 8005594:	f01f f9e0 	bl	8024958 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 8005598:	f107 0308 	add.w	r3, r7, #8
 800559c:	2228      	movs	r2, #40	; 0x28
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f01f f8f1 	bl	8024788 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80055a6:	78bb      	ldrb	r3, [r7, #2]
 80055a8:	4a4f      	ldr	r2, [pc, #316]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	4413      	add	r3, r2
 80055ae:	3308      	adds	r3, #8
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	f107 0208 	add.w	r2, r7, #8
 80055b8:	2118      	movs	r1, #24
 80055ba:	2000      	movs	r0, #0
 80055bc:	f7fb f8b6 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80055c6:	e010      	b.n	80055ea <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 80055c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	441a      	add	r2, r3
 80055d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055d4:	3303      	adds	r3, #3
 80055d6:	7812      	ldrb	r2, [r2, #0]
 80055d8:	3350      	adds	r3, #80	; 0x50
 80055da:	443b      	add	r3, r7
 80055dc:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80055e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055e4:	3301      	adds	r3, #1
 80055e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80055ea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	3b05      	subs	r3, #5
 80055f2:	429a      	cmp	r2, r3
 80055f4:	dbe8      	blt.n	80055c8 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 80055f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3303      	adds	r3, #3
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f107 0308 	add.w	r3, r7, #8
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f00e fc34 	bl	8013e74 <CalculateDirectReverseCrc>
 800560c:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 800560e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005612:	429a      	cmp	r2, r3
 8005614:	d132      	bne.n	800567c <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005616:	4839      	ldr	r0, [pc, #228]	; (80056fc <Status_Msg_Extr+0x2ec>)
 8005618:	f01f fa3a 	bl	8024a90 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800561c:	78bb      	ldrb	r3, [r7, #2]
 800561e:	4a32      	ldr	r2, [pc, #200]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	4413      	add	r3, r2
 8005624:	3308      	adds	r3, #8
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	4835      	ldr	r0, [pc, #212]	; (8005700 <Status_Msg_Extr+0x2f0>)
 800562c:	f01f f994 	bl	8024958 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005630:	78bb      	ldrb	r3, [r7, #2]
 8005632:	492d      	ldr	r1, [pc, #180]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 8005634:	011a      	lsls	r2, r3, #4
 8005636:	440a      	add	r2, r1
 8005638:	3208      	adds	r2, #8
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	3201      	adds	r2, #1
 800563e:	492a      	ldr	r1, [pc, #168]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	440b      	add	r3, r1
 8005644:	3308      	adds	r3, #8
 8005646:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005648:	78bb      	ldrb	r3, [r7, #2]
 800564a:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	4413      	add	r3, r2
 8005650:	3308      	adds	r3, #8
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4619      	mov	r1, r3
 8005656:	482b      	ldr	r0, [pc, #172]	; (8005704 <Status_Msg_Extr+0x2f4>)
 8005658:	f01f f97e 	bl	8024958 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800565c:	78bb      	ldrb	r3, [r7, #2]
 800565e:	78ba      	ldrb	r2, [r7, #2]
 8005660:	4921      	ldr	r1, [pc, #132]	; (80056e8 <Status_Msg_Extr+0x2d8>)
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	440b      	add	r3, r1
 8005666:	3308      	adds	r3, #8
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	4827      	ldr	r0, [pc, #156]	; (8005708 <Status_Msg_Extr+0x2f8>)
 800566c:	4613      	mov	r3, r2
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4403      	add	r3, r0
 8005676:	3308      	adds	r3, #8
 8005678:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 800567a:	e050      	b.n	800571e <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800567c:	78bb      	ldrb	r3, [r7, #2]
 800567e:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <Status_Msg_Extr+0x2e4>)
 8005680:	3366      	adds	r3, #102	; 0x66
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4619      	mov	r1, r3
 800568a:	4820      	ldr	r0, [pc, #128]	; (800570c <Status_Msg_Extr+0x2fc>)
 800568c:	f01f f964 	bl	8024958 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005690:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005692:	481f      	ldr	r0, [pc, #124]	; (8005710 <Status_Msg_Extr+0x300>)
 8005694:	f01f f960 	bl	8024958 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800569a:	481e      	ldr	r0, [pc, #120]	; (8005714 <Status_Msg_Extr+0x304>)
 800569c:	f01f f95c 	bl	8024958 <iprintf>
				return;
 80056a0:	f000 bca5 	b.w	8005fee <Status_Msg_Extr+0xbde>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056a4:	78bb      	ldrb	r3, [r7, #2]
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <Status_Msg_Extr+0x2e4>)
 80056a8:	3366      	adds	r3, #102	; 0x66
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4819      	ldr	r0, [pc, #100]	; (8005718 <Status_Msg_Extr+0x308>)
 80056b4:	f01f f950 	bl	8024958 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80056b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056ba:	4815      	ldr	r0, [pc, #84]	; (8005710 <Status_Msg_Extr+0x300>)
 80056bc:	f01f f94c 	bl	8024958 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80056c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c2:	4814      	ldr	r0, [pc, #80]	; (8005714 <Status_Msg_Extr+0x304>)
 80056c4:	f01f f948 	bl	8024958 <iprintf>
			return;
 80056c8:	f000 bc91 	b.w	8005fee <Status_Msg_Extr+0xbde>
		goto ROLLOVER_STATUS;
 80056cc:	bf00      	nop
 80056ce:	e026      	b.n	800571e <Status_Msg_Extr+0x30e>
 80056d0:	08026104 	.word	0x08026104
 80056d4:	20000305 	.word	0x20000305
 80056d8:	2000198c 	.word	0x2000198c
 80056dc:	2000f3c4 	.word	0x2000f3c4
 80056e0:	80008001 	.word	0x80008001
 80056e4:	080269a4 	.word	0x080269a4
 80056e8:	200011f4 	.word	0x200011f4
 80056ec:	080269c4 	.word	0x080269c4
 80056f0:	08026650 	.word	0x08026650
 80056f4:	20000304 	.word	0x20000304
 80056f8:	080269e8 	.word	0x080269e8
 80056fc:	08026694 	.word	0x08026694
 8005700:	08026a0c 	.word	0x08026a0c
 8005704:	08026a24 	.word	0x08026a24
 8005708:	200016a4 	.word	0x200016a4
 800570c:	08026a3c 	.word	0x08026a3c
 8005710:	08026348 	.word	0x08026348
 8005714:	08026358 	.word	0x08026358
 8005718:	08026a5c 	.word	0x08026a5c
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 800571c:	bf00      	nop

	BITSTUFFINC(8);
 800571e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005722:	3308      	adds	r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	da00      	bge.n	800572a <Status_Msg_Extr+0x31a>
 8005728:	3307      	adds	r3, #7
 800572a:	10db      	asrs	r3, r3, #3
 800572c:	b29a      	uxth	r2, r3
 800572e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005730:	4413      	add	r3, r2
 8005732:	873b      	strh	r3, [r7, #56]	; 0x38
 8005734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005736:	3308      	adds	r3, #8
 8005738:	b29b      	uxth	r3, r3
 800573a:	b21b      	sxth	r3, r3
 800573c:	425a      	negs	r2, r3
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	f002 0207 	and.w	r2, r2, #7
 8005746:	bf58      	it	pl
 8005748:	4253      	negpl	r3, r2
 800574a:	b21b      	sxth	r3, r3
 800574c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800574e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	441a      	add	r2, r3
 8005754:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005756:	2110      	movs	r1, #16
 8005758:	4618      	mov	r0, r3
 800575a:	f7fa ff5b 	bl	8000614 <ExtractBits>
 800575e:	4603      	mov	r3, r0
 8005760:	78ba      	ldrb	r2, [r7, #2]
 8005762:	b298      	uxth	r0, r3
 8005764:	49ab      	ldr	r1, [pc, #684]	; (8005a14 <Status_Msg_Extr+0x604>)
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	3306      	adds	r3, #6
 8005772:	4602      	mov	r2, r0
 8005774:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005776:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800577a:	3310      	adds	r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	da00      	bge.n	8005782 <Status_Msg_Extr+0x372>
 8005780:	3307      	adds	r3, #7
 8005782:	10db      	asrs	r3, r3, #3
 8005784:	b29a      	uxth	r2, r3
 8005786:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005788:	4413      	add	r3, r2
 800578a:	873b      	strh	r3, [r7, #56]	; 0x38
 800578c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800578e:	3310      	adds	r3, #16
 8005790:	b29b      	uxth	r3, r3
 8005792:	b21b      	sxth	r3, r3
 8005794:	425a      	negs	r2, r3
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	f002 0207 	and.w	r2, r2, #7
 800579e:	bf58      	it	pl
 80057a0:	4253      	negpl	r3, r2
 80057a2:	b21b      	sxth	r3, r3
 80057a4:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80057a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	441a      	add	r2, r3
 80057ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ae:	2110      	movs	r1, #16
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fa ff2f 	bl	8000614 <ExtractBits>
 80057b6:	4603      	mov	r3, r0
 80057b8:	78ba      	ldrb	r2, [r7, #2]
 80057ba:	b298      	uxth	r0, r3
 80057bc:	4995      	ldr	r1, [pc, #596]	; (8005a14 <Status_Msg_Extr+0x604>)
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3304      	adds	r3, #4
 80057ca:	4602      	mov	r2, r0
 80057cc:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80057ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057d2:	3310      	adds	r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da00      	bge.n	80057da <Status_Msg_Extr+0x3ca>
 80057d8:	3307      	adds	r3, #7
 80057da:	10db      	asrs	r3, r3, #3
 80057dc:	b29a      	uxth	r2, r3
 80057de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057e0:	4413      	add	r3, r2
 80057e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80057e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e6:	3310      	adds	r3, #16
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	b21b      	sxth	r3, r3
 80057ec:	425a      	negs	r2, r3
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	f002 0207 	and.w	r2, r2, #7
 80057f6:	bf58      	it	pl
 80057f8:	4253      	negpl	r3, r2
 80057fa:	b21b      	sxth	r3, r3
 80057fc:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80057fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	441a      	add	r2, r3
 8005804:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005806:	2108      	movs	r1, #8
 8005808:	4618      	mov	r0, r3
 800580a:	f7fa ff03 	bl	8000614 <ExtractBits>
 800580e:	4602      	mov	r2, r0
 8005810:	78bb      	ldrb	r3, [r7, #2]
 8005812:	b2d1      	uxtb	r1, r2
 8005814:	4a80      	ldr	r2, [pc, #512]	; (8005a18 <Status_Msg_Extr+0x608>)
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	4413      	add	r3, r2
 800581a:	3302      	adds	r3, #2
 800581c:	460a      	mov	r2, r1
 800581e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005820:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005824:	3308      	adds	r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	da00      	bge.n	800582c <Status_Msg_Extr+0x41c>
 800582a:	3307      	adds	r3, #7
 800582c:	10db      	asrs	r3, r3, #3
 800582e:	b29a      	uxth	r2, r3
 8005830:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005832:	4413      	add	r3, r2
 8005834:	873b      	strh	r3, [r7, #56]	; 0x38
 8005836:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005838:	3308      	adds	r3, #8
 800583a:	b29b      	uxth	r3, r3
 800583c:	b21b      	sxth	r3, r3
 800583e:	425a      	negs	r2, r3
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	f002 0207 	and.w	r2, r2, #7
 8005848:	bf58      	it	pl
 800584a:	4253      	negpl	r3, r2
 800584c:	b21b      	sxth	r3, r3
 800584e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005850:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	441a      	add	r2, r3
 8005856:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005858:	2108      	movs	r1, #8
 800585a:	4618      	mov	r0, r3
 800585c:	f7fa feda 	bl	8000614 <ExtractBits>
 8005860:	4602      	mov	r2, r0
 8005862:	78bb      	ldrb	r3, [r7, #2]
 8005864:	b2d1      	uxtb	r1, r2
 8005866:	4a6c      	ldr	r2, [pc, #432]	; (8005a18 <Status_Msg_Extr+0x608>)
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	4413      	add	r3, r2
 800586c:	3301      	adds	r3, #1
 800586e:	460a      	mov	r2, r1
 8005870:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005872:	78bb      	ldrb	r3, [r7, #2]
 8005874:	4a68      	ldr	r2, [pc, #416]	; (8005a18 <Status_Msg_Extr+0x608>)
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	4413      	add	r3, r2
 800587a:	3301      	adds	r3, #1
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d138      	bne.n	80058f4 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005882:	78bb      	ldrb	r3, [r7, #2]
 8005884:	4a65      	ldr	r2, [pc, #404]	; (8005a1c <Status_Msg_Extr+0x60c>)
 8005886:	3366      	adds	r3, #102	; 0x66
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4619      	mov	r1, r3
 8005890:	4863      	ldr	r0, [pc, #396]	; (8005a20 <Status_Msg_Extr+0x610>)
 8005892:	f01f f861 	bl	8024958 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005896:	78bb      	ldrb	r3, [r7, #2]
 8005898:	4a5f      	ldr	r2, [pc, #380]	; (8005a18 <Status_Msg_Extr+0x608>)
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	4413      	add	r3, r2
 800589e:	330c      	adds	r3, #12
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	485f      	ldr	r0, [pc, #380]	; (8005a24 <Status_Msg_Extr+0x614>)
 80058a6:	f01f f857 	bl	8024958 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80058aa:	78bb      	ldrb	r3, [r7, #2]
 80058ac:	495a      	ldr	r1, [pc, #360]	; (8005a18 <Status_Msg_Extr+0x608>)
 80058ae:	011a      	lsls	r2, r3, #4
 80058b0:	440a      	add	r2, r1
 80058b2:	320c      	adds	r2, #12
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	3201      	adds	r2, #1
 80058b8:	4957      	ldr	r1, [pc, #348]	; (8005a18 <Status_Msg_Extr+0x608>)
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	440b      	add	r3, r1
 80058be:	330c      	adds	r3, #12
 80058c0:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80058c2:	78bb      	ldrb	r3, [r7, #2]
 80058c4:	4a54      	ldr	r2, [pc, #336]	; (8005a18 <Status_Msg_Extr+0x608>)
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	4413      	add	r3, r2
 80058ca:	330c      	adds	r3, #12
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	4855      	ldr	r0, [pc, #340]	; (8005a28 <Status_Msg_Extr+0x618>)
 80058d2:	f01f f841 	bl	8024958 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80058d6:	78bb      	ldrb	r3, [r7, #2]
 80058d8:	78ba      	ldrb	r2, [r7, #2]
 80058da:	494f      	ldr	r1, [pc, #316]	; (8005a18 <Status_Msg_Extr+0x608>)
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	440b      	add	r3, r1
 80058e0:	330c      	adds	r3, #12
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	4851      	ldr	r0, [pc, #324]	; (8005a2c <Status_Msg_Extr+0x61c>)
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4403      	add	r3, r0
 80058f0:	330c      	adds	r3, #12
 80058f2:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80058f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058f8:	3308      	adds	r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da00      	bge.n	8005900 <Status_Msg_Extr+0x4f0>
 80058fe:	3307      	adds	r3, #7
 8005900:	10db      	asrs	r3, r3, #3
 8005902:	b29a      	uxth	r2, r3
 8005904:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005906:	4413      	add	r3, r2
 8005908:	873b      	strh	r3, [r7, #56]	; 0x38
 800590a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800590c:	3308      	adds	r3, #8
 800590e:	b29b      	uxth	r3, r3
 8005910:	b21b      	sxth	r3, r3
 8005912:	425a      	negs	r2, r3
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	f002 0207 	and.w	r2, r2, #7
 800591c:	bf58      	it	pl
 800591e:	4253      	negpl	r3, r2
 8005920:	b21b      	sxth	r3, r3
 8005922:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005924:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	441a      	add	r2, r3
 800592a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800592c:	2108      	movs	r1, #8
 800592e:	4618      	mov	r0, r3
 8005930:	f7fa fe70 	bl	8000614 <ExtractBits>
 8005934:	4603      	mov	r3, r0
 8005936:	78ba      	ldrb	r2, [r7, #2]
 8005938:	b2d8      	uxtb	r0, r3
 800593a:	4936      	ldr	r1, [pc, #216]	; (8005a14 <Status_Msg_Extr+0x604>)
 800593c:	4613      	mov	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	3302      	adds	r3, #2
 8005948:	4602      	mov	r2, r0
 800594a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800594c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005950:	3308      	adds	r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	da00      	bge.n	8005958 <Status_Msg_Extr+0x548>
 8005956:	3307      	adds	r3, #7
 8005958:	10db      	asrs	r3, r3, #3
 800595a:	b29a      	uxth	r2, r3
 800595c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800595e:	4413      	add	r3, r2
 8005960:	873b      	strh	r3, [r7, #56]	; 0x38
 8005962:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005964:	3308      	adds	r3, #8
 8005966:	b29b      	uxth	r3, r3
 8005968:	b21b      	sxth	r3, r3
 800596a:	425a      	negs	r2, r3
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	f002 0207 	and.w	r2, r2, #7
 8005974:	bf58      	it	pl
 8005976:	4253      	negpl	r3, r2
 8005978:	b21b      	sxth	r3, r3
 800597a:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800597c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	441a      	add	r2, r3
 8005982:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005984:	2110      	movs	r1, #16
 8005986:	4618      	mov	r0, r3
 8005988:	f7fa fe44 	bl	8000614 <ExtractBits>
 800598c:	4602      	mov	r2, r0
 800598e:	78bb      	ldrb	r3, [r7, #2]
 8005990:	b291      	uxth	r1, r2
 8005992:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <Status_Msg_Extr+0x608>)
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	4413      	add	r3, r2
 8005998:	3304      	adds	r3, #4
 800599a:	460a      	mov	r2, r1
 800599c:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800599e:	4924      	ldr	r1, [pc, #144]	; (8005a30 <Status_Msg_Extr+0x620>)
 80059a0:	4824      	ldr	r0, [pc, #144]	; (8005a34 <Status_Msg_Extr+0x624>)
 80059a2:	f7fa fc4d 	bl	8000240 <strcmp>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10f      	bne.n	80059cc <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80059ac:	78bb      	ldrb	r3, [r7, #2]
 80059ae:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <Status_Msg_Extr+0x608>)
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	4413      	add	r3, r2
 80059b4:	3304      	adds	r3, #4
 80059b6:	881a      	ldrh	r2, [r3, #0]
 80059b8:	78bb      	ldrb	r3, [r7, #2]
 80059ba:	f042 0208 	orr.w	r2, r2, #8
 80059be:	b291      	uxth	r1, r2
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <Status_Msg_Extr+0x608>)
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	460a      	mov	r2, r1
 80059ca:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80059cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059d0:	3310      	adds	r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	da00      	bge.n	80059d8 <Status_Msg_Extr+0x5c8>
 80059d6:	3307      	adds	r3, #7
 80059d8:	10db      	asrs	r3, r3, #3
 80059da:	b29a      	uxth	r2, r3
 80059dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059de:	4413      	add	r3, r2
 80059e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80059e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059e4:	3310      	adds	r3, #16
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	b21b      	sxth	r3, r3
 80059ea:	425a      	negs	r2, r3
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	f002 0207 	and.w	r2, r2, #7
 80059f4:	bf58      	it	pl
 80059f6:	4253      	negpl	r3, r2
 80059f8:	b21b      	sxth	r3, r3
 80059fa:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 80059fc:	78bb      	ldrb	r3, [r7, #2]
 80059fe:	4a06      	ldr	r2, [pc, #24]	; (8005a18 <Status_Msg_Extr+0x608>)
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4413      	add	r3, r2
 8005a04:	3304      	adds	r3, #4
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 812a 	beq.w	8005c66 <Status_Msg_Extr+0x856>
 8005a12:	e011      	b.n	8005a38 <Status_Msg_Extr+0x628>
 8005a14:	2000162c 	.word	0x2000162c
 8005a18:	200011f4 	.word	0x200011f4
 8005a1c:	20000304 	.word	0x20000304
 8005a20:	0802674c 	.word	0x0802674c
 8005a24:	08026a74 	.word	0x08026a74
 8005a28:	08026a80 	.word	0x08026a80
 8005a2c:	200016a4 	.word	0x200016a4
 8005a30:	08026104 	.word	0x08026104
 8005a34:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	441a      	add	r2, r3
 8005a3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a40:	2108      	movs	r1, #8
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fa fde6 	bl	8000614 <ExtractBits>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	78ba      	ldrb	r2, [r7, #2]
 8005a4c:	b2d8      	uxtb	r0, r3
 8005a4e:	49b0      	ldr	r1, [pc, #704]	; (8005d10 <Status_Msg_Extr+0x900>)
 8005a50:	4613      	mov	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4413      	add	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	440b      	add	r3, r1
 8005a5a:	3305      	adds	r3, #5
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a64:	3308      	adds	r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da00      	bge.n	8005a6c <Status_Msg_Extr+0x65c>
 8005a6a:	3307      	adds	r3, #7
 8005a6c:	10db      	asrs	r3, r3, #3
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a72:	4413      	add	r3, r2
 8005a74:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a78:	3308      	adds	r3, #8
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	425a      	negs	r2, r3
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	f002 0207 	and.w	r2, r2, #7
 8005a88:	bf58      	it	pl
 8005a8a:	4253      	negpl	r3, r2
 8005a8c:	b21b      	sxth	r3, r3
 8005a8e:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	441a      	add	r2, r3
 8005a96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a98:	2108      	movs	r1, #8
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fa fdba 	bl	8000614 <ExtractBits>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	78ba      	ldrb	r2, [r7, #2]
 8005aa4:	b2d8      	uxtb	r0, r3
 8005aa6:	499a      	ldr	r1, [pc, #616]	; (8005d10 <Status_Msg_Extr+0x900>)
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	4413      	add	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	440b      	add	r3, r1
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005ab8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005abc:	3308      	adds	r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da00      	bge.n	8005ac4 <Status_Msg_Extr+0x6b4>
 8005ac2:	3307      	adds	r3, #7
 8005ac4:	10db      	asrs	r3, r3, #3
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005aca:	4413      	add	r3, r2
 8005acc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ace:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	b21b      	sxth	r3, r3
 8005ad6:	425a      	negs	r2, r3
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	f002 0207 	and.w	r2, r2, #7
 8005ae0:	bf58      	it	pl
 8005ae2:	4253      	negpl	r3, r2
 8005ae4:	b21b      	sxth	r3, r3
 8005ae6:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005ae8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	441a      	add	r2, r3
 8005aee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005af0:	2108      	movs	r1, #8
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fa fd8e 	bl	8000614 <ExtractBits>
 8005af8:	4603      	mov	r3, r0
 8005afa:	78ba      	ldrb	r2, [r7, #2]
 8005afc:	b2d8      	uxtb	r0, r3
 8005afe:	4984      	ldr	r1, [pc, #528]	; (8005d10 <Status_Msg_Extr+0x900>)
 8005b00:	4613      	mov	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	4413      	add	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	440b      	add	r3, r1
 8005b0a:	3303      	adds	r3, #3
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005b10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b14:	3308      	adds	r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da00      	bge.n	8005b1c <Status_Msg_Extr+0x70c>
 8005b1a:	3307      	adds	r3, #7
 8005b1c:	10db      	asrs	r3, r3, #3
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b22:	4413      	add	r3, r2
 8005b24:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b28:	3308      	adds	r3, #8
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	425a      	negs	r2, r3
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	f002 0207 	and.w	r2, r2, #7
 8005b38:	bf58      	it	pl
 8005b3a:	4253      	negpl	r3, r2
 8005b3c:	b21b      	sxth	r3, r3
 8005b3e:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005b40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	441a      	add	r2, r3
 8005b46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b48:	2108      	movs	r1, #8
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fa fd62 	bl	8000614 <ExtractBits>
 8005b50:	4603      	mov	r3, r0
 8005b52:	78ba      	ldrb	r2, [r7, #2]
 8005b54:	b2d8      	uxtb	r0, r3
 8005b56:	496e      	ldr	r1, [pc, #440]	; (8005d10 <Status_Msg_Extr+0x900>)
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	440b      	add	r3, r1
 8005b62:	4602      	mov	r2, r0
 8005b64:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005b66:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da00      	bge.n	8005b72 <Status_Msg_Extr+0x762>
 8005b70:	3307      	adds	r3, #7
 8005b72:	10db      	asrs	r3, r3, #3
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b78:	4413      	add	r3, r2
 8005b7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b7e:	3308      	adds	r3, #8
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	b21b      	sxth	r3, r3
 8005b84:	425a      	negs	r2, r3
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	f002 0207 	and.w	r2, r2, #7
 8005b8e:	bf58      	it	pl
 8005b90:	4253      	negpl	r3, r2
 8005b92:	b21b      	sxth	r3, r3
 8005b94:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005b96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	441a      	add	r2, r3
 8005b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b9e:	2108      	movs	r1, #8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fa fd37 	bl	8000614 <ExtractBits>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	78ba      	ldrb	r2, [r7, #2]
 8005baa:	b2d8      	uxtb	r0, r3
 8005bac:	4958      	ldr	r1, [pc, #352]	; (8005d10 <Status_Msg_Extr+0x900>)
 8005bae:	4613      	mov	r3, r2
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	440b      	add	r3, r1
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4602      	mov	r2, r0
 8005bbc:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005bbe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	da00      	bge.n	8005bca <Status_Msg_Extr+0x7ba>
 8005bc8:	3307      	adds	r3, #7
 8005bca:	10db      	asrs	r3, r3, #3
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bd0:	4413      	add	r3, r2
 8005bd2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	b21b      	sxth	r3, r3
 8005bdc:	425a      	negs	r2, r3
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	f002 0207 	and.w	r2, r2, #7
 8005be6:	bf58      	it	pl
 8005be8:	4253      	negpl	r3, r2
 8005bea:	b21b      	sxth	r3, r3
 8005bec:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005bee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	441a      	add	r2, r3
 8005bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bf6:	2108      	movs	r1, #8
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fa fd0b 	bl	8000614 <ExtractBits>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	78ba      	ldrb	r2, [r7, #2]
 8005c02:	b2d8      	uxtb	r0, r3
 8005c04:	4942      	ldr	r1, [pc, #264]	; (8005d10 <Status_Msg_Extr+0x900>)
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	440b      	add	r3, r1
 8005c10:	3302      	adds	r3, #2
 8005c12:	4602      	mov	r2, r0
 8005c14:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005c16:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	da00      	bge.n	8005c22 <Status_Msg_Extr+0x812>
 8005c20:	3307      	adds	r3, #7
 8005c22:	10db      	asrs	r3, r3, #3
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c28:	4413      	add	r3, r2
 8005c2a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c2e:	3308      	adds	r3, #8
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	b21b      	sxth	r3, r3
 8005c34:	425a      	negs	r2, r3
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	f002 0207 	and.w	r2, r2, #7
 8005c3e:	bf58      	it	pl
 8005c40:	4253      	negpl	r3, r2
 8005c42:	b21b      	sxth	r3, r3
 8005c44:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005c46:	78bb      	ldrb	r3, [r7, #2]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f003 fa85 	bl	8009158 <IS_MLK_EIPC_TIME_MATCHING>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <Status_Msg_Extr+0x84e>
 8005c54:	78bb      	ldrb	r3, [r7, #2]
 8005c56:	4a2f      	ldr	r2, [pc, #188]	; (8005d14 <Status_Msg_Extr+0x904>)
 8005c58:	2100      	movs	r1, #0
 8005c5a:	54d1      	strb	r1, [r2, r3]
 8005c5c:	e003      	b.n	8005c66 <Status_Msg_Extr+0x856>
 8005c5e:	78bb      	ldrb	r3, [r7, #2]
 8005c60:	4a2c      	ldr	r2, [pc, #176]	; (8005d14 <Status_Msg_Extr+0x904>)
 8005c62:	2101      	movs	r1, #1
 8005c64:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005c66:	78bb      	ldrb	r3, [r7, #2]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <Status_Msg_Extr+0x908>)
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3304      	adds	r3, #4
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <Status_Msg_Extr+0x870>
	{
		LinkEstablishFlag = SET;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005c80:	787a      	ldrb	r2, [r7, #1]
 8005c82:	78bb      	ldrb	r3, [r7, #2]
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f9de 	bl	8006048 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005c8c:	78bb      	ldrb	r3, [r7, #2]
 8005c8e:	4923      	ldr	r1, [pc, #140]	; (8005d1c <Status_Msg_Extr+0x90c>)
 8005c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005c96:	78bb      	ldrb	r3, [r7, #2]
 8005c98:	4921      	ldr	r1, [pc, #132]	; (8005d20 <Status_Msg_Extr+0x910>)
 8005c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005ca0:	78ba      	ldrb	r2, [r7, #2]
 8005ca2:	4920      	ldr	r1, [pc, #128]	; (8005d24 <Status_Msg_Extr+0x914>)
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	440b      	add	r3, r1
 8005cae:	3310      	adds	r3, #16
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	78bc      	ldrb	r4, [r7, #2]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f009 fb33 	bl	800f320 <HAL_Elaps_Ticks>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4919      	ldr	r1, [pc, #100]	; (8005d24 <Status_Msg_Extr+0x914>)
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	4423      	add	r3, r4
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3310      	adds	r3, #16
 8005cca:	601a      	str	r2, [r3, #0]
	/* Updating the Clocks */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 8005ccc:	78bb      	ldrb	r3, [r7, #2]
 8005cce:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <Status_Msg_Extr+0x918>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d12e      	bne.n	8005d38 <Status_Msg_Extr+0x928>
 8005cda:	78bb      	ldrb	r3, [r7, #2]
 8005cdc:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <Status_Msg_Extr+0x91c>)
 8005cde:	5cd3      	ldrb	r3, [r2, r3]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d829      	bhi.n	8005d38 <Status_Msg_Extr+0x928>
 8005ce4:	78ba      	ldrb	r2, [r7, #2]
 8005ce6:	4912      	ldr	r1, [pc, #72]	; (8005d30 <Status_Msg_Extr+0x920>)
 8005ce8:	4613      	mov	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3305      	adds	r3, #5
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11c      	bne.n	8005d38 <Status_Msg_Extr+0x928>
 8005cfe:	78bb      	ldrb	r3, [r7, #2]
 8005d00:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <Status_Msg_Extr+0x924>)
 8005d02:	5cd3      	ldrb	r3, [r2, r3]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d117      	bne.n	8005d38 <Status_Msg_Extr+0x928>
	{
		LinkEstablishFlag = RESET;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d0e:	e03d      	b.n	8005d8c <Status_Msg_Extr+0x97c>
 8005d10:	200011b8 	.word	0x200011b8
 8005d14:	20001108 	.word	0x20001108
 8005d18:	200011f4 	.word	0x200011f4
 8005d1c:	20000fd4 	.word	0x20000fd4
 8005d20:	20000ffc 	.word	0x20000ffc
 8005d24:	200016a4 	.word	0x200016a4
 8005d28:	20000304 	.word	0x20000304
 8005d2c:	20000ee8 	.word	0x20000ee8
 8005d30:	200013d4 	.word	0x200013d4
 8005d34:	20000edc 	.word	0x20000edc
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8005d38:	78bb      	ldrb	r3, [r7, #2]
 8005d3a:	4aae      	ldr	r2, [pc, #696]	; (8005ff4 <Status_Msg_Extr+0xbe4>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d122      	bne.n	8005d8c <Status_Msg_Extr+0x97c>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 8005d46:	78bb      	ldrb	r3, [r7, #2]
 8005d48:	4aaa      	ldr	r2, [pc, #680]	; (8005ff4 <Status_Msg_Extr+0xbe4>)
 8005d4a:	3366      	adds	r3, #102	; 0x66
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	78bb      	ldrb	r3, [r7, #2]
 8005d54:	4aa8      	ldr	r2, [pc, #672]	; (8005ff8 <Status_Msg_Extr+0xbe8>)
 8005d56:	5cd3      	ldrb	r3, [r2, r3]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	48a8      	ldr	r0, [pc, #672]	; (8005ffc <Status_Msg_Extr+0xbec>)
 8005d5c:	f01e fdfc 	bl	8024958 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8005d60:	78bb      	ldrb	r3, [r7, #2]
 8005d62:	4aa7      	ldr	r2, [pc, #668]	; (8006000 <Status_Msg_Extr+0xbf0>)
 8005d64:	5cd3      	ldrb	r3, [r2, r3]
 8005d66:	4619      	mov	r1, r3
 8005d68:	48a6      	ldr	r0, [pc, #664]	; (8006004 <Status_Msg_Extr+0xbf4>)
 8005d6a:	f01e fdf5 	bl	8024958 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8005d6e:	78ba      	ldrb	r2, [r7, #2]
 8005d70:	49a5      	ldr	r1, [pc, #660]	; (8006008 <Status_Msg_Extr+0xbf8>)
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3305      	adds	r3, #5
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	4619      	mov	r1, r3
 8005d86:	48a1      	ldr	r0, [pc, #644]	; (800600c <Status_Msg_Extr+0xbfc>)
 8005d88:	f01e fde6 	bl	8024958 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005d8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d16d      	bne.n	8005e70 <Status_Msg_Extr+0xa60>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005d94:	78ba      	ldrb	r2, [r7, #2]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4a9c      	ldr	r2, [pc, #624]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005da0:	4413      	add	r3, r2
 8005da2:	3301      	adds	r3, #1
 8005da4:	2210      	movs	r2, #16
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f01e fced 	bl	8024788 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005dae:	78ba      	ldrb	r2, [r7, #2]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4a95      	ldr	r2, [pc, #596]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005dba:	1898      	adds	r0, r3, r2
 8005dbc:	78ba      	ldrb	r2, [r7, #2]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4a93      	ldr	r2, [pc, #588]	; (8006014 <Status_Msg_Extr+0xc04>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	2214      	movs	r2, #20
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f01e fcb3 	bl	8024738 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005dd2:	78bb      	ldrb	r3, [r7, #2]
 8005dd4:	4a90      	ldr	r2, [pc, #576]	; (8006018 <Status_Msg_Extr+0xc08>)
 8005dd6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005dda:	78ba      	ldrb	r2, [r7, #2]
 8005ddc:	488c      	ldr	r0, [pc, #560]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4403      	add	r3, r0
 8005de8:	3312      	adds	r3, #18
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	4299      	cmp	r1, r3
 8005dee:	d03f      	beq.n	8005e70 <Status_Msg_Extr+0xa60>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005df0:	78ba      	ldrb	r2, [r7, #2]
 8005df2:	78b9      	ldrb	r1, [r7, #2]
 8005df4:	4886      	ldr	r0, [pc, #536]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4403      	add	r3, r0
 8005e00:	3312      	adds	r3, #18
 8005e02:	881a      	ldrh	r2, [r3, #0]
 8005e04:	4b84      	ldr	r3, [pc, #528]	; (8006018 <Status_Msg_Extr+0xc08>)
 8005e06:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005e0a:	2214      	movs	r2, #20
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4883      	ldr	r0, [pc, #524]	; (800601c <Status_Msg_Extr+0xc0c>)
 8005e10:	f01e fcba 	bl	8024788 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005e14:	78ba      	ldrb	r2, [r7, #2]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a7c      	ldr	r2, [pc, #496]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005e20:	4413      	add	r3, r2
 8005e22:	2214      	movs	r2, #20
 8005e24:	4619      	mov	r1, r3
 8005e26:	487d      	ldr	r0, [pc, #500]	; (800601c <Status_Msg_Extr+0xc0c>)
 8005e28:	f01e fc86 	bl	8024738 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005e2c:	f240 2007 	movw	r0, #519	; 0x207
 8005e30:	f00a f82a 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005e34:	78bb      	ldrb	r3, [r7, #2]
 8005e36:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <Status_Msg_Extr+0xc10>)
 8005e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d117      	bne.n	8005e70 <Status_Msg_Extr+0xa60>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005e40:	78bb      	ldrb	r3, [r7, #2]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	4a77      	ldr	r2, [pc, #476]	; (8006024 <Status_Msg_Extr+0xc14>)
 8005e46:	4413      	add	r3, r2
 8005e48:	1c98      	adds	r0, r3, #2
 8005e4a:	78ba      	ldrb	r2, [r7, #2]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a6e      	ldr	r2, [pc, #440]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005e56:	4413      	add	r3, r2
 8005e58:	3301      	adds	r3, #1
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	f01e fc6b 	bl	8024738 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8005e62:	f240 1019 	movw	r0, #281	; 0x119
 8005e66:	f00a f80f 	bl	800fe88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005e6a:	4a6f      	ldr	r2, [pc, #444]	; (8006028 <Status_Msg_Extr+0xc18>)
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6e:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005e70:	78b9      	ldrb	r1, [r7, #2]
 8005e72:	78ba      	ldrb	r2, [r7, #2]
 8005e74:	4866      	ldr	r0, [pc, #408]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005e76:	460b      	mov	r3, r1
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4403      	add	r3, r0
 8005e80:	3312      	adds	r3, #18
 8005e82:	8818      	ldrh	r0, [r3, #0]
 8005e84:	4969      	ldr	r1, [pc, #420]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	440b      	add	r3, r1
 8005e90:	3306      	adds	r3, #6
 8005e92:	4602      	mov	r2, r0
 8005e94:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005e96:	78ba      	ldrb	r2, [r7, #2]
 8005e98:	4964      	ldr	r1, [pc, #400]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ea8:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005eaa:	78ba      	ldrb	r2, [r7, #2]
 8005eac:	495f      	ldr	r1, [pc, #380]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005eae:	4613      	mov	r3, r2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	4413      	add	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3305      	adds	r3, #5
 8005eba:	2204      	movs	r2, #4
 8005ebc:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005ebe:	78ba      	ldrb	r2, [r7, #2]
 8005ec0:	495a      	ldr	r1, [pc, #360]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	4413      	add	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	440b      	add	r3, r1
 8005ecc:	78ba      	ldrb	r2, [r7, #2]
 8005ece:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005ed0:	78ba      	ldrb	r2, [r7, #2]
 8005ed2:	4956      	ldr	r1, [pc, #344]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4413      	add	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	440b      	add	r3, r1
 8005ede:	3301      	adds	r3, #1
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005ee4:	78ba      	ldrb	r2, [r7, #2]
 8005ee6:	4951      	ldr	r1, [pc, #324]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005ee8:	4613      	mov	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005ef8:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005efa:	2218      	movs	r2, #24
 8005efc:	2100      	movs	r1, #0
 8005efe:	484c      	ldr	r0, [pc, #304]	; (8006030 <Status_Msg_Extr+0xc20>)
 8005f00:	f01e fc42 	bl	8024788 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005f04:	78ba      	ldrb	r2, [r7, #2]
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4a47      	ldr	r2, [pc, #284]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005f10:	4413      	add	r3, r2
 8005f12:	2218      	movs	r2, #24
 8005f14:	4619      	mov	r1, r3
 8005f16:	4846      	ldr	r0, [pc, #280]	; (8006030 <Status_Msg_Extr+0xc20>)
 8005f18:	f01e fc0e 	bl	8024738 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005f1c:	f240 2001 	movw	r0, #513	; 0x201
 8005f20:	f009 ffb2 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005f24:	78ba      	ldrb	r2, [r7, #2]
 8005f26:	4941      	ldr	r1, [pc, #260]	; (800602c <Status_Msg_Extr+0xc1c>)
 8005f28:	4613      	mov	r3, r2
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	4413      	add	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	440b      	add	r3, r1
 8005f32:	3301      	adds	r3, #1
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005f38:	78bb      	ldrb	r3, [r7, #2]
 8005f3a:	493e      	ldr	r1, [pc, #248]	; (8006034 <Status_Msg_Extr+0xc24>)
 8005f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005f42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d11d      	bne.n	8005f86 <Status_Msg_Extr+0xb76>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005f4a:	78bb      	ldrb	r3, [r7, #2]
 8005f4c:	493a      	ldr	r1, [pc, #232]	; (8006038 <Status_Msg_Extr+0xc28>)
 8005f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005f54:	78ba      	ldrb	r2, [r7, #2]
 8005f56:	4939      	ldr	r1, [pc, #228]	; (800603c <Status_Msg_Extr+0xc2c>)
 8005f58:	4613      	mov	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	3304      	adds	r3, #4
 8005f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f66:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005f68:	78ba      	ldrb	r2, [r7, #2]
 8005f6a:	4934      	ldr	r1, [pc, #208]	; (800603c <Status_Msg_Extr+0xc2c>)
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	3301      	adds	r3, #1
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8005f7c:	78bb      	ldrb	r3, [r7, #2]
 8005f7e:	4a30      	ldr	r2, [pc, #192]	; (8006040 <Status_Msg_Extr+0xc30>)
 8005f80:	2101      	movs	r1, #1
 8005f82:	54d1      	strb	r1, [r2, r3]
 8005f84:	e02e      	b.n	8005fe4 <Status_Msg_Extr+0xbd4>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8005f86:	78bb      	ldrb	r3, [r7, #2]
 8005f88:	4a2d      	ldr	r2, [pc, #180]	; (8006040 <Status_Msg_Extr+0xc30>)
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005f8e:	78ba      	ldrb	r2, [r7, #2]
 8005f90:	492a      	ldr	r1, [pc, #168]	; (800603c <Status_Msg_Extr+0xc2c>)
 8005f92:	4613      	mov	r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fa0:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8005fa2:	78ba      	ldrb	r2, [r7, #2]
 8005fa4:	4925      	ldr	r1, [pc, #148]	; (800603c <Status_Msg_Extr+0xc2c>)
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005fb6:	78ba      	ldrb	r2, [r7, #2]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4a13      	ldr	r2, [pc, #76]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f01e fbdc 	bl	8024788 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8005fd0:	78ba      	ldrb	r2, [r7, #2]
 8005fd2:	490f      	ldr	r1, [pc, #60]	; (8006010 <Status_Msg_Extr+0xc00>)
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3312      	adds	r3, #18
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fe8:	4816      	ldr	r0, [pc, #88]	; (8006044 <Status_Msg_Extr+0xc34>)
 8005fea:	f014 f994 	bl	801a316 <HAL_GPIO_TogglePin>

}
 8005fee:	3754      	adds	r7, #84	; 0x54
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}
 8005ff4:	20000304 	.word	0x20000304
 8005ff8:	20000ee8 	.word	0x20000ee8
 8005ffc:	08026a8c 	.word	0x08026a8c
 8006000:	20000edc 	.word	0x20000edc
 8006004:	08026a9c 	.word	0x08026a9c
 8006008:	200013d4 	.word	0x200013d4
 800600c:	08026ab4 	.word	0x08026ab4
 8006010:	20001eb0 	.word	0x20001eb0
 8006014:	20001de8 	.word	0x20001de8
 8006018:	20000f30 	.word	0x20000f30
 800601c:	20002040 	.word	0x20002040
 8006020:	20000ef4 	.word	0x20000ef4
 8006024:	20001114 	.word	0x20001114
 8006028:	20000e88 	.word	0x20000e88
 800602c:	200016a4 	.word	0x200016a4
 8006030:	20001884 	.word	0x20001884
 8006034:	20000e5c 	.word	0x20000e5c
 8006038:	20000f44 	.word	0x20000f44
 800603c:	20001cf8 	.word	0x20001cf8
 8006040:	20000f94 	.word	0x20000f94
 8006044:	40021c00 	.word	0x40021c00

08006048 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b0a5      	sub	sp, #148	; 0x94
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	460a      	mov	r2, r1
 8006052:	71fb      	strb	r3, [r7, #7]
 8006054:	4613      	mov	r3, r2
 8006056:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006058:	2300      	movs	r3, #0
 800605a:	64bb      	str	r3, [r7, #72]	; 0x48
 800605c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006060:	2238      	movs	r2, #56	; 0x38
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f01e fb8f 	bl	8024788 <memset>
	uint8_t Temp_Buff[60] = {0,};
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	f107 0310 	add.w	r3, r7, #16
 8006072:	2238      	movs	r2, #56	; 0x38
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f01e fb86 	bl	8024788 <memset>
	uint8_t uc_index = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8006082:	2300      	movs	r3, #0
 8006084:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006088:	2300      	movs	r3, #0
 800608a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 800608e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006092:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006096:	441a      	add	r2, r3
 8006098:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800609c:	23f4      	movs	r3, #244	; 0xf4
 800609e:	2108      	movs	r1, #8
 80060a0:	f7fa fb44 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80060a4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80060a8:	3308      	adds	r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da00      	bge.n	80060b0 <Send_Status_Message+0x68>
 80060ae:	3307      	adds	r3, #7
 80060b0:	10db      	asrs	r3, r3, #3
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060b8:	4413      	add	r3, r2
 80060ba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060c2:	3308      	adds	r3, #8
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	b21b      	sxth	r3, r3
 80060c8:	425a      	negs	r2, r3
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	f002 0207 	and.w	r2, r2, #7
 80060d2:	bf58      	it	pl
 80060d4:	4253      	negpl	r3, r2
 80060d6:	b21b      	sxth	r3, r3
 80060d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80060dc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060e4:	441a      	add	r2, r3
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	49bc      	ldr	r1, [pc, #752]	; (80063dc <Send_Status_Message+0x394>)
 80060ea:	3366      	adds	r3, #102	; 0x66
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060f6:	2110      	movs	r1, #16
 80060f8:	f7fa fb18 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80060fc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006100:	3310      	adds	r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	da00      	bge.n	8006108 <Send_Status_Message+0xc0>
 8006106:	3307      	adds	r3, #7
 8006108:	10db      	asrs	r3, r3, #3
 800610a:	b29a      	uxth	r2, r3
 800610c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006110:	4413      	add	r3, r2
 8006112:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006116:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800611a:	3310      	adds	r3, #16
 800611c:	b29b      	uxth	r3, r3
 800611e:	b21b      	sxth	r3, r3
 8006120:	425a      	negs	r2, r3
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	f002 0207 	and.w	r2, r2, #7
 800612a:	bf58      	it	pl
 800612c:	4253      	negpl	r3, r2
 800612e:	b21b      	sxth	r3, r3
 8006130:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8006134:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006138:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800613c:	441a      	add	r2, r3
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	49a6      	ldr	r1, [pc, #664]	; (80063dc <Send_Status_Message+0x394>)
 8006142:	3370      	adds	r3, #112	; 0x70
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800614e:	2110      	movs	r1, #16
 8006150:	f7fa faec 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006154:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006158:	3310      	adds	r3, #16
 800615a:	2b00      	cmp	r3, #0
 800615c:	da00      	bge.n	8006160 <Send_Status_Message+0x118>
 800615e:	3307      	adds	r3, #7
 8006160:	10db      	asrs	r3, r3, #3
 8006162:	b29a      	uxth	r2, r3
 8006164:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006168:	4413      	add	r3, r2
 800616a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800616e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006172:	3310      	adds	r3, #16
 8006174:	b29b      	uxth	r3, r3
 8006176:	b21b      	sxth	r3, r3
 8006178:	425a      	negs	r2, r3
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	f002 0207 	and.w	r2, r2, #7
 8006182:	bf58      	it	pl
 8006184:	4253      	negpl	r3, r2
 8006186:	b21b      	sxth	r3, r3
 8006188:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800618c:	4b94      	ldr	r3, [pc, #592]	; (80063e0 <Send_Status_Message+0x398>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	089b      	lsrs	r3, r3, #2
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d035      	beq.n	8006206 <Send_Status_Message+0x1be>
 800619a:	4b91      	ldr	r3, [pc, #580]	; (80063e0 <Send_Status_Message+0x398>)
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	79fa      	ldrb	r2, [r7, #7]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d130      	bne.n	8006206 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 80061aa:	488e      	ldr	r0, [pc, #568]	; (80063e4 <Send_Status_Message+0x39c>)
 80061ac:	f016 f87c 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b8d      	ldr	r3, [pc, #564]	; (80063e8 <Send_Status_Message+0x3a0>)
 80061b4:	fba3 1302 	umull	r1, r3, r3, r2
 80061b8:	099b      	lsrs	r3, r3, #6
 80061ba:	21c8      	movs	r1, #200	; 0xc8
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 80061c6:	4889      	ldr	r0, [pc, #548]	; (80063ec <Send_Status_Message+0x3a4>)
 80061c8:	f01e fc62 	bl	8024a90 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	4a88      	ldr	r2, [pc, #544]	; (80063f0 <Send_Status_Message+0x3a8>)
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	4413      	add	r3, r2
 80061d4:	3301      	adds	r3, #1
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	4619      	mov	r1, r3
 80061da:	4886      	ldr	r0, [pc, #536]	; (80063f4 <Send_Status_Message+0x3ac>)
 80061dc:	f01e fbbc 	bl	8024958 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80061e0:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80061e4:	4619      	mov	r1, r3
 80061e6:	4884      	ldr	r0, [pc, #528]	; (80063f8 <Send_Status_Message+0x3b0>)
 80061e8:	f01e fbb6 	bl	8024958 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 80061ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061f4:	441a      	add	r2, r3
 80061f6:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80061fa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061fe:	2108      	movs	r1, #8
 8006200:	f7fa fa94 	bl	800072c <InsertBits>
	{
 8006204:	e00f      	b.n	8006226 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8006206:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800620a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800620e:	441a      	add	r2, r3
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	4977      	ldr	r1, [pc, #476]	; (80063f0 <Send_Status_Message+0x3a8>)
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	440b      	add	r3, r1
 8006218:	3301      	adds	r3, #1
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006220:	2108      	movs	r1, #8
 8006222:	f7fa fa83 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8006226:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800622a:	3308      	adds	r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	da00      	bge.n	8006232 <Send_Status_Message+0x1ea>
 8006230:	3307      	adds	r3, #7
 8006232:	10db      	asrs	r3, r3, #3
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800623a:	4413      	add	r3, r2
 800623c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006240:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006244:	3308      	adds	r3, #8
 8006246:	b29b      	uxth	r3, r3
 8006248:	b21b      	sxth	r3, r3
 800624a:	425a      	negs	r2, r3
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	f002 0207 	and.w	r2, r2, #7
 8006254:	bf58      	it	pl
 8006256:	4253      	negpl	r3, r2
 8006258:	b21b      	sxth	r3, r3
 800625a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800625e:	4b60      	ldr	r3, [pc, #384]	; (80063e0 <Send_Status_Message+0x398>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d038      	beq.n	80062de <Send_Status_Message+0x296>
 800626c:	4b5c      	ldr	r3, [pc, #368]	; (80063e0 <Send_Status_Message+0x398>)
 800626e:	791b      	ldrb	r3, [r3, #4]
 8006270:	79fa      	ldrb	r2, [r7, #7]
 8006272:	429a      	cmp	r2, r3
 8006274:	d133      	bne.n	80062de <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800627c:	4859      	ldr	r0, [pc, #356]	; (80063e4 <Send_Status_Message+0x39c>)
 800627e:	f016 f813 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8006282:	4602      	mov	r2, r0
 8006284:	4b58      	ldr	r3, [pc, #352]	; (80063e8 <Send_Status_Message+0x3a0>)
 8006286:	fba3 1302 	umull	r1, r3, r3, r2
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	21c8      	movs	r1, #200	; 0xc8
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8006298:	4858      	ldr	r0, [pc, #352]	; (80063fc <Send_Status_Message+0x3b4>)
 800629a:	f01e fbf9 	bl	8024a90 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	4a53      	ldr	r2, [pc, #332]	; (80063f0 <Send_Status_Message+0x3a8>)
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	4413      	add	r3, r2
 80062a6:	3302      	adds	r3, #2
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	4619      	mov	r1, r3
 80062ac:	4854      	ldr	r0, [pc, #336]	; (8006400 <Send_Status_Message+0x3b8>)
 80062ae:	f01e fb53 	bl	8024958 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80062b2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80062b6:	4619      	mov	r1, r3
 80062b8:	4852      	ldr	r0, [pc, #328]	; (8006404 <Send_Status_Message+0x3bc>)
 80062ba:	f01e fb4d 	bl	8024958 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80062be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062c6:	441a      	add	r2, r3
 80062c8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80062cc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062d0:	2108      	movs	r1, #8
 80062d2:	f7fa fa2b 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 80062d6:	4b4c      	ldr	r3, [pc, #304]	; (8006408 <Send_Status_Message+0x3c0>)
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
	{
 80062dc:	e020      	b.n	8006320 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 80062de:	4b4a      	ldr	r3, [pc, #296]	; (8006408 <Send_Status_Message+0x3c0>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80062e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062ec:	18d1      	adds	r1, r2, r3
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	483f      	ldr	r0, [pc, #252]	; (80063f0 <Send_Status_Message+0x3a8>)
 80062f2:	011a      	lsls	r2, r3, #4
 80062f4:	4402      	add	r2, r0
 80062f6:	3202      	adds	r2, #2
 80062f8:	7812      	ldrb	r2, [r2, #0]
 80062fa:	3201      	adds	r2, #1
 80062fc:	b2d4      	uxtb	r4, r2
 80062fe:	483c      	ldr	r0, [pc, #240]	; (80063f0 <Send_Status_Message+0x3a8>)
 8006300:	011a      	lsls	r2, r3, #4
 8006302:	4402      	add	r2, r0
 8006304:	3202      	adds	r2, #2
 8006306:	4620      	mov	r0, r4
 8006308:	7010      	strb	r0, [r2, #0]
 800630a:	4a39      	ldr	r2, [pc, #228]	; (80063f0 <Send_Status_Message+0x3a8>)
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	4413      	add	r3, r2
 8006310:	3302      	adds	r3, #2
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006318:	460a      	mov	r2, r1
 800631a:	2108      	movs	r1, #8
 800631c:	f7fa fa06 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006320:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006324:	3308      	adds	r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	da00      	bge.n	800632c <Send_Status_Message+0x2e4>
 800632a:	3307      	adds	r3, #7
 800632c:	10db      	asrs	r3, r3, #3
 800632e:	b29a      	uxth	r2, r3
 8006330:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006334:	4413      	add	r3, r2
 8006336:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800633a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800633e:	3308      	adds	r3, #8
 8006340:	b29b      	uxth	r3, r3
 8006342:	b21b      	sxth	r3, r3
 8006344:	425a      	negs	r2, r3
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	f002 0207 	and.w	r2, r2, #7
 800634e:	bf58      	it	pl
 8006350:	4253      	negpl	r3, r2
 8006352:	b21b      	sxth	r3, r3
 8006354:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006358:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800635c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006360:	441a      	add	r2, r3
 8006362:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006366:	2304      	movs	r3, #4
 8006368:	2108      	movs	r1, #8
 800636a:	f7fa f9df 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800636e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006372:	3308      	adds	r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	da00      	bge.n	800637a <Send_Status_Message+0x332>
 8006378:	3307      	adds	r3, #7
 800637a:	10db      	asrs	r3, r3, #3
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006382:	4413      	add	r3, r2
 8006384:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006388:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800638c:	3308      	adds	r3, #8
 800638e:	b29b      	uxth	r3, r3
 8006390:	b21b      	sxth	r3, r3
 8006392:	425a      	negs	r2, r3
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	f002 0207 	and.w	r2, r2, #7
 800639c:	bf58      	it	pl
 800639e:	4253      	negpl	r3, r2
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	4a11      	ldr	r2, [pc, #68]	; (80063f0 <Send_Status_Message+0x3a8>)
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d052      	beq.n	8006460 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	4a13      	ldr	r2, [pc, #76]	; (800640c <Send_Status_Message+0x3c4>)
 80063be:	5cd3      	ldrb	r3, [r2, r3]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d125      	bne.n	8006410 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 80063c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063cc:	441a      	add	r2, r3
 80063ce:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063d2:	2368      	movs	r3, #104	; 0x68
 80063d4:	2110      	movs	r1, #16
 80063d6:	f7fa f9a9 	bl	800072c <InsertBits>
 80063da:	e024      	b.n	8006426 <Send_Status_Message+0x3de>
 80063dc:	20000304 	.word	0x20000304
 80063e0:	2000198c 	.word	0x2000198c
 80063e4:	2000f3c4 	.word	0x2000f3c4
 80063e8:	51eb851f 	.word	0x51eb851f
 80063ec:	080264ac 	.word	0x080264ac
 80063f0:	200011f4 	.word	0x200011f4
 80063f4:	08026ac4 	.word	0x08026ac4
 80063f8:	08026ae4 	.word	0x08026ae4
 80063fc:	08026510 	.word	0x08026510
 8006400:	08026b04 	.word	0x08026b04
 8006404:	08026b24 	.word	0x08026b24
 8006408:	20000e51 	.word	0x20000e51
 800640c:	20001108 	.word	0x20001108
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006410:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006414:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006418:	441a      	add	r2, r3
 800641a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800641e:	2328      	movs	r3, #40	; 0x28
 8006420:	2110      	movs	r1, #16
 8006422:	f7fa f983 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006426:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800642a:	3310      	adds	r3, #16
 800642c:	2b00      	cmp	r3, #0
 800642e:	da00      	bge.n	8006432 <Send_Status_Message+0x3ea>
 8006430:	3307      	adds	r3, #7
 8006432:	10db      	asrs	r3, r3, #3
 8006434:	b29a      	uxth	r2, r3
 8006436:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800643a:	4413      	add	r3, r2
 800643c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006440:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006444:	3310      	adds	r3, #16
 8006446:	b29b      	uxth	r3, r3
 8006448:	b21b      	sxth	r3, r3
 800644a:	425a      	negs	r2, r3
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	f002 0207 	and.w	r2, r2, #7
 8006454:	bf58      	it	pl
 8006456:	4253      	negpl	r3, r2
 8006458:	b21b      	sxth	r3, r3
 800645a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800645e:	e03a      	b.n	80064d6 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <Send_Status_Message+0x43c>)
 8006464:	5cd3      	ldrb	r3, [r2, r3]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10e      	bne.n	8006488 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 800646a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800646e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006472:	441a      	add	r2, r3
 8006474:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006478:	2364      	movs	r3, #100	; 0x64
 800647a:	2110      	movs	r1, #16
 800647c:	f7fa f956 	bl	800072c <InsertBits>
 8006480:	e00d      	b.n	800649e <Send_Status_Message+0x456>
 8006482:	bf00      	nop
 8006484:	20001108 	.word	0x20001108
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006488:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800648c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006490:	441a      	add	r2, r3
 8006492:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006496:	2324      	movs	r3, #36	; 0x24
 8006498:	2110      	movs	r1, #16
 800649a:	f7fa f947 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 800649e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80064a2:	3310      	adds	r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da00      	bge.n	80064aa <Send_Status_Message+0x462>
 80064a8:	3307      	adds	r3, #7
 80064aa:	10db      	asrs	r3, r3, #3
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80064b2:	4413      	add	r3, r2
 80064b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064bc:	3310      	adds	r3, #16
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b21b      	sxth	r3, r3
 80064c2:	425a      	negs	r2, r3
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	f002 0207 	and.w	r2, r2, #7
 80064cc:	bf58      	it	pl
 80064ce:	4253      	negpl	r3, r2
 80064d0:	b21b      	sxth	r3, r3
 80064d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	4ac6      	ldr	r2, [pc, #792]	; (80067f4 <Send_Status_Message+0x7ac>)
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	4413      	add	r3, r2
 80064de:	3304      	adds	r3, #4
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8139 	beq.w	8006762 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	4ac1      	ldr	r2, [pc, #772]	; (80067f8 <Send_Status_Message+0x7b0>)
 80064f4:	5cd3      	ldrb	r3, [r2, r3]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d114      	bne.n	8006524 <Send_Status_Message+0x4dc>
		{
			Get_time();
 80064fa:	f005 fa97 	bl	800ba2c <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80064fe:	79fa      	ldrb	r2, [r7, #7]
 8006500:	4613      	mov	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	4413      	add	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	4abc      	ldr	r2, [pc, #752]	; (80067fc <Send_Status_Message+0x7b4>)
 800650a:	4413      	add	r3, r2
 800650c:	4abc      	ldr	r2, [pc, #752]	; (8006800 <Send_Status_Message+0x7b8>)
 800650e:	6811      	ldr	r1, [r2, #0]
 8006510:	6019      	str	r1, [r3, #0]
 8006512:	8892      	ldrh	r2, [r2, #4]
 8006514:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006516:	48bb      	ldr	r0, [pc, #748]	; (8006804 <Send_Status_Message+0x7bc>)
 8006518:	f01e faba 	bl	8024a90 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	4ab6      	ldr	r2, [pc, #728]	; (80067f8 <Send_Status_Message+0x7b0>)
 8006520:	2100      	movs	r1, #0
 8006522:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006524:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006528:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800652c:	18d1      	adds	r1, r2, r3
 800652e:	79fa      	ldrb	r2, [r7, #7]
 8006530:	48b2      	ldr	r0, [pc, #712]	; (80067fc <Send_Status_Message+0x7b4>)
 8006532:	4613      	mov	r3, r2
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	4413      	add	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	4403      	add	r3, r0
 800653c:	3305      	adds	r3, #5
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006544:	460a      	mov	r2, r1
 8006546:	2108      	movs	r1, #8
 8006548:	f7fa f8f0 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800654c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006550:	3308      	adds	r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	da00      	bge.n	8006558 <Send_Status_Message+0x510>
 8006556:	3307      	adds	r3, #7
 8006558:	10db      	asrs	r3, r3, #3
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006560:	4413      	add	r3, r2
 8006562:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006566:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800656a:	3308      	adds	r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	b21b      	sxth	r3, r3
 8006570:	425a      	negs	r2, r3
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	f002 0207 	and.w	r2, r2, #7
 800657a:	bf58      	it	pl
 800657c:	4253      	negpl	r3, r2
 800657e:	b21b      	sxth	r3, r3
 8006580:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8006584:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006588:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800658c:	18d1      	adds	r1, r2, r3
 800658e:	79fa      	ldrb	r2, [r7, #7]
 8006590:	489a      	ldr	r0, [pc, #616]	; (80067fc <Send_Status_Message+0x7b4>)
 8006592:	4613      	mov	r3, r2
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	4413      	add	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4403      	add	r3, r0
 800659c:	3304      	adds	r3, #4
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80065a4:	460a      	mov	r2, r1
 80065a6:	2108      	movs	r1, #8
 80065a8:	f7fa f8c0 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80065ac:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065b0:	3308      	adds	r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da00      	bge.n	80065b8 <Send_Status_Message+0x570>
 80065b6:	3307      	adds	r3, #7
 80065b8:	10db      	asrs	r3, r3, #3
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065c0:	4413      	add	r3, r2
 80065c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80065c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065ca:	3308      	adds	r3, #8
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	b21b      	sxth	r3, r3
 80065d0:	425a      	negs	r2, r3
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	f002 0207 	and.w	r2, r2, #7
 80065da:	bf58      	it	pl
 80065dc:	4253      	negpl	r3, r2
 80065de:	b21b      	sxth	r3, r3
 80065e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 80065e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80065ec:	18d1      	adds	r1, r2, r3
 80065ee:	79fa      	ldrb	r2, [r7, #7]
 80065f0:	4882      	ldr	r0, [pc, #520]	; (80067fc <Send_Status_Message+0x7b4>)
 80065f2:	4613      	mov	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4413      	add	r3, r2
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4403      	add	r3, r0
 80065fc:	3303      	adds	r3, #3
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006604:	460a      	mov	r2, r1
 8006606:	2108      	movs	r1, #8
 8006608:	f7fa f890 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800660c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006610:	3308      	adds	r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	da00      	bge.n	8006618 <Send_Status_Message+0x5d0>
 8006616:	3307      	adds	r3, #7
 8006618:	10db      	asrs	r3, r3, #3
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006620:	4413      	add	r3, r2
 8006622:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006626:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800662a:	3308      	adds	r3, #8
 800662c:	b29b      	uxth	r3, r3
 800662e:	b21b      	sxth	r3, r3
 8006630:	425a      	negs	r2, r3
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	f002 0207 	and.w	r2, r2, #7
 800663a:	bf58      	it	pl
 800663c:	4253      	negpl	r3, r2
 800663e:	b21b      	sxth	r3, r3
 8006640:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006644:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006648:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800664c:	18d1      	adds	r1, r2, r3
 800664e:	79fa      	ldrb	r2, [r7, #7]
 8006650:	486a      	ldr	r0, [pc, #424]	; (80067fc <Send_Status_Message+0x7b4>)
 8006652:	4613      	mov	r3, r2
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	4413      	add	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	4403      	add	r3, r0
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006662:	460a      	mov	r2, r1
 8006664:	2108      	movs	r1, #8
 8006666:	f7fa f861 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800666a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800666e:	3308      	adds	r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	da00      	bge.n	8006676 <Send_Status_Message+0x62e>
 8006674:	3307      	adds	r3, #7
 8006676:	10db      	asrs	r3, r3, #3
 8006678:	b29a      	uxth	r2, r3
 800667a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800667e:	4413      	add	r3, r2
 8006680:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006684:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006688:	3308      	adds	r3, #8
 800668a:	b29b      	uxth	r3, r3
 800668c:	b21b      	sxth	r3, r3
 800668e:	425a      	negs	r2, r3
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	f002 0207 	and.w	r2, r2, #7
 8006698:	bf58      	it	pl
 800669a:	4253      	negpl	r3, r2
 800669c:	b21b      	sxth	r3, r3
 800669e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80066a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80066a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066aa:	18d1      	adds	r1, r2, r3
 80066ac:	79fa      	ldrb	r2, [r7, #7]
 80066ae:	4853      	ldr	r0, [pc, #332]	; (80067fc <Send_Status_Message+0x7b4>)
 80066b0:	4613      	mov	r3, r2
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	4413      	add	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4403      	add	r3, r0
 80066ba:	3301      	adds	r3, #1
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80066c2:	460a      	mov	r2, r1
 80066c4:	2108      	movs	r1, #8
 80066c6:	f7fa f831 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80066ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80066ce:	3308      	adds	r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	da00      	bge.n	80066d6 <Send_Status_Message+0x68e>
 80066d4:	3307      	adds	r3, #7
 80066d6:	10db      	asrs	r3, r3, #3
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80066de:	4413      	add	r3, r2
 80066e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80066e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066e8:	3308      	adds	r3, #8
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	b21b      	sxth	r3, r3
 80066ee:	425a      	negs	r2, r3
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	f002 0207 	and.w	r2, r2, #7
 80066f8:	bf58      	it	pl
 80066fa:	4253      	negpl	r3, r2
 80066fc:	b21b      	sxth	r3, r3
 80066fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006702:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006706:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800670a:	18d1      	adds	r1, r2, r3
 800670c:	79fa      	ldrb	r2, [r7, #7]
 800670e:	483b      	ldr	r0, [pc, #236]	; (80067fc <Send_Status_Message+0x7b4>)
 8006710:	4613      	mov	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	4413      	add	r3, r2
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	4403      	add	r3, r0
 800671a:	3302      	adds	r3, #2
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006722:	460a      	mov	r2, r1
 8006724:	2108      	movs	r1, #8
 8006726:	f7fa f801 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800672a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800672e:	3308      	adds	r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	da00      	bge.n	8006736 <Send_Status_Message+0x6ee>
 8006734:	3307      	adds	r3, #7
 8006736:	10db      	asrs	r3, r3, #3
 8006738:	b29a      	uxth	r2, r3
 800673a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800673e:	4413      	add	r3, r2
 8006740:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006744:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006748:	3308      	adds	r3, #8
 800674a:	b29b      	uxth	r3, r3
 800674c:	b21b      	sxth	r3, r3
 800674e:	425a      	negs	r2, r3
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	f002 0207 	and.w	r2, r2, #7
 8006758:	bf58      	it	pl
 800675a:	4253      	negpl	r3, r2
 800675c:	b21b      	sxth	r3, r3
 800675e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <Send_Status_Message+0x7c0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d031      	beq.n	80067d4 <Send_Status_Message+0x78c>
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <Send_Status_Message+0x7c0>)
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	79fa      	ldrb	r2, [r7, #7]
 8006776:	429a      	cmp	r2, r3
 8006778:	d12c      	bne.n	80067d4 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006780:	4822      	ldr	r0, [pc, #136]	; (800680c <Send_Status_Message+0x7c4>)
 8006782:	f015 fd91 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8006786:	4602      	mov	r2, r0
 8006788:	4b21      	ldr	r3, [pc, #132]	; (8006810 <Send_Status_Message+0x7c8>)
 800678a:	fba3 1302 	umull	r1, r3, r3, r2
 800678e:	0dd9      	lsrs	r1, r3, #23
 8006790:	460b      	mov	r3, r1
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	1a5b      	subs	r3, r3, r1
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 800679e:	481d      	ldr	r0, [pc, #116]	; (8006814 <Send_Status_Message+0x7cc>)
 80067a0:	f01e f976 	bl	8024a90 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	4a13      	ldr	r2, [pc, #76]	; (80067f4 <Send_Status_Message+0x7ac>)
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	4413      	add	r3, r2
 80067ac:	330c      	adds	r3, #12
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	4819      	ldr	r0, [pc, #100]	; (8006818 <Send_Status_Message+0x7d0>)
 80067b4:	f01e f8d0 	bl	8024958 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 80067b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80067bc:	4817      	ldr	r0, [pc, #92]	; (800681c <Send_Status_Message+0x7d4>)
 80067be:	f01e f8cb 	bl	8024958 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 80067c2:	f107 020c 	add.w	r2, r7, #12
 80067c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ca:	2118      	movs	r1, #24
 80067cc:	2000      	movs	r0, #0
 80067ce:	f7f9 ffad 	bl	800072c <InsertBits>
	{
 80067d2:	e00b      	b.n	80067ec <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	4a07      	ldr	r2, [pc, #28]	; (80067f4 <Send_Status_Message+0x7ac>)
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	4413      	add	r3, r2
 80067dc:	330c      	adds	r3, #12
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f107 020c 	add.w	r2, r7, #12
 80067e4:	2118      	movs	r1, #24
 80067e6:	2000      	movs	r0, #0
 80067e8:	f7f9 ffa0 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 80067ec:	2300      	movs	r3, #0
 80067ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80067f2:	e027      	b.n	8006844 <Send_Status_Message+0x7fc>
 80067f4:	200011f4 	.word	0x200011f4
 80067f8:	20001108 	.word	0x20001108
 80067fc:	200011b8 	.word	0x200011b8
 8006800:	200028e4 	.word	0x200028e4
 8006804:	08026868 	.word	0x08026868
 8006808:	2000198c 	.word	0x2000198c
 800680c:	2000f3c4 	.word	0x2000f3c4
 8006810:	80008001 	.word	0x80008001
 8006814:	08026880 	.word	0x08026880
 8006818:	080268a4 	.word	0x080268a4
 800681c:	080268c8 	.word	0x080268c8
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006820:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006824:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006828:	3303      	adds	r3, #3
 800682a:	3290      	adds	r2, #144	; 0x90
 800682c:	443a      	add	r2, r7
 800682e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006832:	3390      	adds	r3, #144	; 0x90
 8006834:	443b      	add	r3, r7
 8006836:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800683a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800683e:	3301      	adds	r3, #1
 8006840:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006844:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006848:	b29b      	uxth	r3, r3
 800684a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800684e:	429a      	cmp	r2, r3
 8006850:	d8e6      	bhi.n	8006820 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006852:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006856:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800685a:	18d4      	adds	r4, r2, r3
 800685c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006860:	b29b      	uxth	r3, r3
 8006862:	3303      	adds	r3, #3
 8006864:	b29a      	uxth	r2, r3
 8006866:	f107 030c 	add.w	r3, r7, #12
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f00d fb01 	bl	8013e74 <CalculateDirectReverseCrc>
 8006872:	4603      	mov	r3, r0
 8006874:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006878:	4622      	mov	r2, r4
 800687a:	2120      	movs	r1, #32
 800687c:	f7f9 ff56 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006880:	4b1f      	ldr	r3, [pc, #124]	; (8006900 <Send_Status_Message+0x8b8>)
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 8006886:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800688a:	3320      	adds	r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	da00      	bge.n	8006892 <Send_Status_Message+0x84a>
 8006890:	3307      	adds	r3, #7
 8006892:	10db      	asrs	r3, r3, #3
 8006894:	b29a      	uxth	r2, r3
 8006896:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800689a:	4413      	add	r3, r2
 800689c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80068a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068a4:	3320      	adds	r3, #32
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	b21b      	sxth	r3, r3
 80068aa:	425a      	negs	r2, r3
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	f002 0207 	and.w	r2, r2, #7
 80068b4:	bf58      	it	pl
 80068b6:	4253      	negpl	r3, r2
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80068be:	4b11      	ldr	r3, [pc, #68]	; (8006904 <Send_Status_Message+0x8bc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	0a5b      	lsrs	r3, r3, #9
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <Send_Status_Message+0x89c>
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <Send_Status_Message+0x8bc>)
 80068ce:	791b      	ldrb	r3, [r3, #4]
 80068d0:	79fa      	ldrb	r2, [r7, #7]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d106      	bne.n	80068e4 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 80068d6:	480c      	ldr	r0, [pc, #48]	; (8006908 <Send_Status_Message+0x8c0>)
 80068d8:	f01e f8da 	bl	8024a90 <puts>
		printf("Not Sending Reply");
 80068dc:	480b      	ldr	r0, [pc, #44]	; (800690c <Send_Status_Message+0x8c4>)
 80068de:	f01e f83b 	bl	8024958 <iprintf>
 80068e2:	e009      	b.n	80068f8 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 80068e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068e8:	b2d9      	uxtb	r1, r3
 80068ea:	79fa      	ldrb	r2, [r7, #7]
 80068ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 f82b 	bl	800794c <Process_Sending_Reply>
	}
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	3794      	adds	r7, #148	; 0x94
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}
 8006900:	20000e51 	.word	0x20000e51
 8006904:	2000198c 	.word	0x2000198c
 8006908:	080265dc 	.word	0x080265dc
 800690c:	080265f4 	.word	0x080265f4

08006910 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4603      	mov	r3, r0
 8006920:	70fb      	strb	r3, [r7, #3]
 8006922:	460b      	mov	r3, r1
 8006924:	70bb      	strb	r3, [r7, #2]
 8006926:	4613      	mov	r3, r2
 8006928:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = RESET;
 8006932:	2300      	movs	r3, #0
 8006934:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006936:	f011 f805 	bl	8017944 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 800693c:	2300      	movs	r3, #0
 800693e:	81fb      	strh	r3, [r7, #14]
 8006940:	2300      	movs	r3, #0
 8006942:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b05      	subs	r3, #5
 800694a:	b29b      	uxth	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f00d fa90 	bl	8013e74 <CalculateDirectReverseCrc>
 8006954:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	3b05      	subs	r3, #5
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	441a      	add	r2, r3
 800695e:	89bb      	ldrh	r3, [r7, #12]
 8006960:	2120      	movs	r1, #32
 8006962:	4618      	mov	r0, r3
 8006964:	f7f9 fe56 	bl	8000614 <ExtractBits>
 8006968:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	429a      	cmp	r2, r3
 8006970:	d01c      	beq.n	80069ac <Service_Msg_Extr+0x9c>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8006972:	78bb      	ldrb	r3, [r7, #2]
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <Service_Msg_Extr+0x8c>)
 8006976:	3366      	adds	r3, #102	; 0x66
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4619      	mov	r1, r3
 8006980:	4807      	ldr	r0, [pc, #28]	; (80069a0 <Service_Msg_Extr+0x90>)
 8006982:	f01d ffe9 	bl	8024958 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	4806      	ldr	r0, [pc, #24]	; (80069a4 <Service_Msg_Extr+0x94>)
 800698a:	f01d ffe5 	bl	8024958 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 800698e:	69b9      	ldr	r1, [r7, #24]
 8006990:	4805      	ldr	r0, [pc, #20]	; (80069a8 <Service_Msg_Extr+0x98>)
 8006992:	f01d ffe1 	bl	8024958 <iprintf>
		return;
 8006996:	f000 bc0c 	b.w	80071b2 <Service_Msg_Extr+0x8a2>
 800699a:	bf00      	nop
 800699c:	20000304 	.word	0x20000304
 80069a0:	08026b48 	.word	0x08026b48
 80069a4:	08026348 	.word	0x08026348
 80069a8:	08026358 	.word	0x08026358
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80069ac:	78bb      	ldrb	r3, [r7, #2]
 80069ae:	49ae      	ldr	r1, [pc, #696]	; (8006c68 <Service_Msg_Extr+0x358>)
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80069b6:	78bb      	ldrb	r3, [r7, #2]
 80069b8:	49ac      	ldr	r1, [pc, #688]	; (8006c6c <Service_Msg_Extr+0x35c>)
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80069c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069c4:	3308      	adds	r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	da00      	bge.n	80069cc <Service_Msg_Extr+0xbc>
 80069ca:	3307      	adds	r3, #7
 80069cc:	10db      	asrs	r3, r3, #3
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	89fb      	ldrh	r3, [r7, #14]
 80069d2:	4413      	add	r3, r2
 80069d4:	81fb      	strh	r3, [r7, #14]
 80069d6:	89bb      	ldrh	r3, [r7, #12]
 80069d8:	3308      	adds	r3, #8
 80069da:	b29b      	uxth	r3, r3
 80069dc:	b21b      	sxth	r3, r3
 80069de:	425a      	negs	r2, r3
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	f002 0207 	and.w	r2, r2, #7
 80069e8:	bf58      	it	pl
 80069ea:	4253      	negpl	r3, r2
 80069ec:	b21b      	sxth	r3, r3
 80069ee:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80069f0:	89fb      	ldrh	r3, [r7, #14]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	441a      	add	r2, r3
 80069f6:	89bb      	ldrh	r3, [r7, #12]
 80069f8:	2110      	movs	r1, #16
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7f9 fe0a 	bl	8000614 <ExtractBits>
 8006a00:	4603      	mov	r3, r0
 8006a02:	78ba      	ldrb	r2, [r7, #2]
 8006a04:	b298      	uxth	r0, r3
 8006a06:	499a      	ldr	r1, [pc, #616]	; (8006c70 <Service_Msg_Extr+0x360>)
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	3306      	adds	r3, #6
 8006a14:	4602      	mov	r2, r0
 8006a16:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006a18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a1c:	3310      	adds	r3, #16
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da00      	bge.n	8006a24 <Service_Msg_Extr+0x114>
 8006a22:	3307      	adds	r3, #7
 8006a24:	10db      	asrs	r3, r3, #3
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	89fb      	ldrh	r3, [r7, #14]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	81fb      	strh	r3, [r7, #14]
 8006a2e:	89bb      	ldrh	r3, [r7, #12]
 8006a30:	3310      	adds	r3, #16
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	b21b      	sxth	r3, r3
 8006a36:	425a      	negs	r2, r3
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	f002 0207 	and.w	r2, r2, #7
 8006a40:	bf58      	it	pl
 8006a42:	4253      	negpl	r3, r2
 8006a44:	b21b      	sxth	r3, r3
 8006a46:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006a48:	89fb      	ldrh	r3, [r7, #14]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	441a      	add	r2, r3
 8006a4e:	89bb      	ldrh	r3, [r7, #12]
 8006a50:	2110      	movs	r1, #16
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7f9 fdde 	bl	8000614 <ExtractBits>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	78ba      	ldrb	r2, [r7, #2]
 8006a5c:	b298      	uxth	r0, r3
 8006a5e:	4984      	ldr	r1, [pc, #528]	; (8006c70 <Service_Msg_Extr+0x360>)
 8006a60:	4613      	mov	r3, r2
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8006a70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a74:	3310      	adds	r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da00      	bge.n	8006a7c <Service_Msg_Extr+0x16c>
 8006a7a:	3307      	adds	r3, #7
 8006a7c:	10db      	asrs	r3, r3, #3
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	89fb      	ldrh	r3, [r7, #14]
 8006a82:	4413      	add	r3, r2
 8006a84:	81fb      	strh	r3, [r7, #14]
 8006a86:	89bb      	ldrh	r3, [r7, #12]
 8006a88:	3310      	adds	r3, #16
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	425a      	negs	r2, r3
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	f002 0207 	and.w	r2, r2, #7
 8006a98:	bf58      	it	pl
 8006a9a:	4253      	negpl	r3, r2
 8006a9c:	b21b      	sxth	r3, r3
 8006a9e:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006aa0:	89fb      	ldrh	r3, [r7, #14]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	89bb      	ldrh	r3, [r7, #12]
 8006aa8:	2108      	movs	r1, #8
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7f9 fdb2 	bl	8000614 <ExtractBits>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	78bb      	ldrb	r3, [r7, #2]
 8006ab4:	b2d1      	uxtb	r1, r2
 8006ab6:	4a6f      	ldr	r2, [pc, #444]	; (8006c74 <Service_Msg_Extr+0x364>)
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	4413      	add	r3, r2
 8006abc:	3302      	adds	r3, #2
 8006abe:	460a      	mov	r2, r1
 8006ac0:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8006ac2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da00      	bge.n	8006ace <Service_Msg_Extr+0x1be>
 8006acc:	3307      	adds	r3, #7
 8006ace:	10db      	asrs	r3, r3, #3
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	89fb      	ldrh	r3, [r7, #14]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	81fb      	strh	r3, [r7, #14]
 8006ad8:	89bb      	ldrh	r3, [r7, #12]
 8006ada:	3308      	adds	r3, #8
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	425a      	negs	r2, r3
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	f002 0207 	and.w	r2, r2, #7
 8006aea:	bf58      	it	pl
 8006aec:	4253      	negpl	r3, r2
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006af2:	89fb      	ldrh	r3, [r7, #14]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	441a      	add	r2, r3
 8006af8:	89bb      	ldrh	r3, [r7, #12]
 8006afa:	2108      	movs	r1, #8
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7f9 fd89 	bl	8000614 <ExtractBits>
 8006b02:	4602      	mov	r2, r0
 8006b04:	78bb      	ldrb	r3, [r7, #2]
 8006b06:	b2d1      	uxtb	r1, r2
 8006b08:	4a5a      	ldr	r2, [pc, #360]	; (8006c74 <Service_Msg_Extr+0x364>)
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	4413      	add	r3, r2
 8006b0e:	3301      	adds	r3, #1
 8006b10:	460a      	mov	r2, r1
 8006b12:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006b14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	da00      	bge.n	8006b20 <Service_Msg_Extr+0x210>
 8006b1e:	3307      	adds	r3, #7
 8006b20:	10db      	asrs	r3, r3, #3
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	89fb      	ldrh	r3, [r7, #14]
 8006b26:	4413      	add	r3, r2
 8006b28:	81fb      	strh	r3, [r7, #14]
 8006b2a:	89bb      	ldrh	r3, [r7, #12]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b21b      	sxth	r3, r3
 8006b32:	425a      	negs	r2, r3
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	f002 0207 	and.w	r2, r2, #7
 8006b3c:	bf58      	it	pl
 8006b3e:	4253      	negpl	r3, r2
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b44:	89fb      	ldrh	r3, [r7, #14]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	441a      	add	r2, r3
 8006b4a:	89bb      	ldrh	r3, [r7, #12]
 8006b4c:	2108      	movs	r1, #8
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7f9 fd60 	bl	8000614 <ExtractBits>
 8006b54:	4603      	mov	r3, r0
 8006b56:	78ba      	ldrb	r2, [r7, #2]
 8006b58:	b2d8      	uxtb	r0, r3
 8006b5a:	4945      	ldr	r1, [pc, #276]	; (8006c70 <Service_Msg_Extr+0x360>)
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	3302      	adds	r3, #2
 8006b68:	4602      	mov	r2, r0
 8006b6a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006b6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b70:	3308      	adds	r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da00      	bge.n	8006b78 <Service_Msg_Extr+0x268>
 8006b76:	3307      	adds	r3, #7
 8006b78:	10db      	asrs	r3, r3, #3
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	89fb      	ldrh	r3, [r7, #14]
 8006b7e:	4413      	add	r3, r2
 8006b80:	81fb      	strh	r3, [r7, #14]
 8006b82:	89bb      	ldrh	r3, [r7, #12]
 8006b84:	3308      	adds	r3, #8
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	b21b      	sxth	r3, r3
 8006b8a:	425a      	negs	r2, r3
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	f002 0207 	and.w	r2, r2, #7
 8006b94:	bf58      	it	pl
 8006b96:	4253      	negpl	r3, r2
 8006b98:	b21b      	sxth	r3, r3
 8006b9a:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	441a      	add	r2, r3
 8006ba2:	89bb      	ldrh	r3, [r7, #12]
 8006ba4:	2110      	movs	r1, #16
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7f9 fd34 	bl	8000614 <ExtractBits>
 8006bac:	4602      	mov	r2, r0
 8006bae:	78bb      	ldrb	r3, [r7, #2]
 8006bb0:	b291      	uxth	r1, r2
 8006bb2:	4a30      	ldr	r2, [pc, #192]	; (8006c74 <Service_Msg_Extr+0x364>)
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3304      	adds	r3, #4
 8006bba:	460a      	mov	r2, r1
 8006bbc:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8006bbe:	492e      	ldr	r1, [pc, #184]	; (8006c78 <Service_Msg_Extr+0x368>)
 8006bc0:	482e      	ldr	r0, [pc, #184]	; (8006c7c <Service_Msg_Extr+0x36c>)
 8006bc2:	f7f9 fb3d 	bl	8000240 <strcmp>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10f      	bne.n	8006bec <Service_Msg_Extr+0x2dc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8006bcc:	78bb      	ldrb	r3, [r7, #2]
 8006bce:	4a29      	ldr	r2, [pc, #164]	; (8006c74 <Service_Msg_Extr+0x364>)
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	881a      	ldrh	r2, [r3, #0]
 8006bd8:	78bb      	ldrb	r3, [r7, #2]
 8006bda:	f042 0208 	orr.w	r2, r2, #8
 8006bde:	b291      	uxth	r1, r2
 8006be0:	4a24      	ldr	r2, [pc, #144]	; (8006c74 <Service_Msg_Extr+0x364>)
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	4413      	add	r3, r2
 8006be6:	3304      	adds	r3, #4
 8006be8:	460a      	mov	r2, r1
 8006bea:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8006bec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006bf0:	3310      	adds	r3, #16
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da00      	bge.n	8006bf8 <Service_Msg_Extr+0x2e8>
 8006bf6:	3307      	adds	r3, #7
 8006bf8:	10db      	asrs	r3, r3, #3
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	89fb      	ldrh	r3, [r7, #14]
 8006bfe:	4413      	add	r3, r2
 8006c00:	81fb      	strh	r3, [r7, #14]
 8006c02:	89bb      	ldrh	r3, [r7, #12]
 8006c04:	3310      	adds	r3, #16
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	b21b      	sxth	r3, r3
 8006c0a:	425a      	negs	r2, r3
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	f002 0207 	and.w	r2, r2, #7
 8006c14:	bf58      	it	pl
 8006c16:	4253      	negpl	r3, r2
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006c1c:	78bb      	ldrb	r3, [r7, #2]
 8006c1e:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <Service_Msg_Extr+0x364>)
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	4413      	add	r3, r2
 8006c24:	3304      	adds	r3, #4
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8126 	beq.w	8006e7e <Service_Msg_Extr+0x56e>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006c32:	89fb      	ldrh	r3, [r7, #14]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	441a      	add	r2, r3
 8006c38:	89bb      	ldrh	r3, [r7, #12]
 8006c3a:	2108      	movs	r1, #8
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7f9 fce9 	bl	8000614 <ExtractBits>
 8006c42:	4603      	mov	r3, r0
 8006c44:	78ba      	ldrb	r2, [r7, #2]
 8006c46:	b2d8      	uxtb	r0, r3
 8006c48:	490d      	ldr	r1, [pc, #52]	; (8006c80 <Service_Msg_Extr+0x370>)
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	440b      	add	r3, r1
 8006c54:	3305      	adds	r3, #5
 8006c56:	4602      	mov	r2, r0
 8006c58:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8006c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da0f      	bge.n	8006c84 <Service_Msg_Extr+0x374>
 8006c64:	3307      	adds	r3, #7
 8006c66:	e00d      	b.n	8006c84 <Service_Msg_Extr+0x374>
 8006c68:	20000fd4 	.word	0x20000fd4
 8006c6c:	20000ffc 	.word	0x20000ffc
 8006c70:	200015b4 	.word	0x200015b4
 8006c74:	200011f4 	.word	0x200011f4
 8006c78:	08026104 	.word	0x08026104
 8006c7c:	20000305 	.word	0x20000305
 8006c80:	200011b8 	.word	0x200011b8
 8006c84:	10db      	asrs	r3, r3, #3
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	89fb      	ldrh	r3, [r7, #14]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	81fb      	strh	r3, [r7, #14]
 8006c8e:	89bb      	ldrh	r3, [r7, #12]
 8006c90:	3308      	adds	r3, #8
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	425a      	negs	r2, r3
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	f002 0207 	and.w	r2, r2, #7
 8006ca0:	bf58      	it	pl
 8006ca2:	4253      	negpl	r3, r2
 8006ca4:	b21b      	sxth	r3, r3
 8006ca6:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ca8:	89fb      	ldrh	r3, [r7, #14]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	441a      	add	r2, r3
 8006cae:	89bb      	ldrh	r3, [r7, #12]
 8006cb0:	2108      	movs	r1, #8
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7f9 fcae 	bl	8000614 <ExtractBits>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	78ba      	ldrb	r2, [r7, #2]
 8006cbc:	b2d8      	uxtb	r0, r3
 8006cbe:	4989      	ldr	r1, [pc, #548]	; (8006ee4 <Service_Msg_Extr+0x5d4>)
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	4413      	add	r3, r2
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	440b      	add	r3, r1
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4602      	mov	r2, r0
 8006cce:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006cd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	da00      	bge.n	8006cdc <Service_Msg_Extr+0x3cc>
 8006cda:	3307      	adds	r3, #7
 8006cdc:	10db      	asrs	r3, r3, #3
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	89fb      	ldrh	r3, [r7, #14]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	81fb      	strh	r3, [r7, #14]
 8006ce6:	89bb      	ldrh	r3, [r7, #12]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	b21b      	sxth	r3, r3
 8006cee:	425a      	negs	r2, r3
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	f002 0207 	and.w	r2, r2, #7
 8006cf8:	bf58      	it	pl
 8006cfa:	4253      	negpl	r3, r2
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006d00:	89fb      	ldrh	r3, [r7, #14]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	441a      	add	r2, r3
 8006d06:	89bb      	ldrh	r3, [r7, #12]
 8006d08:	2108      	movs	r1, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7f9 fc82 	bl	8000614 <ExtractBits>
 8006d10:	4603      	mov	r3, r0
 8006d12:	78ba      	ldrb	r2, [r7, #2]
 8006d14:	b2d8      	uxtb	r0, r3
 8006d16:	4973      	ldr	r1, [pc, #460]	; (8006ee4 <Service_Msg_Extr+0x5d4>)
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	440b      	add	r3, r1
 8006d22:	3303      	adds	r3, #3
 8006d24:	4602      	mov	r2, r0
 8006d26:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006d28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	da00      	bge.n	8006d34 <Service_Msg_Extr+0x424>
 8006d32:	3307      	adds	r3, #7
 8006d34:	10db      	asrs	r3, r3, #3
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	89bb      	ldrh	r3, [r7, #12]
 8006d40:	3308      	adds	r3, #8
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	b21b      	sxth	r3, r3
 8006d46:	425a      	negs	r2, r3
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	f002 0207 	and.w	r2, r2, #7
 8006d50:	bf58      	it	pl
 8006d52:	4253      	negpl	r3, r2
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006d58:	89fb      	ldrh	r3, [r7, #14]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	441a      	add	r2, r3
 8006d5e:	89bb      	ldrh	r3, [r7, #12]
 8006d60:	2108      	movs	r1, #8
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7f9 fc56 	bl	8000614 <ExtractBits>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	78ba      	ldrb	r2, [r7, #2]
 8006d6c:	b2d8      	uxtb	r0, r3
 8006d6e:	495d      	ldr	r1, [pc, #372]	; (8006ee4 <Service_Msg_Extr+0x5d4>)
 8006d70:	4613      	mov	r3, r2
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	4413      	add	r3, r2
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	440b      	add	r3, r1
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006d7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d82:	3308      	adds	r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da00      	bge.n	8006d8a <Service_Msg_Extr+0x47a>
 8006d88:	3307      	adds	r3, #7
 8006d8a:	10db      	asrs	r3, r3, #3
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
 8006d90:	4413      	add	r3, r2
 8006d92:	81fb      	strh	r3, [r7, #14]
 8006d94:	89bb      	ldrh	r3, [r7, #12]
 8006d96:	3308      	adds	r3, #8
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	425a      	negs	r2, r3
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	f002 0207 	and.w	r2, r2, #7
 8006da6:	bf58      	it	pl
 8006da8:	4253      	negpl	r3, r2
 8006daa:	b21b      	sxth	r3, r3
 8006dac:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006dae:	89fb      	ldrh	r3, [r7, #14]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	441a      	add	r2, r3
 8006db4:	89bb      	ldrh	r3, [r7, #12]
 8006db6:	2108      	movs	r1, #8
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7f9 fc2b 	bl	8000614 <ExtractBits>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	78ba      	ldrb	r2, [r7, #2]
 8006dc2:	b2d8      	uxtb	r0, r3
 8006dc4:	4947      	ldr	r1, [pc, #284]	; (8006ee4 <Service_Msg_Extr+0x5d4>)
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	440b      	add	r3, r1
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006dd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da00      	bge.n	8006de2 <Service_Msg_Extr+0x4d2>
 8006de0:	3307      	adds	r3, #7
 8006de2:	10db      	asrs	r3, r3, #3
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	89fb      	ldrh	r3, [r7, #14]
 8006de8:	4413      	add	r3, r2
 8006dea:	81fb      	strh	r3, [r7, #14]
 8006dec:	89bb      	ldrh	r3, [r7, #12]
 8006dee:	3308      	adds	r3, #8
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	425a      	negs	r2, r3
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	f002 0207 	and.w	r2, r2, #7
 8006dfe:	bf58      	it	pl
 8006e00:	4253      	negpl	r3, r2
 8006e02:	b21b      	sxth	r3, r3
 8006e04:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006e06:	89fb      	ldrh	r3, [r7, #14]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	441a      	add	r2, r3
 8006e0c:	89bb      	ldrh	r3, [r7, #12]
 8006e0e:	2108      	movs	r1, #8
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7f9 fbff 	bl	8000614 <ExtractBits>
 8006e16:	4603      	mov	r3, r0
 8006e18:	78ba      	ldrb	r2, [r7, #2]
 8006e1a:	b2d8      	uxtb	r0, r3
 8006e1c:	4931      	ldr	r1, [pc, #196]	; (8006ee4 <Service_Msg_Extr+0x5d4>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	440b      	add	r3, r1
 8006e28:	3302      	adds	r3, #2
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006e2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e32:	3308      	adds	r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	da00      	bge.n	8006e3a <Service_Msg_Extr+0x52a>
 8006e38:	3307      	adds	r3, #7
 8006e3a:	10db      	asrs	r3, r3, #3
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	89fb      	ldrh	r3, [r7, #14]
 8006e40:	4413      	add	r3, r2
 8006e42:	81fb      	strh	r3, [r7, #14]
 8006e44:	89bb      	ldrh	r3, [r7, #12]
 8006e46:	3308      	adds	r3, #8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	b21b      	sxth	r3, r3
 8006e4c:	425a      	negs	r2, r3
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	f002 0207 	and.w	r2, r2, #7
 8006e56:	bf58      	it	pl
 8006e58:	4253      	negpl	r3, r2
 8006e5a:	b21b      	sxth	r3, r3
 8006e5c:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006e5e:	78bb      	ldrb	r3, [r7, #2]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f002 f979 	bl	8009158 <IS_MLK_EIPC_TIME_MATCHING>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <Service_Msg_Extr+0x566>
 8006e6c:	78bb      	ldrb	r3, [r7, #2]
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <Service_Msg_Extr+0x5d8>)
 8006e70:	2100      	movs	r1, #0
 8006e72:	54d1      	strb	r1, [r2, r3]
 8006e74:	e003      	b.n	8006e7e <Service_Msg_Extr+0x56e>
 8006e76:	78bb      	ldrb	r3, [r7, #2]
 8006e78:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <Service_Msg_Extr+0x5d8>)
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006e7e:	78bb      	ldrb	r3, [r7, #2]
 8006e80:	4a1a      	ldr	r2, [pc, #104]	; (8006eec <Service_Msg_Extr+0x5dc>)
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	4413      	add	r3, r2
 8006e86:	3304      	adds	r3, #4
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <Service_Msg_Extr+0x586>
	{
		LinkEstablishFlag = SET;
 8006e92:	2301      	movs	r3, #1
 8006e94:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006e96:	787a      	ldrb	r2, [r7, #1]
 8006e98:	78bb      	ldrb	r3, [r7, #2]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff f8d3 	bl	8006048 <Send_Status_Message>
	/* Preparing and Sending Reply */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 8006ea2:	78bb      	ldrb	r3, [r7, #2]
 8006ea4:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <Service_Msg_Extr+0x5e0>)
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d127      	bne.n	8006f00 <Service_Msg_Extr+0x5f0>
 8006eb0:	78bb      	ldrb	r3, [r7, #2]
 8006eb2:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <Service_Msg_Extr+0x5e4>)
 8006eb4:	5cd3      	ldrb	r3, [r2, r3]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d822      	bhi.n	8006f00 <Service_Msg_Extr+0x5f0>
 8006eba:	78ba      	ldrb	r2, [r7, #2]
 8006ebc:	490e      	ldr	r1, [pc, #56]	; (8006ef8 <Service_Msg_Extr+0x5e8>)
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4413      	add	r3, r2
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3305      	adds	r3, #5
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d115      	bne.n	8006f00 <Service_Msg_Extr+0x5f0>
 8006ed4:	78bb      	ldrb	r3, [r7, #2]
 8006ed6:	4a09      	ldr	r2, [pc, #36]	; (8006efc <Service_Msg_Extr+0x5ec>)
 8006ed8:	5cd3      	ldrb	r3, [r2, r3]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d110      	bne.n	8006f00 <Service_Msg_Extr+0x5f0>
	{
		LinkEstablishFlag = RESET;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e037      	b.n	8006f54 <Service_Msg_Extr+0x644>
 8006ee4:	200011b8 	.word	0x200011b8
 8006ee8:	20001108 	.word	0x20001108
 8006eec:	200011f4 	.word	0x200011f4
 8006ef0:	20000304 	.word	0x20000304
 8006ef4:	20000ee8 	.word	0x20000ee8
 8006ef8:	200013d4 	.word	0x200013d4
 8006efc:	20000edc 	.word	0x20000edc
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8006f00:	78bb      	ldrb	r3, [r7, #2]
 8006f02:	4aad      	ldr	r2, [pc, #692]	; (80071b8 <Service_Msg_Extr+0x8a8>)
 8006f04:	4413      	add	r3, r2
 8006f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d122      	bne.n	8006f54 <Service_Msg_Extr+0x644>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 8006f0e:	78bb      	ldrb	r3, [r7, #2]
 8006f10:	4aa9      	ldr	r2, [pc, #676]	; (80071b8 <Service_Msg_Extr+0x8a8>)
 8006f12:	3366      	adds	r3, #102	; 0x66
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	6859      	ldr	r1, [r3, #4]
 8006f1a:	78bb      	ldrb	r3, [r7, #2]
 8006f1c:	4aa7      	ldr	r2, [pc, #668]	; (80071bc <Service_Msg_Extr+0x8ac>)
 8006f1e:	5cd3      	ldrb	r3, [r2, r3]
 8006f20:	461a      	mov	r2, r3
 8006f22:	48a7      	ldr	r0, [pc, #668]	; (80071c0 <Service_Msg_Extr+0x8b0>)
 8006f24:	f01d fd18 	bl	8024958 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8006f28:	78bb      	ldrb	r3, [r7, #2]
 8006f2a:	4aa6      	ldr	r2, [pc, #664]	; (80071c4 <Service_Msg_Extr+0x8b4>)
 8006f2c:	5cd3      	ldrb	r3, [r2, r3]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	48a5      	ldr	r0, [pc, #660]	; (80071c8 <Service_Msg_Extr+0x8b8>)
 8006f32:	f01d fd11 	bl	8024958 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8006f36:	78ba      	ldrb	r2, [r7, #2]
 8006f38:	49a4      	ldr	r1, [pc, #656]	; (80071cc <Service_Msg_Extr+0x8bc>)
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	440b      	add	r3, r1
 8006f44:	3305      	adds	r3, #5
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	48a0      	ldr	r0, [pc, #640]	; (80071d0 <Service_Msg_Extr+0x8c0>)
 8006f50:	f01d fd02 	bl	8024958 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006f54:	7ffb      	ldrb	r3, [r7, #31]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	f040 8081 	bne.w	800705e <Service_Msg_Extr+0x74e>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006f5c:	78ba      	ldrb	r2, [r7, #2]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4a9b      	ldr	r2, [pc, #620]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8006f68:	4413      	add	r3, r2
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f01d fc09 	bl	8024788 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006f76:	78ba      	ldrb	r2, [r7, #2]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4a94      	ldr	r2, [pc, #592]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8006f82:	1898      	adds	r0, r3, r2
 8006f84:	78ba      	ldrb	r2, [r7, #2]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a92      	ldr	r2, [pc, #584]	; (80071d8 <Service_Msg_Extr+0x8c8>)
 8006f90:	4413      	add	r3, r2
 8006f92:	2214      	movs	r2, #20
 8006f94:	4619      	mov	r1, r3
 8006f96:	f01d fbcf 	bl	8024738 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006f9a:	78bb      	ldrb	r3, [r7, #2]
 8006f9c:	4a8f      	ldr	r2, [pc, #572]	; (80071dc <Service_Msg_Extr+0x8cc>)
 8006f9e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006fa2:	78ba      	ldrb	r2, [r7, #2]
 8006fa4:	488b      	ldr	r0, [pc, #556]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4403      	add	r3, r0
 8006fb0:	3312      	adds	r3, #18
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	4299      	cmp	r1, r3
 8006fb6:	d052      	beq.n	800705e <Service_Msg_Extr+0x74e>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006fb8:	78ba      	ldrb	r2, [r7, #2]
 8006fba:	78b9      	ldrb	r1, [r7, #2]
 8006fbc:	4885      	ldr	r0, [pc, #532]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4403      	add	r3, r0
 8006fc8:	3312      	adds	r3, #18
 8006fca:	881a      	ldrh	r2, [r3, #0]
 8006fcc:	4b83      	ldr	r3, [pc, #524]	; (80071dc <Service_Msg_Extr+0x8cc>)
 8006fce:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006fd2:	2214      	movs	r2, #20
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4882      	ldr	r0, [pc, #520]	; (80071e0 <Service_Msg_Extr+0x8d0>)
 8006fd8:	f01d fbd6 	bl	8024788 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006fdc:	78ba      	ldrb	r2, [r7, #2]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4a7b      	ldr	r2, [pc, #492]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8006fe8:	4413      	add	r3, r2
 8006fea:	2214      	movs	r2, #20
 8006fec:	4619      	mov	r1, r3
 8006fee:	487c      	ldr	r0, [pc, #496]	; (80071e0 <Service_Msg_Extr+0x8d0>)
 8006ff0:	f01d fba2 	bl	8024738 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006ff4:	f240 2007 	movw	r0, #519	; 0x207
 8006ff8:	f008 ff46 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006ffc:	78b9      	ldrb	r1, [r7, #2]
 8006ffe:	78ba      	ldrb	r2, [r7, #2]
 8007000:	4874      	ldr	r0, [pc, #464]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8007002:	460b      	mov	r3, r1
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4403      	add	r3, r0
 800700c:	3312      	adds	r3, #18
 800700e:	8818      	ldrh	r0, [r3, #0]
 8007010:	4974      	ldr	r1, [pc, #464]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 8007012:	4613      	mov	r3, r2
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	440b      	add	r3, r1
 800701c:	3306      	adds	r3, #6
 800701e:	4602      	mov	r2, r0
 8007020:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8007022:	78bb      	ldrb	r3, [r7, #2]
 8007024:	4a70      	ldr	r2, [pc, #448]	; (80071e8 <Service_Msg_Extr+0x8d8>)
 8007026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d117      	bne.n	800705e <Service_Msg_Extr+0x74e>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800702e:	78bb      	ldrb	r3, [r7, #2]
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	4a6e      	ldr	r2, [pc, #440]	; (80071ec <Service_Msg_Extr+0x8dc>)
 8007034:	4413      	add	r3, r2
 8007036:	1c98      	adds	r0, r3, #2
 8007038:	78ba      	ldrb	r2, [r7, #2]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4a64      	ldr	r2, [pc, #400]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8007044:	4413      	add	r3, r2
 8007046:	3301      	adds	r3, #1
 8007048:	2210      	movs	r2, #16
 800704a:	4619      	mov	r1, r3
 800704c:	f01d fb74 	bl	8024738 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8007050:	f240 1019 	movw	r0, #281	; 0x119
 8007054:	f008 ff18 	bl	800fe88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8007058:	4a65      	ldr	r2, [pc, #404]	; (80071f0 <Service_Msg_Extr+0x8e0>)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 800705e:	78ba      	ldrb	r2, [r7, #2]
 8007060:	4960      	ldr	r1, [pc, #384]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 8007062:	4613      	mov	r3, r2
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	3314      	adds	r3, #20
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8007072:	78ba      	ldrb	r2, [r7, #2]
 8007074:	495b      	ldr	r1, [pc, #364]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	440b      	add	r3, r1
 8007080:	3305      	adds	r3, #5
 8007082:	2206      	movs	r2, #6
 8007084:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8007086:	78ba      	ldrb	r2, [r7, #2]
 8007088:	4956      	ldr	r1, [pc, #344]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 800708a:	4613      	mov	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4413      	add	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	440b      	add	r3, r1
 8007094:	78ba      	ldrb	r2, [r7, #2]
 8007096:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8007098:	78ba      	ldrb	r2, [r7, #2]
 800709a:	4952      	ldr	r1, [pc, #328]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	440b      	add	r3, r1
 80070a6:	3301      	adds	r3, #1
 80070a8:	2201      	movs	r2, #1
 80070aa:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80070ac:	78ba      	ldrb	r2, [r7, #2]
 80070ae:	494d      	ldr	r1, [pc, #308]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 80070b0:	4613      	mov	r3, r2
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4413      	add	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	440b      	add	r3, r1
 80070ba:	3302      	adds	r3, #2
 80070bc:	7ffa      	ldrb	r2, [r7, #31]
 80070be:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80070c0:	2218      	movs	r2, #24
 80070c2:	2100      	movs	r1, #0
 80070c4:	484b      	ldr	r0, [pc, #300]	; (80071f4 <Service_Msg_Extr+0x8e4>)
 80070c6:	f01d fb5f 	bl	8024788 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80070ca:	78ba      	ldrb	r2, [r7, #2]
 80070cc:	4613      	mov	r3, r2
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	4413      	add	r3, r2
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4a43      	ldr	r2, [pc, #268]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 80070d6:	4413      	add	r3, r2
 80070d8:	2218      	movs	r2, #24
 80070da:	4619      	mov	r1, r3
 80070dc:	4845      	ldr	r0, [pc, #276]	; (80071f4 <Service_Msg_Extr+0x8e4>)
 80070de:	f01d fb2b 	bl	8024738 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80070e2:	f240 2001 	movw	r0, #513	; 0x201
 80070e6:	f008 fecf 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80070ea:	78ba      	ldrb	r2, [r7, #2]
 80070ec:	493d      	ldr	r1, [pc, #244]	; (80071e4 <Service_Msg_Extr+0x8d4>)
 80070ee:	4613      	mov	r3, r2
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	440b      	add	r3, r1
 80070f8:	3301      	adds	r3, #1
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80070fe:	78bb      	ldrb	r3, [r7, #2]
 8007100:	493d      	ldr	r1, [pc, #244]	; (80071f8 <Service_Msg_Extr+0x8e8>)
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8007108:	7ffb      	ldrb	r3, [r7, #31]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d11d      	bne.n	800714a <Service_Msg_Extr+0x83a>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 800710e:	78bb      	ldrb	r3, [r7, #2]
 8007110:	493a      	ldr	r1, [pc, #232]	; (80071fc <Service_Msg_Extr+0x8ec>)
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SelfLinkFlag[Source_Index] = SET;
 8007118:	78bb      	ldrb	r3, [r7, #2]
 800711a:	4a39      	ldr	r2, [pc, #228]	; (8007200 <Service_Msg_Extr+0x8f0>)
 800711c:	2101      	movs	r1, #1
 800711e:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8007120:	78ba      	ldrb	r2, [r7, #2]
 8007122:	4938      	ldr	r1, [pc, #224]	; (8007204 <Service_Msg_Extr+0x8f4>)
 8007124:	4613      	mov	r3, r2
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	3301      	adds	r3, #1
 8007130:	2201      	movs	r2, #1
 8007132:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8007134:	78ba      	ldrb	r2, [r7, #2]
 8007136:	4933      	ldr	r1, [pc, #204]	; (8007204 <Service_Msg_Extr+0x8f4>)
 8007138:	4613      	mov	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	3304      	adds	r3, #4
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e02e      	b.n	80071a8 <Service_Msg_Extr+0x898>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 800714a:	78bb      	ldrb	r3, [r7, #2]
 800714c:	4a2c      	ldr	r2, [pc, #176]	; (8007200 <Service_Msg_Extr+0x8f0>)
 800714e:	2100      	movs	r1, #0
 8007150:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8007152:	78ba      	ldrb	r2, [r7, #2]
 8007154:	492b      	ldr	r1, [pc, #172]	; (8007204 <Service_Msg_Extr+0x8f4>)
 8007156:	4613      	mov	r3, r2
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	3308      	adds	r3, #8
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8007166:	78ba      	ldrb	r2, [r7, #2]
 8007168:	4926      	ldr	r1, [pc, #152]	; (8007204 <Service_Msg_Extr+0x8f4>)
 800716a:	4613      	mov	r3, r2
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	3301      	adds	r3, #1
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800717a:	78ba      	ldrb	r2, [r7, #2]
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8007186:	4413      	add	r3, r2
 8007188:	3301      	adds	r3, #1
 800718a:	2210      	movs	r2, #16
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f01d fafa 	bl	8024788 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8007194:	78ba      	ldrb	r2, [r7, #2]
 8007196:	490f      	ldr	r1, [pc, #60]	; (80071d4 <Service_Msg_Extr+0x8c4>)
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	3312      	adds	r3, #18
 80071a4:	2200      	movs	r2, #0
 80071a6:	801a      	strh	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80071a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071ac:	4816      	ldr	r0, [pc, #88]	; (8007208 <Service_Msg_Extr+0x8f8>)
 80071ae:	f013 f8b2 	bl	801a316 <HAL_GPIO_TogglePin>

}
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000304 	.word	0x20000304
 80071bc:	20000ee8 	.word	0x20000ee8
 80071c0:	08026a8c 	.word	0x08026a8c
 80071c4:	20000edc 	.word	0x20000edc
 80071c8:	08026a9c 	.word	0x08026a9c
 80071cc:	200013d4 	.word	0x200013d4
 80071d0:	08026ab4 	.word	0x08026ab4
 80071d4:	20001eb0 	.word	0x20001eb0
 80071d8:	20001de8 	.word	0x20001de8
 80071dc:	20000f30 	.word	0x20000f30
 80071e0:	20002040 	.word	0x20002040
 80071e4:	200016a4 	.word	0x200016a4
 80071e8:	20000ef4 	.word	0x20000ef4
 80071ec:	20001114 	.word	0x20001114
 80071f0:	20000e88 	.word	0x20000e88
 80071f4:	20001884 	.word	0x20001884
 80071f8:	20000e5c 	.word	0x20000e5c
 80071fc:	20000f44 	.word	0x20000f44
 8007200:	20000f94 	.word	0x20000f94
 8007204:	20001cf8 	.word	0x20001cf8
 8007208:	40021c00 	.word	0x40021c00

0800720c <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 800720c:	b590      	push	{r4, r7, lr}
 800720e:	b095      	sub	sp, #84	; 0x54
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	460a      	mov	r2, r1
 8007216:	71fb      	strb	r3, [r7, #7]
 8007218:	4613      	mov	r3, r2
 800721a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	f107 0310 	add.w	r3, r7, #16
 8007224:	2238      	movs	r2, #56	; 0x38
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f01d faad 	bl	8024788 <memset>

	BITSTUFFINIT(0, 0);
 800722e:	2300      	movs	r3, #0
 8007230:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007234:	2300      	movs	r3, #0
 8007236:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 800723a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800723e:	f107 020c 	add.w	r2, r7, #12
 8007242:	441a      	add	r2, r3
 8007244:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007248:	23f4      	movs	r3, #244	; 0xf4
 800724a:	2108      	movs	r1, #8
 800724c:	f7f9 fa6e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007250:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007254:	3308      	adds	r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	da00      	bge.n	800725c <Send_Service_Signal_Message+0x50>
 800725a:	3307      	adds	r3, #7
 800725c:	10db      	asrs	r3, r3, #3
 800725e:	b29a      	uxth	r2, r3
 8007260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007264:	4413      	add	r3, r2
 8007266:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800726a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800726e:	3308      	adds	r3, #8
 8007270:	b29b      	uxth	r3, r3
 8007272:	b21b      	sxth	r3, r3
 8007274:	425a      	negs	r2, r3
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	f002 0207 	and.w	r2, r2, #7
 800727e:	bf58      	it	pl
 8007280:	4253      	negpl	r3, r2
 8007282:	b21b      	sxth	r3, r3
 8007284:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8007288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800728c:	f107 020c 	add.w	r2, r7, #12
 8007290:	441a      	add	r2, r3
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	497b      	ldr	r1, [pc, #492]	; (8007484 <Send_Service_Signal_Message+0x278>)
 8007296:	3366      	adds	r3, #102	; 0x66
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072a2:	2110      	movs	r1, #16
 80072a4:	f7f9 fa42 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80072a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072ac:	3310      	adds	r3, #16
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	da00      	bge.n	80072b4 <Send_Service_Signal_Message+0xa8>
 80072b2:	3307      	adds	r3, #7
 80072b4:	10db      	asrs	r3, r3, #3
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072bc:	4413      	add	r3, r2
 80072be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072c6:	3310      	adds	r3, #16
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	b21b      	sxth	r3, r3
 80072cc:	425a      	negs	r2, r3
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	f002 0207 	and.w	r2, r2, #7
 80072d6:	bf58      	it	pl
 80072d8:	4253      	negpl	r3, r2
 80072da:	b21b      	sxth	r3, r3
 80072dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 80072e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072e4:	f107 020c 	add.w	r2, r7, #12
 80072e8:	441a      	add	r2, r3
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	4965      	ldr	r1, [pc, #404]	; (8007484 <Send_Service_Signal_Message+0x278>)
 80072ee:	3370      	adds	r3, #112	; 0x70
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072fa:	2110      	movs	r1, #16
 80072fc:	f7f9 fa16 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007300:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007304:	3310      	adds	r3, #16
 8007306:	2b00      	cmp	r3, #0
 8007308:	da00      	bge.n	800730c <Send_Service_Signal_Message+0x100>
 800730a:	3307      	adds	r3, #7
 800730c:	10db      	asrs	r3, r3, #3
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007314:	4413      	add	r3, r2
 8007316:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800731a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800731e:	3310      	adds	r3, #16
 8007320:	b29b      	uxth	r3, r3
 8007322:	b21b      	sxth	r3, r3
 8007324:	425a      	negs	r2, r3
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	f002 0207 	and.w	r2, r2, #7
 800732e:	bf58      	it	pl
 8007330:	4253      	negpl	r3, r2
 8007332:	b21b      	sxth	r3, r3
 8007334:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007338:	4b53      	ldr	r3, [pc, #332]	; (8007488 <Send_Service_Signal_Message+0x27c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	089b      	lsrs	r3, r3, #2
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d035      	beq.n	80073b2 <Send_Service_Signal_Message+0x1a6>
 8007346:	4b50      	ldr	r3, [pc, #320]	; (8007488 <Send_Service_Signal_Message+0x27c>)
 8007348:	791b      	ldrb	r3, [r3, #4]
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	429a      	cmp	r2, r3
 800734e:	d130      	bne.n	80073b2 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007356:	484d      	ldr	r0, [pc, #308]	; (800748c <Send_Service_Signal_Message+0x280>)
 8007358:	f014 ffa6 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800735c:	4602      	mov	r2, r0
 800735e:	4b4c      	ldr	r3, [pc, #304]	; (8007490 <Send_Service_Signal_Message+0x284>)
 8007360:	fba3 1302 	umull	r1, r3, r3, r2
 8007364:	099b      	lsrs	r3, r3, #6
 8007366:	21c8      	movs	r1, #200	; 0xc8
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8007372:	4848      	ldr	r0, [pc, #288]	; (8007494 <Send_Service_Signal_Message+0x288>)
 8007374:	f01d fb8c 	bl	8024a90 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	4a47      	ldr	r2, [pc, #284]	; (8007498 <Send_Service_Signal_Message+0x28c>)
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	4413      	add	r3, r2
 8007380:	3301      	adds	r3, #1
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	4619      	mov	r1, r3
 8007386:	4845      	ldr	r0, [pc, #276]	; (800749c <Send_Service_Signal_Message+0x290>)
 8007388:	f01d fae6 	bl	8024958 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 800738c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007390:	4619      	mov	r1, r3
 8007392:	4843      	ldr	r0, [pc, #268]	; (80074a0 <Send_Service_Signal_Message+0x294>)
 8007394:	f01d fae0 	bl	8024958 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8007398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800739c:	f107 020c 	add.w	r2, r7, #12
 80073a0:	441a      	add	r2, r3
 80073a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80073a6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073aa:	2108      	movs	r1, #8
 80073ac:	f7f9 f9be 	bl	800072c <InsertBits>
	{
 80073b0:	e00f      	b.n	80073d2 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80073b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073b6:	f107 020c 	add.w	r2, r7, #12
 80073ba:	441a      	add	r2, r3
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	4936      	ldr	r1, [pc, #216]	; (8007498 <Send_Service_Signal_Message+0x28c>)
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	440b      	add	r3, r1
 80073c4:	3301      	adds	r3, #1
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073cc:	2108      	movs	r1, #8
 80073ce:	f7f9 f9ad 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80073d2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073d6:	3308      	adds	r3, #8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da00      	bge.n	80073de <Send_Service_Signal_Message+0x1d2>
 80073dc:	3307      	adds	r3, #7
 80073de:	10db      	asrs	r3, r3, #3
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073e6:	4413      	add	r3, r2
 80073e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073f0:	3308      	adds	r3, #8
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	425a      	negs	r2, r3
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	f002 0207 	and.w	r2, r2, #7
 8007400:	bf58      	it	pl
 8007402:	4253      	negpl	r3, r2
 8007404:	b21b      	sxth	r3, r3
 8007406:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800740a:	4b1f      	ldr	r3, [pc, #124]	; (8007488 <Send_Service_Signal_Message+0x27c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	08db      	lsrs	r3, r3, #3
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d04b      	beq.n	80074b0 <Send_Service_Signal_Message+0x2a4>
 8007418:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <Send_Service_Signal_Message+0x27c>)
 800741a:	791b      	ldrb	r3, [r3, #4]
 800741c:	79fa      	ldrb	r2, [r7, #7]
 800741e:	429a      	cmp	r2, r3
 8007420:	d146      	bne.n	80074b0 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007428:	4818      	ldr	r0, [pc, #96]	; (800748c <Send_Service_Signal_Message+0x280>)
 800742a:	f014 ff3d 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800742e:	4602      	mov	r2, r0
 8007430:	4b17      	ldr	r3, [pc, #92]	; (8007490 <Send_Service_Signal_Message+0x284>)
 8007432:	fba3 1302 	umull	r1, r3, r3, r2
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	21c8      	movs	r1, #200	; 0xc8
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007444:	4817      	ldr	r0, [pc, #92]	; (80074a4 <Send_Service_Signal_Message+0x298>)
 8007446:	f01d fb23 	bl	8024a90 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	4a12      	ldr	r2, [pc, #72]	; (8007498 <Send_Service_Signal_Message+0x28c>)
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	4413      	add	r3, r2
 8007452:	3302      	adds	r3, #2
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	4619      	mov	r1, r3
 8007458:	4813      	ldr	r0, [pc, #76]	; (80074a8 <Send_Service_Signal_Message+0x29c>)
 800745a:	f01d fa7d 	bl	8024958 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 800745e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007462:	4619      	mov	r1, r3
 8007464:	4811      	ldr	r0, [pc, #68]	; (80074ac <Send_Service_Signal_Message+0x2a0>)
 8007466:	f01d fa77 	bl	8024958 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800746a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800746e:	f107 020c 	add.w	r2, r7, #12
 8007472:	441a      	add	r2, r3
 8007474:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007478:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800747c:	2108      	movs	r1, #8
 800747e:	f7f9 f955 	bl	800072c <InsertBits>
	{
 8007482:	e033      	b.n	80074ec <Send_Service_Signal_Message+0x2e0>
 8007484:	20000304 	.word	0x20000304
 8007488:	2000198c 	.word	0x2000198c
 800748c:	2000f3c4 	.word	0x2000f3c4
 8007490:	51eb851f 	.word	0x51eb851f
 8007494:	080264ac 	.word	0x080264ac
 8007498:	200011f4 	.word	0x200011f4
 800749c:	08026ac4 	.word	0x08026ac4
 80074a0:	08026ae4 	.word	0x08026ae4
 80074a4:	08026510 	.word	0x08026510
 80074a8:	08026b04 	.word	0x08026b04
 80074ac:	08026b24 	.word	0x08026b24
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80074b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074b4:	f107 020c 	add.w	r2, r7, #12
 80074b8:	18d1      	adds	r1, r2, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	484e      	ldr	r0, [pc, #312]	; (80075f8 <Send_Service_Signal_Message+0x3ec>)
 80074be:	011a      	lsls	r2, r3, #4
 80074c0:	4402      	add	r2, r0
 80074c2:	3202      	adds	r2, #2
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	3201      	adds	r2, #1
 80074c8:	b2d4      	uxtb	r4, r2
 80074ca:	484b      	ldr	r0, [pc, #300]	; (80075f8 <Send_Service_Signal_Message+0x3ec>)
 80074cc:	011a      	lsls	r2, r3, #4
 80074ce:	4402      	add	r2, r0
 80074d0:	3202      	adds	r2, #2
 80074d2:	4620      	mov	r0, r4
 80074d4:	7010      	strb	r0, [r2, #0]
 80074d6:	4a48      	ldr	r2, [pc, #288]	; (80075f8 <Send_Service_Signal_Message+0x3ec>)
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	4413      	add	r3, r2
 80074dc:	3302      	adds	r3, #2
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074e4:	460a      	mov	r2, r1
 80074e6:	2108      	movs	r1, #8
 80074e8:	f7f9 f920 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 80074ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074f0:	3308      	adds	r3, #8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da00      	bge.n	80074f8 <Send_Service_Signal_Message+0x2ec>
 80074f6:	3307      	adds	r3, #7
 80074f8:	10db      	asrs	r3, r3, #3
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007500:	4413      	add	r3, r2
 8007502:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007506:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800750a:	3308      	adds	r3, #8
 800750c:	b29b      	uxth	r3, r3
 800750e:	b21b      	sxth	r3, r3
 8007510:	425a      	negs	r2, r3
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	f002 0207 	and.w	r2, r2, #7
 800751a:	bf58      	it	pl
 800751c:	4253      	negpl	r3, r2
 800751e:	b21b      	sxth	r3, r3
 8007520:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007528:	f107 020c 	add.w	r2, r7, #12
 800752c:	441a      	add	r2, r3
 800752e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007532:	2306      	movs	r3, #6
 8007534:	2108      	movs	r1, #8
 8007536:	f7f9 f8f9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800753a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800753e:	3308      	adds	r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	da00      	bge.n	8007546 <Send_Service_Signal_Message+0x33a>
 8007544:	3307      	adds	r3, #7
 8007546:	10db      	asrs	r3, r3, #3
 8007548:	b29a      	uxth	r2, r3
 800754a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800754e:	4413      	add	r3, r2
 8007550:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007554:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007558:	3308      	adds	r3, #8
 800755a:	b29b      	uxth	r3, r3
 800755c:	b21b      	sxth	r3, r3
 800755e:	425a      	negs	r2, r3
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	f002 0207 	and.w	r2, r2, #7
 8007568:	bf58      	it	pl
 800756a:	4253      	negpl	r3, r2
 800756c:	b21b      	sxth	r3, r3
 800756e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	4a21      	ldr	r2, [pc, #132]	; (80075fc <Send_Service_Signal_Message+0x3f0>)
 8007576:	5cd3      	ldrb	r3, [r2, r3]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d147      	bne.n	800760c <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 800757c:	f004 fa56 	bl	800ba2c <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007580:	79fa      	ldrb	r2, [r7, #7]
 8007582:	4613      	mov	r3, r2
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	4413      	add	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4a1d      	ldr	r2, [pc, #116]	; (8007600 <Send_Service_Signal_Message+0x3f4>)
 800758c:	4413      	add	r3, r2
 800758e:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <Send_Service_Signal_Message+0x3f8>)
 8007590:	6811      	ldr	r1, [r2, #0]
 8007592:	6019      	str	r1, [r3, #0]
 8007594:	8892      	ldrh	r2, [r2, #4]
 8007596:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8007598:	481b      	ldr	r0, [pc, #108]	; (8007608 <Send_Service_Signal_Message+0x3fc>)
 800759a:	f01d fa79 	bl	8024a90 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	4a16      	ldr	r2, [pc, #88]	; (80075fc <Send_Service_Signal_Message+0x3f0>)
 80075a2:	2100      	movs	r1, #0
 80075a4:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 80075a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075aa:	f107 020c 	add.w	r2, r7, #12
 80075ae:	441a      	add	r2, r3
 80075b0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80075b4:	2369      	movs	r3, #105	; 0x69
 80075b6:	2110      	movs	r1, #16
 80075b8:	f7f9 f8b8 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80075bc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80075c0:	3310      	adds	r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	da00      	bge.n	80075c8 <Send_Service_Signal_Message+0x3bc>
 80075c6:	3307      	adds	r3, #7
 80075c8:	10db      	asrs	r3, r3, #3
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075d0:	4413      	add	r3, r2
 80075d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80075d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80075da:	3310      	adds	r3, #16
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b21b      	sxth	r3, r3
 80075e0:	425a      	negs	r2, r3
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	f002 0207 	and.w	r2, r2, #7
 80075ea:	bf58      	it	pl
 80075ec:	4253      	negpl	r3, r2
 80075ee:	b21b      	sxth	r3, r3
 80075f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80075f4:	e031      	b.n	800765a <Send_Service_Signal_Message+0x44e>
 80075f6:	bf00      	nop
 80075f8:	200011f4 	.word	0x200011f4
 80075fc:	20001108 	.word	0x20001108
 8007600:	200011b8 	.word	0x200011b8
 8007604:	200028e4 	.word	0x200028e4
 8007608:	08026868 	.word	0x08026868
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 800760c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007610:	f107 020c 	add.w	r2, r7, #12
 8007614:	441a      	add	r2, r3
 8007616:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800761a:	2329      	movs	r3, #41	; 0x29
 800761c:	2110      	movs	r1, #16
 800761e:	f7f9 f885 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007622:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007626:	3310      	adds	r3, #16
 8007628:	2b00      	cmp	r3, #0
 800762a:	da00      	bge.n	800762e <Send_Service_Signal_Message+0x422>
 800762c:	3307      	adds	r3, #7
 800762e:	10db      	asrs	r3, r3, #3
 8007630:	b29a      	uxth	r2, r3
 8007632:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007636:	4413      	add	r3, r2
 8007638:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800763c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007640:	3310      	adds	r3, #16
 8007642:	b29b      	uxth	r3, r3
 8007644:	b21b      	sxth	r3, r3
 8007646:	425a      	negs	r2, r3
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	f002 0207 	and.w	r2, r2, #7
 8007650:	bf58      	it	pl
 8007652:	4253      	negpl	r3, r2
 8007654:	b21b      	sxth	r3, r3
 8007656:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800765a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800765e:	f107 020c 	add.w	r2, r7, #12
 8007662:	18d1      	adds	r1, r2, r3
 8007664:	79fa      	ldrb	r2, [r7, #7]
 8007666:	48b5      	ldr	r0, [pc, #724]	; (800793c <Send_Service_Signal_Message+0x730>)
 8007668:	4613      	mov	r3, r2
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	4413      	add	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4403      	add	r3, r0
 8007672:	3305      	adds	r3, #5
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800767a:	460a      	mov	r2, r1
 800767c:	2108      	movs	r1, #8
 800767e:	f7f9 f855 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007682:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007686:	3308      	adds	r3, #8
 8007688:	2b00      	cmp	r3, #0
 800768a:	da00      	bge.n	800768e <Send_Service_Signal_Message+0x482>
 800768c:	3307      	adds	r3, #7
 800768e:	10db      	asrs	r3, r3, #3
 8007690:	b29a      	uxth	r2, r3
 8007692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007696:	4413      	add	r3, r2
 8007698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800769c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076a0:	3308      	adds	r3, #8
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	b21b      	sxth	r3, r3
 80076a6:	425a      	negs	r2, r3
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	f002 0207 	and.w	r2, r2, #7
 80076b0:	bf58      	it	pl
 80076b2:	4253      	negpl	r3, r2
 80076b4:	b21b      	sxth	r3, r3
 80076b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80076ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076be:	f107 020c 	add.w	r2, r7, #12
 80076c2:	18d1      	adds	r1, r2, r3
 80076c4:	79fa      	ldrb	r2, [r7, #7]
 80076c6:	489d      	ldr	r0, [pc, #628]	; (800793c <Send_Service_Signal_Message+0x730>)
 80076c8:	4613      	mov	r3, r2
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	4413      	add	r3, r2
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	4403      	add	r3, r0
 80076d2:	3304      	adds	r3, #4
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80076da:	460a      	mov	r2, r1
 80076dc:	2108      	movs	r1, #8
 80076de:	f7f9 f825 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80076e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80076e6:	3308      	adds	r3, #8
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da00      	bge.n	80076ee <Send_Service_Signal_Message+0x4e2>
 80076ec:	3307      	adds	r3, #7
 80076ee:	10db      	asrs	r3, r3, #3
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076f6:	4413      	add	r3, r2
 80076f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80076fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007700:	3308      	adds	r3, #8
 8007702:	b29b      	uxth	r3, r3
 8007704:	b21b      	sxth	r3, r3
 8007706:	425a      	negs	r2, r3
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	f002 0207 	and.w	r2, r2, #7
 8007710:	bf58      	it	pl
 8007712:	4253      	negpl	r3, r2
 8007714:	b21b      	sxth	r3, r3
 8007716:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800771a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800771e:	f107 020c 	add.w	r2, r7, #12
 8007722:	18d1      	adds	r1, r2, r3
 8007724:	79fa      	ldrb	r2, [r7, #7]
 8007726:	4885      	ldr	r0, [pc, #532]	; (800793c <Send_Service_Signal_Message+0x730>)
 8007728:	4613      	mov	r3, r2
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	4413      	add	r3, r2
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4403      	add	r3, r0
 8007732:	3303      	adds	r3, #3
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800773a:	460a      	mov	r2, r1
 800773c:	2108      	movs	r1, #8
 800773e:	f7f8 fff5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007742:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007746:	3308      	adds	r3, #8
 8007748:	2b00      	cmp	r3, #0
 800774a:	da00      	bge.n	800774e <Send_Service_Signal_Message+0x542>
 800774c:	3307      	adds	r3, #7
 800774e:	10db      	asrs	r3, r3, #3
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007756:	4413      	add	r3, r2
 8007758:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800775c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007760:	3308      	adds	r3, #8
 8007762:	b29b      	uxth	r3, r3
 8007764:	b21b      	sxth	r3, r3
 8007766:	425a      	negs	r2, r3
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	f002 0207 	and.w	r2, r2, #7
 8007770:	bf58      	it	pl
 8007772:	4253      	negpl	r3, r2
 8007774:	b21b      	sxth	r3, r3
 8007776:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 800777a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800777e:	f107 020c 	add.w	r2, r7, #12
 8007782:	18d1      	adds	r1, r2, r3
 8007784:	79fa      	ldrb	r2, [r7, #7]
 8007786:	486d      	ldr	r0, [pc, #436]	; (800793c <Send_Service_Signal_Message+0x730>)
 8007788:	4613      	mov	r3, r2
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	4413      	add	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4403      	add	r3, r0
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007798:	460a      	mov	r2, r1
 800779a:	2108      	movs	r1, #8
 800779c:	f7f8 ffc6 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80077a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80077a4:	3308      	adds	r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da00      	bge.n	80077ac <Send_Service_Signal_Message+0x5a0>
 80077aa:	3307      	adds	r3, #7
 80077ac:	10db      	asrs	r3, r3, #3
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077b4:	4413      	add	r3, r2
 80077b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80077ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077be:	3308      	adds	r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b21b      	sxth	r3, r3
 80077c4:	425a      	negs	r2, r3
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	f002 0207 	and.w	r2, r2, #7
 80077ce:	bf58      	it	pl
 80077d0:	4253      	negpl	r3, r2
 80077d2:	b21b      	sxth	r3, r3
 80077d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80077d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077dc:	f107 020c 	add.w	r2, r7, #12
 80077e0:	18d1      	adds	r1, r2, r3
 80077e2:	79fa      	ldrb	r2, [r7, #7]
 80077e4:	4855      	ldr	r0, [pc, #340]	; (800793c <Send_Service_Signal_Message+0x730>)
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	4403      	add	r3, r0
 80077f0:	3301      	adds	r3, #1
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80077f8:	460a      	mov	r2, r1
 80077fa:	2108      	movs	r1, #8
 80077fc:	f7f8 ff96 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007800:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007804:	3308      	adds	r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	da00      	bge.n	800780c <Send_Service_Signal_Message+0x600>
 800780a:	3307      	adds	r3, #7
 800780c:	10db      	asrs	r3, r3, #3
 800780e:	b29a      	uxth	r2, r3
 8007810:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007814:	4413      	add	r3, r2
 8007816:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800781a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800781e:	3308      	adds	r3, #8
 8007820:	b29b      	uxth	r3, r3
 8007822:	b21b      	sxth	r3, r3
 8007824:	425a      	negs	r2, r3
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	f002 0207 	and.w	r2, r2, #7
 800782e:	bf58      	it	pl
 8007830:	4253      	negpl	r3, r2
 8007832:	b21b      	sxth	r3, r3
 8007834:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007838:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800783c:	f107 020c 	add.w	r2, r7, #12
 8007840:	18d1      	adds	r1, r2, r3
 8007842:	79fa      	ldrb	r2, [r7, #7]
 8007844:	483d      	ldr	r0, [pc, #244]	; (800793c <Send_Service_Signal_Message+0x730>)
 8007846:	4613      	mov	r3, r2
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	4403      	add	r3, r0
 8007850:	3302      	adds	r3, #2
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007858:	460a      	mov	r2, r1
 800785a:	2108      	movs	r1, #8
 800785c:	f7f8 ff66 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007860:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007864:	3308      	adds	r3, #8
 8007866:	2b00      	cmp	r3, #0
 8007868:	da00      	bge.n	800786c <Send_Service_Signal_Message+0x660>
 800786a:	3307      	adds	r3, #7
 800786c:	10db      	asrs	r3, r3, #3
 800786e:	b29a      	uxth	r2, r3
 8007870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007874:	4413      	add	r3, r2
 8007876:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800787a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800787e:	3308      	adds	r3, #8
 8007880:	b29b      	uxth	r3, r3
 8007882:	b21b      	sxth	r3, r3
 8007884:	425a      	negs	r2, r3
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	f002 0207 	and.w	r2, r2, #7
 800788e:	bf58      	it	pl
 8007890:	4253      	negpl	r3, r2
 8007892:	b21b      	sxth	r3, r3
 8007894:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 8007898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800789c:	f107 020c 	add.w	r2, r7, #12
 80078a0:	18d4      	adds	r4, r2, r3
 80078a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80078a6:	f107 030c 	add.w	r3, r7, #12
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f00c fae1 	bl	8013e74 <CalculateDirectReverseCrc>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80078b8:	4622      	mov	r2, r4
 80078ba:	2120      	movs	r1, #32
 80078bc:	f7f8 ff36 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 80078c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80078c4:	3320      	adds	r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da00      	bge.n	80078cc <Send_Service_Signal_Message+0x6c0>
 80078ca:	3307      	adds	r3, #7
 80078cc:	10db      	asrs	r3, r3, #3
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078d4:	4413      	add	r3, r2
 80078d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80078da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078de:	3320      	adds	r3, #32
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	b21b      	sxth	r3, r3
 80078e4:	425a      	negs	r2, r3
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	f002 0207 	and.w	r2, r2, #7
 80078ee:	bf58      	it	pl
 80078f0:	4253      	negpl	r3, r2
 80078f2:	b21b      	sxth	r3, r3
 80078f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80078f8:	4b11      	ldr	r3, [pc, #68]	; (8007940 <Send_Service_Signal_Message+0x734>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	0a5b      	lsrs	r3, r3, #9
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <Send_Service_Signal_Message+0x712>
 8007906:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <Send_Service_Signal_Message+0x734>)
 8007908:	791b      	ldrb	r3, [r3, #4]
 800790a:	79fa      	ldrb	r2, [r7, #7]
 800790c:	429a      	cmp	r2, r3
 800790e:	d106      	bne.n	800791e <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007910:	480c      	ldr	r0, [pc, #48]	; (8007944 <Send_Service_Signal_Message+0x738>)
 8007912:	f01d f8bd 	bl	8024a90 <puts>
		printf("Not Sending Reply");
 8007916:	480c      	ldr	r0, [pc, #48]	; (8007948 <Send_Service_Signal_Message+0x73c>)
 8007918:	f01d f81e 	bl	8024958 <iprintf>
 800791c:	e009      	b.n	8007932 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 800791e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007922:	b2d9      	uxtb	r1, r3
 8007924:	79fa      	ldrb	r2, [r7, #7]
 8007926:	f107 030c 	add.w	r3, r7, #12
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f80e 	bl	800794c <Process_Sending_Reply>
	}
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	3754      	adds	r7, #84	; 0x54
 8007936:	46bd      	mov	sp, r7
 8007938:	bd90      	pop	{r4, r7, pc}
 800793a:	bf00      	nop
 800793c:	200011b8 	.word	0x200011b8
 8007940:	2000198c 	.word	0x2000198c
 8007944:	080265dc 	.word	0x080265dc
 8007948:	080265f4 	.word	0x080265f4

0800794c <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b09c      	sub	sp, #112	; 0x70
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
 8007958:	4613      	mov	r3, r2
 800795a:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 800795c:	2300      	movs	r3, #0
 800795e:	60bb      	str	r3, [r7, #8]
 8007960:	f107 030c 	add.w	r3, r7, #12
 8007964:	2260      	movs	r2, #96	; 0x60
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f01c ff0d 	bl	8024788 <memset>
	uint8_t uc_index = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 800797a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8007984:	4619      	mov	r1, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800798e:	443b      	add	r3, r7
 8007990:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007994:	2301      	movs	r3, #1
 8007996:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800799a:	e03c      	b.n	8007a16 <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 800799c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2bef      	cmp	r3, #239	; 0xef
 80079a8:	d922      	bls.n	80079f0 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80079aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	4413      	add	r3, r2
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80079b8:	1c59      	adds	r1, r3, #1
 80079ba:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80079be:	f022 020f 	bic.w	r2, r2, #15
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	3370      	adds	r3, #112	; 0x70
 80079c6:	443b      	add	r3, r7
 80079c8:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80079cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	4413      	add	r3, r2
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80079da:	1c59      	adds	r1, r3, #1
 80079dc:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80079e0:	f002 020f 	and.w	r2, r2, #15
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	3370      	adds	r3, #112	; 0x70
 80079e8:	443b      	add	r3, r7
 80079ea:	f803 2c68 	strb.w	r2, [r3, #-104]
 80079ee:	e00d      	b.n	8007a0c <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 80079f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	441a      	add	r2, r3
 80079f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80079fc:	1c59      	adds	r1, r3, #1
 80079fe:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	3370      	adds	r3, #112	; 0x70
 8007a06:	443b      	add	r3, r7
 8007a08:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007a0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007a10:	3301      	adds	r3, #1
 8007a12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007a16:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d3bd      	bcc.n	800799c <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007a20:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8007a2a:	3370      	adds	r3, #112	; 0x70
 8007a2c:	443b      	add	r3, r7
 8007a2e:	22f6      	movs	r2, #246	; 0xf6
 8007a30:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 8007a34:	78bb      	ldrb	r3, [r7, #2]
 8007a36:	4a37      	ldr	r2, [pc, #220]	; (8007b14 <Process_Sending_Reply+0x1c8>)
 8007a38:	5cd3      	ldrb	r3, [r2, r3]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10b      	bne.n	8007a56 <Process_Sending_Reply+0x10a>
 8007a3e:	4b36      	ldr	r3, [pc, #216]	; (8007b18 <Process_Sending_Reply+0x1cc>)
 8007a40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d106      	bne.n	8007a56 <Process_Sending_Reply+0x10a>
 8007a48:	4b34      	ldr	r3, [pc, #208]	; (8007b1c <Process_Sending_Reply+0x1d0>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d102      	bne.n	8007a56 <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007a50:	4833      	ldr	r0, [pc, #204]	; (8007b20 <Process_Sending_Reply+0x1d4>)
 8007a52:	f001 f8d5 	bl	8008c00 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 8007a56:	78bb      	ldrb	r3, [r7, #2]
 8007a58:	4a32      	ldr	r2, [pc, #200]	; (8007b24 <Process_Sending_Reply+0x1d8>)
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d10d      	bne.n	8007a80 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8007a64:	78bb      	ldrb	r3, [r7, #2]
 8007a66:	4a30      	ldr	r2, [pc, #192]	; (8007b28 <Process_Sending_Reply+0x1dc>)
 8007a68:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8007a6c:	f107 0008 	add.w	r0, r7, #8
 8007a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a74:	f007 ffc4 	bl	800fa00 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = RESET;
 8007a78:	78bb      	ldrb	r3, [r7, #2]
 8007a7a:	4a26      	ldr	r2, [pc, #152]	; (8007b14 <Process_Sending_Reply+0x1c8>)
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8007a80:	78bb      	ldrb	r3, [r7, #2]
 8007a82:	4a28      	ldr	r2, [pc, #160]	; (8007b24 <Process_Sending_Reply+0x1d8>)
 8007a84:	4413      	add	r3, r2
 8007a86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d119      	bne.n	8007ac2 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007a94:	e00e      	b.n	8007ab4 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 8007a96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007a9a:	3370      	adds	r3, #112	; 0x70
 8007a9c:	443b      	add	r3, r7
 8007a9e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	2003      	movs	r0, #3
 8007aa6:	f00f fcf5 	bl	8017494 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 8007aaa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007aae:	3301      	adds	r3, #1
 8007ab0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007ab4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d3e9      	bcc.n	8007a96 <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 8007ac2:	4b16      	ldr	r3, [pc, #88]	; (8007b1c <Process_Sending_Reply+0x1d0>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d102      	bne.n	8007ad0 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007aca:	4815      	ldr	r0, [pc, #84]	; (8007b20 <Process_Sending_Reply+0x1d4>)
 8007acc:	f001 f898 	bl	8008c00 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <Process_Sending_Reply+0x1cc>)
 8007ad2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00b      	beq.n	8007af2 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 8007ada:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <Process_Sending_Reply+0x1cc>)
 8007adc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	480c      	ldr	r0, [pc, #48]	; (8007b18 <Process_Sending_Reply+0x1cc>)
 8007ae6:	f000 fee5 	bl	80088b4 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <Process_Sending_Reply+0x1cc>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	461a      	mov	r2, r3
 8007af6:	2100      	movs	r1, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fedb 	bl	80088b4 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <Process_Sending_Reply+0x1d0>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d102      	bne.n	8007b0c <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 8007b06:	4809      	ldr	r0, [pc, #36]	; (8007b2c <Process_Sending_Reply+0x1e0>)
 8007b08:	f001 f87a 	bl	8008c00 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007b0c:	bf00      	nop
 8007b0e:	3770      	adds	r7, #112	; 0x70
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	200010fc 	.word	0x200010fc
 8007b18:	20001c40 	.word	0x20001c40
 8007b1c:	2000065d 	.word	0x2000065d
 8007b20:	08026b68 	.word	0x08026b68
 8007b24:	20000304 	.word	0x20000304
 8007b28:	20001088 	.word	0x20001088
 8007b2c:	08026bc8 	.word	0x08026bc8

08007b30 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8007b3a:	f00f ff03 	bl	8017944 <HAL_GetTick>
 8007b3e:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	4a86      	ldr	r2, [pc, #536]	; (8007d5c <Check_Primary_r_Secondary+0x22c>)
 8007b44:	4413      	add	r3, r2
 8007b46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	f000 8102 	beq.w	8007d54 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007b50:	79fa      	ldrb	r2, [r7, #7]
 8007b52:	4983      	ldr	r1, [pc, #524]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	440b      	add	r3, r1
 8007b5e:	3303      	adds	r3, #3
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d12b      	bne.n	8007bbe <Check_Primary_r_Secondary+0x8e>
 8007b66:	79fa      	ldrb	r2, [r7, #7]
 8007b68:	497e      	ldr	r1, [pc, #504]	; (8007d64 <Check_Primary_r_Secondary+0x234>)
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4413      	add	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	440b      	add	r3, r1
 8007b74:	3303      	adds	r3, #3
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d120      	bne.n	8007bbe <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007b7c:	79fa      	ldrb	r2, [r7, #7]
 8007b7e:	4978      	ldr	r1, [pc, #480]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007b80:	4613      	mov	r3, r2
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	4413      	add	r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	440b      	add	r3, r1
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80e1 	beq.w	8007d56 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	4a71      	ldr	r2, [pc, #452]	; (8007d5c <Check_Primary_r_Secondary+0x22c>)
 8007b98:	3366      	adds	r3, #102	; 0x66
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4871      	ldr	r0, [pc, #452]	; (8007d68 <Check_Primary_r_Secondary+0x238>)
 8007ba4:	f01c fed8 	bl	8024958 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007ba8:	79fa      	ldrb	r2, [r7, #7]
 8007baa:	496d      	ldr	r1, [pc, #436]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007bac:	4613      	mov	r3, r2
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	4413      	add	r3, r2
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	440b      	add	r3, r1
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007bbc:	e0cb      	b.n	8007d56 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007bbe:	79fa      	ldrb	r2, [r7, #7]
 8007bc0:	4967      	ldr	r1, [pc, #412]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	3303      	adds	r3, #3
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d12b      	bne.n	8007c2c <Check_Primary_r_Secondary+0xfc>
 8007bd4:	79fa      	ldrb	r2, [r7, #7]
 8007bd6:	4963      	ldr	r1, [pc, #396]	; (8007d64 <Check_Primary_r_Secondary+0x234>)
 8007bd8:	4613      	mov	r3, r2
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	4413      	add	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	440b      	add	r3, r1
 8007be2:	3303      	adds	r3, #3
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d120      	bne.n	8007c2c <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007bea:	79fa      	ldrb	r2, [r7, #7]
 8007bec:	495c      	ldr	r1, [pc, #368]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007bee:	4613      	mov	r3, r2
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4413      	add	r3, r2
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 80aa 	beq.w	8007d56 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	4a55      	ldr	r2, [pc, #340]	; (8007d5c <Check_Primary_r_Secondary+0x22c>)
 8007c06:	3366      	adds	r3, #102	; 0x66
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4856      	ldr	r0, [pc, #344]	; (8007d6c <Check_Primary_r_Secondary+0x23c>)
 8007c12:	f01c fea1 	bl	8024958 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007c16:	79fa      	ldrb	r2, [r7, #7]
 8007c18:	4951      	ldr	r1, [pc, #324]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	4413      	add	r3, r2
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	440b      	add	r3, r1
 8007c24:	3304      	adds	r3, #4
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007c2a:	e094      	b.n	8007d56 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007c2c:	79fa      	ldrb	r2, [r7, #7]
 8007c2e:	494c      	ldr	r1, [pc, #304]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007c30:	4613      	mov	r3, r2
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	4413      	add	r3, r2
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	440b      	add	r3, r1
 8007c3a:	3303      	adds	r3, #3
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d13e      	bne.n	8007cc0 <Check_Primary_r_Secondary+0x190>
 8007c42:	79fa      	ldrb	r2, [r7, #7]
 8007c44:	4947      	ldr	r1, [pc, #284]	; (8007d64 <Check_Primary_r_Secondary+0x234>)
 8007c46:	4613      	mov	r3, r2
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	4413      	add	r3, r2
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	440b      	add	r3, r1
 8007c50:	3303      	adds	r3, #3
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d133      	bne.n	8007cc0 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007c58:	79fa      	ldrb	r2, [r7, #7]
 8007c5a:	4941      	ldr	r1, [pc, #260]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4413      	add	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	440b      	add	r3, r1
 8007c66:	3304      	adds	r3, #4
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d073      	beq.n	8007d56 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	4a3a      	ldr	r2, [pc, #232]	; (8007d5c <Check_Primary_r_Secondary+0x22c>)
 8007c72:	3366      	adds	r3, #102	; 0x66
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	483c      	ldr	r0, [pc, #240]	; (8007d70 <Check_Primary_r_Secondary+0x240>)
 8007c7e:	f01c fe6b 	bl	8024958 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	493b      	ldr	r1, [pc, #236]	; (8007d74 <Check_Primary_r_Secondary+0x244>)
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	493a      	ldr	r1, [pc, #232]	; (8007d78 <Check_Primary_r_Secondary+0x248>)
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8007c96:	79fa      	ldrb	r2, [r7, #7]
 8007c98:	4931      	ldr	r1, [pc, #196]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3310      	adds	r3, #16
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8007caa:	79fa      	ldrb	r2, [r7, #7]
 8007cac:	492c      	ldr	r1, [pc, #176]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007cae:	4613      	mov	r3, r2
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3304      	adds	r3, #4
 8007cba:	2201      	movs	r2, #1
 8007cbc:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007cbe:	e04a      	b.n	8007d56 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007cc0:	79fa      	ldrb	r2, [r7, #7]
 8007cc2:	4927      	ldr	r1, [pc, #156]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	4413      	add	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	440b      	add	r3, r1
 8007cce:	3303      	adds	r3, #3
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d13f      	bne.n	8007d56 <Check_Primary_r_Secondary+0x226>
 8007cd6:	79fa      	ldrb	r2, [r7, #7]
 8007cd8:	4922      	ldr	r1, [pc, #136]	; (8007d64 <Check_Primary_r_Secondary+0x234>)
 8007cda:	4613      	mov	r3, r2
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	4413      	add	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3303      	adds	r3, #3
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d134      	bne.n	8007d56 <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007cec:	79fa      	ldrb	r2, [r7, #7]
 8007cee:	491c      	ldr	r1, [pc, #112]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d029      	beq.n	8007d56 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	4a15      	ldr	r2, [pc, #84]	; (8007d5c <Check_Primary_r_Secondary+0x22c>)
 8007d06:	3366      	adds	r3, #102	; 0x66
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	481a      	ldr	r0, [pc, #104]	; (8007d7c <Check_Primary_r_Secondary+0x24c>)
 8007d12:	f01c fe21 	bl	8024958 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	4916      	ldr	r1, [pc, #88]	; (8007d74 <Check_Primary_r_Secondary+0x244>)
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	4915      	ldr	r1, [pc, #84]	; (8007d78 <Check_Primary_r_Secondary+0x248>)
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8007d2a:	79fa      	ldrb	r2, [r7, #7]
 8007d2c:	490c      	ldr	r1, [pc, #48]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007d2e:	4613      	mov	r3, r2
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	4413      	add	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	440b      	add	r3, r1
 8007d38:	3310      	adds	r3, #16
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8007d3e:	79fa      	ldrb	r2, [r7, #7]
 8007d40:	4907      	ldr	r1, [pc, #28]	; (8007d60 <Check_Primary_r_Secondary+0x230>)
 8007d42:	4613      	mov	r3, r2
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e000      	b.n	8007d56 <Check_Primary_r_Secondary+0x226>
		return;
 8007d54:	bf00      	nop
			}
#endif

		}
	}
}
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000304 	.word	0x20000304
 8007d60:	200016a4 	.word	0x200016a4
 8007d64:	20001794 	.word	0x20001794
 8007d68:	08026d80 	.word	0x08026d80
 8007d6c:	08026dbc 	.word	0x08026dbc
 8007d70:	08026df8 	.word	0x08026df8
 8007d74:	20000fd4 	.word	0x20000fd4
 8007d78:	20000ffc 	.word	0x20000ffc
 8007d7c:	08026e30 	.word	0x08026e30

08007d80 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	4aac      	ldr	r2, [pc, #688]	; (8008040 <Check_Vital_CRC+0x2c0>)
 8007d8e:	4413      	add	r3, r2
 8007d90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	f000 814f 	beq.w	8008038 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007d9a:	79fa      	ldrb	r2, [r7, #7]
 8007d9c:	49a9      	ldr	r1, [pc, #676]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007d9e:	4613      	mov	r3, r2
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	4413      	add	r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	440b      	add	r3, r1
 8007da8:	3308      	adds	r3, #8
 8007daa:	6819      	ldr	r1, [r3, #0]
 8007dac:	79fa      	ldrb	r2, [r7, #7]
 8007dae:	48a6      	ldr	r0, [pc, #664]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007db0:	4613      	mov	r3, r2
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	4413      	add	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	4403      	add	r3, r0
 8007dba:	3308      	adds	r3, #8
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	f000 8092 	beq.w	8007ee8 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007dc4:	79fa      	ldrb	r2, [r7, #7]
 8007dc6:	49a0      	ldr	r1, [pc, #640]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007dc8:	4613      	mov	r3, r2
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	4413      	add	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	440b      	add	r3, r1
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8086 	beq.w	8007ee8 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007ddc:	79fa      	ldrb	r2, [r7, #7]
 8007dde:	4999      	ldr	r1, [pc, #612]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007de0:	4613      	mov	r3, r2
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	4413      	add	r3, r2
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	440b      	add	r3, r1
 8007dea:	3304      	adds	r3, #4
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d104      	bne.n	8007dfc <Check_Vital_CRC+0x7c>
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	4a95      	ldr	r2, [pc, #596]	; (800804c <Check_Vital_CRC+0x2cc>)
 8007df6:	5cd3      	ldrb	r3, [r2, r3]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d175      	bne.n	8007ee8 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007dfc:	79fa      	ldrb	r2, [r7, #7]
 8007dfe:	4991      	ldr	r1, [pc, #580]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007e00:	4613      	mov	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	4413      	add	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	440b      	add	r3, r1
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	6819      	ldr	r1, [r3, #0]
 8007e0e:	79fa      	ldrb	r2, [r7, #7]
 8007e10:	488d      	ldr	r0, [pc, #564]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007e12:	4613      	mov	r3, r2
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	4413      	add	r3, r2
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	4403      	add	r3, r0
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	1acb      	subs	r3, r1, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfb8      	it	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d104      	bne.n	8007e3a <Check_Vital_CRC+0xba>
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	4a87      	ldr	r2, [pc, #540]	; (8008050 <Check_Vital_CRC+0x2d0>)
 8007e34:	5cd3      	ldrb	r3, [r2, r3]
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d14c      	bne.n	8007ed4 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	4a84      	ldr	r2, [pc, #528]	; (8008050 <Check_Vital_CRC+0x2d0>)
 8007e3e:	2100      	movs	r1, #0
 8007e40:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	4a7e      	ldr	r2, [pc, #504]	; (8008040 <Check_Vital_CRC+0x2c0>)
 8007e46:	3366      	adds	r3, #102	; 0x66
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4880      	ldr	r0, [pc, #512]	; (8008054 <Check_Vital_CRC+0x2d4>)
 8007e52:	f01c fd81 	bl	8024958 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007e56:	79fa      	ldrb	r2, [r7, #7]
 8007e58:	497a      	ldr	r1, [pc, #488]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	4413      	add	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	440b      	add	r3, r1
 8007e64:	3308      	adds	r3, #8
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	487b      	ldr	r0, [pc, #492]	; (8008058 <Check_Vital_CRC+0x2d8>)
 8007e6c:	f01c fd74 	bl	8024958 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007e70:	79fa      	ldrb	r2, [r7, #7]
 8007e72:	4975      	ldr	r1, [pc, #468]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007e74:	4613      	mov	r3, r2
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	4413      	add	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3308      	adds	r3, #8
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4619      	mov	r1, r3
 8007e84:	4875      	ldr	r0, [pc, #468]	; (800805c <Check_Vital_CRC+0x2dc>)
 8007e86:	f01c fd67 	bl	8024958 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007e8a:	4875      	ldr	r0, [pc, #468]	; (8008060 <Check_Vital_CRC+0x2e0>)
 8007e8c:	f01c fe00 	bl	8024a90 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007e90:	79fa      	ldrb	r2, [r7, #7]
 8007e92:	79f9      	ldrb	r1, [r7, #7]
 8007e94:	486c      	ldr	r0, [pc, #432]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007e96:	4613      	mov	r3, r2
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	4413      	add	r3, r2
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	4403      	add	r3, r0
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	486f      	ldr	r0, [pc, #444]	; (8008064 <Check_Vital_CRC+0x2e4>)
 8007ea6:	010b      	lsls	r3, r1, #4
 8007ea8:	4403      	add	r3, r0
 8007eaa:	3308      	adds	r3, #8
 8007eac:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007eae:	79f9      	ldrb	r1, [r7, #7]
 8007eb0:	79fa      	ldrb	r2, [r7, #7]
 8007eb2:	4865      	ldr	r0, [pc, #404]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	440b      	add	r3, r1
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4403      	add	r3, r0
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	6819      	ldr	r1, [r3, #0]
 8007ec2:	4860      	ldr	r0, [pc, #384]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	4413      	add	r3, r2
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4403      	add	r3, r0
 8007ece:	3308      	adds	r3, #8
 8007ed0:	6019      	str	r1, [r3, #0]
 8007ed2:	e009      	b.n	8007ee8 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d106      	bne.n	8007ee8 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	4a5c      	ldr	r2, [pc, #368]	; (8008050 <Check_Vital_CRC+0x2d0>)
 8007ede:	5cd2      	ldrb	r2, [r2, r3]
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	b2d1      	uxtb	r1, r2
 8007ee4:	4a5a      	ldr	r2, [pc, #360]	; (8008050 <Check_Vital_CRC+0x2d0>)
 8007ee6:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007ee8:	79fa      	ldrb	r2, [r7, #7]
 8007eea:	4956      	ldr	r1, [pc, #344]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007eec:	4613      	mov	r3, r2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	440b      	add	r3, r1
 8007ef6:	330c      	adds	r3, #12
 8007ef8:	6819      	ldr	r1, [r3, #0]
 8007efa:	79fa      	ldrb	r2, [r7, #7]
 8007efc:	4852      	ldr	r0, [pc, #328]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007efe:	4613      	mov	r3, r2
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	4413      	add	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4403      	add	r3, r0
 8007f08:	330c      	adds	r3, #12
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4299      	cmp	r1, r3
 8007f0e:	f000 8094 	beq.w	800803a <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007f12:	79fa      	ldrb	r2, [r7, #7]
 8007f14:	494c      	ldr	r1, [pc, #304]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007f16:	4613      	mov	r3, r2
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	4413      	add	r3, r2
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	440b      	add	r3, r1
 8007f20:	330c      	adds	r3, #12
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8088 	beq.w	800803a <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007f2a:	79fa      	ldrb	r2, [r7, #7]
 8007f2c:	4945      	ldr	r1, [pc, #276]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007f2e:	4613      	mov	r3, r2
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	4413      	add	r3, r2
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	440b      	add	r3, r1
 8007f38:	3304      	adds	r3, #4
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d104      	bne.n	8007f4a <Check_Vital_CRC+0x1ca>
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	4a42      	ldr	r2, [pc, #264]	; (800804c <Check_Vital_CRC+0x2cc>)
 8007f44:	5cd3      	ldrb	r3, [r2, r3]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d177      	bne.n	800803a <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007f4a:	79fa      	ldrb	r2, [r7, #7]
 8007f4c:	493d      	ldr	r1, [pc, #244]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	4413      	add	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	440b      	add	r3, r1
 8007f58:	330c      	adds	r3, #12
 8007f5a:	6819      	ldr	r1, [r3, #0]
 8007f5c:	79fa      	ldrb	r2, [r7, #7]
 8007f5e:	483a      	ldr	r0, [pc, #232]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007f60:	4613      	mov	r3, r2
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	4413      	add	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	4403      	add	r3, r0
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	1acb      	subs	r3, r1, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfb8      	it	lt
 8007f74:	425b      	neglt	r3, r3
 8007f76:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d104      	bne.n	8007f88 <Check_Vital_CRC+0x208>
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	4a39      	ldr	r2, [pc, #228]	; (8008068 <Check_Vital_CRC+0x2e8>)
 8007f82:	5cd3      	ldrb	r3, [r2, r3]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d14c      	bne.n	8008022 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	4a37      	ldr	r2, [pc, #220]	; (8008068 <Check_Vital_CRC+0x2e8>)
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	4a2b      	ldr	r2, [pc, #172]	; (8008040 <Check_Vital_CRC+0x2c0>)
 8007f94:	3366      	adds	r3, #102	; 0x66
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4833      	ldr	r0, [pc, #204]	; (800806c <Check_Vital_CRC+0x2ec>)
 8007fa0:	f01c fcda 	bl	8024958 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007fa4:	79fa      	ldrb	r2, [r7, #7]
 8007fa6:	4927      	ldr	r1, [pc, #156]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8007fa8:	4613      	mov	r3, r2
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	4413      	add	r3, r2
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	440b      	add	r3, r1
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	482d      	ldr	r0, [pc, #180]	; (8008070 <Check_Vital_CRC+0x2f0>)
 8007fba:	f01c fccd 	bl	8024958 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007fbe:	79fa      	ldrb	r2, [r7, #7]
 8007fc0:	4921      	ldr	r1, [pc, #132]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4413      	add	r3, r2
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	440b      	add	r3, r1
 8007fcc:	330c      	adds	r3, #12
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4828      	ldr	r0, [pc, #160]	; (8008074 <Check_Vital_CRC+0x2f4>)
 8007fd4:	f01c fcc0 	bl	8024958 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007fd8:	4827      	ldr	r0, [pc, #156]	; (8008078 <Check_Vital_CRC+0x2f8>)
 8007fda:	f01c fd59 	bl	8024a90 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007fde:	79fa      	ldrb	r2, [r7, #7]
 8007fe0:	79f9      	ldrb	r1, [r7, #7]
 8007fe2:	4819      	ldr	r0, [pc, #100]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	4413      	add	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	4403      	add	r3, r0
 8007fee:	330c      	adds	r3, #12
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	481c      	ldr	r0, [pc, #112]	; (8008064 <Check_Vital_CRC+0x2e4>)
 8007ff4:	010b      	lsls	r3, r1, #4
 8007ff6:	4403      	add	r3, r0
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007ffc:	79f9      	ldrb	r1, [r7, #7]
 8007ffe:	79fa      	ldrb	r2, [r7, #7]
 8008000:	4811      	ldr	r0, [pc, #68]	; (8008048 <Check_Vital_CRC+0x2c8>)
 8008002:	460b      	mov	r3, r1
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	440b      	add	r3, r1
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	4403      	add	r3, r0
 800800c:	330c      	adds	r3, #12
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	480c      	ldr	r0, [pc, #48]	; (8008044 <Check_Vital_CRC+0x2c4>)
 8008012:	4613      	mov	r3, r2
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	4413      	add	r3, r2
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	4403      	add	r3, r0
 800801c:	330c      	adds	r3, #12
 800801e:	6019      	str	r1, [r3, #0]
 8008020:	e00b      	b.n	800803a <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d108      	bne.n	800803a <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	4a0f      	ldr	r2, [pc, #60]	; (8008068 <Check_Vital_CRC+0x2e8>)
 800802c:	5cd2      	ldrb	r2, [r2, r3]
 800802e:	3201      	adds	r2, #1
 8008030:	b2d1      	uxtb	r1, r2
 8008032:	4a0d      	ldr	r2, [pc, #52]	; (8008068 <Check_Vital_CRC+0x2e8>)
 8008034:	54d1      	strb	r1, [r2, r3]
 8008036:	e000      	b.n	800803a <Check_Vital_CRC+0x2ba>
		return;
 8008038:	bf00      	nop
				}
			}
		}
	}
}
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000304 	.word	0x20000304
 8008044:	200016a4 	.word	0x200016a4
 8008048:	20001794 	.word	0x20001794
 800804c:	20001024 	.word	0x20001024
 8008050:	20002068 	.word	0x20002068
 8008054:	08026e6c 	.word	0x08026e6c
 8008058:	08026eb0 	.word	0x08026eb0
 800805c:	08026ed4 	.word	0x08026ed4
 8008060:	08026ef8 	.word	0x08026ef8
 8008064:	200011f4 	.word	0x200011f4
 8008068:	20002074 	.word	0x20002074
 800806c:	08026f20 	.word	0x08026f20
 8008070:	08026f64 	.word	0x08026f64
 8008074:	08026f88 	.word	0x08026f88
 8008078:	08026fac 	.word	0x08026fac

0800807c <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	4a0a      	ldr	r2, [pc, #40]	; (80080b4 <Check_Other_EiPC_Packet+0x38>)
 800808a:	4413      	add	r3, r2
 800808c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008090:	2b02      	cmp	r3, #2
 8008092:	d007      	beq.n	80080a4 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fd4a 	bl	8007b30 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff fe6e 	bl	8007d80 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 fa4a 	bl	8009540 <CheckOtherLinkStatus>
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000304 	.word	0x20000304

080080b8 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 80080b8:	b590      	push	{r4, r7, lr}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80080c2:	493c      	ldr	r1, [pc, #240]	; (80081b4 <CheckLinkEstablishTimeout+0xfc>)
 80080c4:	483c      	ldr	r0, [pc, #240]	; (80081b8 <CheckLinkEstablishTimeout+0x100>)
 80080c6:	f7f8 f8bb 	bl	8000240 <strcmp>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d06c      	beq.n	80081aa <CheckLinkEstablishTimeout+0xf2>
	{
		return;
	}

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80080d0:	2300      	movs	r3, #0
 80080d2:	71fb      	strb	r3, [r7, #7]
 80080d4:	e062      	b.n	800819c <CheckLinkEstablishTimeout+0xe4>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	4a38      	ldr	r2, [pc, #224]	; (80081bc <CheckLinkEstablishTimeout+0x104>)
 80080da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080de:	4618      	mov	r0, r3
 80080e0:	f007 f91e 	bl	800f320 <HAL_Elaps_Ticks>
 80080e4:	4602      	mov	r2, r0
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	4935      	ldr	r1, [pc, #212]	; (80081c0 <CheckLinkEstablishTimeout+0x108>)
 80080ea:	339e      	adds	r3, #158	; 0x9e
 80080ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d950      	bls.n	8008196 <CheckLinkEstablishTimeout+0xde>
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	4a33      	ldr	r2, [pc, #204]	; (80081c4 <CheckLinkEstablishTimeout+0x10c>)
 80080f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	492f      	ldr	r1, [pc, #188]	; (80081bc <CheckLinkEstablishTimeout+0x104>)
 8008100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008104:	429a      	cmp	r2, r3
 8008106:	d046      	beq.n	8008196 <CheckLinkEstablishTimeout+0xde>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8008108:	79fa      	ldrb	r2, [r7, #7]
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	492b      	ldr	r1, [pc, #172]	; (80081bc <CheckLinkEstablishTimeout+0x104>)
 800810e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008112:	492c      	ldr	r1, [pc, #176]	; (80081c4 <CheckLinkEstablishTimeout+0x10c>)
 8008114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	4a29      	ldr	r2, [pc, #164]	; (80081c0 <CheckLinkEstablishTimeout+0x108>)
 800811c:	3366      	adds	r3, #102	; 0x66
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	4619      	mov	r1, r3
 8008126:	4828      	ldr	r0, [pc, #160]	; (80081c8 <CheckLinkEstablishTimeout+0x110>)
 8008128:	f01c fc16 	bl	8024958 <iprintf>
			SelfLinkFlag[Traverser] = RESET;
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	4a27      	ldr	r2, [pc, #156]	; (80081cc <CheckLinkEstablishTimeout+0x114>)
 8008130:	2100      	movs	r1, #0
 8008132:	54d1      	strb	r1, [r2, r3]
			memset(&Main_Relays_st[Traverser].RelayIPS_Buff,0,sizeof(Main_Relays_st[Traverser].RelayIPS_Buff));
 8008134:	79fa      	ldrb	r2, [r7, #7]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a24      	ldr	r2, [pc, #144]	; (80081d0 <CheckLinkEstablishTimeout+0x118>)
 8008140:	4413      	add	r3, r2
 8008142:	3301      	adds	r3, #1
 8008144:	2210      	movs	r2, #16
 8008146:	2100      	movs	r1, #0
 8008148:	4618      	mov	r0, r3
 800814a:	f01c fb1d 	bl	8024788 <memset>
			Main_Relays_st[Traverser].RelayIPS_CRC = 0;
 800814e:	79fa      	ldrb	r2, [r7, #7]
 8008150:	491f      	ldr	r1, [pc, #124]	; (80081d0 <CheckLinkEstablishTimeout+0x118>)
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	440b      	add	r3, r1
 800815c:	3312      	adds	r3, #18
 800815e:	2200      	movs	r2, #0
 8008160:	801a      	strh	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8008162:	79fa      	ldrb	r2, [r7, #7]
 8008164:	491b      	ldr	r1, [pc, #108]	; (80081d4 <CheckLinkEstablishTimeout+0x11c>)
 8008166:	4613      	mov	r3, r2
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	4413      	add	r3, r2
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	440b      	add	r3, r1
 8008170:	3310      	adds	r3, #16
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	79fc      	ldrb	r4, [r7, #7]
 8008176:	4618      	mov	r0, r3
 8008178:	f007 f8d2 	bl	800f320 <HAL_Elaps_Ticks>
 800817c:	4602      	mov	r2, r0
 800817e:	4915      	ldr	r1, [pc, #84]	; (80081d4 <CheckLinkEstablishTimeout+0x11c>)
 8008180:	4623      	mov	r3, r4
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	4423      	add	r3, r4
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	440b      	add	r3, r1
 800818a:	3310      	adds	r3, #16
 800818c:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	4618      	mov	r0, r3
 8008192:	f001 f9d5 	bl	8009540 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	3301      	adds	r3, #1
 800819a:	71fb      	strb	r3, [r7, #7]
 800819c:	4b08      	ldr	r3, [pc, #32]	; (80081c0 <CheckLinkEstablishTimeout+0x108>)
 800819e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081a2:	79fa      	ldrb	r2, [r7, #7]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d396      	bcc.n	80080d6 <CheckLinkEstablishTimeout+0x1e>
 80081a8:	e000      	b.n	80081ac <CheckLinkEstablishTimeout+0xf4>
		return;
 80081aa:	bf00      	nop
		}
	}
}
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd90      	pop	{r4, r7, pc}
 80081b2:	bf00      	nop
 80081b4:	08026104 	.word	0x08026104
 80081b8:	20000305 	.word	0x20000305
 80081bc:	20000f44 	.word	0x20000f44
 80081c0:	20000304 	.word	0x20000304
 80081c4:	20002080 	.word	0x20002080
 80081c8:	08026fd4 	.word	0x08026fd4
 80081cc:	20000f94 	.word	0x20000f94
 80081d0:	20001eb0 	.word	0x20001eb0
 80081d4:	200016a4 	.word	0x200016a4

080081d8 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 80081d8:	b590      	push	{r4, r7, lr}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80081de:	2300      	movs	r3, #0
 80081e0:	71fb      	strb	r3, [r7, #7]
 80081e2:	e052      	b.n	800828a <Send_Self_Sharing+0xb2>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	4a2d      	ldr	r2, [pc, #180]	; (800829c <Send_Self_Sharing+0xc4>)
 80081e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f007 f897 	bl	800f320 <HAL_Elaps_Ticks>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b2a      	ldr	r3, [pc, #168]	; (80082a0 <Send_Self_Sharing+0xc8>)
 80081f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d942      	bls.n	8008284 <Send_Self_Sharing+0xac>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 80081fe:	79fa      	ldrb	r2, [r7, #7]
 8008200:	4928      	ldr	r1, [pc, #160]	; (80082a4 <Send_Self_Sharing+0xcc>)
 8008202:	4613      	mov	r3, r2
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	4413      	add	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	440b      	add	r3, r1
 800820c:	3301      	adds	r3, #1
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8008212:	79f9      	ldrb	r1, [r7, #7]
 8008214:	79fa      	ldrb	r2, [r7, #7]
 8008216:	4824      	ldr	r0, [pc, #144]	; (80082a8 <Send_Self_Sharing+0xd0>)
 8008218:	460b      	mov	r3, r1
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	440b      	add	r3, r1
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4403      	add	r3, r0
 8008222:	3301      	adds	r3, #1
 8008224:	7818      	ldrb	r0, [r3, #0]
 8008226:	491f      	ldr	r1, [pc, #124]	; (80082a4 <Send_Self_Sharing+0xcc>)
 8008228:	4613      	mov	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	4413      	add	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	440b      	add	r3, r1
 8008232:	3302      	adds	r3, #2
 8008234:	4602      	mov	r2, r0
 8008236:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8008238:	2218      	movs	r2, #24
 800823a:	2100      	movs	r1, #0
 800823c:	481b      	ldr	r0, [pc, #108]	; (80082ac <Send_Self_Sharing+0xd4>)
 800823e:	f01c faa3 	bl	8024788 <memset>
			Tx_Ei_self_sharing_st[Traverser].Peer_Index = Traverser;
 8008242:	79fa      	ldrb	r2, [r7, #7]
 8008244:	4917      	ldr	r1, [pc, #92]	; (80082a4 <Send_Self_Sharing+0xcc>)
 8008246:	4613      	mov	r3, r2
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	4413      	add	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	440b      	add	r3, r1
 8008250:	79fa      	ldrb	r2, [r7, #7]
 8008252:	701a      	strb	r2, [r3, #0]
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8008254:	79fa      	ldrb	r2, [r7, #7]
 8008256:	4613      	mov	r3, r2
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	4413      	add	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	4a11      	ldr	r2, [pc, #68]	; (80082a4 <Send_Self_Sharing+0xcc>)
 8008260:	4413      	add	r3, r2
 8008262:	2218      	movs	r2, #24
 8008264:	4619      	mov	r1, r3
 8008266:	4811      	ldr	r0, [pc, #68]	; (80082ac <Send_Self_Sharing+0xd4>)
 8008268:	f01c fa66 	bl	8024738 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 800826c:	f240 2001 	movw	r0, #513	; 0x201
 8008270:	f007 fe0a 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8008274:	79fc      	ldrb	r4, [r7, #7]
 8008276:	f00f fb65 	bl	8017944 <HAL_GetTick>
 800827a:	4603      	mov	r3, r0
 800827c:	4a07      	ldr	r2, [pc, #28]	; (800829c <Send_Self_Sharing+0xc4>)
 800827e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8008282:	e008      	b.n	8008296 <Send_Self_Sharing+0xbe>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	3301      	adds	r3, #1
 8008288:	71fb      	strb	r3, [r7, #7]
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <Send_Self_Sharing+0xc8>)
 800828c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008290:	79fa      	ldrb	r2, [r7, #7]
 8008292:	429a      	cmp	r2, r3
 8008294:	d3a6      	bcc.n	80081e4 <Send_Self_Sharing+0xc>
		}
	}
}
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	bd90      	pop	{r4, r7, pc}
 800829c:	20000e5c 	.word	0x20000e5c
 80082a0:	20000304 	.word	0x20000304
 80082a4:	200016a4 	.word	0x200016a4
 80082a8:	20001cf8 	.word	0x20001cf8
 80082ac:	20001884 	.word	0x20001884

080082b0 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <Detect_CAN_Xchange_Failure+0xa8>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 80082bc:	f00c f88a 	bl	80143d4 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80082c0:	4926      	ldr	r1, [pc, #152]	; (800835c <Detect_CAN_Xchange_Failure+0xac>)
 80082c2:	4827      	ldr	r0, [pc, #156]	; (8008360 <Detect_CAN_Xchange_Failure+0xb0>)
 80082c4:	f7f7 ffbc 	bl	8000240 <strcmp>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <Detect_CAN_Xchange_Failure+0xa8>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	701a      	strb	r2, [r3, #0]
		return;
 80082d4:	e03e      	b.n	8008354 <Detect_CAN_Xchange_Failure+0xa4>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 80082d6:	4b23      	ldr	r3, [pc, #140]	; (8008364 <Detect_CAN_Xchange_Failure+0xb4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f007 f820 	bl	800f320 <HAL_Elaps_Ticks>
 80082e0:	4602      	mov	r2, r0
 80082e2:	4b21      	ldr	r3, [pc, #132]	; (8008368 <Detect_CAN_Xchange_Failure+0xb8>)
 80082e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d333      	bcc.n	8008354 <Detect_CAN_Xchange_Failure+0xa4>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 80082ec:	4b1f      	ldr	r3, [pc, #124]	; (800836c <Detect_CAN_Xchange_Failure+0xbc>)
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	4b1c      	ldr	r3, [pc, #112]	; (8008364 <Detect_CAN_Xchange_Failure+0xb4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d02d      	beq.n	8008354 <Detect_CAN_Xchange_Failure+0xa4>
		{
			Is_CAN_Exchange_happening = NO;
 80082f8:	4b17      	ldr	r3, [pc, #92]	; (8008358 <Detect_CAN_Xchange_Failure+0xa8>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 80082fe:	4b19      	ldr	r3, [pc, #100]	; (8008364 <Detect_CAN_Xchange_Failure+0xb4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1a      	ldr	r2, [pc, #104]	; (800836c <Detect_CAN_Xchange_Failure+0xbc>)
 8008304:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8008306:	4b17      	ldr	r3, [pc, #92]	; (8008364 <Detect_CAN_Xchange_Failure+0xb4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f007 f808 	bl	800f320 <HAL_Elaps_Ticks>
 8008310:	4603      	mov	r3, r0
 8008312:	4a17      	ldr	r2, [pc, #92]	; (8008370 <Detect_CAN_Xchange_Failure+0xc0>)
 8008314:	fba2 2303 	umull	r2, r3, r2, r3
 8008318:	099b      	lsrs	r3, r3, #6
 800831a:	4619      	mov	r1, r3
 800831c:	4815      	ldr	r0, [pc, #84]	; (8008374 <Detect_CAN_Xchange_Failure+0xc4>)
 800831e:	f01c fb1b 	bl	8024958 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8008322:	4815      	ldr	r0, [pc, #84]	; (8008378 <Detect_CAN_Xchange_Failure+0xc8>)
 8008324:	f01c fbb4 	bl	8024a90 <puts>
			memset(&Rx_Ei_self_sharing_st,0,(sizeof(EI_SELF_SHARING_t)* EI_data.Hitachi_st.PeersCnt));
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <Detect_CAN_Xchange_Failure+0xb8>)
 800832a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800832e:	461a      	mov	r2, r3
 8008330:	4613      	mov	r3, r2
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	461a      	mov	r2, r3
 800833a:	2100      	movs	r1, #0
 800833c:	480f      	ldr	r0, [pc, #60]	; (800837c <Detect_CAN_Xchange_Failure+0xcc>)
 800833e:	f01c fa23 	bl	8024788 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8008342:	22a2      	movs	r2, #162	; 0xa2
 8008344:	2100      	movs	r1, #0
 8008346:	480e      	ldr	r0, [pc, #56]	; (8008380 <Detect_CAN_Xchange_Failure+0xd0>)
 8008348:	f01c fa1e 	bl	8024788 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 800834c:	f240 1019 	movw	r0, #281	; 0x119
 8008350:	f007 fd9a 	bl	800fe88 <TransmitCanPkt>
		}
	}
}
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000108 	.word	0x20000108
 800835c:	08026104 	.word	0x08026104
 8008360:	20000305 	.word	0x20000305
 8008364:	20000e58 	.word	0x20000e58
 8008368:	20000304 	.word	0x20000304
 800836c:	200020a8 	.word	0x200020a8
 8008370:	10624dd3 	.word	0x10624dd3
 8008374:	08026ff4 	.word	0x08026ff4
 8008378:	08027024 	.word	0x08027024
 800837c:	20001794 	.word	0x20001794
 8008380:	20001114 	.word	0x20001114

08008384 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b0ae      	sub	sp, #184	; 0xb8
 8008388:	af00      	add	r7, sp, #0

#ifdef EI_1

	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 800838a:	2300      	movs	r3, #0
 800838c:	607b      	str	r3, [r7, #4]
 800838e:	f107 0308 	add.w	r3, r7, #8
 8008392:	22a6      	movs	r2, #166	; 0xa6
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f01c f9f6 	bl	8024788 <memset>
	uint16_t Serial_Byte = RESET;
 800839c:	2300      	movs	r3, #0
 800839e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 80083a2:	4bbe      	ldr	r3, [pc, #760]	; (800869c <Process_Send_Signals_2_MIE+0x318>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f006 ffba 	bl	800f320 <HAL_Elaps_Ticks>
 80083ac:	4602      	mov	r2, r0
 80083ae:	4bbc      	ldr	r3, [pc, #752]	; (80086a0 <Process_Send_Signals_2_MIE+0x31c>)
 80083b0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80083b4:	429a      	cmp	r2, r3
 80083b6:	f240 8268 	bls.w	800888a <Process_Send_Signals_2_MIE+0x506>
	{
		uint8_t Traverser = RESET;
 80083ba:	2300      	movs	r3, #0
 80083bc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = RESET;
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80083cc:	e0c2      	b.n	8008554 <Process_Send_Signals_2_MIE+0x1d0>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 80083ce:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80083d2:	4ab4      	ldr	r2, [pc, #720]	; (80086a4 <Process_Send_Signals_2_MIE+0x320>)
 80083d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d11d      	bne.n	8008418 <Process_Send_Signals_2_MIE+0x94>
 80083dc:	49b2      	ldr	r1, [pc, #712]	; (80086a8 <Process_Send_Signals_2_MIE+0x324>)
 80083de:	48b3      	ldr	r0, [pc, #716]	; (80086ac <Process_Send_Signals_2_MIE+0x328>)
 80083e0:	f7f7 ff2e 	bl	8000240 <strcmp>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d016      	beq.n	8008418 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80083ea:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80083ee:	4aac      	ldr	r2, [pc, #688]	; (80086a0 <Process_Send_Signals_2_MIE+0x31c>)
 80083f0:	3366      	adds	r3, #102	; 0x66
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4619      	mov	r1, r3
 80083fa:	48ad      	ldr	r0, [pc, #692]	; (80086b0 <Process_Send_Signals_2_MIE+0x32c>)
 80083fc:	f01c faac 	bl	8024958 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008400:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	4aab      	ldr	r2, [pc, #684]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 8008408:	4413      	add	r3, r2
 800840a:	3302      	adds	r3, #2
 800840c:	2210      	movs	r2, #16
 800840e:	2100      	movs	r1, #0
 8008410:	4618      	mov	r0, r3
 8008412:	f01c f9b9 	bl	8024788 <memset>
				continue;
 8008416:	e098      	b.n	800854a <Process_Send_Signals_2_MIE+0x1c6>
			}
			Choice = RESET;
 8008418:	2300      	movs	r3, #0
 800841a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 800841e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008422:	4aa5      	ldr	r2, [pc, #660]	; (80086b8 <Process_Send_Signals_2_MIE+0x334>)
 8008424:	5cd3      	ldrb	r3, [r2, r3]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d106      	bne.n	8008438 <Process_Send_Signals_2_MIE+0xb4>
 800842a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008436:	e005      	b.n	8008444 <Process_Send_Signals_2_MIE+0xc0>
 8008438:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800843c:	f023 0301 	bic.w	r3, r3, #1
 8008440:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(SelfLinkFlag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008444:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008448:	4a9c      	ldr	r2, [pc, #624]	; (80086bc <Process_Send_Signals_2_MIE+0x338>)
 800844a:	5cd3      	ldrb	r3, [r2, r3]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d106      	bne.n	800845e <Process_Send_Signals_2_MIE+0xda>
 8008450:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008454:	f043 0302 	orr.w	r3, r3, #2
 8008458:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800845c:	e005      	b.n	800846a <Process_Send_Signals_2_MIE+0xe6>
 800845e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008462:	f023 0302 	bic.w	r3, r3, #2
 8008466:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			printf("Choice:%02X|%lu\n",Choice,EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800846a:	f897 10b4 	ldrb.w	r1, [r7, #180]	; 0xb4
 800846e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008472:	4a8b      	ldr	r2, [pc, #556]	; (80086a0 <Process_Send_Signals_2_MIE+0x31c>)
 8008474:	3366      	adds	r3, #102	; 0x66
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	461a      	mov	r2, r3
 800847e:	4890      	ldr	r0, [pc, #576]	; (80086c0 <Process_Send_Signals_2_MIE+0x33c>)
 8008480:	f01c fa6a 	bl	8024958 <iprintf>

			switch(Choice)
 8008484:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008488:	2b03      	cmp	r3, #3
 800848a:	d853      	bhi.n	8008534 <Process_Send_Signals_2_MIE+0x1b0>
 800848c:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <Process_Send_Signals_2_MIE+0x110>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084e5 	.word	0x080084e5
 80084a0:	0800850d 	.word	0x0800850d
			{
			case BOTHCARD_LINK_NOK:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 80084a4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	4a82      	ldr	r2, [pc, #520]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 80084ac:	4413      	add	r3, r2
 80084ae:	3302      	adds	r3, #2
 80084b0:	2210      	movs	r2, #16
 80084b2:	2100      	movs	r1, #0
 80084b4:	4618      	mov	r0, r3
 80084b6:	f01c f967 	bl	8024788 <memset>
				break;
 80084ba:	e046      	b.n	800854a <Process_Send_Signals_2_MIE+0x1c6>

			case OTHERCARD_LINK_OK:
				/*printf("\nOtherCard SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80084bc:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	4a7c      	ldr	r2, [pc, #496]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 80084c4:	4413      	add	r3, r2
 80084c6:	1c98      	adds	r0, r3, #2
 80084c8:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4a7b      	ldr	r2, [pc, #492]	; (80086c4 <Process_Send_Signals_2_MIE+0x340>)
 80084d6:	4413      	add	r3, r2
 80084d8:	3301      	adds	r3, #1
 80084da:	2210      	movs	r2, #16
 80084dc:	4619      	mov	r1, r3
 80084de:	f01c f92b 	bl	8024738 <memcpy>
				break;
 80084e2:	e032      	b.n	800854a <Process_Send_Signals_2_MIE+0x1c6>
			case THISCARD_LINK_OK:
				/*printf("\nOnly This Card SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80084e4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	4a72      	ldr	r2, [pc, #456]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 80084ec:	4413      	add	r3, r2
 80084ee:	1c98      	adds	r0, r3, #2
 80084f0:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4a72      	ldr	r2, [pc, #456]	; (80086c8 <Process_Send_Signals_2_MIE+0x344>)
 80084fe:	4413      	add	r3, r2
 8008500:	3301      	adds	r3, #1
 8008502:	2210      	movs	r2, #16
 8008504:	4619      	mov	r1, r3
 8008506:	f01c f917 	bl	8024738 <memcpy>
				break;
 800850a:	e01e      	b.n	800854a <Process_Send_Signals_2_MIE+0x1c6>
			case BOTHCARD_LINK_OK:
				/*printf("\nBothCard SET3\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 800850c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	4a68      	ldr	r2, [pc, #416]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 8008514:	4413      	add	r3, r2
 8008516:	1c98      	adds	r0, r3, #2
 8008518:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4a68      	ldr	r2, [pc, #416]	; (80086c8 <Process_Send_Signals_2_MIE+0x344>)
 8008526:	4413      	add	r3, r2
 8008528:	3301      	adds	r3, #1
 800852a:	2210      	movs	r2, #16
 800852c:	4619      	mov	r1, r3
 800852e:	f01c f903 	bl	8024738 <memcpy>
				break;
 8008532:	e00a      	b.n	800854a <Process_Send_Signals_2_MIE+0x1c6>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008534:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	4a5e      	ldr	r2, [pc, #376]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 800853c:	4413      	add	r3, r2
 800853e:	3302      	adds	r3, #2
 8008540:	2210      	movs	r2, #16
 8008542:	2100      	movs	r1, #0
 8008544:	4618      	mov	r0, r3
 8008546:	f01c f91f 	bl	8024788 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800854a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800854e:	3301      	adds	r3, #1
 8008550:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008554:	4b52      	ldr	r3, [pc, #328]	; (80086a0 <Process_Send_Signals_2_MIE+0x31c>)
 8008556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800855a:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 800855e:	429a      	cmp	r2, r3
 8008560:	f4ff af35 	bcc.w	80083ce <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008564:	4950      	ldr	r1, [pc, #320]	; (80086a8 <Process_Send_Signals_2_MIE+0x324>)
 8008566:	4851      	ldr	r0, [pc, #324]	; (80086ac <Process_Send_Signals_2_MIE+0x328>)
 8008568:	f7f7 fe6a 	bl	8000240 <strcmp>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <Process_Send_Signals_2_MIE+0x1f4>
		{
			Is_CAN_Exchange_happening = YES;
 8008572:	4b56      	ldr	r3, [pc, #344]	; (80086cc <Process_Send_Signals_2_MIE+0x348>)
 8008574:	2201      	movs	r2, #1
 8008576:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008578:	4b54      	ldr	r3, [pc, #336]	; (80086cc <Process_Send_Signals_2_MIE+0x348>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10a      	bne.n	8008596 <Process_Send_Signals_2_MIE+0x212>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008580:	4853      	ldr	r0, [pc, #332]	; (80086d0 <Process_Send_Signals_2_MIE+0x34c>)
 8008582:	f01c fa85 	bl	8024a90 <puts>
			printf("Sending Blank Relay statuses\n");
 8008586:	4853      	ldr	r0, [pc, #332]	; (80086d4 <Process_Send_Signals_2_MIE+0x350>)
 8008588:	f01c fa82 	bl	8024a90 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 800858c:	22a2      	movs	r2, #162	; 0xa2
 800858e:	2100      	movs	r1, #0
 8008590:	4848      	ldr	r0, [pc, #288]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 8008592:	f01c f8f9 	bl	8024788 <memset>
		}


		if(Debug_flag == 1)
 8008596:	4b50      	ldr	r3, [pc, #320]	; (80086d8 <Process_Send_Signals_2_MIE+0x354>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d133      	bne.n	8008606 <Process_Send_Signals_2_MIE+0x282>
		{
			Get_time();
 800859e:	f003 fa45 	bl	800ba2c <Get_time>
			//		printf("\n_________________________________________\n");
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 80085a2:	4b4e      	ldr	r3, [pc, #312]	; (80086dc <Process_Send_Signals_2_MIE+0x358>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4b4c      	ldr	r3, [pc, #304]	; (80086dc <Process_Send_Signals_2_MIE+0x358>)
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	461a      	mov	r2, r3
 80085ae:	4b4b      	ldr	r3, [pc, #300]	; (80086dc <Process_Send_Signals_2_MIE+0x358>)
 80085b0:	789b      	ldrb	r3, [r3, #2]
 80085b2:	484b      	ldr	r0, [pc, #300]	; (80086e0 <Process_Send_Signals_2_MIE+0x35c>)
 80085b4:	f01c f9d0 	bl	8024958 <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80085b8:	2300      	movs	r3, #0
 80085ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80085be:	e017      	b.n	80085f0 <Process_Send_Signals_2_MIE+0x26c>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 80085c0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80085c4:	4a3b      	ldr	r2, [pc, #236]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 80085c6:	4413      	add	r3, r2
 80085c8:	789b      	ldrb	r3, [r3, #2]
 80085ca:	4619      	mov	r1, r3
 80085cc:	4845      	ldr	r0, [pc, #276]	; (80086e4 <Process_Send_Signals_2_MIE+0x360>)
 80085ce:	f01c f9c3 	bl	8024958 <iprintf>
				if(((Byte+1)%16)==0)
 80085d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80085d6:	3301      	adds	r3, #1
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <Process_Send_Signals_2_MIE+0x262>
				{
					printf("\n");
 80085e0:	200a      	movs	r0, #10
 80085e2:	f01c f9d1 	bl	8024988 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80085e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80085ea:	3301      	adds	r3, #1
 80085ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80085f0:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80085f4:	4b2a      	ldr	r3, [pc, #168]	; (80086a0 <Process_Send_Signals_2_MIE+0x31c>)
 80085f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	429a      	cmp	r2, r3
 80085fe:	dbdf      	blt.n	80085c0 <Process_Send_Signals_2_MIE+0x23c>
				}
			}
			printf("\n");
 8008600:	200a      	movs	r0, #10
 8008602:	f01c f9c1 	bl	8024988 <putchar>
		}

#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif
		TransmitCanPkt(EI_PROCESS_DATA);
 8008606:	f240 1019 	movw	r0, #281	; 0x119
 800860a:	f007 fc3d 	bl	800fe88 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800860e:	4926      	ldr	r1, [pc, #152]	; (80086a8 <Process_Send_Signals_2_MIE+0x324>)
 8008610:	4826      	ldr	r0, [pc, #152]	; (80086ac <Process_Send_Signals_2_MIE+0x328>)
 8008612:	f7f7 fe15 	bl	8000240 <strcmp>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	f040 8131 	bne.w	8008880 <Process_Send_Signals_2_MIE+0x4fc>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 800861e:	4b32      	ldr	r3, [pc, #200]	; (80086e8 <Process_Send_Signals_2_MIE+0x364>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f006 fe7c 	bl	800f320 <HAL_Elaps_Ticks>
 8008628:	4603      	mov	r3, r0
 800862a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800862e:	f0c0 80a9 	bcc.w	8008784 <Process_Send_Signals_2_MIE+0x400>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008632:	4a2e      	ldr	r2, [pc, #184]	; (80086ec <Process_Send_Signals_2_MIE+0x368>)
 8008634:	4b1f      	ldr	r3, [pc, #124]	; (80086b4 <Process_Send_Signals_2_MIE+0x330>)
 8008636:	4610      	mov	r0, r2
 8008638:	3302      	adds	r3, #2
 800863a:	22a0      	movs	r2, #160	; 0xa0
 800863c:	4619      	mov	r1, r3
 800863e:	f01c f87b 	bl	8024738 <memcpy>
				Serial_Byte = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008648:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008652:	33b8      	adds	r3, #184	; 0xb8
 8008654:	443b      	add	r3, r7
 8008656:	227e      	movs	r2, #126	; 0x7e
 8008658:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800865c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008666:	33b8      	adds	r3, #184	; 0xb8
 8008668:	443b      	add	r3, r7
 800866a:	227e      	movs	r2, #126	; 0x7e
 800866c:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008670:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800867a:	33b8      	adds	r3, #184	; 0xb8
 800867c:	443b      	add	r3, r7
 800867e:	227e      	movs	r2, #126	; 0x7e
 8008680:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008684:	4b14      	ldr	r3, [pc, #80]	; (80086d8 <Process_Send_Signals_2_MIE+0x354>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d102      	bne.n	8008692 <Process_Send_Signals_2_MIE+0x30e>
				{
					printf("Sending Signals over Ethernet:\n");
 800868c:	4818      	ldr	r0, [pc, #96]	; (80086f0 <Process_Send_Signals_2_MIE+0x36c>)
 800868e:	f01c f9ff 	bl	8024a90 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008692:	2300      	movs	r3, #0
 8008694:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008698:	e041      	b.n	800871e <Process_Send_Signals_2_MIE+0x39a>
 800869a:	bf00      	nop
 800869c:	20000e88 	.word	0x20000e88
 80086a0:	20000304 	.word	0x20000304
 80086a4:	20000ef4 	.word	0x20000ef4
 80086a8:	08026104 	.word	0x08026104
 80086ac:	20000305 	.word	0x20000305
 80086b0:	08027048 	.word	0x08027048
 80086b4:	20001114 	.word	0x20001114
 80086b8:	20000fa0 	.word	0x20000fa0
 80086bc:	20000f94 	.word	0x20000f94
 80086c0:	0802705c 	.word	0x0802705c
 80086c4:	20001f78 	.word	0x20001f78
 80086c8:	20001eb0 	.word	0x20001eb0
 80086cc:	20000108 	.word	0x20000108
 80086d0:	08027070 	.word	0x08027070
 80086d4:	08027094 	.word	0x08027094
 80086d8:	2000065d 	.word	0x2000065d
 80086dc:	200028dc 	.word	0x200028dc
 80086e0:	080270b4 	.word	0x080270b4
 80086e4:	080270dc 	.word	0x080270dc
 80086e8:	200020ac 	.word	0x200020ac
 80086ec:	200020b0 	.word	0x200020b0
 80086f0:	080270e4 	.word	0x080270e4
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80086f4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80086f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086fc:	1c59      	adds	r1, r3, #1
 80086fe:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008702:	4619      	mov	r1, r3
 8008704:	4b63      	ldr	r3, [pc, #396]	; (8008894 <Process_Send_Signals_2_MIE+0x510>)
 8008706:	4413      	add	r3, r2
 8008708:	789a      	ldrb	r2, [r3, #2]
 800870a:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 800870e:	443b      	add	r3, r7
 8008710:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008714:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008718:	3301      	adds	r3, #1
 800871a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800871e:	4b5d      	ldr	r3, [pc, #372]	; (8008894 <Process_Send_Signals_2_MIE+0x510>)
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008726:	429a      	cmp	r2, r3
 8008728:	d3e4      	bcc.n	80086f4 <Process_Send_Signals_2_MIE+0x370>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800872a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008734:	33b8      	adds	r3, #184	; 0xb8
 8008736:	443b      	add	r3, r7
 8008738:	227f      	movs	r2, #127	; 0x7f
 800873a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800873e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008748:	33b8      	adds	r3, #184	; 0xb8
 800874a:	443b      	add	r3, r7
 800874c:	227f      	movs	r2, #127	; 0x7f
 800874e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008752:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800875c:	33b8      	adds	r3, #184	; 0xb8
 800875e:	443b      	add	r3, r7
 8008760:	227f      	movs	r2, #127	; 0x7f
 8008762:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008766:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800876a:	b2d9      	uxtb	r1, r3
 800876c:	4a4a      	ldr	r2, [pc, #296]	; (8008898 <Process_Send_Signals_2_MIE+0x514>)
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	6812      	ldr	r2, [r2, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	f007 f9c6 	bl	800fb04 <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 8008778:	f00f f8e4 	bl	8017944 <HAL_GetTick>
 800877c:	4603      	mov	r3, r0
 800877e:	4a47      	ldr	r2, [pc, #284]	; (800889c <Process_Send_Signals_2_MIE+0x518>)
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	e07d      	b.n	8008880 <Process_Send_Signals_2_MIE+0x4fc>
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 8008784:	22a0      	movs	r2, #160	; 0xa0
 8008786:	4946      	ldr	r1, [pc, #280]	; (80088a0 <Process_Send_Signals_2_MIE+0x51c>)
 8008788:	4846      	ldr	r0, [pc, #280]	; (80088a4 <Process_Send_Signals_2_MIE+0x520>)
 800878a:	f01b ffc5 	bl	8024718 <memcmp>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d075      	beq.n	8008880 <Process_Send_Signals_2_MIE+0x4fc>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008794:	4a43      	ldr	r2, [pc, #268]	; (80088a4 <Process_Send_Signals_2_MIE+0x520>)
 8008796:	4b3f      	ldr	r3, [pc, #252]	; (8008894 <Process_Send_Signals_2_MIE+0x510>)
 8008798:	4610      	mov	r0, r2
 800879a:	3302      	adds	r3, #2
 800879c:	22a0      	movs	r2, #160	; 0xa0
 800879e:	4619      	mov	r1, r3
 80087a0:	f01b ffca 	bl	8024738 <memcpy>
				Serial_Byte = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80087aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80087b4:	33b8      	adds	r3, #184	; 0xb8
 80087b6:	443b      	add	r3, r7
 80087b8:	227e      	movs	r2, #126	; 0x7e
 80087ba:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80087be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80087c8:	33b8      	adds	r3, #184	; 0xb8
 80087ca:	443b      	add	r3, r7
 80087cc:	227e      	movs	r2, #126	; 0x7e
 80087ce:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80087d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80087dc:	33b8      	adds	r3, #184	; 0xb8
 80087de:	443b      	add	r3, r7
 80087e0:	227e      	movs	r2, #126	; 0x7e
 80087e2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 80087e6:	4b30      	ldr	r3, [pc, #192]	; (80088a8 <Process_Send_Signals_2_MIE+0x524>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d102      	bne.n	80087f4 <Process_Send_Signals_2_MIE+0x470>
				{
					printf("Sending Signals over Ethernet:\n");
 80087ee:	482f      	ldr	r0, [pc, #188]	; (80088ac <Process_Send_Signals_2_MIE+0x528>)
 80087f0:	f01c f94e 	bl	8024a90 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80087fa:	e014      	b.n	8008826 <Process_Send_Signals_2_MIE+0x4a2>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80087fc:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008800:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008804:	1c59      	adds	r1, r3, #1
 8008806:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 800880a:	4619      	mov	r1, r3
 800880c:	4b21      	ldr	r3, [pc, #132]	; (8008894 <Process_Send_Signals_2_MIE+0x510>)
 800880e:	4413      	add	r3, r2
 8008810:	789a      	ldrb	r2, [r3, #2]
 8008812:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008816:	443b      	add	r3, r7
 8008818:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 800881c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8008820:	3301      	adds	r3, #1
 8008822:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008826:	4b1b      	ldr	r3, [pc, #108]	; (8008894 <Process_Send_Signals_2_MIE+0x510>)
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800882e:	429a      	cmp	r2, r3
 8008830:	d3e4      	bcc.n	80087fc <Process_Send_Signals_2_MIE+0x478>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008832:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800883c:	33b8      	adds	r3, #184	; 0xb8
 800883e:	443b      	add	r3, r7
 8008840:	227f      	movs	r2, #127	; 0x7f
 8008842:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008846:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008850:	33b8      	adds	r3, #184	; 0xb8
 8008852:	443b      	add	r3, r7
 8008854:	227f      	movs	r2, #127	; 0x7f
 8008856:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800885a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008864:	33b8      	adds	r3, #184	; 0xb8
 8008866:	443b      	add	r3, r7
 8008868:	227f      	movs	r2, #127	; 0x7f
 800886a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 800886e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008872:	b2d9      	uxtb	r1, r3
 8008874:	4a08      	ldr	r2, [pc, #32]	; (8008898 <Process_Send_Signals_2_MIE+0x514>)
 8008876:	1d3b      	adds	r3, r7, #4
 8008878:	6812      	ldr	r2, [r2, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f007 f942 	bl	800fb04 <Udp_Send_SigInfo>
#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008880:	f00f f860 	bl	8017944 <HAL_GetTick>
 8008884:	4603      	mov	r3, r0
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <Process_Send_Signals_2_MIE+0x52c>)
 8008888:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 800888a:	bf00      	nop
 800888c:	37b8      	adds	r7, #184	; 0xb8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20001114 	.word	0x20001114
 8008898:	20001088 	.word	0x20001088
 800889c:	200020ac 	.word	0x200020ac
 80088a0:	20001116 	.word	0x20001116
 80088a4:	200020b0 	.word	0x200020b0
 80088a8:	2000065d 	.word	0x2000065d
 80088ac:	080270e4 	.word	0x080270e4
 80088b0:	20000e88 	.word	0x20000e88

080088b4 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 80088b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80088ba:	af04      	add	r7, sp, #16
 80088bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80088c0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80088c4:	6018      	str	r0, [r3, #0]
 80088c6:	4608      	mov	r0, r1
 80088c8:	4611      	mov	r1, r2
 80088ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80088ce:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80088d2:	4602      	mov	r2, r0
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80088da:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80088de:	460a      	mov	r2, r1
 80088e0:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 80088e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80088e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	3304      	adds	r3, #4
 80088f0:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f01b ff46 	bl	8024788 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 8008902:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008906:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <Print_EI_DATA+0x64>
 8008910:	48a8      	ldr	r0, [pc, #672]	; (8008bb4 <Print_EI_DATA+0x300>)
 8008912:	f000 f975 	bl	8008c00 <Display>
 8008916:	e002      	b.n	800891e <Print_EI_DATA+0x6a>
 8008918:	48a7      	ldr	r0, [pc, #668]	; (8008bb8 <Print_EI_DATA+0x304>)
 800891a:	f000 f971 	bl	8008c00 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 800891e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008922:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	461a      	mov	r2, r3
 800892c:	2110      	movs	r1, #16
 800892e:	2000      	movs	r0, #0
 8008930:	f7f7 fe70 	bl	8000614 <ExtractBits>
 8008934:	4602      	mov	r2, r0
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	49a0      	ldr	r1, [pc, #640]	; (8008bbc <Print_EI_DATA+0x308>)
 800893c:	4618      	mov	r0, r3
 800893e:	f01c f9c3 	bl	8024cc8 <siprintf>
	Display(Print_buff);
 8008942:	f107 030c 	add.w	r3, r7, #12
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f95a 	bl	8008c00 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 800894c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008950:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3303      	adds	r3, #3
 8008958:	461a      	mov	r2, r3
 800895a:	2110      	movs	r1, #16
 800895c:	2000      	movs	r0, #0
 800895e:	f7f7 fe59 	bl	8000614 <ExtractBits>
 8008962:	4602      	mov	r2, r0
 8008964:	f107 030c 	add.w	r3, r7, #12
 8008968:	4995      	ldr	r1, [pc, #596]	; (8008bc0 <Print_EI_DATA+0x30c>)
 800896a:	4618      	mov	r0, r3
 800896c:	f01c f9ac 	bl	8024cc8 <siprintf>
	Display(Print_buff);
 8008970:	f107 030c 	add.w	r3, r7, #12
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f943 	bl	8008c00 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 800897a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800897e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3307      	adds	r3, #7
 8008986:	461a      	mov	r2, r3
 8008988:	2108      	movs	r1, #8
 800898a:	2000      	movs	r0, #0
 800898c:	f7f7 fe42 	bl	8000614 <ExtractBits>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8008996:	488b      	ldr	r0, [pc, #556]	; (8008bc4 <Print_EI_DATA+0x310>)
 8008998:	f000 f932 	bl	8008c00 <Display>
	switch(Msg_type)
 800899c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80089a0:	3b01      	subs	r3, #1
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	d829      	bhi.n	80089fa <Print_EI_DATA+0x146>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <Print_EI_DATA+0xf8>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c5 	.word	0x080089c5
 80089b0:	080089e3 	.word	0x080089e3
 80089b4:	080089fb 	.word	0x080089fb
 80089b8:	080089eb 	.word	0x080089eb
 80089bc:	080089fb 	.word	0x080089fb
 80089c0:	080089f3 	.word	0x080089f3
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 80089c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80089c8:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <Print_EI_DATA+0x126>
 80089d2:	487d      	ldr	r0, [pc, #500]	; (8008bc8 <Print_EI_DATA+0x314>)
 80089d4:	f000 f914 	bl	8008c00 <Display>
		//Display("INIT     ");
		break;
 80089d8:	e012      	b.n	8008a00 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 80089da:	487c      	ldr	r0, [pc, #496]	; (8008bcc <Print_EI_DATA+0x318>)
 80089dc:	f000 f910 	bl	8008c00 <Display>
		break;
 80089e0:	e00e      	b.n	8008a00 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 80089e2:	487b      	ldr	r0, [pc, #492]	; (8008bd0 <Print_EI_DATA+0x31c>)
 80089e4:	f000 f90c 	bl	8008c00 <Display>
		break;
 80089e8:	e00a      	b.n	8008a00 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 80089ea:	487a      	ldr	r0, [pc, #488]	; (8008bd4 <Print_EI_DATA+0x320>)
 80089ec:	f000 f908 	bl	8008c00 <Display>
		break;
 80089f0:	e006      	b.n	8008a00 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80089f2:	4879      	ldr	r0, [pc, #484]	; (8008bd8 <Print_EI_DATA+0x324>)
 80089f4:	f000 f904 	bl	8008c00 <Display>
		break;
 80089f8:	e002      	b.n	8008a00 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80089fa:	4878      	ldr	r0, [pc, #480]	; (8008bdc <Print_EI_DATA+0x328>)
 80089fc:	f000 f900 	bl	8008c00 <Display>
	}
	Display("|");
 8008a00:	4877      	ldr	r0, [pc, #476]	; (8008be0 <Print_EI_DATA+0x32c>)
 8008a02:	f000 f8fd 	bl	8008c00 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 8008a06:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a0a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3305      	adds	r3, #5
 8008a12:	461a      	mov	r2, r3
 8008a14:	2108      	movs	r1, #8
 8008a16:	2000      	movs	r0, #0
 8008a18:	f7f7 fdfc 	bl	8000614 <ExtractBits>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	f107 030c 	add.w	r3, r7, #12
 8008a22:	4970      	ldr	r1, [pc, #448]	; (8008be4 <Print_EI_DATA+0x330>)
 8008a24:	4618      	mov	r0, r3
 8008a26:	f01c f94f 	bl	8024cc8 <siprintf>
	Display(Print_buff);
 8008a2a:	f107 030c 	add.w	r3, r7, #12
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 f8e6 	bl	8008c00 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 8008a34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a38:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3306      	adds	r3, #6
 8008a40:	461a      	mov	r2, r3
 8008a42:	2108      	movs	r1, #8
 8008a44:	2000      	movs	r0, #0
 8008a46:	f7f7 fde5 	bl	8000614 <ExtractBits>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	f107 030c 	add.w	r3, r7, #12
 8008a50:	4965      	ldr	r1, [pc, #404]	; (8008be8 <Print_EI_DATA+0x334>)
 8008a52:	4618      	mov	r0, r3
 8008a54:	f01c f938 	bl	8024cc8 <siprintf>
	Display(Print_buff);
 8008a58:	f107 030c 	add.w	r3, r7, #12
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f8cf 	bl	8008c00 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008a62:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a66:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	461a      	mov	r2, r3
 8008a70:	2110      	movs	r1, #16
 8008a72:	2000      	movs	r0, #0
 8008a74:	f7f7 fdce 	bl	8000614 <ExtractBits>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 8008a7e:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4959      	ldr	r1, [pc, #356]	; (8008bec <Print_EI_DATA+0x338>)
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f01c f91d 	bl	8024cc8 <siprintf>
	Display(Print_buff);
 8008a8e:	f107 030c 	add.w	r3, r7, #12
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f8b4 	bl	8008c00 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008a98:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008a9c:	095b      	lsrs	r3, r3, #5
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d03f      	beq.n	8008b28 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008aa8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008aac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	330a      	adds	r3, #10
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	461d      	mov	r5, r3
 8008ab8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008abc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330b      	adds	r3, #11
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461e      	mov	r6, r3
 8008ac8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008acc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	330c      	adds	r3, #12
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008adc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	330d      	adds	r3, #13
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008aec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330e      	adds	r3, #14
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	461c      	mov	r4, r3
 8008af8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008afc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	330f      	adds	r3, #15
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f107 000c 	add.w	r0, r7, #12
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	9402      	str	r4, [sp, #8]
 8008b0e:	9101      	str	r1, [sp, #4]
 8008b10:	9200      	str	r2, [sp, #0]
 8008b12:	4633      	mov	r3, r6
 8008b14:	462a      	mov	r2, r5
 8008b16:	4936      	ldr	r1, [pc, #216]	; (8008bf0 <Print_EI_DATA+0x33c>)
 8008b18:	f01c f8d6 	bl	8024cc8 <siprintf>
		Display(Print_buff);
 8008b1c:	f107 030c 	add.w	r3, r7, #12
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f86d 	bl	8008c00 <Display>
 8008b26:	e002      	b.n	8008b2e <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 8008b28:	4832      	ldr	r0, [pc, #200]	; (8008bf4 <Print_EI_DATA+0x340>)
 8008b2a:	f000 f869 	bl	8008c00 <Display>
	}
	if(Debug_flag == 1)
 8008b2e:	4b32      	ldr	r3, [pc, #200]	; (8008bf8 <Print_EI_DATA+0x344>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d139      	bne.n	8008baa <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008b3c:	e019      	b.n	8008b72 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 8008b3e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008b42:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008b46:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	f107 030c 	add.w	r3, r7, #12
 8008b56:	4929      	ldr	r1, [pc, #164]	; (8008bfc <Print_EI_DATA+0x348>)
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f01c f8b5 	bl	8024cc8 <siprintf>
			Display(Print_buff);
 8008b5e:	f107 030c 	add.w	r3, r7, #12
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f84c 	bl	8008c00 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008b68:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008b72:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b76:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008b7a:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d3dc      	bcc.n	8008b3e <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008b84:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b88:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008b92:	f107 030c 	add.w	r3, r7, #12
 8008b96:	22f6      	movs	r2, #246	; 0xf6
 8008b98:	4918      	ldr	r1, [pc, #96]	; (8008bfc <Print_EI_DATA+0x348>)
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f01c f894 	bl	8024cc8 <siprintf>
			Display(Print_buff);
 8008ba0:	f107 030c 	add.w	r3, r7, #12
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f82b 	bl	8008c00 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008baa:	bf00      	nop
 8008bac:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb4:	08027104 	.word	0x08027104
 8008bb8:	08027108 	.word	0x08027108
 8008bbc:	0802710c 	.word	0x0802710c
 8008bc0:	08027114 	.word	0x08027114
 8008bc4:	0802711c 	.word	0x0802711c
 8008bc8:	08027120 	.word	0x08027120
 8008bcc:	08027128 	.word	0x08027128
 8008bd0:	08027130 	.word	0x08027130
 8008bd4:	08027134 	.word	0x08027134
 8008bd8:	08027138 	.word	0x08027138
 8008bdc:	0802713c 	.word	0x0802713c
 8008be0:	08027150 	.word	0x08027150
 8008be4:	08027154 	.word	0x08027154
 8008be8:	08027160 	.word	0x08027160
 8008bec:	0802716c 	.word	0x0802716c
 8008bf0:	08027178 	.word	0x08027178
 8008bf4:	0802719c 	.word	0x0802719c
 8008bf8:	2000065d 	.word	0x2000065d
 8008bfc:	080270dc 	.word	0x080270dc

08008c00 <Display>:

void Display(char *Data)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 8008c0c:	e00a      	b.n	8008c24 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	4413      	add	r3, r2
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	4619      	mov	r1, r3
 8008c18:	2000      	movs	r0, #0
 8008c1a:	f00e fc3b 	bl	8017494 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	3301      	adds	r3, #1
 8008c22:	73fb      	strb	r3, [r7, #15]
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1ee      	bne.n	8008c0e <Display+0xe>
	}
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <print_self_Details>:
	}

}

void print_self_Details(void)
{
 8008c3c:	b5b0      	push	{r4, r5, r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008c46:	4890      	ldr	r0, [pc, #576]	; (8008e88 <print_self_Details+0x24c>)
 8008c48:	f01b ff22 	bl	8024a90 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008c4c:	4b8f      	ldr	r3, [pc, #572]	; (8008e8c <print_self_Details+0x250>)
 8008c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c52:	4619      	mov	r1, r3
 8008c54:	488e      	ldr	r0, [pc, #568]	; (8008e90 <print_self_Details+0x254>)
 8008c56:	f01b fe7f 	bl	8024958 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8008c5a:	4b8c      	ldr	r3, [pc, #560]	; (8008e8c <print_self_Details+0x250>)
 8008c5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008c60:	4619      	mov	r1, r3
 8008c62:	488c      	ldr	r0, [pc, #560]	; (8008e94 <print_self_Details+0x258>)
 8008c64:	f01b fe78 	bl	8024958 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008c68:	4b88      	ldr	r3, [pc, #544]	; (8008e8c <print_self_Details+0x250>)
 8008c6a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4889      	ldr	r0, [pc, #548]	; (8008e98 <print_self_Details+0x25c>)
 8008c72:	f01b fe71 	bl	8024958 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8008c76:	4b85      	ldr	r3, [pc, #532]	; (8008e8c <print_self_Details+0x250>)
 8008c78:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4887      	ldr	r0, [pc, #540]	; (8008e9c <print_self_Details+0x260>)
 8008c80:	f01b fe6a 	bl	8024958 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008c84:	4b81      	ldr	r3, [pc, #516]	; (8008e8c <print_self_Details+0x250>)
 8008c86:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4884      	ldr	r0, [pc, #528]	; (8008ea0 <print_self_Details+0x264>)
 8008c8e:	f01b fe63 	bl	8024958 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008c92:	4b7e      	ldr	r3, [pc, #504]	; (8008e8c <print_self_Details+0x250>)
 8008c94:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4882      	ldr	r0, [pc, #520]	; (8008ea4 <print_self_Details+0x268>)
 8008c9c:	f01b fe5c 	bl	8024958 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008ca0:	4b7a      	ldr	r3, [pc, #488]	; (8008e8c <print_self_Details+0x250>)
 8008ca2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4879      	ldr	r0, [pc, #484]	; (8008e90 <print_self_Details+0x254>)
 8008caa:	f01b fe55 	bl	8024958 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008cae:	2300      	movs	r3, #0
 8008cb0:	71fb      	strb	r3, [r7, #7]
 8008cb2:	e03b      	b.n	8008d2c <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008cb4:	79f9      	ldrb	r1, [r7, #7]
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	4a74      	ldr	r2, [pc, #464]	; (8008e8c <print_self_Details+0x250>)
 8008cba:	3312      	adds	r3, #18
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	78db      	ldrb	r3, [r3, #3]
 8008cc2:	461c      	mov	r4, r3
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	4a71      	ldr	r2, [pc, #452]	; (8008e8c <print_self_Details+0x250>)
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008cd0:	461d      	mov	r5, r3
 8008cd2:	79fb      	ldrb	r3, [r7, #7]
 8008cd4:	4a6d      	ldr	r2, [pc, #436]	; (8008e8c <print_self_Details+0x250>)
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008cde:	4618      	mov	r0, r3
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	4a6a      	ldr	r2, [pc, #424]	; (8008e8c <print_self_Details+0x250>)
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	9000      	str	r0, [sp, #0]
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	486c      	ldr	r0, [pc, #432]	; (8008ea8 <print_self_Details+0x26c>)
 8008cf6:	f01b fe2f 	bl	8024958 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 8008cfa:	79f9      	ldrb	r1, [r7, #7]
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	4a63      	ldr	r2, [pc, #396]	; (8008e8c <print_self_Details+0x250>)
 8008d00:	333e      	adds	r3, #62	; 0x3e
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	885b      	ldrh	r3, [r3, #2]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4868      	ldr	r0, [pc, #416]	; (8008eac <print_self_Details+0x270>)
 8008d0c:	f01b fe24 	bl	8024958 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 8008d10:	79f9      	ldrb	r1, [r7, #7]
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	4a5d      	ldr	r2, [pc, #372]	; (8008e8c <print_self_Details+0x250>)
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4863      	ldr	r0, [pc, #396]	; (8008eb0 <print_self_Details+0x274>)
 8008d22:	f01b fe19 	bl	8024958 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	71fb      	strb	r3, [r7, #7]
 8008d2c:	4b57      	ldr	r3, [pc, #348]	; (8008e8c <print_self_Details+0x250>)
 8008d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d32:	79fa      	ldrb	r2, [r7, #7]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d3bd      	bcc.n	8008cb4 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 8008d38:	4b54      	ldr	r3, [pc, #336]	; (8008e8c <print_self_Details+0x250>)
 8008d3a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4b52      	ldr	r3, [pc, #328]	; (8008e8c <print_self_Details+0x250>)
 8008d42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d46:	461a      	mov	r2, r3
 8008d48:	4b50      	ldr	r3, [pc, #320]	; (8008e8c <print_self_Details+0x250>)
 8008d4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d4e:	4618      	mov	r0, r3
 8008d50:	4b4e      	ldr	r3, [pc, #312]	; (8008e8c <print_self_Details+0x250>)
 8008d52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4603      	mov	r3, r0
 8008d5a:	4856      	ldr	r0, [pc, #344]	; (8008eb4 <print_self_Details+0x278>)
 8008d5c:	f01b fdfc 	bl	8024958 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008d60:	4b4a      	ldr	r3, [pc, #296]	; (8008e8c <print_self_Details+0x250>)
 8008d62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d66:	4618      	mov	r0, r3
 8008d68:	4b48      	ldr	r3, [pc, #288]	; (8008e8c <print_self_Details+0x250>)
 8008d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d6e:	461c      	mov	r4, r3
 8008d70:	4b46      	ldr	r3, [pc, #280]	; (8008e8c <print_self_Details+0x250>)
 8008d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d76:	461d      	mov	r5, r3
 8008d78:	4b44      	ldr	r3, [pc, #272]	; (8008e8c <print_self_Details+0x250>)
 8008d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4b42      	ldr	r3, [pc, #264]	; (8008e8c <print_self_Details+0x250>)
 8008d82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d86:	4619      	mov	r1, r3
 8008d88:	4b40      	ldr	r3, [pc, #256]	; (8008e8c <print_self_Details+0x250>)
 8008d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d8e:	9302      	str	r3, [sp, #8]
 8008d90:	9101      	str	r1, [sp, #4]
 8008d92:	9200      	str	r2, [sp, #0]
 8008d94:	462b      	mov	r3, r5
 8008d96:	4622      	mov	r2, r4
 8008d98:	4601      	mov	r1, r0
 8008d9a:	4847      	ldr	r0, [pc, #284]	; (8008eb8 <print_self_Details+0x27c>)
 8008d9c:	f01b fddc 	bl	8024958 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008da0:	4b3a      	ldr	r3, [pc, #232]	; (8008e8c <print_self_Details+0x250>)
 8008da2:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008da6:	4619      	mov	r1, r3
 8008da8:	4844      	ldr	r0, [pc, #272]	; (8008ebc <print_self_Details+0x280>)
 8008daa:	f01b fdd5 	bl	8024958 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008dae:	2300      	movs	r3, #0
 8008db0:	71fb      	strb	r3, [r7, #7]
 8008db2:	e05c      	b.n	8008e6e <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	3301      	adds	r3, #1
 8008db8:	4619      	mov	r1, r3
 8008dba:	4841      	ldr	r0, [pc, #260]	; (8008ec0 <print_self_Details+0x284>)
 8008dbc:	f01b fdcc 	bl	8024958 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	4a32      	ldr	r2, [pc, #200]	; (8008e8c <print_self_Details+0x250>)
 8008dc4:	3366      	adds	r3, #102	; 0x66
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	483d      	ldr	r0, [pc, #244]	; (8008ec4 <print_self_Details+0x288>)
 8008dd0:	f01b fdc2 	bl	8024958 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	4a2d      	ldr	r2, [pc, #180]	; (8008e8c <print_self_Details+0x250>)
 8008dd8:	3370      	adds	r3, #112	; 0x70
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4619      	mov	r1, r3
 8008de2:	4839      	ldr	r0, [pc, #228]	; (8008ec8 <print_self_Details+0x28c>)
 8008de4:	f01b fdb8 	bl	8024958 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	4a28      	ldr	r2, [pc, #160]	; (8008e8c <print_self_Details+0x250>)
 8008dec:	33f4      	adds	r3, #244	; 0xf4
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	889b      	ldrh	r3, [r3, #4]
 8008df4:	4619      	mov	r1, r3
 8008df6:	4835      	ldr	r0, [pc, #212]	; (8008ecc <print_self_Details+0x290>)
 8008df8:	f01b fdae 	bl	8024958 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	4a23      	ldr	r2, [pc, #140]	; (8008e8c <print_self_Details+0x250>)
 8008e00:	4413      	add	r3, r2
 8008e02:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8008e06:	4619      	mov	r1, r3
 8008e08:	4831      	ldr	r0, [pc, #196]	; (8008ed0 <print_self_Details+0x294>)
 8008e0a:	f01b fda5 	bl	8024958 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	4a1e      	ldr	r2, [pc, #120]	; (8008e8c <print_self_Details+0x250>)
 8008e12:	4413      	add	r3, r2
 8008e14:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008e18:	4619      	mov	r1, r3
 8008e1a:	482e      	ldr	r0, [pc, #184]	; (8008ed4 <print_self_Details+0x298>)
 8008e1c:	f01b fd9c 	bl	8024958 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	4a1a      	ldr	r2, [pc, #104]	; (8008e8c <print_self_Details+0x250>)
 8008e24:	4413      	add	r3, r2
 8008e26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	482a      	ldr	r0, [pc, #168]	; (8008ed8 <print_self_Details+0x29c>)
 8008e2e:	f01b fd93 	bl	8024958 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <print_self_Details+0x250>)
 8008e36:	338a      	adds	r3, #138	; 0x8a
 8008e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4827      	ldr	r0, [pc, #156]	; (8008edc <print_self_Details+0x2a0>)
 8008e40:	f01b fd8a 	bl	8024958 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	4a11      	ldr	r2, [pc, #68]	; (8008e8c <print_self_Details+0x250>)
 8008e48:	3394      	adds	r3, #148	; 0x94
 8008e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4823      	ldr	r0, [pc, #140]	; (8008ee0 <print_self_Details+0x2a4>)
 8008e52:	f01b fd81 	bl	8024958 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	4a0c      	ldr	r2, [pc, #48]	; (8008e8c <print_self_Details+0x250>)
 8008e5a:	339e      	adds	r3, #158	; 0x9e
 8008e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e60:	4619      	mov	r1, r3
 8008e62:	4820      	ldr	r0, [pc, #128]	; (8008ee4 <print_self_Details+0x2a8>)
 8008e64:	f01b fd78 	bl	8024958 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	71fb      	strb	r3, [r7, #7]
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <print_self_Details+0x250>)
 8008e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e74:	79fa      	ldrb	r2, [r7, #7]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d39c      	bcc.n	8008db4 <print_self_Details+0x178>

	}

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008e7a:	4803      	ldr	r0, [pc, #12]	; (8008e88 <print_self_Details+0x24c>)
 8008e7c:	f01b fe08 	bl	8024a90 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bdb0      	pop	{r4, r5, r7, pc}
 8008e88:	08027210 	.word	0x08027210
 8008e8c:	20000304 	.word	0x20000304
 8008e90:	08027264 	.word	0x08027264
 8008e94:	08027288 	.word	0x08027288
 8008e98:	080272ac 	.word	0x080272ac
 8008e9c:	080272d8 	.word	0x080272d8
 8008ea0:	08027304 	.word	0x08027304
 8008ea4:	08027330 	.word	0x08027330
 8008ea8:	0802735c 	.word	0x0802735c
 8008eac:	0802737c 	.word	0x0802737c
 8008eb0:	0802738c 	.word	0x0802738c
 8008eb4:	0802739c 	.word	0x0802739c
 8008eb8:	080273b8 	.word	0x080273b8
 8008ebc:	080273e8 	.word	0x080273e8
 8008ec0:	080273fc 	.word	0x080273fc
 8008ec4:	08027410 	.word	0x08027410
 8008ec8:	0802742c 	.word	0x0802742c
 8008ecc:	08027448 	.word	0x08027448
 8008ed0:	08027464 	.word	0x08027464
 8008ed4:	0802747c 	.word	0x0802747c
 8008ed8:	08027490 	.word	0x08027490
 8008edc:	080274a4 	.word	0x080274a4
 8008ee0:	080274c0 	.word	0x080274c0
 8008ee4:	080274dc 	.word	0x080274dc

08008ee8 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	71fb      	strb	r3, [r7, #7]
 8008ef6:	e054      	b.n	8008fa2 <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	4a2f      	ldr	r2, [pc, #188]	; (8008fb8 <Send_Init_After_Timeout+0xd0>)
 8008efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d04b      	beq.n	8008f9c <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	4a2c      	ldr	r2, [pc, #176]	; (8008fb8 <Send_Init_After_Timeout+0xd0>)
 8008f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f006 fa07 	bl	800f320 <HAL_Elaps_Ticks>
 8008f12:	4602      	mov	r2, r0
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	4929      	ldr	r1, [pc, #164]	; (8008fbc <Send_Init_After_Timeout+0xd4>)
 8008f18:	3394      	adds	r3, #148	; 0x94
 8008f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d93c      	bls.n	8008f9c <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	4a26      	ldr	r2, [pc, #152]	; (8008fc0 <Send_Init_After_Timeout+0xd8>)
 8008f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f006 f9f8 	bl	800f320 <HAL_Elaps_Ticks>
 8008f30:	4602      	mov	r2, r0
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	4921      	ldr	r1, [pc, #132]	; (8008fbc <Send_Init_After_Timeout+0xd4>)
 8008f36:	3394      	adds	r3, #148	; 0x94
 8008f38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d92d      	bls.n	8008f9c <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	4a20      	ldr	r2, [pc, #128]	; (8008fc4 <Send_Init_After_Timeout+0xdc>)
 8008f44:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d028      	beq.n	8008f9c <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <Send_Init_After_Timeout+0xe0>)
 8008f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f56:	d921      	bls.n	8008f9c <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	4a17      	ldr	r2, [pc, #92]	; (8008fb8 <Send_Init_After_Timeout+0xd0>)
 8008f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f006 f9dd 	bl	800f320 <HAL_Elaps_Ticks>
 8008f66:	4603      	mov	r3, r0
 8008f68:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <Send_Init_After_Timeout+0xe4>)
 8008f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6e:	099b      	lsrs	r3, r3, #6
 8008f70:	4619      	mov	r1, r3
 8008f72:	4817      	ldr	r0, [pc, #92]	; (8008fd0 <Send_Init_After_Timeout+0xe8>)
 8008f74:	f01b fcf0 	bl	8024958 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	4a16      	ldr	r2, [pc, #88]	; (8008fd4 <Send_Init_After_Timeout+0xec>)
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008f80:	79fa      	ldrb	r2, [r7, #7]
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f9 f9a4 	bl	80022d4 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	4a0d      	ldr	r2, [pc, #52]	; (8008fc4 <Send_Init_After_Timeout+0xdc>)
 8008f90:	2101      	movs	r1, #1
 8008f92:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	4a10      	ldr	r2, [pc, #64]	; (8008fd8 <Send_Init_After_Timeout+0xf0>)
 8008f98:	2101      	movs	r1, #1
 8008f9a:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	71fb      	strb	r3, [r7, #7]
 8008fa2:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <Send_Init_After_Timeout+0xd4>)
 8008fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fa8:	79fa      	ldrb	r2, [r7, #7]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d3a4      	bcc.n	8008ef8 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000fd4 	.word	0x20000fd4
 8008fbc:	20000304 	.word	0x20000304
 8008fc0:	20000eb4 	.word	0x20000eb4
 8008fc4:	200010bc 	.word	0x200010bc
 8008fc8:	200010c8 	.word	0x200010c8
 8008fcc:	10624dd3 	.word	0x10624dd3
 8008fd0:	080274f8 	.word	0x080274f8
 8008fd4:	200010fc 	.word	0x200010fc
 8008fd8:	200010f0 	.word	0x200010f0

08008fdc <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008fe6:	e037      	b.n	8009058 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008fe8:	79fa      	ldrb	r2, [r7, #7]
 8008fea:	4921      	ldr	r1, [pc, #132]	; (8009070 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8008fec:	4613      	mov	r3, r2
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	4413      	add	r3, r2
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	440b      	add	r3, r1
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	781b      	ldrb	r3, [r3, #0]
		if(
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d006      	beq.n	800900c <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	4a1c      	ldr	r2, [pc, #112]	; (8009074 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8009002:	4413      	add	r3, r2
 8009004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009008:	2b02      	cmp	r3, #2
 800900a:	d122      	bne.n	8009052 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	4a1a      	ldr	r2, [pc, #104]	; (8009078 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009010:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8009012:	2b01      	cmp	r3, #1
 8009014:	d11d      	bne.n	8009052 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	4a17      	ldr	r2, [pc, #92]	; (8009078 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800901a:	3302      	adds	r3, #2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	f006 f97c 	bl	800f320 <HAL_Elaps_Ticks>
 8009028:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 800902a:	2b32      	cmp	r3, #50	; 0x32
 800902c:	d911      	bls.n	8009052 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 800902e:	79fa      	ldrb	r2, [r7, #7]
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f7fa ff59 	bl	8003eec <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800903e:	2100      	movs	r1, #0
 8009040:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	4a0c      	ldr	r2, [pc, #48]	; (8009078 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009046:	3302      	adds	r3, #2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	f04f 32ff 	mov.w	r2, #4294967295
 8009050:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	3301      	adds	r3, #1
 8009056:	71fb      	strb	r3, [r7, #7]
 8009058:	4b06      	ldr	r3, [pc, #24]	; (8009074 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800905a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800905e:	79fa      	ldrb	r2, [r7, #7]
 8009060:	429a      	cmp	r2, r3
 8009062:	d3c1      	bcc.n	8008fe8 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = RESET;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	200016a4 	.word	0x200016a4
 8009074:	20000304 	.word	0x20000304
 8009078:	20001cc4 	.word	0x20001cc4

0800907c <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009082:	2300      	movs	r3, #0
 8009084:	71fb      	strb	r3, [r7, #7]
 8009086:	e04e      	b.n	8009126 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	4a2c      	ldr	r2, [pc, #176]	; (800913c <Check_Recv_Status_fail+0xc0>)
 800908c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d045      	beq.n	8009120 <Check_Recv_Status_fail+0xa4>
 8009094:	79fa      	ldrb	r2, [r7, #7]
 8009096:	492a      	ldr	r1, [pc, #168]	; (8009140 <Check_Recv_Status_fail+0xc4>)
 8009098:	4613      	mov	r3, r2
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	4413      	add	r3, r2
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	440b      	add	r3, r1
 80090a2:	3303      	adds	r3, #3
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d03a      	beq.n	8009120 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	4a23      	ldr	r2, [pc, #140]	; (800913c <Check_Recv_Status_fail+0xc0>)
 80090ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f006 f934 	bl	800f320 <HAL_Elaps_Ticks>
 80090b8:	4602      	mov	r2, r0
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	4921      	ldr	r1, [pc, #132]	; (8009144 <Check_Recv_Status_fail+0xc8>)
 80090be:	338a      	adds	r3, #138	; 0x8a
 80090c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d92b      	bls.n	8009120 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	4a1e      	ldr	r2, [pc, #120]	; (8009144 <Check_Recv_Status_fail+0xc8>)
 80090cc:	3366      	adds	r3, #102	; 0x66
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	6859      	ldr	r1, [r3, #4]
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <Check_Recv_Status_fail+0xc8>)
 80090d8:	338a      	adds	r3, #138	; 0x8a
 80090da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090de:	4a1a      	ldr	r2, [pc, #104]	; (8009148 <Check_Recv_Status_fail+0xcc>)
 80090e0:	fba2 2303 	umull	r2, r3, r2, r3
 80090e4:	099b      	lsrs	r3, r3, #6
 80090e6:	461a      	mov	r2, r3
 80090e8:	4818      	ldr	r0, [pc, #96]	; (800914c <Check_Recv_Status_fail+0xd0>)
 80090ea:	f01b fc35 	bl	8024958 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	4a12      	ldr	r2, [pc, #72]	; (800913c <Check_Recv_Status_fail+0xc0>)
 80090f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090f6:	4619      	mov	r1, r3
 80090f8:	4815      	ldr	r0, [pc, #84]	; (8009150 <Check_Recv_Status_fail+0xd4>)
 80090fa:	f01b fc2d 	bl	8024958 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80090fe:	f00e fc21 	bl	8017944 <HAL_GetTick>
 8009102:	4603      	mov	r3, r0
 8009104:	4619      	mov	r1, r3
 8009106:	4813      	ldr	r0, [pc, #76]	; (8009154 <Check_Recv_Status_fail+0xd8>)
 8009108:	f01b fc26 	bl	8024958 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 800910c:	79fa      	ldrb	r2, [r7, #7]
 800910e:	490c      	ldr	r1, [pc, #48]	; (8009140 <Check_Recv_Status_fail+0xc4>)
 8009110:	4613      	mov	r3, r2
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	4413      	add	r3, r2
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	440b      	add	r3, r1
 800911a:	3303      	adds	r3, #3
 800911c:	2200      	movs	r2, #0
 800911e:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	3301      	adds	r3, #1
 8009124:	71fb      	strb	r3, [r7, #7]
 8009126:	4b07      	ldr	r3, [pc, #28]	; (8009144 <Check_Recv_Status_fail+0xc8>)
 8009128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800912c:	79fa      	ldrb	r2, [r7, #7]
 800912e:	429a      	cmp	r2, r3
 8009130:	d3aa      	bcc.n	8009088 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 8009132:	bf00      	nop
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000ffc 	.word	0x20000ffc
 8009140:	200016a4 	.word	0x200016a4
 8009144:	20000304 	.word	0x20000304
 8009148:	10624dd3 	.word	0x10624dd3
 800914c:	08027524 	.word	0x08027524
 8009150:	08027558 	.word	0x08027558
 8009154:	08027588 	.word	0x08027588

08009158 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8009158:	b590      	push	{r4, r7, lr}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 800916a:	2301      	movs	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	4a39      	ldr	r2, [pc, #228]	; (8009258 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8009172:	4413      	add	r3, r2
 8009174:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009178:	2b01      	cmp	r3, #1
 800917a:	d168      	bne.n	800924e <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 800917c:	4b37      	ldr	r3, [pc, #220]	; (800925c <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d164      	bne.n	800924e <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009184:	79fa      	ldrb	r2, [r7, #7]
 8009186:	4936      	ldr	r1, [pc, #216]	; (8009260 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009188:	4613      	mov	r3, r2
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	4413      	add	r3, r2
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	440b      	add	r3, r1
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	4618      	mov	r0, r3
 8009196:	f002 fb4d 	bl	800b834 <bcdToDec>
 800919a:	4603      	mov	r3, r0
 800919c:	461a      	mov	r2, r3
 800919e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80091a2:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80091a6:	79fa      	ldrb	r2, [r7, #7]
 80091a8:	492d      	ldr	r1, [pc, #180]	; (8009260 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80091aa:	4613      	mov	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4413      	add	r3, r2
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	440b      	add	r3, r1
 80091b4:	3301      	adds	r3, #1
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f002 fb3b 	bl	800b834 <bcdToDec>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	4613      	mov	r3, r2
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	1a9b      	subs	r3, r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80091ca:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 80091cc:	79fa      	ldrb	r2, [r7, #7]
 80091ce:	4924      	ldr	r1, [pc, #144]	; (8009260 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80091d0:	4613      	mov	r3, r2
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	4413      	add	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	440b      	add	r3, r1
 80091da:	3302      	adds	r3, #2
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 fb28 	bl	800b834 <bcdToDec>
 80091e4:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80091e6:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 80091e8:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80091ea:	613b      	str	r3, [r7, #16]

		Get_time();
 80091ec:	f002 fc1e 	bl	800ba2c <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80091f0:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80091fa:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 80091fe:	4b19      	ldr	r3, [pc, #100]	; (8009264 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	4619      	mov	r1, r3
 8009204:	460b      	mov	r3, r1
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	1a5b      	subs	r3, r3, r1
 800920a:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 800920c:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 800920e:	4a15      	ldr	r2, [pc, #84]	; (8009264 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8009210:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8009212:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8009214:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8009216:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	bfb8      	it	lt
 8009222:	425b      	neglt	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	dd12      	ble.n	800924e <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8009232:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	4a07      	ldr	r2, [pc, #28]	; (8009258 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 800923a:	3366      	adds	r3, #102	; 0x66
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	461a      	mov	r2, r3
 8009244:	4808      	ldr	r0, [pc, #32]	; (8009268 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8009246:	f01b fb87 	bl	8024958 <iprintf>
			Return_Value  = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	bd90      	pop	{r4, r7, pc}
 8009258:	20000304 	.word	0x20000304
 800925c:	20000e84 	.word	0x20000e84
 8009260:	200011b8 	.word	0x200011b8
 8009264:	200028dc 	.word	0x200028dc
 8009268:	08027594 	.word	0x08027594

0800926c <Check_All_Peers>:

void Check_All_Peers(void)
{
 800926c:	b590      	push	{r4, r7, lr}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009272:	2300      	movs	r3, #0
 8009274:	71fb      	strb	r3, [r7, #7]
 8009276:	e045      	b.n	8009304 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fd80 	bl	8007d80 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8009280:	79fa      	ldrb	r2, [r7, #7]
 8009282:	4926      	ldr	r1, [pc, #152]	; (800931c <Check_All_Peers+0xb0>)
 8009284:	4613      	mov	r3, r2
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	3304      	adds	r3, #4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f006 f844 	bl	800f320 <HAL_Elaps_Ticks>
 8009298:	4602      	mov	r2, r0
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	4920      	ldr	r1, [pc, #128]	; (8009320 <Check_All_Peers+0xb4>)
 800929e:	338a      	adds	r3, #138	; 0x8a
 80092a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d92a      	bls.n	80092fe <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 80092a8:	79fa      	ldrb	r2, [r7, #7]
 80092aa:	491c      	ldr	r1, [pc, #112]	; (800931c <Check_All_Peers+0xb0>)
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	440b      	add	r3, r1
 80092b6:	3301      	adds	r3, #1
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d11f      	bne.n	80092fe <Check_All_Peers+0x92>
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	4a18      	ldr	r2, [pc, #96]	; (8009324 <Check_All_Peers+0xb8>)
 80092c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092c6:	79fa      	ldrb	r2, [r7, #7]
 80092c8:	4814      	ldr	r0, [pc, #80]	; (800931c <Check_All_Peers+0xb0>)
 80092ca:	4613      	mov	r3, r2
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4403      	add	r3, r0
 80092d4:	3304      	adds	r3, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4299      	cmp	r1, r3
 80092da:	d010      	beq.n	80092fe <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = RESET;
 80092dc:	79fa      	ldrb	r2, [r7, #7]
 80092de:	490f      	ldr	r1, [pc, #60]	; (800931c <Check_All_Peers+0xb0>)
 80092e0:	4613      	mov	r3, r2
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	3301      	adds	r3, #1
 80092ec:	2200      	movs	r2, #0
 80092ee:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 80092f0:	79fc      	ldrb	r4, [r7, #7]
 80092f2:	f00e fb27 	bl	8017944 <HAL_GetTick>
 80092f6:	4603      	mov	r3, r0
 80092f8:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <Check_All_Peers+0xb8>)
 80092fa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	3301      	adds	r3, #1
 8009302:	71fb      	strb	r3, [r7, #7]
 8009304:	4b06      	ldr	r3, [pc, #24]	; (8009320 <Check_All_Peers+0xb4>)
 8009306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800930a:	79fa      	ldrb	r2, [r7, #7]
 800930c:	429a      	cmp	r2, r3
 800930e:	d3b3      	bcc.n	8009278 <Check_All_Peers+0xc>
			}
		}
	}
}
 8009310:	bf00      	nop
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	bd90      	pop	{r4, r7, pc}
 800931a:	bf00      	nop
 800931c:	20001cf8 	.word	0x20001cf8
 8009320:	20000304 	.word	0x20000304
 8009324:	20002150 	.word	0x20002150

08009328 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8009328:	b590      	push	{r4, r7, lr}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800932e:	4976      	ldr	r1, [pc, #472]	; (8009508 <Check_for_RelayMisMatch+0x1e0>)
 8009330:	4876      	ldr	r0, [pc, #472]	; (800950c <Check_for_RelayMisMatch+0x1e4>)
 8009332:	f7f6 ff85 	bl	8000240 <strcmp>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80e0 	beq.w	80094fe <Check_for_RelayMisMatch+0x1d6>
	{
		return;
	}

	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 800933e:	2300      	movs	r3, #0
 8009340:	71fb      	strb	r3, [r7, #7]
 8009342:	e0d4      	b.n	80094ee <Check_for_RelayMisMatch+0x1c6>
	{
		if(EI_data.Hitachi_st.Interface_Type[Traverser] == ETHERNET)
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	4a72      	ldr	r2, [pc, #456]	; (8009510 <Check_for_RelayMisMatch+0x1e8>)
 8009348:	4413      	add	r3, r2
 800934a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800934e:	2b01      	cmp	r3, #1
 8009350:	f000 80c7 	beq.w	80094e2 <Check_for_RelayMisMatch+0x1ba>
		{
			continue;
		}

		if((HAL_Elaps_Ticks(Check_Clk[Traverser]) < FIVE_SEC ) || (MisMatchFlag[Traverser] == SET))
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	4a6f      	ldr	r2, [pc, #444]	; (8009514 <Check_for_RelayMisMatch+0x1ec>)
 8009358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800935c:	4618      	mov	r0, r3
 800935e:	f005 ffdf 	bl	800f320 <HAL_Elaps_Ticks>
 8009362:	4603      	mov	r3, r0
 8009364:	f241 3287 	movw	r2, #4999	; 0x1387
 8009368:	4293      	cmp	r3, r2
 800936a:	d906      	bls.n	800937a <Check_for_RelayMisMatch+0x52>
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	4a6a      	ldr	r2, [pc, #424]	; (8009518 <Check_for_RelayMisMatch+0x1f0>)
 8009370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009374:	2b01      	cmp	r3, #1
 8009376:	f040 80ac 	bne.w	80094d2 <Check_for_RelayMisMatch+0x1aa>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (SelfLinkFlag[Traverser] == RESET))
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	4a67      	ldr	r2, [pc, #412]	; (800951c <Check_for_RelayMisMatch+0x1f4>)
 800937e:	5cd3      	ldrb	r3, [r2, r3]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d116      	bne.n	80093b2 <Check_for_RelayMisMatch+0x8a>
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	4a66      	ldr	r2, [pc, #408]	; (8009520 <Check_for_RelayMisMatch+0x1f8>)
 8009388:	5cd3      	ldrb	r3, [r2, r3]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d111      	bne.n	80093b2 <Check_for_RelayMisMatch+0x8a>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 800938e:	79fa      	ldrb	r2, [r7, #7]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4a62      	ldr	r2, [pc, #392]	; (8009524 <Check_for_RelayMisMatch+0x1fc>)
 800939a:	1898      	adds	r0, r3, r2
 800939c:	79fa      	ldrb	r2, [r7, #7]
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4a60      	ldr	r2, [pc, #384]	; (8009528 <Check_for_RelayMisMatch+0x200>)
 80093a8:	4413      	add	r3, r2
 80093aa:	2214      	movs	r2, #20
 80093ac:	4619      	mov	r1, r3
 80093ae:	f01b f9c3 	bl	8024738 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 80093b2:	79fa      	ldrb	r2, [r7, #7]
 80093b4:	495b      	ldr	r1, [pc, #364]	; (8009524 <Check_for_RelayMisMatch+0x1fc>)
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	440b      	add	r3, r1
 80093c0:	3312      	adds	r3, #18
 80093c2:	8819      	ldrh	r1, [r3, #0]
 80093c4:	79fa      	ldrb	r2, [r7, #7]
 80093c6:	4858      	ldr	r0, [pc, #352]	; (8009528 <Check_for_RelayMisMatch+0x200>)
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4403      	add	r3, r0
 80093d2:	3312      	adds	r3, #18
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	4299      	cmp	r1, r3
 80093d8:	d076      	beq.n	80094c8 <Check_for_RelayMisMatch+0x1a0>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	4a53      	ldr	r2, [pc, #332]	; (800952c <Check_for_RelayMisMatch+0x204>)
 80093de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f005 ff9c 	bl	800f320 <HAL_Elaps_Ticks>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093ee:	d37a      	bcc.n	80094e6 <Check_for_RelayMisMatch+0x1be>
				{
					continue;
				}
				else
				{
					MisMatchFlag[Traverser] = SET;
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	4a49      	ldr	r2, [pc, #292]	; (8009518 <Check_for_RelayMisMatch+0x1f0>)
 80093f4:	2101      	movs	r1, #1
 80093f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if( ((Main_Relays_st[Traverser].RelayIPS_CRC == 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC != 0)) || ((Main_Relays_st[Traverser].RelayIPS_CRC != 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC == 0)) )
 80093fa:	79fa      	ldrb	r2, [r7, #7]
 80093fc:	4949      	ldr	r1, [pc, #292]	; (8009524 <Check_for_RelayMisMatch+0x1fc>)
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	3312      	adds	r3, #18
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <Check_for_RelayMisMatch+0xfe>
 8009410:	79fa      	ldrb	r2, [r7, #7]
 8009412:	4945      	ldr	r1, [pc, #276]	; (8009528 <Check_for_RelayMisMatch+0x200>)
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	3312      	adds	r3, #18
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d115      	bne.n	8009452 <Check_for_RelayMisMatch+0x12a>
 8009426:	79fa      	ldrb	r2, [r7, #7]
 8009428:	493e      	ldr	r1, [pc, #248]	; (8009524 <Check_for_RelayMisMatch+0x1fc>)
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	3312      	adds	r3, #18
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00f      	beq.n	800945c <Check_for_RelayMisMatch+0x134>
 800943c:	79fa      	ldrb	r2, [r7, #7]
 800943e:	493a      	ldr	r1, [pc, #232]	; (8009528 <Check_for_RelayMisMatch+0x200>)
 8009440:	4613      	mov	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	440b      	add	r3, r1
 800944a:	3312      	adds	r3, #18
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <Check_for_RelayMisMatch+0x134>
					{
						MisMatchFlag[Traverser] = RESET;
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	4a30      	ldr	r2, [pc, #192]	; (8009518 <Check_for_RelayMisMatch+0x1f0>)
 8009456:	2100      	movs	r1, #0
 8009458:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(MisMatchFlag[Traverser] ==  SET)
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	4a2e      	ldr	r2, [pc, #184]	; (8009518 <Check_for_RelayMisMatch+0x1f0>)
 8009460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d134      	bne.n	80094d2 <Check_for_RelayMisMatch+0x1aa>
					{
						printf("S:%u|O:%u\n",SelfLinkFlag[Traverser],OtherCardLink_Flag[Traverser]);
 8009468:	79fb      	ldrb	r3, [r7, #7]
 800946a:	4a2d      	ldr	r2, [pc, #180]	; (8009520 <Check_for_RelayMisMatch+0x1f8>)
 800946c:	5cd3      	ldrb	r3, [r2, r3]
 800946e:	4619      	mov	r1, r3
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	4a2a      	ldr	r2, [pc, #168]	; (800951c <Check_for_RelayMisMatch+0x1f4>)
 8009474:	5cd3      	ldrb	r3, [r2, r3]
 8009476:	461a      	mov	r2, r3
 8009478:	482d      	ldr	r0, [pc, #180]	; (8009530 <Check_for_RelayMisMatch+0x208>)
 800947a:	f01b fa6d 	bl	8024958 <iprintf>
						printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	4a23      	ldr	r2, [pc, #140]	; (8009510 <Check_for_RelayMisMatch+0x1e8>)
 8009482:	3366      	adds	r3, #102	; 0x66
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	4619      	mov	r1, r3
 800948c:	4829      	ldr	r0, [pc, #164]	; (8009534 <Check_for_RelayMisMatch+0x20c>)
 800948e:	f01b fa63 	bl	8024958 <iprintf>
						printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8009492:	79fa      	ldrb	r2, [r7, #7]
 8009494:	4923      	ldr	r1, [pc, #140]	; (8009524 <Check_for_RelayMisMatch+0x1fc>)
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	3312      	adds	r3, #18
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	4619      	mov	r1, r3
 80094a6:	4824      	ldr	r0, [pc, #144]	; (8009538 <Check_for_RelayMisMatch+0x210>)
 80094a8:	f01b fa56 	bl	8024958 <iprintf>
						printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 80094ac:	79fa      	ldrb	r2, [r7, #7]
 80094ae:	491e      	ldr	r1, [pc, #120]	; (8009528 <Check_for_RelayMisMatch+0x200>)
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	440b      	add	r3, r1
 80094ba:	3312      	adds	r3, #18
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	4619      	mov	r1, r3
 80094c0:	481e      	ldr	r0, [pc, #120]	; (800953c <Check_for_RelayMisMatch+0x214>)
 80094c2:	f01b fa49 	bl	8024958 <iprintf>
 80094c6:	e004      	b.n	80094d2 <Check_for_RelayMisMatch+0x1aa>
					}
				}
			}
			else
			{
				MisMatchFlag[Traverser] = RESET; /* If both Relay CRC is Matching MisMatch will be RESET */
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	4a13      	ldr	r2, [pc, #76]	; (8009518 <Check_for_RelayMisMatch+0x1f0>)
 80094cc:	2100      	movs	r1, #0
 80094ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		Check_Clk[Traverser] = HAL_GetTick();
 80094d2:	79fc      	ldrb	r4, [r7, #7]
 80094d4:	f00e fa36 	bl	8017944 <HAL_GetTick>
 80094d8:	4603      	mov	r3, r0
 80094da:	4a0e      	ldr	r2, [pc, #56]	; (8009514 <Check_for_RelayMisMatch+0x1ec>)
 80094dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80094e0:	e002      	b.n	80094e8 <Check_for_RelayMisMatch+0x1c0>
			continue;
 80094e2:	bf00      	nop
 80094e4:	e000      	b.n	80094e8 <Check_for_RelayMisMatch+0x1c0>
					continue;
 80094e6:	bf00      	nop
	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	3301      	adds	r3, #1
 80094ec:	71fb      	strb	r3, [r7, #7]
 80094ee:	4b08      	ldr	r3, [pc, #32]	; (8009510 <Check_for_RelayMisMatch+0x1e8>)
 80094f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094f4:	79fa      	ldrb	r2, [r7, #7]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	f4ff af24 	bcc.w	8009344 <Check_for_RelayMisMatch+0x1c>
 80094fc:	e000      	b.n	8009500 <Check_for_RelayMisMatch+0x1d8>
		return;
 80094fe:	bf00      	nop
	}
}
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	bd90      	pop	{r4, r7, pc}
 8009506:	bf00      	nop
 8009508:	08026104 	.word	0x08026104
 800950c:	20000305 	.word	0x20000305
 8009510:	20000304 	.word	0x20000304
 8009514:	20002178 	.word	0x20002178
 8009518:	20000ef4 	.word	0x20000ef4
 800951c:	20000fa0 	.word	0x20000fa0
 8009520:	20000f94 	.word	0x20000f94
 8009524:	20001eb0 	.word	0x20001eb0
 8009528:	20001f78 	.word	0x20001f78
 800952c:	20000f08 	.word	0x20000f08
 8009530:	080275d4 	.word	0x080275d4
 8009534:	080275e0 	.word	0x080275e0
 8009538:	080275ec 	.word	0x080275ec
 800953c:	080275fc 	.word	0x080275fc

08009540 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 800954a:	f00e f9fb 	bl	8017944 <HAL_GetTick>
 800954e:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009550:	79fa      	ldrb	r2, [r7, #7]
 8009552:	4935      	ldr	r1, [pc, #212]	; (8009628 <CheckOtherLinkStatus+0xe8>)
 8009554:	4613      	mov	r3, r2
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4413      	add	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	440b      	add	r3, r1
 800955e:	3302      	adds	r3, #2
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d11d      	bne.n	80095a2 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	4930      	ldr	r1, [pc, #192]	; (800962c <CheckOtherLinkStatus+0xec>)
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009570:	79fa      	ldrb	r2, [r7, #7]
 8009572:	492f      	ldr	r1, [pc, #188]	; (8009630 <CheckOtherLinkStatus+0xf0>)
 8009574:	4613      	mov	r3, r2
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	3304      	adds	r3, #4
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009584:	79fa      	ldrb	r2, [r7, #7]
 8009586:	492a      	ldr	r1, [pc, #168]	; (8009630 <CheckOtherLinkStatus+0xf0>)
 8009588:	4613      	mov	r3, r2
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	3301      	adds	r3, #1
 8009594:	2201      	movs	r2, #1
 8009596:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	4a26      	ldr	r2, [pc, #152]	; (8009634 <CheckOtherLinkStatus+0xf4>)
 800959c:	2101      	movs	r1, #1
 800959e:	54d1      	strb	r1, [r2, r3]
 80095a0:	e02e      	b.n	8009600 <CheckOtherLinkStatus+0xc0>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = RESET;
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	4a23      	ldr	r2, [pc, #140]	; (8009634 <CheckOtherLinkStatus+0xf4>)
 80095a6:	2100      	movs	r1, #0
 80095a8:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 80095aa:	79fa      	ldrb	r2, [r7, #7]
 80095ac:	4920      	ldr	r1, [pc, #128]	; (8009630 <CheckOtherLinkStatus+0xf0>)
 80095ae:	4613      	mov	r3, r2
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	440b      	add	r3, r1
 80095b8:	3308      	adds	r3, #8
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = RESET;
 80095be:	79fa      	ldrb	r2, [r7, #7]
 80095c0:	491b      	ldr	r1, [pc, #108]	; (8009630 <CheckOtherLinkStatus+0xf0>)
 80095c2:	4613      	mov	r3, r2
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4413      	add	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	440b      	add	r3, r1
 80095cc:	3301      	adds	r3, #1
 80095ce:	2200      	movs	r2, #0
 80095d0:	701a      	strb	r2, [r3, #0]
		OtherCard_Relays_st[SourceIndex].RelayIPS_CRC = 0;
 80095d2:	79fa      	ldrb	r2, [r7, #7]
 80095d4:	4918      	ldr	r1, [pc, #96]	; (8009638 <CheckOtherLinkStatus+0xf8>)
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	3312      	adds	r3, #18
 80095e2:	2200      	movs	r2, #0
 80095e4:	801a      	strh	r2, [r3, #0]
		memset(&OtherCard_Relays_st[SourceIndex].RelayIPS_Buff,0,sizeof(OtherCard_Relays_st[SourceIndex].RelayIPS_Buff));
 80095e6:	79fa      	ldrb	r2, [r7, #7]
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4a11      	ldr	r2, [pc, #68]	; (8009638 <CheckOtherLinkStatus+0xf8>)
 80095f2:	4413      	add	r3, r2
 80095f4:	3301      	adds	r3, #1
 80095f6:	2210      	movs	r2, #16
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f01b f8c4 	bl	8024788 <memset>
	}

	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8009600:	79fa      	ldrb	r2, [r7, #7]
 8009602:	4909      	ldr	r1, [pc, #36]	; (8009628 <CheckOtherLinkStatus+0xe8>)
 8009604:	4613      	mov	r3, r2
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	4413      	add	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	440b      	add	r3, r1
 800960e:	3301      	adds	r3, #1
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d104      	bne.n	8009620 <CheckOtherLinkStatus+0xe0>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	4908      	ldr	r1, [pc, #32]	; (800963c <CheckOtherLinkStatus+0xfc>)
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20001794 	.word	0x20001794
 800962c:	20000f6c 	.word	0x20000f6c
 8009630:	20001d70 	.word	0x20001d70
 8009634:	20000fa0 	.word	0x20000fa0
 8009638:	20001f78 	.word	0x20001f78
 800963c:	20000eb4 	.word	0x20000eb4

08009640 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009644:	4b1a      	ldr	r3, [pc, #104]	; (80096b0 <SendRelay2_Other+0x70>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f005 fe69 	bl	800f320 <HAL_Elaps_Ticks>
 800964e:	4603      	mov	r3, r0
 8009650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009654:	d92a      	bls.n	80096ac <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009656:	2214      	movs	r2, #20
 8009658:	2100      	movs	r1, #0
 800965a:	4816      	ldr	r0, [pc, #88]	; (80096b4 <SendRelay2_Other+0x74>)
 800965c:	f01b f894 	bl	8024788 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009660:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <SendRelay2_Other+0x78>)
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4a13      	ldr	r2, [pc, #76]	; (80096bc <SendRelay2_Other+0x7c>)
 800966e:	4413      	add	r3, r2
 8009670:	2214      	movs	r2, #20
 8009672:	4619      	mov	r1, r3
 8009674:	480f      	ldr	r0, [pc, #60]	; (80096b4 <SendRelay2_Other+0x74>)
 8009676:	f01b f85f 	bl	8024738 <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800967a:	f240 2007 	movw	r0, #519	; 0x207
 800967e:	f006 fc03 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 8009682:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <SendRelay2_Other+0x78>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	4a0b      	ldr	r2, [pc, #44]	; (80096b8 <SendRelay2_Other+0x78>)
 800968a:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 800968c:	4b0c      	ldr	r3, [pc, #48]	; (80096c0 <SendRelay2_Other+0x80>)
 800968e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009692:	461a      	mov	r2, r3
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <SendRelay2_Other+0x78>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d102      	bne.n	80096a2 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <SendRelay2_Other+0x78>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 80096a2:	f00e f94f 	bl	8017944 <HAL_GetTick>
 80096a6:	4603      	mov	r3, r0
 80096a8:	4a01      	ldr	r2, [pc, #4]	; (80096b0 <SendRelay2_Other+0x70>)
 80096aa:	6013      	str	r3, [r2, #0]
	}
}
 80096ac:	bf00      	nop
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	200021a0 	.word	0x200021a0
 80096b4:	20002040 	.word	0x20002040
 80096b8:	200021a4 	.word	0x200021a4
 80096bc:	20001eb0 	.word	0x20001eb0
 80096c0:	20000304 	.word	0x20000304

080096c4 <Process_HitachiEI>:




void Process_HitachiEI(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 80096c8:	f015 fc2a 	bl	801ef20 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 80096cc:	481a      	ldr	r0, [pc, #104]	; (8009738 <Process_HitachiEI+0x74>)
 80096ce:	f011 fc9f 	bl	801b010 <HAL_IWDG_Refresh>

		Feed_wdt();
 80096d2:	f00a fe63 	bl	801439c <Feed_wdt>

		readCanToStructs();
 80096d6:	f007 f8cd 	bl	8010874 <readCanToStructs>

		Check_for_cmd();
 80096da:	f7f7 fa3d 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 80096de:	f7f7 fc35 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 80096e2:	f7f7 fca1 	bl	8001028 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 80096e6:	f7fe fe4d 	bl	8008384 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 80096ea:	f7fe fd75 	bl	80081d8 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 80096ee:	f7fe fddf 	bl	80082b0 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 80096f2:	f7fe fce1 	bl	80080b8 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 80096f6:	f7ff fdb9 	bl	800926c <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 80096fa:	f7ff fc6f 	bl	8008fdc <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 80096fe:	f7ff fbf3 	bl	8008ee8 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8009702:	f7ff fcbb 	bl	800907c <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009706:	f002 f9f3 	bl	800baf0 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 800970a:	f7ff fe0d 	bl	8009328 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 800970e:	f7ff ff97 	bl	8009640 <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 8009712:	f00d f8d3 	bl	80168bc <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 8009716:	4b09      	ldr	r3, [pc, #36]	; (800973c <Process_HitachiEI+0x78>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 800971e:	4b08      	ldr	r3, [pc, #32]	; (8009740 <Process_HitachiEI+0x7c>)
 8009720:	2203      	movs	r2, #3
 8009722:	701a      	strb	r2, [r3, #0]
			break;
 8009724:	e002      	b.n	800972c <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 8009726:	f00d fefb 	bl	8017520 <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 800972a:	e7cd      	b.n	80096c8 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 800972c:	f00c ffc4 	bl	80166b8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009730:	4801      	ldr	r0, [pc, #4]	; (8009738 <Process_HitachiEI+0x74>)
 8009732:	f011 fc6d 	bl	801b010 <HAL_IWDG_Refresh>
		Data_Processing();
 8009736:	e7f9      	b.n	800972c <Process_HitachiEI+0x68>
 8009738:	20009d64 	.word	0x20009d64
 800973c:	2000065c 	.word	0x2000065c
 8009740:	20000a61 	.word	0x20000a61

08009744 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800974a:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <reset_cause_get+0xa0>)
 800974c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800974e:	2b00      	cmp	r3, #0
 8009750:	da02      	bge.n	8009758 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8009752:	2301      	movs	r3, #1
 8009754:	71fb      	strb	r3, [r7, #7]
 8009756:	e037      	b.n	80097c8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8009758:	4b22      	ldr	r3, [pc, #136]	; (80097e4 <reset_cause_get+0xa0>)
 800975a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8009764:	2302      	movs	r3, #2
 8009766:	71fb      	strb	r3, [r7, #7]
 8009768:	e02e      	b.n	80097c8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800976a:	4b1e      	ldr	r3, [pc, #120]	; (80097e4 <reset_cause_get+0xa0>)
 800976c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8009776:	2303      	movs	r3, #3
 8009778:	71fb      	strb	r3, [r7, #7]
 800977a:	e025      	b.n	80097c8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800977c:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <reset_cause_get+0xa0>)
 800977e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8009788:	2304      	movs	r3, #4
 800978a:	71fb      	strb	r3, [r7, #7]
 800978c:	e01c      	b.n	80097c8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800978e:	4b15      	ldr	r3, [pc, #84]	; (80097e4 <reset_cause_get+0xa0>)
 8009790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800979a:	2305      	movs	r3, #5
 800979c:	71fb      	strb	r3, [r7, #7]
 800979e:	e013      	b.n	80097c8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 80097a0:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <reset_cause_get+0xa0>)
 80097a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 80097ac:	2306      	movs	r3, #6
 80097ae:	71fb      	strb	r3, [r7, #7]
 80097b0:	e00a      	b.n	80097c8 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 80097b2:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <reset_cause_get+0xa0>)
 80097b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 80097be:	2307      	movs	r3, #7
 80097c0:	71fb      	strb	r3, [r7, #7]
 80097c2:	e001      	b.n	80097c8 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 80097c4:	2300      	movs	r3, #0
 80097c6:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80097c8:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <reset_cause_get+0xa0>)
 80097ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097cc:	4a05      	ldr	r2, [pc, #20]	; (80097e4 <reset_cause_get+0xa0>)
 80097ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097d2:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 80097d4:	79fb      	ldrb	r3, [r7, #7]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40023800 	.word	0x40023800

080097e8 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <reset_cause_get_name+0x7c>)
 80097f4:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 80097f6:	79fb      	ldrb	r3, [r7, #7]
 80097f8:	2b07      	cmp	r3, #7
 80097fa:	d82b      	bhi.n	8009854 <reset_cause_get_name+0x6c>
 80097fc:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <reset_cause_get_name+0x1c>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	08009825 	.word	0x08009825
 8009808:	0800982b 	.word	0x0800982b
 800980c:	08009831 	.word	0x08009831
 8009810:	08009837 	.word	0x08009837
 8009814:	0800983d 	.word	0x0800983d
 8009818:	08009843 	.word	0x08009843
 800981c:	08009849 	.word	0x08009849
 8009820:	0800984f 	.word	0x0800984f
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8009824:	4b10      	ldr	r3, [pc, #64]	; (8009868 <reset_cause_get_name+0x80>)
 8009826:	60fb      	str	r3, [r7, #12]
            break;
 8009828:	e014      	b.n	8009854 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800982a:	4b10      	ldr	r3, [pc, #64]	; (800986c <reset_cause_get_name+0x84>)
 800982c:	60fb      	str	r3, [r7, #12]
            break;
 800982e:	e011      	b.n	8009854 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8009830:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <reset_cause_get_name+0x88>)
 8009832:	60fb      	str	r3, [r7, #12]
            break;
 8009834:	e00e      	b.n	8009854 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8009836:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <reset_cause_get_name+0x8c>)
 8009838:	60fb      	str	r3, [r7, #12]
            break;
 800983a:	e00b      	b.n	8009854 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800983c:	4b0e      	ldr	r3, [pc, #56]	; (8009878 <reset_cause_get_name+0x90>)
 800983e:	60fb      	str	r3, [r7, #12]
            break;
 8009840:	e008      	b.n	8009854 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8009842:	4b0e      	ldr	r3, [pc, #56]	; (800987c <reset_cause_get_name+0x94>)
 8009844:	60fb      	str	r3, [r7, #12]
            break;
 8009846:	e005      	b.n	8009854 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8009848:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <reset_cause_get_name+0x98>)
 800984a:	60fb      	str	r3, [r7, #12]
            break;
 800984c:	e002      	b.n	8009854 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <reset_cause_get_name+0x9c>)
 8009850:	60fb      	str	r3, [r7, #12]
            break;
 8009852:	bf00      	nop
    }

    return reset_cause_name;
 8009854:	68fb      	ldr	r3, [r7, #12]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	0802760c 	.word	0x0802760c
 8009868:	08027610 	.word	0x08027610
 800986c:	08027618 	.word	0x08027618
 8009870:	08027628 	.word	0x08027628
 8009874:	08027640 	.word	0x08027640
 8009878:	0802765c 	.word	0x0802765c
 800987c:	0802766c 	.word	0x0802766c
 8009880:	0802769c 	.word	0x0802769c
 8009884:	080276b8 	.word	0x080276b8

08009888 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800988c:	f00d f816 	bl	80168bc <Print_BuildDat_Details>

		readCanToStructs();
 8009890:	f006 fff0 	bl	8010874 <readCanToStructs>

		Feed_wdt();
 8009894:	f00a fd82 	bl	801439c <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 8009898:	480f      	ldr	r0, [pc, #60]	; (80098d8 <Process_Medha_EI+0x50>)
 800989a:	f011 fbb9 	bl	801b010 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800989e:	f000 f91d 	bl	8009adc <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 80098a2:	f000 fed9 	bl	800a658 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 80098a6:	f000 ff3f 	bl	800a728 <Process_Clear_Relays>

		Send_Data_to_Other();
 80098aa:	f001 f823 	bl	800a8f4 <Send_Data_to_Other>

		Process_Data_from_Other();
 80098ae:	f001 f87b 	bl	800a9a8 <Process_Data_from_Other>

		CheckforMedhaCMD();
 80098b2:	f001 fa41 	bl	800ad38 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <Process_Medha_EI+0x54>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 80098be:	4b08      	ldr	r3, [pc, #32]	; (80098e0 <Process_Medha_EI+0x58>)
 80098c0:	2203      	movs	r2, #3
 80098c2:	701a      	strb	r2, [r3, #0]
			break;
 80098c4:	e002      	b.n	80098cc <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 80098c6:	f00d fe2b 	bl	8017520 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 80098ca:	e7df      	b.n	800988c <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80098cc:	4802      	ldr	r0, [pc, #8]	; (80098d8 <Process_Medha_EI+0x50>)
 80098ce:	f011 fb9f 	bl	801b010 <HAL_IWDG_Refresh>
		Data_Processing();
 80098d2:	f00c fef1 	bl	80166b8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 80098d6:	e7f9      	b.n	80098cc <Process_Medha_EI+0x44>
 80098d8:	20009d64 	.word	0x20009d64
 80098dc:	2000065c 	.word	0x2000065c
 80098e0:	20000a61 	.word	0x20000a61

080098e4 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	71fb      	strb	r3, [r7, #7]
 80098f0:	4613      	mov	r3, r2
 80098f2:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 80098f8:	2300      	movs	r3, #0
 80098fa:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 80098fc:	e0d0      	b.n	8009aa0 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	4618      	mov	r0, r3
 8009902:	f00d fcf7 	bl	80172f4 <Com_Get_Byte>
 8009906:	4603      	mov	r3, r0
 8009908:	461a      	mov	r2, r3
 800990a:	4b6c      	ldr	r3, [pc, #432]	; (8009abc <Get_Medha_EI_Message+0x1d8>)
 800990c:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800990e:	4b6c      	ldr	r3, [pc, #432]	; (8009ac0 <Get_Medha_EI_Message+0x1dc>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	3b01      	subs	r3, #1
 8009914:	2b04      	cmp	r3, #4
 8009916:	f200 80c2 	bhi.w	8009a9e <Get_Medha_EI_Message+0x1ba>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <Get_Medha_EI_Message+0x3c>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009935 	.word	0x08009935
 8009924:	0800994d 	.word	0x0800994d
 8009928:	08009a9f 	.word	0x08009a9f
 800992c:	08009999 	.word	0x08009999
 8009930:	080099f1 	.word	0x080099f1
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 8009934:	4b61      	ldr	r3, [pc, #388]	; (8009abc <Get_Medha_EI_Message+0x1d8>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b53      	cmp	r3, #83	; 0x53
 800993a:	f040 80b1 	bne.w	8009aa0 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800993e:	4b61      	ldr	r3, [pc, #388]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009940:	2201      	movs	r2, #1
 8009942:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 8009944:	4b5e      	ldr	r3, [pc, #376]	; (8009ac0 <Get_Medha_EI_Message+0x1dc>)
 8009946:	2202      	movs	r2, #2
 8009948:	701a      	strb	r2, [r3, #0]
			}
			break;
 800994a:	e0a9      	b.n	8009aa0 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800994c:	4b5d      	ldr	r3, [pc, #372]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	2b08      	cmp	r3, #8
 8009952:	d111      	bne.n	8009978 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 8009954:	4b5b      	ldr	r3, [pc, #364]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	4413      	add	r3, r2
 800995e:	4a57      	ldr	r2, [pc, #348]	; (8009abc <Get_Medha_EI_Message+0x1d8>)
 8009960:	7812      	ldrb	r2, [r2, #0]
 8009962:	701a      	strb	r2, [r3, #0]
					i++;
 8009964:	4b57      	ldr	r3, [pc, #348]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	4b55      	ldr	r3, [pc, #340]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 800996e:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8009970:	4b53      	ldr	r3, [pc, #332]	; (8009ac0 <Get_Medha_EI_Message+0x1dc>)
 8009972:	2204      	movs	r2, #4
 8009974:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 8009976:	e00d      	b.n	8009994 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 8009978:	4b52      	ldr	r3, [pc, #328]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	4413      	add	r3, r2
 8009982:	4a4e      	ldr	r2, [pc, #312]	; (8009abc <Get_Medha_EI_Message+0x1d8>)
 8009984:	7812      	ldrb	r2, [r2, #0]
 8009986:	701a      	strb	r2, [r3, #0]
					i++;
 8009988:	4b4e      	ldr	r3, [pc, #312]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	3301      	adds	r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	4b4c      	ldr	r3, [pc, #304]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009992:	801a      	strh	r2, [r3, #0]
				break;
 8009994:	bf00      	nop
			}
			break;
 8009996:	e083      	b.n	8009aa0 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 8009998:	4b4a      	ldr	r3, [pc, #296]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	3b02      	subs	r3, #2
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 80099a8:	4b47      	ldr	r3, [pc, #284]	; (8009ac8 <Get_Medha_EI_Message+0x1e4>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	801a      	strh	r2, [r3, #0]
				j=1;
 80099ae:	4b47      	ldr	r3, [pc, #284]	; (8009acc <Get_Medha_EI_Message+0x1e8>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 80099b4:	4b43      	ldr	r3, [pc, #268]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	461a      	mov	r2, r3
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	4413      	add	r3, r2
 80099be:	4a3f      	ldr	r2, [pc, #252]	; (8009abc <Get_Medha_EI_Message+0x1d8>)
 80099c0:	7812      	ldrb	r2, [r2, #0]
 80099c2:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 80099c4:	4b40      	ldr	r3, [pc, #256]	; (8009ac8 <Get_Medha_EI_Message+0x1e4>)
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	4b3e      	ldr	r3, [pc, #248]	; (8009ac8 <Get_Medha_EI_Message+0x1e4>)
 80099ce:	801a      	strh	r2, [r3, #0]
				i++;
 80099d0:	4b3c      	ldr	r3, [pc, #240]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	4b3a      	ldr	r3, [pc, #232]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 80099da:	801a      	strh	r2, [r3, #0]
				j++;
 80099dc:	4b3b      	ldr	r3, [pc, #236]	; (8009acc <Get_Medha_EI_Message+0x1e8>)
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	3301      	adds	r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	4b39      	ldr	r3, [pc, #228]	; (8009acc <Get_Medha_EI_Message+0x1e8>)
 80099e6:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 80099e8:	4b35      	ldr	r3, [pc, #212]	; (8009ac0 <Get_Medha_EI_Message+0x1dc>)
 80099ea:	2205      	movs	r2, #5
 80099ec:	701a      	strb	r2, [r3, #0]
				break;
 80099ee:	e057      	b.n	8009aa0 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 80099f0:	4b34      	ldr	r3, [pc, #208]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	4413      	add	r3, r2
 80099fa:	4a30      	ldr	r2, [pc, #192]	; (8009abc <Get_Medha_EI_Message+0x1d8>)
 80099fc:	7812      	ldrb	r2, [r2, #0]
 80099fe:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 8009a00:	89ba      	ldrh	r2, [r7, #12]
 8009a02:	4b31      	ldr	r3, [pc, #196]	; (8009ac8 <Get_Medha_EI_Message+0x1e4>)
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d940      	bls.n	8009a8c <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 8009a0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ac8 <Get_Medha_EI_Message+0x1e4>)
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	4b2d      	ldr	r3, [pc, #180]	; (8009ac8 <Get_Medha_EI_Message+0x1e4>)
 8009a14:	801a      	strh	r2, [r3, #0]
					i++;
 8009a16:	4b2b      	ldr	r3, [pc, #172]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	4b29      	ldr	r3, [pc, #164]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009a20:	801a      	strh	r2, [r3, #0]
					j++;
 8009a22:	4b2a      	ldr	r3, [pc, #168]	; (8009acc <Get_Medha_EI_Message+0x1e8>)
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	3301      	adds	r3, #1
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	4b28      	ldr	r3, [pc, #160]	; (8009acc <Get_Medha_EI_Message+0x1e8>)
 8009a2c:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 8009a2e:	89ba      	ldrh	r2, [r7, #12]
 8009a30:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <Get_Medha_EI_Message+0x1e4>)
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d133      	bne.n	8009aa0 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 8009a38:	4b22      	ldr	r3, [pc, #136]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	3b04      	subs	r3, #4
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <Get_Medha_EI_Message+0x1ec>)
 8009a42:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 8009a44:	4b22      	ldr	r3, [pc, #136]	; (8009ad0 <Get_Medha_EI_Message+0x1ec>)
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	81fb      	strh	r3, [r7, #14]
						i = 0;
 8009a4a:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 8009a50:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <Get_Medha_EI_Message+0x1dc>)
 8009a52:	2201      	movs	r2, #1
 8009a54:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 8009a5a:	89fb      	ldrh	r3, [r7, #14]
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d804      	bhi.n	8009a6a <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 8009a60:	481c      	ldr	r0, [pc, #112]	; (8009ad4 <Get_Medha_EI_Message+0x1f0>)
 8009a62:	f01b f815 	bl	8024a90 <puts>
							return ZERO;
 8009a66:	2300      	movs	r3, #0
 8009a68:	e023      	b.n	8009ab2 <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 8009a6a:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <Get_Medha_EI_Message+0x1ec>)
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	2000      	movs	r0, #0
 8009a74:	f001 fc22 	bl	800b2bc <CheckCRC32>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 8009a7e:	89fb      	ldrh	r3, [r7, #14]
 8009a80:	e017      	b.n	8009ab2 <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 8009a82:	4815      	ldr	r0, [pc, #84]	; (8009ad8 <Get_Medha_EI_Message+0x1f4>)
 8009a84:	f01b f804 	bl	8024a90 <puts>
							return ZERO;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e012      	b.n	8009ab2 <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 8009a8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ac4 <Get_Medha_EI_Message+0x1e0>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 8009a92:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <Get_Medha_EI_Message+0x1dc>)
 8009a94:	2201      	movs	r2, #1
 8009a96:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	81bb      	strh	r3, [r7, #12]
				}
				break;
 8009a9c:	e000      	b.n	8009aa0 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 8009a9e:	bf00      	nop
	while(Com_DataReady(ComPort))
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f00d fbe6 	bl	8017274 <Com_DataReady>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f47f af27 	bne.w	80098fe <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	200028a8 	.word	0x200028a8
 8009ac0:	20000116 	.word	0x20000116
 8009ac4:	200028aa 	.word	0x200028aa
 8009ac8:	200028ac 	.word	0x200028ac
 8009acc:	200028ae 	.word	0x200028ae
 8009ad0:	200028b0 	.word	0x200028b0
 8009ad4:	080276d0 	.word	0x080276d0
 8009ad8:	080276d8 	.word	0x080276d8

08009adc <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 8009adc:	b5b0      	push	{r4, r5, r7, lr}
 8009ade:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8009ae2:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 8009aea:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009aee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	3304      	adds	r3, #4
 8009af8:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009afc:	2100      	movs	r1, #0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f01a fe42 	bl	8024788 <memset>
	uint16_t NoOfInputs 		= 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 8009b10:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009b14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	227c      	movs	r2, #124	; 0x7c
 8009b20:	2100      	movs	r1, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f01a fe30 	bl	8024788 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 8009b34:	4bc1      	ldr	r3, [pc, #772]	; (8009e3c <Medha_EI_Analyser+0x360>)
 8009b36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b3a:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff fece 	bl	80098e4 <Get_Medha_EI_Message>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 8009b4e:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	d939      	bls.n	8009bca <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8009b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b5a:	48b9      	ldr	r0, [pc, #740]	; (8009e40 <Medha_EI_Analyser+0x364>)
 8009b5c:	f010 fbdb 	bl	801a316 <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 8009b60:	48b8      	ldr	r0, [pc, #736]	; (8009e44 <Medha_EI_Analyser+0x368>)
 8009b62:	f01a ff95 	bl	8024a90 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009b66:	2300      	movs	r3, #0
 8009b68:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009b6c:	e024      	b.n	8009bb8 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 8009b6e:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d010      	beq.n	8009b98 <Medha_EI_Analyser+0xbc>
 8009b76:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009b7a:	4bb3      	ldr	r3, [pc, #716]	; (8009e48 <Medha_EI_Analyser+0x36c>)
 8009b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b80:	08d9      	lsrs	r1, r3, #3
 8009b82:	460b      	mov	r3, r1
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	440b      	add	r3, r1
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 8009b92:	200a      	movs	r0, #10
 8009b94:	f01a fef8 	bl	8024988 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 8009b98:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009b9c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009ba0:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8009ba4:	5cd3      	ldrb	r3, [r2, r3]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	48a8      	ldr	r0, [pc, #672]	; (8009e4c <Medha_EI_Analyser+0x370>)
 8009baa:	f01a fed5 	bl	8024958 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009bae:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009bb8:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009bbc:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d3d4      	bcc.n	8009b6e <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 8009bc4:	200a      	movs	r0, #10
 8009bc6:	f01a fedf 	bl	8024988 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 8009bca:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 83bb 	beq.w	800a34a <Medha_EI_Analyser+0x86e>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 8009bd4:	463b      	mov	r3, r7
 8009bd6:	f44f 7292 	mov.w	r2, #292	; 0x124
 8009bda:	2100      	movs	r1, #0
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f01a fdd3 	bl	8024788 <memset>

		BYTEINIT(0);
 8009be2:	2300      	movs	r3, #0
 8009be4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 8009be8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009bec:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009bf0:	4413      	add	r3, r2
 8009bf2:	781a      	ldrb	r2, [r3, #0]
 8009bf4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009bf8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009bfc:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 8009bfe:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c02:	3301      	adds	r3, #1
 8009c04:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 8009c08:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c0c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009c10:	4413      	add	r3, r2
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c1a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c1e:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 8009c20:	4b86      	ldr	r3, [pc, #536]	; (8009e3c <Medha_EI_Analyser+0x360>)
 8009c22:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 8009c26:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c2a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c2e:	889b      	ldrh	r3, [r3, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d010      	beq.n	8009c56 <Medha_EI_Analyser+0x17a>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 8009c34:	4886      	ldr	r0, [pc, #536]	; (8009e50 <Medha_EI_Analyser+0x374>)
 8009c36:	f01a ff2b 	bl	8024a90 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 8009c3a:	4b80      	ldr	r3, [pc, #512]	; (8009e3c <Medha_EI_Analyser+0x360>)
 8009c3c:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8009c40:	4619      	mov	r1, r3
 8009c42:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c46:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c4a:	889b      	ldrh	r3, [r3, #4]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4881      	ldr	r0, [pc, #516]	; (8009e54 <Medha_EI_Analyser+0x378>)
 8009c50:	f01a fe82 	bl	8024958 <iprintf>
			return;
 8009c54:	e37c      	b.n	800a350 <Medha_EI_Analyser+0x874>
		}
		BYTEINC(2);
 8009c56:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 8009c60:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c64:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009c68:	4413      	add	r3, r2
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c72:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c76:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 8009c78:	4b70      	ldr	r3, [pc, #448]	; (8009e3c <Medha_EI_Analyser+0x360>)
 8009c7a:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8009c7e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c82:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c86:	885b      	ldrh	r3, [r3, #2]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d010      	beq.n	8009cae <Medha_EI_Analyser+0x1d2>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 8009c8c:	4872      	ldr	r0, [pc, #456]	; (8009e58 <Medha_EI_Analyser+0x37c>)
 8009c8e:	f01a feff 	bl	8024a90 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 8009c92:	4b6a      	ldr	r3, [pc, #424]	; (8009e3c <Medha_EI_Analyser+0x360>)
 8009c94:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c9e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ca2:	885b      	ldrh	r3, [r3, #2]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	486b      	ldr	r0, [pc, #428]	; (8009e54 <Medha_EI_Analyser+0x378>)
 8009ca8:	f01a fe56 	bl	8024958 <iprintf>
			return;
 8009cac:	e350      	b.n	800a350 <Medha_EI_Analyser+0x874>
		}
		BYTEINC(2);
 8009cae:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 8009cb8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009cbc:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cc8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ccc:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 8009cce:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cd2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cd6:	799b      	ldrb	r3, [r3, #6]
 8009cd8:	2baa      	cmp	r3, #170	; 0xaa
 8009cda:	d010      	beq.n	8009cfe <Medha_EI_Analyser+0x222>
 8009cdc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ce0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ce4:	799b      	ldrb	r3, [r3, #6]
 8009ce6:	2bbb      	cmp	r3, #187	; 0xbb
 8009ce8:	d009      	beq.n	8009cfe <Medha_EI_Analyser+0x222>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 8009cea:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cf2:	799b      	ldrb	r3, [r3, #6]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4859      	ldr	r0, [pc, #356]	; (8009e5c <Medha_EI_Analyser+0x380>)
 8009cf8:	f01a fe2e 	bl	8024958 <iprintf>
			return;
 8009cfc:	e328      	b.n	800a350 <Medha_EI_Analyser+0x874>
		}
		BYTEINC(1);
 8009cfe:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d02:	3301      	adds	r3, #1
 8009d04:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 8009d08:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d0c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009d10:	4413      	add	r3, r2
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d18:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d1c:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 8009d1e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d22:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d26:	79db      	ldrb	r3, [r3, #7]
 8009d28:	2be1      	cmp	r3, #225	; 0xe1
 8009d2a:	d009      	beq.n	8009d40 <Medha_EI_Analyser+0x264>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 8009d2c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d30:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d34:	79db      	ldrb	r3, [r3, #7]
 8009d36:	4619      	mov	r1, r3
 8009d38:	4849      	ldr	r0, [pc, #292]	; (8009e60 <Medha_EI_Analyser+0x384>)
 8009d3a:	f01a fe0d 	bl	8024958 <iprintf>
			return;
 8009d3e:	e307      	b.n	800a350 <Medha_EI_Analyser+0x874>
		}

		BYTEINC(1);
 8009d40:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d44:	3301      	adds	r3, #1
 8009d46:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 8009d4a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d4e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009d52:	4413      	add	r3, r2
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d5c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d60:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 8009d62:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d66:	3302      	adds	r3, #2
 8009d68:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 8009d6c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d70:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009d74:	4413      	add	r3, r2
 8009d76:	781a      	ldrb	r2, [r3, #0]
 8009d78:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d7c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d80:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 8009d82:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d86:	3301      	adds	r3, #1
 8009d88:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 8009d8c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009d90:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009d94:	441a      	add	r2, r3
 8009d96:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d9a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d9e:	330b      	adds	r3, #11
 8009da0:	6811      	ldr	r1, [r2, #0]
 8009da2:	6019      	str	r1, [r3, #0]
 8009da4:	8891      	ldrh	r1, [r2, #4]
 8009da6:	7992      	ldrb	r2, [r2, #6]
 8009da8:	8099      	strh	r1, [r3, #4]
 8009daa:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 8009dac:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009db0:	3307      	adds	r3, #7
 8009db2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 8009db6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009dba:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009dbe:	4413      	add	r3, r2
 8009dc0:	781a      	ldrb	r2, [r3, #0]
 8009dc2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009dc6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009dca:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 8009dcc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009dd0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009dd4:	7c9b      	ldrb	r3, [r3, #18]
 8009dd6:	2b11      	cmp	r3, #17
 8009dd8:	d009      	beq.n	8009dee <Medha_EI_Analyser+0x312>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 8009dda:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009dde:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009de2:	7c9b      	ldrb	r3, [r3, #18]
 8009de4:	4619      	mov	r1, r3
 8009de6:	481f      	ldr	r0, [pc, #124]	; (8009e64 <Medha_EI_Analyser+0x388>)
 8009de8:	f01a fdb6 	bl	8024958 <iprintf>
			return;
 8009dec:	e2b0      	b.n	800a350 <Medha_EI_Analyser+0x874>
		}

		BYTEINC(1);
 8009dee:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009df2:	3301      	adds	r3, #1
 8009df4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 8009df8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009dfc:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 8009e00:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009e04:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009e08:	4413      	add	r3, r2
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e12:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e16:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 8009e18:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e1c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e26:	d921      	bls.n	8009e6c <Medha_EI_Analyser+0x390>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%lu\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009e28:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e2c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	4619      	mov	r1, r3
 8009e34:	480c      	ldr	r0, [pc, #48]	; (8009e68 <Medha_EI_Analyser+0x38c>)
 8009e36:	f01a fd8f 	bl	8024958 <iprintf>
			return;
 8009e3a:	e289      	b.n	800a350 <Medha_EI_Analyser+0x874>
 8009e3c:	20000304 	.word	0x20000304
 8009e40:	40021c00 	.word	0x40021c00
 8009e44:	080276e0 	.word	0x080276e0
 8009e48:	cccccccd 	.word	0xcccccccd
 8009e4c:	080276ec 	.word	0x080276ec
 8009e50:	080276f4 	.word	0x080276f4
 8009e54:	08027728 	.word	0x08027728
 8009e58:	0802774c 	.word	0x0802774c
 8009e5c:	0802777c 	.word	0x0802777c
 8009e60:	080277b4 	.word	0x080277b4
 8009e64:	080277ec 	.word	0x080277ec
 8009e68:	08027830 	.word	0x08027830
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 8009e6c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e70:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e74:	695a      	ldr	r2, [r3, #20]
 8009e76:	4ba6      	ldr	r3, [pc, #664]	; (800a110 <Medha_EI_Analyser+0x634>)
 8009e78:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d013      	beq.n	8009ea8 <Medha_EI_Analyser+0x3cc>
		{
			printf("No of Relays Not Matching...\nConfigured:%lu - Received:%lu\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009e80:	4ba3      	ldr	r3, [pc, #652]	; (800a110 <Medha_EI_Analyser+0x634>)
 8009e82:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 8009e86:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e8a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	461a      	mov	r2, r3
 8009e92:	48a0      	ldr	r0, [pc, #640]	; (800a114 <Medha_EI_Analyser+0x638>)
 8009e94:	f01a fd60 	bl	8024958 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009e98:	499f      	ldr	r1, [pc, #636]	; (800a118 <Medha_EI_Analyser+0x63c>)
 8009e9a:	48a0      	ldr	r0, [pc, #640]	; (800a11c <Medha_EI_Analyser+0x640>)
 8009e9c:	f7f6 f9d0 	bl	8000240 <strcmp>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 8253 	beq.w	800a34e <Medha_EI_Analyser+0x872>
			{
				return;
			}
		}

		BYTEINC(2);
 8009ea8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009eac:	3302      	adds	r3, #2
 8009eae:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 8009eb2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009eb6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 8009ec6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <Medha_EI_Analyser+0x408>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 8009ece:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ed2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	08db      	lsrs	r3, r3, #3
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	3301      	adds	r3, #1
 8009ede:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 8009ee2:	e007      	b.n	8009ef4 <Medha_EI_Analyser+0x418>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 8009ee4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ee8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	08db      	lsrs	r3, r3, #3
 8009ef0:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009efa:	e02a      	b.n	8009f52 <Medha_EI_Analyser+0x476>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009efc:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009f00:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f04:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009f08:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009f0c:	5c89      	ldrb	r1, [r1, r2]
 8009f0e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009f12:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009f16:	4413      	add	r3, r2
 8009f18:	460a      	mov	r2, r1
 8009f1a:	761a      	strb	r2, [r3, #24]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009f1c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f20:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009f24:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009f28:	4413      	add	r3, r2
 8009f2a:	7e1a      	ldrb	r2, [r3, #24]
 8009f2c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f30:	43d2      	mvns	r2, r2
 8009f32:	b2d1      	uxtb	r1, r2
 8009f34:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009f38:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009f3c:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 8009f3e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009f42:	3301      	adds	r3, #1
 8009f44:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009f48:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009f52:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009f56:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d3ce      	bcc.n	8009efc <Medha_EI_Analyser+0x420>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009f64:	e01a      	b.n	8009f9c <Medha_EI_Analyser+0x4c0>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009f66:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009f6a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f6e:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009f72:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009f76:	5c89      	ldrb	r1, [r1, r2]
 8009f78:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009f7c:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009f80:	4413      	add	r3, r2
 8009f82:	460a      	mov	r2, r1
 8009f84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			BYTEINC(1);
 8009f88:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009f92:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f96:	3301      	adds	r3, #1
 8009f98:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009f9c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009fa0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d3de      	bcc.n	8009f66 <Medha_EI_Analyser+0x48a>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 8009fa8:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009fac:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	3398      	adds	r3, #152	; 0x98
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f01a fbaf 	bl	8024718 <memcmp>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d03f      	beq.n	800a040 <Medha_EI_Analyser+0x564>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009fc0:	4857      	ldr	r0, [pc, #348]	; (800a120 <Medha_EI_Analyser+0x644>)
 8009fc2:	f01a fd65 	bl	8024a90 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009fcc:	e011      	b.n	8009ff2 <Medha_EI_Analyser+0x516>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 8009fce:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009fd2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009fd6:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009fda:	4413      	add	r3, r2
 8009fdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4850      	ldr	r0, [pc, #320]	; (800a124 <Medha_EI_Analyser+0x648>)
 8009fe4:	f01a fcb8 	bl	8024958 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009fe8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009fec:	3301      	adds	r3, #1
 8009fee:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ff2:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009ff6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d3e7      	bcc.n	8009fce <Medha_EI_Analyser+0x4f2>
			}

			printf("\nExpected Compliment Relay Status:\n");
 8009ffe:	484a      	ldr	r0, [pc, #296]	; (800a128 <Medha_EI_Analyser+0x64c>)
 800a000:	f01a fd46 	bl	8024a90 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800a004:	2300      	movs	r3, #0
 800a006:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a00a:	e00f      	b.n	800a02c <Medha_EI_Analyser+0x550>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800a00c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a010:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a014:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800a018:	5cd3      	ldrb	r3, [r2, r3]
 800a01a:	4619      	mov	r1, r3
 800a01c:	4841      	ldr	r0, [pc, #260]	; (800a124 <Medha_EI_Analyser+0x648>)
 800a01e:	f01a fc9b 	bl	8024958 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800a022:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a026:	3301      	adds	r3, #1
 800a028:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a02c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a030:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a034:	429a      	cmp	r2, r3
 800a036:	d3e9      	bcc.n	800a00c <Medha_EI_Analyser+0x530>
			}

			printf("\nPACKET Rejected\n");
 800a038:	483c      	ldr	r0, [pc, #240]	; (800a12c <Medha_EI_Analyser+0x650>)
 800a03a:	f01a fd29 	bl	8024a90 <puts>
			return;
 800a03e:	e187      	b.n	800a350 <Medha_EI_Analyser+0x874>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 800a040:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800a044:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800a048:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800a04c:	4618      	mov	r0, r3
 800a04e:	f001 f901 	bl	800b254 <GetCRC32>
 800a052:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800a056:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a05a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a05e:	4413      	add	r3, r2
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a068:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a06c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 800a070:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a074:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a078:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a07c:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800a080:	429a      	cmp	r2, r3
 800a082:	d00c      	beq.n	800a09e <Medha_EI_Analyser+0x5c2>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800a084:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a088:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a08c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a090:	461a      	mov	r2, r3
 800a092:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800a096:	4826      	ldr	r0, [pc, #152]	; (800a130 <Medha_EI_Analyser+0x654>)
 800a098:	f01a fc5e 	bl	8024958 <iprintf>
			return;
 800a09c:	e158      	b.n	800a350 <Medha_EI_Analyser+0x874>
		}
		BYTEINC(4);
 800a09e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800a0a8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a0ac:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a0b0:	4413      	add	r3, r2
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a0ba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a0be:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800a0c2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a0c6:	3302      	adds	r3, #2
 800a0c8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 800a0cc:	f00d fc3a 	bl	8017944 <HAL_GetTick>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	4a18      	ldr	r2, [pc, #96]	; (800a134 <Medha_EI_Analyser+0x658>)
 800a0d4:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800a0d6:	4a18      	ldr	r2, [pc, #96]	; (800a138 <Medha_EI_Analyser+0x65c>)
 800a0d8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a0dc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	f44f 7392 	mov.w	r3, #292	; 0x124
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	f01a fb25 	bl	8024738 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <Medha_EI_Analyser+0x660>)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800a0f4:	4b10      	ldr	r3, [pc, #64]	; (800a138 <Medha_EI_Analyser+0x65c>)
 800a0f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a0fa:	4a10      	ldr	r2, [pc, #64]	; (800a13c <Medha_EI_Analyser+0x660>)
 800a0fc:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 800a0fe:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f954 	bl	800a3b0 <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a108:	2300      	movs	r3, #0
 800a10a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a10e:	e028      	b.n	800a162 <Medha_EI_Analyser+0x686>
 800a110:	20000304 	.word	0x20000304
 800a114:	08027884 	.word	0x08027884
 800a118:	080278c0 	.word	0x080278c0
 800a11c:	20000305 	.word	0x20000305
 800a120:	080278cc 	.word	0x080278cc
 800a124:	080276ec 	.word	0x080276ec
 800a128:	08027918 	.word	0x08027918
 800a12c:	0802793c 	.word	0x0802793c
 800a130:	08027950 	.word	0x08027950
 800a134:	200026f4 	.word	0x200026f4
 800a138:	2000259c 	.word	0x2000259c
 800a13c:	20002704 	.word	0x20002704
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800a140:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a144:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a148:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800a14c:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 800a150:	440a      	add	r2, r1
 800a152:	7e11      	ldrb	r1, [r2, #24]
 800a154:	4a80      	ldr	r2, [pc, #512]	; (800a358 <Medha_EI_Analyser+0x87c>)
 800a156:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a158:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a15c:	3301      	adds	r3, #1
 800a15e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a162:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a166:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d3e8      	bcc.n	800a140 <Medha_EI_Analyser+0x664>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800a16e:	4b7b      	ldr	r3, [pc, #492]	; (800a35c <Medha_EI_Analyser+0x880>)
 800a170:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a174:	4a78      	ldr	r2, [pc, #480]	; (800a358 <Medha_EI_Analyser+0x87c>)
 800a176:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800a17a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a17e:	461a      	mov	r2, r3
 800a180:	4975      	ldr	r1, [pc, #468]	; (800a358 <Medha_EI_Analyser+0x87c>)
 800a182:	4877      	ldr	r0, [pc, #476]	; (800a360 <Medha_EI_Analyser+0x884>)
 800a184:	f01a fac8 	bl	8024718 <memcmp>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d030      	beq.n	800a1f0 <Medha_EI_Analyser+0x714>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800a18e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a192:	461a      	mov	r2, r3
 800a194:	4970      	ldr	r1, [pc, #448]	; (800a358 <Medha_EI_Analyser+0x87c>)
 800a196:	4872      	ldr	r0, [pc, #456]	; (800a360 <Medha_EI_Analyser+0x884>)
 800a198:	f01a face 	bl	8024738 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a19c:	4b6e      	ldr	r3, [pc, #440]	; (800a358 <Medha_EI_Analyser+0x87c>)
 800a19e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a2:	4a6f      	ldr	r2, [pc, #444]	; (800a360 <Medha_EI_Analyser+0x884>)
 800a1a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 800a1a8:	2230      	movs	r2, #48	; 0x30
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	486d      	ldr	r0, [pc, #436]	; (800a364 <Medha_EI_Analyser+0x888>)
 800a1ae:	f01a faeb 	bl	8024788 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800a1b2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	4967      	ldr	r1, [pc, #412]	; (800a358 <Medha_EI_Analyser+0x87c>)
 800a1ba:	486a      	ldr	r0, [pc, #424]	; (800a364 <Medha_EI_Analyser+0x888>)
 800a1bc:	f01a fabc 	bl	8024738 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 800a1c0:	f240 1019 	movw	r0, #281	; 0x119
 800a1c4:	f005 fe60 	bl	800fe88 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800a1c8:	f00d fbbc 	bl	8017944 <HAL_GetTick>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	4a66      	ldr	r2, [pc, #408]	; (800a368 <Medha_EI_Analyser+0x88c>)
 800a1d0:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800a1d2:	4866      	ldr	r0, [pc, #408]	; (800a36c <Medha_EI_Analyser+0x890>)
 800a1d4:	f01a fc5c 	bl	8024a90 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 800a1d8:	f240 2001 	movw	r0, #513	; 0x201
 800a1dc:	f005 fe54 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800a1e0:	4b63      	ldr	r3, [pc, #396]	; (800a370 <Medha_EI_Analyser+0x894>)
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d103      	bne.n	800a1f0 <Medha_EI_Analyser+0x714>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800a1e8:	f240 2007 	movw	r0, #519	; 0x207
 800a1ec:	f005 fe4c 	bl	800fe88 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800a1f0:	4860      	ldr	r0, [pc, #384]	; (800a374 <Medha_EI_Analyser+0x898>)
 800a1f2:	f01a fc4d 	bl	8024a90 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 800a1f6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a1fa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a1fe:	889b      	ldrh	r3, [r3, #4]
 800a200:	4619      	mov	r1, r3
 800a202:	485d      	ldr	r0, [pc, #372]	; (800a378 <Medha_EI_Analyser+0x89c>)
 800a204:	f01a fba8 	bl	8024958 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 800a208:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a20c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a210:	885b      	ldrh	r3, [r3, #2]
 800a212:	4619      	mov	r1, r3
 800a214:	4859      	ldr	r0, [pc, #356]	; (800a37c <Medha_EI_Analyser+0x8a0>)
 800a216:	f01a fb9f 	bl	8024958 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 800a21a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a21e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a222:	799b      	ldrb	r3, [r3, #6]
 800a224:	4619      	mov	r1, r3
 800a226:	4856      	ldr	r0, [pc, #344]	; (800a380 <Medha_EI_Analyser+0x8a4>)
 800a228:	f01a fb96 	bl	8024958 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 800a22c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a230:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a234:	79db      	ldrb	r3, [r3, #7]
 800a236:	4619      	mov	r1, r3
 800a238:	4852      	ldr	r0, [pc, #328]	; (800a384 <Medha_EI_Analyser+0x8a8>)
 800a23a:	f01a fb8d 	bl	8024958 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800a23e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a242:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a246:	891b      	ldrh	r3, [r3, #8]
 800a248:	4619      	mov	r1, r3
 800a24a:	484f      	ldr	r0, [pc, #316]	; (800a388 <Medha_EI_Analyser+0x8ac>)
 800a24c:	f01a fb84 	bl	8024958 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 800a250:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a254:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a258:	7a9b      	ldrb	r3, [r3, #10]
 800a25a:	4619      	mov	r1, r3
 800a25c:	484b      	ldr	r0, [pc, #300]	; (800a38c <Medha_EI_Analyser+0x8b0>)
 800a25e:	f01a fb7b 	bl	8024958 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800a262:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a266:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a26a:	7b9b      	ldrb	r3, [r3, #14]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a272:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a276:	7b5b      	ldrb	r3, [r3, #13]
 800a278:	461c      	mov	r4, r3
 800a27a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a27e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a282:	7b1b      	ldrb	r3, [r3, #12]
 800a284:	461d      	mov	r5, r3
 800a286:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a28a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a28e:	7bdb      	ldrb	r3, [r3, #15]
 800a290:	461a      	mov	r2, r3
 800a292:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a296:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a29a:	7c1b      	ldrb	r3, [r3, #16]
 800a29c:	4619      	mov	r1, r3
 800a29e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a2a2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a2a6:	7c5b      	ldrb	r3, [r3, #17]
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	9101      	str	r1, [sp, #4]
 800a2ac:	9200      	str	r2, [sp, #0]
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	4836      	ldr	r0, [pc, #216]	; (800a390 <Medha_EI_Analyser+0x8b4>)
 800a2b6:	f01a fb4f 	bl	8024958 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800a2ba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a2be:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a2c2:	7c9b      	ldrb	r3, [r3, #18]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4833      	ldr	r0, [pc, #204]	; (800a394 <Medha_EI_Analyser+0x8b8>)
 800a2c8:	f01a fb46 	bl	8024958 <iprintf>
		printf("RC:%5lu\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800a2cc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a2d0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	482f      	ldr	r0, [pc, #188]	; (800a398 <Medha_EI_Analyser+0x8bc>)
 800a2da:	f01a fb3d 	bl	8024958 <iprintf>
		printf("SIGNAL DATA       :");
 800a2de:	482f      	ldr	r0, [pc, #188]	; (800a39c <Medha_EI_Analyser+0x8c0>)
 800a2e0:	f01a fb3a 	bl	8024958 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a2ea:	e021      	b.n	800a330 <Medha_EI_Analyser+0x854>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 800a2ec:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d010      	beq.n	800a316 <Medha_EI_Analyser+0x83a>
 800a2f4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a2f8:	4b29      	ldr	r3, [pc, #164]	; (800a3a0 <Medha_EI_Analyser+0x8c4>)
 800a2fa:	fba3 1302 	umull	r1, r3, r3, r2
 800a2fe:	08d9      	lsrs	r1, r3, #3
 800a300:	460b      	mov	r3, r1
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	440b      	add	r3, r1
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <Medha_EI_Analyser+0x83a>
			{
				printf("\n                   ");
 800a310:	4824      	ldr	r0, [pc, #144]	; (800a3a4 <Medha_EI_Analyser+0x8c8>)
 800a312:	f01a fb21 	bl	8024958 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800a316:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a31a:	4a0f      	ldr	r2, [pc, #60]	; (800a358 <Medha_EI_Analyser+0x87c>)
 800a31c:	5cd3      	ldrb	r3, [r2, r3]
 800a31e:	4619      	mov	r1, r3
 800a320:	4821      	ldr	r0, [pc, #132]	; (800a3a8 <Medha_EI_Analyser+0x8cc>)
 800a322:	f01a fb19 	bl	8024958 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a326:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a32a:	3301      	adds	r3, #1
 800a32c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a330:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a334:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a338:	429a      	cmp	r2, r3
 800a33a:	d3d7      	bcc.n	800a2ec <Medha_EI_Analyser+0x810>
		}
		printf("\n");
 800a33c:	200a      	movs	r0, #10
 800a33e:	f01a fb23 	bl	8024988 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800a342:	481a      	ldr	r0, [pc, #104]	; (800a3ac <Medha_EI_Analyser+0x8d0>)
 800a344:	f01a fba4 	bl	8024a90 <puts>
		return;
 800a348:	e002      	b.n	800a350 <Medha_EI_Analyser+0x874>
	}
	else
	{
		return;
 800a34a:	bf00      	nop
 800a34c:	e000      	b.n	800a350 <Medha_EI_Analyser+0x874>
				return;
 800a34e:	bf00      	nop
	}
}
 800a350:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800a354:	46bd      	mov	sp, r7
 800a356:	bdb0      	pop	{r4, r5, r7, pc}
 800a358:	2000271c 	.word	0x2000271c
 800a35c:	2000259c 	.word	0x2000259c
 800a360:	20002824 	.word	0x20002824
 800a364:	200026c2 	.word	0x200026c2
 800a368:	200026f4 	.word	0x200026f4
 800a36c:	08027990 	.word	0x08027990
 800a370:	2000270c 	.word	0x2000270c
 800a374:	080279a8 	.word	0x080279a8
 800a378:	080279d0 	.word	0x080279d0
 800a37c:	080279d8 	.word	0x080279d8
 800a380:	080279e0 	.word	0x080279e0
 800a384:	080279ec 	.word	0x080279ec
 800a388:	080279f8 	.word	0x080279f8
 800a38c:	08027a00 	.word	0x08027a00
 800a390:	08027a08 	.word	0x08027a08
 800a394:	08027a2c 	.word	0x08027a2c
 800a398:	08027a38 	.word	0x08027a38
 800a39c:	08027a44 	.word	0x08027a44
 800a3a0:	cccccccd 	.word	0xcccccccd
 800a3a4:	08027a58 	.word	0x08027a58
 800a3a8:	080276ec 	.word	0x080276ec
 800a3ac:	08027a70 	.word	0x08027a70

0800a3b0 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b0d2      	sub	sp, #328	; 0x148
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a3bc:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a3c0:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 800a3c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a3c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f01a f9d6 	bl	8024788 <memset>
	uint32_t Cal_Crc =0;
 800a3dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a3e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 800a3ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a3f2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 800a400:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a404:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a408:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a40c:	2153      	movs	r1, #83	; 0x53
 800a40e:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800a410:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a414:	3301      	adds	r3, #1
 800a416:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800a41a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a41e:	f107 0214 	add.w	r2, r7, #20
 800a422:	4413      	add	r3, r2
 800a424:	4a88      	ldr	r2, [pc, #544]	; (800a648 <Send_Medha_EI_Reply+0x298>)
 800a426:	8852      	ldrh	r2, [r2, #2]
 800a428:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a42a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a42e:	3302      	adds	r3, #2
 800a430:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800a434:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a438:	f107 0214 	add.w	r2, r7, #20
 800a43c:	4413      	add	r3, r2
 800a43e:	4a82      	ldr	r2, [pc, #520]	; (800a648 <Send_Medha_EI_Reply+0x298>)
 800a440:	8892      	ldrh	r2, [r2, #4]
 800a442:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a444:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a448:	3302      	adds	r3, #2
 800a44a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800a44e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a452:	f107 0214 	add.w	r2, r7, #20
 800a456:	4413      	add	r3, r2
 800a458:	4a7b      	ldr	r2, [pc, #492]	; (800a648 <Send_Medha_EI_Reply+0x298>)
 800a45a:	7992      	ldrb	r2, [r2, #6]
 800a45c:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a45e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a462:	3301      	adds	r3, #1
 800a464:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800a468:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a46c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a470:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a474:	21e2      	movs	r1, #226	; 0xe2
 800a476:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800a478:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a47c:	3301      	adds	r3, #1
 800a47e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800a482:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a486:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800a48a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a48e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a492:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a496:	2100      	movs	r1, #0
 800a498:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800a49a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a49e:	3301      	adds	r3, #1
 800a4a0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a4a4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800a4ac:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800a4b6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a4ba:	f107 0214 	add.w	r2, r7, #20
 800a4be:	4413      	add	r3, r2
 800a4c0:	4a61      	ldr	r2, [pc, #388]	; (800a648 <Send_Medha_EI_Reply+0x298>)
 800a4c2:	7a92      	ldrb	r2, [r2, #10]
 800a4c4:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a4c6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800a4d0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a4d4:	f107 0214 	add.w	r2, r7, #20
 800a4d8:	441a      	add	r2, r3
 800a4da:	4b5b      	ldr	r3, [pc, #364]	; (800a648 <Send_Medha_EI_Reply+0x298>)
 800a4dc:	330b      	adds	r3, #11
 800a4de:	6819      	ldr	r1, [r3, #0]
 800a4e0:	6011      	str	r1, [r2, #0]
 800a4e2:	8899      	ldrh	r1, [r3, #4]
 800a4e4:	799b      	ldrb	r3, [r3, #6]
 800a4e6:	8091      	strh	r1, [r2, #4]
 800a4e8:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800a4ea:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a4ee:	3307      	adds	r3, #7
 800a4f0:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800a4f4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a4f8:	f107 0214 	add.w	r2, r7, #20
 800a4fc:	4413      	add	r3, r2
 800a4fe:	4a52      	ldr	r2, [pc, #328]	; (800a648 <Send_Medha_EI_Reply+0x298>)
 800a500:	8a92      	ldrh	r2, [r2, #20]
 800a502:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a504:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a508:	3302      	adds	r3, #2
 800a50a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800a50e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a512:	f107 0214 	add.w	r2, r7, #20
 800a516:	18d0      	adds	r0, r2, r3
 800a518:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a51c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a520:	881b      	ldrh	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	4949      	ldr	r1, [pc, #292]	; (800a64c <Send_Medha_EI_Reply+0x29c>)
 800a526:	f01a f907 	bl	8024738 <memcpy>
	BYTEINC(Outputs);
 800a52a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a52e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a532:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	4413      	add	r3, r2
 800a53a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800a53e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a542:	f107 0214 	add.w	r2, r7, #20
 800a546:	18d0      	adds	r0, r2, r3
 800a548:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a54c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	493e      	ldr	r1, [pc, #248]	; (800a650 <Send_Medha_EI_Reply+0x2a0>)
 800a556:	f01a f8ef 	bl	8024738 <memcpy>
	BYTEINC(Outputs);
 800a55a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a55e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a562:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	4413      	add	r3, r2
 800a56a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800a56e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a572:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a576:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a57a:	2100      	movs	r1, #0
 800a57c:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800a57e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a582:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a586:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a58a:	2100      	movs	r1, #0
 800a58c:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800a58e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a592:	3302      	adds	r3, #2
 800a594:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800a598:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	3302      	adds	r3, #2
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a5ae:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a5b2:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800a5b4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a5b8:	f107 0214 	add.w	r2, r7, #20
 800a5bc:	4413      	add	r3, r2
 800a5be:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a5c2:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a5c6:	8812      	ldrh	r2, [r2, #0]
 800a5c8:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800a5ca:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a5ce:	f107 0314 	add.w	r3, r7, #20
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f000 fe3d 	bl	800b254 <GetCRC32>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a5e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a5e4:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800a5e6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a5ea:	f107 0214 	add.w	r2, r7, #20
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a5f4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a5f8:	6812      	ldr	r2, [r2, #0]
 800a5fa:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800a5fc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a600:	3304      	adds	r3, #4
 800a602:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a606:	2300      	movs	r3, #0
 800a608:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a60c:	e011      	b.n	800a632 <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800a60e:	4b11      	ldr	r3, [pc, #68]	; (800a654 <Send_Medha_EI_Reply+0x2a4>)
 800a610:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800a614:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a618:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a61c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a620:	5cd3      	ldrb	r3, [r2, r3]
 800a622:	4619      	mov	r1, r3
 800a624:	f00c ff36 	bl	8017494 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a628:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a62c:	3301      	adds	r3, #1
 800a62e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a632:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800a636:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d3e7      	bcc.n	800a60e <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800a63e:	bf00      	nop
}
 800a640:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	2000259c 	.word	0x2000259c
 800a64c:	200025b4 	.word	0x200025b4
 800a650:	20002634 	.word	0x20002634
 800a654:	20000304 	.word	0x20000304

0800a658 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800a65e:	4b2c      	ldr	r3, [pc, #176]	; (800a710 <Send_Relay_Statuses_2_MIE+0xb8>)
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	4618      	mov	r0, r3
 800a664:	f004 fe5c 	bl	800f320 <HAL_Elaps_Ticks>
 800a668:	4602      	mov	r2, r0
 800a66a:	4b2a      	ldr	r3, [pc, #168]	; (800a714 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a66c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a670:	429a      	cmp	r2, r3
 800a672:	d349      	bcc.n	800a708 <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800a678:	4b26      	ldr	r3, [pc, #152]	; (800a714 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a67a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	2b00      	cmp	r3, #0
 800a684:	d007      	beq.n	800a696 <Send_Relay_Statuses_2_MIE+0x3e>
 800a686:	4b23      	ldr	r3, [pc, #140]	; (800a714 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a688:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800a68c:	08db      	lsrs	r3, r3, #3
 800a68e:	b29b      	uxth	r3, r3
 800a690:	3301      	adds	r3, #1
 800a692:	80fb      	strh	r3, [r7, #6]
 800a694:	e004      	b.n	800a6a0 <Send_Relay_Statuses_2_MIE+0x48>
 800a696:	4b1f      	ldr	r3, [pc, #124]	; (800a714 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a698:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800a69c:	08db      	lsrs	r3, r3, #3
 800a69e:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800a6a0:	f00d f950 	bl	8017944 <HAL_GetTick>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	4a1a      	ldr	r2, [pc, #104]	; (800a710 <Send_Relay_Statuses_2_MIE+0xb8>)
 800a6a8:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800a6aa:	481b      	ldr	r0, [pc, #108]	; (800a718 <Send_Relay_Statuses_2_MIE+0xc0>)
 800a6ac:	f01a f9f0 	bl	8024a90 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	603b      	str	r3, [r7, #0]
 800a6b4:	e01d      	b.n	800a6f2 <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00e      	beq.n	800a6da <Send_Relay_Statuses_2_MIE+0x82>
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	4b17      	ldr	r3, [pc, #92]	; (800a71c <Send_Relay_Statuses_2_MIE+0xc4>)
 800a6c0:	fba3 2301 	umull	r2, r3, r3, r1
 800a6c4:	091a      	lsrs	r2, r3, #4
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	1aca      	subs	r2, r1, r3
 800a6d0:	2a00      	cmp	r2, #0
 800a6d2:	d102      	bne.n	800a6da <Send_Relay_Statuses_2_MIE+0x82>
			{
				printf("\n");
 800a6d4:	200a      	movs	r0, #10
 800a6d6:	f01a f957 	bl	8024988 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800a6da:	4a11      	ldr	r2, [pc, #68]	; (800a720 <Send_Relay_Statuses_2_MIE+0xc8>)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	4413      	add	r3, r2
 800a6e0:	3302      	adds	r3, #2
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	480f      	ldr	r0, [pc, #60]	; (800a724 <Send_Relay_Statuses_2_MIE+0xcc>)
 800a6e8:	f01a f936 	bl	8024958 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	603b      	str	r3, [r7, #0]
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d3dd      	bcc.n	800a6b6 <Send_Relay_Statuses_2_MIE+0x5e>
		}
		printf("\n");
 800a6fa:	200a      	movs	r0, #10
 800a6fc:	f01a f944 	bl	8024988 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800a700:	f240 1019 	movw	r0, #281	; 0x119
 800a704:	f005 fbc0 	bl	800fe88 <TransmitCanPkt>
#endif
	}
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	200026f4 	.word	0x200026f4
 800a714:	20000304 	.word	0x20000304
 800a718:	08027a98 	.word	0x08027a98
 800a71c:	cccccccd 	.word	0xcccccccd
 800a720:	200026c0 	.word	0x200026c0
 800a724:	080276ec 	.word	0x080276ec

0800a728 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800a72e:	4b61      	ldr	r3, [pc, #388]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	4618      	mov	r0, r3
 800a734:	f004 fdf4 	bl	800f320 <HAL_Elaps_Ticks>
 800a738:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a73a:	4b5f      	ldr	r3, [pc, #380]	; (800a8b8 <Process_Clear_Relays+0x190>)
 800a73c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a740:	4a5d      	ldr	r2, [pc, #372]	; (800a8b8 <Process_Clear_Relays+0x190>)
 800a742:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800a746:	fb02 f303 	mul.w	r3, r2, r3
 800a74a:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800a74c:	495b      	ldr	r1, [pc, #364]	; (800a8bc <Process_Clear_Relays+0x194>)
 800a74e:	485c      	ldr	r0, [pc, #368]	; (800a8c0 <Process_Clear_Relays+0x198>)
 800a750:	f7f5 fd76 	bl	8000240 <strcmp>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 80a7 	beq.w	800a8aa <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d30c      	bcc.n	800a77e <Process_Clear_Relays+0x56>
 800a764:	4b53      	ldr	r3, [pc, #332]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	4b56      	ldr	r3, [pc, #344]	; (800a8c4 <Process_Clear_Relays+0x19c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d006      	beq.n	800a77e <Process_Clear_Relays+0x56>
 800a770:	4b55      	ldr	r3, [pc, #340]	; (800a8c8 <Process_Clear_Relays+0x1a0>)
 800a772:	785a      	ldrb	r2, [r3, #1]
 800a774:	4b50      	ldr	r3, [pc, #320]	; (800a8b8 <Process_Clear_Relays+0x190>)
 800a776:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d808      	bhi.n	800a790 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800a77e:	4b4d      	ldr	r3, [pc, #308]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d049      	beq.n	800a81a <Process_Clear_Relays+0xf2>
 800a786:	4b51      	ldr	r3, [pc, #324]	; (800a8cc <Process_Clear_Relays+0x1a4>)
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d044      	beq.n	800a81a <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a790:	4b48      	ldr	r3, [pc, #288]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	4619      	mov	r1, r3
 800a796:	484e      	ldr	r0, [pc, #312]	; (800a8d0 <Process_Clear_Relays+0x1a8>)
 800a798:	f01a f8de 	bl	8024958 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a79c:	4b45      	ldr	r3, [pc, #276]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d006      	beq.n	800a7b6 <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a7a8:	4b42      	ldr	r3, [pc, #264]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f023 0301 	bic.w	r3, r3, #1
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	4b40      	ldr	r3, [pc, #256]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a7b4:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a7b6:	4b3f      	ldr	r3, [pc, #252]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d006      	beq.n	800a7d0 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a7c2:	4b3c      	ldr	r3, [pc, #240]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f023 0302 	bic.w	r3, r3, #2
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	4b39      	ldr	r3, [pc, #228]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a7ce:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a7d0:	2284      	movs	r2, #132	; 0x84
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	483d      	ldr	r0, [pc, #244]	; (800a8cc <Process_Clear_Relays+0x1a4>)
 800a7d6:	f019 ffd7 	bl	8024788 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a7da:	2232      	movs	r2, #50	; 0x32
 800a7dc:	2100      	movs	r1, #0
 800a7de:	483d      	ldr	r0, [pc, #244]	; (800a8d4 <Process_Clear_Relays+0x1ac>)
 800a7e0:	f019 ffd2 	bl	8024788 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a7e4:	2284      	movs	r2, #132	; 0x84
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	483b      	ldr	r0, [pc, #236]	; (800a8d8 <Process_Clear_Relays+0x1b0>)
 800a7ea:	f019 ffcd 	bl	8024788 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a7ee:	2208      	movs	r2, #8
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	483a      	ldr	r0, [pc, #232]	; (800a8dc <Process_Clear_Relays+0x1b4>)
 800a7f4:	f019 ffc8 	bl	8024788 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4832      	ldr	r0, [pc, #200]	; (800a8c8 <Process_Clear_Relays+0x1a0>)
 800a7fe:	f019 ffc3 	bl	8024788 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a802:	2208      	movs	r2, #8
 800a804:	2100      	movs	r1, #0
 800a806:	4836      	ldr	r0, [pc, #216]	; (800a8e0 <Process_Clear_Relays+0x1b8>)
 800a808:	f019 ffbe 	bl	8024788 <memset>
		printf("Cleared Relay Statuses\n");
 800a80c:	4835      	ldr	r0, [pc, #212]	; (800a8e4 <Process_Clear_Relays+0x1bc>)
 800a80e:	f01a f93f 	bl	8024a90 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a812:	4b28      	ldr	r3, [pc, #160]	; (800a8b4 <Process_Clear_Relays+0x18c>)
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	4a2b      	ldr	r2, [pc, #172]	; (800a8c4 <Process_Clear_Relays+0x19c>)
 800a818:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800a81a:	4b33      	ldr	r3, [pc, #204]	; (800a8e8 <Process_Clear_Relays+0x1c0>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4618      	mov	r0, r3
 800a820:	f004 fd7e 	bl	800f320 <HAL_Elaps_Ticks>
 800a824:	4602      	mov	r2, r0
 800a826:	4b24      	ldr	r3, [pc, #144]	; (800a8b8 <Process_Clear_Relays+0x190>)
 800a828:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d92a      	bls.n	800a886 <Process_Clear_Relays+0x15e>
 800a830:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <Process_Clear_Relays+0x1c4>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d126      	bne.n	800a886 <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800a838:	482d      	ldr	r0, [pc, #180]	; (800a8f0 <Process_Clear_Relays+0x1c8>)
 800a83a:	f01a f929 	bl	8024a90 <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800a83e:	4b2b      	ldr	r3, [pc, #172]	; (800a8ec <Process_Clear_Relays+0x1c4>)
 800a840:	2200      	movs	r2, #0
 800a842:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a844:	2284      	movs	r2, #132	; 0x84
 800a846:	2100      	movs	r1, #0
 800a848:	4820      	ldr	r0, [pc, #128]	; (800a8cc <Process_Clear_Relays+0x1a4>)
 800a84a:	f019 ff9d 	bl	8024788 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a84e:	2232      	movs	r2, #50	; 0x32
 800a850:	2100      	movs	r1, #0
 800a852:	4820      	ldr	r0, [pc, #128]	; (800a8d4 <Process_Clear_Relays+0x1ac>)
 800a854:	f019 ff98 	bl	8024788 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a858:	2284      	movs	r2, #132	; 0x84
 800a85a:	2100      	movs	r1, #0
 800a85c:	481e      	ldr	r0, [pc, #120]	; (800a8d8 <Process_Clear_Relays+0x1b0>)
 800a85e:	f019 ff93 	bl	8024788 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a862:	2208      	movs	r2, #8
 800a864:	2100      	movs	r1, #0
 800a866:	481d      	ldr	r0, [pc, #116]	; (800a8dc <Process_Clear_Relays+0x1b4>)
 800a868:	f019 ff8e 	bl	8024788 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a86c:	2208      	movs	r2, #8
 800a86e:	2100      	movs	r1, #0
 800a870:	4815      	ldr	r0, [pc, #84]	; (800a8c8 <Process_Clear_Relays+0x1a0>)
 800a872:	f019 ff89 	bl	8024788 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a876:	2208      	movs	r2, #8
 800a878:	2100      	movs	r1, #0
 800a87a:	4819      	ldr	r0, [pc, #100]	; (800a8e0 <Process_Clear_Relays+0x1b8>)
 800a87c:	f019 ff84 	bl	8024788 <memset>
		printf("Cleared Relay Statuses\n");
 800a880:	4818      	ldr	r0, [pc, #96]	; (800a8e4 <Process_Clear_Relays+0x1bc>)
 800a882:	f01a f905 	bl	8024a90 <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800a886:	4b18      	ldr	r3, [pc, #96]	; (800a8e8 <Process_Clear_Relays+0x1c0>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f004 fd48 	bl	800f320 <HAL_Elaps_Ticks>
 800a890:	4602      	mov	r2, r0
 800a892:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <Process_Clear_Relays+0x190>)
 800a894:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a898:	429a      	cmp	r2, r3
 800a89a:	d207      	bcs.n	800a8ac <Process_Clear_Relays+0x184>
 800a89c:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <Process_Clear_Relays+0x1c4>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d103      	bne.n	800a8ac <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800a8a4:	f009 fd96 	bl	80143d4 <Blink_S2>
 800a8a8:	e000      	b.n	800a8ac <Process_Clear_Relays+0x184>
		return;
 800a8aa:	bf00      	nop
	}


}
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	200026f4 	.word	0x200026f4
 800a8b8:	20000304 	.word	0x20000304
 800a8bc:	080278c0 	.word	0x080278c0
 800a8c0:	20000305 	.word	0x20000305
 800a8c4:	200028b4 	.word	0x200028b4
 800a8c8:	2000270c 	.word	0x2000270c
 800a8cc:	2000271c 	.word	0x2000271c
 800a8d0:	08027aac 	.word	0x08027aac
 800a8d4:	200026c0 	.word	0x200026c0
 800a8d8:	20002824 	.word	0x20002824
 800a8dc:	20002704 	.word	0x20002704
 800a8e0:	20002714 	.word	0x20002714
 800a8e4:	08027adc 	.word	0x08027adc
 800a8e8:	200021ac 	.word	0x200021ac
 800a8ec:	200021a8 	.word	0x200021a8
 800a8f0:	08027af4 	.word	0x08027af4

0800a8f4 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800a8f8:	4b26      	ldr	r3, [pc, #152]	; (800a994 <Send_Data_to_Other+0xa0>)
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f004 fd0f 	bl	800f320 <HAL_Elaps_Ticks>
 800a902:	4602      	mov	r2, r0
 800a904:	4b24      	ldr	r3, [pc, #144]	; (800a998 <Send_Data_to_Other+0xa4>)
 800a906:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a90a:	4923      	ldr	r1, [pc, #140]	; (800a998 <Send_Data_to_Other+0xa4>)
 800a90c:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800a910:	fb01 f303 	mul.w	r3, r1, r3
 800a914:	429a      	cmp	r2, r3
 800a916:	d306      	bcc.n	800a926 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800a918:	4b20      	ldr	r3, [pc, #128]	; (800a99c <Send_Data_to_Other+0xa8>)
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800a920:	4b1e      	ldr	r3, [pc, #120]	; (800a99c <Send_Data_to_Other+0xa8>)
 800a922:	2200      	movs	r2, #0
 800a924:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800a926:	4b1b      	ldr	r3, [pc, #108]	; (800a994 <Send_Data_to_Other+0xa0>)
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f004 fcf8 	bl	800f320 <HAL_Elaps_Ticks>
 800a930:	4602      	mov	r2, r0
 800a932:	4b19      	ldr	r3, [pc, #100]	; (800a998 <Send_Data_to_Other+0xa4>)
 800a934:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a938:	429a      	cmp	r2, r3
 800a93a:	d90e      	bls.n	800a95a <Send_Data_to_Other+0x66>
 800a93c:	4b15      	ldr	r3, [pc, #84]	; (800a994 <Send_Data_to_Other+0xa0>)
 800a93e:	685a      	ldr	r2, [r3, #4]
 800a940:	4b17      	ldr	r3, [pc, #92]	; (800a9a0 <Send_Data_to_Other+0xac>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d008      	beq.n	800a95a <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a948:	4b12      	ldr	r3, [pc, #72]	; (800a994 <Send_Data_to_Other+0xa0>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4a14      	ldr	r2, [pc, #80]	; (800a9a0 <Send_Data_to_Other+0xac>)
 800a94e:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a950:	f240 2001 	movw	r0, #513	; 0x201
 800a954:	f005 fa98 	bl	800fe88 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a958:	e01a      	b.n	800a990 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a95a:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <Send_Data_to_Other+0xb0>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4618      	mov	r0, r3
 800a960:	f004 fcde 	bl	800f320 <HAL_Elaps_Ticks>
 800a964:	4603      	mov	r3, r0
 800a966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a96a:	d911      	bls.n	800a990 <Send_Data_to_Other+0x9c>
 800a96c:	4b09      	ldr	r3, [pc, #36]	; (800a994 <Send_Data_to_Other+0xa0>)
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	4618      	mov	r0, r3
 800a972:	f004 fcd5 	bl	800f320 <HAL_Elaps_Ticks>
 800a976:	4603      	mov	r3, r0
 800a978:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a97c:	d908      	bls.n	800a990 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a97e:	f00c ffe1 	bl	8017944 <HAL_GetTick>
 800a982:	4603      	mov	r3, r0
 800a984:	4a07      	ldr	r2, [pc, #28]	; (800a9a4 <Send_Data_to_Other+0xb0>)
 800a986:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a988:	f240 2001 	movw	r0, #513	; 0x201
 800a98c:	f005 fa7c 	bl	800fe88 <TransmitCanPkt>
}
 800a990:	bf00      	nop
 800a992:	bd80      	pop	{r7, pc}
 800a994:	200026f4 	.word	0x200026f4
 800a998:	20000304 	.word	0x20000304
 800a99c:	20002704 	.word	0x20002704
 800a9a0:	200028b8 	.word	0x200028b8
 800a9a4:	200028bc 	.word	0x200028bc

0800a9a8 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a9a8:	b5b0      	push	{r4, r5, r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a9ac:	4b95      	ldr	r3, [pc, #596]	; (800ac04 <Process_Data_from_Other+0x25c>)
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	4b95      	ldr	r3, [pc, #596]	; (800ac08 <Process_Data_from_Other+0x260>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d109      	bne.n	800a9cc <Process_Data_from_Other+0x24>
 800a9b8:	4b92      	ldr	r3, [pc, #584]	; (800ac04 <Process_Data_from_Other+0x25c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f004 fcaf 	bl	800f320 <HAL_Elaps_Ticks>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9c8:	f0c0 80e4 	bcc.w	800ab94 <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a9cc:	f00c ffba 	bl	8017944 <HAL_GetTick>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	4a8c      	ldr	r2, [pc, #560]	; (800ac04 <Process_Data_from_Other+0x25c>)
 800a9d4:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a9d6:	4b8d      	ldr	r3, [pc, #564]	; (800ac0c <Process_Data_from_Other+0x264>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a9de:	4b8c      	ldr	r3, [pc, #560]	; (800ac10 <Process_Data_from_Other+0x268>)
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	f043 0301 	orr.w	r3, r3, #1
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	4b89      	ldr	r3, [pc, #548]	; (800ac10 <Process_Data_from_Other+0x268>)
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	e006      	b.n	800a9fc <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a9ee:	4b88      	ldr	r3, [pc, #544]	; (800ac10 <Process_Data_from_Other+0x268>)
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	f023 0301 	bic.w	r3, r3, #1
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	4b85      	ldr	r3, [pc, #532]	; (800ac10 <Process_Data_from_Other+0x268>)
 800a9fa:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a9fc:	4b85      	ldr	r3, [pc, #532]	; (800ac14 <Process_Data_from_Other+0x26c>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d007      	beq.n	800aa14 <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800aa04:	4b82      	ldr	r3, [pc, #520]	; (800ac10 <Process_Data_from_Other+0x268>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	f043 0302 	orr.w	r3, r3, #2
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	4b80      	ldr	r3, [pc, #512]	; (800ac10 <Process_Data_from_Other+0x268>)
 800aa10:	701a      	strb	r2, [r3, #0]
 800aa12:	e006      	b.n	800aa22 <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800aa14:	4b7e      	ldr	r3, [pc, #504]	; (800ac10 <Process_Data_from_Other+0x268>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f023 0302 	bic.w	r3, r3, #2
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	4b7c      	ldr	r3, [pc, #496]	; (800ac10 <Process_Data_from_Other+0x268>)
 800aa20:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800aa22:	4b7b      	ldr	r3, [pc, #492]	; (800ac10 <Process_Data_from_Other+0x268>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	f200 809a 	bhi.w	800ab60 <Process_Data_from_Other+0x1b8>
 800aa2c:	a201      	add	r2, pc, #4	; (adr r2, 800aa34 <Process_Data_from_Other+0x8c>)
 800aa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa32:	bf00      	nop
 800aa34:	0800aa45 	.word	0x0800aa45
 800aa38:	0800aad5 	.word	0x0800aad5
 800aa3c:	0800aa53 	.word	0x0800aa53
 800aa40:	0800ab25 	.word	0x0800ab25
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800aa44:	4b71      	ldr	r3, [pc, #452]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	4b6f      	ldr	r3, [pc, #444]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aa4e:	705a      	strb	r2, [r3, #1]
			break;
 800aa50:	e086      	b.n	800ab60 <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800aa52:	4b70      	ldr	r3, [pc, #448]	; (800ac14 <Process_Data_from_Other+0x26c>)
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	4b6d      	ldr	r3, [pc, #436]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d02f      	beq.n	800aabe <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800aa5e:	4b6e      	ldr	r3, [pc, #440]	; (800ac18 <Process_Data_from_Other+0x270>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d179      	bne.n	800ab5a <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800aa66:	4b69      	ldr	r3, [pc, #420]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	486b      	ldr	r0, [pc, #428]	; (800ac1c <Process_Data_from_Other+0x274>)
 800aa6e:	f019 ff73 	bl	8024958 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800aa72:	4b68      	ldr	r3, [pc, #416]	; (800ac14 <Process_Data_from_Other+0x26c>)
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	4619      	mov	r1, r3
 800aa78:	4869      	ldr	r0, [pc, #420]	; (800ac20 <Process_Data_from_Other+0x278>)
 800aa7a:	f019 ff6d 	bl	8024958 <iprintf>
					Received_CAN_Relay_Status=NO;
 800aa7e:	4b66      	ldr	r3, [pc, #408]	; (800ac18 <Process_Data_from_Other+0x270>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800aa84:	4867      	ldr	r0, [pc, #412]	; (800ac24 <Process_Data_from_Other+0x27c>)
 800aa86:	f01a f803 	bl	8024a90 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800aa8a:	4a67      	ldr	r2, [pc, #412]	; (800ac28 <Process_Data_from_Other+0x280>)
 800aa8c:	4b67      	ldr	r3, [pc, #412]	; (800ac2c <Process_Data_from_Other+0x284>)
 800aa8e:	4610      	mov	r0, r2
 800aa90:	4619      	mov	r1, r3
 800aa92:	2384      	movs	r3, #132	; 0x84
 800aa94:	461a      	mov	r2, r3
 800aa96:	f019 fe4f 	bl	8024738 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800aa9a:	4a65      	ldr	r2, [pc, #404]	; (800ac30 <Process_Data_from_Other+0x288>)
 800aa9c:	4b62      	ldr	r3, [pc, #392]	; (800ac28 <Process_Data_from_Other+0x280>)
 800aa9e:	4614      	mov	r4, r2
 800aaa0:	461d      	mov	r5, r3
 800aaa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaae:	682b      	ldr	r3, [r5, #0]
 800aab0:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800aab2:	4b5d      	ldr	r3, [pc, #372]	; (800ac28 <Process_Data_from_Other+0x280>)
 800aab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aab8:	4a54      	ldr	r2, [pc, #336]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aaba:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800aabc:	e04d      	b.n	800ab5a <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800aabe:	4b53      	ldr	r3, [pc, #332]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800aac4:	4b5b      	ldr	r3, [pc, #364]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f023 0301 	bic.w	r3, r3, #1
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	4b59      	ldr	r3, [pc, #356]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800aad0:	701a      	strb	r2, [r3, #0]
			break;
 800aad2:	e042      	b.n	800ab5a <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800aad4:	4b4f      	ldr	r3, [pc, #316]	; (800ac14 <Process_Data_from_Other+0x26c>)
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	4b4c      	ldr	r3, [pc, #304]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d016      	beq.n	800ab0e <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800aae0:	4855      	ldr	r0, [pc, #340]	; (800ac38 <Process_Data_from_Other+0x290>)
 800aae2:	f019 ffd5 	bl	8024a90 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800aae6:	4b49      	ldr	r3, [pc, #292]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aae8:	785b      	ldrb	r3, [r3, #1]
 800aaea:	3301      	adds	r3, #1
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	4b47      	ldr	r3, [pc, #284]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aaf0:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800aaf2:	4b46      	ldr	r3, [pc, #280]	; (800ac0c <Process_Data_from_Other+0x264>)
 800aaf4:	785b      	ldrb	r3, [r3, #1]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d931      	bls.n	800ab5e <Process_Data_from_Other+0x1b6>
 800aafa:	4b4b      	ldr	r3, [pc, #300]	; (800ac28 <Process_Data_from_Other+0x280>)
 800aafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d02c      	beq.n	800ab5e <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800ab04:	f240 2007 	movw	r0, #519	; 0x207
 800ab08:	f005 f9be 	bl	800fe88 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800ab0c:	e027      	b.n	800ab5e <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800ab0e:	4b49      	ldr	r3, [pc, #292]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f023 0301 	bic.w	r3, r3, #1
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	4b46      	ldr	r3, [pc, #280]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800ab1a:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800ab1c:	4b3b      	ldr	r3, [pc, #236]	; (800ac0c <Process_Data_from_Other+0x264>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	705a      	strb	r2, [r3, #1]
			break;
 800ab22:	e01c      	b.n	800ab5e <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800ab24:	4b3b      	ldr	r3, [pc, #236]	; (800ac14 <Process_Data_from_Other+0x26c>)
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	4b38      	ldr	r3, [pc, #224]	; (800ac0c <Process_Data_from_Other+0x264>)
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d009      	beq.n	800ab44 <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800ab30:	4841      	ldr	r0, [pc, #260]	; (800ac38 <Process_Data_from_Other+0x290>)
 800ab32:	f019 ffad 	bl	8024a90 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800ab36:	4b35      	ldr	r3, [pc, #212]	; (800ac0c <Process_Data_from_Other+0x264>)
 800ab38:	785b      	ldrb	r3, [r3, #1]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	4b33      	ldr	r3, [pc, #204]	; (800ac0c <Process_Data_from_Other+0x264>)
 800ab40:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800ab42:	e00d      	b.n	800ab60 <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800ab44:	4b3b      	ldr	r3, [pc, #236]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	f023 0301 	bic.w	r3, r3, #1
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	4b39      	ldr	r3, [pc, #228]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800ab50:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800ab52:	4b2e      	ldr	r3, [pc, #184]	; (800ac0c <Process_Data_from_Other+0x264>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	705a      	strb	r2, [r3, #1]
			break;
 800ab58:	e002      	b.n	800ab60 <Process_Data_from_Other+0x1b8>
			break;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <Process_Data_from_Other+0x1b8>
			break;
 800ab5e:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800ab60:	4b2a      	ldr	r3, [pc, #168]	; (800ac0c <Process_Data_from_Other+0x264>)
 800ab62:	785a      	ldrb	r2, [r3, #1]
 800ab64:	4b35      	ldr	r3, [pc, #212]	; (800ac3c <Process_Data_from_Other+0x294>)
 800ab66:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d312      	bcc.n	800ab94 <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800ab6e:	4b31      	ldr	r3, [pc, #196]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10c      	bne.n	800ab94 <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800ab7a:	4831      	ldr	r0, [pc, #196]	; (800ac40 <Process_Data_from_Other+0x298>)
 800ab7c:	f019 ff88 	bl	8024a90 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800ab80:	4b22      	ldr	r3, [pc, #136]	; (800ac0c <Process_Data_from_Other+0x264>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800ab86:	4b2b      	ldr	r3, [pc, #172]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	f043 0301 	orr.w	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	4b28      	ldr	r3, [pc, #160]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800ab92:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800ab94:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <Process_Data_from_Other+0x260>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f004 fbc1 	bl	800f320 <HAL_Elaps_Ticks>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	4b26      	ldr	r3, [pc, #152]	; (800ac3c <Process_Data_from_Other+0x294>)
 800aba2:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d92a      	bls.n	800ac00 <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800abaa:	4b26      	ldr	r3, [pc, #152]	; (800ac44 <Process_Data_from_Other+0x29c>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <Process_Data_from_Other+0x260>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d024      	beq.n	800ac00 <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800abb6:	4b14      	ldr	r3, [pc, #80]	; (800ac08 <Process_Data_from_Other+0x260>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a22      	ldr	r2, [pc, #136]	; (800ac44 <Process_Data_from_Other+0x29c>)
 800abbc:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800abbe:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <Process_Data_from_Other+0x260>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f004 fbac 	bl	800f320 <HAL_Elaps_Ticks>
 800abc8:	4603      	mov	r3, r0
 800abca:	4a1f      	ldr	r2, [pc, #124]	; (800ac48 <Process_Data_from_Other+0x2a0>)
 800abcc:	fba2 2303 	umull	r2, r3, r2, r3
 800abd0:	099b      	lsrs	r3, r3, #6
 800abd2:	4619      	mov	r1, r3
 800abd4:	481d      	ldr	r0, [pc, #116]	; (800ac4c <Process_Data_from_Other+0x2a4>)
 800abd6:	f019 febf 	bl	8024958 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800abda:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <Process_Data_from_Other+0x260>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4619      	mov	r1, r3
 800abe0:	481b      	ldr	r0, [pc, #108]	; (800ac50 <Process_Data_from_Other+0x2a8>)
 800abe2:	f019 feb9 	bl	8024958 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800abe6:	4b13      	ldr	r3, [pc, #76]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f003 0302 	and.w	r3, r3, #2
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800abf2:	4b10      	ldr	r3, [pc, #64]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f043 0302 	orr.w	r3, r3, #2
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <Process_Data_from_Other+0x28c>)
 800abfe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800ac00:	bf00      	nop
 800ac02:	bdb0      	pop	{r4, r5, r7, pc}
 800ac04:	200028c0 	.word	0x200028c0
 800ac08:	200021ac 	.word	0x200021ac
 800ac0c:	20002704 	.word	0x20002704
 800ac10:	200021aa 	.word	0x200021aa
 800ac14:	2000270c 	.word	0x2000270c
 800ac18:	200021a9 	.word	0x200021a9
 800ac1c:	08027b14 	.word	0x08027b14
 800ac20:	08027b2c 	.word	0x08027b2c
 800ac24:	08027b44 	.word	0x08027b44
 800ac28:	2000271c 	.word	0x2000271c
 800ac2c:	200027a0 	.word	0x200027a0
 800ac30:	200026c0 	.word	0x200026c0
 800ac34:	200026f4 	.word	0x200026f4
 800ac38:	08027b78 	.word	0x08027b78
 800ac3c:	20000304 	.word	0x20000304
 800ac40:	08027b9c 	.word	0x08027b9c
 800ac44:	200028c4 	.word	0x200028c4
 800ac48:	10624dd3 	.word	0x10624dd3
 800ac4c:	08027bb4 	.word	0x08027bb4
 800ac50:	08027be4 	.word	0x08027be4

0800ac54 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800ac58:	482a      	ldr	r0, [pc, #168]	; (800ad04 <Print_Medha_Self_Details+0xb0>)
 800ac5a:	f019 ff19 	bl	8024a90 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800ac5e:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800ac60:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800ac64:	4619      	mov	r1, r3
 800ac66:	4829      	ldr	r0, [pc, #164]	; (800ad0c <Print_Medha_Self_Details+0xb8>)
 800ac68:	f019 fe76 	bl	8024958 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800ac6c:	4b26      	ldr	r3, [pc, #152]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800ac6e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800ac72:	4619      	mov	r1, r3
 800ac74:	4826      	ldr	r0, [pc, #152]	; (800ad10 <Print_Medha_Self_Details+0xbc>)
 800ac76:	f019 fe6f 	bl	8024958 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800ac7a:	4b23      	ldr	r3, [pc, #140]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800ac7c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac80:	4619      	mov	r1, r3
 800ac82:	4824      	ldr	r0, [pc, #144]	; (800ad14 <Print_Medha_Self_Details+0xc0>)
 800ac84:	f019 fe68 	bl	8024958 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800ac88:	4b1f      	ldr	r3, [pc, #124]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800ac8a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4821      	ldr	r0, [pc, #132]	; (800ad18 <Print_Medha_Self_Details+0xc4>)
 800ac92:	f019 fe61 	bl	8024958 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800ac96:	4b1c      	ldr	r3, [pc, #112]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800ac98:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	481f      	ldr	r0, [pc, #124]	; (800ad1c <Print_Medha_Self_Details+0xc8>)
 800aca0:	f019 fe5a 	bl	8024958 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800aca4:	4b18      	ldr	r3, [pc, #96]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800aca6:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800acaa:	4619      	mov	r1, r3
 800acac:	481c      	ldr	r0, [pc, #112]	; (800ad20 <Print_Medha_Self_Details+0xcc>)
 800acae:	f019 fe53 	bl	8024958 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800acb2:	4b15      	ldr	r3, [pc, #84]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800acb4:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800acb8:	4619      	mov	r1, r3
 800acba:	481a      	ldr	r0, [pc, #104]	; (800ad24 <Print_Medha_Self_Details+0xd0>)
 800acbc:	f019 fe4c 	bl	8024958 <iprintf>
	printf("NoofRelays                    :%lu\n",EI_data.Medha_Prms_st.NoofRelays);
 800acc0:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800acc2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800acc6:	4619      	mov	r1, r3
 800acc8:	4817      	ldr	r0, [pc, #92]	; (800ad28 <Print_Medha_Self_Details+0xd4>)
 800acca:	f019 fe45 	bl	8024958 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800acce:	4b0e      	ldr	r3, [pc, #56]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800acd0:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800acd4:	4619      	mov	r1, r3
 800acd6:	4815      	ldr	r0, [pc, #84]	; (800ad2c <Print_Medha_Self_Details+0xd8>)
 800acd8:	f019 fe3e 	bl	8024958 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800acde:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800ace2:	4619      	mov	r1, r3
 800ace4:	4812      	ldr	r0, [pc, #72]	; (800ad30 <Print_Medha_Self_Details+0xdc>)
 800ace6:	f019 fe37 	bl	8024958 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <Print_Medha_Self_Details+0xb4>)
 800acec:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800acf0:	4619      	mov	r1, r3
 800acf2:	4810      	ldr	r0, [pc, #64]	; (800ad34 <Print_Medha_Self_Details+0xe0>)
 800acf4:	f019 fe30 	bl	8024958 <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800acf8:	4802      	ldr	r0, [pc, #8]	; (800ad04 <Print_Medha_Self_Details+0xb0>)
 800acfa:	f019 fec9 	bl	8024a90 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800acfe:	bf00      	nop
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	08027c0c 	.word	0x08027c0c
 800ad08:	20000304 	.word	0x20000304
 800ad0c:	08027c60 	.word	0x08027c60
 800ad10:	08027c84 	.word	0x08027c84
 800ad14:	08027ca8 	.word	0x08027ca8
 800ad18:	08027ccc 	.word	0x08027ccc
 800ad1c:	08027cf0 	.word	0x08027cf0
 800ad20:	08027d14 	.word	0x08027d14
 800ad24:	08027d38 	.word	0x08027d38
 800ad28:	08027d5c 	.word	0x08027d5c
 800ad2c:	08027d80 	.word	0x08027d80
 800ad30:	08027da4 	.word	0x08027da4
 800ad34:	08027dc8 	.word	0x08027dc8

0800ad38 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b09a      	sub	sp, #104	; 0x68
 800ad3c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800ad50:	2300      	movs	r3, #0
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	1d3b      	adds	r3, r7, #4
 800ad56:	2260      	movs	r2, #96	; 0x60
 800ad58:	2100      	movs	r1, #0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f019 fd14 	bl	8024788 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800ad60:	4bb9      	ldr	r3, [pc, #740]	; (800b048 <CheckforMedhaCMD+0x310>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f004 fadb 	bl	800f320 <HAL_Elaps_Ticks>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b09      	cmp	r3, #9
 800ad6e:	f240 81ad 	bls.w	800b0cc <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800ad72:	e010      	b.n	800ad96 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800ad74:	2000      	movs	r0, #0
 800ad76:	f00c fabd 	bl	80172f4 <Com_Get_Byte>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800ad80:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800ad8a:	3368      	adds	r3, #104	; 0x68
 800ad8c:	443b      	add	r3, r7
 800ad8e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ad92:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800ad96:	2000      	movs	r0, #0
 800ad98:	f00c fa6c 	bl	8017274 <Com_DataReady>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e8      	bne.n	800ad74 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800ada2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 8144 	beq.w	800b034 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800adac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800adb0:	3368      	adds	r3, #104	; 0x68
 800adb2:	443b      	add	r3, r7
 800adb4:	2200      	movs	r2, #0
 800adb6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800adba:	463b      	mov	r3, r7
 800adbc:	4619      	mov	r1, r3
 800adbe:	48a3      	ldr	r0, [pc, #652]	; (800b04c <CheckforMedhaCMD+0x314>)
 800adc0:	f019 fdca 	bl	8024958 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800adc4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800adc8:	463b      	mov	r3, r7
 800adca:	4611      	mov	r1, r2
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fa0d 	bl	800b1ec <Is_MedhaCommand_Valid>
 800add2:	4603      	mov	r3, r0
 800add4:	2b0c      	cmp	r3, #12
 800add6:	f200 8129 	bhi.w	800b02c <CheckforMedhaCMD+0x2f4>
 800adda:	a201      	add	r2, pc, #4	; (adr r2, 800ade0 <CheckforMedhaCMD+0xa8>)
 800addc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade0:	0800ae15 	.word	0x0800ae15
 800ade4:	0800ae23 	.word	0x0800ae23
 800ade8:	0800ae87 	.word	0x0800ae87
 800adec:	0800aea9 	.word	0x0800aea9
 800adf0:	0800aed1 	.word	0x0800aed1
 800adf4:	0800aef9 	.word	0x0800aef9
 800adf8:	0800af21 	.word	0x0800af21
 800adfc:	0800af49 	.word	0x0800af49
 800ae00:	0800af71 	.word	0x0800af71
 800ae04:	0800af99 	.word	0x0800af99
 800ae08:	0800afc1 	.word	0x0800afc1
 800ae0c:	0800afe9 	.word	0x0800afe9
 800ae10:	0800b011 	.word	0x0800b011
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800ae14:	4b8e      	ldr	r3, [pc, #568]	; (800b050 <CheckforMedhaCMD+0x318>)
 800ae16:	2201      	movs	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800ae1a:	488e      	ldr	r0, [pc, #568]	; (800b054 <CheckforMedhaCMD+0x31c>)
 800ae1c:	f019 fe38 	bl	8024a90 <puts>
				break;
 800ae20:	e109      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800ae22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ae26:	3b01      	subs	r3, #1
 800ae28:	3368      	adds	r3, #104	; 0x68
 800ae2a:	443b      	add	r3, r7
 800ae2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800ae30:	3b30      	subs	r3, #48	; 0x30
 800ae32:	461a      	mov	r2, r3
 800ae34:	4988      	ldr	r1, [pc, #544]	; (800b058 <CheckforMedhaCMD+0x320>)
 800ae36:	4889      	ldr	r0, [pc, #548]	; (800b05c <CheckforMedhaCMD+0x324>)
 800ae38:	f019 fd8e 	bl	8024958 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800ae3c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ae40:	3b01      	subs	r3, #1
 800ae42:	3368      	adds	r3, #104	; 0x68
 800ae44:	443b      	add	r3, r7
 800ae46:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800ae4a:	2b2f      	cmp	r3, #47	; 0x2f
 800ae4c:	d914      	bls.n	800ae78 <CheckforMedhaCMD+0x140>
 800ae4e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ae52:	3b01      	subs	r3, #1
 800ae54:	3368      	adds	r3, #104	; 0x68
 800ae56:	443b      	add	r3, r7
 800ae58:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800ae5c:	2b32      	cmp	r3, #50	; 0x32
 800ae5e:	d80b      	bhi.n	800ae78 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800ae60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ae64:	3b01      	subs	r3, #1
 800ae66:	3368      	adds	r3, #104	; 0x68
 800ae68:	443b      	add	r3, r7
 800ae6a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800ae6e:	3b30      	subs	r3, #48	; 0x30
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	4b7b      	ldr	r3, [pc, #492]	; (800b060 <CheckforMedhaCMD+0x328>)
 800ae74:	701a      	strb	r2, [r3, #0]
 800ae76:	e002      	b.n	800ae7e <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800ae78:	487a      	ldr	r0, [pc, #488]	; (800b064 <CheckforMedhaCMD+0x32c>)
 800ae7a:	f019 fe09 	bl	8024a90 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ae84:	e0d7      	b.n	800b036 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800ae86:	4978      	ldr	r1, [pc, #480]	; (800b068 <CheckforMedhaCMD+0x330>)
 800ae88:	4878      	ldr	r0, [pc, #480]	; (800b06c <CheckforMedhaCMD+0x334>)
 800ae8a:	f019 fd65 	bl	8024958 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800ae8e:	4878      	ldr	r0, [pc, #480]	; (800b070 <CheckforMedhaCMD+0x338>)
 800ae90:	f019 fdfe 	bl	8024a90 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ae94:	4b77      	ldr	r3, [pc, #476]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f043 0301 	orr.w	r3, r3, #1
 800ae9c:	4a75      	ldr	r2, [pc, #468]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800ae9e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aea0:	2301      	movs	r3, #1
 800aea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aea6:	e0c6      	b.n	800b036 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800aea8:	4973      	ldr	r1, [pc, #460]	; (800b078 <CheckforMedhaCMD+0x340>)
 800aeaa:	4870      	ldr	r0, [pc, #448]	; (800b06c <CheckforMedhaCMD+0x334>)
 800aeac:	f019 fd54 	bl	8024958 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800aeb0:	4872      	ldr	r0, [pc, #456]	; (800b07c <CheckforMedhaCMD+0x344>)
 800aeb2:	f019 fded 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aeb6:	4b6f      	ldr	r3, [pc, #444]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aebc:	4b6d      	ldr	r3, [pc, #436]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f043 0302 	orr.w	r3, r3, #2
 800aec4:	4a6b      	ldr	r2, [pc, #428]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800aec6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aece:	e0b2      	b.n	800b036 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800aed0:	496b      	ldr	r1, [pc, #428]	; (800b080 <CheckforMedhaCMD+0x348>)
 800aed2:	4866      	ldr	r0, [pc, #408]	; (800b06c <CheckforMedhaCMD+0x334>)
 800aed4:	f019 fd40 	bl	8024958 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800aed8:	486a      	ldr	r0, [pc, #424]	; (800b084 <CheckforMedhaCMD+0x34c>)
 800aeda:	f019 fdd9 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aede:	4b65      	ldr	r3, [pc, #404]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aee4:	4b63      	ldr	r3, [pc, #396]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f043 0304 	orr.w	r3, r3, #4
 800aeec:	4a61      	ldr	r2, [pc, #388]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800aeee:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aef6:	e09e      	b.n	800b036 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800aef8:	4963      	ldr	r1, [pc, #396]	; (800b088 <CheckforMedhaCMD+0x350>)
 800aefa:	485c      	ldr	r0, [pc, #368]	; (800b06c <CheckforMedhaCMD+0x334>)
 800aefc:	f019 fd2c 	bl	8024958 <iprintf>
				printf("INVALID_DES_PORT\n");
 800af00:	4862      	ldr	r0, [pc, #392]	; (800b08c <CheckforMedhaCMD+0x354>)
 800af02:	f019 fdc5 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800af06:	4b5b      	ldr	r3, [pc, #364]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800af0c:	4b59      	ldr	r3, [pc, #356]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f043 0308 	orr.w	r3, r3, #8
 800af14:	4a57      	ldr	r2, [pc, #348]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af16:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800af1e:	e08a      	b.n	800b036 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800af20:	495b      	ldr	r1, [pc, #364]	; (800b090 <CheckforMedhaCMD+0x358>)
 800af22:	4852      	ldr	r0, [pc, #328]	; (800b06c <CheckforMedhaCMD+0x334>)
 800af24:	f019 fd18 	bl	8024958 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800af28:	485a      	ldr	r0, [pc, #360]	; (800b094 <CheckforMedhaCMD+0x35c>)
 800af2a:	f019 fdb1 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800af2e:	4b51      	ldr	r3, [pc, #324]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800af34:	4b4f      	ldr	r3, [pc, #316]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f043 0310 	orr.w	r3, r3, #16
 800af3c:	4a4d      	ldr	r2, [pc, #308]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af3e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800af40:	2301      	movs	r3, #1
 800af42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800af46:	e076      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800af48:	4953      	ldr	r1, [pc, #332]	; (800b098 <CheckforMedhaCMD+0x360>)
 800af4a:	4848      	ldr	r0, [pc, #288]	; (800b06c <CheckforMedhaCMD+0x334>)
 800af4c:	f019 fd04 	bl	8024958 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800af50:	4852      	ldr	r0, [pc, #328]	; (800b09c <CheckforMedhaCMD+0x364>)
 800af52:	f019 fd9d 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800af56:	4b47      	ldr	r3, [pc, #284]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800af5c:	4b45      	ldr	r3, [pc, #276]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f043 0320 	orr.w	r3, r3, #32
 800af64:	4a43      	ldr	r2, [pc, #268]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af66:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800af68:	2301      	movs	r3, #1
 800af6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800af6e:	e062      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800af70:	494b      	ldr	r1, [pc, #300]	; (800b0a0 <CheckforMedhaCMD+0x368>)
 800af72:	484c      	ldr	r0, [pc, #304]	; (800b0a4 <CheckforMedhaCMD+0x36c>)
 800af74:	f019 fcf0 	bl	8024958 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800af78:	484b      	ldr	r0, [pc, #300]	; (800b0a8 <CheckforMedhaCMD+0x370>)
 800af7a:	f019 fd89 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800af7e:	4b3d      	ldr	r3, [pc, #244]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af80:	2200      	movs	r2, #0
 800af82:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800af84:	4b3b      	ldr	r3, [pc, #236]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8c:	4a39      	ldr	r2, [pc, #228]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800af8e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800af90:	2301      	movs	r3, #1
 800af92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800af96:	e04e      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800af98:	4944      	ldr	r1, [pc, #272]	; (800b0ac <CheckforMedhaCMD+0x374>)
 800af9a:	4834      	ldr	r0, [pc, #208]	; (800b06c <CheckforMedhaCMD+0x334>)
 800af9c:	f019 fcdc 	bl	8024958 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800afa0:	4843      	ldr	r0, [pc, #268]	; (800b0b0 <CheckforMedhaCMD+0x378>)
 800afa2:	f019 fd75 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800afa6:	4b33      	ldr	r3, [pc, #204]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800afac:	4b31      	ldr	r3, [pc, #196]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb4:	4a2f      	ldr	r2, [pc, #188]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800afb6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800afb8:	2301      	movs	r3, #1
 800afba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800afbe:	e03a      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800afc0:	493c      	ldr	r1, [pc, #240]	; (800b0b4 <CheckforMedhaCMD+0x37c>)
 800afc2:	482a      	ldr	r0, [pc, #168]	; (800b06c <CheckforMedhaCMD+0x334>)
 800afc4:	f019 fcc8 	bl	8024958 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800afc8:	483b      	ldr	r0, [pc, #236]	; (800b0b8 <CheckforMedhaCMD+0x380>)
 800afca:	f019 fd61 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800afce:	4b29      	ldr	r3, [pc, #164]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800afd4:	4b27      	ldr	r3, [pc, #156]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afdc:	4a25      	ldr	r2, [pc, #148]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800afde:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800afe6:	e026      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800afe8:	4934      	ldr	r1, [pc, #208]	; (800b0bc <CheckforMedhaCMD+0x384>)
 800afea:	4820      	ldr	r0, [pc, #128]	; (800b06c <CheckforMedhaCMD+0x334>)
 800afec:	f019 fcb4 	bl	8024958 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800aff0:	4833      	ldr	r0, [pc, #204]	; (800b0c0 <CheckforMedhaCMD+0x388>)
 800aff2:	f019 fd4d 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aff6:	4b1f      	ldr	r3, [pc, #124]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800affc:	4b1d      	ldr	r3, [pc, #116]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b004:	4a1b      	ldr	r2, [pc, #108]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800b006:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b008:	2301      	movs	r3, #1
 800b00a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b00e:	e012      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800b010:	492c      	ldr	r1, [pc, #176]	; (800b0c4 <CheckforMedhaCMD+0x38c>)
 800b012:	4816      	ldr	r0, [pc, #88]	; (800b06c <CheckforMedhaCMD+0x334>)
 800b014:	f019 fca0 	bl	8024958 <iprintf>
				printf("CLEAR ALL\n");
 800b018:	482b      	ldr	r0, [pc, #172]	; (800b0c8 <CheckforMedhaCMD+0x390>)
 800b01a:	f019 fd39 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b01e:	4b15      	ldr	r3, [pc, #84]	; (800b074 <CheckforMedhaCMD+0x33c>)
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800b024:	2301      	movs	r3, #1
 800b026:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b02a:	e004      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800b02c:	480d      	ldr	r0, [pc, #52]	; (800b064 <CheckforMedhaCMD+0x32c>)
 800b02e:	f019 fd2f 	bl	8024a90 <puts>
 800b032:	e000      	b.n	800b036 <CheckforMedhaCMD+0x2fe>
			}
		}
 800b034:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800b036:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d147      	bne.n	800b0ce <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800b03e:	f240 2005 	movw	r0, #517	; 0x205
 800b042:	f004 ff21 	bl	800fe88 <TransmitCanPkt>
 800b046:	e042      	b.n	800b0ce <CheckforMedhaCMD+0x396>
 800b048:	2000f74c 	.word	0x2000f74c
 800b04c:	08027dec 	.word	0x08027dec
 800b050:	2000065c 	.word	0x2000065c
 800b054:	08027e04 	.word	0x08027e04
 800b058:	200021e2 	.word	0x200021e2
 800b05c:	08027e44 	.word	0x08027e44
 800b060:	2000065d 	.word	0x2000065d
 800b064:	08027e58 	.word	0x08027e58
 800b068:	20002214 	.word	0x20002214
 800b06c:	08027e74 	.word	0x08027e74
 800b070:	08027e84 	.word	0x08027e84
 800b074:	2000356c 	.word	0x2000356c
 800b078:	20002246 	.word	0x20002246
 800b07c:	08027e9c 	.word	0x08027e9c
 800b080:	20002278 	.word	0x20002278
 800b084:	08027eb4 	.word	0x08027eb4
 800b088:	200022aa 	.word	0x200022aa
 800b08c:	08027ec8 	.word	0x08027ec8
 800b090:	200022dc 	.word	0x200022dc
 800b094:	08027edc 	.word	0x08027edc
 800b098:	2000230e 	.word	0x2000230e
 800b09c:	08027ef0 	.word	0x08027ef0
 800b0a0:	20002340 	.word	0x20002340
 800b0a4:	08027f0c 	.word	0x08027f0c
 800b0a8:	08027f24 	.word	0x08027f24
 800b0ac:	20002372 	.word	0x20002372
 800b0b0:	08027f38 	.word	0x08027f38
 800b0b4:	200023a4 	.word	0x200023a4
 800b0b8:	08027f50 	.word	0x08027f50
 800b0bc:	200023d6 	.word	0x200023d6
 800b0c0:	08027f70 	.word	0x08027f70
 800b0c4:	20002408 	.word	0x20002408
 800b0c8:	08027f90 	.word	0x08027f90
		return;
 800b0cc:	bf00      	nop
		}
	}
}
 800b0ce:	3768      	adds	r7, #104	; 0x68
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800b0de:	79fb      	ldrb	r3, [r7, #7]
 800b0e0:	4a3d      	ldr	r2, [pc, #244]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b0e2:	2132      	movs	r1, #50	; 0x32
 800b0e4:	fb01 f303 	mul.w	r3, r1, r3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	2224      	movs	r2, #36	; 0x24
 800b0ec:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	4a39      	ldr	r2, [pc, #228]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b0f2:	2132      	movs	r1, #50	; 0x32
 800b0f4:	fb01 f303 	mul.w	r3, r1, r3
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	4a35      	ldr	r2, [pc, #212]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b104:	2132      	movs	r1, #50	; 0x32
 800b106:	fb01 f303 	mul.w	r3, r1, r3
 800b10a:	4413      	add	r3, r2
 800b10c:	3302      	adds	r3, #2
 800b10e:	2230      	movs	r2, #48	; 0x30
 800b110:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	4a30      	ldr	r2, [pc, #192]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b116:	2132      	movs	r1, #50	; 0x32
 800b118:	fb01 f303 	mul.w	r3, r1, r3
 800b11c:	4413      	add	r3, r2
 800b11e:	3303      	adds	r3, #3
 800b120:	2240      	movs	r2, #64	; 0x40
 800b122:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	4a2c      	ldr	r2, [pc, #176]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b128:	2132      	movs	r1, #50	; 0x32
 800b12a:	fb01 f303 	mul.w	r3, r1, r3
 800b12e:	4413      	add	r3, r2
 800b130:	3304      	adds	r3, #4
 800b132:	22c0      	movs	r2, #192	; 0xc0
 800b134:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	4a27      	ldr	r2, [pc, #156]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b13a:	2132      	movs	r1, #50	; 0x32
 800b13c:	fb01 f303 	mul.w	r3, r1, r3
 800b140:	4413      	add	r3, r2
 800b142:	3305      	adds	r3, #5
 800b144:	224e      	movs	r2, #78	; 0x4e
 800b146:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800b148:	79fb      	ldrb	r3, [r7, #7]
 800b14a:	4a23      	ldr	r2, [pc, #140]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b14c:	2132      	movs	r1, #50	; 0x32
 800b14e:	fb01 f303 	mul.w	r3, r1, r3
 800b152:	4413      	add	r3, r2
 800b154:	3306      	adds	r3, #6
 800b156:	2226      	movs	r2, #38	; 0x26
 800b158:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	3301      	adds	r3, #1
 800b15e:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	71fa      	strb	r2, [r7, #7]
 800b166:	461a      	mov	r2, r3
 800b168:	2332      	movs	r3, #50	; 0x32
 800b16a:	fb02 f303 	mul.w	r3, r2, r3
 800b16e:	4a1a      	ldr	r2, [pc, #104]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b170:	4413      	add	r3, r2
 800b172:	491a      	ldr	r1, [pc, #104]	; (800b1dc <Update_MedhaCommands+0x108>)
 800b174:	461a      	mov	r2, r3
 800b176:	460b      	mov	r3, r1
 800b178:	cb03      	ldmia	r3!, {r0, r1}
 800b17a:	6010      	str	r0, [r2, #0]
 800b17c:	6051      	str	r1, [r2, #4]
 800b17e:	8819      	ldrh	r1, [r3, #0]
 800b180:	789b      	ldrb	r3, [r3, #2]
 800b182:	8111      	strh	r1, [r2, #8]
 800b184:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	71fa      	strb	r2, [r7, #7]
 800b18c:	461a      	mov	r2, r3
 800b18e:	2332      	movs	r3, #50	; 0x32
 800b190:	fb02 f303 	mul.w	r3, r2, r3
 800b194:	4a10      	ldr	r2, [pc, #64]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b196:	4413      	add	r3, r2
 800b198:	4911      	ldr	r1, [pc, #68]	; (800b1e0 <Update_MedhaCommands+0x10c>)
 800b19a:	461a      	mov	r2, r3
 800b19c:	460b      	mov	r3, r1
 800b19e:	cb03      	ldmia	r3!, {r0, r1}
 800b1a0:	6010      	str	r0, [r2, #0]
 800b1a2:	6051      	str	r1, [r2, #4]
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	71fa      	strb	r2, [r7, #7]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	2332      	movs	r3, #50	; 0x32
 800b1b2:	fb02 f303 	mul.w	r3, r2, r3
 800b1b6:	4a08      	ldr	r2, [pc, #32]	; (800b1d8 <Update_MedhaCommands+0x104>)
 800b1b8:	4413      	add	r3, r2
 800b1ba:	4a0a      	ldr	r2, [pc, #40]	; (800b1e4 <Update_MedhaCommands+0x110>)
 800b1bc:	6810      	ldr	r0, [r2, #0]
 800b1be:	6018      	str	r0, [r3, #0]
 800b1c0:	7912      	ldrb	r2, [r2, #4]
 800b1c2:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800b1c4:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <Update_MedhaCommands+0x114>)
 800b1c6:	79fb      	ldrb	r3, [r7, #7]
 800b1c8:	7013      	strb	r3, [r2, #0]
}
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	200021b0 	.word	0x200021b0
 800b1dc:	08027f9c 	.word	0x08027f9c
 800b1e0:	08027fa8 	.word	0x08027fa8
 800b1e4:	08027fb4 	.word	0x08027fb4
 800b1e8:	20002598 	.word	0x20002598

0800b1ec <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800b1ec:	b590      	push	{r4, r7, lr}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73fb      	strb	r3, [r7, #15]
 800b1fc:	e01c      	b.n	800b238 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	2232      	movs	r2, #50	; 0x32
 800b202:	fb02 f303 	mul.w	r3, r2, r3
 800b206:	4a11      	ldr	r2, [pc, #68]	; (800b24c <Is_MedhaCommand_Valid+0x60>)
 800b208:	189c      	adds	r4, r3, r2
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	2232      	movs	r2, #50	; 0x32
 800b20e:	fb02 f303 	mul.w	r3, r2, r3
 800b212:	4a0e      	ldr	r2, [pc, #56]	; (800b24c <Is_MedhaCommand_Valid+0x60>)
 800b214:	4413      	add	r3, r2
 800b216:	4618      	mov	r0, r3
 800b218:	f7f5 f81c 	bl	8000254 <strlen>
 800b21c:	4603      	mov	r3, r0
 800b21e:	461a      	mov	r2, r3
 800b220:	4621      	mov	r1, r4
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f019 fa78 	bl	8024718 <memcmp>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
 800b230:	e008      	b.n	800b244 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	3301      	adds	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <Is_MedhaCommand_Valid+0x64>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	7bfa      	ldrb	r2, [r7, #15]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d3dd      	bcc.n	800b1fe <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800b242:	23ff      	movs	r3, #255	; 0xff
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd90      	pop	{r4, r7, pc}
 800b24c:	200021b0 	.word	0x200021b0
 800b250:	20002598 	.word	0x20002598

0800b254 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	6039      	str	r1, [r7, #0]
 800b25e:	80fb      	strh	r3, [r7, #6]
 800b260:	4613      	mov	r3, r2
 800b262:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	613b      	str	r3, [r7, #16]
 800b274:	e015      	b.n	800b2a2 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	440b      	add	r3, r1
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	4053      	eors	r3, r2
 800b284:	b2db      	uxtb	r3, r3
 800b286:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	0a1b      	lsrs	r3, r3, #8
 800b28c:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800b28e:	4a0a      	ldr	r2, [pc, #40]	; (800b2b8 <GetCRC32+0x64>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	4053      	eors	r3, r2
 800b29a:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	613b      	str	r3, [r7, #16]
 800b2a2:	88bb      	ldrh	r3, [r7, #4]
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d3e5      	bcc.n	800b276 <GetCRC32+0x22>
	}

	return Crc;
 800b2aa:	697b      	ldr	r3, [r7, #20]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	371c      	adds	r7, #28
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	0802b2dc 	.word	0x0802b2dc

0800b2bc <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	6039      	str	r1, [r7, #0]
 800b2c6:	80fb      	strh	r3, [r7, #6]
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800b2d4:	88ba      	ldrh	r2, [r7, #4]
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff ffba 	bl	800b254 <GetCRC32>
 800b2e0:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800b2e2:	88bb      	ldrh	r3, [r7, #4]
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d101      	bne.n	800b2f8 <CheckCRC32+0x3c>
	{
		return OK;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e009      	b.n	800b30c <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4805      	ldr	r0, [pc, #20]	; (800b314 <CheckCRC32+0x58>)
 800b2fe:	f019 fb2b 	bl	8024958 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800b302:	68f9      	ldr	r1, [r7, #12]
 800b304:	4804      	ldr	r0, [pc, #16]	; (800b318 <CheckCRC32+0x5c>)
 800b306:	f019 fb27 	bl	8024958 <iprintf>
		return NOT_OK;
 800b30a:	2300      	movs	r3, #0
	}

}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	08027fbc 	.word	0x08027fbc
 800b318:	08027fd4 	.word	0x08027fd4

0800b31c <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	f107 0310 	add.w	r3, r7, #16
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	b29b      	uxth	r3, r3
 800b338:	f107 010c 	add.w	r1, r7, #12
 800b33c:	220a      	movs	r2, #10
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f846 	bl	800b3d0 <ReadAndFormMsg>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd34      	ble.n	800b3b4 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800b34a:	7b7b      	ldrb	r3, [r7, #13]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d115      	bne.n	800b37c <CheckForRqst+0x60>
 800b350:	7bbb      	ldrb	r3, [r7, #14]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d112      	bne.n	800b37c <CheckForRqst+0x60>
 800b356:	7bfb      	ldrb	r3, [r7, #15]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d10f      	bne.n	800b37c <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800b35c:	4818      	ldr	r0, [pc, #96]	; (800b3c0 <CheckForRqst+0xa4>)
 800b35e:	f019 fb97 	bl	8024a90 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800b362:	79fb      	ldrb	r3, [r7, #7]
 800b364:	2202      	movs	r2, #2
 800b366:	2101      	movs	r1, #1
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 f933 	bl	800b5d4 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800b36e:	f00c fae9 	bl	8017944 <HAL_GetTick>
 800b372:	4603      	mov	r3, r0
 800b374:	4a13      	ldr	r2, [pc, #76]	; (800b3c4 <CheckForRqst+0xa8>)
 800b376:	6013      	str	r3, [r2, #0]
			return 0x01;
 800b378:	2301      	movs	r3, #1
 800b37a:	e01c      	b.n	800b3b6 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800b37c:	7b7b      	ldrb	r3, [r7, #13]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d115      	bne.n	800b3ae <CheckForRqst+0x92>
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	2b02      	cmp	r3, #2
 800b386:	d112      	bne.n	800b3ae <CheckForRqst+0x92>
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d10f      	bne.n	800b3ae <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800b38e:	480e      	ldr	r0, [pc, #56]	; (800b3c8 <CheckForRqst+0xac>)
 800b390:	f019 fb7e 	bl	8024a90 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	2202      	movs	r2, #2
 800b398:	2102      	movs	r1, #2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 f91a 	bl	800b5d4 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800b3a0:	f00c fad0 	bl	8017944 <HAL_GetTick>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	4a07      	ldr	r2, [pc, #28]	; (800b3c4 <CheckForRqst+0xa8>)
 800b3a8:	6013      	str	r3, [r2, #0]
			return 0x02;
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e003      	b.n	800b3b6 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800b3ae:	4807      	ldr	r0, [pc, #28]	; (800b3cc <CheckForRqst+0xb0>)
 800b3b0:	f019 fb6e 	bl	8024a90 <puts>
	}
	return 0x00;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	08027fec 	.word	0x08027fec
 800b3c4:	20000a64 	.word	0x20000a64
 800b3c8:	08028004 	.word	0x08028004
 800b3cc:	0802801c 	.word	0x0802801c

0800b3d0 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	80fb      	strh	r3, [r7, #6]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800b3ec:	e0d4      	b.n	800b598 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800b3ee:	4b71      	ldr	r3, [pc, #452]	; (800b5b4 <ReadAndFormMsg+0x1e4>)
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800b3f4:	4870      	ldr	r0, [pc, #448]	; (800b5b8 <ReadAndFormMsg+0x1e8>)
 800b3f6:	f00f fe0b 	bl	801b010 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800b3fa:	88fb      	ldrh	r3, [r7, #6]
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	4618      	mov	r0, r3
 800b400:	f00b ff78 	bl	80172f4 <Com_Get_Byte>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800b408:	f00c f88a 	bl	8017520 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800b40c:	4b6b      	ldr	r3, [pc, #428]	; (800b5bc <ReadAndFormMsg+0x1ec>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b03      	cmp	r3, #3
 800b412:	f000 8099 	beq.w	800b548 <ReadAndFormMsg+0x178>
 800b416:	2b03      	cmp	r3, #3
 800b418:	f300 80b0 	bgt.w	800b57c <ReadAndFormMsg+0x1ac>
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d002      	beq.n	800b426 <ReadAndFormMsg+0x56>
 800b420:	2b02      	cmp	r3, #2
 800b422:	d00e      	beq.n	800b442 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800b424:	e0aa      	b.n	800b57c <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800b426:	7bfb      	ldrb	r3, [r7, #15]
 800b428:	2b24      	cmp	r3, #36	; 0x24
 800b42a:	f040 80a9 	bne.w	800b580 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	7bfa      	ldrb	r2, [r7, #15]
 800b432:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800b434:	4b62      	ldr	r3, [pc, #392]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b436:	2201      	movs	r2, #1
 800b438:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b43a:	4b60      	ldr	r3, [pc, #384]	; (800b5bc <ReadAndFormMsg+0x1ec>)
 800b43c:	2202      	movs	r2, #2
 800b43e:	701a      	strb	r2, [r3, #0]
			break;
 800b440:	e09e      	b.n	800b580 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800b442:	7bfb      	ldrb	r3, [r7, #15]
 800b444:	2b26      	cmp	r3, #38	; 0x26
 800b446:	d006      	beq.n	800b456 <ReadAndFormMsg+0x86>
 800b448:	2b26      	cmp	r3, #38	; 0x26
 800b44a:	dc6e      	bgt.n	800b52a <ReadAndFormMsg+0x15a>
 800b44c:	2b05      	cmp	r3, #5
 800b44e:	d068      	beq.n	800b522 <ReadAndFormMsg+0x152>
 800b450:	2b24      	cmp	r3, #36	; 0x24
 800b452:	d05c      	beq.n	800b50e <ReadAndFormMsg+0x13e>
 800b454:	e069      	b.n	800b52a <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800b456:	4b5a      	ldr	r3, [pc, #360]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	3b02      	subs	r3, #2
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800b460:	4b57      	ldr	r3, [pc, #348]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800b466:	4b56      	ldr	r3, [pc, #344]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b468:	2200      	movs	r2, #0
 800b46a:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b46c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	da01      	bge.n	800b478 <ReadAndFormMsg+0xa8>
					return 0;
 800b474:	2300      	movs	r3, #0
 800b476:	e099      	b.n	800b5ac <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800b478:	4b50      	ldr	r3, [pc, #320]	; (800b5bc <ReadAndFormMsg+0x1ec>)
 800b47a:	2201      	movs	r2, #1
 800b47c:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800b47e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800b482:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	4413      	add	r3, r2
 800b48a:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800b48c:	461c      	mov	r4, r3
 800b48e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b492:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800b494:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b498:	3301      	adds	r3, #1
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	4413      	add	r3, r2
 800b49e:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	4847      	ldr	r0, [pc, #284]	; (800b5c4 <ReadAndFormMsg+0x1f4>)
 800b4a8:	f019 fa56 	bl	8024958 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b4ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6838      	ldr	r0, [r7, #0]
 800b4b4:	f008 fbd0 	bl	8013c58 <CheckCRC>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d012      	beq.n	800b4e4 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b4be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	483b      	ldr	r0, [pc, #236]	; (800b5c8 <ReadAndFormMsg+0x1f8>)
 800b4da:	f019 fa3d 	bl	8024958 <iprintf>
					return us_ReturnBytes;
 800b4de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4e2:	e063      	b.n	800b5ac <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800b4e4:	4839      	ldr	r0, [pc, #228]	; (800b5cc <ReadAndFormMsg+0x1fc>)
 800b4e6:	f019 fa37 	bl	8024958 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b4ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	4413      	add	r3, r2
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	4832      	ldr	r0, [pc, #200]	; (800b5d0 <ReadAndFormMsg+0x200>)
 800b506:	f019 fa27 	bl	8024958 <iprintf>
					return 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e04e      	b.n	800b5ac <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	7bfa      	ldrb	r2, [r7, #15]
 800b512:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800b514:	4b2a      	ldr	r3, [pc, #168]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b516:	2201      	movs	r2, #1
 800b518:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b51a:	4b28      	ldr	r3, [pc, #160]	; (800b5bc <ReadAndFormMsg+0x1ec>)
 800b51c:	2202      	movs	r2, #2
 800b51e:	701a      	strb	r2, [r3, #0]
				break;
 800b520:	e011      	b.n	800b546 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800b522:	4b26      	ldr	r3, [pc, #152]	; (800b5bc <ReadAndFormMsg+0x1ec>)
 800b524:	2203      	movs	r2, #3
 800b526:	701a      	strb	r2, [r3, #0]
				break;
 800b528:	e00d      	b.n	800b546 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800b52a:	4b25      	ldr	r3, [pc, #148]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	4413      	add	r3, r2
 800b534:	7bfa      	ldrb	r2, [r7, #15]
 800b536:	701a      	strb	r2, [r3, #0]
				j++;
 800b538:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	3301      	adds	r3, #1
 800b53e:	b29a      	uxth	r2, r3
 800b540:	4b1f      	ldr	r3, [pc, #124]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b542:	801a      	strh	r2, [r3, #0]
				break;
 800b544:	bf00      	nop
			break;
 800b546:	e01c      	b.n	800b582 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	2b24      	cmp	r3, #36	; 0x24
 800b54c:	d005      	beq.n	800b55a <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	2b26      	cmp	r3, #38	; 0x26
 800b552:	d002      	beq.n	800b55a <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	2b05      	cmp	r3, #5
 800b558:	d10c      	bne.n	800b574 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800b55a:	4b19      	ldr	r3, [pc, #100]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	4413      	add	r3, r2
 800b564:	7bfa      	ldrb	r2, [r7, #15]
 800b566:	701a      	strb	r2, [r3, #0]
					j++;
 800b568:	4b15      	ldr	r3, [pc, #84]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	3301      	adds	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	4b13      	ldr	r3, [pc, #76]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b572:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b574:	4b11      	ldr	r3, [pc, #68]	; (800b5bc <ReadAndFormMsg+0x1ec>)
 800b576:	2202      	movs	r2, #2
 800b578:	701a      	strb	r2, [r3, #0]
				break;
 800b57a:	e002      	b.n	800b582 <ReadAndFormMsg+0x1b2>
				break;
 800b57c:	bf00      	nop
 800b57e:	e000      	b.n	800b582 <ReadAndFormMsg+0x1b2>
			break;
 800b580:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800b582:	4b0f      	ldr	r3, [pc, #60]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	88ba      	ldrh	r2, [r7, #4]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d805      	bhi.n	800b598 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800b58c:	4b0b      	ldr	r3, [pc, #44]	; (800b5bc <ReadAndFormMsg+0x1ec>)
 800b58e:	2201      	movs	r2, #1
 800b590:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800b592:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <ReadAndFormMsg+0x1f0>)
 800b594:	2200      	movs	r2, #0
 800b596:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	4618      	mov	r0, r3
 800b59e:	f00b fe69 	bl	8017274 <Com_DataReady>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f47f af22 	bne.w	800b3ee <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd90      	pop	{r4, r7, pc}
 800b5b4:	20000a62 	.word	0x20000a62
 800b5b8:	20009d64 	.word	0x20009d64
 800b5bc:	20000117 	.word	0x20000117
 800b5c0:	200028c8 	.word	0x200028c8
 800b5c4:	0802802c 	.word	0x0802802c
 800b5c8:	08028054 	.word	0x08028054
 800b5cc:	08028068 	.word	0x08028068
 800b5d0:	08028074 	.word	0x08028074

0800b5d4 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	71fb      	strb	r3, [r7, #7]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	71bb      	strb	r3, [r7, #6]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60bb      	str	r3, [r7, #8]
 800b5ee:	f107 030c 	add.w	r3, r7, #12
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800b5f8:	2324      	movs	r3, #36	; 0x24
 800b5fa:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800b5fc:	79bb      	ldrb	r3, [r7, #6]
 800b5fe:	121b      	asrs	r3, r3, #8
 800b600:	b2db      	uxtb	r3, r3
 800b602:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800b604:	79bb      	ldrb	r3, [r7, #6]
 800b606:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800b608:	797b      	ldrb	r3, [r7, #5]
 800b60a:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800b60c:	f107 0308 	add.w	r3, r7, #8
 800b610:	2104      	movs	r1, #4
 800b612:	4618      	mov	r0, r3
 800b614:	f008 fbca 	bl	8013dac <ComputeCRC>
	puc_Message[6]= '&';
 800b618:	2326      	movs	r3, #38	; 0x26
 800b61a:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800b61c:	7b3b      	ldrb	r3, [r7, #12]
 800b61e:	4619      	mov	r1, r3
 800b620:	7b7b      	ldrb	r3, [r7, #13]
 800b622:	461a      	mov	r2, r3
 800b624:	480f      	ldr	r0, [pc, #60]	; (800b664 <SendAck+0x90>)
 800b626:	f019 f997 	bl	8024958 <iprintf>

	AckTim=HAL_GetTick();
 800b62a:	f00c f98b 	bl	8017944 <HAL_GetTick>
 800b62e:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b630:	e002      	b.n	800b638 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800b632:	480d      	ldr	r0, [pc, #52]	; (800b668 <SendAck+0x94>)
 800b634:	f00f fcec 	bl	801b010 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b638:	6978      	ldr	r0, [r7, #20]
 800b63a:	f003 fe71 	bl	800f320 <HAL_Elaps_Ticks>
 800b63e:	4603      	mov	r3, r0
 800b640:	f240 52db 	movw	r2, #1499	; 0x5db
 800b644:	4293      	cmp	r3, r2
 800b646:	d9f4      	bls.n	800b632 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800b648:	f107 0108 	add.w	r1, r7, #8
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	2206      	movs	r2, #6
 800b650:	4618      	mov	r0, r3
 800b652:	f00b fecf 	bl	80173f4 <CommTransmitMessage>

	AckTim = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
}
 800b65a:	bf00      	nop
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	08028080 	.word	0x08028080
 800b668:	20009d64 	.word	0x20009d64

0800b66c <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	80fb      	strh	r3, [r7, #6]
 800b678:	4613      	mov	r3, r2
 800b67a:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800b680:	2300      	movs	r3, #0
 800b682:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800b684:	2300      	movs	r3, #0
 800b686:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800b688:	e0ba      	b.n	800b800 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800b68a:	88fb      	ldrh	r3, [r7, #6]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	4618      	mov	r0, r3
 800b690:	f00b fe30 	bl	80172f4 <Com_Get_Byte>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800b698:	f00b ff42 	bl	8017520 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800b69c:	485f      	ldr	r0, [pc, #380]	; (800b81c <ReadAndFormConfig+0x1b0>)
 800b69e:	f00f fcb7 	bl	801b010 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800b6a2:	4b5f      	ldr	r3, [pc, #380]	; (800b820 <ReadAndFormConfig+0x1b4>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	f000 8082 	beq.w	800b7b0 <ReadAndFormConfig+0x144>
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	f300 8099 	bgt.w	800b7e4 <ReadAndFormConfig+0x178>
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d002      	beq.n	800b6bc <ReadAndFormConfig+0x50>
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d00e      	beq.n	800b6d8 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800b6ba:	e093      	b.n	800b7e4 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	2b24      	cmp	r3, #36	; 0x24
 800b6c0:	f040 8092 	bne.w	800b7e8 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	7bfa      	ldrb	r2, [r7, #15]
 800b6c8:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b6ca:	4b56      	ldr	r3, [pc, #344]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b6d0:	4b53      	ldr	r3, [pc, #332]	; (800b820 <ReadAndFormConfig+0x1b4>)
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	701a      	strb	r2, [r3, #0]
			break;
 800b6d6:	e087      	b.n	800b7e8 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
 800b6da:	2b26      	cmp	r3, #38	; 0x26
 800b6dc:	d006      	beq.n	800b6ec <ReadAndFormConfig+0x80>
 800b6de:	2b26      	cmp	r3, #38	; 0x26
 800b6e0:	dc57      	bgt.n	800b792 <ReadAndFormConfig+0x126>
 800b6e2:	2b05      	cmp	r3, #5
 800b6e4:	d051      	beq.n	800b78a <ReadAndFormConfig+0x11e>
 800b6e6:	2b24      	cmp	r3, #36	; 0x24
 800b6e8:	d045      	beq.n	800b776 <ReadAndFormConfig+0x10a>
 800b6ea:	e052      	b.n	800b792 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800b6ec:	4b4d      	ldr	r3, [pc, #308]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	3b02      	subs	r3, #2
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800b6f6:	4b4b      	ldr	r3, [pc, #300]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800b6fc:	4b49      	ldr	r3, [pc, #292]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	da01      	bge.n	800b70e <ReadAndFormConfig+0xa2>
					return 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e082      	b.n	800b814 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800b70e:	4b44      	ldr	r3, [pc, #272]	; (800b820 <ReadAndFormConfig+0x1b4>)
 800b710:	2201      	movs	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b714:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b718:	4619      	mov	r1, r3
 800b71a:	6838      	ldr	r0, [r7, #0]
 800b71c:	f008 fa9c 	bl	8013c58 <CheckCRC>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d012      	beq.n	800b74c <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b726:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	4413      	add	r3, r2
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	4619      	mov	r1, r3
 800b732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b736:	3301      	adds	r3, #1
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	4413      	add	r3, r2
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	4839      	ldr	r0, [pc, #228]	; (800b828 <ReadAndFormConfig+0x1bc>)
 800b742:	f019 f909 	bl	8024958 <iprintf>
					return us_ReturnBytes;
 800b746:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b74a:	e063      	b.n	800b814 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800b74c:	4837      	ldr	r0, [pc, #220]	; (800b82c <ReadAndFormConfig+0x1c0>)
 800b74e:	f019 f903 	bl	8024958 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b752:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	4413      	add	r3, r2
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	4619      	mov	r1, r3
 800b75e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b762:	3301      	adds	r3, #1
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	4413      	add	r3, r2
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	4830      	ldr	r0, [pc, #192]	; (800b830 <ReadAndFormConfig+0x1c4>)
 800b76e:	f019 f8f3 	bl	8024958 <iprintf>
					return 0;
 800b772:	2300      	movs	r3, #0
 800b774:	e04e      	b.n	800b814 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	7bfa      	ldrb	r2, [r7, #15]
 800b77a:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b77c:	4b29      	ldr	r3, [pc, #164]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b77e:	2201      	movs	r2, #1
 800b780:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b782:	4b27      	ldr	r3, [pc, #156]	; (800b820 <ReadAndFormConfig+0x1b4>)
 800b784:	2202      	movs	r2, #2
 800b786:	701a      	strb	r2, [r3, #0]
				break;
 800b788:	e011      	b.n	800b7ae <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800b78a:	4b25      	ldr	r3, [pc, #148]	; (800b820 <ReadAndFormConfig+0x1b4>)
 800b78c:	2203      	movs	r2, #3
 800b78e:	701a      	strb	r2, [r3, #0]
				break;
 800b790:	e00d      	b.n	800b7ae <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800b792:	4b24      	ldr	r3, [pc, #144]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b794:	881b      	ldrh	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	4413      	add	r3, r2
 800b79c:	7bfa      	ldrb	r2, [r7, #15]
 800b79e:	701a      	strb	r2, [r3, #0]
				i++;
 800b7a0:	4b20      	ldr	r3, [pc, #128]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	4b1e      	ldr	r3, [pc, #120]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b7aa:	801a      	strh	r2, [r3, #0]
				break;
 800b7ac:	bf00      	nop
			break;
 800b7ae:	e01c      	b.n	800b7ea <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
 800b7b2:	2b24      	cmp	r3, #36	; 0x24
 800b7b4:	d005      	beq.n	800b7c2 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	2b26      	cmp	r3, #38	; 0x26
 800b7ba:	d002      	beq.n	800b7c2 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
 800b7be:	2b05      	cmp	r3, #5
 800b7c0:	d10c      	bne.n	800b7dc <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800b7c2:	4b18      	ldr	r3, [pc, #96]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	7bfa      	ldrb	r2, [r7, #15]
 800b7ce:	701a      	strb	r2, [r3, #0]
					i++;
 800b7d0:	4b14      	ldr	r3, [pc, #80]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	4b12      	ldr	r3, [pc, #72]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b7da:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b7dc:	4b10      	ldr	r3, [pc, #64]	; (800b820 <ReadAndFormConfig+0x1b4>)
 800b7de:	2202      	movs	r2, #2
 800b7e0:	701a      	strb	r2, [r3, #0]
				break;
 800b7e2:	e002      	b.n	800b7ea <ReadAndFormConfig+0x17e>
				break;
 800b7e4:	bf00      	nop
 800b7e6:	e000      	b.n	800b7ea <ReadAndFormConfig+0x17e>
			break;
 800b7e8:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800b7ea:	4b0e      	ldr	r3, [pc, #56]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	88ba      	ldrh	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d805      	bhi.n	800b800 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800b7f4:	4b0a      	ldr	r3, [pc, #40]	; (800b820 <ReadAndFormConfig+0x1b4>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800b7fa:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <ReadAndFormConfig+0x1b8>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b800:	88fb      	ldrh	r3, [r7, #6]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	4618      	mov	r0, r3
 800b806:	f00b fd35 	bl	8017274 <Com_DataReady>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f47f af3c 	bne.w	800b68a <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	20009d64 	.word	0x20009d64
 800b820:	20000118 	.word	0x20000118
 800b824:	200028ca 	.word	0x200028ca
 800b828:	0802809c 	.word	0x0802809c
 800b82c:	08028068 	.word	0x08028068
 800b830:	080280b0 	.word	0x080280b0

0800b834 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800b83e:	79fb      	ldrb	r3, [r7, #7]
 800b840:	091b      	lsrs	r3, r3, #4
 800b842:	b2db      	uxtb	r3, r3
 800b844:	461a      	mov	r2, r3
 800b846:	0092      	lsls	r2, r2, #2
 800b848:	4413      	add	r3, r2
 800b84a:	005b      	lsls	r3, r3, #1
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	f003 030f 	and.w	r3, r3, #15
 800b854:	b2db      	uxtb	r3, r3
 800b856:	4413      	add	r3, r2
 800b858:	b2db      	uxtb	r3, r3
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
	...

0800b868 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	4a0d      	ldr	r2, [pc, #52]	; (800b8ac <Dec_to_BCD+0x44>)
 800b876:	fba2 2303 	umull	r2, r3, r2, r3
 800b87a:	08db      	lsrs	r3, r3, #3
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	011b      	lsls	r3, r3, #4
 800b880:	b2d8      	uxtb	r0, r3
 800b882:	79fa      	ldrb	r2, [r7, #7]
 800b884:	4b09      	ldr	r3, [pc, #36]	; (800b8ac <Dec_to_BCD+0x44>)
 800b886:	fba3 1302 	umull	r1, r3, r3, r2
 800b88a:	08d9      	lsrs	r1, r3, #3
 800b88c:	460b      	mov	r3, r1
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	440b      	add	r3, r1
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	b2db      	uxtb	r3, r3
 800b898:	4403      	add	r3, r0
 800b89a:	71fb      	strb	r3, [r7, #7]
	return c;
 800b89c:	79fb      	ldrb	r3, [r7, #7]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	cccccccd 	.word	0xcccccccd

0800b8b0 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800b8b4:	4b0b      	ldr	r3, [pc, #44]	; (800b8e4 <Is_GPS_Valid+0x34>)
 800b8b6:	795b      	ldrb	r3, [r3, #5]
 800b8b8:	2b09      	cmp	r3, #9
 800b8ba:	d801      	bhi.n	800b8c0 <Is_GPS_Valid+0x10>
	{
		return 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e00c      	b.n	800b8da <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800b8c0:	4b08      	ldr	r3, [pc, #32]	; (800b8e4 <Is_GPS_Valid+0x34>)
 800b8c2:	791b      	ldrb	r3, [r3, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <Is_GPS_Valid+0x1c>
	{
		return 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e006      	b.n	800b8da <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800b8cc:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <Is_GPS_Valid+0x34>)
 800b8ce:	78db      	ldrb	r3, [r3, #3]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <Is_GPS_Valid+0x28>
	{
		return 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e000      	b.n	800b8da <Is_GPS_Valid+0x2a>
	}
	return 1;
 800b8d8:	2301      	movs	r3, #1
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	200028cc 	.word	0x200028cc

0800b8e8 <Write_RTC>:


void Write_RTC(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	603b      	str	r3, [r7, #0]
 800b8f2:	1d3b      	adds	r3, r7, #4
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	460a      	mov	r2, r1
 800b8f8:	801a      	strh	r2, [r3, #0]
 800b8fa:	460a      	mov	r2, r1
 800b8fc:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800b8fe:	f7ff ffd7 	bl	800b8b0 <Is_GPS_Valid>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d103      	bne.n	800b910 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800b908:	4844      	ldr	r0, [pc, #272]	; (800ba1c <Write_RTC+0x134>)
 800b90a:	f019 f8c1 	bl	8024a90 <puts>
 800b90e:	e081      	b.n	800ba14 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800b910:	4b43      	ldr	r3, [pc, #268]	; (800ba20 <Write_RTC+0x138>)
 800b912:	2201      	movs	r2, #1
 800b914:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800b916:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <Write_RTC+0x13c>)
 800b918:	789b      	ldrb	r3, [r3, #2]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff ffa4 	bl	800b868 <Dec_to_BCD>
 800b920:	4603      	mov	r3, r0
 800b922:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800b924:	4b3f      	ldr	r3, [pc, #252]	; (800ba24 <Write_RTC+0x13c>)
 800b926:	785b      	ldrb	r3, [r3, #1]
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff ff9d 	bl	800b868 <Dec_to_BCD>
 800b92e:	4603      	mov	r3, r0
 800b930:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800b932:	4b3c      	ldr	r3, [pc, #240]	; (800ba24 <Write_RTC+0x13c>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff ff96 	bl	800b868 <Dec_to_BCD>
 800b93c:	4603      	mov	r3, r0
 800b93e:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b940:	4b38      	ldr	r3, [pc, #224]	; (800ba24 <Write_RTC+0x13c>)
 800b942:	78db      	ldrb	r3, [r3, #3]
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff ff8f 	bl	800b868 <Dec_to_BCD>
 800b94a:	4603      	mov	r3, r0
 800b94c:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b94e:	4b35      	ldr	r3, [pc, #212]	; (800ba24 <Write_RTC+0x13c>)
 800b950:	791b      	ldrb	r3, [r3, #4]
 800b952:	4618      	mov	r0, r3
 800b954:	f7ff ff88 	bl	800b868 <Dec_to_BCD>
 800b958:	4603      	mov	r3, r0
 800b95a:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b95c:	4b31      	ldr	r3, [pc, #196]	; (800ba24 <Write_RTC+0x13c>)
 800b95e:	795b      	ldrb	r3, [r3, #5]
 800b960:	4618      	mov	r0, r3
 800b962:	f7ff ff81 	bl	800b868 <Dec_to_BCD>
 800b966:	4603      	mov	r3, r0
 800b968:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b96a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	2301      	movs	r3, #1
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	463b      	mov	r3, r7
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	2301      	movs	r3, #1
 800b97a:	2200      	movs	r2, #0
 800b97c:	21d0      	movs	r1, #208	; 0xd0
 800b97e:	482a      	ldr	r0, [pc, #168]	; (800ba28 <Write_RTC+0x140>)
 800b980:	f00e fd98 	bl	801a4b4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b988:	9302      	str	r3, [sp, #8]
 800b98a:	2301      	movs	r3, #1
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	463b      	mov	r3, r7
 800b990:	3301      	adds	r3, #1
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	2301      	movs	r3, #1
 800b996:	2201      	movs	r2, #1
 800b998:	21d0      	movs	r1, #208	; 0xd0
 800b99a:	4823      	ldr	r0, [pc, #140]	; (800ba28 <Write_RTC+0x140>)
 800b99c:	f00e fd8a 	bl	801a4b4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b9a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9a4:	9302      	str	r3, [sp, #8]
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	3302      	adds	r3, #2
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	21d0      	movs	r1, #208	; 0xd0
 800b9b6:	481c      	ldr	r0, [pc, #112]	; (800ba28 <Write_RTC+0x140>)
 800b9b8:	f00e fd7c 	bl	801a4b4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b9bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9c0:	9302      	str	r3, [sp, #8]
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	3303      	adds	r3, #3
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	2204      	movs	r2, #4
 800b9d0:	21d0      	movs	r1, #208	; 0xd0
 800b9d2:	4815      	ldr	r0, [pc, #84]	; (800ba28 <Write_RTC+0x140>)
 800b9d4:	f00e fd6e 	bl	801a4b4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b9d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9dc:	9302      	str	r3, [sp, #8]
 800b9de:	2301      	movs	r3, #1
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	463b      	mov	r3, r7
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	2205      	movs	r2, #5
 800b9ec:	21d0      	movs	r1, #208	; 0xd0
 800b9ee:	480e      	ldr	r0, [pc, #56]	; (800ba28 <Write_RTC+0x140>)
 800b9f0:	f00e fd60 	bl	801a4b4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b9f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9f8:	9302      	str	r3, [sp, #8]
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	463b      	mov	r3, r7
 800ba00:	3305      	adds	r3, #5
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	2301      	movs	r3, #1
 800ba06:	2206      	movs	r2, #6
 800ba08:	21d0      	movs	r1, #208	; 0xd0
 800ba0a:	4807      	ldr	r0, [pc, #28]	; (800ba28 <Write_RTC+0x140>)
 800ba0c:	f00e fd52 	bl	801a4b4 <HAL_I2C_Mem_Write>

	Get_time();
 800ba10:	f000 f80c 	bl	800ba2c <Get_time>

}
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	08028110 	.word	0x08028110
 800ba20:	20000e84 	.word	0x20000e84
 800ba24:	200028cc 	.word	0x200028cc
 800ba28:	20009cbc 	.word	0x20009cbc

0800ba2c <Get_time>:


void Get_time(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800ba32:	463b      	mov	r3, r7
 800ba34:	2207      	movs	r2, #7
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f018 fea5 	bl	8024788 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800ba3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	2307      	movs	r3, #7
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	463b      	mov	r3, r7
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	2200      	movs	r2, #0
 800ba50:	21d0      	movs	r1, #208	; 0xd0
 800ba52:	4824      	ldr	r0, [pc, #144]	; (800bae4 <Get_time+0xb8>)
 800ba54:	f00e fe42 	bl	801a6dc <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800ba58:	783b      	ldrb	r3, [r7, #0]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff feea 	bl	800b834 <bcdToDec>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	4b20      	ldr	r3, [pc, #128]	; (800bae8 <Get_time+0xbc>)
 800ba66:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800ba68:	787b      	ldrb	r3, [r7, #1]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff fee2 	bl	800b834 <bcdToDec>
 800ba70:	4603      	mov	r3, r0
 800ba72:	461a      	mov	r2, r3
 800ba74:	4b1c      	ldr	r3, [pc, #112]	; (800bae8 <Get_time+0xbc>)
 800ba76:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800ba78:	78bb      	ldrb	r3, [r7, #2]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff feda 	bl	800b834 <bcdToDec>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	4b18      	ldr	r3, [pc, #96]	; (800bae8 <Get_time+0xbc>)
 800ba86:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800ba88:	793b      	ldrb	r3, [r7, #4]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff fed2 	bl	800b834 <bcdToDec>
 800ba90:	4603      	mov	r3, r0
 800ba92:	461a      	mov	r2, r3
 800ba94:	4b14      	ldr	r3, [pc, #80]	; (800bae8 <Get_time+0xbc>)
 800ba96:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800ba98:	797b      	ldrb	r3, [r7, #5]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff feca 	bl	800b834 <bcdToDec>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <Get_time+0xbc>)
 800baa6:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800baa8:	79bb      	ldrb	r3, [r7, #6]
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fec2 	bl	800b834 <bcdToDec>
 800bab0:	4603      	mov	r3, r0
 800bab2:	461a      	mov	r2, r3
 800bab4:	4b0c      	ldr	r3, [pc, #48]	; (800bae8 <Get_time+0xbc>)
 800bab6:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800bab8:	783a      	ldrb	r2, [r7, #0]
 800baba:	4b0c      	ldr	r3, [pc, #48]	; (800baec <Get_time+0xc0>)
 800babc:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800babe:	787a      	ldrb	r2, [r7, #1]
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <Get_time+0xc0>)
 800bac2:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800bac4:	78ba      	ldrb	r2, [r7, #2]
 800bac6:	4b09      	ldr	r3, [pc, #36]	; (800baec <Get_time+0xc0>)
 800bac8:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800baca:	793a      	ldrb	r2, [r7, #4]
 800bacc:	4b07      	ldr	r3, [pc, #28]	; (800baec <Get_time+0xc0>)
 800bace:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800bad0:	797a      	ldrb	r2, [r7, #5]
 800bad2:	4b06      	ldr	r3, [pc, #24]	; (800baec <Get_time+0xc0>)
 800bad4:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800bad6:	79ba      	ldrb	r2, [r7, #6]
 800bad8:	4b04      	ldr	r3, [pc, #16]	; (800baec <Get_time+0xc0>)
 800bada:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800badc:	bf00      	nop
}
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20009cbc 	.word	0x20009cbc
 800bae8:	200028dc 	.word	0x200028dc
 800baec:	200028e4 	.word	0x200028e4

0800baf0 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800baf4:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <Update_Time_Every_Sec+0x2c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f003 fc11 	bl	800f320 <HAL_Elaps_Ticks>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb04:	d307      	bcc.n	800bb16 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800bb06:	f7ff ff91 	bl	800ba2c <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800bb0a:	f00b ff1b 	bl	8017944 <HAL_GetTick>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4a02      	ldr	r2, [pc, #8]	; (800bb1c <Update_Time_Every_Sec+0x2c>)
 800bb12:	6013      	str	r3, [r2, #0]
	}
	return;
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
}
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	200028ec 	.word	0x200028ec

0800bb20 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800bb24:	f013 f9fc 	bl	801ef20 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800bb28:	4813      	ldr	r0, [pc, #76]	; (800bb78 <Process_SiemensEI+0x58>)
 800bb2a:	f00f fa71 	bl	801b010 <HAL_IWDG_Refresh>

		Feed_wdt();
 800bb2e:	f008 fc35 	bl	801439c <Feed_wdt>

		readCanToStructs();
 800bb32:	f004 fe9f 	bl	8010874 <readCanToStructs>

		Chech_forSiemensCMD();
 800bb36:	f001 fe27 	bl	800d788 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800bb3a:	f001 fb85 	bl	800d248 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800bb3e:	f001 fc6b 	bl	800d418 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800bb42:	f000 f81f 	bl	800bb84 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800bb46:	f001 fc89 	bl	800d45c <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800bb4a:	f001 fccb 	bl	800d4e4 <SendRelays2Other>

		CheckRelayMisMatch();
 800bb4e:	f001 fce1 	bl	800d514 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800bb52:	f001 fd19 	bl	800d588 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800bb56:	f00a feb1 	bl	80168bc <Print_BuildDat_Details>

		GetTimeStamp();
 800bb5a:	f002 fd9f 	bl	800e69c <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800bb5e:	4b07      	ldr	r3, [pc, #28]	; (800bb7c <Process_SiemensEI+0x5c>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d0de      	beq.n	800bb24 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800bb66:	4b06      	ldr	r3, [pc, #24]	; (800bb80 <Process_SiemensEI+0x60>)
 800bb68:	2203      	movs	r2, #3
 800bb6a:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800bb6c:	f00a fda4 	bl	80166b8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800bb70:	4801      	ldr	r0, [pc, #4]	; (800bb78 <Process_SiemensEI+0x58>)
 800bb72:	f00f fa4d 	bl	801b010 <HAL_IWDG_Refresh>
		Data_Processing();
 800bb76:	e7f9      	b.n	800bb6c <Process_SiemensEI+0x4c>
 800bb78:	20009d64 	.word	0x20009d64
 800bb7c:	2000065c 	.word	0x2000065c
 800bb80:	20000a61 	.word	0x20000a61

0800bb84 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800bb8a:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800bba4:	2300      	movs	r3, #0
 800bba6:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800bbda:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbde:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bbec:	2100      	movs	r1, #0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f018 fdca 	bl	8024788 <memset>
	uint16_t Size = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800bc00:	4b7c      	ldr	r3, [pc, #496]	; (800bdf4 <Siemens_Data_Analyser+0x270>)
 800bc02:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800bc06:	2b0a      	cmp	r3, #10
 800bc08:	f240 86dc 	bls.w	800c9c4 <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800bc0c:	4b79      	ldr	r3, [pc, #484]	; (800bdf4 <Siemens_Data_Analyser+0x270>)
 800bc0e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800bc12:	461a      	mov	r2, r3
 800bc14:	f107 030c 	add.w	r3, r7, #12
 800bc18:	4976      	ldr	r1, [pc, #472]	; (800bdf4 <Siemens_Data_Analyser+0x270>)
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f018 fd8c 	bl	8024738 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800bc20:	4b74      	ldr	r3, [pc, #464]	; (800bdf4 <Siemens_Data_Analyser+0x270>)
 800bc22:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800bc26:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800bc2a:	f240 6204 	movw	r2, #1540	; 0x604
 800bc2e:	2100      	movs	r1, #0
 800bc30:	4870      	ldr	r0, [pc, #448]	; (800bdf4 <Siemens_Data_Analyser+0x270>)
 800bc32:	f018 fda9 	bl	8024788 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800bc36:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800bc3a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800bc3e:	2100      	movs	r1, #0
 800bc40:	4618      	mov	r0, r3
 800bc42:	f018 fda1 	bl	8024788 <memset>


	BITSTUFFINIT(0,0);
 800bc46:	2300      	movs	r3, #0
 800bc48:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800bc52:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800bc56:	085b      	lsrs	r3, r3, #1
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	3b02      	subs	r3, #2
 800bc5c:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800bc60:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800bc64:	085b      	lsrs	r3, r3, #1
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	3b02      	subs	r3, #2
 800bc6a:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800bc6e:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800bc72:	3b02      	subs	r3, #2
 800bc74:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800bc78:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800bc7c:	085b      	lsrs	r3, r3, #1
 800bc7e:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800bc82:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800bc86:	f107 030c 	add.w	r3, r7, #12
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f002 fbeb 	bl	800e468 <Data_Compliment>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d004      	beq.n	800bca2 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800bc98:	4857      	ldr	r0, [pc, #348]	; (800bdf8 <Siemens_Data_Analyser+0x274>)
 800bc9a:	f018 fef9 	bl	8024a90 <puts>
		return ;
 800bc9e:	f000 be94 	b.w	800c9ca <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800bca2:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800bca6:	f107 020c 	add.w	r2, r7, #12
 800bcaa:	4413      	add	r3, r2
 800bcac:	461a      	mov	r2, r3
 800bcae:	2110      	movs	r1, #16
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f7f4 fcaf 	bl	8000614 <ExtractBits>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800bcbc:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800bcc0:	f107 030c 	add.w	r3, r7, #12
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f002 f8d2 	bl	800de70 <Siemens_CRC>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bcd2:	4b4a      	ldr	r3, [pc, #296]	; (800bdfc <Siemens_Data_Analyser+0x278>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	095b      	lsrs	r3, r3, #5
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d01c      	beq.n	800bd1a <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800bce0:	4847      	ldr	r0, [pc, #284]	; (800be00 <Siemens_Data_Analyser+0x27c>)
 800bce2:	f018 fed5 	bl	8024a90 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800bce6:	4847      	ldr	r0, [pc, #284]	; (800be04 <Siemens_Data_Analyser+0x280>)
 800bce8:	f010 fade 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800bcec:	4601      	mov	r1, r0
 800bcee:	4b46      	ldr	r3, [pc, #280]	; (800be08 <Siemens_Data_Analyser+0x284>)
 800bcf0:	fba3 2301 	umull	r2, r3, r3, r1
 800bcf4:	0bda      	lsrs	r2, r3, #15
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	041b      	lsls	r3, r3, #16
 800bcfa:	1a9b      	subs	r3, r3, r2
 800bcfc:	1aca      	subs	r2, r1, r3
 800bcfe:	4613      	mov	r3, r2
 800bd00:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800bd04:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800bd08:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d104      	bne.n	800bd1a <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800bd10:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800bd14:	3304      	adds	r3, #4
 800bd16:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800bd1a:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800bd1e:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d010      	beq.n	800bd48 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800bd26:	4839      	ldr	r0, [pc, #228]	; (800be0c <Siemens_Data_Analyser+0x288>)
 800bd28:	f018 feb2 	bl	8024a90 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800bd2c:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800bd30:	4619      	mov	r1, r3
 800bd32:	4837      	ldr	r0, [pc, #220]	; (800be10 <Siemens_Data_Analyser+0x28c>)
 800bd34:	f018 fe10 	bl	8024958 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800bd38:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4835      	ldr	r0, [pc, #212]	; (800be14 <Siemens_Data_Analyser+0x290>)
 800bd40:	f018 fe0a 	bl	8024958 <iprintf>
		return;
 800bd44:	f000 be41 	b.w	800c9ca <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800bd48:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800bd4c:	f107 020c 	add.w	r2, r7, #12
 800bd50:	4413      	add	r3, r2
 800bd52:	461a      	mov	r2, r3
 800bd54:	2110      	movs	r1, #16
 800bd56:	2000      	movs	r0, #0
 800bd58:	f7f4 fc5c 	bl	8000614 <ExtractBits>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800bd62:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800bd66:	f107 020c 	add.w	r2, r7, #12
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800bd70:	4611      	mov	r1, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f002 f87c 	bl	800de70 <Siemens_CRC>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bd7e:	4b1f      	ldr	r3, [pc, #124]	; (800bdfc <Siemens_Data_Analyser+0x278>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	0a1b      	lsrs	r3, r3, #8
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01c      	beq.n	800bdc6 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800bd8c:	4822      	ldr	r0, [pc, #136]	; (800be18 <Siemens_Data_Analyser+0x294>)
 800bd8e:	f018 fe7f 	bl	8024a90 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800bd92:	481c      	ldr	r0, [pc, #112]	; (800be04 <Siemens_Data_Analyser+0x280>)
 800bd94:	f010 fa88 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800bd98:	4601      	mov	r1, r0
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <Siemens_Data_Analyser+0x284>)
 800bd9c:	fba3 2301 	umull	r2, r3, r3, r1
 800bda0:	0bda      	lsrs	r2, r3, #15
 800bda2:	4613      	mov	r3, r2
 800bda4:	041b      	lsls	r3, r3, #16
 800bda6:	1a9b      	subs	r3, r3, r2
 800bda8:	1aca      	subs	r2, r1, r3
 800bdaa:	4613      	mov	r3, r2
 800bdac:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800bdb0:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800bdb4:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d104      	bne.n	800bdc6 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800bdbc:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800bdc6:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800bdca:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d02a      	beq.n	800be28 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800bdd2:	4812      	ldr	r0, [pc, #72]	; (800be1c <Siemens_Data_Analyser+0x298>)
 800bdd4:	f018 fe5c 	bl	8024a90 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800bdd8:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800bddc:	4619      	mov	r1, r3
 800bdde:	4810      	ldr	r0, [pc, #64]	; (800be20 <Siemens_Data_Analyser+0x29c>)
 800bde0:	f018 fdba 	bl	8024958 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800bde4:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800bde8:	4619      	mov	r1, r3
 800bdea:	480e      	ldr	r0, [pc, #56]	; (800be24 <Siemens_Data_Analyser+0x2a0>)
 800bdec:	f018 fdb4 	bl	8024958 <iprintf>
		return;
 800bdf0:	f000 bdeb 	b.w	800c9ca <Siemens_Data_Analyser+0xe46>
 800bdf4:	20004ca8 	.word	0x20004ca8
 800bdf8:	08028130 	.word	0x08028130
 800bdfc:	2000356c 	.word	0x2000356c
 800be00:	08028150 	.word	0x08028150
 800be04:	2000f3c4 	.word	0x2000f3c4
 800be08:	80008001 	.word	0x80008001
 800be0c:	08028178 	.word	0x08028178
 800be10:	08028188 	.word	0x08028188
 800be14:	0802819c 	.word	0x0802819c
 800be18:	080281b0 	.word	0x080281b0
 800be1c:	080281dc 	.word	0x080281dc
 800be20:	080281ec 	.word	0x080281ec
 800be24:	08028208 	.word	0x08028208
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800be28:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be2c:	b2d8      	uxtb	r0, r3
 800be2e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be32:	f107 020c 	add.w	r2, r7, #12
 800be36:	441a      	add	r2, r3
 800be38:	2301      	movs	r3, #1
 800be3a:	2108      	movs	r1, #8
 800be3c:	f002 f86c 	bl	800df18 <Extract_Parity_Data>
 800be40:	4603      	mov	r3, r0
 800be42:	b2da      	uxtb	r2, r3
 800be44:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be48:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be4c:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800be4e:	4b56      	ldr	r3, [pc, #344]	; (800bfa8 <Siemens_Data_Analyser+0x424>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	d02a      	beq.n	800beb0 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800be5a:	4854      	ldr	r0, [pc, #336]	; (800bfac <Siemens_Data_Analyser+0x428>)
 800be5c:	f018 fe18 	bl	8024a90 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800be60:	4853      	ldr	r0, [pc, #332]	; (800bfb0 <Siemens_Data_Analyser+0x42c>)
 800be62:	f010 fa21 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800be66:	4601      	mov	r1, r0
 800be68:	4b52      	ldr	r3, [pc, #328]	; (800bfb4 <Siemens_Data_Analyser+0x430>)
 800be6a:	fba3 2301 	umull	r2, r3, r3, r1
 800be6e:	09da      	lsrs	r2, r3, #7
 800be70:	4613      	mov	r3, r2
 800be72:	021b      	lsls	r3, r3, #8
 800be74:	1a9b      	subs	r3, r3, r2
 800be76:	1aca      	subs	r2, r1, r3
 800be78:	b2d2      	uxtb	r2, r2
 800be7a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be7e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be82:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800be84:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be88:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be8c:	781a      	ldrb	r2, [r3, #0]
 800be8e:	4b4a      	ldr	r3, [pc, #296]	; (800bfb8 <Siemens_Data_Analyser+0x434>)
 800be90:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800be94:	429a      	cmp	r2, r3
 800be96:	d10b      	bne.n	800beb0 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800be98:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be9c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	3304      	adds	r3, #4
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800beaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800beae:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800beb0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800beb4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	4b3f      	ldr	r3, [pc, #252]	; (800bfb8 <Siemens_Data_Analyser+0x434>)
 800bebc:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d015      	beq.n	800bef0 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800bec4:	483d      	ldr	r0, [pc, #244]	; (800bfbc <Siemens_Data_Analyser+0x438>)
 800bec6:	f018 fde3 	bl	8024a90 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800beca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bece:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	4619      	mov	r1, r3
 800bed6:	483a      	ldr	r0, [pc, #232]	; (800bfc0 <Siemens_Data_Analyser+0x43c>)
 800bed8:	f018 fd3e 	bl	8024958 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800bedc:	4b36      	ldr	r3, [pc, #216]	; (800bfb8 <Siemens_Data_Analyser+0x434>)
 800bede:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800bee2:	4619      	mov	r1, r3
 800bee4:	4837      	ldr	r0, [pc, #220]	; (800bfc4 <Siemens_Data_Analyser+0x440>)
 800bee6:	f018 fd37 	bl	8024958 <iprintf>
		RejectPacketFlag = 1;
 800beea:	2301      	movs	r3, #1
 800beec:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800bef0:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bef4:	3308      	adds	r3, #8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	da00      	bge.n	800befc <Siemens_Data_Analyser+0x378>
 800befa:	3307      	adds	r3, #7
 800befc:	10db      	asrs	r3, r3, #3
 800befe:	b29a      	uxth	r2, r3
 800bf00:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf04:	4413      	add	r3, r2
 800bf06:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bf0a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bf0e:	3308      	adds	r3, #8
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	b21b      	sxth	r3, r3
 800bf14:	425a      	negs	r2, r3
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	f002 0207 	and.w	r2, r2, #7
 800bf1e:	bf58      	it	pl
 800bf20:	4253      	negpl	r3, r2
 800bf22:	b21b      	sxth	r3, r3
 800bf24:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800bf28:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bf2c:	b2d8      	uxtb	r0, r3
 800bf2e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf32:	f107 020c 	add.w	r2, r7, #12
 800bf36:	441a      	add	r2, r3
 800bf38:	2300      	movs	r3, #0
 800bf3a:	2118      	movs	r1, #24
 800bf3c:	f001 ffec 	bl	800df18 <Extract_Parity_Data>
 800bf40:	4603      	mov	r3, r0
 800bf42:	461a      	mov	r2, r3
 800bf44:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf48:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf4c:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800bf4e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf52:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5c:	d036      	beq.n	800bfcc <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800bf5e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf62:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800bf66:	4a18      	ldr	r2, [pc, #96]	; (800bfc8 <Siemens_Data_Analyser+0x444>)
 800bf68:	8812      	ldrh	r2, [r2, #0]
 800bf6a:	801a      	strh	r2, [r3, #0]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bf70:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf74:	f107 020c 	add.w	r2, r7, #12
 800bf78:	4413      	add	r3, r2
 800bf7a:	f107 0208 	add.w	r2, r7, #8
 800bf7e:	2103      	movs	r1, #3
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fd4d 	bl	800ca20 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800bf86:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf8a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf8e:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800bf92:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800bf96:	3308      	adds	r3, #8
 800bf98:	6812      	ldr	r2, [r2, #0]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	8019      	strh	r1, [r3, #0]
 800bf9e:	3302      	adds	r3, #2
 800bfa0:	0c12      	lsrs	r2, r2, #16
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	e015      	b.n	800bfd2 <Siemens_Data_Analyser+0x44e>
 800bfa6:	bf00      	nop
 800bfa8:	2000356c 	.word	0x2000356c
 800bfac:	08028224 	.word	0x08028224
 800bfb0:	2000f3c4 	.word	0x2000f3c4
 800bfb4:	80808081 	.word	0x80808081
 800bfb8:	20000304 	.word	0x20000304
 800bfbc:	08028244 	.word	0x08028244
 800bfc0:	08028268 	.word	0x08028268
 800bfc4:	08028278 	.word	0x08028278
 800bfc8:	080283fc 	.word	0x080283fc
	}
	else
	{
		RejectPacketFlag = 1;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800bfd2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfd6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfda:	689a      	ldr	r2, [r3, #8]
 800bfdc:	4bbf      	ldr	r3, [pc, #764]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800bfde:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d015      	beq.n	800c012 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800bfe6:	48be      	ldr	r0, [pc, #760]	; (800c2e0 <Siemens_Data_Analyser+0x75c>)
 800bfe8:	f018 fd52 	bl	8024a90 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800bfec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bff0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	4619      	mov	r1, r3
 800bff8:	48ba      	ldr	r0, [pc, #744]	; (800c2e4 <Siemens_Data_Analyser+0x760>)
 800bffa:	f018 fcad 	bl	8024958 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800bffe:	4bb7      	ldr	r3, [pc, #732]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800c000:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800c004:	4619      	mov	r1, r3
 800c006:	48b8      	ldr	r0, [pc, #736]	; (800c2e8 <Siemens_Data_Analyser+0x764>)
 800c008:	f018 fca6 	bl	8024958 <iprintf>
		RejectPacketFlag = 1;
 800c00c:	2301      	movs	r3, #1
 800c00e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800c012:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c016:	3318      	adds	r3, #24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	da00      	bge.n	800c01e <Siemens_Data_Analyser+0x49a>
 800c01c:	3307      	adds	r3, #7
 800c01e:	10db      	asrs	r3, r3, #3
 800c020:	b29a      	uxth	r2, r3
 800c022:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c026:	4413      	add	r3, r2
 800c028:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c02c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c030:	3318      	adds	r3, #24
 800c032:	b29b      	uxth	r3, r3
 800c034:	b21b      	sxth	r3, r3
 800c036:	425a      	negs	r2, r3
 800c038:	f003 0307 	and.w	r3, r3, #7
 800c03c:	f002 0207 	and.w	r2, r2, #7
 800c040:	bf58      	it	pl
 800c042:	4253      	negpl	r3, r2
 800c044:	b21b      	sxth	r3, r3
 800c046:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800c04a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c04e:	b2d8      	uxtb	r0, r3
 800c050:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c054:	f107 020c 	add.w	r2, r7, #12
 800c058:	441a      	add	r2, r3
 800c05a:	2301      	movs	r3, #1
 800c05c:	2108      	movs	r1, #8
 800c05e:	f001 ff5b 	bl	800df18 <Extract_Parity_Data>
 800c062:	4603      	mov	r3, r0
 800c064:	b2da      	uxtb	r2, r3
 800c066:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c06a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c06e:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c070:	4b9e      	ldr	r3, [pc, #632]	; (800c2ec <Siemens_Data_Analyser+0x768>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	085b      	lsrs	r3, r3, #1
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d02a      	beq.n	800c0d4 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800c07e:	489c      	ldr	r0, [pc, #624]	; (800c2f0 <Siemens_Data_Analyser+0x76c>)
 800c080:	f018 fd06 	bl	8024a90 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c084:	489b      	ldr	r0, [pc, #620]	; (800c2f4 <Siemens_Data_Analyser+0x770>)
 800c086:	f010 f90f 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800c08a:	4601      	mov	r1, r0
 800c08c:	4b9a      	ldr	r3, [pc, #616]	; (800c2f8 <Siemens_Data_Analyser+0x774>)
 800c08e:	fba3 2301 	umull	r2, r3, r3, r1
 800c092:	09da      	lsrs	r2, r3, #7
 800c094:	4613      	mov	r3, r2
 800c096:	021b      	lsls	r3, r3, #8
 800c098:	1a9b      	subs	r3, r3, r2
 800c09a:	1aca      	subs	r2, r1, r3
 800c09c:	b2d2      	uxtb	r2, r2
 800c09e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0a2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0a6:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800c0a8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0ac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0b0:	7b1a      	ldrb	r2, [r3, #12]
 800c0b2:	4b8a      	ldr	r3, [pc, #552]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800c0b4:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d10b      	bne.n	800c0d4 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800c0bc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0c0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0c4:	7b1b      	ldrb	r3, [r3, #12]
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0ce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0d2:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800c0d4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0d8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0dc:	7b1a      	ldrb	r2, [r3, #12]
 800c0de:	4b7f      	ldr	r3, [pc, #508]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800c0e0:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d015      	beq.n	800c114 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800c0e8:	4884      	ldr	r0, [pc, #528]	; (800c2fc <Siemens_Data_Analyser+0x778>)
 800c0ea:	f018 fcd1 	bl	8024a90 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800c0ee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0f2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0f6:	7b1b      	ldrb	r3, [r3, #12]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4881      	ldr	r0, [pc, #516]	; (800c300 <Siemens_Data_Analyser+0x77c>)
 800c0fc:	f018 fc2c 	bl	8024958 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800c100:	4b76      	ldr	r3, [pc, #472]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800c102:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800c106:	4619      	mov	r1, r3
 800c108:	487e      	ldr	r0, [pc, #504]	; (800c304 <Siemens_Data_Analyser+0x780>)
 800c10a:	f018 fc25 	bl	8024958 <iprintf>
		RejectPacketFlag = 1;
 800c10e:	2301      	movs	r3, #1
 800c110:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800c114:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c118:	3308      	adds	r3, #8
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	da00      	bge.n	800c120 <Siemens_Data_Analyser+0x59c>
 800c11e:	3307      	adds	r3, #7
 800c120:	10db      	asrs	r3, r3, #3
 800c122:	b29a      	uxth	r2, r3
 800c124:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c128:	4413      	add	r3, r2
 800c12a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c12e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c132:	3308      	adds	r3, #8
 800c134:	b29b      	uxth	r3, r3
 800c136:	b21b      	sxth	r3, r3
 800c138:	425a      	negs	r2, r3
 800c13a:	f003 0307 	and.w	r3, r3, #7
 800c13e:	f002 0207 	and.w	r2, r2, #7
 800c142:	bf58      	it	pl
 800c144:	4253      	negpl	r3, r2
 800c146:	b21b      	sxth	r3, r3
 800c148:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800c14c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c150:	b2d8      	uxtb	r0, r3
 800c152:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c156:	f107 020c 	add.w	r2, r7, #12
 800c15a:	441a      	add	r2, r3
 800c15c:	2300      	movs	r3, #0
 800c15e:	2118      	movs	r1, #24
 800c160:	f001 feda 	bl	800df18 <Extract_Parity_Data>
 800c164:	4603      	mov	r3, r0
 800c166:	461a      	mov	r2, r3
 800c168:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c16c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c170:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800c172:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c176:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c180:	d021      	beq.n	800c1c6 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800c182:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c186:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800c18a:	4a5f      	ldr	r2, [pc, #380]	; (800c308 <Siemens_Data_Analyser+0x784>)
 800c18c:	8812      	ldrh	r2, [r2, #0]
 800c18e:	801a      	strh	r2, [r3, #0]
 800c190:	2200      	movs	r2, #0
 800c192:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800c194:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c198:	f107 020c 	add.w	r2, r7, #12
 800c19c:	4413      	add	r3, r2
 800c19e:	1d3a      	adds	r2, r7, #4
 800c1a0:	2103      	movs	r1, #3
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fc3c 	bl	800ca20 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800c1a8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c1ac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c1b0:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800c1b4:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	6812      	ldr	r2, [r2, #0]
 800c1bc:	4611      	mov	r1, r2
 800c1be:	8019      	strh	r1, [r3, #0]
 800c1c0:	3302      	adds	r3, #2
 800c1c2:	0c12      	lsrs	r2, r2, #16
 800c1c4:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c1c6:	4b49      	ldr	r3, [pc, #292]	; (800c2ec <Siemens_Data_Analyser+0x768>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	089b      	lsrs	r3, r3, #2
 800c1cc:	f003 0301 	and.w	r3, r3, #1
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d02c      	beq.n	800c22e <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800c1d4:	484d      	ldr	r0, [pc, #308]	; (800c30c <Siemens_Data_Analyser+0x788>)
 800c1d6:	f018 fc5b 	bl	8024a90 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800c1da:	4846      	ldr	r0, [pc, #280]	; (800c2f4 <Siemens_Data_Analyser+0x770>)
 800c1dc:	f010 f864 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800c1e0:	4601      	mov	r1, r0
 800c1e2:	f240 1301 	movw	r3, #257	; 0x101
 800c1e6:	fba3 2301 	umull	r2, r3, r3, r1
 800c1ea:	1aca      	subs	r2, r1, r3
 800c1ec:	0852      	lsrs	r2, r2, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	0dda      	lsrs	r2, r3, #23
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	061b      	lsls	r3, r3, #24
 800c1f6:	1a9b      	subs	r3, r3, r2
 800c1f8:	1aca      	subs	r2, r1, r3
 800c1fa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c1fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c202:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800c204:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c208:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c20c:	695a      	ldr	r2, [r3, #20]
 800c20e:	4b33      	ldr	r3, [pc, #204]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800c210:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c214:	429a      	cmp	r2, r3
 800c216:	d10a      	bne.n	800c22e <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800c218:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c21c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	1d1a      	adds	r2, r3, #4
 800c224:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c228:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c22c:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800c22e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c232:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c236:	695a      	ldr	r2, [r3, #20]
 800c238:	4b28      	ldr	r3, [pc, #160]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800c23a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c23e:	429a      	cmp	r2, r3
 800c240:	d015      	beq.n	800c26e <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800c242:	4833      	ldr	r0, [pc, #204]	; (800c310 <Siemens_Data_Analyser+0x78c>)
 800c244:	f018 fc24 	bl	8024a90 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800c248:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c24c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	4619      	mov	r1, r3
 800c254:	4823      	ldr	r0, [pc, #140]	; (800c2e4 <Siemens_Data_Analyser+0x760>)
 800c256:	f018 fb7f 	bl	8024958 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800c25a:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <Siemens_Data_Analyser+0x758>)
 800c25c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c260:	4619      	mov	r1, r3
 800c262:	4821      	ldr	r0, [pc, #132]	; (800c2e8 <Siemens_Data_Analyser+0x764>)
 800c264:	f018 fb78 	bl	8024958 <iprintf>
		RejectPacketFlag = 1;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800c26e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c272:	3318      	adds	r3, #24
 800c274:	2b00      	cmp	r3, #0
 800c276:	da00      	bge.n	800c27a <Siemens_Data_Analyser+0x6f6>
 800c278:	3307      	adds	r3, #7
 800c27a:	10db      	asrs	r3, r3, #3
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c282:	4413      	add	r3, r2
 800c284:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c288:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c28c:	3318      	adds	r3, #24
 800c28e:	b29b      	uxth	r3, r3
 800c290:	b21b      	sxth	r3, r3
 800c292:	425a      	negs	r2, r3
 800c294:	f003 0307 	and.w	r3, r3, #7
 800c298:	f002 0207 	and.w	r2, r2, #7
 800c29c:	bf58      	it	pl
 800c29e:	4253      	negpl	r3, r2
 800c2a0:	b21b      	sxth	r3, r3
 800c2a2:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800c2a6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c2aa:	b2d8      	uxtb	r0, r3
 800c2ac:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c2b0:	f107 020c 	add.w	r2, r7, #12
 800c2b4:	441a      	add	r2, r3
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	2108      	movs	r1, #8
 800c2ba:	f001 fe2d 	bl	800df18 <Extract_Parity_Data>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c2c6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c2ca:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800c2cc:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	da1e      	bge.n	800c314 <Siemens_Data_Analyser+0x790>
 800c2d6:	3307      	adds	r3, #7
 800c2d8:	e01c      	b.n	800c314 <Siemens_Data_Analyser+0x790>
 800c2da:	bf00      	nop
 800c2dc:	20000304 	.word	0x20000304
 800c2e0:	08028288 	.word	0x08028288
 800c2e4:	080282a8 	.word	0x080282a8
 800c2e8:	080282b8 	.word	0x080282b8
 800c2ec:	2000356c 	.word	0x2000356c
 800c2f0:	080282c8 	.word	0x080282c8
 800c2f4:	2000f3c4 	.word	0x2000f3c4
 800c2f8:	80808081 	.word	0x80808081
 800c2fc:	080282e8 	.word	0x080282e8
 800c300:	08028268 	.word	0x08028268
 800c304:	08028278 	.word	0x08028278
 800c308:	080283fc 	.word	0x080283fc
 800c30c:	08028308 	.word	0x08028308
 800c310:	08028324 	.word	0x08028324
 800c314:	10db      	asrs	r3, r3, #3
 800c316:	b29a      	uxth	r2, r3
 800c318:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c31c:	4413      	add	r3, r2
 800c31e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c322:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c326:	3308      	adds	r3, #8
 800c328:	b29b      	uxth	r3, r3
 800c32a:	b21b      	sxth	r3, r3
 800c32c:	425a      	negs	r2, r3
 800c32e:	f003 0307 	and.w	r3, r3, #7
 800c332:	f002 0207 	and.w	r2, r2, #7
 800c336:	bf58      	it	pl
 800c338:	4253      	negpl	r3, r2
 800c33a:	b21b      	sxth	r3, r3
 800c33c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800c340:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c344:	b2d8      	uxtb	r0, r3
 800c346:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c34a:	f107 020c 	add.w	r2, r7, #12
 800c34e:	441a      	add	r2, r3
 800c350:	2301      	movs	r3, #1
 800c352:	2108      	movs	r1, #8
 800c354:	f001 fde0 	bl	800df18 <Extract_Parity_Data>
 800c358:	4603      	mov	r3, r0
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c360:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c364:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800c366:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c36a:	3308      	adds	r3, #8
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	da00      	bge.n	800c372 <Siemens_Data_Analyser+0x7ee>
 800c370:	3307      	adds	r3, #7
 800c372:	10db      	asrs	r3, r3, #3
 800c374:	b29a      	uxth	r2, r3
 800c376:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c37a:	4413      	add	r3, r2
 800c37c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c380:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c384:	3308      	adds	r3, #8
 800c386:	b29b      	uxth	r3, r3
 800c388:	b21b      	sxth	r3, r3
 800c38a:	425a      	negs	r2, r3
 800c38c:	f003 0307 	and.w	r3, r3, #7
 800c390:	f002 0207 	and.w	r2, r2, #7
 800c394:	bf58      	it	pl
 800c396:	4253      	negpl	r3, r2
 800c398:	b21b      	sxth	r3, r3
 800c39a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800c39e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c3a2:	b2d8      	uxtb	r0, r3
 800c3a4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c3a8:	f107 020c 	add.w	r2, r7, #12
 800c3ac:	441a      	add	r2, r3
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	2108      	movs	r1, #8
 800c3b2:	f001 fdb1 	bl	800df18 <Extract_Parity_Data>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3be:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c3c2:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c3c4:	4bab      	ldr	r3, [pc, #684]	; (800c674 <Siemens_Data_Analyser+0xaf0>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	08db      	lsrs	r3, r3, #3
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d02a      	beq.n	800c428 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800c3d2:	48a9      	ldr	r0, [pc, #676]	; (800c678 <Siemens_Data_Analyser+0xaf4>)
 800c3d4:	f018 fb5c 	bl	8024a90 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c3d8:	48a8      	ldr	r0, [pc, #672]	; (800c67c <Siemens_Data_Analyser+0xaf8>)
 800c3da:	f00f ff65 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800c3de:	4601      	mov	r1, r0
 800c3e0:	4ba7      	ldr	r3, [pc, #668]	; (800c680 <Siemens_Data_Analyser+0xafc>)
 800c3e2:	fba3 2301 	umull	r2, r3, r3, r1
 800c3e6:	09da      	lsrs	r2, r3, #7
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	021b      	lsls	r3, r3, #8
 800c3ec:	1a9b      	subs	r3, r3, r2
 800c3ee:	1aca      	subs	r2, r1, r3
 800c3f0:	b2d2      	uxtb	r2, r2
 800c3f2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3f6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c3fa:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800c3fc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c400:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c404:	7e9a      	ldrb	r2, [r3, #26]
 800c406:	4b9f      	ldr	r3, [pc, #636]	; (800c684 <Siemens_Data_Analyser+0xb00>)
 800c408:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d10b      	bne.n	800c428 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800c410:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c414:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c418:	7e9b      	ldrb	r3, [r3, #26]
 800c41a:	3304      	adds	r3, #4
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c422:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c426:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800c428:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c42c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c430:	7e9a      	ldrb	r2, [r3, #26]
 800c432:	4b94      	ldr	r3, [pc, #592]	; (800c684 <Siemens_Data_Analyser+0xb00>)
 800c434:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800c438:	429a      	cmp	r2, r3
 800c43a:	d015      	beq.n	800c468 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800c43c:	4892      	ldr	r0, [pc, #584]	; (800c688 <Siemens_Data_Analyser+0xb04>)
 800c43e:	f018 fb27 	bl	8024a90 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800c442:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c446:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c44a:	7e9b      	ldrb	r3, [r3, #26]
 800c44c:	4619      	mov	r1, r3
 800c44e:	488f      	ldr	r0, [pc, #572]	; (800c68c <Siemens_Data_Analyser+0xb08>)
 800c450:	f018 fa82 	bl	8024958 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800c454:	4b8b      	ldr	r3, [pc, #556]	; (800c684 <Siemens_Data_Analyser+0xb00>)
 800c456:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800c45a:	4619      	mov	r1, r3
 800c45c:	488c      	ldr	r0, [pc, #560]	; (800c690 <Siemens_Data_Analyser+0xb0c>)
 800c45e:	f018 fa7b 	bl	8024958 <iprintf>
		RejectPacketFlag = 1;
 800c462:	2301      	movs	r3, #1
 800c464:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800c468:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c46c:	3308      	adds	r3, #8
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da00      	bge.n	800c474 <Siemens_Data_Analyser+0x8f0>
 800c472:	3307      	adds	r3, #7
 800c474:	10db      	asrs	r3, r3, #3
 800c476:	b29a      	uxth	r2, r3
 800c478:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c47c:	4413      	add	r3, r2
 800c47e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c482:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c486:	3308      	adds	r3, #8
 800c488:	b29b      	uxth	r3, r3
 800c48a:	b21b      	sxth	r3, r3
 800c48c:	425a      	negs	r2, r3
 800c48e:	f003 0307 	and.w	r3, r3, #7
 800c492:	f002 0207 	and.w	r2, r2, #7
 800c496:	bf58      	it	pl
 800c498:	4253      	negpl	r3, r2
 800c49a:	b21b      	sxth	r3, r3
 800c49c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800c4a0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c4a4:	b2d8      	uxtb	r0, r3
 800c4a6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c4aa:	f107 020c 	add.w	r2, r7, #12
 800c4ae:	441a      	add	r2, r3
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	2108      	movs	r1, #8
 800c4b4:	f001 fd30 	bl	800df18 <Extract_Parity_Data>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c4c0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c4c4:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c4c6:	4b6b      	ldr	r3, [pc, #428]	; (800c674 <Siemens_Data_Analyser+0xaf0>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	091b      	lsrs	r3, r3, #4
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d02a      	beq.n	800c52a <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800c4d4:	486f      	ldr	r0, [pc, #444]	; (800c694 <Siemens_Data_Analyser+0xb10>)
 800c4d6:	f018 fadb 	bl	8024a90 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c4da:	4868      	ldr	r0, [pc, #416]	; (800c67c <Siemens_Data_Analyser+0xaf8>)
 800c4dc:	f00f fee4 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	4b67      	ldr	r3, [pc, #412]	; (800c680 <Siemens_Data_Analyser+0xafc>)
 800c4e4:	fba3 2301 	umull	r2, r3, r3, r1
 800c4e8:	09da      	lsrs	r2, r3, #7
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	021b      	lsls	r3, r3, #8
 800c4ee:	1a9b      	subs	r3, r3, r2
 800c4f0:	1aca      	subs	r2, r1, r3
 800c4f2:	b2d2      	uxtb	r2, r2
 800c4f4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c4f8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c4fc:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800c4fe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c502:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c506:	7eda      	ldrb	r2, [r3, #27]
 800c508:	4b5e      	ldr	r3, [pc, #376]	; (800c684 <Siemens_Data_Analyser+0xb00>)
 800c50a:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c50e:	429a      	cmp	r2, r3
 800c510:	d10b      	bne.n	800c52a <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800c512:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c516:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c51a:	7edb      	ldrb	r3, [r3, #27]
 800c51c:	3304      	adds	r3, #4
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c524:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c528:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800c52a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c52e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c532:	7eda      	ldrb	r2, [r3, #27]
 800c534:	4b53      	ldr	r3, [pc, #332]	; (800c684 <Siemens_Data_Analyser+0xb00>)
 800c536:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d015      	beq.n	800c56a <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800c53e:	4856      	ldr	r0, [pc, #344]	; (800c698 <Siemens_Data_Analyser+0xb14>)
 800c540:	f018 faa6 	bl	8024a90 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800c544:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c548:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c54c:	7edb      	ldrb	r3, [r3, #27]
 800c54e:	4619      	mov	r1, r3
 800c550:	484e      	ldr	r0, [pc, #312]	; (800c68c <Siemens_Data_Analyser+0xb08>)
 800c552:	f018 fa01 	bl	8024958 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800c556:	4b4b      	ldr	r3, [pc, #300]	; (800c684 <Siemens_Data_Analyser+0xb00>)
 800c558:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c55c:	4619      	mov	r1, r3
 800c55e:	484c      	ldr	r0, [pc, #304]	; (800c690 <Siemens_Data_Analyser+0xb0c>)
 800c560:	f018 f9fa 	bl	8024958 <iprintf>
		RejectPacketFlag = 1;
 800c564:	2301      	movs	r3, #1
 800c566:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800c56a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c56e:	3308      	adds	r3, #8
 800c570:	2b00      	cmp	r3, #0
 800c572:	da00      	bge.n	800c576 <Siemens_Data_Analyser+0x9f2>
 800c574:	3307      	adds	r3, #7
 800c576:	10db      	asrs	r3, r3, #3
 800c578:	b29a      	uxth	r2, r3
 800c57a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c57e:	4413      	add	r3, r2
 800c580:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c584:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c588:	3308      	adds	r3, #8
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	b21b      	sxth	r3, r3
 800c58e:	425a      	negs	r2, r3
 800c590:	f003 0307 	and.w	r3, r3, #7
 800c594:	f002 0207 	and.w	r2, r2, #7
 800c598:	bf58      	it	pl
 800c59a:	4253      	negpl	r3, r2
 800c59c:	b21b      	sxth	r3, r3
 800c59e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c5a2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c5a6:	b2d8      	uxtb	r0, r3
 800c5a8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c5ac:	f107 020c 	add.w	r2, r7, #12
 800c5b0:	441a      	add	r2, r3
 800c5b2:	2302      	movs	r3, #2
 800c5b4:	2120      	movs	r1, #32
 800c5b6:	f001 fcaf 	bl	800df18 <Extract_Parity_Data>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c5c2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c5c6:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800c5c8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c5cc:	3320      	adds	r3, #32
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	da00      	bge.n	800c5d4 <Siemens_Data_Analyser+0xa50>
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	10db      	asrs	r3, r3, #3
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c5dc:	4413      	add	r3, r2
 800c5de:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c5e2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c5e6:	3320      	adds	r3, #32
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	b21b      	sxth	r3, r3
 800c5ec:	425a      	negs	r2, r3
 800c5ee:	f003 0307 	and.w	r3, r3, #7
 800c5f2:	f002 0207 	and.w	r2, r2, #7
 800c5f6:	bf58      	it	pl
 800c5f8:	4253      	negpl	r3, r2
 800c5fa:	b21b      	sxth	r3, r3
 800c5fc:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c600:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c604:	b2d8      	uxtb	r0, r3
 800c606:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c60a:	f107 020c 	add.w	r2, r7, #12
 800c60e:	441a      	add	r2, r3
 800c610:	2302      	movs	r3, #2
 800c612:	2120      	movs	r1, #32
 800c614:	f001 fc80 	bl	800df18 <Extract_Parity_Data>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c620:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c624:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800c626:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c62a:	3320      	adds	r3, #32
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	da00      	bge.n	800c632 <Siemens_Data_Analyser+0xaae>
 800c630:	3307      	adds	r3, #7
 800c632:	10db      	asrs	r3, r3, #3
 800c634:	b29a      	uxth	r2, r3
 800c636:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c63a:	4413      	add	r3, r2
 800c63c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c640:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c644:	3320      	adds	r3, #32
 800c646:	b29b      	uxth	r3, r3
 800c648:	b21b      	sxth	r3, r3
 800c64a:	425a      	negs	r2, r3
 800c64c:	f003 0307 	and.w	r3, r3, #7
 800c650:	f002 0207 	and.w	r2, r2, #7
 800c654:	bf58      	it	pl
 800c656:	4253      	negpl	r3, r2
 800c658:	b21b      	sxth	r3, r3
 800c65a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800c664:	200a      	movs	r0, #10
 800c666:	f018 f98f 	bl	8024988 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c66a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c66e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c672:	e052      	b.n	800c71a <Siemens_Data_Analyser+0xb96>
 800c674:	2000356c 	.word	0x2000356c
 800c678:	08028340 	.word	0x08028340
 800c67c:	2000f3c4 	.word	0x2000f3c4
 800c680:	80808081 	.word	0x80808081
 800c684:	20000304 	.word	0x20000304
 800c688:	0802835c 	.word	0x0802835c
 800c68c:	08028268 	.word	0x08028268
 800c690:	08028278 	.word	0x08028278
 800c694:	0802837c 	.word	0x0802837c
 800c698:	08028398 	.word	0x08028398
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800c69c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c6a0:	b2d8      	uxtb	r0, r3
 800c6a2:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c6a6:	f107 020c 	add.w	r2, r7, #12
 800c6aa:	441a      	add	r2, r3
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	2108      	movs	r1, #8
 800c6b0:	f001 fc32 	bl	800df18 <Extract_Parity_Data>
 800c6b4:	4601      	mov	r1, r0
 800c6b6:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	b2c9      	uxtb	r1, r1
 800c6c4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c6c8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800c6cc:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800c6ce:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800c6d8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c6dc:	3308      	adds	r3, #8
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	da00      	bge.n	800c6e4 <Siemens_Data_Analyser+0xb60>
 800c6e2:	3307      	adds	r3, #7
 800c6e4:	10db      	asrs	r3, r3, #3
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c6f2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	b21b      	sxth	r3, r3
 800c6fc:	425a      	negs	r2, r3
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	f002 0207 	and.w	r2, r2, #7
 800c706:	bf58      	it	pl
 800c708:	4253      	negpl	r3, r2
 800c70a:	b21b      	sxth	r3, r3
 800c70c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c710:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c714:	3301      	adds	r3, #1
 800c716:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c71a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c71e:	b29b      	uxth	r3, r3
 800c720:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c724:	429a      	cmp	r2, r3
 800c726:	d8b9      	bhi.n	800c69c <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800c728:	200a      	movs	r0, #10
 800c72a:	f018 f92d 	bl	8024988 <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800c72e:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c732:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c736:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800c73a:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 f96e 	bl	800ca20 <ExtractAppData>
 800c744:	4603      	mov	r3, r0
 800c746:	461a      	mov	r2, r3
 800c748:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c74c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c750:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800c752:	4ba0      	ldr	r3, [pc, #640]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c754:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c758:	f003 0307 	and.w	r3, r3, #7
 800c75c:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800c760:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c764:	2b00      	cmp	r3, #0
 800c766:	d008      	beq.n	800c77a <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800c768:	4b9a      	ldr	r3, [pc, #616]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c76a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c76e:	08db      	lsrs	r3, r3, #3
 800c770:	b29b      	uxth	r3, r3
 800c772:	3301      	adds	r3, #1
 800c774:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800c778:	e005      	b.n	800c786 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800c77a:	4b96      	ldr	r3, [pc, #600]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c77c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c780:	08db      	lsrs	r3, r3, #3
 800c782:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800c786:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c78a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c78e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c790:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800c794:	429a      	cmp	r2, r3
 800c796:	d02c      	beq.n	800c7f2 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800c798:	488f      	ldr	r0, [pc, #572]	; (800c9d8 <Siemens_Data_Analyser+0xe54>)
 800c79a:	f018 f979 	bl	8024a90 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800c79e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c7a2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c7a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	488c      	ldr	r0, [pc, #560]	; (800c9dc <Siemens_Data_Analyser+0xe58>)
 800c7ac:	f018 f8d4 	bl	8024958 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800c7b0:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	488a      	ldr	r0, [pc, #552]	; (800c9e0 <Siemens_Data_Analyser+0xe5c>)
 800c7b8:	f018 f8ce 	bl	8024958 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800c7bc:	4989      	ldr	r1, [pc, #548]	; (800c9e4 <Siemens_Data_Analyser+0xe60>)
 800c7be:	488a      	ldr	r0, [pc, #552]	; (800c9e8 <Siemens_Data_Analyser+0xe64>)
 800c7c0:	f7f3 fd3e 	bl	8000240 <strcmp>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d002      	beq.n	800c7d0 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800c7d0:	4984      	ldr	r1, [pc, #528]	; (800c9e4 <Siemens_Data_Analyser+0xe60>)
 800c7d2:	4885      	ldr	r0, [pc, #532]	; (800c9e8 <Siemens_Data_Analyser+0xe64>)
 800c7d4:	f7f3 fd34 	bl	8000240 <strcmp>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d109      	bne.n	800c7f2 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800c7de:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c7e2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c7e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7e8:	00db      	lsls	r3, r3, #3
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	4b79      	ldr	r3, [pc, #484]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c7ee:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800c7f2:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	f000 80e6 	beq.w	800c9c8 <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800c7fc:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800c800:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c804:	3326      	adds	r3, #38	; 0x26
 800c806:	4619      	mov	r1, r3
 800c808:	2000      	movs	r0, #0
 800c80a:	f007 fa79 	bl	8013d00 <GetCRC16>
 800c80e:	4603      	mov	r3, r0
 800c810:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800c814:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c818:	f107 020c 	add.w	r2, r7, #12
 800c81c:	4413      	add	r3, r2
 800c81e:	461a      	mov	r2, r3
 800c820:	2110      	movs	r1, #16
 800c822:	2000      	movs	r0, #0
 800c824:	f7f3 fef6 	bl	8000614 <ExtractBits>
 800c828:	4603      	mov	r3, r0
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c830:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c834:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c838:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c83c:	2100      	movs	r1, #0
 800c83e:	486b      	ldr	r0, [pc, #428]	; (800c9ec <Siemens_Data_Analyser+0xe68>)
 800c840:	f017 ffa2 	bl	8024788 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800c844:	4a69      	ldr	r2, [pc, #420]	; (800c9ec <Siemens_Data_Analyser+0xe68>)
 800c846:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c84a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c84e:	4610      	mov	r0, r2
 800c850:	4619      	mov	r1, r3
 800c852:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c856:	461a      	mov	r2, r3
 800c858:	f017 ff6e 	bl	8024738 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800c85c:	f000 f936 	bl	800cacc <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c860:	4b63      	ldr	r3, [pc, #396]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	461a      	mov	r2, r3
 800c866:	4b5b      	ldr	r3, [pc, #364]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c868:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bfb8      	it	lt
 800c872:	425b      	neglt	r3, r3
 800c874:	461a      	mov	r2, r3
 800c876:	4b57      	ldr	r3, [pc, #348]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c878:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d871      	bhi.n	800c964 <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800c880:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c884:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c888:	69da      	ldr	r2, [r3, #28]
 800c88a:	4b5a      	ldr	r3, [pc, #360]	; (800c9f4 <Siemens_Data_Analyser+0xe70>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d04c      	beq.n	800c92c <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800c892:	f00b f857 	bl	8017944 <HAL_GetTick>
 800c896:	4603      	mov	r3, r0
 800c898:	4a57      	ldr	r2, [pc, #348]	; (800c9f8 <Siemens_Data_Analyser+0xe74>)
 800c89a:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800c89c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c8a0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	4a53      	ldr	r2, [pc, #332]	; (800c9f4 <Siemens_Data_Analyser+0xe70>)
 800c8a8:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800c8aa:	4b51      	ldr	r3, [pc, #324]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800c8b0:	4b52      	ldr	r3, [pc, #328]	; (800c9fc <Siemens_Data_Analyser+0xe78>)
 800c8b2:	885b      	ldrh	r3, [r3, #2]
 800c8b4:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d053      	beq.n	800c964 <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800c8bc:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	484e      	ldr	r0, [pc, #312]	; (800c9fc <Siemens_Data_Analyser+0xe78>)
 800c8c4:	f017 ff60 	bl	8024788 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800c8c8:	f240 2202 	movw	r2, #514	; 0x202
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	484c      	ldr	r0, [pc, #304]	; (800ca00 <Siemens_Data_Analyser+0xe7c>)
 800c8d0:	f017 ff5a 	bl	8024788 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800c8d4:	4a49      	ldr	r2, [pc, #292]	; (800c9fc <Siemens_Data_Analyser+0xe78>)
 800c8d6:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800c8da:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c8dc:	4b43      	ldr	r3, [pc, #268]	; (800c9ec <Siemens_Data_Analyser+0xe68>)
 800c8de:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c8e0:	4b46      	ldr	r3, [pc, #280]	; (800c9fc <Siemens_Data_Analyser+0xe78>)
 800c8e2:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c8e4:	4b41      	ldr	r3, [pc, #260]	; (800c9ec <Siemens_Data_Analyser+0xe68>)
 800c8e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4946      	ldr	r1, [pc, #280]	; (800ca04 <Siemens_Data_Analyser+0xe80>)
 800c8ec:	4846      	ldr	r0, [pc, #280]	; (800ca08 <Siemens_Data_Analyser+0xe84>)
 800c8ee:	f017 ff23 	bl	8024738 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c8f2:	4b3e      	ldr	r3, [pc, #248]	; (800c9ec <Siemens_Data_Analyser+0xe68>)
 800c8f4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c8f6:	4b42      	ldr	r3, [pc, #264]	; (800ca00 <Siemens_Data_Analyser+0xe7c>)
 800c8f8:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c8fa:	4b3c      	ldr	r3, [pc, #240]	; (800c9ec <Siemens_Data_Analyser+0xe68>)
 800c8fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c8fe:	461a      	mov	r2, r3
 800c900:	4940      	ldr	r1, [pc, #256]	; (800ca04 <Siemens_Data_Analyser+0xe80>)
 800c902:	4842      	ldr	r0, [pc, #264]	; (800ca0c <Siemens_Data_Analyser+0xe88>)
 800c904:	f017 ff18 	bl	8024738 <memcpy>

				if(SiemensClocks_st.MisMatchFlag == RESET)
 800c908:	4b3b      	ldr	r3, [pc, #236]	; (800c9f8 <Siemens_Data_Analyser+0xe74>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d103      	bne.n	800c918 <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800c910:	f240 1019 	movw	r0, #281	; 0x119
 800c914:	f003 fab8 	bl	800fe88 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800c918:	f240 2007 	movw	r0, #519	; 0x207
 800c91c:	f003 fab4 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800c920:	f00b f810 	bl	8017944 <HAL_GetTick>
 800c924:	4603      	mov	r3, r0
 800c926:	4a34      	ldr	r2, [pc, #208]	; (800c9f8 <Siemens_Data_Analyser+0xe74>)
 800c928:	6113      	str	r3, [r2, #16]
 800c92a:	e01b      	b.n	800c964 <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800c92c:	4b30      	ldr	r3, [pc, #192]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	3301      	adds	r3, #1
 800c932:	b29a      	uxth	r2, r3
 800c934:	4b2e      	ldr	r3, [pc, #184]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c936:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c938:	4b2d      	ldr	r3, [pc, #180]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c940:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c944:	429a      	cmp	r2, r3
 800c946:	d90d      	bls.n	800c964 <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800c948:	4b29      	ldr	r3, [pc, #164]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	4619      	mov	r1, r3
 800c94e:	4830      	ldr	r0, [pc, #192]	; (800ca10 <Siemens_Data_Analyser+0xe8c>)
 800c950:	f018 f802 	bl	8024958 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800c954:	4b1f      	ldr	r3, [pc, #124]	; (800c9d4 <Siemens_Data_Analyser+0xe50>)
 800c956:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	3301      	adds	r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	4b23      	ldr	r3, [pc, #140]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c962:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800c964:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800c968:	f107 010c 	add.w	r1, r7, #12
 800c96c:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800c970:	2302      	movs	r3, #2
 800c972:	f000 fe43 	bl	800d5fc <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800c976:	4b27      	ldr	r3, [pc, #156]	; (800ca14 <Siemens_Data_Analyser+0xe90>)
 800c978:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00d      	beq.n	800c99c <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800c980:	4b24      	ldr	r3, [pc, #144]	; (800ca14 <Siemens_Data_Analyser+0xe90>)
 800c982:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800c986:	2301      	movs	r3, #1
 800c988:	4922      	ldr	r1, [pc, #136]	; (800ca14 <Siemens_Data_Analyser+0xe90>)
 800c98a:	4823      	ldr	r0, [pc, #140]	; (800ca18 <Siemens_Data_Analyser+0xe94>)
 800c98c:	f000 fe36 	bl	800d5fc <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800c990:	f240 6202 	movw	r2, #1538	; 0x602
 800c994:	2100      	movs	r1, #0
 800c996:	481f      	ldr	r0, [pc, #124]	; (800ca14 <Siemens_Data_Analyser+0xe90>)
 800c998:	f017 fef6 	bl	8024788 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800c99c:	4b14      	ldr	r3, [pc, #80]	; (800c9f0 <Siemens_Data_Analyser+0xe6c>)
 800c99e:	881a      	ldrh	r2, [r3, #0]
 800c9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ca1c <Siemens_Data_Analyser+0xe98>)
 800c9a2:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800c9a4:	4b1d      	ldr	r3, [pc, #116]	; (800ca1c <Siemens_Data_Analyser+0xe98>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800c9aa:	4b1c      	ldr	r3, [pc, #112]	; (800ca1c <Siemens_Data_Analyser+0xe98>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800c9b0:	f240 2001 	movw	r0, #513	; 0x201
 800c9b4:	f003 fa68 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c9b8:	f00a ffc4 	bl	8017944 <HAL_GetTick>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	4a0e      	ldr	r2, [pc, #56]	; (800c9f8 <Siemens_Data_Analyser+0xe74>)
 800c9c0:	6093      	str	r3, [r2, #8]

	return;
 800c9c2:	e002      	b.n	800c9ca <Siemens_Data_Analyser+0xe46>
		return;
 800c9c4:	bf00      	nop
 800c9c6:	e000      	b.n	800c9ca <Siemens_Data_Analyser+0xe46>
		return;
 800c9c8:	bf00      	nop
}
 800c9ca:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20000304 	.word	0x20000304
 800c9d8:	080283b0 	.word	0x080283b0
 800c9dc:	08028268 	.word	0x08028268
 800c9e0:	08028278 	.word	0x08028278
 800c9e4:	080283d0 	.word	0x080283d0
 800c9e8:	20000305 	.word	0x20000305
 800c9ec:	200028f0 	.word	0x200028f0
 800c9f0:	20003db0 	.word	0x20003db0
 800c9f4:	20003dac 	.word	0x20003dac
 800c9f8:	20003580 	.word	0x20003580
 800c9fc:	200037a0 	.word	0x200037a0
 800ca00:	2000359c 	.word	0x2000359c
 800ca04:	20002916 	.word	0x20002916
 800ca08:	200037a4 	.word	0x200037a4
 800ca0c:	2000359e 	.word	0x2000359e
 800ca10:	080283dc 	.word	0x080283dc
 800ca14:	20002f68 	.word	0x20002f68
 800ca18:	20002d40 	.word	0x20002d40
 800ca1c:	20003574 	.word	0x20003574

0800ca20 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b089      	sub	sp, #36	; 0x24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800ca36:	897b      	ldrh	r3, [r7, #10]
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	837b      	strh	r3, [r7, #26]
 800ca40:	e039      	b.n	800cab6 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800ca42:	8b7b      	ldrh	r3, [r7, #26]
 800ca44:	08db      	lsrs	r3, r3, #3
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800ca4a:	8b7b      	ldrh	r3, [r7, #26]
 800ca4c:	f003 0307 	and.w	r3, r3, #7
 800ca50:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	2b07      	cmp	r3, #7
 800ca56:	d02a      	beq.n	800caae <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	461a      	mov	r2, r3
 800ca62:	8b7b      	ldrh	r3, [r7, #26]
 800ca64:	f003 0307 	and.w	r3, r3, #7
 800ca68:	fa42 f303 	asr.w	r3, r2, r3
 800ca6c:	f003 0301 	and.w	r3, r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d010      	beq.n	800ca96 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800ca74:	8bfb      	ldrh	r3, [r7, #30]
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	4413      	add	r3, r2
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	b25a      	sxtb	r2, r3
 800ca7e:	7f7b      	ldrb	r3, [r7, #29]
 800ca80:	2101      	movs	r1, #1
 800ca82:	fa01 f303 	lsl.w	r3, r1, r3
 800ca86:	b25b      	sxtb	r3, r3
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	b259      	sxtb	r1, r3
 800ca8c:	8bfb      	ldrh	r3, [r7, #30]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	4413      	add	r3, r2
 800ca92:	b2ca      	uxtb	r2, r1
 800ca94:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800ca96:	7f7b      	ldrb	r3, [r7, #29]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800ca9c:	7f7b      	ldrb	r3, [r7, #29]
 800ca9e:	2b08      	cmp	r3, #8
 800caa0:	d106      	bne.n	800cab0 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800caa6:	8bfb      	ldrh	r3, [r7, #30]
 800caa8:	3301      	adds	r3, #1
 800caaa:	83fb      	strh	r3, [r7, #30]
 800caac:	e000      	b.n	800cab0 <ExtractAppData+0x90>
			continue;
 800caae:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800cab0:	8b7b      	ldrh	r3, [r7, #26]
 800cab2:	3301      	adds	r3, #1
 800cab4:	837b      	strh	r3, [r7, #26]
 800cab6:	8b7a      	ldrh	r2, [r7, #26]
 800cab8:	8b3b      	ldrh	r3, [r7, #24]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d3c1      	bcc.n	800ca42 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800cabe:	8bfb      	ldrh	r3, [r7, #30]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3724      	adds	r7, #36	; 0x24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800cacc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cad0:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800cad4:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800cad6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800cada:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800cade:	2300      	movs	r3, #0
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	1d10      	adds	r0, r2, #4
 800cae4:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800cae8:	461a      	mov	r2, r3
 800caea:	2100      	movs	r1, #0
 800caec:	f017 fe4c 	bl	8024788 <memset>
	uint16_t App_data_Traverser = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800cb14:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cb18:	2100      	movs	r1, #0
 800cb1a:	48ba      	ldr	r0, [pc, #744]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cb1c:	f017 fe34 	bl	8024788 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800cb20:	4bb9      	ldr	r3, [pc, #740]	; (800ce08 <Form_Siemens_Reply+0x33c>)
 800cb22:	7b1b      	ldrb	r3, [r3, #12]
 800cb24:	4ab7      	ldr	r2, [pc, #732]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cb26:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800cb28:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cb2c:	b2d8      	uxtb	r0, r3
 800cb2e:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cb32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb36:	1899      	adds	r1, r3, r2
 800cb38:	4bb2      	ldr	r3, [pc, #712]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2200      	movs	r2, #0
 800cb40:	461c      	mov	r4, r3
 800cb42:	4615      	mov	r5, r2
 800cb44:	2301      	movs	r3, #1
 800cb46:	9302      	str	r3, [sp, #8]
 800cb48:	e9cd 4500 	strd	r4, r5, [sp]
 800cb4c:	460a      	mov	r2, r1
 800cb4e:	2108      	movs	r1, #8
 800cb50:	f001 fb24 	bl	800e19c <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800cb54:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cb58:	3308      	adds	r3, #8
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da00      	bge.n	800cb60 <Form_Siemens_Reply+0x94>
 800cb5e:	3307      	adds	r3, #7
 800cb60:	10db      	asrs	r3, r3, #3
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cb68:	4413      	add	r3, r2
 800cb6a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cb6e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cb72:	3308      	adds	r3, #8
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	b21b      	sxth	r3, r3
 800cb78:	425a      	negs	r2, r3
 800cb7a:	f003 0107 	and.w	r1, r3, #7
 800cb7e:	f002 0307 	and.w	r3, r2, #7
 800cb82:	bf58      	it	pl
 800cb84:	4259      	negpl	r1, r3
 800cb86:	b20b      	sxth	r3, r1
 800cb88:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800cb8c:	4b9e      	ldr	r3, [pc, #632]	; (800ce08 <Form_Siemens_Reply+0x33c>)
 800cb8e:	691a      	ldr	r2, [r3, #16]
 800cb90:	4b9c      	ldr	r3, [pc, #624]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cb92:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800cb94:	4b9c      	ldr	r3, [pc, #624]	; (800ce08 <Form_Siemens_Reply+0x33c>)
 800cb96:	695a      	ldr	r2, [r3, #20]
 800cb98:	4b9a      	ldr	r3, [pc, #616]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cb9a:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800cb9c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cba0:	b2d8      	uxtb	r0, r3
 800cba2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cbaa:	1899      	adds	r1, r3, r2
 800cbac:	4b95      	ldr	r3, [pc, #596]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4698      	mov	r8, r3
 800cbb4:	4691      	mov	r9, r2
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9302      	str	r3, [sp, #8]
 800cbba:	e9cd 8900 	strd	r8, r9, [sp]
 800cbbe:	460a      	mov	r2, r1
 800cbc0:	2118      	movs	r1, #24
 800cbc2:	f001 faeb 	bl	800e19c <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800cbc6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cbca:	3318      	adds	r3, #24
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da00      	bge.n	800cbd2 <Form_Siemens_Reply+0x106>
 800cbd0:	3307      	adds	r3, #7
 800cbd2:	10db      	asrs	r3, r3, #3
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cbda:	4413      	add	r3, r2
 800cbdc:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cbe0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cbe4:	3318      	adds	r3, #24
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	b21b      	sxth	r3, r3
 800cbea:	425a      	negs	r2, r3
 800cbec:	f003 0107 	and.w	r1, r3, #7
 800cbf0:	f002 0307 	and.w	r3, r2, #7
 800cbf4:	bf58      	it	pl
 800cbf6:	4259      	negpl	r1, r3
 800cbf8:	b20b      	sxth	r3, r1
 800cbfa:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800cbfe:	4b82      	ldr	r3, [pc, #520]	; (800ce08 <Form_Siemens_Reply+0x33c>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	4a80      	ldr	r2, [pc, #512]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cc04:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800cc06:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cc0a:	b2d8      	uxtb	r0, r3
 800cc0c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cc10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc14:	1899      	adds	r1, r3, r2
 800cc16:	4b7b      	ldr	r3, [pc, #492]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cc18:	7b1b      	ldrb	r3, [r3, #12]
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	469a      	mov	sl, r3
 800cc20:	4693      	mov	fp, r2
 800cc22:	2301      	movs	r3, #1
 800cc24:	9302      	str	r3, [sp, #8]
 800cc26:	e9cd ab00 	strd	sl, fp, [sp]
 800cc2a:	460a      	mov	r2, r1
 800cc2c:	2108      	movs	r1, #8
 800cc2e:	f001 fab5 	bl	800e19c <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800cc32:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cc36:	3308      	adds	r3, #8
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	da00      	bge.n	800cc3e <Form_Siemens_Reply+0x172>
 800cc3c:	3307      	adds	r3, #7
 800cc3e:	10db      	asrs	r3, r3, #3
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cc46:	4413      	add	r3, r2
 800cc48:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cc4c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cc50:	3308      	adds	r3, #8
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	b21b      	sxth	r3, r3
 800cc56:	425a      	negs	r2, r3
 800cc58:	f003 0107 	and.w	r1, r3, #7
 800cc5c:	f002 0307 	and.w	r3, r2, #7
 800cc60:	bf58      	it	pl
 800cc62:	4259      	negpl	r1, r3
 800cc64:	b20b      	sxth	r3, r1
 800cc66:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800cc6a:	4b67      	ldr	r3, [pc, #412]	; (800ce08 <Form_Siemens_Reply+0x33c>)
 800cc6c:	685a      	ldr	r2, [r3, #4]
 800cc6e:	4b65      	ldr	r3, [pc, #404]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cc70:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800cc72:	4b65      	ldr	r3, [pc, #404]	; (800ce08 <Form_Siemens_Reply+0x33c>)
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	4b63      	ldr	r3, [pc, #396]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cc78:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800cc7a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cc7e:	b2d8      	uxtb	r0, r3
 800cc80:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cc84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc88:	1899      	adds	r1, r3, r2
 800cc8a:	4b5e      	ldr	r3, [pc, #376]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	643b      	str	r3, [r7, #64]	; 0x40
 800cc92:	647a      	str	r2, [r7, #68]	; 0x44
 800cc94:	2300      	movs	r3, #0
 800cc96:	9302      	str	r3, [sp, #8]
 800cc98:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800cc9c:	e9cd 3400 	strd	r3, r4, [sp]
 800cca0:	460a      	mov	r2, r1
 800cca2:	2118      	movs	r1, #24
 800cca4:	f001 fa7a 	bl	800e19c <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800cca8:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ccac:	3318      	adds	r3, #24
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da00      	bge.n	800ccb4 <Form_Siemens_Reply+0x1e8>
 800ccb2:	3307      	adds	r3, #7
 800ccb4:	10db      	asrs	r3, r3, #3
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ccc2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ccc6:	3318      	adds	r3, #24
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	b21b      	sxth	r3, r3
 800cccc:	425a      	negs	r2, r3
 800ccce:	f003 0107 	and.w	r1, r3, #7
 800ccd2:	f002 0307 	and.w	r3, r2, #7
 800ccd6:	bf58      	it	pl
 800ccd8:	4259      	negpl	r1, r3
 800ccda:	b20b      	sxth	r3, r1
 800ccdc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800cce0:	4a48      	ldr	r2, [pc, #288]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cce2:	230a      	movs	r3, #10
 800cce4:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800cce6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ccea:	b2d8      	uxtb	r0, r3
 800ccec:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800ccf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ccf4:	1899      	adds	r1, r3, r2
 800ccf6:	4b43      	ldr	r3, [pc, #268]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800ccf8:	7e1b      	ldrb	r3, [r3, #24]
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd00:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd02:	2300      	movs	r3, #0
 800cd04:	9302      	str	r3, [sp, #8]
 800cd06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800cd0a:	e9cd 3400 	strd	r3, r4, [sp]
 800cd0e:	460a      	mov	r2, r1
 800cd10:	2108      	movs	r1, #8
 800cd12:	f001 fa43 	bl	800e19c <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800cd16:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	da00      	bge.n	800cd22 <Form_Siemens_Reply+0x256>
 800cd20:	3307      	adds	r3, #7
 800cd22:	10db      	asrs	r3, r3, #3
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cd30:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cd34:	3308      	adds	r3, #8
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	b21b      	sxth	r3, r3
 800cd3a:	425a      	negs	r2, r3
 800cd3c:	f003 0107 	and.w	r1, r3, #7
 800cd40:	f002 0307 	and.w	r3, r2, #7
 800cd44:	bf58      	it	pl
 800cd46:	4259      	negpl	r1, r3
 800cd48:	b20b      	sxth	r3, r1
 800cd4a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800cd4e:	4a2d      	ldr	r2, [pc, #180]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cd50:	2301      	movs	r3, #1
 800cd52:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800cd54:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cd58:	b2d8      	uxtb	r0, r3
 800cd5a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cd5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd62:	1899      	adds	r1, r3, r2
 800cd64:	4b27      	ldr	r3, [pc, #156]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cd66:	7e5b      	ldrb	r3, [r3, #25]
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	633b      	str	r3, [r7, #48]	; 0x30
 800cd6e:	637a      	str	r2, [r7, #52]	; 0x34
 800cd70:	2301      	movs	r3, #1
 800cd72:	9302      	str	r3, [sp, #8]
 800cd74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800cd78:	e9cd 3400 	strd	r3, r4, [sp]
 800cd7c:	460a      	mov	r2, r1
 800cd7e:	2108      	movs	r1, #8
 800cd80:	f001 fa0c 	bl	800e19c <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800cd84:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cd88:	3308      	adds	r3, #8
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	da00      	bge.n	800cd90 <Form_Siemens_Reply+0x2c4>
 800cd8e:	3307      	adds	r3, #7
 800cd90:	10db      	asrs	r3, r3, #3
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cd98:	4413      	add	r3, r2
 800cd9a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cd9e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cda2:	3308      	adds	r3, #8
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	b21b      	sxth	r3, r3
 800cda8:	425a      	negs	r2, r3
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	f002 0207 	and.w	r2, r2, #7
 800cdb2:	bf58      	it	pl
 800cdb4:	4253      	negpl	r3, r2
 800cdb6:	b21b      	sxth	r3, r3
 800cdb8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800cdbc:	4b12      	ldr	r3, [pc, #72]	; (800ce08 <Form_Siemens_Reply+0x33c>)
 800cdbe:	7edb      	ldrb	r3, [r3, #27]
 800cdc0:	4a10      	ldr	r2, [pc, #64]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cdc2:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800cdc4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cdc8:	b2d8      	uxtb	r0, r3
 800cdca:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cdce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cdd2:	1899      	adds	r1, r3, r2
 800cdd4:	4b0b      	ldr	r3, [pc, #44]	; (800ce04 <Form_Siemens_Reply+0x338>)
 800cdd6:	7e9b      	ldrb	r3, [r3, #26]
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2200      	movs	r2, #0
 800cddc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdde:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cde0:	2302      	movs	r3, #2
 800cde2:	9302      	str	r3, [sp, #8]
 800cde4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800cde8:	e9cd 3400 	strd	r3, r4, [sp]
 800cdec:	460a      	mov	r2, r1
 800cdee:	2108      	movs	r1, #8
 800cdf0:	f001 f9d4 	bl	800e19c <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800cdf4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cdf8:	3308      	adds	r3, #8
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	da06      	bge.n	800ce0c <Form_Siemens_Reply+0x340>
 800cdfe:	3307      	adds	r3, #7
 800ce00:	e004      	b.n	800ce0c <Form_Siemens_Reply+0x340>
 800ce02:	bf00      	nop
 800ce04:	20002b18 	.word	0x20002b18
 800ce08:	200028f0 	.word	0x200028f0
 800ce0c:	10db      	asrs	r3, r3, #3
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ce14:	4413      	add	r3, r2
 800ce16:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ce1a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ce1e:	3308      	adds	r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	b21b      	sxth	r3, r3
 800ce24:	425a      	negs	r2, r3
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	f002 0207 	and.w	r2, r2, #7
 800ce2e:	bf58      	it	pl
 800ce30:	4253      	negpl	r3, r2
 800ce32:	b21b      	sxth	r3, r3
 800ce34:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800ce38:	4bc4      	ldr	r3, [pc, #784]	; (800d14c <Form_Siemens_Reply+0x680>)
 800ce3a:	7e9a      	ldrb	r2, [r3, #26]
 800ce3c:	4bc4      	ldr	r3, [pc, #784]	; (800d150 <Form_Siemens_Reply+0x684>)
 800ce3e:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800ce40:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ce44:	b2d8      	uxtb	r0, r3
 800ce46:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ce4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ce4e:	441a      	add	r2, r3
 800ce50:	4bbf      	ldr	r3, [pc, #764]	; (800d150 <Form_Siemens_Reply+0x684>)
 800ce52:	7edb      	ldrb	r3, [r3, #27]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2100      	movs	r1, #0
 800ce58:	623b      	str	r3, [r7, #32]
 800ce5a:	6279      	str	r1, [r7, #36]	; 0x24
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	9302      	str	r3, [sp, #8]
 800ce60:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ce64:	e9cd 3400 	strd	r3, r4, [sp]
 800ce68:	2108      	movs	r1, #8
 800ce6a:	f001 f997 	bl	800e19c <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800ce6e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ce72:	3308      	adds	r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da00      	bge.n	800ce7a <Form_Siemens_Reply+0x3ae>
 800ce78:	3307      	adds	r3, #7
 800ce7a:	10db      	asrs	r3, r3, #3
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ce82:	4413      	add	r3, r2
 800ce84:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ce88:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ce8c:	3308      	adds	r3, #8
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	b21b      	sxth	r3, r3
 800ce92:	425a      	negs	r2, r3
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	f002 0207 	and.w	r2, r2, #7
 800ce9c:	bf58      	it	pl
 800ce9e:	4253      	negpl	r3, r2
 800cea0:	b21b      	sxth	r3, r3
 800cea2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800cea6:	4ba9      	ldr	r3, [pc, #676]	; (800d14c <Form_Siemens_Reply+0x680>)
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	4aa9      	ldr	r2, [pc, #676]	; (800d150 <Form_Siemens_Reply+0x684>)
 800ceac:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800ceae:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ceb2:	b2d8      	uxtb	r0, r3
 800ceb4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ceb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cebc:	4413      	add	r3, r2
 800cebe:	4aa4      	ldr	r2, [pc, #656]	; (800d150 <Form_Siemens_Reply+0x684>)
 800cec0:	69d2      	ldr	r2, [r2, #28]
 800cec2:	2100      	movs	r1, #0
 800cec4:	61ba      	str	r2, [r7, #24]
 800cec6:	61f9      	str	r1, [r7, #28]
 800cec8:	2202      	movs	r2, #2
 800ceca:	9202      	str	r2, [sp, #8]
 800cecc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ced0:	e9cd 1200 	strd	r1, r2, [sp]
 800ced4:	461a      	mov	r2, r3
 800ced6:	2120      	movs	r1, #32
 800ced8:	f001 f960 	bl	800e19c <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800cedc:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cee0:	3320      	adds	r3, #32
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	da00      	bge.n	800cee8 <Form_Siemens_Reply+0x41c>
 800cee6:	3307      	adds	r3, #7
 800cee8:	10db      	asrs	r3, r3, #3
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cef0:	4413      	add	r3, r2
 800cef2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cef6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cefa:	3320      	adds	r3, #32
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	b21b      	sxth	r3, r3
 800cf00:	425a      	negs	r2, r3
 800cf02:	f003 0307 	and.w	r3, r3, #7
 800cf06:	f002 0207 	and.w	r2, r2, #7
 800cf0a:	bf58      	it	pl
 800cf0c:	4253      	negpl	r3, r2
 800cf0e:	b21b      	sxth	r3, r3
 800cf10:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800cf14:	4b8f      	ldr	r3, [pc, #572]	; (800d154 <Form_Siemens_Reply+0x688>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a8d      	ldr	r2, [pc, #564]	; (800d150 <Form_Siemens_Reply+0x684>)
 800cf1a:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800cf1c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cf20:	b2d8      	uxtb	r0, r3
 800cf22:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cf26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cf2a:	4413      	add	r3, r2
 800cf2c:	4a88      	ldr	r2, [pc, #544]	; (800d150 <Form_Siemens_Reply+0x684>)
 800cf2e:	6a12      	ldr	r2, [r2, #32]
 800cf30:	2100      	movs	r1, #0
 800cf32:	613a      	str	r2, [r7, #16]
 800cf34:	6179      	str	r1, [r7, #20]
 800cf36:	2202      	movs	r2, #2
 800cf38:	9202      	str	r2, [sp, #8]
 800cf3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cf3e:	e9cd 1200 	strd	r1, r2, [sp]
 800cf42:	461a      	mov	r2, r3
 800cf44:	2120      	movs	r1, #32
 800cf46:	f001 f929 	bl	800e19c <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800cf4a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cf4e:	3320      	adds	r3, #32
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	da00      	bge.n	800cf56 <Form_Siemens_Reply+0x48a>
 800cf54:	3307      	adds	r3, #7
 800cf56:	10db      	asrs	r3, r3, #3
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cf5e:	4413      	add	r3, r2
 800cf60:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cf64:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cf68:	3320      	adds	r3, #32
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	b21b      	sxth	r3, r3
 800cf6e:	425a      	negs	r2, r3
 800cf70:	f003 0307 	and.w	r3, r3, #7
 800cf74:	f002 0207 	and.w	r2, r2, #7
 800cf78:	bf58      	it	pl
 800cf7a:	4253      	negpl	r3, r2
 800cf7c:	b21b      	sxth	r3, r3
 800cf7e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800cf82:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800cf86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f001 fa6b 	bl	800e468 <Data_Compliment>
 800cf92:	4603      	mov	r3, r0
 800cf94:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800cf98:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cf9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f000 ff64 	bl	800de70 <Siemens_CRC>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cfae:	4b6a      	ldr	r3, [pc, #424]	; (800d158 <Form_Siemens_Reply+0x68c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	09db      	lsrs	r3, r3, #7
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d02c      	beq.n	800d016 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800cfbc:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cfc0:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cfc4:	4865      	ldr	r0, [pc, #404]	; (800d15c <Form_Siemens_Reply+0x690>)
 800cfc6:	f017 fd63 	bl	8024a90 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800cfca:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cfce:	4619      	mov	r1, r3
 800cfd0:	4863      	ldr	r0, [pc, #396]	; (800d160 <Form_Siemens_Reply+0x694>)
 800cfd2:	f017 fcc1 	bl	8024958 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cfd6:	4863      	ldr	r0, [pc, #396]	; (800d164 <Form_Siemens_Reply+0x698>)
 800cfd8:	f00f f966 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800cfdc:	4601      	mov	r1, r0
 800cfde:	4b62      	ldr	r3, [pc, #392]	; (800d168 <Form_Siemens_Reply+0x69c>)
 800cfe0:	fba3 2301 	umull	r2, r3, r3, r1
 800cfe4:	0bda      	lsrs	r2, r3, #15
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	041b      	lsls	r3, r3, #16
 800cfea:	1a9b      	subs	r3, r3, r2
 800cfec:	1aca      	subs	r2, r1, r3
 800cfee:	4613      	mov	r3, r2
 800cff0:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800cff4:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800cff8:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d104      	bne.n	800d00a <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800d000:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800d004:	3304      	adds	r3, #4
 800d006:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800d00a:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800d00e:	4619      	mov	r1, r3
 800d010:	4856      	ldr	r0, [pc, #344]	; (800d16c <Form_Siemens_Reply+0x6a0>)
 800d012:	f017 fca1 	bl	8024958 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800d016:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d01a:	b2d8      	uxtb	r0, r3
 800d01c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d020:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d024:	4413      	add	r3, r2
 800d026:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800d02a:	2100      	movs	r1, #0
 800d02c:	60ba      	str	r2, [r7, #8]
 800d02e:	60f9      	str	r1, [r7, #12]
 800d030:	2202      	movs	r2, #2
 800d032:	9202      	str	r2, [sp, #8]
 800d034:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d038:	e9cd 1200 	strd	r1, r2, [sp]
 800d03c:	461a      	mov	r2, r3
 800d03e:	2110      	movs	r1, #16
 800d040:	f001 f8ac 	bl	800e19c <Insert_cal_parity>
	BITSTUFFINC(16);
 800d044:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d048:	3310      	adds	r3, #16
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	da00      	bge.n	800d050 <Form_Siemens_Reply+0x584>
 800d04e:	3307      	adds	r3, #7
 800d050:	10db      	asrs	r3, r3, #3
 800d052:	b29a      	uxth	r2, r3
 800d054:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d058:	4413      	add	r3, r2
 800d05a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d05e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d062:	3310      	adds	r3, #16
 800d064:	b29b      	uxth	r3, r3
 800d066:	b21b      	sxth	r3, r3
 800d068:	425a      	negs	r2, r3
 800d06a:	f003 0307 	and.w	r3, r3, #7
 800d06e:	f002 0207 	and.w	r2, r2, #7
 800d072:	bf58      	it	pl
 800d074:	4253      	negpl	r3, r2
 800d076:	b21b      	sxth	r3, r3
 800d078:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800d07c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d080:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d084:	441a      	add	r2, r3
 800d086:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d08a:	3b02      	subs	r3, #2
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	4619      	mov	r1, r3
 800d090:	4610      	mov	r0, r2
 800d092:	f000 feed 	bl	800de70 <Siemens_CRC>
 800d096:	4603      	mov	r3, r0
 800d098:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d09c:	4b2e      	ldr	r3, [pc, #184]	; (800d158 <Form_Siemens_Reply+0x68c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	0a5b      	lsrs	r3, r3, #9
 800d0a2:	f003 0301 	and.w	r3, r3, #1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d02c      	beq.n	800d104 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800d0aa:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800d0ae:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800d0b2:	482a      	ldr	r0, [pc, #168]	; (800d15c <Form_Siemens_Reply+0x690>)
 800d0b4:	f017 fcec 	bl	8024a90 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800d0b8:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800d0bc:	4619      	mov	r1, r3
 800d0be:	482c      	ldr	r0, [pc, #176]	; (800d170 <Form_Siemens_Reply+0x6a4>)
 800d0c0:	f017 fc4a 	bl	8024958 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800d0c4:	4827      	ldr	r0, [pc, #156]	; (800d164 <Form_Siemens_Reply+0x698>)
 800d0c6:	f00f f8ef 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 800d0ca:	4601      	mov	r1, r0
 800d0cc:	4b26      	ldr	r3, [pc, #152]	; (800d168 <Form_Siemens_Reply+0x69c>)
 800d0ce:	fba3 2301 	umull	r2, r3, r3, r1
 800d0d2:	0bda      	lsrs	r2, r3, #15
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	041b      	lsls	r3, r3, #16
 800d0d8:	1a9b      	subs	r3, r3, r2
 800d0da:	1aca      	subs	r2, r1, r3
 800d0dc:	4613      	mov	r3, r2
 800d0de:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800d0e2:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800d0e6:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d104      	bne.n	800d0f8 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800d0ee:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800d0f8:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	481d      	ldr	r0, [pc, #116]	; (800d174 <Form_Siemens_Reply+0x6a8>)
 800d100:	f017 fc2a 	bl	8024958 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800d104:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800d10e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d112:	b2d8      	uxtb	r0, r3
 800d114:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800d118:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d11c:	4413      	add	r3, r2
 800d11e:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800d122:	2100      	movs	r1, #0
 800d124:	603a      	str	r2, [r7, #0]
 800d126:	6079      	str	r1, [r7, #4]
 800d128:	2202      	movs	r2, #2
 800d12a:	9202      	str	r2, [sp, #8]
 800d12c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d130:	e9cd 1200 	strd	r1, r2, [sp]
 800d134:	461a      	mov	r2, r3
 800d136:	2110      	movs	r1, #16
 800d138:	f001 f830 	bl	800e19c <Insert_cal_parity>
	BITSTUFFINC(16);
 800d13c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d140:	3310      	adds	r3, #16
 800d142:	2b00      	cmp	r3, #0
 800d144:	da18      	bge.n	800d178 <Form_Siemens_Reply+0x6ac>
 800d146:	3307      	adds	r3, #7
 800d148:	e016      	b.n	800d178 <Form_Siemens_Reply+0x6ac>
 800d14a:	bf00      	nop
 800d14c:	200028f0 	.word	0x200028f0
 800d150:	20002b18 	.word	0x20002b18
 800d154:	20003db4 	.word	0x20003db4
 800d158:	2000356c 	.word	0x2000356c
 800d15c:	08028150 	.word	0x08028150
 800d160:	08028400 	.word	0x08028400
 800d164:	2000f3c4 	.word	0x2000f3c4
 800d168:	80008001 	.word	0x80008001
 800d16c:	08028414 	.word	0x08028414
 800d170:	08028428 	.word	0x08028428
 800d174:	08028444 	.word	0x08028444
 800d178:	10db      	asrs	r3, r3, #3
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d180:	4413      	add	r3, r2
 800d182:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d186:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d18a:	3310      	adds	r3, #16
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	b21b      	sxth	r3, r3
 800d190:	425a      	negs	r2, r3
 800d192:	f003 0307 	and.w	r3, r3, #7
 800d196:	f002 0207 	and.w	r2, r2, #7
 800d19a:	bf58      	it	pl
 800d19c:	4253      	negpl	r3, r2
 800d19e:	b21b      	sxth	r3, r3
 800d1a0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800d1a4:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800d1a8:	3302      	adds	r3, #2
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	481e      	ldr	r0, [pc, #120]	; (800d22c <Form_Siemens_Reply+0x760>)
 800d1b4:	f017 fac0 	bl	8024738 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800d1b8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800d1bc:	3302      	adds	r3, #2
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	4b1a      	ldr	r3, [pc, #104]	; (800d22c <Form_Siemens_Reply+0x760>)
 800d1c2:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800d1c6:	f001 f9bb 	bl	800e540 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d1ca:	4b19      	ldr	r3, [pc, #100]	; (800d230 <Form_Siemens_Reply+0x764>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	099b      	lsrs	r3, r3, #6
 800d1d0:	f003 0301 	and.w	r3, r3, #1
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800d1d8:	4816      	ldr	r0, [pc, #88]	; (800d234 <Form_Siemens_Reply+0x768>)
 800d1da:	f017 fc59 	bl	8024a90 <puts>
 800d1de:	e00f      	b.n	800d200 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800d1e0:	4b15      	ldr	r3, [pc, #84]	; (800d238 <Form_Siemens_Reply+0x76c>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d10b      	bne.n	800d200 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800d1e8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	3302      	adds	r3, #2
 800d1f0:	b2d9      	uxtb	r1, r3
 800d1f2:	4a12      	ldr	r2, [pc, #72]	; (800d23c <Form_Siemens_Reply+0x770>)
 800d1f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1f8:	6812      	ldr	r2, [r2, #0]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f002 fc00 	bl	800fa00 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800d200:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d204:	2100      	movs	r1, #0
 800d206:	480e      	ldr	r0, [pc, #56]	; (800d240 <Form_Siemens_Reply+0x774>)
 800d208:	f017 fabe 	bl	8024788 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800d20c:	4a0c      	ldr	r2, [pc, #48]	; (800d240 <Form_Siemens_Reply+0x774>)
 800d20e:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <Form_Siemens_Reply+0x778>)
 800d210:	4610      	mov	r0, r2
 800d212:	4619      	mov	r1, r3
 800d214:	f44f 730a 	mov.w	r3, #552	; 0x228
 800d218:	461a      	mov	r2, r3
 800d21a:	f017 fa8d 	bl	8024738 <memcpy>
	UNUSED(App_data_Traverser);
}
 800d21e:	bf00      	nop
 800d220:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800d224:	46bd      	mov	sp, r7
 800d226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d22a:	bf00      	nop
 800d22c:	20002f68 	.word	0x20002f68
 800d230:	2000356c 	.word	0x2000356c
 800d234:	08028464 	.word	0x08028464
 800d238:	20004c95 	.word	0x20004c95
 800d23c:	200052fc 	.word	0x200052fc
 800d240:	20002d40 	.word	0x20002d40
 800d244:	20002b18 	.word	0x20002b18

0800d248 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800d24e:	4b64      	ldr	r3, [pc, #400]	; (800d3e0 <ProcessSendingSignals2MIE+0x198>)
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	4618      	mov	r0, r3
 800d254:	f002 f864 	bl	800f320 <HAL_Elaps_Ticks>
 800d258:	4602      	mov	r2, r0
 800d25a:	4b62      	ldr	r3, [pc, #392]	; (800d3e4 <ProcessSendingSignals2MIE+0x19c>)
 800d25c:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d260:	429a      	cmp	r2, r3
 800d262:	f240 80b9 	bls.w	800d3d8 <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800d266:	4b5e      	ldr	r3, [pc, #376]	; (800d3e0 <ProcessSendingSignals2MIE+0x198>)
 800d268:	781b      	ldrb	r3, [r3, #0]
		if(
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d113      	bne.n	800d296 <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800d26e:	4b5c      	ldr	r3, [pc, #368]	; (800d3e0 <ProcessSendingSignals2MIE+0x198>)
 800d270:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800d272:	2b01      	cmp	r3, #1
 800d274:	d10f      	bne.n	800d296 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800d276:	4b5c      	ldr	r3, [pc, #368]	; (800d3e8 <ProcessSendingSignals2MIE+0x1a0>)
 800d278:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d10b      	bne.n	800d296 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800d27e:	4b5b      	ldr	r3, [pc, #364]	; (800d3ec <ProcessSendingSignals2MIE+0x1a4>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d107      	bne.n	800d296 <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800d286:	4b5a      	ldr	r3, [pc, #360]	; (800d3f0 <ProcessSendingSignals2MIE+0x1a8>)
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	4959      	ldr	r1, [pc, #356]	; (800d3f4 <ProcessSendingSignals2MIE+0x1ac>)
 800d28e:	485a      	ldr	r0, [pc, #360]	; (800d3f8 <ProcessSendingSignals2MIE+0x1b0>)
 800d290:	f017 fa52 	bl	8024738 <memcpy>
 800d294:	e02d      	b.n	800d2f2 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800d296:	4b54      	ldr	r3, [pc, #336]	; (800d3e8 <ProcessSendingSignals2MIE+0x1a0>)
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d10f      	bne.n	800d2be <ProcessSendingSignals2MIE+0x76>
 800d29e:	4b53      	ldr	r3, [pc, #332]	; (800d3ec <ProcessSendingSignals2MIE+0x1a4>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10b      	bne.n	800d2be <ProcessSendingSignals2MIE+0x76>
 800d2a6:	4b4e      	ldr	r3, [pc, #312]	; (800d3e0 <ProcessSendingSignals2MIE+0x198>)
 800d2a8:	785b      	ldrb	r3, [r3, #1]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d107      	bne.n	800d2be <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800d2ae:	4b53      	ldr	r3, [pc, #332]	; (800d3fc <ProcessSendingSignals2MIE+0x1b4>)
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	4952      	ldr	r1, [pc, #328]	; (800d400 <ProcessSendingSignals2MIE+0x1b8>)
 800d2b6:	4850      	ldr	r0, [pc, #320]	; (800d3f8 <ProcessSendingSignals2MIE+0x1b0>)
 800d2b8:	f017 fa3e 	bl	8024738 <memcpy>
 800d2bc:	e019      	b.n	800d2f2 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800d2be:	4b4b      	ldr	r3, [pc, #300]	; (800d3ec <ProcessSendingSignals2MIE+0x1a4>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d10f      	bne.n	800d2e6 <ProcessSendingSignals2MIE+0x9e>
 800d2c6:	4b48      	ldr	r3, [pc, #288]	; (800d3e8 <ProcessSendingSignals2MIE+0x1a0>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10b      	bne.n	800d2e6 <ProcessSendingSignals2MIE+0x9e>
 800d2ce:	4b44      	ldr	r3, [pc, #272]	; (800d3e0 <ProcessSendingSignals2MIE+0x198>)
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d107      	bne.n	800d2e6 <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800d2d6:	4b46      	ldr	r3, [pc, #280]	; (800d3f0 <ProcessSendingSignals2MIE+0x1a8>)
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	4945      	ldr	r1, [pc, #276]	; (800d3f4 <ProcessSendingSignals2MIE+0x1ac>)
 800d2de:	4846      	ldr	r0, [pc, #280]	; (800d3f8 <ProcessSendingSignals2MIE+0x1b0>)
 800d2e0:	f017 fa2a 	bl	8024738 <memcpy>
 800d2e4:	e005      	b.n	800d2f2 <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800d2e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	4842      	ldr	r0, [pc, #264]	; (800d3f8 <ProcessSendingSignals2MIE+0x1b0>)
 800d2ee:	f017 fa4b 	bl	8024788 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800d2f2:	4b3e      	ldr	r3, [pc, #248]	; (800d3ec <ProcessSendingSignals2MIE+0x1a4>)
 800d2f4:	885b      	ldrh	r3, [r3, #2]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	4b3a      	ldr	r3, [pc, #232]	; (800d3e4 <ProcessSendingSignals2MIE+0x19c>)
 800d2fa:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d30d      	bcc.n	800d31e <ProcessSendingSignals2MIE+0xd6>
 800d302:	4b39      	ldr	r3, [pc, #228]	; (800d3e8 <ProcessSendingSignals2MIE+0x1a0>)
 800d304:	885b      	ldrh	r3, [r3, #2]
 800d306:	461a      	mov	r2, r3
 800d308:	4b36      	ldr	r3, [pc, #216]	; (800d3e4 <ProcessSendingSignals2MIE+0x19c>)
 800d30a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d30e:	429a      	cmp	r2, r3
 800d310:	d305      	bcc.n	800d31e <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800d312:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d316:	2100      	movs	r1, #0
 800d318:	4837      	ldr	r0, [pc, #220]	; (800d3f8 <ProcessSendingSignals2MIE+0x1b0>)
 800d31a:	f017 fa35 	bl	8024788 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800d31e:	4b31      	ldr	r3, [pc, #196]	; (800d3e4 <ProcessSendingSignals2MIE+0x19c>)
 800d320:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d324:	f003 0307 	and.w	r3, r3, #7
 800d328:	b29a      	uxth	r2, r3
 800d32a:	4b36      	ldr	r3, [pc, #216]	; (800d404 <ProcessSendingSignals2MIE+0x1bc>)
 800d32c:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800d32e:	4b35      	ldr	r3, [pc, #212]	; (800d404 <ProcessSendingSignals2MIE+0x1bc>)
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d009      	beq.n	800d34a <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800d336:	4b2b      	ldr	r3, [pc, #172]	; (800d3e4 <ProcessSendingSignals2MIE+0x19c>)
 800d338:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d33c:	08db      	lsrs	r3, r3, #3
 800d33e:	b29b      	uxth	r3, r3
 800d340:	3301      	adds	r3, #1
 800d342:	b29a      	uxth	r2, r3
 800d344:	4b2f      	ldr	r3, [pc, #188]	; (800d404 <ProcessSendingSignals2MIE+0x1bc>)
 800d346:	801a      	strh	r2, [r3, #0]
 800d348:	e006      	b.n	800d358 <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800d34a:	4b26      	ldr	r3, [pc, #152]	; (800d3e4 <ProcessSendingSignals2MIE+0x19c>)
 800d34c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d350:	08db      	lsrs	r3, r3, #3
 800d352:	b29a      	uxth	r2, r3
 800d354:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <ProcessSendingSignals2MIE+0x1bc>)
 800d356:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800d358:	492b      	ldr	r1, [pc, #172]	; (800d408 <ProcessSendingSignals2MIE+0x1c0>)
 800d35a:	482c      	ldr	r0, [pc, #176]	; (800d40c <ProcessSendingSignals2MIE+0x1c4>)
 800d35c:	f7f2 ff70 	bl	8000240 <strcmp>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d008      	beq.n	800d378 <ProcessSendingSignals2MIE+0x130>
 800d366:	4b1e      	ldr	r3, [pc, #120]	; (800d3e0 <ProcessSendingSignals2MIE+0x198>)
 800d368:	785b      	ldrb	r3, [r3, #1]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d104      	bne.n	800d378 <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800d36e:	f240 1019 	movw	r0, #281	; 0x119
 800d372:	f002 fd89 	bl	800fe88 <TransmitCanPkt>
 800d376:	e011      	b.n	800d39c <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800d378:	4923      	ldr	r1, [pc, #140]	; (800d408 <ProcessSendingSignals2MIE+0x1c0>)
 800d37a:	4824      	ldr	r0, [pc, #144]	; (800d40c <ProcessSendingSignals2MIE+0x1c4>)
 800d37c:	f7f2 ff60 	bl	8000240 <strcmp>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d106      	bne.n	800d394 <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800d386:	4b1a      	ldr	r3, [pc, #104]	; (800d3f0 <ProcessSendingSignals2MIE+0x1a8>)
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	4919      	ldr	r1, [pc, #100]	; (800d3f4 <ProcessSendingSignals2MIE+0x1ac>)
 800d38e:	481a      	ldr	r0, [pc, #104]	; (800d3f8 <ProcessSendingSignals2MIE+0x1b0>)
 800d390:	f017 f9d2 	bl	8024738 <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800d394:	f240 1019 	movw	r0, #281	; 0x119
 800d398:	f002 fd76 	bl	800fe88 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800d39c:	481c      	ldr	r0, [pc, #112]	; (800d410 <ProcessSendingSignals2MIE+0x1c8>)
 800d39e:	f017 fadb 	bl	8024958 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	80fb      	strh	r3, [r7, #6]
 800d3a6:	e00a      	b.n	800d3be <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800d3a8:	88fb      	ldrh	r3, [r7, #6]
 800d3aa:	4a16      	ldr	r2, [pc, #88]	; (800d404 <ProcessSendingSignals2MIE+0x1bc>)
 800d3ac:	4413      	add	r3, r2
 800d3ae:	789b      	ldrb	r3, [r3, #2]
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	4818      	ldr	r0, [pc, #96]	; (800d414 <ProcessSendingSignals2MIE+0x1cc>)
 800d3b4:	f017 fad0 	bl	8024958 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800d3b8:	88fb      	ldrh	r3, [r7, #6]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	80fb      	strh	r3, [r7, #6]
 800d3be:	4b11      	ldr	r3, [pc, #68]	; (800d404 <ProcessSendingSignals2MIE+0x1bc>)
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	88fa      	ldrh	r2, [r7, #6]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d3ef      	bcc.n	800d3a8 <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800d3c8:	200a      	movs	r0, #10
 800d3ca:	f017 fadd 	bl	8024988 <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800d3ce:	f00a fab9 	bl	8017944 <HAL_GetTick>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	4a02      	ldr	r2, [pc, #8]	; (800d3e0 <ProcessSendingSignals2MIE+0x198>)
 800d3d6:	6053      	str	r3, [r2, #4]
	}
}
 800d3d8:	bf00      	nop
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20003580 	.word	0x20003580
 800d3e4:	20000304 	.word	0x20000304
 800d3e8:	20003578 	.word	0x20003578
 800d3ec:	20003574 	.word	0x20003574
 800d3f0:	200037a0 	.word	0x200037a0
 800d3f4:	200037a4 	.word	0x200037a4
 800d3f8:	2000359e 	.word	0x2000359e
 800d3fc:	200039a4 	.word	0x200039a4
 800d400:	200039a8 	.word	0x200039a8
 800d404:	2000359c 	.word	0x2000359c
 800d408:	080283d0 	.word	0x080283d0
 800d40c:	20000305 	.word	0x20000305
 800d410:	0802848c 	.word	0x0802848c
 800d414:	080284a4 	.word	0x080284a4

0800d418 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800d41c:	4b0c      	ldr	r3, [pc, #48]	; (800d450 <ProcessSelfSharing+0x38>)
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	4618      	mov	r0, r3
 800d422:	f001 ff7d 	bl	800f320 <HAL_Elaps_Ticks>
 800d426:	4602      	mov	r2, r0
 800d428:	4b0a      	ldr	r3, [pc, #40]	; (800d454 <ProcessSelfSharing+0x3c>)
 800d42a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800d42e:	429a      	cmp	r2, r3
 800d430:	d90b      	bls.n	800d44a <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800d432:	4b09      	ldr	r3, [pc, #36]	; (800d458 <ProcessSelfSharing+0x40>)
 800d434:	2200      	movs	r2, #0
 800d436:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800d438:	f240 2001 	movw	r0, #513	; 0x201
 800d43c:	f002 fd24 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800d440:	f00a fa80 	bl	8017944 <HAL_GetTick>
 800d444:	4603      	mov	r3, r0
 800d446:	4a02      	ldr	r2, [pc, #8]	; (800d450 <ProcessSelfSharing+0x38>)
 800d448:	6093      	str	r3, [r2, #8]
	}
}
 800d44a:	bf00      	nop
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	20003580 	.word	0x20003580
 800d454:	20000304 	.word	0x20000304
 800d458:	20003574 	.word	0x20003574

0800d45c <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800d460:	4b1a      	ldr	r3, [pc, #104]	; (800d4cc <ProcessDetectNoValidDataReceive+0x70>)
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d014      	beq.n	800d492 <ProcessDetectNoValidDataReceive+0x36>
 800d468:	4b18      	ldr	r3, [pc, #96]	; (800d4cc <ProcessDetectNoValidDataReceive+0x70>)
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f001 ff57 	bl	800f320 <HAL_Elaps_Ticks>
 800d472:	4602      	mov	r2, r0
 800d474:	4b16      	ldr	r3, [pc, #88]	; (800d4d0 <ProcessDetectNoValidDataReceive+0x74>)
 800d476:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d909      	bls.n	800d492 <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800d47e:	4b15      	ldr	r3, [pc, #84]	; (800d4d4 <ProcessDetectNoValidDataReceive+0x78>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d005      	beq.n	800d492 <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800d486:	4814      	ldr	r0, [pc, #80]	; (800d4d8 <ProcessDetectNoValidDataReceive+0x7c>)
 800d488:	f017 fb02 	bl	8024a90 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800d48c:	4b11      	ldr	r3, [pc, #68]	; (800d4d4 <ProcessDetectNoValidDataReceive+0x78>)
 800d48e:	2200      	movs	r2, #0
 800d490:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800d492:	4b10      	ldr	r3, [pc, #64]	; (800d4d4 <ProcessDetectNoValidDataReceive+0x78>)
 800d494:	885b      	ldrh	r3, [r3, #2]
 800d496:	461a      	mov	r2, r3
 800d498:	4b0d      	ldr	r3, [pc, #52]	; (800d4d0 <ProcessDetectNoValidDataReceive+0x74>)
 800d49a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d911      	bls.n	800d4c6 <ProcessDetectNoValidDataReceive+0x6a>
 800d4a2:	4b0e      	ldr	r3, [pc, #56]	; (800d4dc <ProcessDetectNoValidDataReceive+0x80>)
 800d4a4:	885b      	ldrh	r3, [r3, #2]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	4b09      	ldr	r3, [pc, #36]	; (800d4d0 <ProcessDetectNoValidDataReceive+0x74>)
 800d4aa:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d909      	bls.n	800d4c6 <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800d4b2:	4b08      	ldr	r3, [pc, #32]	; (800d4d4 <ProcessDetectNoValidDataReceive+0x78>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d005      	beq.n	800d4c6 <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800d4ba:	4809      	ldr	r0, [pc, #36]	; (800d4e0 <ProcessDetectNoValidDataReceive+0x84>)
 800d4bc:	f017 fae8 	bl	8024a90 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800d4c0:	4b04      	ldr	r3, [pc, #16]	; (800d4d4 <ProcessDetectNoValidDataReceive+0x78>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800d4c6:	bf00      	nop
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20003580 	.word	0x20003580
 800d4d0:	20000304 	.word	0x20000304
 800d4d4:	20003574 	.word	0x20003574
 800d4d8:	080284ac 	.word	0x080284ac
 800d4dc:	20003578 	.word	0x20003578
 800d4e0:	080284cc 	.word	0x080284cc

0800d4e4 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800d4e8:	4b09      	ldr	r3, [pc, #36]	; (800d510 <SendRelays2Other+0x2c>)
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f001 ff17 	bl	800f320 <HAL_Elaps_Ticks>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4f8:	d908      	bls.n	800d50c <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800d4fa:	f240 2007 	movw	r0, #519	; 0x207
 800d4fe:	f002 fcc3 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d502:	f00a fa1f 	bl	8017944 <HAL_GetTick>
 800d506:	4603      	mov	r3, r0
 800d508:	4a01      	ldr	r2, [pc, #4]	; (800d510 <SendRelays2Other+0x2c>)
 800d50a:	6113      	str	r3, [r2, #16]

	}
}
 800d50c:	bf00      	nop
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20003580 	.word	0x20003580

0800d514 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800d518:	4b16      	ldr	r3, [pc, #88]	; (800d574 <CheckRelayMisMatch+0x60>)
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f001 feff 	bl	800f320 <HAL_Elaps_Ticks>
 800d522:	4603      	mov	r3, r0
 800d524:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d528:	d922      	bls.n	800d570 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800d52a:	4b13      	ldr	r3, [pc, #76]	; (800d578 <CheckRelayMisMatch+0x64>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10c      	bne.n	800d54c <CheckRelayMisMatch+0x38>
 800d532:	4b12      	ldr	r3, [pc, #72]	; (800d57c <CheckRelayMisMatch+0x68>)
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d108      	bne.n	800d54c <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800d53a:	4a11      	ldr	r2, [pc, #68]	; (800d580 <CheckRelayMisMatch+0x6c>)
 800d53c:	4b11      	ldr	r3, [pc, #68]	; (800d584 <CheckRelayMisMatch+0x70>)
 800d53e:	4610      	mov	r0, r2
 800d540:	4619      	mov	r1, r3
 800d542:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d546:	461a      	mov	r2, r3
 800d548:	f017 f8f6 	bl	8024738 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800d54c:	4b0d      	ldr	r3, [pc, #52]	; (800d584 <CheckRelayMisMatch+0x70>)
 800d54e:	885a      	ldrh	r2, [r3, #2]
 800d550:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <CheckRelayMisMatch+0x6c>)
 800d552:	885b      	ldrh	r3, [r3, #2]
 800d554:	429a      	cmp	r2, r3
 800d556:	d003      	beq.n	800d560 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800d558:	4b06      	ldr	r3, [pc, #24]	; (800d574 <CheckRelayMisMatch+0x60>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	701a      	strb	r2, [r3, #0]
 800d55e:	e002      	b.n	800d566 <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = RESET;
 800d560:	4b04      	ldr	r3, [pc, #16]	; (800d574 <CheckRelayMisMatch+0x60>)
 800d562:	2200      	movs	r2, #0
 800d564:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800d566:	f00a f9ed 	bl	8017944 <HAL_GetTick>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4a01      	ldr	r2, [pc, #4]	; (800d574 <CheckRelayMisMatch+0x60>)
 800d56e:	6153      	str	r3, [r2, #20]
	}
}
 800d570:	bf00      	nop
 800d572:	bd80      	pop	{r7, pc}
 800d574:	20003580 	.word	0x20003580
 800d578:	20003574 	.word	0x20003574
 800d57c:	20003578 	.word	0x20003578
 800d580:	200037a0 	.word	0x200037a0
 800d584:	200039a4 	.word	0x200039a4

0800d588 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800d58c:	4b16      	ldr	r3, [pc, #88]	; (800d5e8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d58e:	785b      	ldrb	r3, [r3, #1]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d101      	bne.n	800d598 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800d594:	f006 ff1e 	bl	80143d4 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800d598:	4b13      	ldr	r3, [pc, #76]	; (800d5e8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d59a:	699b      	ldr	r3, [r3, #24]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f001 febf 	bl	800f320 <HAL_Elaps_Ticks>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	4b11      	ldr	r3, [pc, #68]	; (800d5ec <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800d5a6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d31a      	bcc.n	800d5e4 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800d5ae:	4b0e      	ldr	r3, [pc, #56]	; (800d5e8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d5b0:	699a      	ldr	r2, [r3, #24]
 800d5b2:	4b0f      	ldr	r3, [pc, #60]	; (800d5f0 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d014      	beq.n	800d5e4 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800d5ba:	4b0b      	ldr	r3, [pc, #44]	; (800d5e8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800d5c0:	4b09      	ldr	r3, [pc, #36]	; (800d5e8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d5c2:	699b      	ldr	r3, [r3, #24]
 800d5c4:	4a0a      	ldr	r2, [pc, #40]	; (800d5f0 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d5c6:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800d5c8:	4b07      	ldr	r3, [pc, #28]	; (800d5e8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f001 fea7 	bl	800f320 <HAL_Elaps_Ticks>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	4a07      	ldr	r2, [pc, #28]	; (800d5f4 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800d5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5da:	099b      	lsrs	r3, r3, #6
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4806      	ldr	r0, [pc, #24]	; (800d5f8 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800d5e0:	f017 f9ba 	bl	8024958 <iprintf>
		}
	}
}
 800d5e4:	bf00      	nop
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	20003580 	.word	0x20003580
 800d5ec:	20000304 	.word	0x20000304
 800d5f0:	20004c98 	.word	0x20004c98
 800d5f4:	10624dd3 	.word	0x10624dd3
 800d5f8:	080284f0 	.word	0x080284f0

0800d5fc <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	4611      	mov	r1, r2
 800d608:	461a      	mov	r2, r3
 800d60a:	460b      	mov	r3, r1
 800d60c:	80fb      	strh	r3, [r7, #6]
 800d60e:	4613      	mov	r3, r2
 800d610:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800d612:	484d      	ldr	r0, [pc, #308]	; (800d748 <Print_Siemens_MSG+0x14c>)
 800d614:	f017 f9a0 	bl	8024958 <iprintf>
	if(TX_RX == TX)
 800d618:	797b      	ldrb	r3, [r7, #5]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d103      	bne.n	800d626 <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800d61e:	484b      	ldr	r0, [pc, #300]	; (800d74c <Print_Siemens_MSG+0x150>)
 800d620:	f017 f99a 	bl	8024958 <iprintf>
 800d624:	e005      	b.n	800d632 <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800d626:	797b      	ldrb	r3, [r7, #5]
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d102      	bne.n	800d632 <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800d62c:	4848      	ldr	r0, [pc, #288]	; (800d750 <Print_Siemens_MSG+0x154>)
 800d62e:	f017 f993 	bl	8024958 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	4619      	mov	r1, r3
 800d638:	4846      	ldr	r0, [pc, #280]	; (800d754 <Print_Siemens_MSG+0x158>)
 800d63a:	f017 f98d 	bl	8024958 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	4619      	mov	r1, r3
 800d644:	4844      	ldr	r0, [pc, #272]	; (800d758 <Print_Siemens_MSG+0x15c>)
 800d646:	f017 f987 	bl	8024958 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	7b1b      	ldrb	r3, [r3, #12]
 800d64e:	4619      	mov	r1, r3
 800d650:	4842      	ldr	r0, [pc, #264]	; (800d75c <Print_Siemens_MSG+0x160>)
 800d652:	f017 f981 	bl	8024958 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	4619      	mov	r1, r3
 800d65c:	4840      	ldr	r0, [pc, #256]	; (800d760 <Print_Siemens_MSG+0x164>)
 800d65e:	f017 f97b 	bl	8024958 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	7e1b      	ldrb	r3, [r3, #24]
 800d666:	4619      	mov	r1, r3
 800d668:	483e      	ldr	r0, [pc, #248]	; (800d764 <Print_Siemens_MSG+0x168>)
 800d66a:	f017 f975 	bl	8024958 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	7e5b      	ldrb	r3, [r3, #25]
 800d672:	4619      	mov	r1, r3
 800d674:	483c      	ldr	r0, [pc, #240]	; (800d768 <Print_Siemens_MSG+0x16c>)
 800d676:	f017 f96f 	bl	8024958 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	7e9b      	ldrb	r3, [r3, #26]
 800d67e:	4619      	mov	r1, r3
 800d680:	483a      	ldr	r0, [pc, #232]	; (800d76c <Print_Siemens_MSG+0x170>)
 800d682:	f017 f969 	bl	8024958 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	7edb      	ldrb	r3, [r3, #27]
 800d68a:	4619      	mov	r1, r3
 800d68c:	4838      	ldr	r0, [pc, #224]	; (800d770 <Print_Siemens_MSG+0x174>)
 800d68e:	f017 f963 	bl	8024958 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	4619      	mov	r1, r3
 800d698:	4836      	ldr	r0, [pc, #216]	; (800d774 <Print_Siemens_MSG+0x178>)
 800d69a:	f017 f95d 	bl	8024958 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4834      	ldr	r0, [pc, #208]	; (800d778 <Print_Siemens_MSG+0x17c>)
 800d6a6:	f017 f957 	bl	8024958 <iprintf>
	if(TX_RX == RX)
 800d6aa:	797b      	ldrb	r3, [r7, #5]
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d122      	bne.n	800d6f6 <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4831      	ldr	r0, [pc, #196]	; (800d77c <Print_Siemens_MSG+0x180>)
 800d6b8:	f017 f94e 	bl	8024958 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d6bc:	2300      	movs	r3, #0
 800d6be:	82fb      	strh	r3, [r7, #22]
 800d6c0:	e00b      	b.n	800d6da <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800d6c2:	8afb      	ldrh	r3, [r7, #22]
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	482c      	ldr	r0, [pc, #176]	; (800d780 <Print_Siemens_MSG+0x184>)
 800d6d0:	f017 f942 	bl	8024958 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d6d4:	8afb      	ldrh	r3, [r7, #22]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	82fb      	strh	r3, [r7, #22]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d6de:	8afa      	ldrh	r2, [r7, #22]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d3ee      	bcc.n	800d6c2 <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800d6e4:	200a      	movs	r0, #10
 800d6e6:	f017 f94f 	bl	8024988 <putchar>

		if(Debug_flag == 2)
 800d6ea:	4b26      	ldr	r3, [pc, #152]	; (800d784 <Print_Siemens_MSG+0x188>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d101      	bne.n	800d6f6 <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800d6f2:	f000 ff65 	bl	800e5c0 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800d6f6:	4b23      	ldr	r3, [pc, #140]	; (800d784 <Print_Siemens_MSG+0x188>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d120      	bne.n	800d740 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d6fe:	2300      	movs	r3, #0
 800d700:	82bb      	strh	r3, [r7, #20]
 800d702:	e016      	b.n	800d732 <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800d704:	8abb      	ldrh	r3, [r7, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d008      	beq.n	800d71c <Print_Siemens_MSG+0x120>
 800d70a:	8abb      	ldrh	r3, [r7, #20]
 800d70c:	f003 031f 	and.w	r3, r3, #31
 800d710:	b29b      	uxth	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d102      	bne.n	800d71c <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800d716:	200a      	movs	r0, #10
 800d718:	f017 f936 	bl	8024988 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800d71c:	8abb      	ldrh	r3, [r7, #20]
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	4413      	add	r3, r2
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	4619      	mov	r1, r3
 800d726:	4816      	ldr	r0, [pc, #88]	; (800d780 <Print_Siemens_MSG+0x184>)
 800d728:	f017 f916 	bl	8024958 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d72c:	8abb      	ldrh	r3, [r7, #20]
 800d72e:	3301      	adds	r3, #1
 800d730:	82bb      	strh	r3, [r7, #20]
 800d732:	8aba      	ldrh	r2, [r7, #20]
 800d734:	88fb      	ldrh	r3, [r7, #6]
 800d736:	429a      	cmp	r2, r3
 800d738:	d3e4      	bcc.n	800d704 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800d73a:	200a      	movs	r0, #10
 800d73c:	f017 f924 	bl	8024988 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800d740:	bf00      	nop
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	08028520 	.word	0x08028520
 800d74c:	08028528 	.word	0x08028528
 800d750:	0802852c 	.word	0x0802852c
 800d754:	08028530 	.word	0x08028530
 800d758:	08028538 	.word	0x08028538
 800d75c:	08028540 	.word	0x08028540
 800d760:	08028548 	.word	0x08028548
 800d764:	08028550 	.word	0x08028550
 800d768:	0802855c 	.word	0x0802855c
 800d76c:	08028564 	.word	0x08028564
 800d770:	0802856c 	.word	0x0802856c
 800d774:	08028574 	.word	0x08028574
 800d778:	08028580 	.word	0x08028580
 800d77c:	0802858c 	.word	0x0802858c
 800d780:	080284a4 	.word	0x080284a4
 800d784:	2000065d 	.word	0x2000065d

0800d788 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b09a      	sub	sp, #104	; 0x68
 800d78c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800d78e:	2300      	movs	r3, #0
 800d790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800d794:	2300      	movs	r3, #0
 800d796:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	1d3b      	adds	r3, r7, #4
 800d7a6:	2260      	movs	r2, #96	; 0x60
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f016 ffec 	bl	8024788 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800d7b0:	4bb9      	ldr	r3, [pc, #740]	; (800da98 <Chech_forSiemensCMD+0x310>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f001 fdb3 	bl	800f320 <HAL_Elaps_Ticks>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b09      	cmp	r3, #9
 800d7be:	f240 81ad 	bls.w	800db1c <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800d7c2:	e010      	b.n	800d7e6 <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	f009 fd95 	bl	80172f4 <Com_Get_Byte>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800d7d0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800d7da:	3368      	adds	r3, #104	; 0x68
 800d7dc:	443b      	add	r3, r7
 800d7de:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800d7e2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	f009 fd44 	bl	8017274 <Com_DataReady>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1e8      	bne.n	800d7c4 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800d7f2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 8144 	beq.w	800da84 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800d7fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d800:	3368      	adds	r3, #104	; 0x68
 800d802:	443b      	add	r3, r7
 800d804:	2200      	movs	r2, #0
 800d806:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800d80a:	463b      	mov	r3, r7
 800d80c:	4619      	mov	r1, r3
 800d80e:	48a3      	ldr	r0, [pc, #652]	; (800da9c <Chech_forSiemensCMD+0x314>)
 800d810:	f017 f8a2 	bl	8024958 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800d814:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800d818:	463b      	mov	r3, r7
 800d81a:	4611      	mov	r1, r2
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 faf3 	bl	800de08 <Is_SiemensCommand_Valid>
 800d822:	4603      	mov	r3, r0
 800d824:	2b0c      	cmp	r3, #12
 800d826:	f200 8129 	bhi.w	800da7c <Chech_forSiemensCMD+0x2f4>
 800d82a:	a201      	add	r2, pc, #4	; (adr r2, 800d830 <Chech_forSiemensCMD+0xa8>)
 800d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d830:	0800d865 	.word	0x0800d865
 800d834:	0800d873 	.word	0x0800d873
 800d838:	0800d8d7 	.word	0x0800d8d7
 800d83c:	0800d8f9 	.word	0x0800d8f9
 800d840:	0800d921 	.word	0x0800d921
 800d844:	0800d949 	.word	0x0800d949
 800d848:	0800d971 	.word	0x0800d971
 800d84c:	0800d999 	.word	0x0800d999
 800d850:	0800d9c1 	.word	0x0800d9c1
 800d854:	0800d9e9 	.word	0x0800d9e9
 800d858:	0800da11 	.word	0x0800da11
 800d85c:	0800da39 	.word	0x0800da39
 800d860:	0800da61 	.word	0x0800da61
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800d864:	4b8e      	ldr	r3, [pc, #568]	; (800daa0 <Chech_forSiemensCMD+0x318>)
 800d866:	2201      	movs	r2, #1
 800d868:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800d86a:	488e      	ldr	r0, [pc, #568]	; (800daa4 <Chech_forSiemensCMD+0x31c>)
 800d86c:	f017 f910 	bl	8024a90 <puts>
				break;
 800d870:	e109      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800d872:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d876:	3b01      	subs	r3, #1
 800d878:	3368      	adds	r3, #104	; 0x68
 800d87a:	443b      	add	r3, r7
 800d87c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d880:	3b30      	subs	r3, #48	; 0x30
 800d882:	461a      	mov	r2, r3
 800d884:	4988      	ldr	r1, [pc, #544]	; (800daa8 <Chech_forSiemensCMD+0x320>)
 800d886:	4889      	ldr	r0, [pc, #548]	; (800daac <Chech_forSiemensCMD+0x324>)
 800d888:	f017 f866 	bl	8024958 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800d88c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d890:	3b01      	subs	r3, #1
 800d892:	3368      	adds	r3, #104	; 0x68
 800d894:	443b      	add	r3, r7
 800d896:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d89a:	2b2f      	cmp	r3, #47	; 0x2f
 800d89c:	d914      	bls.n	800d8c8 <Chech_forSiemensCMD+0x140>
 800d89e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	3368      	adds	r3, #104	; 0x68
 800d8a6:	443b      	add	r3, r7
 800d8a8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d8ac:	2b32      	cmp	r3, #50	; 0x32
 800d8ae:	d80b      	bhi.n	800d8c8 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800d8b0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	3368      	adds	r3, #104	; 0x68
 800d8b8:	443b      	add	r3, r7
 800d8ba:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d8be:	3b30      	subs	r3, #48	; 0x30
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	4b7b      	ldr	r3, [pc, #492]	; (800dab0 <Chech_forSiemensCMD+0x328>)
 800d8c4:	701a      	strb	r2, [r3, #0]
 800d8c6:	e002      	b.n	800d8ce <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800d8c8:	487a      	ldr	r0, [pc, #488]	; (800dab4 <Chech_forSiemensCMD+0x32c>)
 800d8ca:	f017 f8e1 	bl	8024a90 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d8d4:	e0d7      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800d8d6:	4978      	ldr	r1, [pc, #480]	; (800dab8 <Chech_forSiemensCMD+0x330>)
 800d8d8:	4878      	ldr	r0, [pc, #480]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800d8da:	f017 f83d 	bl	8024958 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800d8de:	4878      	ldr	r0, [pc, #480]	; (800dac0 <Chech_forSiemensCMD+0x338>)
 800d8e0:	f017 f8d6 	bl	8024a90 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d8e4:	4b77      	ldr	r3, [pc, #476]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f043 0301 	orr.w	r3, r3, #1
 800d8ec:	4a75      	ldr	r2, [pc, #468]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d8ee:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d8f6:	e0c6      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800d8f8:	4973      	ldr	r1, [pc, #460]	; (800dac8 <Chech_forSiemensCMD+0x340>)
 800d8fa:	4870      	ldr	r0, [pc, #448]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800d8fc:	f017 f82c 	bl	8024958 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800d900:	4872      	ldr	r0, [pc, #456]	; (800dacc <Chech_forSiemensCMD+0x344>)
 800d902:	f017 f8c5 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d906:	4b6f      	ldr	r3, [pc, #444]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d90c:	4b6d      	ldr	r3, [pc, #436]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f043 0302 	orr.w	r3, r3, #2
 800d914:	4a6b      	ldr	r2, [pc, #428]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d916:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d918:	2301      	movs	r3, #1
 800d91a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d91e:	e0b2      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800d920:	496b      	ldr	r1, [pc, #428]	; (800dad0 <Chech_forSiemensCMD+0x348>)
 800d922:	4866      	ldr	r0, [pc, #408]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800d924:	f017 f818 	bl	8024958 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800d928:	486a      	ldr	r0, [pc, #424]	; (800dad4 <Chech_forSiemensCMD+0x34c>)
 800d92a:	f017 f8b1 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d92e:	4b65      	ldr	r3, [pc, #404]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d934:	4b63      	ldr	r3, [pc, #396]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f043 0304 	orr.w	r3, r3, #4
 800d93c:	4a61      	ldr	r2, [pc, #388]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d93e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d940:	2301      	movs	r3, #1
 800d942:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d946:	e09e      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800d948:	4963      	ldr	r1, [pc, #396]	; (800dad8 <Chech_forSiemensCMD+0x350>)
 800d94a:	485c      	ldr	r0, [pc, #368]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800d94c:	f017 f804 	bl	8024958 <iprintf>
				printf("INVALID_DES_PORT\n");
 800d950:	4862      	ldr	r0, [pc, #392]	; (800dadc <Chech_forSiemensCMD+0x354>)
 800d952:	f017 f89d 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d956:	4b5b      	ldr	r3, [pc, #364]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d958:	2200      	movs	r2, #0
 800d95a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d95c:	4b59      	ldr	r3, [pc, #356]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f043 0308 	orr.w	r3, r3, #8
 800d964:	4a57      	ldr	r2, [pc, #348]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d966:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d968:	2301      	movs	r3, #1
 800d96a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d96e:	e08a      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800d970:	495b      	ldr	r1, [pc, #364]	; (800dae0 <Chech_forSiemensCMD+0x358>)
 800d972:	4852      	ldr	r0, [pc, #328]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800d974:	f016 fff0 	bl	8024958 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800d978:	485a      	ldr	r0, [pc, #360]	; (800dae4 <Chech_forSiemensCMD+0x35c>)
 800d97a:	f017 f889 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d97e:	4b51      	ldr	r3, [pc, #324]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d984:	4b4f      	ldr	r3, [pc, #316]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f043 0310 	orr.w	r3, r3, #16
 800d98c:	4a4d      	ldr	r2, [pc, #308]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d98e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d990:	2301      	movs	r3, #1
 800d992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d996:	e076      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800d998:	4953      	ldr	r1, [pc, #332]	; (800dae8 <Chech_forSiemensCMD+0x360>)
 800d99a:	4848      	ldr	r0, [pc, #288]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800d99c:	f016 ffdc 	bl	8024958 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800d9a0:	4852      	ldr	r0, [pc, #328]	; (800daec <Chech_forSiemensCMD+0x364>)
 800d9a2:	f017 f875 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d9a6:	4b47      	ldr	r3, [pc, #284]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d9ac:	4b45      	ldr	r3, [pc, #276]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f043 0320 	orr.w	r3, r3, #32
 800d9b4:	4a43      	ldr	r2, [pc, #268]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9b6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d9be:	e062      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800d9c0:	494b      	ldr	r1, [pc, #300]	; (800daf0 <Chech_forSiemensCMD+0x368>)
 800d9c2:	484c      	ldr	r0, [pc, #304]	; (800daf4 <Chech_forSiemensCMD+0x36c>)
 800d9c4:	f016 ffc8 	bl	8024958 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800d9c8:	484b      	ldr	r0, [pc, #300]	; (800daf8 <Chech_forSiemensCMD+0x370>)
 800d9ca:	f017 f861 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d9ce:	4b3d      	ldr	r3, [pc, #244]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d9d4:	4b3b      	ldr	r3, [pc, #236]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9dc:	4a39      	ldr	r2, [pc, #228]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9de:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d9e6:	e04e      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800d9e8:	4944      	ldr	r1, [pc, #272]	; (800dafc <Chech_forSiemensCMD+0x374>)
 800d9ea:	4834      	ldr	r0, [pc, #208]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800d9ec:	f016 ffb4 	bl	8024958 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800d9f0:	4843      	ldr	r0, [pc, #268]	; (800db00 <Chech_forSiemensCMD+0x378>)
 800d9f2:	f017 f84d 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d9f6:	4b33      	ldr	r3, [pc, #204]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d9fc:	4b31      	ldr	r3, [pc, #196]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da04:	4a2f      	ldr	r2, [pc, #188]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da06:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800da08:	2301      	movs	r3, #1
 800da0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800da0e:	e03a      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800da10:	493c      	ldr	r1, [pc, #240]	; (800db04 <Chech_forSiemensCMD+0x37c>)
 800da12:	482a      	ldr	r0, [pc, #168]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800da14:	f016 ffa0 	bl	8024958 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800da18:	483b      	ldr	r0, [pc, #236]	; (800db08 <Chech_forSiemensCMD+0x380>)
 800da1a:	f017 f839 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800da1e:	4b29      	ldr	r3, [pc, #164]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da20:	2200      	movs	r2, #0
 800da22:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800da24:	4b27      	ldr	r3, [pc, #156]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da2c:	4a25      	ldr	r2, [pc, #148]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da2e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800da30:	2301      	movs	r3, #1
 800da32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800da36:	e026      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800da38:	4934      	ldr	r1, [pc, #208]	; (800db0c <Chech_forSiemensCMD+0x384>)
 800da3a:	4820      	ldr	r0, [pc, #128]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800da3c:	f016 ff8c 	bl	8024958 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800da40:	4833      	ldr	r0, [pc, #204]	; (800db10 <Chech_forSiemensCMD+0x388>)
 800da42:	f017 f825 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800da46:	4b1f      	ldr	r3, [pc, #124]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da48:	2200      	movs	r2, #0
 800da4a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800da4c:	4b1d      	ldr	r3, [pc, #116]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da54:	4a1b      	ldr	r2, [pc, #108]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da56:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800da58:	2301      	movs	r3, #1
 800da5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800da5e:	e012      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800da60:	492c      	ldr	r1, [pc, #176]	; (800db14 <Chech_forSiemensCMD+0x38c>)
 800da62:	4816      	ldr	r0, [pc, #88]	; (800dabc <Chech_forSiemensCMD+0x334>)
 800da64:	f016 ff78 	bl	8024958 <iprintf>
				printf("CLEAR ALL\n");
 800da68:	482b      	ldr	r0, [pc, #172]	; (800db18 <Chech_forSiemensCMD+0x390>)
 800da6a:	f017 f811 	bl	8024a90 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800da6e:	4b15      	ldr	r3, [pc, #84]	; (800dac4 <Chech_forSiemensCMD+0x33c>)
 800da70:	2200      	movs	r2, #0
 800da72:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800da74:	2301      	movs	r3, #1
 800da76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800da7a:	e004      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800da7c:	480d      	ldr	r0, [pc, #52]	; (800dab4 <Chech_forSiemensCMD+0x32c>)
 800da7e:	f017 f807 	bl	8024a90 <puts>
 800da82:	e000      	b.n	800da86 <Chech_forSiemensCMD+0x2fe>
			}
		}
 800da84:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800da86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d147      	bne.n	800db1e <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800da8e:	f240 2005 	movw	r0, #517	; 0x205
 800da92:	f002 f9f9 	bl	800fe88 <TransmitCanPkt>
 800da96:	e042      	b.n	800db1e <Chech_forSiemensCMD+0x396>
 800da98:	2000f74c 	.word	0x2000f74c
 800da9c:	08028594 	.word	0x08028594
 800daa0:	2000065c 	.word	0x2000065c
 800daa4:	080285ac 	.word	0x080285ac
 800daa8:	200048de 	.word	0x200048de
 800daac:	080285ec 	.word	0x080285ec
 800dab0:	2000065d 	.word	0x2000065d
 800dab4:	08028600 	.word	0x08028600
 800dab8:	20004910 	.word	0x20004910
 800dabc:	0802861c 	.word	0x0802861c
 800dac0:	0802862c 	.word	0x0802862c
 800dac4:	2000356c 	.word	0x2000356c
 800dac8:	20004942 	.word	0x20004942
 800dacc:	08028644 	.word	0x08028644
 800dad0:	20004974 	.word	0x20004974
 800dad4:	0802865c 	.word	0x0802865c
 800dad8:	200049a6 	.word	0x200049a6
 800dadc:	08028670 	.word	0x08028670
 800dae0:	200049d8 	.word	0x200049d8
 800dae4:	08028684 	.word	0x08028684
 800dae8:	20004a0a 	.word	0x20004a0a
 800daec:	08028698 	.word	0x08028698
 800daf0:	20004a3c 	.word	0x20004a3c
 800daf4:	080286b4 	.word	0x080286b4
 800daf8:	080286cc 	.word	0x080286cc
 800dafc:	20004a6e 	.word	0x20004a6e
 800db00:	080286e0 	.word	0x080286e0
 800db04:	20004aa0 	.word	0x20004aa0
 800db08:	080286f8 	.word	0x080286f8
 800db0c:	20004ad2 	.word	0x20004ad2
 800db10:	08028718 	.word	0x08028718
 800db14:	20004b04 	.word	0x20004b04
 800db18:	08028738 	.word	0x08028738
		return;
 800db1c:	bf00      	nop
		}
	}
}
 800db1e:	3768      	adds	r7, #104	; 0x68
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800db24:	b4b0      	push	{r4, r5, r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	4aa6      	ldr	r2, [pc, #664]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800db32:	2132      	movs	r1, #50	; 0x32
 800db34:	fb01 f303 	mul.w	r3, r1, r3
 800db38:	4413      	add	r3, r2
 800db3a:	2224      	movs	r2, #36	; 0x24
 800db3c:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800db3e:	79fb      	ldrb	r3, [r7, #7]
 800db40:	4aa2      	ldr	r2, [pc, #648]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800db42:	2132      	movs	r1, #50	; 0x32
 800db44:	fb01 f303 	mul.w	r3, r1, r3
 800db48:	4413      	add	r3, r2
 800db4a:	3301      	adds	r3, #1
 800db4c:	2201      	movs	r2, #1
 800db4e:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	4a9e      	ldr	r2, [pc, #632]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800db54:	2132      	movs	r1, #50	; 0x32
 800db56:	fb01 f303 	mul.w	r3, r1, r3
 800db5a:	4413      	add	r3, r2
 800db5c:	3302      	adds	r3, #2
 800db5e:	2230      	movs	r2, #48	; 0x30
 800db60:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	4a99      	ldr	r2, [pc, #612]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800db66:	2132      	movs	r1, #50	; 0x32
 800db68:	fb01 f303 	mul.w	r3, r1, r3
 800db6c:	4413      	add	r3, r2
 800db6e:	3303      	adds	r3, #3
 800db70:	2240      	movs	r2, #64	; 0x40
 800db72:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800db74:	79fb      	ldrb	r3, [r7, #7]
 800db76:	4a95      	ldr	r2, [pc, #596]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800db78:	2132      	movs	r1, #50	; 0x32
 800db7a:	fb01 f303 	mul.w	r3, r1, r3
 800db7e:	4413      	add	r3, r2
 800db80:	3304      	adds	r3, #4
 800db82:	22c0      	movs	r2, #192	; 0xc0
 800db84:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800db86:	79fb      	ldrb	r3, [r7, #7]
 800db88:	4a90      	ldr	r2, [pc, #576]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800db8a:	2132      	movs	r1, #50	; 0x32
 800db8c:	fb01 f303 	mul.w	r3, r1, r3
 800db90:	4413      	add	r3, r2
 800db92:	3305      	adds	r3, #5
 800db94:	224e      	movs	r2, #78	; 0x4e
 800db96:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800db98:	79fb      	ldrb	r3, [r7, #7]
 800db9a:	4a8c      	ldr	r2, [pc, #560]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800db9c:	2132      	movs	r1, #50	; 0x32
 800db9e:	fb01 f303 	mul.w	r3, r1, r3
 800dba2:	4413      	add	r3, r2
 800dba4:	3306      	adds	r3, #6
 800dba6:	2226      	movs	r2, #38	; 0x26
 800dba8:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800dbaa:	79fb      	ldrb	r3, [r7, #7]
 800dbac:	3301      	adds	r3, #1
 800dbae:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	1c5a      	adds	r2, r3, #1
 800dbb4:	71fa      	strb	r2, [r7, #7]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	2332      	movs	r3, #50	; 0x32
 800dbba:	fb02 f303 	mul.w	r3, r2, r3
 800dbbe:	4a83      	ldr	r2, [pc, #524]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dbc0:	4413      	add	r3, r2
 800dbc2:	4983      	ldr	r1, [pc, #524]	; (800ddd0 <Update_SiemensCommands+0x2ac>)
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	cb03      	ldmia	r3!, {r0, r1}
 800dbca:	6010      	str	r0, [r2, #0]
 800dbcc:	6051      	str	r1, [r2, #4]
 800dbce:	8819      	ldrh	r1, [r3, #0]
 800dbd0:	789b      	ldrb	r3, [r3, #2]
 800dbd2:	8111      	strh	r1, [r2, #8]
 800dbd4:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	1c5a      	adds	r2, r3, #1
 800dbda:	71fa      	strb	r2, [r7, #7]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	2332      	movs	r3, #50	; 0x32
 800dbe0:	fb02 f303 	mul.w	r3, r2, r3
 800dbe4:	4a79      	ldr	r2, [pc, #484]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dbe6:	4413      	add	r3, r2
 800dbe8:	4a7a      	ldr	r2, [pc, #488]	; (800ddd4 <Update_SiemensCommands+0x2b0>)
 800dbea:	461d      	mov	r5, r3
 800dbec:	4614      	mov	r4, r2
 800dbee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbf0:	6028      	str	r0, [r5, #0]
 800dbf2:	6069      	str	r1, [r5, #4]
 800dbf4:	60aa      	str	r2, [r5, #8]
 800dbf6:	60eb      	str	r3, [r5, #12]
 800dbf8:	6820      	ldr	r0, [r4, #0]
 800dbfa:	6128      	str	r0, [r5, #16]
 800dbfc:	7923      	ldrb	r3, [r4, #4]
 800dbfe:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	1c5a      	adds	r2, r3, #1
 800dc04:	71fa      	strb	r2, [r7, #7]
 800dc06:	461a      	mov	r2, r3
 800dc08:	2332      	movs	r3, #50	; 0x32
 800dc0a:	fb02 f303 	mul.w	r3, r2, r3
 800dc0e:	4a6f      	ldr	r2, [pc, #444]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dc10:	4413      	add	r3, r2
 800dc12:	4a71      	ldr	r2, [pc, #452]	; (800ddd8 <Update_SiemensCommands+0x2b4>)
 800dc14:	461d      	mov	r5, r3
 800dc16:	4614      	mov	r4, r2
 800dc18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc1a:	6028      	str	r0, [r5, #0]
 800dc1c:	6069      	str	r1, [r5, #4]
 800dc1e:	60aa      	str	r2, [r5, #8]
 800dc20:	60eb      	str	r3, [r5, #12]
 800dc22:	6820      	ldr	r0, [r4, #0]
 800dc24:	6128      	str	r0, [r5, #16]
 800dc26:	7923      	ldrb	r3, [r4, #4]
 800dc28:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800dc2a:	79fb      	ldrb	r3, [r7, #7]
 800dc2c:	1c5a      	adds	r2, r3, #1
 800dc2e:	71fa      	strb	r2, [r7, #7]
 800dc30:	461a      	mov	r2, r3
 800dc32:	2332      	movs	r3, #50	; 0x32
 800dc34:	fb02 f303 	mul.w	r3, r2, r3
 800dc38:	4a64      	ldr	r2, [pc, #400]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dc3a:	4413      	add	r3, r2
 800dc3c:	4a67      	ldr	r2, [pc, #412]	; (800dddc <Update_SiemensCommands+0x2b8>)
 800dc3e:	461d      	mov	r5, r3
 800dc40:	4614      	mov	r4, r2
 800dc42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc44:	6028      	str	r0, [r5, #0]
 800dc46:	6069      	str	r1, [r5, #4]
 800dc48:	60aa      	str	r2, [r5, #8]
 800dc4a:	60eb      	str	r3, [r5, #12]
 800dc4c:	7823      	ldrb	r3, [r4, #0]
 800dc4e:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800dc50:	79fb      	ldrb	r3, [r7, #7]
 800dc52:	1c5a      	adds	r2, r3, #1
 800dc54:	71fa      	strb	r2, [r7, #7]
 800dc56:	461a      	mov	r2, r3
 800dc58:	2332      	movs	r3, #50	; 0x32
 800dc5a:	fb02 f303 	mul.w	r3, r2, r3
 800dc5e:	4a5b      	ldr	r2, [pc, #364]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dc60:	4413      	add	r3, r2
 800dc62:	4a5f      	ldr	r2, [pc, #380]	; (800dde0 <Update_SiemensCommands+0x2bc>)
 800dc64:	461d      	mov	r5, r3
 800dc66:	4614      	mov	r4, r2
 800dc68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc6a:	6028      	str	r0, [r5, #0]
 800dc6c:	6069      	str	r1, [r5, #4]
 800dc6e:	60aa      	str	r2, [r5, #8]
 800dc70:	60eb      	str	r3, [r5, #12]
 800dc72:	7823      	ldrb	r3, [r4, #0]
 800dc74:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	71fa      	strb	r2, [r7, #7]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	2332      	movs	r3, #50	; 0x32
 800dc80:	fb02 f303 	mul.w	r3, r2, r3
 800dc84:	4a51      	ldr	r2, [pc, #324]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dc86:	4413      	add	r3, r2
 800dc88:	4a56      	ldr	r2, [pc, #344]	; (800dde4 <Update_SiemensCommands+0x2c0>)
 800dc8a:	461d      	mov	r5, r3
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc90:	6028      	str	r0, [r5, #0]
 800dc92:	6069      	str	r1, [r5, #4]
 800dc94:	60aa      	str	r2, [r5, #8]
 800dc96:	60eb      	str	r3, [r5, #12]
 800dc98:	7823      	ldrb	r3, [r4, #0]
 800dc9a:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800dc9c:	79fb      	ldrb	r3, [r7, #7]
 800dc9e:	1c5a      	adds	r2, r3, #1
 800dca0:	71fa      	strb	r2, [r7, #7]
 800dca2:	461a      	mov	r2, r3
 800dca4:	2332      	movs	r3, #50	; 0x32
 800dca6:	fb02 f303 	mul.w	r3, r2, r3
 800dcaa:	4a48      	ldr	r2, [pc, #288]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dcac:	4413      	add	r3, r2
 800dcae:	4a4e      	ldr	r2, [pc, #312]	; (800dde8 <Update_SiemensCommands+0x2c4>)
 800dcb0:	461d      	mov	r5, r3
 800dcb2:	4614      	mov	r4, r2
 800dcb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcb6:	6028      	str	r0, [r5, #0]
 800dcb8:	6069      	str	r1, [r5, #4]
 800dcba:	60aa      	str	r2, [r5, #8]
 800dcbc:	60eb      	str	r3, [r5, #12]
 800dcbe:	cc03      	ldmia	r4!, {r0, r1}
 800dcc0:	6128      	str	r0, [r5, #16]
 800dcc2:	6169      	str	r1, [r5, #20]
 800dcc4:	8823      	ldrh	r3, [r4, #0]
 800dcc6:	78a2      	ldrb	r2, [r4, #2]
 800dcc8:	832b      	strh	r3, [r5, #24]
 800dcca:	4613      	mov	r3, r2
 800dccc:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	71fa      	strb	r2, [r7, #7]
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	2332      	movs	r3, #50	; 0x32
 800dcd8:	fb02 f303 	mul.w	r3, r2, r3
 800dcdc:	4a3b      	ldr	r2, [pc, #236]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dcde:	4413      	add	r3, r2
 800dce0:	4a42      	ldr	r2, [pc, #264]	; (800ddec <Update_SiemensCommands+0x2c8>)
 800dce2:	461d      	mov	r5, r3
 800dce4:	4614      	mov	r4, r2
 800dce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dce8:	6028      	str	r0, [r5, #0]
 800dcea:	6069      	str	r1, [r5, #4]
 800dcec:	60aa      	str	r2, [r5, #8]
 800dcee:	60eb      	str	r3, [r5, #12]
 800dcf0:	8823      	ldrh	r3, [r4, #0]
 800dcf2:	78a2      	ldrb	r2, [r4, #2]
 800dcf4:	822b      	strh	r3, [r5, #16]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	1c5a      	adds	r2, r3, #1
 800dcfe:	71fa      	strb	r2, [r7, #7]
 800dd00:	461a      	mov	r2, r3
 800dd02:	2332      	movs	r3, #50	; 0x32
 800dd04:	fb02 f303 	mul.w	r3, r2, r3
 800dd08:	4a30      	ldr	r2, [pc, #192]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dd0a:	4413      	add	r3, r2
 800dd0c:	4a38      	ldr	r2, [pc, #224]	; (800ddf0 <Update_SiemensCommands+0x2cc>)
 800dd0e:	461d      	mov	r5, r3
 800dd10:	4614      	mov	r4, r2
 800dd12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd14:	6028      	str	r0, [r5, #0]
 800dd16:	6069      	str	r1, [r5, #4]
 800dd18:	60aa      	str	r2, [r5, #8]
 800dd1a:	60eb      	str	r3, [r5, #12]
 800dd1c:	cc03      	ldmia	r4!, {r0, r1}
 800dd1e:	6128      	str	r0, [r5, #16]
 800dd20:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800dd22:	79fb      	ldrb	r3, [r7, #7]
 800dd24:	1c5a      	adds	r2, r3, #1
 800dd26:	71fa      	strb	r2, [r7, #7]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	2332      	movs	r3, #50	; 0x32
 800dd2c:	fb02 f303 	mul.w	r3, r2, r3
 800dd30:	4a26      	ldr	r2, [pc, #152]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dd32:	4413      	add	r3, r2
 800dd34:	4a2f      	ldr	r2, [pc, #188]	; (800ddf4 <Update_SiemensCommands+0x2d0>)
 800dd36:	461c      	mov	r4, r3
 800dd38:	4615      	mov	r5, r2
 800dd3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd3c:	6020      	str	r0, [r4, #0]
 800dd3e:	6061      	str	r1, [r4, #4]
 800dd40:	60a2      	str	r2, [r4, #8]
 800dd42:	60e3      	str	r3, [r4, #12]
 800dd44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd46:	6120      	str	r0, [r4, #16]
 800dd48:	6161      	str	r1, [r4, #20]
 800dd4a:	61a2      	str	r2, [r4, #24]
 800dd4c:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	1c5a      	adds	r2, r3, #1
 800dd52:	71fa      	strb	r2, [r7, #7]
 800dd54:	461a      	mov	r2, r3
 800dd56:	2332      	movs	r3, #50	; 0x32
 800dd58:	fb02 f303 	mul.w	r3, r2, r3
 800dd5c:	4a1b      	ldr	r2, [pc, #108]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dd5e:	4413      	add	r3, r2
 800dd60:	4a25      	ldr	r2, [pc, #148]	; (800ddf8 <Update_SiemensCommands+0x2d4>)
 800dd62:	461d      	mov	r5, r3
 800dd64:	4614      	mov	r4, r2
 800dd66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd68:	6028      	str	r0, [r5, #0]
 800dd6a:	6069      	str	r1, [r5, #4]
 800dd6c:	60aa      	str	r2, [r5, #8]
 800dd6e:	60eb      	str	r3, [r5, #12]
 800dd70:	cc07      	ldmia	r4!, {r0, r1, r2}
 800dd72:	6128      	str	r0, [r5, #16]
 800dd74:	6169      	str	r1, [r5, #20]
 800dd76:	61aa      	str	r2, [r5, #24]
 800dd78:	7823      	ldrb	r3, [r4, #0]
 800dd7a:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800dd7c:	79fb      	ldrb	r3, [r7, #7]
 800dd7e:	1c5a      	adds	r2, r3, #1
 800dd80:	71fa      	strb	r2, [r7, #7]
 800dd82:	461a      	mov	r2, r3
 800dd84:	2332      	movs	r3, #50	; 0x32
 800dd86:	fb02 f303 	mul.w	r3, r2, r3
 800dd8a:	4a10      	ldr	r2, [pc, #64]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800dd8c:	4413      	add	r3, r2
 800dd8e:	491b      	ldr	r1, [pc, #108]	; (800ddfc <Update_SiemensCommands+0x2d8>)
 800dd90:	461a      	mov	r2, r3
 800dd92:	460b      	mov	r3, r1
 800dd94:	cb03      	ldmia	r3!, {r0, r1}
 800dd96:	6010      	str	r0, [r2, #0]
 800dd98:	6051      	str	r1, [r2, #4]
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800dd9e:	79fb      	ldrb	r3, [r7, #7]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	71fa      	strb	r2, [r7, #7]
 800dda4:	461a      	mov	r2, r3
 800dda6:	2332      	movs	r3, #50	; 0x32
 800dda8:	fb02 f303 	mul.w	r3, r2, r3
 800ddac:	4a07      	ldr	r2, [pc, #28]	; (800ddcc <Update_SiemensCommands+0x2a8>)
 800ddae:	4413      	add	r3, r2
 800ddb0:	4a13      	ldr	r2, [pc, #76]	; (800de00 <Update_SiemensCommands+0x2dc>)
 800ddb2:	6810      	ldr	r0, [r2, #0]
 800ddb4:	6018      	str	r0, [r3, #0]
 800ddb6:	7912      	ldrb	r2, [r2, #4]
 800ddb8:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800ddba:	4a12      	ldr	r2, [pc, #72]	; (800de04 <Update_SiemensCommands+0x2e0>)
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	7013      	strb	r3, [r2, #0]
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bcb0      	pop	{r4, r5, r7}
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	200048ac 	.word	0x200048ac
 800ddd0:	08028744 	.word	0x08028744
 800ddd4:	0802862c 	.word	0x0802862c
 800ddd8:	08028644 	.word	0x08028644
 800dddc:	0802865c 	.word	0x0802865c
 800dde0:	08028670 	.word	0x08028670
 800dde4:	08028684 	.word	0x08028684
 800dde8:	08028750 	.word	0x08028750
 800ddec:	080286cc 	.word	0x080286cc
 800ddf0:	080286e0 	.word	0x080286e0
 800ddf4:	080286f8 	.word	0x080286f8
 800ddf8:	08028718 	.word	0x08028718
 800ddfc:	0802876c 	.word	0x0802876c
 800de00:	08028778 	.word	0x08028778
 800de04:	20004c94 	.word	0x20004c94

0800de08 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	460b      	mov	r3, r1
 800de12:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800de14:	2300      	movs	r3, #0
 800de16:	73fb      	strb	r3, [r7, #15]
 800de18:	e01c      	b.n	800de54 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	2232      	movs	r2, #50	; 0x32
 800de1e:	fb02 f303 	mul.w	r3, r2, r3
 800de22:	4a11      	ldr	r2, [pc, #68]	; (800de68 <Is_SiemensCommand_Valid+0x60>)
 800de24:	189c      	adds	r4, r3, r2
 800de26:	7bfb      	ldrb	r3, [r7, #15]
 800de28:	2232      	movs	r2, #50	; 0x32
 800de2a:	fb02 f303 	mul.w	r3, r2, r3
 800de2e:	4a0e      	ldr	r2, [pc, #56]	; (800de68 <Is_SiemensCommand_Valid+0x60>)
 800de30:	4413      	add	r3, r2
 800de32:	4618      	mov	r0, r3
 800de34:	f7f2 fa0e 	bl	8000254 <strlen>
 800de38:	4603      	mov	r3, r0
 800de3a:	461a      	mov	r2, r3
 800de3c:	4621      	mov	r1, r4
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f016 fc6a 	bl	8024718 <memcmp>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	e008      	b.n	800de60 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	3301      	adds	r3, #1
 800de52:	73fb      	strb	r3, [r7, #15]
 800de54:	4b05      	ldr	r3, [pc, #20]	; (800de6c <Is_SiemensCommand_Valid+0x64>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	7bfa      	ldrb	r2, [r7, #15]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d3dd      	bcc.n	800de1a <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800de5e:	23ff      	movs	r3, #255	; 0xff
}
 800de60:	4618      	mov	r0, r3
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	bd90      	pop	{r4, r7, pc}
 800de68:	200048ac 	.word	0x200048ac
 800de6c:	20004c94 	.word	0x20004c94

0800de70 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800de70:	b480      	push	{r7}
 800de72:	b087      	sub	sp, #28
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800de7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de80:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800de82:	2300      	movs	r3, #0
 800de84:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800de86:	2300      	movs	r3, #0
 800de88:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800de8a:	2300      	movs	r3, #0
 800de8c:	82bb      	strh	r3, [r7, #20]
 800de8e:	e022      	b.n	800ded6 <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800de90:	8abb      	ldrh	r3, [r7, #20]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	4413      	add	r3, r2
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	b29a      	uxth	r2, r3
 800de9a:	8afb      	ldrh	r3, [r7, #22]
 800de9c:	4053      	eors	r3, r2
 800de9e:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800dea0:	2300      	movs	r3, #0
 800dea2:	613b      	str	r3, [r7, #16]
 800dea4:	e011      	b.n	800deca <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800dea6:	8afb      	ldrh	r3, [r7, #22]
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b00      	cmp	r3, #0
 800deae:	d006      	beq.n	800debe <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800deb0:	8afb      	ldrh	r3, [r7, #22]
 800deb2:	085b      	lsrs	r3, r3, #1
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	4b17      	ldr	r3, [pc, #92]	; (800df14 <Siemens_CRC+0xa4>)
 800deb8:	4053      	eors	r3, r2
 800deba:	82fb      	strh	r3, [r7, #22]
 800debc:	e002      	b.n	800dec4 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800debe:	8afb      	ldrh	r3, [r7, #22]
 800dec0:	085b      	lsrs	r3, r3, #1
 800dec2:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	3301      	adds	r3, #1
 800dec8:	613b      	str	r3, [r7, #16]
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	2b07      	cmp	r3, #7
 800dece:	ddea      	ble.n	800dea6 <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800ded0:	8abb      	ldrh	r3, [r7, #20]
 800ded2:	3301      	adds	r3, #1
 800ded4:	82bb      	strh	r3, [r7, #20]
 800ded6:	8aba      	ldrh	r2, [r7, #20]
 800ded8:	887b      	ldrh	r3, [r7, #2]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d3d8      	bcc.n	800de90 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800dede:	8afb      	ldrh	r3, [r7, #22]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800dee4:	8afb      	ldrh	r3, [r7, #22]
 800dee6:	0a1b      	lsrs	r3, r3, #8
 800dee8:	b29b      	uxth	r3, r3
 800deea:	b2db      	uxtb	r3, r3
 800deec:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800deee:	7b3b      	ldrb	r3, [r7, #12]
 800def0:	021b      	lsls	r3, r3, #8
 800def2:	b21a      	sxth	r2, r3
 800def4:	7b7b      	ldrb	r3, [r7, #13]
 800def6:	b21b      	sxth	r3, r3
 800def8:	4313      	orrs	r3, r2
 800defa:	b21b      	sxth	r3, r3
 800defc:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800defe:	8afb      	ldrh	r3, [r7, #22]
 800df00:	43db      	mvns	r3, r3
 800df02:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800df04:	8afb      	ldrh	r3, [r7, #22]
}
 800df06:	4618      	mov	r0, r3
 800df08:	371c      	adds	r7, #28
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	ffff8408 	.word	0xffff8408

0800df18 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	603a      	str	r2, [r7, #0]
 800df20:	461a      	mov	r2, r3
 800df22:	4603      	mov	r3, r0
 800df24:	71fb      	strb	r3, [r7, #7]
 800df26:	460b      	mov	r3, r1
 800df28:	71bb      	strb	r3, [r7, #6]
 800df2a:	4613      	mov	r3, r2
 800df2c:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800df2e:	2300      	movs	r3, #0
 800df30:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800df32:	2300      	movs	r3, #0
 800df34:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800df36:	797b      	ldrb	r3, [r7, #5]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d010      	beq.n	800df5e <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800df3c:	79bb      	ldrb	r3, [r7, #6]
 800df3e:	08db      	lsrs	r3, r3, #3
 800df40:	b2db      	uxtb	r3, r3
 800df42:	797a      	ldrb	r2, [r7, #5]
 800df44:	4619      	mov	r1, r3
 800df46:	6838      	ldr	r0, [r7, #0]
 800df48:	f000 f8d0 	bl	800e0ec <Verify_parity>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d110      	bne.n	800df74 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800df52:	4840      	ldr	r0, [pc, #256]	; (800e054 <Extract_Parity_Data+0x13c>)
 800df54:	f016 fd9c 	bl	8024a90 <puts>
			return -1;
 800df58:	f04f 33ff 	mov.w	r3, #4294967295
 800df5c:	e075      	b.n	800e04a <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800df5e:	79fb      	ldrb	r3, [r7, #7]
 800df60:	b29b      	uxth	r3, r3
 800df62:	79ba      	ldrb	r2, [r7, #6]
 800df64:	b291      	uxth	r1, r2
 800df66:	683a      	ldr	r2, [r7, #0]
 800df68:	4618      	mov	r0, r3
 800df6a:	f7f2 fb53 	bl	8000614 <ExtractBits>
 800df6e:	6138      	str	r0, [r7, #16]
		return Return_value;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	e06a      	b.n	800e04a <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800df74:	79bb      	ldrb	r3, [r7, #6]
 800df76:	2b08      	cmp	r3, #8
 800df78:	d108      	bne.n	800df8c <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800df80:	7dfb      	ldrb	r3, [r7, #23]
 800df82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df86:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800df88:	7dfb      	ldrb	r3, [r7, #23]
 800df8a:	e05e      	b.n	800e04a <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800df8c:	79bb      	ldrb	r3, [r7, #6]
 800df8e:	2b18      	cmp	r3, #24
 800df90:	d15a      	bne.n	800e048 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800df98:	7dfb      	ldrb	r3, [r7, #23]
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
 800dfa2:	085b      	lsrs	r3, r3, #1
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb2:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800dfb4:	7dfb      	ldrb	r3, [r7, #23]
 800dfb6:	089b      	lsrs	r3, r3, #2
 800dfb8:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800dfba:	7dfb      	ldrb	r3, [r7, #23]
 800dfbc:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	785b      	ldrb	r3, [r3, #1]
 800dfc2:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800dfcc:	7dfb      	ldrb	r3, [r7, #23]
 800dfce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd2:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800dfd4:	7dfb      	ldrb	r3, [r7, #23]
 800dfd6:	085b      	lsrs	r3, r3, #1
 800dfd8:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d104      	bne.n	800dfea <Extract_Parity_Data+0xd2>
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
 800dfe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe6:	75fb      	strb	r3, [r7, #23]
 800dfe8:	e003      	b.n	800dff2 <Extract_Parity_Data+0xda>
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
 800dfec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dff0:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d104      	bne.n	800e002 <Extract_Parity_Data+0xea>
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dffe:	75fb      	strb	r3, [r7, #23]
 800e000:	e003      	b.n	800e00a <Extract_Parity_Data+0xf2>
 800e002:	7dfb      	ldrb	r3, [r7, #23]
 800e004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e008:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	021b      	lsls	r3, r3, #8
 800e00e:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800e010:	7dfb      	ldrb	r3, [r7, #23]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	4413      	add	r3, r2
 800e016:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	789b      	ldrb	r3, [r3, #2]
 800e01c:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800e01e:	7b7b      	ldrb	r3, [r7, #13]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d104      	bne.n	800e02e <Extract_Parity_Data+0x116>
 800e024:	7dfb      	ldrb	r3, [r7, #23]
 800e026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e02a:	75fb      	strb	r3, [r7, #23]
 800e02c:	e003      	b.n	800e036 <Extract_Parity_Data+0x11e>
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e034:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	021b      	lsls	r3, r3, #8
 800e03a:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800e03c:	7dfb      	ldrb	r3, [r7, #23]
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	4413      	add	r3, r2
 800e042:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	e000      	b.n	800e04a <Extract_Parity_Data+0x132>
	}
	return 0;
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3718      	adds	r7, #24
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	08028780 	.word	0x08028780

0800e058 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	460a      	mov	r2, r1
 800e062:	71fb      	strb	r3, [r7, #7]
 800e064:	4613      	mov	r3, r2
 800e066:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800e070:	2306      	movs	r3, #6
 800e072:	73fb      	strb	r3, [r7, #15]
 800e074:	e014      	b.n	800e0a0 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800e076:	79fa      	ldrb	r2, [r7, #7]
 800e078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e07c:	fa42 f303 	asr.w	r3, r2, r3
 800e080:	f003 0301 	and.w	r3, r3, #1
 800e084:	2b00      	cmp	r3, #0
 800e086:	d005      	beq.n	800e094 <Calculate_Parity+0x3c>
		{
			count++;
 800e088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	3301      	adds	r3, #1
 800e090:	b2db      	uxtb	r3, r3
 800e092:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800e094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	3b01      	subs	r3, #1
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	73fb      	strb	r3, [r7, #15]
 800e0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dae6      	bge.n	800e076 <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800e0a8:	79bb      	ldrb	r3, [r7, #6]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d109      	bne.n	800e0c2 <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800e0ae:	7bbb      	ldrb	r3, [r7, #14]
 800e0b0:	f003 0301 	and.w	r3, r3, #1
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <Calculate_Parity+0x66>
		{
			return 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e00f      	b.n	800e0de <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e00d      	b.n	800e0de <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800e0c2:	79bb      	ldrb	r3, [r7, #6]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d109      	bne.n	800e0dc <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800e0c8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <Calculate_Parity+0x80>
		{
			return 1;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e002      	b.n	800e0de <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e000      	b.n	800e0de <Calculate_Parity+0x86>
		}
	}
	return 0;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
	...

0800e0ec <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	70fb      	strb	r3, [r7, #3]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800e100:	2300      	movs	r3, #0
 800e102:	73fb      	strb	r3, [r7, #15]
 800e104:	e03b      	b.n	800e17e <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800e106:	7bfb      	ldrb	r3, [r7, #15]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	4413      	add	r3, r2
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	78ba      	ldrb	r2, [r7, #2]
 800e110:	4611      	mov	r1, r2
 800e112:	4618      	mov	r0, r3
 800e114:	f7ff ffa0 	bl	800e058 <Calculate_Parity>
 800e118:	4603      	mov	r3, r0
 800e11a:	4619      	mov	r1, r3
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	4413      	add	r3, r2
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	09db      	lsrs	r3, r3, #7
 800e126:	b2db      	uxtb	r3, r3
 800e128:	f003 0301 	and.w	r3, r3, #1
 800e12c:	4299      	cmp	r1, r3
 800e12e:	d023      	beq.n	800e178 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800e130:	7bfb      	ldrb	r3, [r7, #15]
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	4413      	add	r3, r2
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	4619      	mov	r1, r3
 800e13a:	4815      	ldr	r0, [pc, #84]	; (800e190 <Verify_parity+0xa4>)
 800e13c:	f016 fc0c 	bl	8024958 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800e140:	7bfb      	ldrb	r3, [r7, #15]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	4413      	add	r3, r2
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	78ba      	ldrb	r2, [r7, #2]
 800e14a:	4611      	mov	r1, r2
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff ff83 	bl	800e058 <Calculate_Parity>
 800e152:	4603      	mov	r3, r0
 800e154:	4619      	mov	r1, r3
 800e156:	480f      	ldr	r0, [pc, #60]	; (800e194 <Verify_parity+0xa8>)
 800e158:	f016 fbfe 	bl	8024958 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	4413      	add	r3, r2
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	09db      	lsrs	r3, r3, #7
 800e166:	b2db      	uxtb	r3, r3
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	4619      	mov	r1, r3
 800e16e:	480a      	ldr	r0, [pc, #40]	; (800e198 <Verify_parity+0xac>)
 800e170:	f016 fbf2 	bl	8024958 <iprintf>
			return 0;
 800e174:	2300      	movs	r3, #0
 800e176:	e007      	b.n	800e188 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	3301      	adds	r3, #1
 800e17c:	73fb      	strb	r3, [r7, #15]
 800e17e:	7bfa      	ldrb	r2, [r7, #15]
 800e180:	78fb      	ldrb	r3, [r7, #3]
 800e182:	429a      	cmp	r2, r3
 800e184:	d3bf      	bcc.n	800e106 <Verify_parity+0x1a>
		}
	}
	return 1;
 800e186:	2301      	movs	r3, #1
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	0802879c 	.word	0x0802879c
 800e194:	080287b4 	.word	0x080287b4
 800e198:	080287c8 	.word	0x080287c8

0800e19c <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	b089      	sub	sp, #36	; 0x24
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	60ba      	str	r2, [r7, #8]
 800e1a8:	73fb      	strb	r3, [r7, #15]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	83fb      	strh	r3, [r7, #30]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	83bb      	strh	r3, [r7, #28]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	833b      	strh	r3, [r7, #24]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800e1c2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e1c6:	2b02      	cmp	r3, #2
 800e1c8:	d108      	bne.n	800e1dc <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	b298      	uxth	r0, r3
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
 800e1d0:	b299      	uxth	r1, r3
 800e1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	f7f2 faa9 	bl	800072c <InsertBits>
		return;
 800e1da:	e13b      	b.n	800e454 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
 800e1de:	2b08      	cmp	r3, #8
 800e1e0:	d12c      	bne.n	800e23c <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800e1e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e1e6:	2a80      	cmp	r2, #128	; 0x80
 800e1e8:	f173 0300 	sbcs.w	r3, r3, #0
 800e1ec:	d303      	bcc.n	800e1f6 <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800e1ee:	489b      	ldr	r0, [pc, #620]	; (800e45c <Insert_cal_parity+0x2c0>)
 800e1f0:	f016 fc4e 	bl	8024a90 <puts>
			return;
 800e1f4:	e12e      	b.n	800e454 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800e1f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e1fa:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e1fe:	4611      	mov	r1, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff ff29 	bl	800e058 <Calculate_Parity>
 800e206:	4603      	mov	r3, r0
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d10b      	bne.n	800e224 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800e20c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	701a      	strb	r2, [r3, #0]
 800e222:	e117      	b.n	800e454 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800e224:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e234:	b2da      	uxtb	r2, r3
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	701a      	strb	r2, [r3, #0]
 800e23a:	e10b      	b.n	800e454 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	2b18      	cmp	r3, #24
 800e240:	f040 8104 	bne.w	800e44c <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800e244:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e248:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800e24c:	f173 0300 	sbcs.w	r3, r3, #0
 800e250:	d303      	bcc.n	800e25a <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800e252:	4883      	ldr	r0, [pc, #524]	; (800e460 <Insert_cal_parity+0x2c4>)
 800e254:	f016 fc1c 	bl	8024a90 <puts>
			return;
 800e258:	e0fc      	b.n	800e454 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800e25e:	2300      	movs	r3, #0
 800e260:	76bb      	strb	r3, [r7, #26]
 800e262:	e0ee      	b.n	800e442 <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800e264:	7ebb      	ldrb	r3, [r7, #26]
 800e266:	00d9      	lsls	r1, r3, #3
 800e268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e26c:	f1c1 0620 	rsb	r6, r1, #32
 800e270:	f1a1 0c20 	sub.w	ip, r1, #32
 800e274:	fa22 f001 	lsr.w	r0, r2, r1
 800e278:	6038      	str	r0, [r7, #0]
 800e27a:	fa03 f606 	lsl.w	r6, r3, r6
 800e27e:	6838      	ldr	r0, [r7, #0]
 800e280:	4330      	orrs	r0, r6
 800e282:	6038      	str	r0, [r7, #0]
 800e284:	fa23 fc0c 	lsr.w	ip, r3, ip
 800e288:	6838      	ldr	r0, [r7, #0]
 800e28a:	ea40 000c 	orr.w	r0, r0, ip
 800e28e:	6038      	str	r0, [r7, #0]
 800e290:	40cb      	lsrs	r3, r1
 800e292:	607b      	str	r3, [r7, #4]
 800e294:	783b      	ldrb	r3, [r7, #0]
 800e296:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800e298:	7ebb      	ldrb	r3, [r7, #26]
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d07a      	beq.n	800e394 <Insert_cal_parity+0x1f8>
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	f300 8094 	bgt.w	800e3cc <Insert_cal_parity+0x230>
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <Insert_cal_parity+0x112>
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d01f      	beq.n	800e2ec <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800e2ac:	e08e      	b.n	800e3cc <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800e2ae:	7ebb      	ldrb	r3, [r7, #26]
 800e2b0:	00d9      	lsls	r1, r3, #3
 800e2b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e2b6:	f1c1 0620 	rsb	r6, r1, #32
 800e2ba:	f1a1 0020 	sub.w	r0, r1, #32
 800e2be:	fa22 f401 	lsr.w	r4, r2, r1
 800e2c2:	fa03 f606 	lsl.w	r6, r3, r6
 800e2c6:	4334      	orrs	r4, r6
 800e2c8:	fa23 f000 	lsr.w	r0, r3, r0
 800e2cc:	4304      	orrs	r4, r0
 800e2ce:	fa23 f501 	lsr.w	r5, r3, r1
 800e2d2:	f04f 0200 	mov.w	r2, #0
 800e2d6:	f04f 0300 	mov.w	r3, #0
 800e2da:	09e2      	lsrs	r2, r4, #7
 800e2dc:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800e2e0:	09eb      	lsrs	r3, r5, #7
 800e2e2:	b293      	uxth	r3, r2
 800e2e4:	f003 0301 	and.w	r3, r3, #1
 800e2e8:	83fb      	strh	r3, [r7, #30]
					break;
 800e2ea:	e070      	b.n	800e3ce <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800e2ec:	7efb      	ldrb	r3, [r7, #27]
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800e2f2:	8bfb      	ldrh	r3, [r7, #30]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d104      	bne.n	800e302 <Insert_cal_parity+0x166>
 800e2f8:	7efb      	ldrb	r3, [r7, #27]
 800e2fa:	f023 0301 	bic.w	r3, r3, #1
 800e2fe:	76fb      	strb	r3, [r7, #27]
 800e300:	e003      	b.n	800e30a <Insert_cal_parity+0x16e>
 800e302:	7efb      	ldrb	r3, [r7, #27]
 800e304:	f043 0301 	orr.w	r3, r3, #1
 800e308:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800e30a:	7ebb      	ldrb	r3, [r7, #26]
 800e30c:	00d9      	lsls	r1, r3, #3
 800e30e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e312:	f1c1 0620 	rsb	r6, r1, #32
 800e316:	f1a1 0020 	sub.w	r0, r1, #32
 800e31a:	fa22 f801 	lsr.w	r8, r2, r1
 800e31e:	fa03 f606 	lsl.w	r6, r3, r6
 800e322:	ea48 0806 	orr.w	r8, r8, r6
 800e326:	fa23 f000 	lsr.w	r0, r3, r0
 800e32a:	ea48 0800 	orr.w	r8, r8, r0
 800e32e:	fa23 f901 	lsr.w	r9, r3, r1
 800e332:	f04f 0200 	mov.w	r2, #0
 800e336:	f04f 0300 	mov.w	r3, #0
 800e33a:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800e33e:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800e342:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800e346:	b293      	uxth	r3, r2
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800e34e:	7ebb      	ldrb	r3, [r7, #26]
 800e350:	00d9      	lsls	r1, r3, #3
 800e352:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e356:	f1c1 0620 	rsb	r6, r1, #32
 800e35a:	f1a1 0020 	sub.w	r0, r1, #32
 800e35e:	fa22 fa01 	lsr.w	sl, r2, r1
 800e362:	fa03 f606 	lsl.w	r6, r3, r6
 800e366:	ea4a 0a06 	orr.w	sl, sl, r6
 800e36a:	fa23 f000 	lsr.w	r0, r3, r0
 800e36e:	ea4a 0a00 	orr.w	sl, sl, r0
 800e372:	fa23 fb01 	lsr.w	fp, r3, r1
 800e376:	f04f 0200 	mov.w	r2, #0
 800e37a:	f04f 0300 	mov.w	r3, #0
 800e37e:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800e382:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800e386:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800e38a:	b293      	uxth	r3, r2
 800e38c:	f003 0301 	and.w	r3, r3, #1
 800e390:	83bb      	strh	r3, [r7, #28]
					break;
 800e392:	e01c      	b.n	800e3ce <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800e394:	7efb      	ldrb	r3, [r7, #27]
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800e39a:	8bbb      	ldrh	r3, [r7, #28]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d104      	bne.n	800e3aa <Insert_cal_parity+0x20e>
 800e3a0:	7efb      	ldrb	r3, [r7, #27]
 800e3a2:	f023 0301 	bic.w	r3, r3, #1
 800e3a6:	76fb      	strb	r3, [r7, #27]
 800e3a8:	e003      	b.n	800e3b2 <Insert_cal_parity+0x216>
 800e3aa:	7efb      	ldrb	r3, [r7, #27]
 800e3ac:	f043 0301 	orr.w	r3, r3, #1
 800e3b0:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800e3b2:	8bfb      	ldrh	r3, [r7, #30]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <Insert_cal_parity+0x226>
 800e3b8:	7efb      	ldrb	r3, [r7, #27]
 800e3ba:	f023 0302 	bic.w	r3, r3, #2
 800e3be:	76fb      	strb	r3, [r7, #27]
					break;
 800e3c0:	e005      	b.n	800e3ce <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800e3c2:	7efb      	ldrb	r3, [r7, #27]
 800e3c4:	f043 0302 	orr.w	r3, r3, #2
 800e3c8:	76fb      	strb	r3, [r7, #27]
					break;
 800e3ca:	e000      	b.n	800e3ce <Insert_cal_parity+0x232>
					break;
 800e3cc:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800e3ce:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e3d2:	7efb      	ldrb	r3, [r7, #27]
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fe3e 	bl	800e058 <Calculate_Parity>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d116      	bne.n	800e410 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800e3e2:	7ebb      	ldrb	r3, [r7, #26]
 800e3e4:	f1c3 0302 	rsb	r3, r3, #2
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	7efa      	ldrb	r2, [r7, #27]
 800e3ee:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800e3f0:	7ebb      	ldrb	r3, [r7, #26]
 800e3f2:	f1c3 0302 	rsb	r3, r3, #2
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	781a      	ldrb	r2, [r3, #0]
 800e3fc:	7ebb      	ldrb	r3, [r7, #26]
 800e3fe:	f1c3 0302 	rsb	r3, r3, #2
 800e402:	68b9      	ldr	r1, [r7, #8]
 800e404:	440b      	add	r3, r1
 800e406:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e40a:	b2d2      	uxtb	r2, r2
 800e40c:	701a      	strb	r2, [r3, #0]
 800e40e:	e015      	b.n	800e43c <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800e410:	7ebb      	ldrb	r3, [r7, #26]
 800e412:	f1c3 0302 	rsb	r3, r3, #2
 800e416:	68ba      	ldr	r2, [r7, #8]
 800e418:	4413      	add	r3, r2
 800e41a:	7efa      	ldrb	r2, [r7, #27]
 800e41c:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800e41e:	7ebb      	ldrb	r3, [r7, #26]
 800e420:	f1c3 0302 	rsb	r3, r3, #2
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	4413      	add	r3, r2
 800e428:	781a      	ldrb	r2, [r3, #0]
 800e42a:	7ebb      	ldrb	r3, [r7, #26]
 800e42c:	f1c3 0302 	rsb	r3, r3, #2
 800e430:	68b9      	ldr	r1, [r7, #8]
 800e432:	440b      	add	r3, r1
 800e434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e438:	b2d2      	uxtb	r2, r2
 800e43a:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800e43c:	7ebb      	ldrb	r3, [r7, #26]
 800e43e:	3301      	adds	r3, #1
 800e440:	76bb      	strb	r3, [r7, #26]
 800e442:	7ebb      	ldrb	r3, [r7, #26]
 800e444:	2b02      	cmp	r3, #2
 800e446:	f67f af0d 	bls.w	800e264 <Insert_cal_parity+0xc8>
 800e44a:	e003      	b.n	800e454 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800e44c:	4805      	ldr	r0, [pc, #20]	; (800e464 <Insert_cal_parity+0x2c8>)
 800e44e:	f016 fb1f 	bl	8024a90 <puts>
		return;
 800e452:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800e454:	3724      	adds	r7, #36	; 0x24
 800e456:	46bd      	mov	sp, r7
 800e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45c:	080287e0 	.word	0x080287e0
 800e460:	08028814 	.word	0x08028814
 800e464:	08028848 	.word	0x08028848

0800e468 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	807b      	strh	r3, [r7, #2]
 800e474:	4613      	mov	r3, r2
 800e476:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800e478:	2300      	movs	r3, #0
 800e47a:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800e47c:	2300      	movs	r3, #0
 800e47e:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800e480:	787b      	ldrb	r3, [r7, #1]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d133      	bne.n	800e4ee <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800e486:	887b      	ldrh	r3, [r7, #2]
 800e488:	085b      	lsrs	r3, r3, #1
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	3b02      	subs	r3, #2
 800e48e:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800e490:	2300      	movs	r3, #0
 800e492:	81fb      	strh	r3, [r7, #14]
 800e494:	e025      	b.n	800e4e2 <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800e496:	89fb      	ldrh	r3, [r7, #14]
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	4413      	add	r3, r2
 800e49c:	781a      	ldrb	r2, [r3, #0]
 800e49e:	89f9      	ldrh	r1, [r7, #14]
 800e4a0:	89bb      	ldrh	r3, [r7, #12]
 800e4a2:	440b      	add	r3, r1
 800e4a4:	3302      	adds	r3, #2
 800e4a6:	6879      	ldr	r1, [r7, #4]
 800e4a8:	440b      	add	r3, r1
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	43db      	mvns	r3, r3
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d013      	beq.n	800e4dc <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800e4b4:	89fb      	ldrh	r3, [r7, #14]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	4619      	mov	r1, r3
 800e4be:	89fa      	ldrh	r2, [r7, #14]
 800e4c0:	89bb      	ldrh	r3, [r7, #12]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	3302      	adds	r3, #2
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	43db      	mvns	r3, r3
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	481a      	ldr	r0, [pc, #104]	; (800e53c <Data_Compliment+0xd4>)
 800e4d4:	f016 fa40 	bl	8024958 <iprintf>
				return 0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	e02b      	b.n	800e534 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800e4dc:	89fb      	ldrh	r3, [r7, #14]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	81fb      	strh	r3, [r7, #14]
 800e4e2:	89fa      	ldrh	r2, [r7, #14]
 800e4e4:	89bb      	ldrh	r3, [r7, #12]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d3d5      	bcc.n	800e496 <Data_Compliment+0x2e>
			}
		}
		return 1;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e022      	b.n	800e534 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800e4ee:	787b      	ldrb	r3, [r7, #1]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d11e      	bne.n	800e532 <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	81fb      	strh	r3, [r7, #14]
 800e4f8:	e010      	b.n	800e51c <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800e4fa:	89fb      	ldrh	r3, [r7, #14]
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	4413      	add	r3, r2
 800e500:	781a      	ldrb	r2, [r3, #0]
 800e502:	89fb      	ldrh	r3, [r7, #14]
 800e504:	1c99      	adds	r1, r3, #2
 800e506:	887b      	ldrh	r3, [r7, #2]
 800e508:	440b      	add	r3, r1
 800e50a:	4619      	mov	r1, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	440b      	add	r3, r1
 800e510:	43d2      	mvns	r2, r2
 800e512:	b2d2      	uxtb	r2, r2
 800e514:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e516:	89fb      	ldrh	r3, [r7, #14]
 800e518:	3301      	adds	r3, #1
 800e51a:	81fb      	strh	r3, [r7, #14]
 800e51c:	89fa      	ldrh	r2, [r7, #14]
 800e51e:	887b      	ldrh	r3, [r7, #2]
 800e520:	429a      	cmp	r2, r3
 800e522:	d3ea      	bcc.n	800e4fa <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800e524:	89fa      	ldrh	r2, [r7, #14]
 800e526:	887b      	ldrh	r3, [r7, #2]
 800e528:	4413      	add	r3, r2
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	3302      	adds	r3, #2
 800e52e:	b29b      	uxth	r3, r3
 800e530:	e000      	b.n	800e534 <Data_Compliment+0xcc>
	}
	return 0;
 800e532:	2300      	movs	r3, #0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	08028858 	.word	0x08028858

0800e540 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800e546:	2300      	movs	r3, #0
 800e548:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e54a:	4b1a      	ldr	r3, [pc, #104]	; (800e5b4 <CheckToSendReplyorNot+0x74>)
 800e54c:	785b      	ldrb	r3, [r3, #1]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d104      	bne.n	800e55c <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	f043 0301 	orr.w	r3, r3, #1
 800e558:	71fb      	strb	r3, [r7, #7]
 800e55a:	e003      	b.n	800e564 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	f023 0301 	bic.w	r3, r3, #1
 800e562:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e564:	4b14      	ldr	r3, [pc, #80]	; (800e5b8 <CheckToSendReplyorNot+0x78>)
 800e566:	785b      	ldrb	r3, [r3, #1]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d104      	bne.n	800e576 <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800e56c:	79fb      	ldrb	r3, [r7, #7]
 800e56e:	f043 0302 	orr.w	r3, r3, #2
 800e572:	71fb      	strb	r3, [r7, #7]
 800e574:	e003      	b.n	800e57e <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	f023 0302 	bic.w	r3, r3, #2
 800e57c:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800e57e:	79fb      	ldrb	r3, [r7, #7]
 800e580:	2b02      	cmp	r3, #2
 800e582:	dc02      	bgt.n	800e58a <CheckToSendReplyorNot+0x4a>
 800e584:	2b00      	cmp	r3, #0
 800e586:	da03      	bge.n	800e590 <CheckToSendReplyorNot+0x50>
 800e588:	e00a      	b.n	800e5a0 <CheckToSendReplyorNot+0x60>
 800e58a:	2b03      	cmp	r3, #3
 800e58c:	d004      	beq.n	800e598 <CheckToSendReplyorNot+0x58>
 800e58e:	e007      	b.n	800e5a0 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800e590:	4b0a      	ldr	r3, [pc, #40]	; (800e5bc <CheckToSendReplyorNot+0x7c>)
 800e592:	2201      	movs	r2, #1
 800e594:	701a      	strb	r2, [r3, #0]
		break;
 800e596:	e007      	b.n	800e5a8 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800e598:	4b08      	ldr	r3, [pc, #32]	; (800e5bc <CheckToSendReplyorNot+0x7c>)
 800e59a:	2201      	movs	r2, #1
 800e59c:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800e59e:	e003      	b.n	800e5a8 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800e5a0:	4b06      	ldr	r3, [pc, #24]	; (800e5bc <CheckToSendReplyorNot+0x7c>)
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	701a      	strb	r2, [r3, #0]
		break;
 800e5a6:	bf00      	nop
	}

}
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr
 800e5b4:	20003574 	.word	0x20003574
 800e5b8:	20003578 	.word	0x20003578
 800e5bc:	20004c95 	.word	0x20004c95

0800e5c0 <PrintSignals>:



void PrintSignals(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e5c6:	4b2d      	ldr	r3, [pc, #180]	; (800e67c <PrintSignals+0xbc>)
 800e5c8:	881b      	ldrh	r3, [r3, #0]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	492c      	ldr	r1, [pc, #176]	; (800e680 <PrintSignals+0xc0>)
 800e5ce:	482d      	ldr	r0, [pc, #180]	; (800e684 <PrintSignals+0xc4>)
 800e5d0:	f016 f8b2 	bl	8024738 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	80fb      	strh	r3, [r7, #6]
 800e5d8:	e045      	b.n	800e666 <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800e5da:	4b2b      	ldr	r3, [pc, #172]	; (800e688 <PrintSignals+0xc8>)
 800e5dc:	881b      	ldrh	r3, [r3, #0]
 800e5de:	88fa      	ldrh	r2, [r7, #6]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d83c      	bhi.n	800e65e <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800e5e4:	88fb      	ldrh	r3, [r7, #6]
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	da00      	bge.n	800e5ee <PrintSignals+0x2e>
 800e5ec:	3307      	adds	r3, #7
 800e5ee:	10db      	asrs	r3, r3, #3
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4b26      	ldr	r3, [pc, #152]	; (800e68c <PrintSignals+0xcc>)
 800e5f4:	4413      	add	r3, r2
 800e5f6:	789b      	ldrb	r3, [r3, #2]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	88fb      	ldrh	r3, [r7, #6]
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	425a      	negs	r2, r3
 800e600:	f003 0307 	and.w	r3, r3, #7
 800e604:	f002 0207 	and.w	r2, r2, #7
 800e608:	bf58      	it	pl
 800e60a:	4253      	negpl	r3, r2
 800e60c:	2201      	movs	r2, #1
 800e60e:	fa02 f303 	lsl.w	r3, r2, r3
 800e612:	400b      	ands	r3, r1
 800e614:	2b00      	cmp	r3, #0
 800e616:	dd0c      	ble.n	800e632 <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800e618:	88fb      	ldrh	r3, [r7, #6]
 800e61a:	1e5a      	subs	r2, r3, #1
 800e61c:	4613      	mov	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	4a1a      	ldr	r2, [pc, #104]	; (800e690 <PrintSignals+0xd0>)
 800e626:	4413      	add	r3, r2
 800e628:	4619      	mov	r1, r3
 800e62a:	481a      	ldr	r0, [pc, #104]	; (800e694 <PrintSignals+0xd4>)
 800e62c:	f016 f994 	bl	8024958 <iprintf>
 800e630:	e00b      	b.n	800e64a <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800e632:	88fb      	ldrh	r3, [r7, #6]
 800e634:	1e5a      	subs	r2, r3, #1
 800e636:	4613      	mov	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4413      	add	r3, r2
 800e63c:	00db      	lsls	r3, r3, #3
 800e63e:	4a14      	ldr	r2, [pc, #80]	; (800e690 <PrintSignals+0xd0>)
 800e640:	4413      	add	r3, r2
 800e642:	4619      	mov	r1, r3
 800e644:	4814      	ldr	r0, [pc, #80]	; (800e698 <PrintSignals+0xd8>)
 800e646:	f016 f987 	bl	8024958 <iprintf>
		}

		if( (Traverser%2) == 0)
 800e64a:	88fb      	ldrh	r3, [r7, #6]
 800e64c:	f003 0301 	and.w	r3, r3, #1
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d104      	bne.n	800e660 <PrintSignals+0xa0>
		{
			printf("\n");
 800e656:	200a      	movs	r0, #10
 800e658:	f016 f996 	bl	8024988 <putchar>
 800e65c:	e000      	b.n	800e660 <PrintSignals+0xa0>
			continue;
 800e65e:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e660:	88fb      	ldrh	r3, [r7, #6]
 800e662:	3301      	adds	r3, #1
 800e664:	80fb      	strh	r3, [r7, #6]
 800e666:	88fa      	ldrh	r2, [r7, #6]
 800e668:	4b08      	ldr	r3, [pc, #32]	; (800e68c <PrintSignals+0xcc>)
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	00db      	lsls	r3, r3, #3
 800e66e:	429a      	cmp	r2, r3
 800e670:	ddb3      	ble.n	800e5da <PrintSignals+0x1a>
		}
	}
}
 800e672:	bf00      	nop
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	200037a0 	.word	0x200037a0
 800e680:	200037a4 	.word	0x200037a4
 800e684:	2000359e 	.word	0x2000359e
 800e688:	200048a8 	.word	0x200048a8
 800e68c:	2000359c 	.word	0x2000359c
 800e690:	20003db8 	.word	0x20003db8
 800e694:	08028890 	.word	0x08028890
 800e698:	080288a0 	.word	0x080288a0

0800e69c <GetTimeStamp>:

void GetTimeStamp(void)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	607b      	str	r3, [r7, #4]

	Get_time();
 800e6ae:	f7fd f9bd 	bl	800ba2c <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800e6b2:	4b21      	ldr	r3, [pc, #132]	; (800e738 <GetTimeStamp+0x9c>)
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e6bc:	fb03 f202 	mul.w	r2, r3, r2
 800e6c0:	4b1d      	ldr	r3, [pc, #116]	; (800e738 <GetTimeStamp+0x9c>)
 800e6c2:	785b      	ldrb	r3, [r3, #1]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	011b      	lsls	r3, r3, #4
 800e6ca:	1a5b      	subs	r3, r3, r1
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	4a19      	ldr	r2, [pc, #100]	; (800e738 <GetTimeStamp+0x9c>)
 800e6d2:	7892      	ldrb	r2, [r2, #2]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800e6d8:	4b18      	ldr	r3, [pc, #96]	; (800e73c <GetTimeStamp+0xa0>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d007      	beq.n	800e6f2 <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800e6e2:	4a16      	ldr	r2, [pc, #88]	; (800e73c <GetTimeStamp+0xa0>)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800e6e8:	f009 f92c 	bl	8017944 <HAL_GetTick>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	4a14      	ldr	r2, [pc, #80]	; (800e740 <GetTimeStamp+0xa4>)
 800e6f0:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800e6f2:	4b13      	ldr	r3, [pc, #76]	; (800e740 <GetTimeStamp+0xa4>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 fe12 	bl	800f320 <HAL_Elaps_Ticks>
 800e6fc:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800e6fe:	68fa      	ldr	r2, [r7, #12]
 800e700:	4613      	mov	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	4619      	mov	r1, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4a0d      	ldr	r2, [pc, #52]	; (800e744 <GetTimeStamp+0xa8>)
 800e70e:	fba2 2303 	umull	r2, r3, r2, r3
 800e712:	095b      	lsrs	r3, r3, #5
 800e714:	440b      	add	r3, r1
 800e716:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800e718:	4b0b      	ldr	r3, [pc, #44]	; (800e748 <GetTimeStamp+0xac>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d005      	beq.n	800e72e <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800e722:	4a09      	ldr	r2, [pc, #36]	; (800e748 <GetTimeStamp+0xac>)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800e728:	4a08      	ldr	r2, [pc, #32]	; (800e74c <GetTimeStamp+0xb0>)
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800e72e:	bf00      	nop
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	200028dc 	.word	0x200028dc
 800e73c:	20004c9c 	.word	0x20004c9c
 800e740:	20004ca0 	.word	0x20004ca0
 800e744:	51eb851f 	.word	0x51eb851f
 800e748:	20004ca4 	.word	0x20004ca4
 800e74c:	20003db4 	.word	0x20003db4

0800e750 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800e750:	b490      	push	{r4, r7}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	71fa      	strb	r2, [r7, #7]
 800e760:	461a      	mov	r2, r3
 800e762:	4613      	mov	r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	00db      	lsls	r3, r3, #3
 800e76a:	4acd      	ldr	r2, [pc, #820]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e76c:	4413      	add	r3, r2
 800e76e:	4acd      	ldr	r2, [pc, #820]	; (800eaa4 <UpdateSIGNALSNames+0x354>)
 800e770:	6810      	ldr	r0, [r2, #0]
 800e772:	6018      	str	r0, [r3, #0]
 800e774:	8892      	ldrh	r2, [r2, #4]
 800e776:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	71fa      	strb	r2, [r7, #7]
 800e77e:	461a      	mov	r2, r3
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	4ac5      	ldr	r2, [pc, #788]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e78a:	4413      	add	r3, r2
 800e78c:	4ac6      	ldr	r2, [pc, #792]	; (800eaa8 <UpdateSIGNALSNames+0x358>)
 800e78e:	6810      	ldr	r0, [r2, #0]
 800e790:	6018      	str	r0, [r3, #0]
 800e792:	8892      	ldrh	r2, [r2, #4]
 800e794:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	71fa      	strb	r2, [r7, #7]
 800e79c:	461a      	mov	r2, r3
 800e79e:	4613      	mov	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	00db      	lsls	r3, r3, #3
 800e7a6:	4abe      	ldr	r2, [pc, #760]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e7a8:	4413      	add	r3, r2
 800e7aa:	4ac0      	ldr	r2, [pc, #768]	; (800eaac <UpdateSIGNALSNames+0x35c>)
 800e7ac:	6810      	ldr	r0, [r2, #0]
 800e7ae:	6018      	str	r0, [r3, #0]
 800e7b0:	8892      	ldrh	r2, [r2, #4]
 800e7b2:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	1c5a      	adds	r2, r3, #1
 800e7b8:	71fa      	strb	r2, [r7, #7]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	4613      	mov	r3, r2
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	4413      	add	r3, r2
 800e7c2:	00db      	lsls	r3, r3, #3
 800e7c4:	4ab6      	ldr	r2, [pc, #728]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e7c6:	4413      	add	r3, r2
 800e7c8:	4ab9      	ldr	r2, [pc, #740]	; (800eab0 <UpdateSIGNALSNames+0x360>)
 800e7ca:	6810      	ldr	r0, [r2, #0]
 800e7cc:	6018      	str	r0, [r3, #0]
 800e7ce:	8892      	ldrh	r2, [r2, #4]
 800e7d0:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	1c5a      	adds	r2, r3, #1
 800e7d6:	71fa      	strb	r2, [r7, #7]
 800e7d8:	461a      	mov	r2, r3
 800e7da:	4613      	mov	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	00db      	lsls	r3, r3, #3
 800e7e2:	4aaf      	ldr	r2, [pc, #700]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e7e4:	4413      	add	r3, r2
 800e7e6:	4ab3      	ldr	r2, [pc, #716]	; (800eab4 <UpdateSIGNALSNames+0x364>)
 800e7e8:	6810      	ldr	r0, [r2, #0]
 800e7ea:	6018      	str	r0, [r3, #0]
 800e7ec:	8892      	ldrh	r2, [r2, #4]
 800e7ee:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800e7f0:	79fb      	ldrb	r3, [r7, #7]
 800e7f2:	1c5a      	adds	r2, r3, #1
 800e7f4:	71fa      	strb	r2, [r7, #7]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	00db      	lsls	r3, r3, #3
 800e800:	4aa7      	ldr	r2, [pc, #668]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e802:	4413      	add	r3, r2
 800e804:	4aac      	ldr	r2, [pc, #688]	; (800eab8 <UpdateSIGNALSNames+0x368>)
 800e806:	6810      	ldr	r0, [r2, #0]
 800e808:	6018      	str	r0, [r3, #0]
 800e80a:	8891      	ldrh	r1, [r2, #4]
 800e80c:	7992      	ldrb	r2, [r2, #6]
 800e80e:	8099      	strh	r1, [r3, #4]
 800e810:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	1c5a      	adds	r2, r3, #1
 800e816:	71fa      	strb	r2, [r7, #7]
 800e818:	461a      	mov	r2, r3
 800e81a:	4613      	mov	r3, r2
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4413      	add	r3, r2
 800e820:	00db      	lsls	r3, r3, #3
 800e822:	4a9f      	ldr	r2, [pc, #636]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e824:	4413      	add	r3, r2
 800e826:	4aa5      	ldr	r2, [pc, #660]	; (800eabc <UpdateSIGNALSNames+0x36c>)
 800e828:	6810      	ldr	r0, [r2, #0]
 800e82a:	6018      	str	r0, [r3, #0]
 800e82c:	8891      	ldrh	r1, [r2, #4]
 800e82e:	7992      	ldrb	r2, [r2, #6]
 800e830:	8099      	strh	r1, [r3, #4]
 800e832:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800e834:	79fb      	ldrb	r3, [r7, #7]
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	71fa      	strb	r2, [r7, #7]
 800e83a:	461a      	mov	r2, r3
 800e83c:	4613      	mov	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	4a96      	ldr	r2, [pc, #600]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e846:	4413      	add	r3, r2
 800e848:	4a9d      	ldr	r2, [pc, #628]	; (800eac0 <UpdateSIGNALSNames+0x370>)
 800e84a:	6810      	ldr	r0, [r2, #0]
 800e84c:	6018      	str	r0, [r3, #0]
 800e84e:	7912      	ldrb	r2, [r2, #4]
 800e850:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	71fa      	strb	r2, [r7, #7]
 800e858:	461a      	mov	r2, r3
 800e85a:	4613      	mov	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	00db      	lsls	r3, r3, #3
 800e862:	4a8f      	ldr	r2, [pc, #572]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e864:	4413      	add	r3, r2
 800e866:	4997      	ldr	r1, [pc, #604]	; (800eac4 <UpdateSIGNALSNames+0x374>)
 800e868:	461a      	mov	r2, r3
 800e86a:	460b      	mov	r3, r1
 800e86c:	cb03      	ldmia	r3!, {r0, r1}
 800e86e:	6010      	str	r0, [r2, #0]
 800e870:	6051      	str	r1, [r2, #4]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	1c5a      	adds	r2, r3, #1
 800e87a:	71fa      	strb	r2, [r7, #7]
 800e87c:	461a      	mov	r2, r3
 800e87e:	4613      	mov	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	00db      	lsls	r3, r3, #3
 800e886:	4a86      	ldr	r2, [pc, #536]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e888:	4413      	add	r3, r2
 800e88a:	4a8f      	ldr	r2, [pc, #572]	; (800eac8 <UpdateSIGNALSNames+0x378>)
 800e88c:	6810      	ldr	r0, [r2, #0]
 800e88e:	6018      	str	r0, [r3, #0]
 800e890:	8892      	ldrh	r2, [r2, #4]
 800e892:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	1c5a      	adds	r2, r3, #1
 800e898:	71fa      	strb	r2, [r7, #7]
 800e89a:	461a      	mov	r2, r3
 800e89c:	4613      	mov	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	4a7e      	ldr	r2, [pc, #504]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e8a6:	4413      	add	r3, r2
 800e8a8:	4988      	ldr	r1, [pc, #544]	; (800eacc <UpdateSIGNALSNames+0x37c>)
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	cb03      	ldmia	r3!, {r0, r1}
 800e8b0:	6010      	str	r0, [r2, #0]
 800e8b2:	6051      	str	r1, [r2, #4]
 800e8b4:	881b      	ldrh	r3, [r3, #0]
 800e8b6:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800e8b8:	79fb      	ldrb	r3, [r7, #7]
 800e8ba:	1c5a      	adds	r2, r3, #1
 800e8bc:	71fa      	strb	r2, [r7, #7]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4413      	add	r3, r2
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	4a75      	ldr	r2, [pc, #468]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e8ca:	4413      	add	r3, r2
 800e8cc:	4980      	ldr	r1, [pc, #512]	; (800ead0 <UpdateSIGNALSNames+0x380>)
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	cb03      	ldmia	r3!, {r0, r1}
 800e8d4:	6010      	str	r0, [r2, #0]
 800e8d6:	6051      	str	r1, [r2, #4]
 800e8d8:	8819      	ldrh	r1, [r3, #0]
 800e8da:	789b      	ldrb	r3, [r3, #2]
 800e8dc:	8111      	strh	r1, [r2, #8]
 800e8de:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	71fa      	strb	r2, [r7, #7]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	4a6b      	ldr	r2, [pc, #428]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e8f2:	4413      	add	r3, r2
 800e8f4:	4977      	ldr	r1, [pc, #476]	; (800ead4 <UpdateSIGNALSNames+0x384>)
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	cb03      	ldmia	r3!, {r0, r1}
 800e8fc:	6010      	str	r0, [r2, #0]
 800e8fe:	6051      	str	r1, [r2, #4]
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	1c5a      	adds	r2, r3, #1
 800e908:	71fa      	strb	r2, [r7, #7]
 800e90a:	461a      	mov	r2, r3
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	4a62      	ldr	r2, [pc, #392]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e916:	4413      	add	r3, r2
 800e918:	496f      	ldr	r1, [pc, #444]	; (800ead8 <UpdateSIGNALSNames+0x388>)
 800e91a:	461a      	mov	r2, r3
 800e91c:	460b      	mov	r3, r1
 800e91e:	cb03      	ldmia	r3!, {r0, r1}
 800e920:	6010      	str	r0, [r2, #0]
 800e922:	6051      	str	r1, [r2, #4]
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800e928:	79fb      	ldrb	r3, [r7, #7]
 800e92a:	1c5a      	adds	r2, r3, #1
 800e92c:	71fa      	strb	r2, [r7, #7]
 800e92e:	461a      	mov	r2, r3
 800e930:	4613      	mov	r3, r2
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4413      	add	r3, r2
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	4a59      	ldr	r2, [pc, #356]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e93a:	4413      	add	r3, r2
 800e93c:	4967      	ldr	r1, [pc, #412]	; (800eadc <UpdateSIGNALSNames+0x38c>)
 800e93e:	461a      	mov	r2, r3
 800e940:	460b      	mov	r3, r1
 800e942:	cb03      	ldmia	r3!, {r0, r1}
 800e944:	6010      	str	r0, [r2, #0]
 800e946:	6051      	str	r1, [r2, #4]
 800e948:	8819      	ldrh	r1, [r3, #0]
 800e94a:	789b      	ldrb	r3, [r3, #2]
 800e94c:	8111      	strh	r1, [r2, #8]
 800e94e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800e950:	79fb      	ldrb	r3, [r7, #7]
 800e952:	1c5a      	adds	r2, r3, #1
 800e954:	71fa      	strb	r2, [r7, #7]
 800e956:	461a      	mov	r2, r3
 800e958:	4613      	mov	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4413      	add	r3, r2
 800e95e:	00db      	lsls	r3, r3, #3
 800e960:	4a4f      	ldr	r2, [pc, #316]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e962:	4413      	add	r3, r2
 800e964:	495e      	ldr	r1, [pc, #376]	; (800eae0 <UpdateSIGNALSNames+0x390>)
 800e966:	461a      	mov	r2, r3
 800e968:	460b      	mov	r3, r1
 800e96a:	cb03      	ldmia	r3!, {r0, r1}
 800e96c:	6010      	str	r0, [r2, #0]
 800e96e:	6051      	str	r1, [r2, #4]
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800e974:	79fb      	ldrb	r3, [r7, #7]
 800e976:	1c5a      	adds	r2, r3, #1
 800e978:	71fa      	strb	r2, [r7, #7]
 800e97a:	461a      	mov	r2, r3
 800e97c:	4613      	mov	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4413      	add	r3, r2
 800e982:	00db      	lsls	r3, r3, #3
 800e984:	4a46      	ldr	r2, [pc, #280]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e986:	4413      	add	r3, r2
 800e988:	4a56      	ldr	r2, [pc, #344]	; (800eae4 <UpdateSIGNALSNames+0x394>)
 800e98a:	6810      	ldr	r0, [r2, #0]
 800e98c:	6018      	str	r0, [r3, #0]
 800e98e:	8891      	ldrh	r1, [r2, #4]
 800e990:	7992      	ldrb	r2, [r2, #6]
 800e992:	8099      	strh	r1, [r3, #4]
 800e994:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800e996:	79fb      	ldrb	r3, [r7, #7]
 800e998:	1c5a      	adds	r2, r3, #1
 800e99a:	71fa      	strb	r2, [r7, #7]
 800e99c:	461a      	mov	r2, r3
 800e99e:	4613      	mov	r3, r2
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4413      	add	r3, r2
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	4a3e      	ldr	r2, [pc, #248]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e9a8:	4413      	add	r3, r2
 800e9aa:	4a4f      	ldr	r2, [pc, #316]	; (800eae8 <UpdateSIGNALSNames+0x398>)
 800e9ac:	6810      	ldr	r0, [r2, #0]
 800e9ae:	6018      	str	r0, [r3, #0]
 800e9b0:	8891      	ldrh	r1, [r2, #4]
 800e9b2:	7992      	ldrb	r2, [r2, #6]
 800e9b4:	8099      	strh	r1, [r3, #4]
 800e9b6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	1c5a      	adds	r2, r3, #1
 800e9bc:	71fa      	strb	r2, [r7, #7]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4413      	add	r3, r2
 800e9c6:	00db      	lsls	r3, r3, #3
 800e9c8:	4a35      	ldr	r2, [pc, #212]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e9ca:	4413      	add	r3, r2
 800e9cc:	4a47      	ldr	r2, [pc, #284]	; (800eaec <UpdateSIGNALSNames+0x39c>)
 800e9ce:	6810      	ldr	r0, [r2, #0]
 800e9d0:	6018      	str	r0, [r3, #0]
 800e9d2:	8891      	ldrh	r1, [r2, #4]
 800e9d4:	7992      	ldrb	r2, [r2, #6]
 800e9d6:	8099      	strh	r1, [r3, #4]
 800e9d8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800e9da:	79fb      	ldrb	r3, [r7, #7]
 800e9dc:	1c5a      	adds	r2, r3, #1
 800e9de:	71fa      	strb	r2, [r7, #7]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	4413      	add	r3, r2
 800e9e8:	00db      	lsls	r3, r3, #3
 800e9ea:	4a2d      	ldr	r2, [pc, #180]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800e9ec:	4413      	add	r3, r2
 800e9ee:	4a40      	ldr	r2, [pc, #256]	; (800eaf0 <UpdateSIGNALSNames+0x3a0>)
 800e9f0:	6810      	ldr	r0, [r2, #0]
 800e9f2:	6018      	str	r0, [r3, #0]
 800e9f4:	8891      	ldrh	r1, [r2, #4]
 800e9f6:	7992      	ldrb	r2, [r2, #6]
 800e9f8:	8099      	strh	r1, [r3, #4]
 800e9fa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800e9fc:	79fb      	ldrb	r3, [r7, #7]
 800e9fe:	1c5a      	adds	r2, r3, #1
 800ea00:	71fa      	strb	r2, [r7, #7]
 800ea02:	461a      	mov	r2, r3
 800ea04:	4613      	mov	r3, r2
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	00db      	lsls	r3, r3, #3
 800ea0c:	4a24      	ldr	r2, [pc, #144]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800ea0e:	4413      	add	r3, r2
 800ea10:	4938      	ldr	r1, [pc, #224]	; (800eaf4 <UpdateSIGNALSNames+0x3a4>)
 800ea12:	461a      	mov	r2, r3
 800ea14:	460b      	mov	r3, r1
 800ea16:	cb03      	ldmia	r3!, {r0, r1}
 800ea18:	6010      	str	r0, [r2, #0]
 800ea1a:	6051      	str	r1, [r2, #4]
 800ea1c:	8819      	ldrh	r1, [r3, #0]
 800ea1e:	789b      	ldrb	r3, [r3, #2]
 800ea20:	8111      	strh	r1, [r2, #8]
 800ea22:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800ea24:	79fb      	ldrb	r3, [r7, #7]
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	71fa      	strb	r2, [r7, #7]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	4413      	add	r3, r2
 800ea32:	00db      	lsls	r3, r3, #3
 800ea34:	4a1a      	ldr	r2, [pc, #104]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800ea36:	4413      	add	r3, r2
 800ea38:	4a2f      	ldr	r2, [pc, #188]	; (800eaf8 <UpdateSIGNALSNames+0x3a8>)
 800ea3a:	6810      	ldr	r0, [r2, #0]
 800ea3c:	6018      	str	r0, [r3, #0]
 800ea3e:	8891      	ldrh	r1, [r2, #4]
 800ea40:	7992      	ldrb	r2, [r2, #6]
 800ea42:	8099      	strh	r1, [r3, #4]
 800ea44:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800ea46:	79fb      	ldrb	r3, [r7, #7]
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	71fa      	strb	r2, [r7, #7]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	4613      	mov	r3, r2
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	4413      	add	r3, r2
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	4a12      	ldr	r2, [pc, #72]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800ea58:	4413      	add	r3, r2
 800ea5a:	4a28      	ldr	r2, [pc, #160]	; (800eafc <UpdateSIGNALSNames+0x3ac>)
 800ea5c:	6810      	ldr	r0, [r2, #0]
 800ea5e:	6018      	str	r0, [r3, #0]
 800ea60:	8891      	ldrh	r1, [r2, #4]
 800ea62:	7992      	ldrb	r2, [r2, #6]
 800ea64:	8099      	strh	r1, [r3, #4]
 800ea66:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	71fa      	strb	r2, [r7, #7]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	4613      	mov	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	4413      	add	r3, r2
 800ea76:	00db      	lsls	r3, r3, #3
 800ea78:	4a09      	ldr	r2, [pc, #36]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800ea7a:	4413      	add	r3, r2
 800ea7c:	4a20      	ldr	r2, [pc, #128]	; (800eb00 <UpdateSIGNALSNames+0x3b0>)
 800ea7e:	6810      	ldr	r0, [r2, #0]
 800ea80:	6018      	str	r0, [r3, #0]
 800ea82:	8891      	ldrh	r1, [r2, #4]
 800ea84:	7992      	ldrb	r2, [r2, #6]
 800ea86:	8099      	strh	r1, [r3, #4]
 800ea88:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	71fa      	strb	r2, [r7, #7]
 800ea90:	461a      	mov	r2, r3
 800ea92:	4613      	mov	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	4a01      	ldr	r2, [pc, #4]	; (800eaa0 <UpdateSIGNALSNames+0x350>)
 800ea9c:	4413      	add	r3, r2
 800ea9e:	e031      	b.n	800eb04 <UpdateSIGNALSNames+0x3b4>
 800eaa0:	20003db8 	.word	0x20003db8
 800eaa4:	080288b0 	.word	0x080288b0
 800eaa8:	080288b8 	.word	0x080288b8
 800eaac:	080288c0 	.word	0x080288c0
 800eab0:	080288c8 	.word	0x080288c8
 800eab4:	080288d0 	.word	0x080288d0
 800eab8:	080288d8 	.word	0x080288d8
 800eabc:	080288e0 	.word	0x080288e0
 800eac0:	080288e8 	.word	0x080288e8
 800eac4:	080288f0 	.word	0x080288f0
 800eac8:	080288fc 	.word	0x080288fc
 800eacc:	08028904 	.word	0x08028904
 800ead0:	08028910 	.word	0x08028910
 800ead4:	0802891c 	.word	0x0802891c
 800ead8:	08028928 	.word	0x08028928
 800eadc:	08028934 	.word	0x08028934
 800eae0:	08028940 	.word	0x08028940
 800eae4:	0802894c 	.word	0x0802894c
 800eae8:	08028954 	.word	0x08028954
 800eaec:	0802895c 	.word	0x0802895c
 800eaf0:	08028964 	.word	0x08028964
 800eaf4:	0802896c 	.word	0x0802896c
 800eaf8:	08028978 	.word	0x08028978
 800eafc:	08028980 	.word	0x08028980
 800eb00:	08028988 	.word	0x08028988
 800eb04:	4acd      	ldr	r2, [pc, #820]	; (800ee3c <UpdateSIGNALSNames+0x6ec>)
 800eb06:	6810      	ldr	r0, [r2, #0]
 800eb08:	6018      	str	r0, [r3, #0]
 800eb0a:	8891      	ldrh	r1, [r2, #4]
 800eb0c:	7992      	ldrb	r2, [r2, #6]
 800eb0e:	8099      	strh	r1, [r3, #4]
 800eb10:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800eb12:	79fb      	ldrb	r3, [r7, #7]
 800eb14:	1c5a      	adds	r2, r3, #1
 800eb16:	71fa      	strb	r2, [r7, #7]
 800eb18:	461a      	mov	r2, r3
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	4ac7      	ldr	r2, [pc, #796]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800eb24:	4413      	add	r3, r2
 800eb26:	4ac7      	ldr	r2, [pc, #796]	; (800ee44 <UpdateSIGNALSNames+0x6f4>)
 800eb28:	6810      	ldr	r0, [r2, #0]
 800eb2a:	6018      	str	r0, [r3, #0]
 800eb2c:	8891      	ldrh	r1, [r2, #4]
 800eb2e:	7992      	ldrb	r2, [r2, #6]
 800eb30:	8099      	strh	r1, [r3, #4]
 800eb32:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800eb34:	79fb      	ldrb	r3, [r7, #7]
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	71fa      	strb	r2, [r7, #7]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	4abe      	ldr	r2, [pc, #760]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800eb46:	4413      	add	r3, r2
 800eb48:	4abf      	ldr	r2, [pc, #764]	; (800ee48 <UpdateSIGNALSNames+0x6f8>)
 800eb4a:	6810      	ldr	r0, [r2, #0]
 800eb4c:	6018      	str	r0, [r3, #0]
 800eb4e:	8891      	ldrh	r1, [r2, #4]
 800eb50:	7992      	ldrb	r2, [r2, #6]
 800eb52:	8099      	strh	r1, [r3, #4]
 800eb54:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	1c5a      	adds	r2, r3, #1
 800eb5a:	71fa      	strb	r2, [r7, #7]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	4613      	mov	r3, r2
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	4413      	add	r3, r2
 800eb64:	00db      	lsls	r3, r3, #3
 800eb66:	4ab6      	ldr	r2, [pc, #728]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800eb68:	4413      	add	r3, r2
 800eb6a:	4ab8      	ldr	r2, [pc, #736]	; (800ee4c <UpdateSIGNALSNames+0x6fc>)
 800eb6c:	6810      	ldr	r0, [r2, #0]
 800eb6e:	6018      	str	r0, [r3, #0]
 800eb70:	8891      	ldrh	r1, [r2, #4]
 800eb72:	7992      	ldrb	r2, [r2, #6]
 800eb74:	8099      	strh	r1, [r3, #4]
 800eb76:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	1c5a      	adds	r2, r3, #1
 800eb7c:	71fa      	strb	r2, [r7, #7]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	4613      	mov	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	00db      	lsls	r3, r3, #3
 800eb88:	4aad      	ldr	r2, [pc, #692]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800eb8a:	4413      	add	r3, r2
 800eb8c:	49b0      	ldr	r1, [pc, #704]	; (800ee50 <UpdateSIGNALSNames+0x700>)
 800eb8e:	461a      	mov	r2, r3
 800eb90:	460b      	mov	r3, r1
 800eb92:	cb03      	ldmia	r3!, {r0, r1}
 800eb94:	6010      	str	r0, [r2, #0]
 800eb96:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	71fa      	strb	r2, [r7, #7]
 800eb9e:	461a      	mov	r2, r3
 800eba0:	4613      	mov	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4413      	add	r3, r2
 800eba6:	00db      	lsls	r3, r3, #3
 800eba8:	4aa5      	ldr	r2, [pc, #660]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ebaa:	4413      	add	r3, r2
 800ebac:	49a9      	ldr	r1, [pc, #676]	; (800ee54 <UpdateSIGNALSNames+0x704>)
 800ebae:	461a      	mov	r2, r3
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	cb03      	ldmia	r3!, {r0, r1}
 800ebb4:	6010      	str	r0, [r2, #0]
 800ebb6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800ebb8:	79fb      	ldrb	r3, [r7, #7]
 800ebba:	1c5a      	adds	r2, r3, #1
 800ebbc:	71fa      	strb	r2, [r7, #7]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	4413      	add	r3, r2
 800ebc6:	00db      	lsls	r3, r3, #3
 800ebc8:	4a9d      	ldr	r2, [pc, #628]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ebca:	4413      	add	r3, r2
 800ebcc:	49a2      	ldr	r1, [pc, #648]	; (800ee58 <UpdateSIGNALSNames+0x708>)
 800ebce:	461a      	mov	r2, r3
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	cb03      	ldmia	r3!, {r0, r1}
 800ebd4:	6010      	str	r0, [r2, #0]
 800ebd6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	1c5a      	adds	r2, r3, #1
 800ebdc:	71fa      	strb	r2, [r7, #7]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	4413      	add	r3, r2
 800ebe6:	00db      	lsls	r3, r3, #3
 800ebe8:	4a95      	ldr	r2, [pc, #596]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ebea:	4413      	add	r3, r2
 800ebec:	499b      	ldr	r1, [pc, #620]	; (800ee5c <UpdateSIGNALSNames+0x70c>)
 800ebee:	461a      	mov	r2, r3
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	cb03      	ldmia	r3!, {r0, r1}
 800ebf4:	6010      	str	r0, [r2, #0]
 800ebf6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800ebf8:	79fb      	ldrb	r3, [r7, #7]
 800ebfa:	1c5a      	adds	r2, r3, #1
 800ebfc:	71fa      	strb	r2, [r7, #7]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	4613      	mov	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4413      	add	r3, r2
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	4a8d      	ldr	r2, [pc, #564]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ec0a:	4413      	add	r3, r2
 800ec0c:	4994      	ldr	r1, [pc, #592]	; (800ee60 <UpdateSIGNALSNames+0x710>)
 800ec0e:	461a      	mov	r2, r3
 800ec10:	460b      	mov	r3, r1
 800ec12:	cb03      	ldmia	r3!, {r0, r1}
 800ec14:	6010      	str	r0, [r2, #0]
 800ec16:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800ec18:	79fb      	ldrb	r3, [r7, #7]
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	71fa      	strb	r2, [r7, #7]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	4613      	mov	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4413      	add	r3, r2
 800ec26:	00db      	lsls	r3, r3, #3
 800ec28:	4a85      	ldr	r2, [pc, #532]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ec2a:	4413      	add	r3, r2
 800ec2c:	498d      	ldr	r1, [pc, #564]	; (800ee64 <UpdateSIGNALSNames+0x714>)
 800ec2e:	461a      	mov	r2, r3
 800ec30:	460b      	mov	r3, r1
 800ec32:	cb03      	ldmia	r3!, {r0, r1}
 800ec34:	6010      	str	r0, [r2, #0]
 800ec36:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	1c5a      	adds	r2, r3, #1
 800ec3c:	71fa      	strb	r2, [r7, #7]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4613      	mov	r3, r2
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	4413      	add	r3, r2
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	4a7d      	ldr	r2, [pc, #500]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ec4a:	4413      	add	r3, r2
 800ec4c:	4986      	ldr	r1, [pc, #536]	; (800ee68 <UpdateSIGNALSNames+0x718>)
 800ec4e:	461a      	mov	r2, r3
 800ec50:	460b      	mov	r3, r1
 800ec52:	cb03      	ldmia	r3!, {r0, r1}
 800ec54:	6010      	str	r0, [r2, #0]
 800ec56:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	1c5a      	adds	r2, r3, #1
 800ec5c:	71fa      	strb	r2, [r7, #7]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	4613      	mov	r3, r2
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4413      	add	r3, r2
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	4a75      	ldr	r2, [pc, #468]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ec6a:	4413      	add	r3, r2
 800ec6c:	497f      	ldr	r1, [pc, #508]	; (800ee6c <UpdateSIGNALSNames+0x71c>)
 800ec6e:	461a      	mov	r2, r3
 800ec70:	460b      	mov	r3, r1
 800ec72:	cb03      	ldmia	r3!, {r0, r1}
 800ec74:	6010      	str	r0, [r2, #0]
 800ec76:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800ec78:	79fb      	ldrb	r3, [r7, #7]
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	71fa      	strb	r2, [r7, #7]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	4613      	mov	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4413      	add	r3, r2
 800ec86:	00db      	lsls	r3, r3, #3
 800ec88:	4a6d      	ldr	r2, [pc, #436]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ec8a:	4413      	add	r3, r2
 800ec8c:	4978      	ldr	r1, [pc, #480]	; (800ee70 <UpdateSIGNALSNames+0x720>)
 800ec8e:	461a      	mov	r2, r3
 800ec90:	460b      	mov	r3, r1
 800ec92:	cb03      	ldmia	r3!, {r0, r1}
 800ec94:	6010      	str	r0, [r2, #0]
 800ec96:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800ec98:	79fb      	ldrb	r3, [r7, #7]
 800ec9a:	1c5a      	adds	r2, r3, #1
 800ec9c:	71fa      	strb	r2, [r7, #7]
 800ec9e:	461a      	mov	r2, r3
 800eca0:	4613      	mov	r3, r2
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	4413      	add	r3, r2
 800eca6:	00db      	lsls	r3, r3, #3
 800eca8:	4a65      	ldr	r2, [pc, #404]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ecaa:	4413      	add	r3, r2
 800ecac:	4971      	ldr	r1, [pc, #452]	; (800ee74 <UpdateSIGNALSNames+0x724>)
 800ecae:	461a      	mov	r2, r3
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	cb03      	ldmia	r3!, {r0, r1}
 800ecb4:	6010      	str	r0, [r2, #0]
 800ecb6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800ecb8:	79fb      	ldrb	r3, [r7, #7]
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	71fa      	strb	r2, [r7, #7]
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4413      	add	r3, r2
 800ecc6:	00db      	lsls	r3, r3, #3
 800ecc8:	4a5d      	ldr	r2, [pc, #372]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ecca:	4413      	add	r3, r2
 800eccc:	496a      	ldr	r1, [pc, #424]	; (800ee78 <UpdateSIGNALSNames+0x728>)
 800ecce:	461a      	mov	r2, r3
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	cb03      	ldmia	r3!, {r0, r1}
 800ecd4:	6010      	str	r0, [r2, #0]
 800ecd6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800ecd8:	79fb      	ldrb	r3, [r7, #7]
 800ecda:	1c5a      	adds	r2, r3, #1
 800ecdc:	71fa      	strb	r2, [r7, #7]
 800ecde:	461a      	mov	r2, r3
 800ece0:	4613      	mov	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	4413      	add	r3, r2
 800ece6:	00db      	lsls	r3, r3, #3
 800ece8:	4a55      	ldr	r2, [pc, #340]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ecea:	4413      	add	r3, r2
 800ecec:	4963      	ldr	r1, [pc, #396]	; (800ee7c <UpdateSIGNALSNames+0x72c>)
 800ecee:	461a      	mov	r2, r3
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	cb03      	ldmia	r3!, {r0, r1}
 800ecf4:	6010      	str	r0, [r2, #0]
 800ecf6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800ecf8:	79fb      	ldrb	r3, [r7, #7]
 800ecfa:	1c5a      	adds	r2, r3, #1
 800ecfc:	71fa      	strb	r2, [r7, #7]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	4613      	mov	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	4413      	add	r3, r2
 800ed06:	00db      	lsls	r3, r3, #3
 800ed08:	4a4d      	ldr	r2, [pc, #308]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ed0a:	4413      	add	r3, r2
 800ed0c:	495c      	ldr	r1, [pc, #368]	; (800ee80 <UpdateSIGNALSNames+0x730>)
 800ed0e:	461a      	mov	r2, r3
 800ed10:	460b      	mov	r3, r1
 800ed12:	cb03      	ldmia	r3!, {r0, r1}
 800ed14:	6010      	str	r0, [r2, #0]
 800ed16:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	71fa      	strb	r2, [r7, #7]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4613      	mov	r3, r2
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	4413      	add	r3, r2
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	4a45      	ldr	r2, [pc, #276]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ed2a:	4413      	add	r3, r2
 800ed2c:	4a55      	ldr	r2, [pc, #340]	; (800ee84 <UpdateSIGNALSNames+0x734>)
 800ed2e:	461c      	mov	r4, r3
 800ed30:	4613      	mov	r3, r2
 800ed32:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed34:	6020      	str	r0, [r4, #0]
 800ed36:	6061      	str	r1, [r4, #4]
 800ed38:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	71fa      	strb	r2, [r7, #7]
 800ed40:	461a      	mov	r2, r3
 800ed42:	4613      	mov	r3, r2
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	00db      	lsls	r3, r3, #3
 800ed4a:	4a3d      	ldr	r2, [pc, #244]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ed4c:	4413      	add	r3, r2
 800ed4e:	494e      	ldr	r1, [pc, #312]	; (800ee88 <UpdateSIGNALSNames+0x738>)
 800ed50:	461a      	mov	r2, r3
 800ed52:	460b      	mov	r3, r1
 800ed54:	cb03      	ldmia	r3!, {r0, r1}
 800ed56:	6010      	str	r0, [r2, #0]
 800ed58:	6051      	str	r1, [r2, #4]
 800ed5a:	8819      	ldrh	r1, [r3, #0]
 800ed5c:	789b      	ldrb	r3, [r3, #2]
 800ed5e:	8111      	strh	r1, [r2, #8]
 800ed60:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800ed62:	79fb      	ldrb	r3, [r7, #7]
 800ed64:	1c5a      	adds	r2, r3, #1
 800ed66:	71fa      	strb	r2, [r7, #7]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4413      	add	r3, r2
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	4a33      	ldr	r2, [pc, #204]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ed74:	4413      	add	r3, r2
 800ed76:	4a45      	ldr	r2, [pc, #276]	; (800ee8c <UpdateSIGNALSNames+0x73c>)
 800ed78:	461c      	mov	r4, r3
 800ed7a:	4613      	mov	r3, r2
 800ed7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed7e:	6020      	str	r0, [r4, #0]
 800ed80:	6061      	str	r1, [r4, #4]
 800ed82:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800ed84:	79fb      	ldrb	r3, [r7, #7]
 800ed86:	1c5a      	adds	r2, r3, #1
 800ed88:	71fa      	strb	r2, [r7, #7]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4413      	add	r3, r2
 800ed92:	00db      	lsls	r3, r3, #3
 800ed94:	4a2a      	ldr	r2, [pc, #168]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ed96:	4413      	add	r3, r2
 800ed98:	493d      	ldr	r1, [pc, #244]	; (800ee90 <UpdateSIGNALSNames+0x740>)
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	cb03      	ldmia	r3!, {r0, r1}
 800eda0:	6010      	str	r0, [r2, #0]
 800eda2:	6051      	str	r1, [r2, #4]
 800eda4:	8819      	ldrh	r1, [r3, #0]
 800eda6:	789b      	ldrb	r3, [r3, #2]
 800eda8:	8111      	strh	r1, [r2, #8]
 800edaa:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800edac:	79fb      	ldrb	r3, [r7, #7]
 800edae:	1c5a      	adds	r2, r3, #1
 800edb0:	71fa      	strb	r2, [r7, #7]
 800edb2:	461a      	mov	r2, r3
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	00db      	lsls	r3, r3, #3
 800edbc:	4a20      	ldr	r2, [pc, #128]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800edbe:	4413      	add	r3, r2
 800edc0:	4934      	ldr	r1, [pc, #208]	; (800ee94 <UpdateSIGNALSNames+0x744>)
 800edc2:	461a      	mov	r2, r3
 800edc4:	460b      	mov	r3, r1
 800edc6:	cb03      	ldmia	r3!, {r0, r1}
 800edc8:	6010      	str	r0, [r2, #0]
 800edca:	6051      	str	r1, [r2, #4]
 800edcc:	8819      	ldrh	r1, [r3, #0]
 800edce:	789b      	ldrb	r3, [r3, #2]
 800edd0:	8111      	strh	r1, [r2, #8]
 800edd2:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800edd4:	79fb      	ldrb	r3, [r7, #7]
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	71fa      	strb	r2, [r7, #7]
 800edda:	461a      	mov	r2, r3
 800eddc:	4613      	mov	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	4413      	add	r3, r2
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	4a16      	ldr	r2, [pc, #88]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ede6:	4413      	add	r3, r2
 800ede8:	4a2b      	ldr	r2, [pc, #172]	; (800ee98 <UpdateSIGNALSNames+0x748>)
 800edea:	461c      	mov	r4, r3
 800edec:	4613      	mov	r3, r2
 800edee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800edf0:	6020      	str	r0, [r4, #0]
 800edf2:	6061      	str	r1, [r4, #4]
 800edf4:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800edf6:	79fb      	ldrb	r3, [r7, #7]
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	71fa      	strb	r2, [r7, #7]
 800edfc:	461a      	mov	r2, r3
 800edfe:	4613      	mov	r3, r2
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	4413      	add	r3, r2
 800ee04:	00db      	lsls	r3, r3, #3
 800ee06:	4a0e      	ldr	r2, [pc, #56]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ee08:	4413      	add	r3, r2
 800ee0a:	4924      	ldr	r1, [pc, #144]	; (800ee9c <UpdateSIGNALSNames+0x74c>)
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	460b      	mov	r3, r1
 800ee10:	cb03      	ldmia	r3!, {r0, r1}
 800ee12:	6010      	str	r0, [r2, #0]
 800ee14:	6051      	str	r1, [r2, #4]
 800ee16:	8819      	ldrh	r1, [r3, #0]
 800ee18:	789b      	ldrb	r3, [r3, #2]
 800ee1a:	8111      	strh	r1, [r2, #8]
 800ee1c:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800ee1e:	79fb      	ldrb	r3, [r7, #7]
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	71fa      	strb	r2, [r7, #7]
 800ee24:	461a      	mov	r2, r3
 800ee26:	4613      	mov	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	00db      	lsls	r3, r3, #3
 800ee2e:	4a04      	ldr	r2, [pc, #16]	; (800ee40 <UpdateSIGNALSNames+0x6f0>)
 800ee30:	4413      	add	r3, r2
 800ee32:	4a1b      	ldr	r2, [pc, #108]	; (800eea0 <UpdateSIGNALSNames+0x750>)
 800ee34:	6810      	ldr	r0, [r2, #0]
 800ee36:	6018      	str	r0, [r3, #0]
 800ee38:	e034      	b.n	800eea4 <UpdateSIGNALSNames+0x754>
 800ee3a:	bf00      	nop
 800ee3c:	08028990 	.word	0x08028990
 800ee40:	20003db8 	.word	0x20003db8
 800ee44:	08028998 	.word	0x08028998
 800ee48:	080289a0 	.word	0x080289a0
 800ee4c:	080289a8 	.word	0x080289a8
 800ee50:	080289b0 	.word	0x080289b0
 800ee54:	080289b8 	.word	0x080289b8
 800ee58:	080289c0 	.word	0x080289c0
 800ee5c:	080289c8 	.word	0x080289c8
 800ee60:	080289d0 	.word	0x080289d0
 800ee64:	080289d8 	.word	0x080289d8
 800ee68:	080289e0 	.word	0x080289e0
 800ee6c:	080289e8 	.word	0x080289e8
 800ee70:	080289f0 	.word	0x080289f0
 800ee74:	080289f8 	.word	0x080289f8
 800ee78:	08028a00 	.word	0x08028a00
 800ee7c:	08028a08 	.word	0x08028a08
 800ee80:	08028a10 	.word	0x08028a10
 800ee84:	08028a18 	.word	0x08028a18
 800ee88:	08028a24 	.word	0x08028a24
 800ee8c:	08028a30 	.word	0x08028a30
 800ee90:	08028a3c 	.word	0x08028a3c
 800ee94:	08028a48 	.word	0x08028a48
 800ee98:	08028a54 	.word	0x08028a54
 800ee9c:	08028a60 	.word	0x08028a60
 800eea0:	08028a6c 	.word	0x08028a6c
 800eea4:	8891      	ldrh	r1, [r2, #4]
 800eea6:	7992      	ldrb	r2, [r2, #6]
 800eea8:	8099      	strh	r1, [r3, #4]
 800eeaa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800eeac:	79fb      	ldrb	r3, [r7, #7]
 800eeae:	1c5a      	adds	r2, r3, #1
 800eeb0:	71fa      	strb	r2, [r7, #7]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	00db      	lsls	r3, r3, #3
 800eebc:	4a82      	ldr	r2, [pc, #520]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800eebe:	4413      	add	r3, r2
 800eec0:	4a82      	ldr	r2, [pc, #520]	; (800f0cc <UpdateSIGNALSNames+0x97c>)
 800eec2:	6810      	ldr	r0, [r2, #0]
 800eec4:	6018      	str	r0, [r3, #0]
 800eec6:	8891      	ldrh	r1, [r2, #4]
 800eec8:	7992      	ldrb	r2, [r2, #6]
 800eeca:	8099      	strh	r1, [r3, #4]
 800eecc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800eece:	79fb      	ldrb	r3, [r7, #7]
 800eed0:	1c5a      	adds	r2, r3, #1
 800eed2:	71fa      	strb	r2, [r7, #7]
 800eed4:	461a      	mov	r2, r3
 800eed6:	4613      	mov	r3, r2
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	00db      	lsls	r3, r3, #3
 800eede:	4a7a      	ldr	r2, [pc, #488]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800eee0:	4413      	add	r3, r2
 800eee2:	4a7b      	ldr	r2, [pc, #492]	; (800f0d0 <UpdateSIGNALSNames+0x980>)
 800eee4:	6810      	ldr	r0, [r2, #0]
 800eee6:	6018      	str	r0, [r3, #0]
 800eee8:	8891      	ldrh	r1, [r2, #4]
 800eeea:	7992      	ldrb	r2, [r2, #6]
 800eeec:	8099      	strh	r1, [r3, #4]
 800eeee:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	71fa      	strb	r2, [r7, #7]
 800eef6:	461a      	mov	r2, r3
 800eef8:	4613      	mov	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	00db      	lsls	r3, r3, #3
 800ef00:	4a71      	ldr	r2, [pc, #452]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800ef02:	4413      	add	r3, r2
 800ef04:	4a73      	ldr	r2, [pc, #460]	; (800f0d4 <UpdateSIGNALSNames+0x984>)
 800ef06:	6810      	ldr	r0, [r2, #0]
 800ef08:	6018      	str	r0, [r3, #0]
 800ef0a:	8891      	ldrh	r1, [r2, #4]
 800ef0c:	7992      	ldrb	r2, [r2, #6]
 800ef0e:	8099      	strh	r1, [r3, #4]
 800ef10:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	1c5a      	adds	r2, r3, #1
 800ef16:	71fa      	strb	r2, [r7, #7]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4413      	add	r3, r2
 800ef20:	00db      	lsls	r3, r3, #3
 800ef22:	4a69      	ldr	r2, [pc, #420]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800ef24:	4413      	add	r3, r2
 800ef26:	4a6c      	ldr	r2, [pc, #432]	; (800f0d8 <UpdateSIGNALSNames+0x988>)
 800ef28:	6810      	ldr	r0, [r2, #0]
 800ef2a:	6018      	str	r0, [r3, #0]
 800ef2c:	8891      	ldrh	r1, [r2, #4]
 800ef2e:	7992      	ldrb	r2, [r2, #6]
 800ef30:	8099      	strh	r1, [r3, #4]
 800ef32:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800ef34:	79fb      	ldrb	r3, [r7, #7]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	71fa      	strb	r2, [r7, #7]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	4413      	add	r3, r2
 800ef42:	00db      	lsls	r3, r3, #3
 800ef44:	4a60      	ldr	r2, [pc, #384]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800ef46:	4413      	add	r3, r2
 800ef48:	4a64      	ldr	r2, [pc, #400]	; (800f0dc <UpdateSIGNALSNames+0x98c>)
 800ef4a:	6810      	ldr	r0, [r2, #0]
 800ef4c:	6018      	str	r0, [r3, #0]
 800ef4e:	8891      	ldrh	r1, [r2, #4]
 800ef50:	7992      	ldrb	r2, [r2, #6]
 800ef52:	8099      	strh	r1, [r3, #4]
 800ef54:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800ef56:	79fb      	ldrb	r3, [r7, #7]
 800ef58:	1c5a      	adds	r2, r3, #1
 800ef5a:	71fa      	strb	r2, [r7, #7]
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	4613      	mov	r3, r2
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4413      	add	r3, r2
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	4a58      	ldr	r2, [pc, #352]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800ef68:	4413      	add	r3, r2
 800ef6a:	4a5d      	ldr	r2, [pc, #372]	; (800f0e0 <UpdateSIGNALSNames+0x990>)
 800ef6c:	6810      	ldr	r0, [r2, #0]
 800ef6e:	6018      	str	r0, [r3, #0]
 800ef70:	8891      	ldrh	r1, [r2, #4]
 800ef72:	7992      	ldrb	r2, [r2, #6]
 800ef74:	8099      	strh	r1, [r3, #4]
 800ef76:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800ef78:	79fb      	ldrb	r3, [r7, #7]
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	71fa      	strb	r2, [r7, #7]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	4613      	mov	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	00db      	lsls	r3, r3, #3
 800ef88:	4a4f      	ldr	r2, [pc, #316]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800ef8a:	4413      	add	r3, r2
 800ef8c:	4a55      	ldr	r2, [pc, #340]	; (800f0e4 <UpdateSIGNALSNames+0x994>)
 800ef8e:	6810      	ldr	r0, [r2, #0]
 800ef90:	6018      	str	r0, [r3, #0]
 800ef92:	8891      	ldrh	r1, [r2, #4]
 800ef94:	7992      	ldrb	r2, [r2, #6]
 800ef96:	8099      	strh	r1, [r3, #4]
 800ef98:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800ef9a:	79fb      	ldrb	r3, [r7, #7]
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	71fa      	strb	r2, [r7, #7]
 800efa0:	461a      	mov	r2, r3
 800efa2:	4613      	mov	r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4413      	add	r3, r2
 800efa8:	00db      	lsls	r3, r3, #3
 800efaa:	4a47      	ldr	r2, [pc, #284]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800efac:	4413      	add	r3, r2
 800efae:	4a4e      	ldr	r2, [pc, #312]	; (800f0e8 <UpdateSIGNALSNames+0x998>)
 800efb0:	6810      	ldr	r0, [r2, #0]
 800efb2:	6018      	str	r0, [r3, #0]
 800efb4:	8891      	ldrh	r1, [r2, #4]
 800efb6:	7992      	ldrb	r2, [r2, #6]
 800efb8:	8099      	strh	r1, [r3, #4]
 800efba:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800efbc:	79fb      	ldrb	r3, [r7, #7]
 800efbe:	1c5a      	adds	r2, r3, #1
 800efc0:	71fa      	strb	r2, [r7, #7]
 800efc2:	461a      	mov	r2, r3
 800efc4:	4613      	mov	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4413      	add	r3, r2
 800efca:	00db      	lsls	r3, r3, #3
 800efcc:	4a3e      	ldr	r2, [pc, #248]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800efce:	4413      	add	r3, r2
 800efd0:	4a46      	ldr	r2, [pc, #280]	; (800f0ec <UpdateSIGNALSNames+0x99c>)
 800efd2:	6810      	ldr	r0, [r2, #0]
 800efd4:	6018      	str	r0, [r3, #0]
 800efd6:	8891      	ldrh	r1, [r2, #4]
 800efd8:	7992      	ldrb	r2, [r2, #6]
 800efda:	8099      	strh	r1, [r3, #4]
 800efdc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	71fa      	strb	r2, [r7, #7]
 800efe4:	461a      	mov	r2, r3
 800efe6:	4613      	mov	r3, r2
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	4413      	add	r3, r2
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	4a36      	ldr	r2, [pc, #216]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800eff0:	4413      	add	r3, r2
 800eff2:	4a3f      	ldr	r2, [pc, #252]	; (800f0f0 <UpdateSIGNALSNames+0x9a0>)
 800eff4:	6810      	ldr	r0, [r2, #0]
 800eff6:	6018      	str	r0, [r3, #0]
 800eff8:	8891      	ldrh	r1, [r2, #4]
 800effa:	7992      	ldrb	r2, [r2, #6]
 800effc:	8099      	strh	r1, [r3, #4]
 800effe:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800f000:	79fb      	ldrb	r3, [r7, #7]
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	71fa      	strb	r2, [r7, #7]
 800f006:	461a      	mov	r2, r3
 800f008:	4613      	mov	r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	4413      	add	r3, r2
 800f00e:	00db      	lsls	r3, r3, #3
 800f010:	4a2d      	ldr	r2, [pc, #180]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800f012:	4413      	add	r3, r2
 800f014:	4a37      	ldr	r2, [pc, #220]	; (800f0f4 <UpdateSIGNALSNames+0x9a4>)
 800f016:	6810      	ldr	r0, [r2, #0]
 800f018:	6018      	str	r0, [r3, #0]
 800f01a:	8891      	ldrh	r1, [r2, #4]
 800f01c:	7992      	ldrb	r2, [r2, #6]
 800f01e:	8099      	strh	r1, [r3, #4]
 800f020:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	71fa      	strb	r2, [r7, #7]
 800f028:	461a      	mov	r2, r3
 800f02a:	4613      	mov	r3, r2
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4413      	add	r3, r2
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	4a25      	ldr	r2, [pc, #148]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800f034:	4413      	add	r3, r2
 800f036:	4930      	ldr	r1, [pc, #192]	; (800f0f8 <UpdateSIGNALSNames+0x9a8>)
 800f038:	461a      	mov	r2, r3
 800f03a:	460b      	mov	r3, r1
 800f03c:	cb03      	ldmia	r3!, {r0, r1}
 800f03e:	6010      	str	r0, [r2, #0]
 800f040:	6051      	str	r1, [r2, #4]
 800f042:	881b      	ldrh	r3, [r3, #0]
 800f044:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800f046:	79fb      	ldrb	r3, [r7, #7]
 800f048:	1c5a      	adds	r2, r3, #1
 800f04a:	71fa      	strb	r2, [r7, #7]
 800f04c:	461a      	mov	r2, r3
 800f04e:	4613      	mov	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	00db      	lsls	r3, r3, #3
 800f056:	4a1c      	ldr	r2, [pc, #112]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800f058:	4413      	add	r3, r2
 800f05a:	4a28      	ldr	r2, [pc, #160]	; (800f0fc <UpdateSIGNALSNames+0x9ac>)
 800f05c:	6810      	ldr	r0, [r2, #0]
 800f05e:	6018      	str	r0, [r3, #0]
 800f060:	8891      	ldrh	r1, [r2, #4]
 800f062:	7992      	ldrb	r2, [r2, #6]
 800f064:	8099      	strh	r1, [r3, #4]
 800f066:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	71fa      	strb	r2, [r7, #7]
 800f06e:	461a      	mov	r2, r3
 800f070:	4613      	mov	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	4a13      	ldr	r2, [pc, #76]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800f07a:	4413      	add	r3, r2
 800f07c:	4a20      	ldr	r2, [pc, #128]	; (800f100 <UpdateSIGNALSNames+0x9b0>)
 800f07e:	461c      	mov	r4, r3
 800f080:	4613      	mov	r3, r2
 800f082:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f084:	6020      	str	r0, [r4, #0]
 800f086:	6061      	str	r1, [r4, #4]
 800f088:	60a2      	str	r2, [r4, #8]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800f08e:	79fb      	ldrb	r3, [r7, #7]
 800f090:	1c5a      	adds	r2, r3, #1
 800f092:	71fa      	strb	r2, [r7, #7]
 800f094:	461a      	mov	r2, r3
 800f096:	4613      	mov	r3, r2
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	4413      	add	r3, r2
 800f09c:	00db      	lsls	r3, r3, #3
 800f09e:	4a0a      	ldr	r2, [pc, #40]	; (800f0c8 <UpdateSIGNALSNames+0x978>)
 800f0a0:	4413      	add	r3, r2
 800f0a2:	4a18      	ldr	r2, [pc, #96]	; (800f104 <UpdateSIGNALSNames+0x9b4>)
 800f0a4:	461c      	mov	r4, r3
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0aa:	6020      	str	r0, [r4, #0]
 800f0ac:	6061      	str	r1, [r4, #4]
 800f0ae:	60a2      	str	r2, [r4, #8]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800f0b4:	79fb      	ldrb	r3, [r7, #7]
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	4b13      	ldr	r3, [pc, #76]	; (800f108 <UpdateSIGNALSNames+0x9b8>)
 800f0ba:	801a      	strh	r2, [r3, #0]


}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bc90      	pop	{r4, r7}
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	20003db8 	.word	0x20003db8
 800f0cc:	08028a74 	.word	0x08028a74
 800f0d0:	08028a7c 	.word	0x08028a7c
 800f0d4:	08028a84 	.word	0x08028a84
 800f0d8:	08028a8c 	.word	0x08028a8c
 800f0dc:	08028a94 	.word	0x08028a94
 800f0e0:	08028a9c 	.word	0x08028a9c
 800f0e4:	08028aa4 	.word	0x08028aa4
 800f0e8:	08028aac 	.word	0x08028aac
 800f0ec:	08028ab4 	.word	0x08028ab4
 800f0f0:	08028abc 	.word	0x08028abc
 800f0f4:	08028ac4 	.word	0x08028ac4
 800f0f8:	08028acc 	.word	0x08028acc
 800f0fc:	08028ad8 	.word	0x08028ad8
 800f100:	08028ae0 	.word	0x08028ae0
 800f104:	08028af0 	.word	0x08028af0
 800f108:	200048a8 	.word	0x200048a8

0800f10c <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800f10c:	b5b0      	push	{r4, r5, r7, lr}
 800f10e:	b086      	sub	sp, #24
 800f110:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800f112:	496f      	ldr	r1, [pc, #444]	; (800f2d0 <print_self_DetailsSiemens+0x1c4>)
 800f114:	486f      	ldr	r0, [pc, #444]	; (800f2d4 <print_self_DetailsSiemens+0x1c8>)
 800f116:	f015 fc1f 	bl	8024958 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800f11a:	4b6f      	ldr	r3, [pc, #444]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f11c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f120:	4619      	mov	r1, r3
 800f122:	486e      	ldr	r0, [pc, #440]	; (800f2dc <print_self_DetailsSiemens+0x1d0>)
 800f124:	f015 fc18 	bl	8024958 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800f128:	4b6b      	ldr	r3, [pc, #428]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f12a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f12e:	4619      	mov	r1, r3
 800f130:	4b69      	ldr	r3, [pc, #420]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f132:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f136:	461a      	mov	r2, r3
 800f138:	4b67      	ldr	r3, [pc, #412]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f13a:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f13e:	4618      	mov	r0, r3
 800f140:	4b65      	ldr	r3, [pc, #404]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f142:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	4603      	mov	r3, r0
 800f14a:	4865      	ldr	r0, [pc, #404]	; (800f2e0 <print_self_DetailsSiemens+0x1d4>)
 800f14c:	f015 fc04 	bl	8024958 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800f150:	4b61      	ldr	r3, [pc, #388]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f152:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800f156:	4618      	mov	r0, r3
 800f158:	4b5f      	ldr	r3, [pc, #380]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f15a:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 800f15e:	461c      	mov	r4, r3
 800f160:	4b5d      	ldr	r3, [pc, #372]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f162:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 800f166:	461d      	mov	r5, r3
 800f168:	4b5b      	ldr	r3, [pc, #364]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f16a:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 800f16e:	461a      	mov	r2, r3
 800f170:	4b59      	ldr	r3, [pc, #356]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f172:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 800f176:	4619      	mov	r1, r3
 800f178:	4b57      	ldr	r3, [pc, #348]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f17a:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 800f17e:	9302      	str	r3, [sp, #8]
 800f180:	9101      	str	r1, [sp, #4]
 800f182:	9200      	str	r2, [sp, #0]
 800f184:	462b      	mov	r3, r5
 800f186:	4622      	mov	r2, r4
 800f188:	4601      	mov	r1, r0
 800f18a:	4856      	ldr	r0, [pc, #344]	; (800f2e4 <print_self_DetailsSiemens+0x1d8>)
 800f18c:	f015 fbe4 	bl	8024958 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800f190:	4b51      	ldr	r3, [pc, #324]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f192:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 800f196:	4619      	mov	r1, r3
 800f198:	4853      	ldr	r0, [pc, #332]	; (800f2e8 <print_self_DetailsSiemens+0x1dc>)
 800f19a:	f015 fbdd 	bl	8024958 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800f19e:	2300      	movs	r3, #0
 800f1a0:	71fb      	strb	r3, [r7, #7]
 800f1a2:	e037      	b.n	800f214 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800f1a4:	79fb      	ldrb	r3, [r7, #7]
 800f1a6:	1c59      	adds	r1, r3, #1
 800f1a8:	79fb      	ldrb	r3, [r7, #7]
 800f1aa:	4a4b      	ldr	r2, [pc, #300]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f1ac:	33ae      	adds	r3, #174	; 0xae
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4413      	add	r3, r2
 800f1b2:	785b      	ldrb	r3, [r3, #1]
 800f1b4:	461c      	mov	r4, r3
 800f1b6:	79fb      	ldrb	r3, [r7, #7]
 800f1b8:	4a47      	ldr	r2, [pc, #284]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	4413      	add	r3, r2
 800f1be:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f1c2:	461d      	mov	r5, r3
 800f1c4:	79fb      	ldrb	r3, [r7, #7]
 800f1c6:	4a44      	ldr	r2, [pc, #272]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4413      	add	r3, r2
 800f1cc:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	4a40      	ldr	r2, [pc, #256]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4413      	add	r3, r2
 800f1da:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	9000      	str	r0, [sp, #0]
 800f1e2:	462b      	mov	r3, r5
 800f1e4:	4622      	mov	r2, r4
 800f1e6:	4841      	ldr	r0, [pc, #260]	; (800f2ec <print_self_DetailsSiemens+0x1e0>)
 800f1e8:	f015 fbb6 	bl	8024958 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800f1ec:	79fb      	ldrb	r3, [r7, #7]
 800f1ee:	4a3a      	ldr	r2, [pc, #232]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f1f0:	33b6      	adds	r3, #182	; 0xb6
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	88db      	ldrh	r3, [r3, #6]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	79fb      	ldrb	r3, [r7, #7]
 800f1fc:	4a36      	ldr	r2, [pc, #216]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 800f206:	461a      	mov	r2, r3
 800f208:	4839      	ldr	r0, [pc, #228]	; (800f2f0 <print_self_DetailsSiemens+0x1e4>)
 800f20a:	f015 fba5 	bl	8024958 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800f20e:	79fb      	ldrb	r3, [r7, #7]
 800f210:	3301      	adds	r3, #1
 800f212:	71fb      	strb	r3, [r7, #7]
 800f214:	4b30      	ldr	r3, [pc, #192]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f216:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f21a:	79fa      	ldrb	r2, [r7, #7]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d3c1      	bcc.n	800f1a4 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800f220:	4b2d      	ldr	r3, [pc, #180]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f222:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800f226:	4619      	mov	r1, r3
 800f228:	4832      	ldr	r0, [pc, #200]	; (800f2f4 <print_self_DetailsSiemens+0x1e8>)
 800f22a:	f015 fb95 	bl	8024958 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800f22e:	4b2a      	ldr	r3, [pc, #168]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f230:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800f234:	4619      	mov	r1, r3
 800f236:	4830      	ldr	r0, [pc, #192]	; (800f2f8 <print_self_DetailsSiemens+0x1ec>)
 800f238:	f015 fb8e 	bl	8024958 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800f23c:	4b26      	ldr	r3, [pc, #152]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f23e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f242:	4619      	mov	r1, r3
 800f244:	482d      	ldr	r0, [pc, #180]	; (800f2fc <print_self_DetailsSiemens+0x1f0>)
 800f246:	f015 fb87 	bl	8024958 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800f24a:	4b23      	ldr	r3, [pc, #140]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f24c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800f250:	4619      	mov	r1, r3
 800f252:	482a      	ldr	r0, [pc, #168]	; (800f2fc <print_self_DetailsSiemens+0x1f0>)
 800f254:	f015 fb80 	bl	8024958 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800f258:	4b1f      	ldr	r3, [pc, #124]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f25a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800f25e:	4619      	mov	r1, r3
 800f260:	4827      	ldr	r0, [pc, #156]	; (800f300 <print_self_DetailsSiemens+0x1f4>)
 800f262:	f015 fb79 	bl	8024958 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800f266:	4b1c      	ldr	r3, [pc, #112]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f268:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800f26c:	4619      	mov	r1, r3
 800f26e:	4825      	ldr	r0, [pc, #148]	; (800f304 <print_self_DetailsSiemens+0x1f8>)
 800f270:	f015 fb72 	bl	8024958 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800f274:	4b18      	ldr	r3, [pc, #96]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f276:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f27a:	4619      	mov	r1, r3
 800f27c:	4822      	ldr	r0, [pc, #136]	; (800f308 <print_self_DetailsSiemens+0x1fc>)
 800f27e:	f015 fb6b 	bl	8024958 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800f282:	4b15      	ldr	r3, [pc, #84]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f284:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800f288:	4619      	mov	r1, r3
 800f28a:	4820      	ldr	r0, [pc, #128]	; (800f30c <print_self_DetailsSiemens+0x200>)
 800f28c:	f015 fb64 	bl	8024958 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800f290:	4b11      	ldr	r3, [pc, #68]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f292:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800f296:	4619      	mov	r1, r3
 800f298:	481d      	ldr	r0, [pc, #116]	; (800f310 <print_self_DetailsSiemens+0x204>)
 800f29a:	f015 fb5d 	bl	8024958 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800f29e:	4b0e      	ldr	r3, [pc, #56]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f2a0:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	481b      	ldr	r0, [pc, #108]	; (800f314 <print_self_DetailsSiemens+0x208>)
 800f2a8:	f015 fb56 	bl	8024958 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f2ae:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	4818      	ldr	r0, [pc, #96]	; (800f318 <print_self_DetailsSiemens+0x20c>)
 800f2b6:	f015 fb4f 	bl	8024958 <iprintf>
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800f2ba:	4b07      	ldr	r3, [pc, #28]	; (800f2d8 <print_self_DetailsSiemens+0x1cc>)
 800f2bc:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	4816      	ldr	r0, [pc, #88]	; (800f31c <print_self_DetailsSiemens+0x210>)
 800f2c4:	f015 fb48 	bl	8024958 <iprintf>

}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bdb0      	pop	{r4, r5, r7, pc}
 800f2d0:	20000305 	.word	0x20000305
 800f2d4:	08028b00 	.word	0x08028b00
 800f2d8:	20000304 	.word	0x20000304
 800f2dc:	08028b14 	.word	0x08028b14
 800f2e0:	08028b24 	.word	0x08028b24
 800f2e4:	08028b3c 	.word	0x08028b3c
 800f2e8:	08028b64 	.word	0x08028b64
 800f2ec:	08028b7c 	.word	0x08028b7c
 800f2f0:	08028b90 	.word	0x08028b90
 800f2f4:	08028ba8 	.word	0x08028ba8
 800f2f8:	08028bb8 	.word	0x08028bb8
 800f2fc:	08028bcc 	.word	0x08028bcc
 800f300:	08028be0 	.word	0x08028be0
 800f304:	08028bf0 	.word	0x08028bf0
 800f308:	08028c00 	.word	0x08028c00
 800f30c:	08028c14 	.word	0x08028c14
 800f310:	08028c2c 	.word	0x08028c2c
 800f314:	08028c44 	.word	0x08028c44
 800f318:	08028c60 	.word	0x08028c60
 800f31c:	08028c7c 	.word	0x08028c7c

0800f320 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800f328:	f008 fb0c 	bl	8017944 <HAL_GetTick>
 800f32c:	4602      	mov	r2, r0
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	bfb8      	it	lt
 800f336:	425b      	neglt	r3, r3
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800f346:	23f3      	movs	r3, #243	; 0xf3
 800f348:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800f34a:	f012 fe0f 	bl	8021f6c <udp_new>
 800f34e:	4603      	mov	r3, r0
 800f350:	4a7a      	ldr	r2, [pc, #488]	; (800f53c <udpServer_init+0x1fc>)
 800f352:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800f354:	4b7a      	ldr	r3, [pc, #488]	; (800f540 <udpServer_init+0x200>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d002      	beq.n	800f362 <udpServer_init+0x22>
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	d074      	beq.n	800f44a <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800f360:	e0e9      	b.n	800f536 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800f362:	4b77      	ldr	r3, [pc, #476]	; (800f540 <udpServer_init+0x200>)
 800f364:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f368:	061a      	lsls	r2, r3, #24
 800f36a:	4b75      	ldr	r3, [pc, #468]	; (800f540 <udpServer_init+0x200>)
 800f36c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f370:	041b      	lsls	r3, r3, #16
 800f372:	431a      	orrs	r2, r3
 800f374:	4b72      	ldr	r3, [pc, #456]	; (800f540 <udpServer_init+0x200>)
 800f376:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f37a:	021b      	lsls	r3, r3, #8
 800f37c:	4313      	orrs	r3, r2
 800f37e:	4a70      	ldr	r2, [pc, #448]	; (800f540 <udpServer_init+0x200>)
 800f380:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800f384:	4313      	orrs	r3, r2
 800f386:	061a      	lsls	r2, r3, #24
 800f388:	4b6d      	ldr	r3, [pc, #436]	; (800f540 <udpServer_init+0x200>)
 800f38a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f38e:	0619      	lsls	r1, r3, #24
 800f390:	4b6b      	ldr	r3, [pc, #428]	; (800f540 <udpServer_init+0x200>)
 800f392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f396:	041b      	lsls	r3, r3, #16
 800f398:	4319      	orrs	r1, r3
 800f39a:	4b69      	ldr	r3, [pc, #420]	; (800f540 <udpServer_init+0x200>)
 800f39c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f3a0:	021b      	lsls	r3, r3, #8
 800f3a2:	430b      	orrs	r3, r1
 800f3a4:	4966      	ldr	r1, [pc, #408]	; (800f540 <udpServer_init+0x200>)
 800f3a6:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	021b      	lsls	r3, r3, #8
 800f3ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	4b62      	ldr	r3, [pc, #392]	; (800f540 <udpServer_init+0x200>)
 800f3b6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f3ba:	0619      	lsls	r1, r3, #24
 800f3bc:	4b60      	ldr	r3, [pc, #384]	; (800f540 <udpServer_init+0x200>)
 800f3be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3c2:	041b      	lsls	r3, r3, #16
 800f3c4:	4319      	orrs	r1, r3
 800f3c6:	4b5e      	ldr	r3, [pc, #376]	; (800f540 <udpServer_init+0x200>)
 800f3c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f3cc:	021b      	lsls	r3, r3, #8
 800f3ce:	430b      	orrs	r3, r1
 800f3d0:	495b      	ldr	r1, [pc, #364]	; (800f540 <udpServer_init+0x200>)
 800f3d2:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800f3d6:	430b      	orrs	r3, r1
 800f3d8:	0a1b      	lsrs	r3, r3, #8
 800f3da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3de:	431a      	orrs	r2, r3
 800f3e0:	4b57      	ldr	r3, [pc, #348]	; (800f540 <udpServer_init+0x200>)
 800f3e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f3e6:	0619      	lsls	r1, r3, #24
 800f3e8:	4b55      	ldr	r3, [pc, #340]	; (800f540 <udpServer_init+0x200>)
 800f3ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3ee:	041b      	lsls	r3, r3, #16
 800f3f0:	4319      	orrs	r1, r3
 800f3f2:	4b53      	ldr	r3, [pc, #332]	; (800f540 <udpServer_init+0x200>)
 800f3f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f3f8:	021b      	lsls	r3, r3, #8
 800f3fa:	430b      	orrs	r3, r1
 800f3fc:	4950      	ldr	r1, [pc, #320]	; (800f540 <udpServer_init+0x200>)
 800f3fe:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800f402:	430b      	orrs	r3, r1
 800f404:	0e1b      	lsrs	r3, r3, #24
 800f406:	4313      	orrs	r3, r2
 800f408:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800f40a:	4b4c      	ldr	r3, [pc, #304]	; (800f53c <udpServer_init+0x1fc>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	4a4c      	ldr	r2, [pc, #304]	; (800f540 <udpServer_init+0x200>)
 800f410:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800f414:	4639      	mov	r1, r7
 800f416:	4618      	mov	r0, r3
 800f418:	f012 fcbe 	bl	8021d98 <udp_bind>
 800f41c:	4603      	mov	r3, r0
 800f41e:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800f420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d107      	bne.n	800f438 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800f428:	4b44      	ldr	r3, [pc, #272]	; (800f53c <udpServer_init+0x1fc>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2200      	movs	r2, #0
 800f42e:	4945      	ldr	r1, [pc, #276]	; (800f544 <udpServer_init+0x204>)
 800f430:	4618      	mov	r0, r3
 800f432:	f012 fd39 	bl	8021ea8 <udp_recv>
		break;
 800f436:	e07c      	b.n	800f532 <udpServer_init+0x1f2>
			printf("N-OK\n");
 800f438:	4843      	ldr	r0, [pc, #268]	; (800f548 <udpServer_init+0x208>)
 800f43a:	f015 fb29 	bl	8024a90 <puts>
			udp_remove(upcb);
 800f43e:	4b3f      	ldr	r3, [pc, #252]	; (800f53c <udpServer_init+0x1fc>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4618      	mov	r0, r3
 800f444:	f012 fd50 	bl	8021ee8 <udp_remove>
		break;
 800f448:	e073      	b.n	800f532 <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800f44a:	4b3d      	ldr	r3, [pc, #244]	; (800f540 <udpServer_init+0x200>)
 800f44c:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f450:	061a      	lsls	r2, r3, #24
 800f452:	4b3b      	ldr	r3, [pc, #236]	; (800f540 <udpServer_init+0x200>)
 800f454:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f458:	041b      	lsls	r3, r3, #16
 800f45a:	431a      	orrs	r2, r3
 800f45c:	4b38      	ldr	r3, [pc, #224]	; (800f540 <udpServer_init+0x200>)
 800f45e:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f462:	021b      	lsls	r3, r3, #8
 800f464:	4313      	orrs	r3, r2
 800f466:	4a36      	ldr	r2, [pc, #216]	; (800f540 <udpServer_init+0x200>)
 800f468:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 800f46c:	4313      	orrs	r3, r2
 800f46e:	061a      	lsls	r2, r3, #24
 800f470:	4b33      	ldr	r3, [pc, #204]	; (800f540 <udpServer_init+0x200>)
 800f472:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f476:	0619      	lsls	r1, r3, #24
 800f478:	4b31      	ldr	r3, [pc, #196]	; (800f540 <udpServer_init+0x200>)
 800f47a:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f47e:	041b      	lsls	r3, r3, #16
 800f480:	4319      	orrs	r1, r3
 800f482:	4b2f      	ldr	r3, [pc, #188]	; (800f540 <udpServer_init+0x200>)
 800f484:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f488:	021b      	lsls	r3, r3, #8
 800f48a:	430b      	orrs	r3, r1
 800f48c:	492c      	ldr	r1, [pc, #176]	; (800f540 <udpServer_init+0x200>)
 800f48e:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f492:	430b      	orrs	r3, r1
 800f494:	021b      	lsls	r3, r3, #8
 800f496:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f49a:	431a      	orrs	r2, r3
 800f49c:	4b28      	ldr	r3, [pc, #160]	; (800f540 <udpServer_init+0x200>)
 800f49e:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f4a2:	0619      	lsls	r1, r3, #24
 800f4a4:	4b26      	ldr	r3, [pc, #152]	; (800f540 <udpServer_init+0x200>)
 800f4a6:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f4aa:	041b      	lsls	r3, r3, #16
 800f4ac:	4319      	orrs	r1, r3
 800f4ae:	4b24      	ldr	r3, [pc, #144]	; (800f540 <udpServer_init+0x200>)
 800f4b0:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f4b4:	021b      	lsls	r3, r3, #8
 800f4b6:	430b      	orrs	r3, r1
 800f4b8:	4921      	ldr	r1, [pc, #132]	; (800f540 <udpServer_init+0x200>)
 800f4ba:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f4be:	430b      	orrs	r3, r1
 800f4c0:	0a1b      	lsrs	r3, r3, #8
 800f4c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f4c6:	431a      	orrs	r2, r3
 800f4c8:	4b1d      	ldr	r3, [pc, #116]	; (800f540 <udpServer_init+0x200>)
 800f4ca:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f4ce:	0619      	lsls	r1, r3, #24
 800f4d0:	4b1b      	ldr	r3, [pc, #108]	; (800f540 <udpServer_init+0x200>)
 800f4d2:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f4d6:	041b      	lsls	r3, r3, #16
 800f4d8:	4319      	orrs	r1, r3
 800f4da:	4b19      	ldr	r3, [pc, #100]	; (800f540 <udpServer_init+0x200>)
 800f4dc:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f4e0:	021b      	lsls	r3, r3, #8
 800f4e2:	430b      	orrs	r3, r1
 800f4e4:	4916      	ldr	r1, [pc, #88]	; (800f540 <udpServer_init+0x200>)
 800f4e6:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f4ea:	430b      	orrs	r3, r1
 800f4ec:	0e1b      	lsrs	r3, r3, #24
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800f4f2:	4b12      	ldr	r3, [pc, #72]	; (800f53c <udpServer_init+0x1fc>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4a12      	ldr	r2, [pc, #72]	; (800f540 <udpServer_init+0x200>)
 800f4f8:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	4618      	mov	r0, r3
 800f500:	f012 fc4a 	bl	8021d98 <udp_bind>
 800f504:	4603      	mov	r3, r0
 800f506:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800f508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d107      	bne.n	800f520 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800f510:	4b0a      	ldr	r3, [pc, #40]	; (800f53c <udpServer_init+0x1fc>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2200      	movs	r2, #0
 800f516:	490b      	ldr	r1, [pc, #44]	; (800f544 <udpServer_init+0x204>)
 800f518:	4618      	mov	r0, r3
 800f51a:	f012 fcc5 	bl	8021ea8 <udp_recv>
		break;
 800f51e:	e007      	b.n	800f530 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800f520:	4809      	ldr	r0, [pc, #36]	; (800f548 <udpServer_init+0x208>)
 800f522:	f015 fab5 	bl	8024a90 <puts>
			udp_remove(upcb);
 800f526:	4b05      	ldr	r3, [pc, #20]	; (800f53c <udpServer_init+0x1fc>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4618      	mov	r0, r3
 800f52c:	f012 fcdc 	bl	8021ee8 <udp_remove>
		break;
 800f530:	bf00      	nop
	}

	udpClient_connect();
 800f532:	f000 f90d 	bl	800f750 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	20005328 	.word	0x20005328
 800f540:	20000304 	.word	0x20000304
 800f544:	0800f54d 	.word	0x0800f54d
 800f548:	08028c9c 	.word	0x08028c9c

0800f54c <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b086      	sub	sp, #24
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
 800f558:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800f566:	4a70      	ldr	r2, [pc, #448]	; (800f728 <UDP_Receive_Callback+0x1dc>)
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	895b      	ldrh	r3, [r3, #10]
 800f572:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800f574:	4b6d      	ldr	r3, [pc, #436]	; (800f72c <UDP_Receive_Callback+0x1e0>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d02e      	beq.n	800f5da <UDP_Receive_Callback+0x8e>
 800f57c:	2b02      	cmp	r3, #2
 800f57e:	d045      	beq.n	800f60c <UDP_Receive_Callback+0xc0>
 800f580:	e069      	b.n	800f656 <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f582:	4b69      	ldr	r3, [pc, #420]	; (800f728 <UDP_Receive_Callback+0x1dc>)
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	7dfb      	ldrb	r3, [r7, #23]
 800f588:	4969      	ldr	r1, [pc, #420]	; (800f730 <UDP_Receive_Callback+0x1e4>)
 800f58a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d120      	bne.n	800f5d4 <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 800f592:	7dbb      	ldrb	r3, [r7, #22]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d109      	bne.n	800f5ac <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800f598:	6838      	ldr	r0, [r7, #0]
 800f59a:	f014 f8e5 	bl	8023768 <ip4addr_ntoa>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	4864      	ldr	r0, [pc, #400]	; (800f734 <UDP_Receive_Callback+0x1e8>)
 800f5a4:	f015 f9d8 	bl	8024958 <iprintf>
					IpMatched = 1;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800f5ac:	7dfb      	ldrb	r3, [r7, #23]
 800f5ae:	085b      	lsrs	r3, r3, #1
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	4a60      	ldr	r2, [pc, #384]	; (800f738 <UDP_Receive_Callback+0x1ec>)
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800f5be:	7dfb      	ldrb	r3, [r7, #23]
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	7dfa      	ldrb	r2, [r7, #23]
 800f5c8:	0852      	lsrs	r2, r2, #1
 800f5ca:	b2d2      	uxtb	r2, r2
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	b2d9      	uxtb	r1, r3
 800f5d0:	4b5a      	ldr	r3, [pc, #360]	; (800f73c <UDP_Receive_Callback+0x1f0>)
 800f5d2:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f5d4:	7dfb      	ldrb	r3, [r7, #23]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	75fb      	strb	r3, [r7, #23]
 800f5da:	4b54      	ldr	r3, [pc, #336]	; (800f72c <UDP_Receive_Callback+0x1e0>)
 800f5dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f5e0:	7dfa      	ldrb	r2, [r7, #23]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d3cd      	bcc.n	800f582 <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800f5e6:	4b51      	ldr	r3, [pc, #324]	; (800f72c <UDP_Receive_Callback+0x1e0>)
 800f5e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f5ec:	7dfa      	ldrb	r2, [r7, #23]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d935      	bls.n	800f65e <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f011 fc78 	bl	8020ee8 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800f5f8:	6838      	ldr	r0, [r7, #0]
 800f5fa:	f014 f8b5 	bl	8023768 <ip4addr_ntoa>
 800f5fe:	4601      	mov	r1, r0
 800f600:	7dfb      	ldrb	r3, [r7, #23]
 800f602:	461a      	mov	r2, r3
 800f604:	484e      	ldr	r0, [pc, #312]	; (800f740 <UDP_Receive_Callback+0x1f4>)
 800f606:	f015 f9a7 	bl	8024958 <iprintf>
			return;
 800f60a:	e08a      	b.n	800f722 <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f60c:	2300      	movs	r3, #0
 800f60e:	75fb      	strb	r3, [r7, #23]
 800f610:	e00a      	b.n	800f628 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f612:	4b45      	ldr	r3, [pc, #276]	; (800f728 <UDP_Receive_Callback+0x1dc>)
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	4945      	ldr	r1, [pc, #276]	; (800f730 <UDP_Receive_Callback+0x1e4>)
 800f61a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d009      	beq.n	800f636 <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	3301      	adds	r3, #1
 800f626:	75fb      	strb	r3, [r7, #23]
 800f628:	4b40      	ldr	r3, [pc, #256]	; (800f72c <UDP_Receive_Callback+0x1e0>)
 800f62a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f62e:	7dfa      	ldrb	r2, [r7, #23]
 800f630:	429a      	cmp	r2, r3
 800f632:	d3ee      	bcc.n	800f612 <UDP_Receive_Callback+0xc6>
 800f634:	e000      	b.n	800f638 <UDP_Receive_Callback+0xec>
			{
				break;
 800f636:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800f638:	4b3c      	ldr	r3, [pc, #240]	; (800f72c <UDP_Receive_Callback+0x1e0>)
 800f63a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f63e:	7dfa      	ldrb	r2, [r7, #23]
 800f640:	429a      	cmp	r2, r3
 800f642:	d90e      	bls.n	800f662 <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f011 fc4f 	bl	8020ee8 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800f64a:	7dfb      	ldrb	r3, [r7, #23]
 800f64c:	4619      	mov	r1, r3
 800f64e:	483d      	ldr	r0, [pc, #244]	; (800f744 <UDP_Receive_Callback+0x1f8>)
 800f650:	f015 f982 	bl	8024958 <iprintf>
			return;
 800f654:	e065      	b.n	800f722 <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f011 fc46 	bl	8020ee8 <pbuf_free>
		return;
 800f65c:	e061      	b.n	800f722 <UDP_Receive_Callback+0x1d6>
		break;
 800f65e:	bf00      	nop
 800f660:	e000      	b.n	800f664 <UDP_Receive_Callback+0x118>
		break;
 800f662:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800f664:	4b31      	ldr	r3, [pc, #196]	; (800f72c <UDP_Receive_Callback+0x1e0>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d002      	beq.n	800f672 <UDP_Receive_Callback+0x126>
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	d049      	beq.n	800f704 <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800f670:	e054      	b.n	800f71c <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 800f672:	f008 f967 	bl	8017944 <HAL_GetTick>
 800f676:	4603      	mov	r3, r0
 800f678:	4a33      	ldr	r2, [pc, #204]	; (800f748 <UDP_Receive_Callback+0x1fc>)
 800f67a:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800f67c:	4b33      	ldr	r3, [pc, #204]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f67e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f682:	461a      	mov	r2, r3
 800f684:	8abb      	ldrh	r3, [r7, #20]
 800f686:	4413      	add	r3, r2
 800f688:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f68c:	dd24      	ble.n	800f6d8 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800f68e:	4b2f      	ldr	r3, [pc, #188]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f690:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f694:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800f698:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800f69a:	4b2c      	ldr	r3, [pc, #176]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f69c:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	4b2a      	ldr	r3, [pc, #168]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f6a4:	18d0      	adds	r0, r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	8a7a      	ldrh	r2, [r7, #18]
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	f015 f843 	bl	8024738 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	685a      	ldr	r2, [r3, #4]
 800f6b6:	8a7b      	ldrh	r3, [r7, #18]
 800f6b8:	18d1      	adds	r1, r2, r3
 800f6ba:	8aba      	ldrh	r2, [r7, #20]
 800f6bc:	8a7b      	ldrh	r3, [r7, #18]
 800f6be:	1ad3      	subs	r3, r2, r3
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	4822      	ldr	r0, [pc, #136]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f6c4:	f015 f838 	bl	8024738 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800f6c8:	8aba      	ldrh	r2, [r7, #20]
 800f6ca:	8a7b      	ldrh	r3, [r7, #18]
 800f6cc:	1ad3      	subs	r3, r2, r3
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	4b1e      	ldr	r3, [pc, #120]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f6d2:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f6d6:	e021      	b.n	800f71c <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800f6d8:	4b1c      	ldr	r3, [pc, #112]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f6da:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f6de:	461a      	mov	r2, r3
 800f6e0:	4b1a      	ldr	r3, [pc, #104]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f6e2:	18d0      	adds	r0, r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	8aba      	ldrh	r2, [r7, #20]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	f015 f824 	bl	8024738 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800f6f0:	4b16      	ldr	r3, [pc, #88]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f6f2:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800f6f6:	8abb      	ldrh	r3, [r7, #20]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	4b13      	ldr	r3, [pc, #76]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f6fe:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f702:	e00b      	b.n	800f71c <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	8aba      	ldrh	r2, [r7, #20]
 800f70a:	4619      	mov	r1, r3
 800f70c:	480f      	ldr	r0, [pc, #60]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f70e:	f015 f813 	bl	8024738 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800f712:	4a0e      	ldr	r2, [pc, #56]	; (800f74c <UDP_Receive_Callback+0x200>)
 800f714:	8abb      	ldrh	r3, [r7, #20]
 800f716:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800f71a:	bf00      	nop
	}


	pbuf_free(p);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f011 fbe3 	bl	8020ee8 <pbuf_free>
}
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	200052fc 	.word	0x200052fc
 800f72c:	20000304 	.word	0x20000304
 800f730:	200052ac 	.word	0x200052ac
 800f734:	08028ca4 	.word	0x08028ca4
 800f738:	20001088 	.word	0x20001088
 800f73c:	200010b0 	.word	0x200010b0
 800f740:	08028cb0 	.word	0x08028cb0
 800f744:	08028cdc 	.word	0x08028cdc
 800f748:	20000e54 	.word	0x20000e54
 800f74c:	20004ca8 	.word	0x20004ca8

0800f750 <udpClient_connect>:
void udpClient_connect(void)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
//	err_t err;
	uint8_t Traverser = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800f75a:	4ba6      	ldr	r3, [pc, #664]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d003      	beq.n	800f76a <udpClient_connect+0x1a>
 800f762:	2b02      	cmp	r3, #2
 800f764:	f000 80a1 	beq.w	800f8aa <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800f768:	e13f      	b.n	800f9ea <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f76a:	2300      	movs	r3, #0
 800f76c:	71fb      	strb	r3, [r7, #7]
 800f76e:	e094      	b.n	800f89a <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	4aa0      	ldr	r2, [pc, #640]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f774:	3312      	adds	r3, #18
 800f776:	009b      	lsls	r3, r3, #2
 800f778:	4413      	add	r3, r2
 800f77a:	78db      	ldrb	r3, [r3, #3]
 800f77c:	061a      	lsls	r2, r3, #24
 800f77e:	79fb      	ldrb	r3, [r7, #7]
 800f780:	499c      	ldr	r1, [pc, #624]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	440b      	add	r3, r1
 800f786:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f78a:	041b      	lsls	r3, r3, #16
 800f78c:	431a      	orrs	r2, r3
 800f78e:	79fb      	ldrb	r3, [r7, #7]
 800f790:	4998      	ldr	r1, [pc, #608]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	440b      	add	r3, r1
 800f796:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f79a:	021b      	lsls	r3, r3, #8
 800f79c:	431a      	orrs	r2, r3
 800f79e:	79fb      	ldrb	r3, [r7, #7]
 800f7a0:	4994      	ldr	r1, [pc, #592]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	440b      	add	r3, r1
 800f7a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	061a      	lsls	r2, r3, #24
 800f7ae:	79fb      	ldrb	r3, [r7, #7]
 800f7b0:	4990      	ldr	r1, [pc, #576]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f7b2:	3312      	adds	r3, #18
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	440b      	add	r3, r1
 800f7b8:	78db      	ldrb	r3, [r3, #3]
 800f7ba:	0619      	lsls	r1, r3, #24
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	488d      	ldr	r0, [pc, #564]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	4403      	add	r3, r0
 800f7c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f7c8:	041b      	lsls	r3, r3, #16
 800f7ca:	4319      	orrs	r1, r3
 800f7cc:	79fb      	ldrb	r3, [r7, #7]
 800f7ce:	4889      	ldr	r0, [pc, #548]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	4403      	add	r3, r0
 800f7d4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f7d8:	021b      	lsls	r3, r3, #8
 800f7da:	4319      	orrs	r1, r3
 800f7dc:	79fb      	ldrb	r3, [r7, #7]
 800f7de:	4885      	ldr	r0, [pc, #532]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4403      	add	r3, r0
 800f7e4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f7e8:	430b      	orrs	r3, r1
 800f7ea:	021b      	lsls	r3, r3, #8
 800f7ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7f0:	431a      	orrs	r2, r3
 800f7f2:	79fb      	ldrb	r3, [r7, #7]
 800f7f4:	497f      	ldr	r1, [pc, #508]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f7f6:	3312      	adds	r3, #18
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	440b      	add	r3, r1
 800f7fc:	78db      	ldrb	r3, [r3, #3]
 800f7fe:	0619      	lsls	r1, r3, #24
 800f800:	79fb      	ldrb	r3, [r7, #7]
 800f802:	487c      	ldr	r0, [pc, #496]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4403      	add	r3, r0
 800f808:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f80c:	041b      	lsls	r3, r3, #16
 800f80e:	4319      	orrs	r1, r3
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	4878      	ldr	r0, [pc, #480]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	4403      	add	r3, r0
 800f818:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f81c:	021b      	lsls	r3, r3, #8
 800f81e:	4319      	orrs	r1, r3
 800f820:	79fb      	ldrb	r3, [r7, #7]
 800f822:	4874      	ldr	r0, [pc, #464]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4403      	add	r3, r0
 800f828:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f82c:	430b      	orrs	r3, r1
 800f82e:	0a1b      	lsrs	r3, r3, #8
 800f830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f834:	ea42 0103 	orr.w	r1, r2, r3
 800f838:	79fb      	ldrb	r3, [r7, #7]
 800f83a:	4a6e      	ldr	r2, [pc, #440]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f83c:	3312      	adds	r3, #18
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	4413      	add	r3, r2
 800f842:	78db      	ldrb	r3, [r3, #3]
 800f844:	061a      	lsls	r2, r3, #24
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	486a      	ldr	r0, [pc, #424]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	4403      	add	r3, r0
 800f84e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f852:	041b      	lsls	r3, r3, #16
 800f854:	431a      	orrs	r2, r3
 800f856:	79fb      	ldrb	r3, [r7, #7]
 800f858:	4866      	ldr	r0, [pc, #408]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	4403      	add	r3, r0
 800f85e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f862:	021b      	lsls	r3, r3, #8
 800f864:	431a      	orrs	r2, r3
 800f866:	79fb      	ldrb	r3, [r7, #7]
 800f868:	4862      	ldr	r0, [pc, #392]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	4403      	add	r3, r0
 800f86e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f872:	4313      	orrs	r3, r2
 800f874:	0e1a      	lsrs	r2, r3, #24
 800f876:	79fb      	ldrb	r3, [r7, #7]
 800f878:	430a      	orrs	r2, r1
 800f87a:	495f      	ldr	r1, [pc, #380]	; (800f9f8 <udpClient_connect+0x2a8>)
 800f87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f880:	79fb      	ldrb	r3, [r7, #7]
 800f882:	79fa      	ldrb	r2, [r7, #7]
 800f884:	495b      	ldr	r1, [pc, #364]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	440b      	add	r3, r1
 800f88a:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 800f88e:	4b5b      	ldr	r3, [pc, #364]	; (800f9fc <udpClient_connect+0x2ac>)
 800f890:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f894:	79fb      	ldrb	r3, [r7, #7]
 800f896:	3301      	adds	r3, #1
 800f898:	71fb      	strb	r3, [r7, #7]
 800f89a:	4b56      	ldr	r3, [pc, #344]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f89c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f8a0:	79fa      	ldrb	r2, [r7, #7]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	f4ff af64 	bcc.w	800f770 <udpClient_connect+0x20>
		break;
 800f8a8:	e09f      	b.n	800f9ea <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	71fb      	strb	r3, [r7, #7]
 800f8ae:	e094      	b.n	800f9da <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f8b0:	79fb      	ldrb	r3, [r7, #7]
 800f8b2:	4a50      	ldr	r2, [pc, #320]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f8b4:	33ae      	adds	r3, #174	; 0xae
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	785b      	ldrb	r3, [r3, #1]
 800f8bc:	061a      	lsls	r2, r3, #24
 800f8be:	79fb      	ldrb	r3, [r7, #7]
 800f8c0:	494c      	ldr	r1, [pc, #304]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	440b      	add	r3, r1
 800f8c6:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f8ca:	041b      	lsls	r3, r3, #16
 800f8cc:	431a      	orrs	r2, r3
 800f8ce:	79fb      	ldrb	r3, [r7, #7]
 800f8d0:	4948      	ldr	r1, [pc, #288]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	440b      	add	r3, r1
 800f8d6:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f8da:	021b      	lsls	r3, r3, #8
 800f8dc:	431a      	orrs	r2, r3
 800f8de:	79fb      	ldrb	r3, [r7, #7]
 800f8e0:	4944      	ldr	r1, [pc, #272]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	440b      	add	r3, r1
 800f8e6:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	061a      	lsls	r2, r3, #24
 800f8ee:	79fb      	ldrb	r3, [r7, #7]
 800f8f0:	4940      	ldr	r1, [pc, #256]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f8f2:	33ae      	adds	r3, #174	; 0xae
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	440b      	add	r3, r1
 800f8f8:	785b      	ldrb	r3, [r3, #1]
 800f8fa:	0619      	lsls	r1, r3, #24
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	483d      	ldr	r0, [pc, #244]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4403      	add	r3, r0
 800f904:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f908:	041b      	lsls	r3, r3, #16
 800f90a:	4319      	orrs	r1, r3
 800f90c:	79fb      	ldrb	r3, [r7, #7]
 800f90e:	4839      	ldr	r0, [pc, #228]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	4403      	add	r3, r0
 800f914:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f918:	021b      	lsls	r3, r3, #8
 800f91a:	4319      	orrs	r1, r3
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	4835      	ldr	r0, [pc, #212]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	4403      	add	r3, r0
 800f924:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f928:	430b      	orrs	r3, r1
 800f92a:	021b      	lsls	r3, r3, #8
 800f92c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f930:	431a      	orrs	r2, r3
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	492f      	ldr	r1, [pc, #188]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f936:	33ae      	adds	r3, #174	; 0xae
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	440b      	add	r3, r1
 800f93c:	785b      	ldrb	r3, [r3, #1]
 800f93e:	0619      	lsls	r1, r3, #24
 800f940:	79fb      	ldrb	r3, [r7, #7]
 800f942:	482c      	ldr	r0, [pc, #176]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	4403      	add	r3, r0
 800f948:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f94c:	041b      	lsls	r3, r3, #16
 800f94e:	4319      	orrs	r1, r3
 800f950:	79fb      	ldrb	r3, [r7, #7]
 800f952:	4828      	ldr	r0, [pc, #160]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	4403      	add	r3, r0
 800f958:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f95c:	021b      	lsls	r3, r3, #8
 800f95e:	4319      	orrs	r1, r3
 800f960:	79fb      	ldrb	r3, [r7, #7]
 800f962:	4824      	ldr	r0, [pc, #144]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4403      	add	r3, r0
 800f968:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f96c:	430b      	orrs	r3, r1
 800f96e:	0a1b      	lsrs	r3, r3, #8
 800f970:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f974:	ea42 0103 	orr.w	r1, r2, r3
 800f978:	79fb      	ldrb	r3, [r7, #7]
 800f97a:	4a1e      	ldr	r2, [pc, #120]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f97c:	33ae      	adds	r3, #174	; 0xae
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	4413      	add	r3, r2
 800f982:	785b      	ldrb	r3, [r3, #1]
 800f984:	061a      	lsls	r2, r3, #24
 800f986:	79fb      	ldrb	r3, [r7, #7]
 800f988:	481a      	ldr	r0, [pc, #104]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4403      	add	r3, r0
 800f98e:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f992:	041b      	lsls	r3, r3, #16
 800f994:	431a      	orrs	r2, r3
 800f996:	79fb      	ldrb	r3, [r7, #7]
 800f998:	4816      	ldr	r0, [pc, #88]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4403      	add	r3, r0
 800f99e:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f9a2:	021b      	lsls	r3, r3, #8
 800f9a4:	431a      	orrs	r2, r3
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	4812      	ldr	r0, [pc, #72]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4403      	add	r3, r0
 800f9ae:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	0e1a      	lsrs	r2, r3, #24
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	430a      	orrs	r2, r1
 800f9ba:	490f      	ldr	r1, [pc, #60]	; (800f9f8 <udpClient_connect+0x2a8>)
 800f9bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f9c0:	79fb      	ldrb	r3, [r7, #7]
 800f9c2:	79fa      	ldrb	r2, [r7, #7]
 800f9c4:	490b      	ldr	r1, [pc, #44]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	440b      	add	r3, r1
 800f9ca:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 800f9ce:	4b0b      	ldr	r3, [pc, #44]	; (800f9fc <udpClient_connect+0x2ac>)
 800f9d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	71fb      	strb	r3, [r7, #7]
 800f9da:	4b06      	ldr	r3, [pc, #24]	; (800f9f4 <udpClient_connect+0x2a4>)
 800f9dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f9e0:	79fa      	ldrb	r2, [r7, #7]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	f4ff af64 	bcc.w	800f8b0 <udpClient_connect+0x160>
		break;
 800f9e8:	bf00      	nop
	}
}
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr
 800f9f4:	20000304 	.word	0x20000304
 800f9f8:	200052ac 	.word	0x200052ac
 800f9fc:	20005300 	.word	0x20005300

0800fa00 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800fa12:	7afb      	ldrb	r3, [r7, #11]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	2036      	movs	r0, #54	; 0x36
 800fa1e:	f010 ff81 	bl	8020924 <pbuf_alloc>
 800fa22:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d01d      	beq.n	800fa66 <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 800fa2a:	7afb      	ldrb	r3, [r7, #11]
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	461a      	mov	r2, r3
 800fa30:	68f9      	ldr	r1, [r7, #12]
 800fa32:	6938      	ldr	r0, [r7, #16]
 800fa34:	f011 fc52 	bl	80212dc <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800fa38:	4b0d      	ldr	r3, [pc, #52]	; (800fa70 <udpClient_send+0x70>)
 800fa3a:	6818      	ldr	r0, [r3, #0]
 800fa3c:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <udpClient_send+0x74>)
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	1d3a      	adds	r2, r7, #4
 800fa42:	6939      	ldr	r1, [r7, #16]
 800fa44:	f011 fff2 	bl	8021a2c <udp_sendto>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800fa4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d005      	beq.n	800fa60 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800fa54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4807      	ldr	r0, [pc, #28]	; (800fa78 <udpClient_send+0x78>)
 800fa5c:	f014 ff7c 	bl	8024958 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800fa60:	6938      	ldr	r0, [r7, #16]
 800fa62:	f011 fa41 	bl	8020ee8 <pbuf_free>
	}
}
 800fa66:	bf00      	nop
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20005328 	.word	0x20005328
 800fa74:	20005300 	.word	0x20005300
 800fa78:	08028d04 	.word	0x08028d04

0800fa7c <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800fa80:	4b07      	ldr	r3, [pc, #28]	; (800faa0 <Is_There_EI_Data+0x24>)
 800fa82:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800fa86:	4b06      	ldr	r3, [pc, #24]	; (800faa0 <Is_There_EI_Data+0x24>)
 800fa88:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d001      	beq.n	800fa94 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800fa90:	2301      	movs	r3, #1
 800fa92:	e000      	b.n	800fa96 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800fa94:	2300      	movs	r3, #0
	}
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr
 800faa0:	20004ca8 	.word	0x20004ca8

0800faa4 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800faaa:	4b15      	ldr	r3, [pc, #84]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800faac:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	b291      	uxth	r1, r2
 800fab4:	4a12      	ldr	r2, [pc, #72]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800fab6:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800faba:	461a      	mov	r2, r3
 800fabc:	4b10      	ldr	r3, [pc, #64]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800fabe:	5c9b      	ldrb	r3, [r3, r2]
 800fac0:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800fac2:	4b0f      	ldr	r3, [pc, #60]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800fac4:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800fac8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800facc:	d313      	bcc.n	800faf6 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800face:	4b0c      	ldr	r3, [pc, #48]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800fad0:	2200      	movs	r2, #0
 800fad2:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800fad6:	4b0a      	ldr	r3, [pc, #40]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800fad8:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800fadc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fae0:	d109      	bne.n	800faf6 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800fae2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800fae6:	2100      	movs	r1, #0
 800fae8:	4805      	ldr	r0, [pc, #20]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800faea:	f014 fe4d 	bl	8024788 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800faee:	4b04      	ldr	r3, [pc, #16]	; (800fb00 <Get_Eth_Byte+0x5c>)
 800faf0:	2200      	movs	r2, #0
 800faf2:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800faf6:	79fb      	ldrb	r3, [r7, #7]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	20004ca8 	.word	0x20004ca8

0800fb04 <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800fb16:	7afb      	ldrb	r3, [r7, #11]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb1e:	4619      	mov	r1, r3
 800fb20:	2036      	movs	r0, #54	; 0x36
 800fb22:	f010 feff 	bl	8020924 <pbuf_alloc>
 800fb26:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d01a      	beq.n	800fb64 <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 800fb2e:	7afb      	ldrb	r3, [r7, #11]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	461a      	mov	r2, r3
 800fb34:	68f9      	ldr	r1, [r7, #12]
 800fb36:	6938      	ldr	r0, [r7, #16]
 800fb38:	f011 fbd0 	bl	80212dc <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 800fb3c:	4b0b      	ldr	r3, [pc, #44]	; (800fb6c <Udp_Send_SigInfo+0x68>)
 800fb3e:	6818      	ldr	r0, [r3, #0]
 800fb40:	1d3a      	adds	r2, r7, #4
 800fb42:	f243 0339 	movw	r3, #12345	; 0x3039
 800fb46:	6939      	ldr	r1, [r7, #16]
 800fb48:	f011 ff70 	bl	8021a2c <udp_sendto>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800fb50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 800fb58:	4805      	ldr	r0, [pc, #20]	; (800fb70 <Udp_Send_SigInfo+0x6c>)
 800fb5a:	f014 ff99 	bl	8024a90 <puts>
		}
		pbuf_free(txBuf);
 800fb5e:	6938      	ldr	r0, [r7, #16]
 800fb60:	f011 f9c2 	bl	8020ee8 <pbuf_free>
	}
}
 800fb64:	bf00      	nop
 800fb66:	3718      	adds	r7, #24
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	20005328 	.word	0x20005328
 800fb70:	08028d2c 	.word	0x08028d2c

0800fb74 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b094      	sub	sp, #80	; 0x50
 800fb78:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800fb7a:	4b38      	ldr	r3, [pc, #224]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fb7c:	4a38      	ldr	r2, [pc, #224]	; (800fc60 <MX_CAN2_Init+0xec>)
 800fb7e:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800fb80:	4b36      	ldr	r3, [pc, #216]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fb82:	2212      	movs	r2, #18
 800fb84:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800fb86:	4b35      	ldr	r3, [pc, #212]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800fb8c:	4b33      	ldr	r3, [pc, #204]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fb8e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800fb92:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800fb94:	4b31      	ldr	r3, [pc, #196]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fb96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fb9a:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800fb9c:	4b2f      	ldr	r3, [pc, #188]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fb9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fba2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800fba4:	4b2d      	ldr	r3, [pc, #180]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fba6:	2200      	movs	r2, #0
 800fba8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800fbaa:	4b2c      	ldr	r3, [pc, #176]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fbac:	2200      	movs	r2, #0
 800fbae:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800fbb0:	4b2a      	ldr	r3, [pc, #168]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800fbb6:	4b29      	ldr	r3, [pc, #164]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fbb8:	2201      	movs	r2, #1
 800fbba:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800fbbc:	4b27      	ldr	r3, [pc, #156]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800fbc2:	4b26      	ldr	r3, [pc, #152]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800fbc8:	4824      	ldr	r0, [pc, #144]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fbca:	f007 feeb 	bl	80179a4 <HAL_CAN_Init>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d001      	beq.n	800fbd8 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800fbd4:	f006 f918 	bl	8015e08 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800fbdc:	2304      	movs	r3, #4
 800fbde:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800fbe4:	f242 0360 	movw	r3, #8288	; 0x2060
 800fbe8:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800fbea:	2300      	movs	r3, #0
 800fbec:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800fbee:	f242 0360 	movw	r3, #8288	; 0x2060
 800fbf2:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800fc00:	2302      	movs	r3, #2
 800fc02:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800fc04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc08:	4619      	mov	r1, r3
 800fc0a:	4814      	ldr	r0, [pc, #80]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fc0c:	f008 f810 	bl	8017c30 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800fc10:	2301      	movs	r3, #1
 800fc12:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800fc14:	2305      	movs	r3, #5
 800fc16:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800fc18:	2301      	movs	r3, #1
 800fc1a:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800fc1c:	f242 1320 	movw	r3, #8480	; 0x2120
 800fc20:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800fc22:	2300      	movs	r3, #0
 800fc24:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800fc26:	f242 1320 	movw	r3, #8480	; 0x2120
 800fc2a:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800fc30:	2301      	movs	r3, #1
 800fc32:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800fc34:	2301      	movs	r3, #1
 800fc36:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800fc38:	2302      	movs	r3, #2
 800fc3a:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800fc3c:	463b      	mov	r3, r7
 800fc3e:	4619      	mov	r1, r3
 800fc40:	4806      	ldr	r0, [pc, #24]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fc42:	f007 fff5 	bl	8017c30 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800fc46:	4805      	ldr	r0, [pc, #20]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fc48:	f008 f8de 	bl	8017e08 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800fc4c:	2110      	movs	r1, #16
 800fc4e:	4803      	ldr	r0, [pc, #12]	; (800fc5c <MX_CAN2_Init+0xe8>)
 800fc50:	f008 fb24 	bl	801829c <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800fc54:	bf00      	nop
 800fc56:	3750      	adds	r7, #80	; 0x50
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	20009be0 	.word	0x20009be0
 800fc60:	40006800 	.word	0x40006800

0800fc64 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b08a      	sub	sp, #40	; 0x28
 800fc68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800fc6a:	4b34      	ldr	r3, [pc, #208]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc6c:	4a34      	ldr	r2, [pc, #208]	; (800fd40 <MX_CAN3_Init+0xdc>)
 800fc6e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800fc70:	4b32      	ldr	r3, [pc, #200]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc72:	2205      	movs	r2, #5
 800fc74:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800fc76:	4b31      	ldr	r3, [pc, #196]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc78:	2200      	movs	r2, #0
 800fc7a:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800fc7c:	4b2f      	ldr	r3, [pc, #188]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc7e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800fc82:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800fc84:	4b2d      	ldr	r3, [pc, #180]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc86:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800fc8a:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800fc8c:	4b2b      	ldr	r3, [pc, #172]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800fc92:	4b2a      	ldr	r3, [pc, #168]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc94:	4a2a      	ldr	r2, [pc, #168]	; (800fd40 <MX_CAN3_Init+0xdc>)
 800fc96:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800fc98:	4b28      	ldr	r3, [pc, #160]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fc9a:	2212      	movs	r2, #18
 800fc9c:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800fc9e:	4b27      	ldr	r3, [pc, #156]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fca0:	2200      	movs	r2, #0
 800fca2:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800fca4:	4b25      	ldr	r3, [pc, #148]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fca6:	2200      	movs	r2, #0
 800fca8:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800fcaa:	4b24      	ldr	r3, [pc, #144]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fcb0:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800fcb2:	4b22      	ldr	r3, [pc, #136]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fcb8:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800fcba:	4b20      	ldr	r3, [pc, #128]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800fcc0:	4b1e      	ldr	r3, [pc, #120]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800fcc6:	4b1d      	ldr	r3, [pc, #116]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800fccc:	4b1b      	ldr	r3, [pc, #108]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcce:	2201      	movs	r2, #1
 800fcd0:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800fcd2:	4b1a      	ldr	r3, [pc, #104]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800fcd8:	4b18      	ldr	r3, [pc, #96]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800fcde:	4817      	ldr	r0, [pc, #92]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fce0:	f007 fe60 	bl	80179a4 <HAL_CAN_Init>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800fcea:	f006 f88d 	bl	8015e08 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800fcfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fcfe:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800fd00:	2300      	movs	r3, #0
 800fd02:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800fd04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd08:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800fd12:	2301      	movs	r3, #1
 800fd14:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800fd16:	2306      	movs	r3, #6
 800fd18:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800fd1a:	463b      	mov	r3, r7
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	4807      	ldr	r0, [pc, #28]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fd20:	f007 ff86 	bl	8017c30 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800fd24:	4805      	ldr	r0, [pc, #20]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fd26:	f008 f86f 	bl	8017e08 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800fd2a:	2102      	movs	r1, #2
 800fd2c:	4803      	ldr	r0, [pc, #12]	; (800fd3c <MX_CAN3_Init+0xd8>)
 800fd2e:	f008 fab5 	bl	801829c <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800fd32:	bf00      	nop
 800fd34:	3728      	adds	r7, #40	; 0x28
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	20009c44 	.word	0x20009c44
 800fd40:	40003400 	.word	0x40003400

0800fd44 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b08c      	sub	sp, #48	; 0x30
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd4c:	f107 031c 	add.w	r3, r7, #28
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	605a      	str	r2, [r3, #4]
 800fd56:	609a      	str	r2, [r3, #8]
 800fd58:	60da      	str	r2, [r3, #12]
 800fd5a:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a44      	ldr	r2, [pc, #272]	; (800fe74 <HAL_CAN_MspInit+0x130>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d144      	bne.n	800fdf0 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800fd66:	4b44      	ldr	r3, [pc, #272]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd6a:	4a43      	ldr	r2, [pc, #268]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd70:	6413      	str	r3, [r2, #64]	; 0x40
 800fd72:	4b41      	ldr	r3, [pc, #260]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fd7a:	61bb      	str	r3, [r7, #24]
 800fd7c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800fd7e:	4b3e      	ldr	r3, [pc, #248]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd82:	4a3d      	ldr	r2, [pc, #244]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fd88:	6413      	str	r3, [r2, #64]	; 0x40
 800fd8a:	4b3b      	ldr	r3, [pc, #236]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd92:	617b      	str	r3, [r7, #20]
 800fd94:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800fd96:	4b38      	ldr	r3, [pc, #224]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd9a:	4a37      	ldr	r2, [pc, #220]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fd9c:	f043 0302 	orr.w	r3, r3, #2
 800fda0:	6313      	str	r3, [r2, #48]	; 0x30
 800fda2:	4b35      	ldr	r3, [pc, #212]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda6:	f003 0302 	and.w	r3, r3, #2
 800fdaa:	613b      	str	r3, [r7, #16]
 800fdac:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800fdae:	2360      	movs	r3, #96	; 0x60
 800fdb0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800fdbe:	2309      	movs	r3, #9
 800fdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fdc2:	f107 031c 	add.w	r3, r7, #28
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	482c      	ldr	r0, [pc, #176]	; (800fe7c <HAL_CAN_MspInit+0x138>)
 800fdca:	f00a f8c7 	bl	8019f5c <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800fdce:	2200      	movs	r2, #0
 800fdd0:	2104      	movs	r1, #4
 800fdd2:	2040      	movs	r0, #64	; 0x40
 800fdd4:	f008 fd97 	bl	8018906 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800fdd8:	2040      	movs	r0, #64	; 0x40
 800fdda:	f008 fdb0 	bl	801893e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800fdde:	2201      	movs	r2, #1
 800fde0:	2104      	movs	r1, #4
 800fde2:	2041      	movs	r0, #65	; 0x41
 800fde4:	f008 fd8f 	bl	8018906 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800fde8:	2041      	movs	r0, #65	; 0x41
 800fdea:	f008 fda8 	bl	801893e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800fdee:	e03d      	b.n	800fe6c <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4a22      	ldr	r2, [pc, #136]	; (800fe80 <HAL_CAN_MspInit+0x13c>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d138      	bne.n	800fe6c <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800fdfa:	4b1f      	ldr	r3, [pc, #124]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfe:	4a1e      	ldr	r2, [pc, #120]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fe00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fe04:	6413      	str	r3, [r2, #64]	; 0x40
 800fe06:	4b1c      	ldr	r3, [pc, #112]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fe08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fe0e:	60fb      	str	r3, [r7, #12]
 800fe10:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800fe12:	4b19      	ldr	r3, [pc, #100]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fe14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe16:	4a18      	ldr	r2, [pc, #96]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fe18:	f043 0301 	orr.w	r3, r3, #1
 800fe1c:	6313      	str	r3, [r2, #48]	; 0x30
 800fe1e:	4b16      	ldr	r3, [pc, #88]	; (800fe78 <HAL_CAN_MspInit+0x134>)
 800fe20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe22:	f003 0301 	and.w	r3, r3, #1
 800fe26:	60bb      	str	r3, [r7, #8]
 800fe28:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800fe2a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800fe2e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe30:	2302      	movs	r3, #2
 800fe32:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe34:	2300      	movs	r3, #0
 800fe36:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe38:	2303      	movs	r3, #3
 800fe3a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800fe3c:	230b      	movs	r3, #11
 800fe3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe40:	f107 031c 	add.w	r3, r7, #28
 800fe44:	4619      	mov	r1, r3
 800fe46:	480f      	ldr	r0, [pc, #60]	; (800fe84 <HAL_CAN_MspInit+0x140>)
 800fe48:	f00a f888 	bl	8019f5c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	2100      	movs	r1, #0
 800fe50:	2069      	movs	r0, #105	; 0x69
 800fe52:	f008 fd58 	bl	8018906 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800fe56:	2069      	movs	r0, #105	; 0x69
 800fe58:	f008 fd71 	bl	801893e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	2100      	movs	r1, #0
 800fe60:	206a      	movs	r0, #106	; 0x6a
 800fe62:	f008 fd50 	bl	8018906 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800fe66:	206a      	movs	r0, #106	; 0x6a
 800fe68:	f008 fd69 	bl	801893e <HAL_NVIC_EnableIRQ>
}
 800fe6c:	bf00      	nop
 800fe6e:	3730      	adds	r7, #48	; 0x30
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	40006800 	.word	0x40006800
 800fe78:	40023800 	.word	0x40023800
 800fe7c:	40020400 	.word	0x40020400
 800fe80:	40003400 	.word	0x40003400
 800fe84:	40020000 	.word	0x40020000

0800fe88 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	4603      	mov	r3, r0
 800fe90:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800fe92:	2300      	movs	r3, #0
 800fe94:	827b      	strh	r3, [r7, #18]
	uint16_t uc_size = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	82fb      	strh	r3, [r7, #22]



	switch(EI_data.ProtocolType)
 800fe9a:	4b9e      	ldr	r3, [pc, #632]	; (8010114 <TransmitCanPkt+0x28c>)
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	2b03      	cmp	r3, #3
 800fea2:	f200 8254 	bhi.w	801034e <TransmitCanPkt+0x4c6>
 800fea6:	a201      	add	r2, pc, #4	; (adr r2, 800feac <TransmitCanPkt+0x24>)
 800fea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feac:	0800febd 	.word	0x0800febd
 800feb0:	0801002f 	.word	0x0801002f
 800feb4:	08010183 	.word	0x08010183
 800feb8:	080102c3 	.word	0x080102c3
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800febc:	4b96      	ldr	r3, [pc, #600]	; (8010118 <TransmitCanPkt+0x290>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	0a1b      	lsrs	r3, r3, #8
 800fec2:	f003 0301 	and.w	r3, r3, #1
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d003      	beq.n	800fed2 <TransmitCanPkt+0x4a>
		{
			printf("Stopping CAN Transmission\n");
 800feca:	4894      	ldr	r0, [pc, #592]	; (801011c <TransmitCanPkt+0x294>)
 800fecc:	f014 fde0 	bl	8024a90 <puts>
			return;
 800fed0:	e23d      	b.n	801034e <TransmitCanPkt+0x4c6>
		}

		switch((int)Ken_idetifier)
 800fed2:	88fb      	ldrh	r3, [r7, #6]
 800fed4:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fed8:	f300 80a3 	bgt.w	8010022 <TransmitCanPkt+0x19a>
 800fedc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fee0:	dc0d      	bgt.n	800fefe <TransmitCanPkt+0x76>
 800fee2:	f240 1219 	movw	r2, #281	; 0x119
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d022      	beq.n	800ff30 <TransmitCanPkt+0xa8>
 800feea:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800feee:	f340 8098 	ble.w	8010022 <TransmitCanPkt+0x19a>
 800fef2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	f200 8093 	bhi.w	8010022 <TransmitCanPkt+0x19a>
 800fefc:	e034      	b.n	800ff68 <TransmitCanPkt+0xe0>
 800fefe:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800ff02:	2b07      	cmp	r3, #7
 800ff04:	f200 808d 	bhi.w	8010022 <TransmitCanPkt+0x19a>
 800ff08:	a201      	add	r2, pc, #4	; (adr r2, 800ff10 <TransmitCanPkt+0x88>)
 800ff0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff0e:	bf00      	nop
 800ff10:	0800ff8d 	.word	0x0800ff8d
 800ff14:	0800ff8d 	.word	0x0800ff8d
 800ff18:	0800ffb7 	.word	0x0800ffb7
 800ff1c:	0800ffb7 	.word	0x0800ffb7
 800ff20:	0800ffdb 	.word	0x0800ffdb
 800ff24:	08010023 	.word	0x08010023
 800ff28:	0800ffff 	.word	0x0800ffff
 800ff2c:	0800ffff 	.word	0x0800ffff
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800ff30:	4b78      	ldr	r3, [pc, #480]	; (8010114 <TransmitCanPkt+0x28c>)
 800ff32:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	011b      	lsls	r3, r3, #4
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	4b78      	ldr	r3, [pc, #480]	; (8010120 <TransmitCanPkt+0x298>)
 800ff3e:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800ff40:	4b77      	ldr	r3, [pc, #476]	; (8010120 <TransmitCanPkt+0x298>)
 800ff42:	60fb      	str	r3, [r7, #12]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800ff44:	4b76      	ldr	r3, [pc, #472]	; (8010120 <TransmitCanPkt+0x298>)
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	3302      	adds	r3, #2
 800ff4a:	82fb      	strh	r3, [r7, #22]
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800ff4c:	8afb      	ldrh	r3, [r7, #22]
 800ff4e:	88fa      	ldrh	r2, [r7, #6]
 800ff50:	4619      	mov	r1, r3
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	f000 fa22 	bl	801039c <sendCanPkts>
			if(Debug_flag == 1)
 800ff58:	4b72      	ldr	r3, [pc, #456]	; (8010124 <TransmitCanPkt+0x29c>)
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d162      	bne.n	8010026 <TransmitCanPkt+0x19e>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800ff60:	4871      	ldr	r0, [pc, #452]	; (8010128 <TransmitCanPkt+0x2a0>)
 800ff62:	f014 fd95 	bl	8024a90 <puts>
			}
			break;
 800ff66:	e05e      	b.n	8010026 <TransmitCanPkt+0x19e>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800ff68:	4b70      	ldr	r3, [pc, #448]	; (801012c <TransmitCanPkt+0x2a4>)
 800ff6a:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800ff6c:	2316      	movs	r3, #22
 800ff6e:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800ff70:	4b6c      	ldr	r3, [pc, #432]	; (8010124 <TransmitCanPkt+0x29c>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d102      	bne.n	800ff7e <TransmitCanPkt+0xf6>
			{
				printf("\nHealth 2 MIE\n");
 800ff78:	486d      	ldr	r0, [pc, #436]	; (8010130 <TransmitCanPkt+0x2a8>)
 800ff7a:	f014 fd89 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800ff7e:	8afb      	ldrh	r3, [r7, #22]
 800ff80:	88fa      	ldrh	r2, [r7, #6]
 800ff82:	4619      	mov	r1, r3
 800ff84:	68f8      	ldr	r0, [r7, #12]
 800ff86:	f000 fa09 	bl	801039c <sendCanPkts>
			break;
 800ff8a:	e04f      	b.n	801002c <TransmitCanPkt+0x1a4>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800ff8c:	4b69      	ldr	r3, [pc, #420]	; (8010134 <TransmitCanPkt+0x2ac>)
 800ff8e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800ff90:	2318      	movs	r3, #24
 800ff92:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800ff94:	8afb      	ldrh	r3, [r7, #22]
 800ff96:	88fa      	ldrh	r2, [r7, #6]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f000 f9fe 	bl	801039c <sendCanPkts>
			if(Debug_flag == 1)
 800ffa0:	4b60      	ldr	r3, [pc, #384]	; (8010124 <TransmitCanPkt+0x29c>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d140      	bne.n	801002a <TransmitCanPkt+0x1a2>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800ffa8:	4b62      	ldr	r3, [pc, #392]	; (8010134 <TransmitCanPkt+0x2ac>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	4619      	mov	r1, r3
 800ffae:	4862      	ldr	r0, [pc, #392]	; (8010138 <TransmitCanPkt+0x2b0>)
 800ffb0:	f014 fcd2 	bl	8024958 <iprintf>
			}
			break;
 800ffb4:	e039      	b.n	801002a <TransmitCanPkt+0x1a2>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800ffb6:	4b61      	ldr	r3, [pc, #388]	; (801013c <TransmitCanPkt+0x2b4>)
 800ffb8:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800ffba:	2346      	movs	r3, #70	; 0x46
 800ffbc:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800ffbe:	4b59      	ldr	r3, [pc, #356]	; (8010124 <TransmitCanPkt+0x29c>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d102      	bne.n	800ffcc <TransmitCanPkt+0x144>
			{
				printf("\nSending V-Message 2-O\n");
 800ffc6:	485e      	ldr	r0, [pc, #376]	; (8010140 <TransmitCanPkt+0x2b8>)
 800ffc8:	f014 fd62 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800ffcc:	8afb      	ldrh	r3, [r7, #22]
 800ffce:	88fa      	ldrh	r2, [r7, #6]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	f000 f9e2 	bl	801039c <sendCanPkts>
			break;
 800ffd8:	e028      	b.n	801002c <TransmitCanPkt+0x1a4>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800ffda:	4b4f      	ldr	r3, [pc, #316]	; (8010118 <TransmitCanPkt+0x290>)
 800ffdc:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800ffde:	2308      	movs	r3, #8
 800ffe0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800ffe2:	4b50      	ldr	r3, [pc, #320]	; (8010124 <TransmitCanPkt+0x29c>)
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d102      	bne.n	800fff0 <TransmitCanPkt+0x168>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800ffea:	4856      	ldr	r0, [pc, #344]	; (8010144 <TransmitCanPkt+0x2bc>)
 800ffec:	f014 fd50 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fff0:	8afb      	ldrh	r3, [r7, #22]
 800fff2:	88fa      	ldrh	r2, [r7, #6]
 800fff4:	4619      	mov	r1, r3
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	f000 f9d0 	bl	801039c <sendCanPkts>
			break;
 800fffc:	e016      	b.n	801002c <TransmitCanPkt+0x1a4>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800fffe:	4b52      	ldr	r3, [pc, #328]	; (8010148 <TransmitCanPkt+0x2c0>)
 8010000:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(RELAYS_t);
 8010002:	2314      	movs	r3, #20
 8010004:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010006:	4b47      	ldr	r3, [pc, #284]	; (8010124 <TransmitCanPkt+0x29c>)
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d102      	bne.n	8010014 <TransmitCanPkt+0x18c>
			{
				printf("Sending Relays-O\n");
 801000e:	484f      	ldr	r0, [pc, #316]	; (801014c <TransmitCanPkt+0x2c4>)
 8010010:	f014 fd3e 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010014:	8afb      	ldrh	r3, [r7, #22]
 8010016:	88fa      	ldrh	r2, [r7, #6]
 8010018:	4619      	mov	r1, r3
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f000 f9be 	bl	801039c <sendCanPkts>
			break;
 8010020:	e004      	b.n	801002c <TransmitCanPkt+0x1a4>
		default:
			break;
 8010022:	bf00      	nop
 8010024:	e193      	b.n	801034e <TransmitCanPkt+0x4c6>
			break;
 8010026:	bf00      	nop
 8010028:	e191      	b.n	801034e <TransmitCanPkt+0x4c6>
			break;
 801002a:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 801002c:	e18f      	b.n	801034e <TransmitCanPkt+0x4c6>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 801002e:	88fb      	ldrh	r3, [r7, #6]
 8010030:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010034:	f300 8186 	bgt.w	8010344 <TransmitCanPkt+0x4bc>
 8010038:	f240 2207 	movw	r2, #519	; 0x207
 801003c:	4293      	cmp	r3, r2
 801003e:	da3d      	bge.n	80100bc <TransmitCanPkt+0x234>
 8010040:	f240 2205 	movw	r2, #517	; 0x205
 8010044:	4293      	cmp	r3, r2
 8010046:	f000 808d 	beq.w	8010164 <TransmitCanPkt+0x2dc>
 801004a:	f240 2205 	movw	r2, #517	; 0x205
 801004e:	4293      	cmp	r3, r2
 8010050:	f300 8178 	bgt.w	8010344 <TransmitCanPkt+0x4bc>
 8010054:	f240 1219 	movw	r2, #281	; 0x119
 8010058:	4293      	cmp	r3, r2
 801005a:	d009      	beq.n	8010070 <TransmitCanPkt+0x1e8>
 801005c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8010060:	f340 8170 	ble.w	8010344 <TransmitCanPkt+0x4bc>
 8010064:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010068:	2b01      	cmp	r3, #1
 801006a:	f200 816b 	bhi.w	8010344 <TransmitCanPkt+0x4bc>
 801006e:	e013      	b.n	8010098 <TransmitCanPkt+0x210>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 8010070:	4b37      	ldr	r3, [pc, #220]	; (8010150 <TransmitCanPkt+0x2c8>)
 8010072:	60fb      	str	r3, [r7, #12]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 8010074:	4b36      	ldr	r3, [pc, #216]	; (8010150 <TransmitCanPkt+0x2c8>)
 8010076:	881b      	ldrh	r3, [r3, #0]
 8010078:	3302      	adds	r3, #2
 801007a:	82fb      	strh	r3, [r7, #22]

			if(Debug_flag == 1)
 801007c:	4b29      	ldr	r3, [pc, #164]	; (8010124 <TransmitCanPkt+0x29c>)
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	2b01      	cmp	r3, #1
 8010082:	d102      	bne.n	801008a <TransmitCanPkt+0x202>
			{
				printf("Sending Signals 2 MIE\n");
 8010084:	4833      	ldr	r0, [pc, #204]	; (8010154 <TransmitCanPkt+0x2cc>)
 8010086:	f014 fd03 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801008a:	8afb      	ldrh	r3, [r7, #22]
 801008c:	88fa      	ldrh	r2, [r7, #6]
 801008e:	4619      	mov	r1, r3
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f000 f983 	bl	801039c <sendCanPkts>
			break;
 8010096:	e073      	b.n	8010180 <TransmitCanPkt+0x2f8>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 8010098:	4b2f      	ldr	r3, [pc, #188]	; (8010158 <TransmitCanPkt+0x2d0>)
 801009a:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 801009c:	2304      	movs	r3, #4
 801009e:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80100a0:	4b20      	ldr	r3, [pc, #128]	; (8010124 <TransmitCanPkt+0x29c>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d102      	bne.n	80100ae <TransmitCanPkt+0x226>
			{
				printf("Sending Signals 2 MIE\n");
 80100a8:	482a      	ldr	r0, [pc, #168]	; (8010154 <TransmitCanPkt+0x2cc>)
 80100aa:	f014 fcf1 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80100ae:	8afb      	ldrh	r3, [r7, #22]
 80100b0:	88fa      	ldrh	r2, [r7, #6]
 80100b2:	4619      	mov	r1, r3
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f000 f971 	bl	801039c <sendCanPkts>
			break;
 80100ba:	e061      	b.n	8010180 <TransmitCanPkt+0x2f8>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 80100bc:	4b27      	ldr	r3, [pc, #156]	; (801015c <TransmitCanPkt+0x2d4>)
 80100be:	60fb      	str	r3, [r7, #12]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 80100c0:	4b14      	ldr	r3, [pc, #80]	; (8010114 <TransmitCanPkt+0x28c>)
 80100c2:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80100c6:	f003 0307 	and.w	r3, r3, #7
 80100ca:	82fb      	strh	r3, [r7, #22]
			if (uc_size != 0)
 80100cc:	8afb      	ldrh	r3, [r7, #22]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d007      	beq.n	80100e2 <TransmitCanPkt+0x25a>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 80100d2:	4b10      	ldr	r3, [pc, #64]	; (8010114 <TransmitCanPkt+0x28c>)
 80100d4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80100d8:	08db      	lsrs	r3, r3, #3
 80100da:	b29b      	uxth	r3, r3
 80100dc:	3301      	adds	r3, #1
 80100de:	82fb      	strh	r3, [r7, #22]
 80100e0:	e004      	b.n	80100ec <TransmitCanPkt+0x264>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 80100e2:	4b0c      	ldr	r3, [pc, #48]	; (8010114 <TransmitCanPkt+0x28c>)
 80100e4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80100e8:	08db      	lsrs	r3, r3, #3
 80100ea:	82fb      	strh	r3, [r7, #22]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 80100ec:	4a1b      	ldr	r2, [pc, #108]	; (801015c <TransmitCanPkt+0x2d4>)
 80100ee:	8afb      	ldrh	r3, [r7, #22]
 80100f0:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 80100f2:	8afb      	ldrh	r3, [r7, #22]
 80100f4:	3304      	adds	r3, #4
 80100f6:	82fb      	strh	r3, [r7, #22]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 80100f8:	4b0a      	ldr	r3, [pc, #40]	; (8010124 <TransmitCanPkt+0x29c>)
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d102      	bne.n	8010106 <TransmitCanPkt+0x27e>
			{
				printf("Sending Relays 2 Other\n");
 8010100:	4817      	ldr	r0, [pc, #92]	; (8010160 <TransmitCanPkt+0x2d8>)
 8010102:	f014 fcc5 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010106:	8afb      	ldrh	r3, [r7, #22]
 8010108:	88fa      	ldrh	r2, [r7, #6]
 801010a:	4619      	mov	r1, r3
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f000 f945 	bl	801039c <sendCanPkts>
			break;
 8010112:	e035      	b.n	8010180 <TransmitCanPkt+0x2f8>
 8010114:	20000304 	.word	0x20000304
 8010118:	2000198c 	.word	0x2000198c
 801011c:	08028d40 	.word	0x08028d40
 8010120:	20001114 	.word	0x20001114
 8010124:	2000065d 	.word	0x2000065d
 8010128:	08028d5c 	.word	0x08028d5c
 801012c:	20001994 	.word	0x20001994
 8010130:	08028d74 	.word	0x08028d74
 8010134:	20001884 	.word	0x20001884
 8010138:	08028d84 	.word	0x08028d84
 801013c:	200018b4 	.word	0x200018b4
 8010140:	08028d90 	.word	0x08028d90
 8010144:	08028da8 	.word	0x08028da8
 8010148:	20002040 	.word	0x20002040
 801014c:	08028dcc 	.word	0x08028dcc
 8010150:	2000359c 	.word	0x2000359c
 8010154:	08028de0 	.word	0x08028de0
 8010158:	20003574 	.word	0x20003574
 801015c:	200037a0 	.word	0x200037a0
 8010160:	08028df8 	.word	0x08028df8

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 8010164:	4b7b      	ldr	r3, [pc, #492]	; (8010354 <TransmitCanPkt+0x4cc>)
 8010166:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 8010168:	2308      	movs	r3, #8
 801016a:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 801016c:	487a      	ldr	r0, [pc, #488]	; (8010358 <TransmitCanPkt+0x4d0>)
 801016e:	f014 fc8f 	bl	8024a90 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010172:	8afb      	ldrh	r3, [r7, #22]
 8010174:	88fa      	ldrh	r2, [r7, #6]
 8010176:	4619      	mov	r1, r3
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f000 f90f 	bl	801039c <sendCanPkts>
			break;
 801017e:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 8010180:	e0e0      	b.n	8010344 <TransmitCanPkt+0x4bc>

	case MEDHA:
	{

		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 8010182:	88fb      	ldrh	r3, [r7, #6]
 8010184:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010188:	f300 80de 	bgt.w	8010348 <TransmitCanPkt+0x4c0>
 801018c:	f240 2207 	movw	r2, #519	; 0x207
 8010190:	4293      	cmp	r3, r2
 8010192:	f280 8082 	bge.w	801029a <TransmitCanPkt+0x412>
 8010196:	f240 2205 	movw	r2, #517	; 0x205
 801019a:	4293      	cmp	r3, r2
 801019c:	d06f      	beq.n	801027e <TransmitCanPkt+0x3f6>
 801019e:	f240 2205 	movw	r2, #517	; 0x205
 80101a2:	4293      	cmp	r3, r2
 80101a4:	f300 80d0 	bgt.w	8010348 <TransmitCanPkt+0x4c0>
 80101a8:	f240 2202 	movw	r2, #514	; 0x202
 80101ac:	4293      	cmp	r3, r2
 80101ae:	f300 80cb 	bgt.w	8010348 <TransmitCanPkt+0x4c0>
 80101b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101b6:	dc3e      	bgt.n	8010236 <TransmitCanPkt+0x3ae>
 80101b8:	f240 1219 	movw	r2, #281	; 0x119
 80101bc:	4293      	cmp	r3, r2
 80101be:	d009      	beq.n	80101d4 <TransmitCanPkt+0x34c>
 80101c0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80101c4:	f340 80c0 	ble.w	8010348 <TransmitCanPkt+0x4c0>
 80101c8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	f200 80bb 	bhi.w	8010348 <TransmitCanPkt+0x4c0>
 80101d2:	e042      	b.n	801025a <TransmitCanPkt+0x3d2>
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 80101d4:	4b61      	ldr	r3, [pc, #388]	; (801035c <TransmitCanPkt+0x4d4>)
 80101d6:	60fb      	str	r3, [r7, #12]

			uint16_t Length =  EI_data.Medha_Prms_st.NoofRelays%8;
 80101d8:	4b61      	ldr	r3, [pc, #388]	; (8010360 <TransmitCanPkt+0x4d8>)
 80101da:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80101de:	b29b      	uxth	r3, r3
 80101e0:	f003 0307 	and.w	r3, r3, #7
 80101e4:	82bb      	strh	r3, [r7, #20]

			if(Length != 0)
 80101e6:	8abb      	ldrh	r3, [r7, #20]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d007      	beq.n	80101fc <TransmitCanPkt+0x374>
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8) + 1;
 80101ec:	4b5c      	ldr	r3, [pc, #368]	; (8010360 <TransmitCanPkt+0x4d8>)
 80101ee:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80101f2:	08db      	lsrs	r3, r3, #3
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	3301      	adds	r3, #1
 80101f8:	82bb      	strh	r3, [r7, #20]
 80101fa:	e004      	b.n	8010206 <TransmitCanPkt+0x37e>
			}
			else
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8);
 80101fc:	4b58      	ldr	r3, [pc, #352]	; (8010360 <TransmitCanPkt+0x4d8>)
 80101fe:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8010202:	08db      	lsrs	r3, r3, #3
 8010204:	82bb      	strh	r3, [r7, #20]
			}

			Medha_Relay_Sts_st.ActualDataBytes =  Length;
 8010206:	4a55      	ldr	r2, [pc, #340]	; (801035c <TransmitCanPkt+0x4d4>)
 8010208:	8abb      	ldrh	r3, [r7, #20]
 801020a:	8013      	strh	r3, [r2, #0]
			uc_size =(Length + sizeof(Length)); /* +2 is by Considering */
 801020c:	8abb      	ldrh	r3, [r7, #20]
 801020e:	3302      	adds	r3, #2
 8010210:	82fb      	strh	r3, [r7, #22]

			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010212:	8afb      	ldrh	r3, [r7, #22]
 8010214:	88fa      	ldrh	r2, [r7, #6]
 8010216:	4619      	mov	r1, r3
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f000 f8bf 	bl	801039c <sendCanPkts>
			if(Debug_flag == 1)
 801021e:	4b51      	ldr	r3, [pc, #324]	; (8010364 <TransmitCanPkt+0x4dc>)
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	2b01      	cmp	r3, #1
 8010224:	d14b      	bne.n	80102be <TransmitCanPkt+0x436>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 8010226:	f007 fb8d 	bl	8017944 <HAL_GetTick>
 801022a:	4603      	mov	r3, r0
 801022c:	4619      	mov	r1, r3
 801022e:	484e      	ldr	r0, [pc, #312]	; (8010368 <TransmitCanPkt+0x4e0>)
 8010230:	f014 fb92 	bl	8024958 <iprintf>
			}
			break;
 8010234:	e043      	b.n	80102be <TransmitCanPkt+0x436>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 8010236:	4b4d      	ldr	r3, [pc, #308]	; (801036c <TransmitCanPkt+0x4e4>)
 8010238:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 801023a:	2308      	movs	r3, #8
 801023c:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 801023e:	4b49      	ldr	r3, [pc, #292]	; (8010364 <TransmitCanPkt+0x4dc>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d102      	bne.n	801024c <TransmitCanPkt+0x3c4>
			{
				printf("\nSending_2_O\n");
 8010246:	484a      	ldr	r0, [pc, #296]	; (8010370 <TransmitCanPkt+0x4e8>)
 8010248:	f014 fc22 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801024c:	8afb      	ldrh	r3, [r7, #22]
 801024e:	88fa      	ldrh	r2, [r7, #6]
 8010250:	4619      	mov	r1, r3
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f000 f8a2 	bl	801039c <sendCanPkts>
			break;
 8010258:	e032      	b.n	80102c0 <TransmitCanPkt+0x438>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 801025a:	4b46      	ldr	r3, [pc, #280]	; (8010374 <TransmitCanPkt+0x4ec>)
 801025c:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 801025e:	2316      	movs	r3, #22
 8010260:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010262:	4b40      	ldr	r3, [pc, #256]	; (8010364 <TransmitCanPkt+0x4dc>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d102      	bne.n	8010270 <TransmitCanPkt+0x3e8>
			{
				printf("\nHealth 2 MIE\n");
 801026a:	4843      	ldr	r0, [pc, #268]	; (8010378 <TransmitCanPkt+0x4f0>)
 801026c:	f014 fc10 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010270:	8afb      	ldrh	r3, [r7, #22]
 8010272:	88fa      	ldrh	r2, [r7, #6]
 8010274:	4619      	mov	r1, r3
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f000 f890 	bl	801039c <sendCanPkts>
			break;
 801027c:	e020      	b.n	80102c0 <TransmitCanPkt+0x438>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 801027e:	4b3f      	ldr	r3, [pc, #252]	; (801037c <TransmitCanPkt+0x4f4>)
 8010280:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 8010282:	2304      	movs	r3, #4
 8010284:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 8010286:	4834      	ldr	r0, [pc, #208]	; (8010358 <TransmitCanPkt+0x4d0>)
 8010288:	f014 fc02 	bl	8024a90 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801028c:	8afb      	ldrh	r3, [r7, #22]
 801028e:	88fa      	ldrh	r2, [r7, #6]
 8010290:	4619      	mov	r1, r3
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f000 f882 	bl	801039c <sendCanPkts>
			break;
 8010298:	e012      	b.n	80102c0 <TransmitCanPkt+0x438>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 801029a:	4b39      	ldr	r3, [pc, #228]	; (8010380 <TransmitCanPkt+0x4f8>)
 801029c:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 801029e:	2384      	movs	r3, #132	; 0x84
 80102a0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80102a2:	4b30      	ldr	r3, [pc, #192]	; (8010364 <TransmitCanPkt+0x4dc>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d102      	bne.n	80102b0 <TransmitCanPkt+0x428>
			{
				printf("\nRelay Data 2-O\n");
 80102aa:	4836      	ldr	r0, [pc, #216]	; (8010384 <TransmitCanPkt+0x4fc>)
 80102ac:	f014 fbf0 	bl	8024a90 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80102b0:	8afb      	ldrh	r3, [r7, #22]
 80102b2:	88fa      	ldrh	r2, [r7, #6]
 80102b4:	4619      	mov	r1, r3
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f000 f870 	bl	801039c <sendCanPkts>
			break;
 80102bc:	e000      	b.n	80102c0 <TransmitCanPkt+0x438>
			break;
 80102be:	bf00      	nop
		}

		break;
 80102c0:	e042      	b.n	8010348 <TransmitCanPkt+0x4c0>
		/* _____________________________ MEDHA ________________________________________ */

	}
	case KYOSAN:
	{
		switch((int)Ken_idetifier)
 80102c2:	88fb      	ldrh	r3, [r7, #6]
 80102c4:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80102c8:	dc40      	bgt.n	801034c <TransmitCanPkt+0x4c4>
 80102ca:	f240 2207 	movw	r2, #519	; 0x207
 80102ce:	4293      	cmp	r3, r2
 80102d0:	da1a      	bge.n	8010308 <TransmitCanPkt+0x480>
 80102d2:	f240 1219 	movw	r2, #281	; 0x119
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d004      	beq.n	80102e4 <TransmitCanPkt+0x45c>
 80102da:	f240 2205 	movw	r2, #517	; 0x205
 80102de:	4293      	cmp	r3, r2
 80102e0:	d020      	beq.n	8010324 <TransmitCanPkt+0x49c>
			uc_size = sizeof(KYOSAN_FAULT_INJECTION_t);
			printf("\nSending Fault Injection data 2-O\n");
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
			break;
		}
		break;
 80102e2:	e033      	b.n	801034c <TransmitCanPkt+0x4c4>
			pp_ptr = &Kyosan_FinalRelays.Relays;
 80102e4:	4b28      	ldr	r3, [pc, #160]	; (8010388 <TransmitCanPkt+0x500>)
 80102e6:	60fb      	str	r3, [r7, #12]
			uc_size =(sizeof(Kyosan_FinalRelays.Relays) + 2); /* +2 is by Considering */
 80102e8:	233e      	movs	r3, #62	; 0x3e
 80102ea:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80102ec:	8afb      	ldrh	r3, [r7, #22]
 80102ee:	88fa      	ldrh	r2, [r7, #6]
 80102f0:	4619      	mov	r1, r3
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f000 f852 	bl	801039c <sendCanPkts>
			if(Debug_flag == 1)
 80102f8:	4b1a      	ldr	r3, [pc, #104]	; (8010364 <TransmitCanPkt+0x4dc>)
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d11f      	bne.n	8010340 <TransmitCanPkt+0x4b8>
				printf("SENT SIGNAL DATA TO MIE\n");
 8010300:	4822      	ldr	r0, [pc, #136]	; (801038c <TransmitCanPkt+0x504>)
 8010302:	f014 fbc5 	bl	8024a90 <puts>
			break;
 8010306:	e01b      	b.n	8010340 <TransmitCanPkt+0x4b8>
			pp_ptr = &Kyosan_SelfRelays;
 8010308:	4b21      	ldr	r3, [pc, #132]	; (8010390 <TransmitCanPkt+0x508>)
 801030a:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_RELAYS_t);
 801030c:	2340      	movs	r3, #64	; 0x40
 801030e:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Relays 2-O\n");
 8010310:	4820      	ldr	r0, [pc, #128]	; (8010394 <TransmitCanPkt+0x50c>)
 8010312:	f014 fbbd 	bl	8024a90 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010316:	8afb      	ldrh	r3, [r7, #22]
 8010318:	88fa      	ldrh	r2, [r7, #6]
 801031a:	4619      	mov	r1, r3
 801031c:	68f8      	ldr	r0, [r7, #12]
 801031e:	f000 f83d 	bl	801039c <sendCanPkts>
			break;
 8010322:	e00e      	b.n	8010342 <TransmitCanPkt+0x4ba>
			pp_ptr = &KyosanFaultInjection_st;
 8010324:	4b1c      	ldr	r3, [pc, #112]	; (8010398 <TransmitCanPkt+0x510>)
 8010326:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_FAULT_INJECTION_t);
 8010328:	2308      	movs	r3, #8
 801032a:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 801032c:	480a      	ldr	r0, [pc, #40]	; (8010358 <TransmitCanPkt+0x4d0>)
 801032e:	f014 fbaf 	bl	8024a90 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010332:	8afb      	ldrh	r3, [r7, #22]
 8010334:	88fa      	ldrh	r2, [r7, #6]
 8010336:	4619      	mov	r1, r3
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f000 f82f 	bl	801039c <sendCanPkts>
			break;
 801033e:	e000      	b.n	8010342 <TransmitCanPkt+0x4ba>
			break;
 8010340:	bf00      	nop
		break;
 8010342:	e003      	b.n	801034c <TransmitCanPkt+0x4c4>
		break; /* case SIEMENS: break */
 8010344:	bf00      	nop
 8010346:	e002      	b.n	801034e <TransmitCanPkt+0x4c6>
		break;
 8010348:	bf00      	nop
 801034a:	e000      	b.n	801034e <TransmitCanPkt+0x4c6>
		break;
 801034c:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 801034e:	3718      	adds	r7, #24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	2000356c 	.word	0x2000356c
 8010358:	08028da8 	.word	0x08028da8
 801035c:	200026c0 	.word	0x200026c0
 8010360:	20000304 	.word	0x20000304
 8010364:	2000065d 	.word	0x2000065d
 8010368:	08028e10 	.word	0x08028e10
 801036c:	20002704 	.word	0x20002704
 8010370:	08028e34 	.word	0x08028e34
 8010374:	20001994 	.word	0x20001994
 8010378:	08028d74 	.word	0x08028d74
 801037c:	20002700 	.word	0x20002700
 8010380:	2000271c 	.word	0x2000271c
 8010384:	08028e44 	.word	0x08028e44
 8010388:	20009e52 	.word	0x20009e52
 801038c:	08028d5c 	.word	0x08028d5c
 8010390:	20009d90 	.word	0x20009d90
 8010394:	08028e54 	.word	0x08028e54
 8010398:	20009d74 	.word	0x20009d74

0801039c <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b088      	sub	sp, #32
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	4613      	mov	r3, r2
 80103a8:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	61fb      	str	r3, [r7, #28]
 80103ae:	2300      	movs	r3, #0
 80103b0:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	617b      	str	r3, [r7, #20]
	while(j > 0)
 80103b6:	e019      	b.n	80103ec <sendCanPkts+0x50>
	{
		if(j < 7)
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	2b06      	cmp	r3, #6
 80103bc:	dc07      	bgt.n	80103ce <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 80103be:	88f8      	ldrh	r0, [r7, #6]
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	1c5a      	adds	r2, r3, #1
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	6979      	ldr	r1, [r7, #20]
 80103c8:	f000 f818 	bl	80103fc <CAN_transmit>
 80103cc:	e005      	b.n	80103da <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 80103ce:	88f8      	ldrh	r0, [r7, #6]
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	2208      	movs	r2, #8
 80103d4:	6979      	ldr	r1, [r7, #20]
 80103d6:	f000 f811 	bl	80103fc <CAN_transmit>
		}
		cptr += 7;
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	3307      	adds	r3, #7
 80103de:	617b      	str	r3, [r7, #20]
		j-=7;
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	3b07      	subs	r3, #7
 80103e4:	61fb      	str	r3, [r7, #28]
		seqNo++;
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	3301      	adds	r3, #1
 80103ea:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	dce2      	bgt.n	80103b8 <sendCanPkts+0x1c>
	}
}
 80103f2:	bf00      	nop
 80103f4:	bf00      	nop
 80103f6:	3720      	adds	r7, #32
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b088      	sub	sp, #32
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
 8010408:	603b      	str	r3, [r7, #0]
	char i=0;
 801040a:	2300      	movs	r3, #0
 801040c:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 801040e:	f007 fa99 	bl	8017944 <HAL_GetTick>
 8010412:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	b2da      	uxtb	r2, r3
 8010418:	4b4d      	ldr	r3, [pc, #308]	; (8010550 <CAN_transmit+0x154>)
 801041a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 801041c:	2300      	movs	r3, #0
 801041e:	77fb      	strb	r3, [r7, #31]
 8010420:	e00a      	b.n	8010438 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 8010422:	7ffb      	ldrb	r3, [r7, #31]
 8010424:	68ba      	ldr	r2, [r7, #8]
 8010426:	441a      	add	r2, r3
 8010428:	7ffb      	ldrb	r3, [r7, #31]
 801042a:	3301      	adds	r3, #1
 801042c:	7811      	ldrb	r1, [r2, #0]
 801042e:	4a48      	ldr	r2, [pc, #288]	; (8010550 <CAN_transmit+0x154>)
 8010430:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 8010432:	7ffb      	ldrb	r3, [r7, #31]
 8010434:	3301      	adds	r3, #1
 8010436:	77fb      	strb	r3, [r7, #31]
 8010438:	7ffa      	ldrb	r2, [r7, #31]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	3b01      	subs	r3, #1
 801043e:	429a      	cmp	r2, r3
 8010440:	dbef      	blt.n	8010422 <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010448:	da3b      	bge.n	80104c2 <CAN_transmit+0xc6>
	{
		while(len!=0)
 801044a:	e036      	b.n	80104ba <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 801044c:	4b41      	ldr	r3, [pc, #260]	; (8010554 <CAN_transmit+0x158>)
 801044e:	2200      	movs	r2, #0
 8010450:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	4a3f      	ldr	r2, [pc, #252]	; (8010554 <CAN_transmit+0x158>)
 8010456:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 8010458:	4b3e      	ldr	r3, [pc, #248]	; (8010554 <CAN_transmit+0x158>)
 801045a:	2200      	movs	r2, #0
 801045c:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a3c      	ldr	r2, [pc, #240]	; (8010554 <CAN_transmit+0x158>)
 8010462:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8010464:	2300      	movs	r3, #0
 8010466:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 8010468:	4b3b      	ldr	r3, [pc, #236]	; (8010558 <CAN_transmit+0x15c>)
 801046a:	4a39      	ldr	r2, [pc, #228]	; (8010550 <CAN_transmit+0x154>)
 801046c:	4939      	ldr	r1, [pc, #228]	; (8010554 <CAN_transmit+0x158>)
 801046e:	483b      	ldr	r0, [pc, #236]	; (801055c <CAN_transmit+0x160>)
 8010470:	f007 fd0e 	bl	8017e90 <HAL_CAN_AddTxMessage>
 8010474:	4603      	mov	r3, r0
 8010476:	461a      	mov	r2, r3
 8010478:	4b39      	ldr	r3, [pc, #228]	; (8010560 <CAN_transmit+0x164>)
 801047a:	701a      	strb	r2, [r3, #0]
 801047c:	4b38      	ldr	r3, [pc, #224]	; (8010560 <CAN_transmit+0x164>)
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00d      	beq.n	80104a0 <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 8010484:	4837      	ldr	r0, [pc, #220]	; (8010564 <CAN_transmit+0x168>)
 8010486:	f014 fb03 	bl	8024a90 <puts>
				return;
 801048a:	e05e      	b.n	801054a <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 801048c:	69b8      	ldr	r0, [r7, #24]
 801048e:	f7fe ff47 	bl	800f320 <HAL_Elaps_Ticks>
 8010492:	4603      	mov	r3, r0
 8010494:	2b64      	cmp	r3, #100	; 0x64
 8010496:	d903      	bls.n	80104a0 <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 8010498:	4832      	ldr	r0, [pc, #200]	; (8010564 <CAN_transmit+0x168>)
 801049a:	f014 faf9 	bl	8024a90 <puts>
					return;
 801049e:	e054      	b.n	801054a <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 80104a0:	4b2d      	ldr	r3, [pc, #180]	; (8010558 <CAN_transmit+0x15c>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4619      	mov	r1, r3
 80104a6:	482d      	ldr	r0, [pc, #180]	; (801055c <CAN_transmit+0x160>)
 80104a8:	f007 fdc2 	bl	8018030 <HAL_CAN_IsTxMessagePending>
 80104ac:	4603      	mov	r3, r0
 80104ae:	75bb      	strb	r3, [r7, #22]
 80104b0:	7dbb      	ldrb	r3, [r7, #22]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1ea      	bne.n	801048c <CAN_transmit+0x90>
				}
			}

			len=0;
 80104b6:	2300      	movs	r3, #0
 80104b8:	607b      	str	r3, [r7, #4]
		while(len!=0)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d1c5      	bne.n	801044c <CAN_transmit+0x50>
 80104c0:	e043      	b.n	801054a <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80104c2:	4929      	ldr	r1, [pc, #164]	; (8010568 <CAN_transmit+0x16c>)
 80104c4:	4829      	ldr	r0, [pc, #164]	; (801056c <CAN_transmit+0x170>)
 80104c6:	f7ef febb 	bl	8000240 <strcmp>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d03b      	beq.n	8010548 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 80104d0:	e036      	b.n	8010540 <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 80104d2:	4b27      	ldr	r3, [pc, #156]	; (8010570 <CAN_transmit+0x174>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	4a25      	ldr	r2, [pc, #148]	; (8010570 <CAN_transmit+0x174>)
 80104dc:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 80104de:	4b24      	ldr	r3, [pc, #144]	; (8010570 <CAN_transmit+0x174>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	4a22      	ldr	r2, [pc, #136]	; (8010570 <CAN_transmit+0x174>)
 80104e8:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 80104ea:	2300      	movs	r3, #0
 80104ec:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 80104ee:	4b21      	ldr	r3, [pc, #132]	; (8010574 <CAN_transmit+0x178>)
 80104f0:	4a17      	ldr	r2, [pc, #92]	; (8010550 <CAN_transmit+0x154>)
 80104f2:	491f      	ldr	r1, [pc, #124]	; (8010570 <CAN_transmit+0x174>)
 80104f4:	4820      	ldr	r0, [pc, #128]	; (8010578 <CAN_transmit+0x17c>)
 80104f6:	f007 fccb 	bl	8017e90 <HAL_CAN_AddTxMessage>
 80104fa:	4603      	mov	r3, r0
 80104fc:	461a      	mov	r2, r3
 80104fe:	4b18      	ldr	r3, [pc, #96]	; (8010560 <CAN_transmit+0x164>)
 8010500:	701a      	strb	r2, [r3, #0]
 8010502:	4b17      	ldr	r3, [pc, #92]	; (8010560 <CAN_transmit+0x164>)
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00d      	beq.n	8010526 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 801050a:	481c      	ldr	r0, [pc, #112]	; (801057c <CAN_transmit+0x180>)
 801050c:	f014 fac0 	bl	8024a90 <puts>
				return;
 8010510:	e01b      	b.n	801054a <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 8010512:	69b8      	ldr	r0, [r7, #24]
 8010514:	f7fe ff04 	bl	800f320 <HAL_Elaps_Ticks>
 8010518:	4603      	mov	r3, r0
 801051a:	2b64      	cmp	r3, #100	; 0x64
 801051c:	d903      	bls.n	8010526 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 801051e:	4817      	ldr	r0, [pc, #92]	; (801057c <CAN_transmit+0x180>)
 8010520:	f014 fab6 	bl	8024a90 <puts>
					return;
 8010524:	e011      	b.n	801054a <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 8010526:	4b13      	ldr	r3, [pc, #76]	; (8010574 <CAN_transmit+0x178>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4619      	mov	r1, r3
 801052c:	4812      	ldr	r0, [pc, #72]	; (8010578 <CAN_transmit+0x17c>)
 801052e:	f007 fd7f 	bl	8018030 <HAL_CAN_IsTxMessagePending>
 8010532:	4603      	mov	r3, r0
 8010534:	75fb      	strb	r3, [r7, #23]
 8010536:	7dfb      	ldrb	r3, [r7, #23]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1ea      	bne.n	8010512 <CAN_transmit+0x116>
				}
			}
			len=0;
 801053c:	2300      	movs	r3, #0
 801053e:	607b      	str	r3, [r7, #4]
		while(len!=0)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d1c5      	bne.n	80104d2 <CAN_transmit+0xd6>
 8010546:	e000      	b.n	801054a <CAN_transmit+0x14e>
			return;
 8010548:	bf00      	nop
		}
	}
}
 801054a:	3720      	adds	r7, #32
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	20009bd4 	.word	0x20009bd4
 8010554:	20009b54 	.word	0x20009b54
 8010558:	20009b84 	.word	0x20009b84
 801055c:	20009be0 	.word	0x20009be0
 8010560:	20009bdc 	.word	0x20009bdc
 8010564:	08028e68 	.word	0x08028e68
 8010568:	08028e78 	.word	0x08028e78
 801056c:	20000305 	.word	0x20000305
 8010570:	20009b6c 	.word	0x20009b6c
 8010574:	20009b88 	.word	0x20009b88
 8010578:	20009c44 	.word	0x20009c44
 801057c:	08028e84 	.word	0x08028e84

08010580 <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4a3e      	ldr	r2, [pc, #248]	; (8010688 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d175      	bne.n	801067e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 8010592:	4b3e      	ldr	r3, [pc, #248]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010594:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010598:	881b      	ldrh	r3, [r3, #0]
 801059a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801059e:	d104      	bne.n	80105aa <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 80105a0:	4b3a      	ldr	r3, [pc, #232]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80105a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105a6:	2200      	movs	r2, #0
 80105a8:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 80105aa:	4b39      	ldr	r3, [pc, #228]	; (8010690 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80105ac:	4a39      	ldr	r2, [pc, #228]	; (8010694 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80105ae:	2100      	movs	r1, #0
 80105b0:	4839      	ldr	r0, [pc, #228]	; (8010698 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80105b2:	f007 fd61 	bl	8018078 <HAL_CAN_GetRxMessage>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d001      	beq.n	80105c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 80105bc:	f005 fc24 	bl	8015e08 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 80105c0:	4b32      	ldr	r3, [pc, #200]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80105c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	4a30      	ldr	r2, [pc, #192]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80105ca:	011b      	lsls	r3, r3, #4
 80105cc:	4413      	add	r3, r2
 80105ce:	330f      	adds	r3, #15
 80105d0:	2203      	movs	r2, #3
 80105d2:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 80105d4:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80105d6:	691a      	ldr	r2, [r3, #16]
 80105d8:	4b2c      	ldr	r3, [pc, #176]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80105da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	b2d1      	uxtb	r1, r2
 80105e2:	4a2a      	ldr	r2, [pc, #168]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80105e4:	011b      	lsls	r3, r3, #4
 80105e6:	4413      	add	r3, r2
 80105e8:	330c      	adds	r3, #12
 80105ea:	460a      	mov	r2, r1
 80105ec:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 80105ee:	4b29      	ldr	r3, [pc, #164]	; (8010694 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80105f0:	689a      	ldr	r2, [r3, #8]
 80105f2:	4b26      	ldr	r3, [pc, #152]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80105f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105f8:	881b      	ldrh	r3, [r3, #0]
 80105fa:	b2d1      	uxtb	r1, r2
 80105fc:	4a23      	ldr	r2, [pc, #140]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80105fe:	011b      	lsls	r3, r3, #4
 8010600:	4413      	add	r3, r2
 8010602:	330d      	adds	r3, #13
 8010604:	460a      	mov	r2, r1
 8010606:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 8010608:	4b22      	ldr	r3, [pc, #136]	; (8010694 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801060a:	68da      	ldr	r2, [r3, #12]
 801060c:	4b1f      	ldr	r3, [pc, #124]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801060e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010612:	881b      	ldrh	r3, [r3, #0]
 8010614:	b2d1      	uxtb	r1, r2
 8010616:	4a1d      	ldr	r2, [pc, #116]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010618:	011b      	lsls	r3, r3, #4
 801061a:	4413      	add	r3, r2
 801061c:	330e      	adds	r3, #14
 801061e:	460a      	mov	r2, r1
 8010620:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 8010622:	4b1a      	ldr	r3, [pc, #104]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010624:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	4618      	mov	r0, r3
 801062c:	4b19      	ldr	r3, [pc, #100]	; (8010694 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	4916      	ldr	r1, [pc, #88]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010632:	0103      	lsls	r3, r0, #4
 8010634:	440b      	add	r3, r1
 8010636:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 8010638:	4b14      	ldr	r3, [pc, #80]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801063a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	4a12      	ldr	r2, [pc, #72]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010642:	011b      	lsls	r3, r3, #4
 8010644:	4413      	add	r3, r2
 8010646:	330e      	adds	r3, #14
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d117      	bne.n	801067e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 801064e:	4b0f      	ldr	r3, [pc, #60]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010650:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010654:	881b      	ldrh	r3, [r3, #0]
 8010656:	011b      	lsls	r3, r3, #4
 8010658:	4a0c      	ldr	r2, [pc, #48]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801065a:	4413      	add	r3, r2
 801065c:	3304      	adds	r3, #4
 801065e:	490c      	ldr	r1, [pc, #48]	; (8010690 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8010660:	461a      	mov	r2, r3
 8010662:	460b      	mov	r3, r1
 8010664:	cb03      	ldmia	r3!, {r0, r1}
 8010666:	6010      	str	r0, [r2, #0]
 8010668:	6051      	str	r1, [r2, #4]
			canRead.In++;
 801066a:	4b08      	ldr	r3, [pc, #32]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801066c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010670:	881b      	ldrh	r3, [r3, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	b29a      	uxth	r2, r3
 8010676:	4b05      	ldr	r3, [pc, #20]	; (801068c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010678:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801067c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 801067e:	bf00      	nop
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	40003400 	.word	0x40003400
 801068c:	20005b50 	.word	0x20005b50
 8010690:	20009bcc 	.word	0x20009bcc
 8010694:	20009ba8 	.word	0x20009ba8
 8010698:	20009c44 	.word	0x20009c44

0801069c <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 80106a4:	4b42      	ldr	r3, [pc, #264]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80106a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106aa:	881b      	ldrh	r3, [r3, #0]
 80106ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106b0:	d104      	bne.n	80106bc <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 80106b2:	4b3f      	ldr	r3, [pc, #252]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80106b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106b8:	2200      	movs	r2, #0
 80106ba:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 80106bc:	4b3d      	ldr	r3, [pc, #244]	; (80107b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80106be:	4a3e      	ldr	r2, [pc, #248]	; (80107b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80106c0:	2101      	movs	r1, #1
 80106c2:	483e      	ldr	r0, [pc, #248]	; (80107bc <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 80106c4:	f007 fcd8 	bl	8018078 <HAL_CAN_GetRxMessage>
 80106c8:	4603      	mov	r3, r0
 80106ca:	461a      	mov	r2, r3
 80106cc:	4b3c      	ldr	r3, [pc, #240]	; (80107c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80106ce:	701a      	strb	r2, [r3, #0]
 80106d0:	4b3b      	ldr	r3, [pc, #236]	; (80107c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d007      	beq.n	80106e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 80106d8:	4b39      	ldr	r3, [pc, #228]	; (80107c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	4619      	mov	r1, r3
 80106de:	4839      	ldr	r0, [pc, #228]	; (80107c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 80106e0:	f014 f93a 	bl	8024958 <iprintf>
		Error_Handler();
 80106e4:	f005 fb90 	bl	8015e08 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 80106e8:	4b31      	ldr	r3, [pc, #196]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80106ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	4a2f      	ldr	r2, [pc, #188]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80106f2:	011b      	lsls	r3, r3, #4
 80106f4:	4413      	add	r3, r2
 80106f6:	330f      	adds	r3, #15
 80106f8:	2202      	movs	r2, #2
 80106fa:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 80106fc:	4b2e      	ldr	r3, [pc, #184]	; (80107b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80106fe:	691a      	ldr	r2, [r3, #16]
 8010700:	4b2b      	ldr	r3, [pc, #172]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010702:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010706:	881b      	ldrh	r3, [r3, #0]
 8010708:	b2d1      	uxtb	r1, r2
 801070a:	4a29      	ldr	r2, [pc, #164]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801070c:	011b      	lsls	r3, r3, #4
 801070e:	4413      	add	r3, r2
 8010710:	330c      	adds	r3, #12
 8010712:	460a      	mov	r2, r1
 8010714:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 8010716:	4b28      	ldr	r3, [pc, #160]	; (80107b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010718:	689a      	ldr	r2, [r3, #8]
 801071a:	4b25      	ldr	r3, [pc, #148]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801071c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010720:	881b      	ldrh	r3, [r3, #0]
 8010722:	b2d1      	uxtb	r1, r2
 8010724:	4a22      	ldr	r2, [pc, #136]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010726:	011b      	lsls	r3, r3, #4
 8010728:	4413      	add	r3, r2
 801072a:	330d      	adds	r3, #13
 801072c:	460a      	mov	r2, r1
 801072e:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 8010730:	4b21      	ldr	r3, [pc, #132]	; (80107b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010732:	68da      	ldr	r2, [r3, #12]
 8010734:	4b1e      	ldr	r3, [pc, #120]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010736:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	b2d1      	uxtb	r1, r2
 801073e:	4a1c      	ldr	r2, [pc, #112]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010740:	011b      	lsls	r3, r3, #4
 8010742:	4413      	add	r3, r2
 8010744:	330e      	adds	r3, #14
 8010746:	460a      	mov	r2, r1
 8010748:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 801074a:	4b19      	ldr	r3, [pc, #100]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801074c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010750:	881b      	ldrh	r3, [r3, #0]
 8010752:	4618      	mov	r0, r3
 8010754:	4b18      	ldr	r3, [pc, #96]	; (80107b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	4915      	ldr	r1, [pc, #84]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801075a:	0103      	lsls	r3, r0, #4
 801075c:	440b      	add	r3, r1
 801075e:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 8010760:	4b13      	ldr	r3, [pc, #76]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010762:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	4a11      	ldr	r2, [pc, #68]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801076a:	011b      	lsls	r3, r3, #4
 801076c:	4413      	add	r3, r2
 801076e:	330e      	adds	r3, #14
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d117      	bne.n	80107a6 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8010776:	4b0e      	ldr	r3, [pc, #56]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010778:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801077c:	881b      	ldrh	r3, [r3, #0]
 801077e:	011b      	lsls	r3, r3, #4
 8010780:	4a0b      	ldr	r2, [pc, #44]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010782:	4413      	add	r3, r2
 8010784:	3304      	adds	r3, #4
 8010786:	490b      	ldr	r1, [pc, #44]	; (80107b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8010788:	461a      	mov	r2, r3
 801078a:	460b      	mov	r3, r1
 801078c:	cb03      	ldmia	r3!, {r0, r1}
 801078e:	6010      	str	r0, [r2, #0]
 8010790:	6051      	str	r1, [r2, #4]
		canRead.In++;
 8010792:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010794:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	3301      	adds	r3, #1
 801079c:	b29a      	uxth	r2, r3
 801079e:	4b04      	ldr	r3, [pc, #16]	; (80107b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80107a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107a4:	801a      	strh	r2, [r3, #0]
	}
}
 80107a6:	bf00      	nop
 80107a8:	3708      	adds	r7, #8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	20005b50 	.word	0x20005b50
 80107b4:	20009bc4 	.word	0x20009bc4
 80107b8:	20009b8c 	.word	0x20009b8c
 80107bc:	20009be0 	.word	0x20009be0
 80107c0:	20009bdc 	.word	0x20009bdc
 80107c4:	08028e94 	.word	0x08028e94

080107c8 <canDataReady>:


unsigned char canDataReady()
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 80107ce:	2300      	movs	r3, #0
 80107d0:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 80107d2:	4b27      	ldr	r3, [pc, #156]	; (8010870 <canDataReady+0xa8>)
 80107d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107d8:	881a      	ldrh	r2, [r3, #0]
 80107da:	4b25      	ldr	r3, [pc, #148]	; (8010870 <canDataReady+0xa8>)
 80107dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107e0:	885b      	ldrh	r3, [r3, #2]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d101      	bne.n	80107ea <canDataReady+0x22>
	{
		return 0;
 80107e6:	2300      	movs	r3, #0
 80107e8:	e03e      	b.n	8010868 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 80107ea:	4b21      	ldr	r3, [pc, #132]	; (8010870 <canDataReady+0xa8>)
 80107ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107f0:	885b      	ldrh	r3, [r3, #2]
 80107f2:	3301      	adds	r3, #1
 80107f4:	607b      	str	r3, [r7, #4]
 80107f6:	e02e      	b.n	8010856 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 80107f8:	4b1d      	ldr	r3, [pc, #116]	; (8010870 <canDataReady+0xa8>)
 80107fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107fe:	885b      	ldrh	r3, [r3, #2]
 8010800:	011b      	lsls	r3, r3, #4
 8010802:	4a1b      	ldr	r2, [pc, #108]	; (8010870 <canDataReady+0xa8>)
 8010804:	1898      	adds	r0, r3, r2
 8010806:	4b1a      	ldr	r3, [pc, #104]	; (8010870 <canDataReady+0xa8>)
 8010808:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801080c:	881b      	ldrh	r3, [r3, #0]
 801080e:	011b      	lsls	r3, r3, #4
 8010810:	4a17      	ldr	r2, [pc, #92]	; (8010870 <canDataReady+0xa8>)
 8010812:	4413      	add	r3, r2
 8010814:	2210      	movs	r2, #16
 8010816:	4619      	mov	r1, r3
 8010818:	f013 ff7e 	bl	8024718 <memcmp>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d116      	bne.n	8010850 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8010822:	4b13      	ldr	r3, [pc, #76]	; (8010870 <canDataReady+0xa8>)
 8010824:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010828:	885b      	ldrh	r3, [r3, #2]
 801082a:	011b      	lsls	r3, r3, #4
 801082c:	4a10      	ldr	r2, [pc, #64]	; (8010870 <canDataReady+0xa8>)
 801082e:	4413      	add	r3, r2
 8010830:	2210      	movs	r2, #16
 8010832:	2100      	movs	r1, #0
 8010834:	4618      	mov	r0, r3
 8010836:	f013 ffa7 	bl	8024788 <memset>
			canRead.Out++;
 801083a:	4b0d      	ldr	r3, [pc, #52]	; (8010870 <canDataReady+0xa8>)
 801083c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010840:	885b      	ldrh	r3, [r3, #2]
 8010842:	3301      	adds	r3, #1
 8010844:	b29a      	uxth	r2, r3
 8010846:	4b0a      	ldr	r3, [pc, #40]	; (8010870 <canDataReady+0xa8>)
 8010848:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801084c:	805a      	strh	r2, [r3, #2]
			break;
 801084e:	e00a      	b.n	8010866 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	3301      	adds	r3, #1
 8010854:	607b      	str	r3, [r7, #4]
 8010856:	4b06      	ldr	r3, [pc, #24]	; (8010870 <canDataReady+0xa8>)
 8010858:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801085c:	881b      	ldrh	r3, [r3, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	4293      	cmp	r3, r2
 8010864:	d3c8      	bcc.n	80107f8 <canDataReady+0x30>
		}
	}
	return 1;
 8010866:	2301      	movs	r3, #1
}
 8010868:	4618      	mov	r0, r3
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	20005b50 	.word	0x20005b50

08010874 <readCanToStructs>:

void readCanToStructs(void)
{
 8010874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010876:	b08f      	sub	sp, #60	; 0x3c
 8010878:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 801087a:	2300      	movs	r3, #0
 801087c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010880:	2300      	movs	r3, #0
 8010882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010886:	2300      	movs	r3, #0
 8010888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 801088c:	2300      	movs	r3, #0
 801088e:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 8010890:	4bc1      	ldr	r3, [pc, #772]	; (8010b98 <readCanToStructs+0x324>)
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	3b01      	subs	r3, #1
 8010896:	2b03      	cmp	r3, #3
 8010898:	f203 81c3 	bhi.w	8013c22 <readCanToStructs+0x33ae>
 801089c:	a201      	add	r2, pc, #4	; (adr r2, 80108a4 <readCanToStructs+0x30>)
 801089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a2:	bf00      	nop
 80108a4:	080108b5 	.word	0x080108b5
 80108a8:	08012897 	.word	0x08012897
 80108ac:	080135f5 	.word	0x080135f5
 80108b0:	08013c17 	.word	0x08013c17
	{
	case HITACHI:
	{
		/* ___________________ HITACHI _______________ */
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80108b4:	4bb9      	ldr	r3, [pc, #740]	; (8010b9c <readCanToStructs+0x328>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	09db      	lsrs	r3, r3, #7
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f043 81b1 	bne.w	8013c26 <readCanToStructs+0x33b2>
		{
			return;
		}
		while(canDataReady())
 80108c4:	f001 b92e 	b.w	8011b24 <readCanToStructs+0x12b0>
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80108c8:	4bb5      	ldr	r3, [pc, #724]	; (8010ba0 <readCanToStructs+0x32c>)
 80108ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108ce:	885b      	ldrh	r3, [r3, #2]
 80108d0:	4ab3      	ldr	r2, [pc, #716]	; (8010ba0 <readCanToStructs+0x32c>)
 80108d2:	011b      	lsls	r3, r3, #4
 80108d4:	4413      	add	r3, r2
 80108d6:	330f      	adds	r3, #15
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	3b01      	subs	r3, #1
 80108dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80108e0:	4baf      	ldr	r3, [pc, #700]	; (8010ba0 <readCanToStructs+0x32c>)
 80108e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108e6:	885b      	ldrh	r3, [r3, #2]
 80108e8:	4aad      	ldr	r2, [pc, #692]	; (8010ba0 <readCanToStructs+0x32c>)
 80108ea:	011b      	lsls	r3, r3, #4
 80108ec:	4413      	add	r3, r2
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80108f4:	f201 80f3 	bhi.w	8011ade <readCanToStructs+0x126a>
 80108f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108fc:	d80a      	bhi.n	8010914 <readCanToStructs+0xa0>
 80108fe:	f240 1203 	movw	r2, #259	; 0x103
 8010902:	4293      	cmp	r3, r2
 8010904:	d01e      	beq.n	8010944 <readCanToStructs+0xd0>
 8010906:	f240 1209 	movw	r2, #265	; 0x109
 801090a:	4293      	cmp	r3, r2
 801090c:	f000 80f0 	beq.w	8010af0 <readCanToStructs+0x27c>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;

			default:
				break;
 8010910:	f001 b8e5 	b.w	8011ade <readCanToStructs+0x126a>
 8010914:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010918:	2b07      	cmp	r3, #7
 801091a:	f201 80e0 	bhi.w	8011ade <readCanToStructs+0x126a>
 801091e:	a201      	add	r2, pc, #4	; (adr r2, 8010924 <readCanToStructs+0xb0>)
 8010920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010924:	08010cc5 	.word	0x08010cc5
 8010928:	08010ecd 	.word	0x08010ecd
 801092c:	080110a5 	.word	0x080110a5
 8010930:	080112bf 	.word	0x080112bf
 8010934:	080114d5 	.word	0x080114d5
 8010938:	08011adf 	.word	0x08011adf
 801093c:	08011669 	.word	0x08011669
 8010940:	080118a3 	.word	0x080118a3
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010944:	4b97      	ldr	r3, [pc, #604]	; (8010ba4 <readCanToStructs+0x330>)
 8010946:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010948:	4b95      	ldr	r3, [pc, #596]	; (8010ba0 <readCanToStructs+0x32c>)
 801094a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801094e:	885b      	ldrh	r3, [r3, #2]
 8010950:	4a93      	ldr	r2, [pc, #588]	; (8010ba0 <readCanToStructs+0x32c>)
 8010952:	011b      	lsls	r3, r3, #4
 8010954:	4413      	add	r3, r2
 8010956:	3304      	adds	r3, #4
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801095e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010962:	2b00      	cmp	r3, #0
 8010964:	d110      	bne.n	8010988 <readCanToStructs+0x114>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010966:	2206      	movs	r2, #6
 8010968:	2100      	movs	r1, #0
 801096a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801096c:	f013 ff0c 	bl	8024788 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010974:	4a8c      	ldr	r2, [pc, #560]	; (8010ba8 <readCanToStructs+0x334>)
 8010976:	f240 4112 	movw	r1, #1042	; 0x412
 801097a:	fb01 f303 	mul.w	r3, r1, r3
 801097e:	4413      	add	r3, r2
 8010980:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010984:	2200      	movs	r2, #0
 8010986:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8010988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801098c:	4a86      	ldr	r2, [pc, #536]	; (8010ba8 <readCanToStructs+0x334>)
 801098e:	f240 4112 	movw	r1, #1042	; 0x412
 8010992:	fb01 f303 	mul.w	r3, r1, r3
 8010996:	4413      	add	r3, r2
 8010998:	f203 2307 	addw	r3, r3, #519	; 0x207
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d015      	beq.n	80109d2 <readCanToStructs+0x15e>
					printf("GPS Packet Seq no MisMatch\n");
 80109a6:	4881      	ldr	r0, [pc, #516]	; (8010bac <readCanToStructs+0x338>)
 80109a8:	f014 f872 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80109ac:	2206      	movs	r2, #6
 80109ae:	2100      	movs	r1, #0
 80109b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109b2:	f013 fee9 	bl	8024788 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80109b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109ba:	4a7b      	ldr	r2, [pc, #492]	; (8010ba8 <readCanToStructs+0x334>)
 80109bc:	f240 4112 	movw	r1, #1042	; 0x412
 80109c0:	fb01 f303 	mul.w	r3, r1, r3
 80109c4:	4413      	add	r3, r2
 80109c6:	f203 2307 	addw	r3, r3, #519	; 0x207
 80109ca:	2200      	movs	r2, #0
 80109cc:	701a      	strb	r2, [r3, #0]
					break;
 80109ce:	f001 b887 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 80109d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80109d6:	4613      	mov	r3, r2
 80109d8:	00db      	lsls	r3, r3, #3
 80109da:	1a9b      	subs	r3, r3, r2
 80109dc:	461a      	mov	r2, r3
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	4413      	add	r3, r2
 80109e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80109e4:	2301      	movs	r3, #1
 80109e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80109ea:	e016      	b.n	8010a1a <readCanToStructs+0x1a6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80109ec:	4b6c      	ldr	r3, [pc, #432]	; (8010ba0 <readCanToStructs+0x32c>)
 80109ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109f2:	885b      	ldrh	r3, [r3, #2]
 80109f4:	461a      	mov	r2, r3
 80109f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109fa:	4969      	ldr	r1, [pc, #420]	; (8010ba0 <readCanToStructs+0x32c>)
 80109fc:	0112      	lsls	r2, r2, #4
 80109fe:	440a      	add	r2, r1
 8010a00:	4413      	add	r3, r2
 8010a02:	3304      	adds	r3, #4
 8010a04:	781a      	ldrb	r2, [r3, #0]
 8010a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a08:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010a10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a14:	3301      	adds	r3, #1
 8010a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a1a:	4b61      	ldr	r3, [pc, #388]	; (8010ba0 <readCanToStructs+0x32c>)
 8010a1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a20:	885b      	ldrh	r3, [r3, #2]
 8010a22:	4a5f      	ldr	r2, [pc, #380]	; (8010ba0 <readCanToStructs+0x32c>)
 8010a24:	011b      	lsls	r3, r3, #4
 8010a26:	4413      	add	r3, r2
 8010a28:	330c      	adds	r3, #12
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d3db      	bcc.n	80109ec <readCanToStructs+0x178>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a38:	4a5b      	ldr	r2, [pc, #364]	; (8010ba8 <readCanToStructs+0x334>)
 8010a3a:	f240 4112 	movw	r1, #1042	; 0x412
 8010a3e:	fb01 f303 	mul.w	r3, r1, r3
 8010a42:	4413      	add	r3, r2
 8010a44:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	4613      	mov	r3, r2
 8010a4e:	00db      	lsls	r3, r3, #3
 8010a50:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8010a52:	4b53      	ldr	r3, [pc, #332]	; (8010ba0 <readCanToStructs+0x32c>)
 8010a54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a58:	885b      	ldrh	r3, [r3, #2]
 8010a5a:	4951      	ldr	r1, [pc, #324]	; (8010ba0 <readCanToStructs+0x32c>)
 8010a5c:	011b      	lsls	r3, r3, #4
 8010a5e:	440b      	add	r3, r1
 8010a60:	330c      	adds	r3, #12
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	3b01      	subs	r3, #1
 8010a66:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010a68:	2b05      	cmp	r3, #5
 8010a6a:	d91c      	bls.n	8010aa6 <readCanToStructs+0x232>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010a6c:	4b50      	ldr	r3, [pc, #320]	; (8010bb0 <readCanToStructs+0x33c>)
 8010a6e:	4a4d      	ldr	r2, [pc, #308]	; (8010ba4 <readCanToStructs+0x330>)
 8010a70:	6811      	ldr	r1, [r2, #0]
 8010a72:	6019      	str	r1, [r3, #0]
 8010a74:	8892      	ldrh	r2, [r2, #4]
 8010a76:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8010a78:	4b4e      	ldr	r3, [pc, #312]	; (8010bb4 <readCanToStructs+0x340>)
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d102      	bne.n	8010a86 <readCanToStructs+0x212>
						printf("GPS_PACKET_RECEIVED\n");
 8010a80:	484d      	ldr	r0, [pc, #308]	; (8010bb8 <readCanToStructs+0x344>)
 8010a82:	f014 f805 	bl	8024a90 <puts>
					Write_RTC();
 8010a86:	f7fa ff2f 	bl	800b8e8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a8e:	4a46      	ldr	r2, [pc, #280]	; (8010ba8 <readCanToStructs+0x334>)
 8010a90:	f240 4112 	movw	r1, #1042	; 0x412
 8010a94:	fb01 f303 	mul.w	r3, r1, r3
 8010a98:	4413      	add	r3, r2
 8010a9a:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	701a      	strb	r2, [r3, #0]
				break;
 8010aa2:	f001 b81d 	b.w	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8010aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010aaa:	4a3f      	ldr	r2, [pc, #252]	; (8010ba8 <readCanToStructs+0x334>)
 8010aac:	f240 4112 	movw	r1, #1042	; 0x412
 8010ab0:	fb01 f303 	mul.w	r3, r1, r3
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f203 2306 	addw	r3, r3, #518	; 0x206
 8010aba:	2201      	movs	r2, #1
 8010abc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8010abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ac2:	4939      	ldr	r1, [pc, #228]	; (8010ba8 <readCanToStructs+0x334>)
 8010ac4:	f240 4212 	movw	r2, #1042	; 0x412
 8010ac8:	fb03 f202 	mul.w	r2, r3, r2
 8010acc:	440a      	add	r2, r1
 8010ace:	f202 2207 	addw	r2, r2, #519	; 0x207
 8010ad2:	7812      	ldrb	r2, [r2, #0]
 8010ad4:	3201      	adds	r2, #1
 8010ad6:	b2d0      	uxtb	r0, r2
 8010ad8:	4a33      	ldr	r2, [pc, #204]	; (8010ba8 <readCanToStructs+0x334>)
 8010ada:	f240 4112 	movw	r1, #1042	; 0x412
 8010ade:	fb01 f303 	mul.w	r3, r1, r3
 8010ae2:	4413      	add	r3, r2
 8010ae4:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010ae8:	4602      	mov	r2, r0
 8010aea:	701a      	strb	r2, [r3, #0]
				break;
 8010aec:	f000 bff8 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010af0:	4b2c      	ldr	r3, [pc, #176]	; (8010ba4 <readCanToStructs+0x330>)
 8010af2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010af4:	4b2a      	ldr	r3, [pc, #168]	; (8010ba0 <readCanToStructs+0x32c>)
 8010af6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010afa:	885b      	ldrh	r3, [r3, #2]
 8010afc:	4a28      	ldr	r2, [pc, #160]	; (8010ba0 <readCanToStructs+0x32c>)
 8010afe:	011b      	lsls	r3, r3, #4
 8010b00:	4413      	add	r3, r2
 8010b02:	3304      	adds	r3, #4
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010b0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d110      	bne.n	8010b34 <readCanToStructs+0x2c0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010b12:	2206      	movs	r2, #6
 8010b14:	2100      	movs	r1, #0
 8010b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b18:	f013 fe36 	bl	8024788 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8010b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b20:	4a21      	ldr	r2, [pc, #132]	; (8010ba8 <readCanToStructs+0x334>)
 8010b22:	f240 4112 	movw	r1, #1042	; 0x412
 8010b26:	fb01 f303 	mul.w	r3, r1, r3
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010b30:	2200      	movs	r2, #0
 8010b32:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8010b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b38:	4a1b      	ldr	r2, [pc, #108]	; (8010ba8 <readCanToStructs+0x334>)
 8010b3a:	f240 4112 	movw	r1, #1042	; 0x412
 8010b3e:	fb01 f303 	mul.w	r3, r1, r3
 8010b42:	4413      	add	r3, r2
 8010b44:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d015      	beq.n	8010b7e <readCanToStructs+0x30a>
					printf("GPS2 Packet Seq no MisMatch\n");
 8010b52:	481a      	ldr	r0, [pc, #104]	; (8010bbc <readCanToStructs+0x348>)
 8010b54:	f013 ff9c 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010b58:	2206      	movs	r2, #6
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b5e:	f013 fe13 	bl	8024788 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8010b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b66:	4a10      	ldr	r2, [pc, #64]	; (8010ba8 <readCanToStructs+0x334>)
 8010b68:	f240 4112 	movw	r1, #1042	; 0x412
 8010b6c:	fb01 f303 	mul.w	r3, r1, r3
 8010b70:	4413      	add	r3, r2
 8010b72:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010b76:	2200      	movs	r2, #0
 8010b78:	701a      	strb	r2, [r3, #0]
					break;
 8010b7a:	f000 bfb1 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010b7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b82:	4613      	mov	r3, r2
 8010b84:	00db      	lsls	r3, r3, #3
 8010b86:	1a9b      	subs	r3, r3, r2
 8010b88:	461a      	mov	r2, r3
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8c:	4413      	add	r3, r2
 8010b8e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010b90:	2301      	movs	r3, #1
 8010b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010b96:	e02a      	b.n	8010bee <readCanToStructs+0x37a>
 8010b98:	20000304 	.word	0x20000304
 8010b9c:	2000198c 	.word	0x2000198c
 8010ba0:	20005b50 	.word	0x20005b50
 8010ba4:	200028d4 	.word	0x200028d4
 8010ba8:	2000532c 	.word	0x2000532c
 8010bac:	08028ebc 	.word	0x08028ebc
 8010bb0:	200028cc 	.word	0x200028cc
 8010bb4:	2000065d 	.word	0x2000065d
 8010bb8:	08028ed8 	.word	0x08028ed8
 8010bbc:	08028eec 	.word	0x08028eec
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010bc0:	4bb6      	ldr	r3, [pc, #728]	; (8010e9c <readCanToStructs+0x628>)
 8010bc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bc6:	885b      	ldrh	r3, [r3, #2]
 8010bc8:	461a      	mov	r2, r3
 8010bca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bce:	49b3      	ldr	r1, [pc, #716]	; (8010e9c <readCanToStructs+0x628>)
 8010bd0:	0112      	lsls	r2, r2, #4
 8010bd2:	440a      	add	r2, r1
 8010bd4:	4413      	add	r3, r2
 8010bd6:	3304      	adds	r3, #4
 8010bd8:	781a      	ldrb	r2, [r3, #0]
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be0:	3301      	adds	r3, #1
 8010be2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010be4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010be8:	3301      	adds	r3, #1
 8010bea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010bee:	4bab      	ldr	r3, [pc, #684]	; (8010e9c <readCanToStructs+0x628>)
 8010bf0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bf4:	885b      	ldrh	r3, [r3, #2]
 8010bf6:	4aa9      	ldr	r2, [pc, #676]	; (8010e9c <readCanToStructs+0x628>)
 8010bf8:	011b      	lsls	r3, r3, #4
 8010bfa:	4413      	add	r3, r2
 8010bfc:	330c      	adds	r3, #12
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d3db      	bcc.n	8010bc0 <readCanToStructs+0x34c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c0c:	4aa4      	ldr	r2, [pc, #656]	; (8010ea0 <readCanToStructs+0x62c>)
 8010c0e:	f240 4112 	movw	r1, #1042	; 0x412
 8010c12:	fb01 f303 	mul.w	r3, r1, r3
 8010c16:	4413      	add	r3, r2
 8010c18:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	4613      	mov	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8010c26:	4b9d      	ldr	r3, [pc, #628]	; (8010e9c <readCanToStructs+0x628>)
 8010c28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c2c:	885b      	ldrh	r3, [r3, #2]
 8010c2e:	499b      	ldr	r1, [pc, #620]	; (8010e9c <readCanToStructs+0x628>)
 8010c30:	011b      	lsls	r3, r3, #4
 8010c32:	440b      	add	r3, r1
 8010c34:	330c      	adds	r3, #12
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010c3c:	2b05      	cmp	r3, #5
 8010c3e:	d91c      	bls.n	8010c7a <readCanToStructs+0x406>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010c40:	4b98      	ldr	r3, [pc, #608]	; (8010ea4 <readCanToStructs+0x630>)
 8010c42:	4a99      	ldr	r2, [pc, #612]	; (8010ea8 <readCanToStructs+0x634>)
 8010c44:	6811      	ldr	r1, [r2, #0]
 8010c46:	6019      	str	r1, [r3, #0]
 8010c48:	8892      	ldrh	r2, [r2, #4]
 8010c4a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8010c4c:	4b97      	ldr	r3, [pc, #604]	; (8010eac <readCanToStructs+0x638>)
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d102      	bne.n	8010c5a <readCanToStructs+0x3e6>
						printf("GPS2_PACKET_RECEIVED\n");
 8010c54:	4896      	ldr	r0, [pc, #600]	; (8010eb0 <readCanToStructs+0x63c>)
 8010c56:	f013 ff1b 	bl	8024a90 <puts>
					Write_RTC();
 8010c5a:	f7fa fe45 	bl	800b8e8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8010c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c62:	4a8f      	ldr	r2, [pc, #572]	; (8010ea0 <readCanToStructs+0x62c>)
 8010c64:	f240 4112 	movw	r1, #1042	; 0x412
 8010c68:	fb01 f303 	mul.w	r3, r1, r3
 8010c6c:	4413      	add	r3, r2
 8010c6e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010c72:	2200      	movs	r2, #0
 8010c74:	701a      	strb	r2, [r3, #0]
				break;
 8010c76:	f000 bf33 	b.w	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8010c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c7e:	4a88      	ldr	r2, [pc, #544]	; (8010ea0 <readCanToStructs+0x62c>)
 8010c80:	f240 4112 	movw	r1, #1042	; 0x412
 8010c84:	fb01 f303 	mul.w	r3, r1, r3
 8010c88:	4413      	add	r3, r2
 8010c8a:	f203 2312 	addw	r3, r3, #530	; 0x212
 8010c8e:	2201      	movs	r2, #1
 8010c90:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8010c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c96:	4982      	ldr	r1, [pc, #520]	; (8010ea0 <readCanToStructs+0x62c>)
 8010c98:	f240 4212 	movw	r2, #1042	; 0x412
 8010c9c:	fb03 f202 	mul.w	r2, r3, r2
 8010ca0:	440a      	add	r2, r1
 8010ca2:	f202 2213 	addw	r2, r2, #531	; 0x213
 8010ca6:	7812      	ldrb	r2, [r2, #0]
 8010ca8:	3201      	adds	r2, #1
 8010caa:	b2d0      	uxtb	r0, r2
 8010cac:	4a7c      	ldr	r2, [pc, #496]	; (8010ea0 <readCanToStructs+0x62c>)
 8010cae:	f240 4112 	movw	r1, #1042	; 0x412
 8010cb2:	fb01 f303 	mul.w	r3, r1, r3
 8010cb6:	4413      	add	r3, r2
 8010cb8:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	701a      	strb	r2, [r3, #0]
				break;
 8010cc0:	f000 bf0e 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010cc4:	4b7b      	ldr	r3, [pc, #492]	; (8010eb4 <readCanToStructs+0x640>)
 8010cc6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010cc8:	4b74      	ldr	r3, [pc, #464]	; (8010e9c <readCanToStructs+0x628>)
 8010cca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cce:	885b      	ldrh	r3, [r3, #2]
 8010cd0:	4a72      	ldr	r2, [pc, #456]	; (8010e9c <readCanToStructs+0x628>)
 8010cd2:	011b      	lsls	r3, r3, #4
 8010cd4:	4413      	add	r3, r2
 8010cd6:	3304      	adds	r3, #4
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010cde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d110      	bne.n	8010d08 <readCanToStructs+0x494>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010ce6:	2218      	movs	r2, #24
 8010ce8:	2100      	movs	r1, #0
 8010cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cec:	f013 fd4c 	bl	8024788 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cf4:	4a6a      	ldr	r2, [pc, #424]	; (8010ea0 <readCanToStructs+0x62c>)
 8010cf6:	f240 4112 	movw	r1, #1042	; 0x412
 8010cfa:	fb01 f303 	mul.w	r3, r1, r3
 8010cfe:	4413      	add	r3, r2
 8010d00:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010d04:	2200      	movs	r2, #0
 8010d06:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8010d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d0c:	4a64      	ldr	r2, [pc, #400]	; (8010ea0 <readCanToStructs+0x62c>)
 8010d0e:	f240 4112 	movw	r1, #1042	; 0x412
 8010d12:	fb01 f303 	mul.w	r3, r1, r3
 8010d16:	4413      	add	r3, r2
 8010d18:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d015      	beq.n	8010d52 <readCanToStructs+0x4de>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8010d26:	4864      	ldr	r0, [pc, #400]	; (8010eb8 <readCanToStructs+0x644>)
 8010d28:	f013 feb2 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010d2c:	2218      	movs	r2, #24
 8010d2e:	2100      	movs	r1, #0
 8010d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d32:	f013 fd29 	bl	8024788 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d3a:	4a59      	ldr	r2, [pc, #356]	; (8010ea0 <readCanToStructs+0x62c>)
 8010d3c:	f240 4112 	movw	r1, #1042	; 0x412
 8010d40:	fb01 f303 	mul.w	r3, r1, r3
 8010d44:	4413      	add	r3, r2
 8010d46:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	701a      	strb	r2, [r3, #0]
					break;
 8010d4e:	f000 bec7 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010d52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010d56:	4613      	mov	r3, r2
 8010d58:	00db      	lsls	r3, r3, #3
 8010d5a:	1a9b      	subs	r3, r3, r2
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d60:	4413      	add	r3, r2
 8010d62:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010d64:	2301      	movs	r3, #1
 8010d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010d6a:	e016      	b.n	8010d9a <readCanToStructs+0x526>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010d6c:	4b4b      	ldr	r3, [pc, #300]	; (8010e9c <readCanToStructs+0x628>)
 8010d6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d72:	885b      	ldrh	r3, [r3, #2]
 8010d74:	461a      	mov	r2, r3
 8010d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d7a:	4948      	ldr	r1, [pc, #288]	; (8010e9c <readCanToStructs+0x628>)
 8010d7c:	0112      	lsls	r2, r2, #4
 8010d7e:	440a      	add	r2, r1
 8010d80:	4413      	add	r3, r2
 8010d82:	3304      	adds	r3, #4
 8010d84:	781a      	ldrb	r2, [r3, #0]
 8010d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d88:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d94:	3301      	adds	r3, #1
 8010d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010d9a:	4b40      	ldr	r3, [pc, #256]	; (8010e9c <readCanToStructs+0x628>)
 8010d9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010da0:	885b      	ldrh	r3, [r3, #2]
 8010da2:	4a3e      	ldr	r2, [pc, #248]	; (8010e9c <readCanToStructs+0x628>)
 8010da4:	011b      	lsls	r3, r3, #4
 8010da6:	4413      	add	r3, r2
 8010da8:	330c      	adds	r3, #12
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d3db      	bcc.n	8010d6c <readCanToStructs+0x4f8>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010db8:	4a39      	ldr	r2, [pc, #228]	; (8010ea0 <readCanToStructs+0x62c>)
 8010dba:	f240 4112 	movw	r1, #1042	; 0x412
 8010dbe:	fb01 f303 	mul.w	r3, r1, r3
 8010dc2:	4413      	add	r3, r2
 8010dc4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	4613      	mov	r3, r2
 8010dce:	00db      	lsls	r3, r3, #3
 8010dd0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010dd2:	4b32      	ldr	r3, [pc, #200]	; (8010e9c <readCanToStructs+0x628>)
 8010dd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dd8:	885b      	ldrh	r3, [r3, #2]
 8010dda:	4930      	ldr	r1, [pc, #192]	; (8010e9c <readCanToStructs+0x628>)
 8010ddc:	011b      	lsls	r3, r3, #4
 8010dde:	440b      	add	r3, r1
 8010de0:	330c      	adds	r3, #12
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	3b01      	subs	r3, #1
 8010de6:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010de8:	2b17      	cmp	r3, #23
 8010dea:	d932      	bls.n	8010e52 <readCanToStructs+0x5de>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010dec:	4b31      	ldr	r3, [pc, #196]	; (8010eb4 <readCanToStructs+0x640>)
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	461a      	mov	r2, r3
 8010df2:	4613      	mov	r3, r2
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	00db      	lsls	r3, r3, #3
 8010dfa:	4a30      	ldr	r2, [pc, #192]	; (8010ebc <readCanToStructs+0x648>)
 8010dfc:	4413      	add	r3, r2
 8010dfe:	2218      	movs	r2, #24
 8010e00:	492c      	ldr	r1, [pc, #176]	; (8010eb4 <readCanToStructs+0x640>)
 8010e02:	4618      	mov	r0, r3
 8010e04:	f013 fc98 	bl	8024738 <memcpy>
					if(Debug_flag == 1)
 8010e08:	4b28      	ldr	r3, [pc, #160]	; (8010eac <readCanToStructs+0x638>)
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d105      	bne.n	8010e1c <readCanToStructs+0x5a8>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010e10:	4b28      	ldr	r3, [pc, #160]	; (8010eb4 <readCanToStructs+0x640>)
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	4619      	mov	r1, r3
 8010e16:	482a      	ldr	r0, [pc, #168]	; (8010ec0 <readCanToStructs+0x64c>)
 8010e18:	f013 fd9e 	bl	8024958 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8010e1c:	4b29      	ldr	r3, [pc, #164]	; (8010ec4 <readCanToStructs+0x650>)
 8010e1e:	2201      	movs	r2, #1
 8010e20:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010e22:	f006 fd8f 	bl	8017944 <HAL_GetTick>
 8010e26:	4603      	mov	r3, r0
 8010e28:	4a27      	ldr	r2, [pc, #156]	; (8010ec8 <readCanToStructs+0x654>)
 8010e2a:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010e2c:	4b21      	ldr	r3, [pc, #132]	; (8010eb4 <readCanToStructs+0x640>)
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7f7 f923 	bl	800807c <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e3a:	4a19      	ldr	r2, [pc, #100]	; (8010ea0 <readCanToStructs+0x62c>)
 8010e3c:	f240 4112 	movw	r1, #1042	; 0x412
 8010e40:	fb01 f303 	mul.w	r3, r1, r3
 8010e44:	4413      	add	r3, r2
 8010e46:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	701a      	strb	r2, [r3, #0]
				break;
 8010e4e:	f000 be47 	b.w	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8010e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e56:	4a12      	ldr	r2, [pc, #72]	; (8010ea0 <readCanToStructs+0x62c>)
 8010e58:	f240 4112 	movw	r1, #1042	; 0x412
 8010e5c:	fb01 f303 	mul.w	r3, r1, r3
 8010e60:	4413      	add	r3, r2
 8010e62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010e66:	2201      	movs	r2, #1
 8010e68:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8010e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e6e:	490c      	ldr	r1, [pc, #48]	; (8010ea0 <readCanToStructs+0x62c>)
 8010e70:	f240 4212 	movw	r2, #1042	; 0x412
 8010e74:	fb03 f202 	mul.w	r2, r3, r2
 8010e78:	440a      	add	r2, r1
 8010e7a:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8010e7e:	7812      	ldrb	r2, [r2, #0]
 8010e80:	3201      	adds	r2, #1
 8010e82:	b2d0      	uxtb	r0, r2
 8010e84:	4a06      	ldr	r2, [pc, #24]	; (8010ea0 <readCanToStructs+0x62c>)
 8010e86:	f240 4112 	movw	r1, #1042	; 0x412
 8010e8a:	fb01 f303 	mul.w	r3, r1, r3
 8010e8e:	4413      	add	r3, r2
 8010e90:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010e94:	4602      	mov	r2, r0
 8010e96:	701a      	strb	r2, [r3, #0]
				break;
 8010e98:	f000 be22 	b.w	8011ae0 <readCanToStructs+0x126c>
 8010e9c:	20005b50 	.word	0x20005b50
 8010ea0:	2000532c 	.word	0x2000532c
 8010ea4:	200028cc 	.word	0x200028cc
 8010ea8:	200028d4 	.word	0x200028d4
 8010eac:	2000065d 	.word	0x2000065d
 8010eb0:	08028f08 	.word	0x08028f08
 8010eb4:	2000189c 	.word	0x2000189c
 8010eb8:	08028f20 	.word	0x08028f20
 8010ebc:	20001794 	.word	0x20001794
 8010ec0:	08028f44 	.word	0x08028f44
 8010ec4:	20000108 	.word	0x20000108
 8010ec8:	20000e58 	.word	0x20000e58
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010ecc:	4b9f      	ldr	r3, [pc, #636]	; (801114c <readCanToStructs+0x8d8>)
 8010ece:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010ed0:	4b9f      	ldr	r3, [pc, #636]	; (8011150 <readCanToStructs+0x8dc>)
 8010ed2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ed6:	885b      	ldrh	r3, [r3, #2]
 8010ed8:	4a9d      	ldr	r2, [pc, #628]	; (8011150 <readCanToStructs+0x8dc>)
 8010eda:	011b      	lsls	r3, r3, #4
 8010edc:	4413      	add	r3, r2
 8010ede:	3304      	adds	r3, #4
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010ee6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d110      	bne.n	8010f10 <readCanToStructs+0x69c>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010eee:	2218      	movs	r2, #24
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ef4:	f013 fc48 	bl	8024788 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010efc:	4a95      	ldr	r2, [pc, #596]	; (8011154 <readCanToStructs+0x8e0>)
 8010efe:	f240 4112 	movw	r1, #1042	; 0x412
 8010f02:	fb01 f303 	mul.w	r3, r1, r3
 8010f06:	4413      	add	r3, r2
 8010f08:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f14:	4a8f      	ldr	r2, [pc, #572]	; (8011154 <readCanToStructs+0x8e0>)
 8010f16:	f240 4112 	movw	r1, #1042	; 0x412
 8010f1a:	fb01 f303 	mul.w	r3, r1, r3
 8010f1e:	4413      	add	r3, r2
 8010f20:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d015      	beq.n	8010f5a <readCanToStructs+0x6e6>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8010f2e:	488a      	ldr	r0, [pc, #552]	; (8011158 <readCanToStructs+0x8e4>)
 8010f30:	f013 fdae 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010f34:	2218      	movs	r2, #24
 8010f36:	2100      	movs	r1, #0
 8010f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f3a:	f013 fc25 	bl	8024788 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f42:	4a84      	ldr	r2, [pc, #528]	; (8011154 <readCanToStructs+0x8e0>)
 8010f44:	f240 4112 	movw	r1, #1042	; 0x412
 8010f48:	fb01 f303 	mul.w	r3, r1, r3
 8010f4c:	4413      	add	r3, r2
 8010f4e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010f52:	2200      	movs	r2, #0
 8010f54:	701a      	strb	r2, [r3, #0]
					break;
 8010f56:	f000 bdc3 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010f5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f5e:	4613      	mov	r3, r2
 8010f60:	00db      	lsls	r3, r3, #3
 8010f62:	1a9b      	subs	r3, r3, r2
 8010f64:	461a      	mov	r2, r3
 8010f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f68:	4413      	add	r3, r2
 8010f6a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f72:	e016      	b.n	8010fa2 <readCanToStructs+0x72e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010f74:	4b76      	ldr	r3, [pc, #472]	; (8011150 <readCanToStructs+0x8dc>)
 8010f76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f7a:	885b      	ldrh	r3, [r3, #2]
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f82:	4973      	ldr	r1, [pc, #460]	; (8011150 <readCanToStructs+0x8dc>)
 8010f84:	0112      	lsls	r2, r2, #4
 8010f86:	440a      	add	r2, r1
 8010f88:	4413      	add	r3, r2
 8010f8a:	3304      	adds	r3, #4
 8010f8c:	781a      	ldrb	r2, [r3, #0]
 8010f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f90:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f94:	3301      	adds	r3, #1
 8010f96:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010fa2:	4b6b      	ldr	r3, [pc, #428]	; (8011150 <readCanToStructs+0x8dc>)
 8010fa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fa8:	885b      	ldrh	r3, [r3, #2]
 8010faa:	4a69      	ldr	r2, [pc, #420]	; (8011150 <readCanToStructs+0x8dc>)
 8010fac:	011b      	lsls	r3, r3, #4
 8010fae:	4413      	add	r3, r2
 8010fb0:	330c      	adds	r3, #12
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d3db      	bcc.n	8010f74 <readCanToStructs+0x700>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fc0:	4a64      	ldr	r2, [pc, #400]	; (8011154 <readCanToStructs+0x8e0>)
 8010fc2:	f240 4112 	movw	r1, #1042	; 0x412
 8010fc6:	fb01 f303 	mul.w	r3, r1, r3
 8010fca:	4413      	add	r3, r2
 8010fcc:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	4613      	mov	r3, r2
 8010fd6:	00db      	lsls	r3, r3, #3
 8010fd8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010fda:	4b5d      	ldr	r3, [pc, #372]	; (8011150 <readCanToStructs+0x8dc>)
 8010fdc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fe0:	885b      	ldrh	r3, [r3, #2]
 8010fe2:	495b      	ldr	r1, [pc, #364]	; (8011150 <readCanToStructs+0x8dc>)
 8010fe4:	011b      	lsls	r3, r3, #4
 8010fe6:	440b      	add	r3, r1
 8010fe8:	330c      	adds	r3, #12
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	3b01      	subs	r3, #1
 8010fee:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010ff0:	2b17      	cmp	r3, #23
 8010ff2:	d932      	bls.n	801105a <readCanToStructs+0x7e6>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010ff4:	4b55      	ldr	r3, [pc, #340]	; (801114c <readCanToStructs+0x8d8>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	4413      	add	r3, r2
 8011000:	00db      	lsls	r3, r3, #3
 8011002:	4a56      	ldr	r2, [pc, #344]	; (801115c <readCanToStructs+0x8e8>)
 8011004:	4413      	add	r3, r2
 8011006:	2218      	movs	r2, #24
 8011008:	4950      	ldr	r1, [pc, #320]	; (801114c <readCanToStructs+0x8d8>)
 801100a:	4618      	mov	r0, r3
 801100c:	f013 fb94 	bl	8024738 <memcpy>
					if(Debug_flag == 1)
 8011010:	4b53      	ldr	r3, [pc, #332]	; (8011160 <readCanToStructs+0x8ec>)
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d105      	bne.n	8011024 <readCanToStructs+0x7b0>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011018:	4b4c      	ldr	r3, [pc, #304]	; (801114c <readCanToStructs+0x8d8>)
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	4619      	mov	r1, r3
 801101e:	4851      	ldr	r0, [pc, #324]	; (8011164 <readCanToStructs+0x8f0>)
 8011020:	f013 fc9a 	bl	8024958 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8011024:	f006 fc8e 	bl	8017944 <HAL_GetTick>
 8011028:	4603      	mov	r3, r0
 801102a:	4a4f      	ldr	r2, [pc, #316]	; (8011168 <readCanToStructs+0x8f4>)
 801102c:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 801102e:	4b4f      	ldr	r3, [pc, #316]	; (801116c <readCanToStructs+0x8f8>)
 8011030:	2201      	movs	r2, #1
 8011032:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011034:	4b45      	ldr	r3, [pc, #276]	; (801114c <readCanToStructs+0x8d8>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	4618      	mov	r0, r3
 801103a:	f7f7 f81f 	bl	800807c <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801103e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011042:	4a44      	ldr	r2, [pc, #272]	; (8011154 <readCanToStructs+0x8e0>)
 8011044:	f240 4112 	movw	r1, #1042	; 0x412
 8011048:	fb01 f303 	mul.w	r3, r1, r3
 801104c:	4413      	add	r3, r2
 801104e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011052:	2200      	movs	r2, #0
 8011054:	701a      	strb	r2, [r3, #0]
				break;
 8011056:	f000 bd43 	b.w	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 801105a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801105e:	4a3d      	ldr	r2, [pc, #244]	; (8011154 <readCanToStructs+0x8e0>)
 8011060:	f240 4112 	movw	r1, #1042	; 0x412
 8011064:	fb01 f303 	mul.w	r3, r1, r3
 8011068:	4413      	add	r3, r2
 801106a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801106e:	2201      	movs	r2, #1
 8011070:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011076:	4937      	ldr	r1, [pc, #220]	; (8011154 <readCanToStructs+0x8e0>)
 8011078:	f240 4212 	movw	r2, #1042	; 0x412
 801107c:	fb03 f202 	mul.w	r2, r3, r2
 8011080:	440a      	add	r2, r1
 8011082:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011086:	7812      	ldrb	r2, [r2, #0]
 8011088:	3201      	adds	r2, #1
 801108a:	b2d0      	uxtb	r0, r2
 801108c:	4a31      	ldr	r2, [pc, #196]	; (8011154 <readCanToStructs+0x8e0>)
 801108e:	f240 4112 	movw	r1, #1042	; 0x412
 8011092:	fb01 f303 	mul.w	r3, r1, r3
 8011096:	4413      	add	r3, r2
 8011098:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801109c:	4602      	mov	r2, r0
 801109e:	701a      	strb	r2, [r3, #0]
				break;
 80110a0:	f000 bd1e 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 80110a4:	4b32      	ldr	r3, [pc, #200]	; (8011170 <readCanToStructs+0x8fc>)
 80110a6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80110a8:	4b29      	ldr	r3, [pc, #164]	; (8011150 <readCanToStructs+0x8dc>)
 80110aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110ae:	885b      	ldrh	r3, [r3, #2]
 80110b0:	4a27      	ldr	r2, [pc, #156]	; (8011150 <readCanToStructs+0x8dc>)
 80110b2:	011b      	lsls	r3, r3, #4
 80110b4:	4413      	add	r3, r2
 80110b6:	3304      	adds	r3, #4
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80110be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d110      	bne.n	80110e8 <readCanToStructs+0x874>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80110c6:	2246      	movs	r2, #70	; 0x46
 80110c8:	2100      	movs	r1, #0
 80110ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110cc:	f013 fb5c 	bl	8024788 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80110d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110d4:	4a1f      	ldr	r2, [pc, #124]	; (8011154 <readCanToStructs+0x8e0>)
 80110d6:	f240 4112 	movw	r1, #1042	; 0x412
 80110da:	fb01 f303 	mul.w	r3, r1, r3
 80110de:	4413      	add	r3, r2
 80110e0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80110e4:	2200      	movs	r2, #0
 80110e6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 80110e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110ec:	4a19      	ldr	r2, [pc, #100]	; (8011154 <readCanToStructs+0x8e0>)
 80110ee:	f240 4112 	movw	r1, #1042	; 0x412
 80110f2:	fb01 f303 	mul.w	r3, r1, r3
 80110f6:	4413      	add	r3, r2
 80110f8:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011102:	429a      	cmp	r2, r3
 8011104:	d015      	beq.n	8011132 <readCanToStructs+0x8be>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8011106:	481b      	ldr	r0, [pc, #108]	; (8011174 <readCanToStructs+0x900>)
 8011108:	f013 fcc2 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801110c:	2246      	movs	r2, #70	; 0x46
 801110e:	2100      	movs	r1, #0
 8011110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011112:	f013 fb39 	bl	8024788 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801111a:	4a0e      	ldr	r2, [pc, #56]	; (8011154 <readCanToStructs+0x8e0>)
 801111c:	f240 4112 	movw	r1, #1042	; 0x412
 8011120:	fb01 f303 	mul.w	r3, r1, r3
 8011124:	4413      	add	r3, r2
 8011126:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801112a:	2200      	movs	r2, #0
 801112c:	701a      	strb	r2, [r3, #0]
					break;
 801112e:	f000 bcd7 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011132:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011136:	4613      	mov	r3, r2
 8011138:	00db      	lsls	r3, r3, #3
 801113a:	1a9b      	subs	r3, r3, r2
 801113c:	461a      	mov	r2, r3
 801113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011140:	4413      	add	r3, r2
 8011142:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011144:	2301      	movs	r3, #1
 8011146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801114a:	e02c      	b.n	80111a6 <readCanToStructs+0x932>
 801114c:	2000189c 	.word	0x2000189c
 8011150:	20005b50 	.word	0x20005b50
 8011154:	2000532c 	.word	0x2000532c
 8011158:	08028f54 	.word	0x08028f54
 801115c:	20001794 	.word	0x20001794
 8011160:	2000065d 	.word	0x2000065d
 8011164:	08028f78 	.word	0x08028f78
 8011168:	20000e58 	.word	0x20000e58
 801116c:	20000108 	.word	0x20000108
 8011170:	20001944 	.word	0x20001944
 8011174:	08028f88 	.word	0x08028f88
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011178:	4bb9      	ldr	r3, [pc, #740]	; (8011460 <readCanToStructs+0xbec>)
 801117a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801117e:	885b      	ldrh	r3, [r3, #2]
 8011180:	461a      	mov	r2, r3
 8011182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011186:	49b6      	ldr	r1, [pc, #728]	; (8011460 <readCanToStructs+0xbec>)
 8011188:	0112      	lsls	r2, r2, #4
 801118a:	440a      	add	r2, r1
 801118c:	4413      	add	r3, r2
 801118e:	3304      	adds	r3, #4
 8011190:	781a      	ldrb	r2, [r3, #0]
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011198:	3301      	adds	r3, #1
 801119a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801119c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111a0:	3301      	adds	r3, #1
 80111a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111a6:	4bae      	ldr	r3, [pc, #696]	; (8011460 <readCanToStructs+0xbec>)
 80111a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111ac:	885b      	ldrh	r3, [r3, #2]
 80111ae:	4aac      	ldr	r2, [pc, #688]	; (8011460 <readCanToStructs+0xbec>)
 80111b0:	011b      	lsls	r3, r3, #4
 80111b2:	4413      	add	r3, r2
 80111b4:	330c      	adds	r3, #12
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80111bc:	429a      	cmp	r2, r3
 80111be:	d3db      	bcc.n	8011178 <readCanToStructs+0x904>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 80111c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111c4:	4aa7      	ldr	r2, [pc, #668]	; (8011464 <readCanToStructs+0xbf0>)
 80111c6:	f240 4112 	movw	r1, #1042	; 0x412
 80111ca:	fb01 f303 	mul.w	r3, r1, r3
 80111ce:	4413      	add	r3, r2
 80111d0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	4613      	mov	r3, r2
 80111da:	00db      	lsls	r3, r3, #3
 80111dc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 80111de:	4ba0      	ldr	r3, [pc, #640]	; (8011460 <readCanToStructs+0xbec>)
 80111e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111e4:	885b      	ldrh	r3, [r3, #2]
 80111e6:	499e      	ldr	r1, [pc, #632]	; (8011460 <readCanToStructs+0xbec>)
 80111e8:	011b      	lsls	r3, r3, #4
 80111ea:	440b      	add	r3, r1
 80111ec:	330c      	adds	r3, #12
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	3b01      	subs	r3, #1
 80111f2:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 80111f4:	2b45      	cmp	r3, #69	; 0x45
 80111f6:	d93d      	bls.n	8011274 <readCanToStructs+0xa00>
					if(Debug_flag == 1)
 80111f8:	4b9b      	ldr	r3, [pc, #620]	; (8011468 <readCanToStructs+0xbf4>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d102      	bne.n	8011206 <readCanToStructs+0x992>
						printf("RCV V-Message-1\n");
 8011200:	489a      	ldr	r0, [pc, #616]	; (801146c <readCanToStructs+0xbf8>)
 8011202:	f013 fc45 	bl	8024a90 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011206:	2246      	movs	r2, #70	; 0x46
 8011208:	2100      	movs	r1, #0
 801120a:	4899      	ldr	r0, [pc, #612]	; (8011470 <readCanToStructs+0xbfc>)
 801120c:	f013 fabc 	bl	8024788 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011210:	4a97      	ldr	r2, [pc, #604]	; (8011470 <readCanToStructs+0xbfc>)
 8011212:	4b98      	ldr	r3, [pc, #608]	; (8011474 <readCanToStructs+0xc00>)
 8011214:	4610      	mov	r0, r2
 8011216:	4619      	mov	r1, r3
 8011218:	2346      	movs	r3, #70	; 0x46
 801121a:	461a      	mov	r2, r3
 801121c:	f013 fa8c 	bl	8024738 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011220:	4b95      	ldr	r3, [pc, #596]	; (8011478 <readCanToStructs+0xc04>)
 8011222:	2201      	movs	r2, #1
 8011224:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8011226:	4b92      	ldr	r3, [pc, #584]	; (8011470 <readCanToStructs+0xbfc>)
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	4619      	mov	r1, r3
 801122c:	4a93      	ldr	r2, [pc, #588]	; (801147c <readCanToStructs+0xc08>)
 801122e:	460b      	mov	r3, r1
 8011230:	005b      	lsls	r3, r3, #1
 8011232:	440b      	add	r3, r1
 8011234:	00db      	lsls	r3, r3, #3
 8011236:	4413      	add	r3, r2
 8011238:	3304      	adds	r3, #4
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d00b      	beq.n	8011258 <readCanToStructs+0x9e4>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8011240:	4b8b      	ldr	r3, [pc, #556]	; (8011470 <readCanToStructs+0xbfc>)
 8011242:	889b      	ldrh	r3, [r3, #4]
 8011244:	b2d9      	uxtb	r1, r3
 8011246:	4b8a      	ldr	r3, [pc, #552]	; (8011470 <readCanToStructs+0xbfc>)
 8011248:	881b      	ldrh	r3, [r3, #0]
 801124a:	b2da      	uxtb	r2, r3
 801124c:	4b88      	ldr	r3, [pc, #544]	; (8011470 <readCanToStructs+0xbfc>)
 801124e:	885b      	ldrh	r3, [r3, #2]
 8011250:	b2db      	uxtb	r3, r3
 8011252:	488b      	ldr	r0, [pc, #556]	; (8011480 <readCanToStructs+0xc0c>)
 8011254:	f7f3 fac8 	bl	80047e8 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801125c:	4a81      	ldr	r2, [pc, #516]	; (8011464 <readCanToStructs+0xbf0>)
 801125e:	f240 4112 	movw	r1, #1042	; 0x412
 8011262:	fb01 f303 	mul.w	r3, r1, r3
 8011266:	4413      	add	r3, r2
 8011268:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801126c:	2200      	movs	r2, #0
 801126e:	701a      	strb	r2, [r3, #0]
				break;
 8011270:	f000 bc36 	b.w	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 8011274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011278:	4a7a      	ldr	r2, [pc, #488]	; (8011464 <readCanToStructs+0xbf0>)
 801127a:	f240 4112 	movw	r1, #1042	; 0x412
 801127e:	fb01 f303 	mul.w	r3, r1, r3
 8011282:	4413      	add	r3, r2
 8011284:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011288:	2201      	movs	r2, #1
 801128a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 801128c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011290:	4974      	ldr	r1, [pc, #464]	; (8011464 <readCanToStructs+0xbf0>)
 8011292:	f240 4212 	movw	r2, #1042	; 0x412
 8011296:	fb03 f202 	mul.w	r2, r3, r2
 801129a:	440a      	add	r2, r1
 801129c:	f202 4207 	addw	r2, r2, #1031	; 0x407
 80112a0:	7812      	ldrb	r2, [r2, #0]
 80112a2:	3201      	adds	r2, #1
 80112a4:	b2d0      	uxtb	r0, r2
 80112a6:	4a6f      	ldr	r2, [pc, #444]	; (8011464 <readCanToStructs+0xbf0>)
 80112a8:	f240 4112 	movw	r1, #1042	; 0x412
 80112ac:	fb01 f303 	mul.w	r3, r1, r3
 80112b0:	4413      	add	r3, r2
 80112b2:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80112b6:	4602      	mov	r2, r0
 80112b8:	701a      	strb	r2, [r3, #0]
				break;
 80112ba:	f000 bc11 	b.w	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 80112be:	4b6d      	ldr	r3, [pc, #436]	; (8011474 <readCanToStructs+0xc00>)
 80112c0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80112c2:	4b67      	ldr	r3, [pc, #412]	; (8011460 <readCanToStructs+0xbec>)
 80112c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112c8:	885b      	ldrh	r3, [r3, #2]
 80112ca:	4a65      	ldr	r2, [pc, #404]	; (8011460 <readCanToStructs+0xbec>)
 80112cc:	011b      	lsls	r3, r3, #4
 80112ce:	4413      	add	r3, r2
 80112d0:	3304      	adds	r3, #4
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80112d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d110      	bne.n	8011302 <readCanToStructs+0xa8e>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80112e0:	2246      	movs	r2, #70	; 0x46
 80112e2:	2100      	movs	r1, #0
 80112e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112e6:	f013 fa4f 	bl	8024788 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80112ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112ee:	4a5d      	ldr	r2, [pc, #372]	; (8011464 <readCanToStructs+0xbf0>)
 80112f0:	f240 4112 	movw	r1, #1042	; 0x412
 80112f4:	fb01 f303 	mul.w	r3, r1, r3
 80112f8:	4413      	add	r3, r2
 80112fa:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80112fe:	2200      	movs	r2, #0
 8011300:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8011302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011306:	4a57      	ldr	r2, [pc, #348]	; (8011464 <readCanToStructs+0xbf0>)
 8011308:	f240 4112 	movw	r1, #1042	; 0x412
 801130c:	fb01 f303 	mul.w	r3, r1, r3
 8011310:	4413      	add	r3, r2
 8011312:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801131c:	429a      	cmp	r2, r3
 801131e:	d014      	beq.n	801134a <readCanToStructs+0xad6>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8011320:	4858      	ldr	r0, [pc, #352]	; (8011484 <readCanToStructs+0xc10>)
 8011322:	f013 fbb5 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011326:	2246      	movs	r2, #70	; 0x46
 8011328:	2100      	movs	r1, #0
 801132a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801132c:	f013 fa2c 	bl	8024788 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011334:	4a4b      	ldr	r2, [pc, #300]	; (8011464 <readCanToStructs+0xbf0>)
 8011336:	f240 4112 	movw	r1, #1042	; 0x412
 801133a:	fb01 f303 	mul.w	r3, r1, r3
 801133e:	4413      	add	r3, r2
 8011340:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011344:	2200      	movs	r2, #0
 8011346:	701a      	strb	r2, [r3, #0]
					break;
 8011348:	e3ca      	b.n	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 801134a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801134e:	4613      	mov	r3, r2
 8011350:	00db      	lsls	r3, r3, #3
 8011352:	1a9b      	subs	r3, r3, r2
 8011354:	461a      	mov	r2, r3
 8011356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011358:	4413      	add	r3, r2
 801135a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801135c:	2301      	movs	r3, #1
 801135e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011362:	e016      	b.n	8011392 <readCanToStructs+0xb1e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011364:	4b3e      	ldr	r3, [pc, #248]	; (8011460 <readCanToStructs+0xbec>)
 8011366:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801136a:	885b      	ldrh	r3, [r3, #2]
 801136c:	461a      	mov	r2, r3
 801136e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011372:	493b      	ldr	r1, [pc, #236]	; (8011460 <readCanToStructs+0xbec>)
 8011374:	0112      	lsls	r2, r2, #4
 8011376:	440a      	add	r2, r1
 8011378:	4413      	add	r3, r2
 801137a:	3304      	adds	r3, #4
 801137c:	781a      	ldrb	r2, [r3, #0]
 801137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011380:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011384:	3301      	adds	r3, #1
 8011386:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801138c:	3301      	adds	r3, #1
 801138e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011392:	4b33      	ldr	r3, [pc, #204]	; (8011460 <readCanToStructs+0xbec>)
 8011394:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011398:	885b      	ldrh	r3, [r3, #2]
 801139a:	4a31      	ldr	r2, [pc, #196]	; (8011460 <readCanToStructs+0xbec>)
 801139c:	011b      	lsls	r3, r3, #4
 801139e:	4413      	add	r3, r2
 80113a0:	330c      	adds	r3, #12
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d3db      	bcc.n	8011364 <readCanToStructs+0xaf0>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 80113ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113b0:	4a2c      	ldr	r2, [pc, #176]	; (8011464 <readCanToStructs+0xbf0>)
 80113b2:	f240 4112 	movw	r1, #1042	; 0x412
 80113b6:	fb01 f303 	mul.w	r3, r1, r3
 80113ba:	4413      	add	r3, r2
 80113bc:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	461a      	mov	r2, r3
 80113c4:	4613      	mov	r3, r2
 80113c6:	00db      	lsls	r3, r3, #3
 80113c8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 80113ca:	4b25      	ldr	r3, [pc, #148]	; (8011460 <readCanToStructs+0xbec>)
 80113cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113d0:	885b      	ldrh	r3, [r3, #2]
 80113d2:	4923      	ldr	r1, [pc, #140]	; (8011460 <readCanToStructs+0xbec>)
 80113d4:	011b      	lsls	r3, r3, #4
 80113d6:	440b      	add	r3, r1
 80113d8:	330c      	adds	r3, #12
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	3b01      	subs	r3, #1
 80113de:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 80113e0:	2b45      	cmp	r3, #69	; 0x45
 80113e2:	d953      	bls.n	801148c <readCanToStructs+0xc18>
					if(Debug_flag == 1)
 80113e4:	4b20      	ldr	r3, [pc, #128]	; (8011468 <readCanToStructs+0xbf4>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d102      	bne.n	80113f2 <readCanToStructs+0xb7e>
						printf("RCV V-Message-2\n");
 80113ec:	4826      	ldr	r0, [pc, #152]	; (8011488 <readCanToStructs+0xc14>)
 80113ee:	f013 fb4f 	bl	8024a90 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80113f2:	2246      	movs	r2, #70	; 0x46
 80113f4:	2100      	movs	r1, #0
 80113f6:	481e      	ldr	r0, [pc, #120]	; (8011470 <readCanToStructs+0xbfc>)
 80113f8:	f013 f9c6 	bl	8024788 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80113fc:	4a1c      	ldr	r2, [pc, #112]	; (8011470 <readCanToStructs+0xbfc>)
 80113fe:	4b1d      	ldr	r3, [pc, #116]	; (8011474 <readCanToStructs+0xc00>)
 8011400:	4610      	mov	r0, r2
 8011402:	4619      	mov	r1, r3
 8011404:	2346      	movs	r3, #70	; 0x46
 8011406:	461a      	mov	r2, r3
 8011408:	f013 f996 	bl	8024738 <memcpy>
					Is_CAN_Exchange_happening = YES;
 801140c:	4b1a      	ldr	r3, [pc, #104]	; (8011478 <readCanToStructs+0xc04>)
 801140e:	2201      	movs	r2, #1
 8011410:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8011412:	4b17      	ldr	r3, [pc, #92]	; (8011470 <readCanToStructs+0xbfc>)
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	4619      	mov	r1, r3
 8011418:	4a18      	ldr	r2, [pc, #96]	; (801147c <readCanToStructs+0xc08>)
 801141a:	460b      	mov	r3, r1
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	440b      	add	r3, r1
 8011420:	00db      	lsls	r3, r3, #3
 8011422:	4413      	add	r3, r2
 8011424:	3303      	adds	r3, #3
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	2b01      	cmp	r3, #1
 801142a:	d00b      	beq.n	8011444 <readCanToStructs+0xbd0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 801142c:	4b10      	ldr	r3, [pc, #64]	; (8011470 <readCanToStructs+0xbfc>)
 801142e:	889b      	ldrh	r3, [r3, #4]
 8011430:	b2d9      	uxtb	r1, r3
 8011432:	4b0f      	ldr	r3, [pc, #60]	; (8011470 <readCanToStructs+0xbfc>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	b2da      	uxtb	r2, r3
 8011438:	4b0d      	ldr	r3, [pc, #52]	; (8011470 <readCanToStructs+0xbfc>)
 801143a:	885b      	ldrh	r3, [r3, #2]
 801143c:	b2db      	uxtb	r3, r3
 801143e:	4810      	ldr	r0, [pc, #64]	; (8011480 <readCanToStructs+0xc0c>)
 8011440:	f7f3 f9d2 	bl	80047e8 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011448:	4a06      	ldr	r2, [pc, #24]	; (8011464 <readCanToStructs+0xbf0>)
 801144a:	f240 4112 	movw	r1, #1042	; 0x412
 801144e:	fb01 f303 	mul.w	r3, r1, r3
 8011452:	4413      	add	r3, r2
 8011454:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011458:	2200      	movs	r2, #0
 801145a:	701a      	strb	r2, [r3, #0]
				break;
 801145c:	e340      	b.n	8011ae0 <readCanToStructs+0x126c>
 801145e:	bf00      	nop
 8011460:	20005b50 	.word	0x20005b50
 8011464:	2000532c 	.word	0x2000532c
 8011468:	2000065d 	.word	0x2000065d
 801146c:	08028fac 	.word	0x08028fac
 8011470:	200018fc 	.word	0x200018fc
 8011474:	20001944 	.word	0x20001944
 8011478:	20000108 	.word	0x20000108
 801147c:	200016a4 	.word	0x200016a4
 8011480:	20001902 	.word	0x20001902
 8011484:	08028fbc 	.word	0x08028fbc
 8011488:	08028fe0 	.word	0x08028fe0
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 801148c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011490:	4a9f      	ldr	r2, [pc, #636]	; (8011710 <readCanToStructs+0xe9c>)
 8011492:	f240 4112 	movw	r1, #1042	; 0x412
 8011496:	fb01 f303 	mul.w	r3, r1, r3
 801149a:	4413      	add	r3, r2
 801149c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80114a0:	2201      	movs	r2, #1
 80114a2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 80114a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114a8:	4999      	ldr	r1, [pc, #612]	; (8011710 <readCanToStructs+0xe9c>)
 80114aa:	f240 4212 	movw	r2, #1042	; 0x412
 80114ae:	fb03 f202 	mul.w	r2, r3, r2
 80114b2:	440a      	add	r2, r1
 80114b4:	f202 4209 	addw	r2, r2, #1033	; 0x409
 80114b8:	7812      	ldrb	r2, [r2, #0]
 80114ba:	3201      	adds	r2, #1
 80114bc:	b2d0      	uxtb	r0, r2
 80114be:	4a94      	ldr	r2, [pc, #592]	; (8011710 <readCanToStructs+0xe9c>)
 80114c0:	f240 4112 	movw	r1, #1042	; 0x412
 80114c4:	fb01 f303 	mul.w	r3, r1, r3
 80114c8:	4413      	add	r3, r2
 80114ca:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80114ce:	4602      	mov	r2, r0
 80114d0:	701a      	strb	r2, [r3, #0]
				break;
 80114d2:	e305      	b.n	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 80114d4:	4b8f      	ldr	r3, [pc, #572]	; (8011714 <readCanToStructs+0xea0>)
 80114d6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80114d8:	4b8f      	ldr	r3, [pc, #572]	; (8011718 <readCanToStructs+0xea4>)
 80114da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114de:	885b      	ldrh	r3, [r3, #2]
 80114e0:	4a8d      	ldr	r2, [pc, #564]	; (8011718 <readCanToStructs+0xea4>)
 80114e2:	011b      	lsls	r3, r3, #4
 80114e4:	4413      	add	r3, r2
 80114e6:	3304      	adds	r3, #4
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80114ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d110      	bne.n	8011518 <readCanToStructs+0xca4>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80114f6:	2208      	movs	r2, #8
 80114f8:	2100      	movs	r1, #0
 80114fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114fc:	f013 f944 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011504:	4a82      	ldr	r2, [pc, #520]	; (8011710 <readCanToStructs+0xe9c>)
 8011506:	f240 4112 	movw	r1, #1042	; 0x412
 801150a:	fb01 f303 	mul.w	r3, r1, r3
 801150e:	4413      	add	r3, r2
 8011510:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011514:	2200      	movs	r2, #0
 8011516:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801151c:	4a7c      	ldr	r2, [pc, #496]	; (8011710 <readCanToStructs+0xe9c>)
 801151e:	f240 4112 	movw	r1, #1042	; 0x412
 8011522:	fb01 f303 	mul.w	r3, r1, r3
 8011526:	4413      	add	r3, r2
 8011528:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011532:	429a      	cmp	r2, r3
 8011534:	d014      	beq.n	8011560 <readCanToStructs+0xcec>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011536:	4879      	ldr	r0, [pc, #484]	; (801171c <readCanToStructs+0xea8>)
 8011538:	f013 faaa 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 801153c:	2208      	movs	r2, #8
 801153e:	2100      	movs	r1, #0
 8011540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011542:	f013 f921 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801154a:	4a71      	ldr	r2, [pc, #452]	; (8011710 <readCanToStructs+0xe9c>)
 801154c:	f240 4112 	movw	r1, #1042	; 0x412
 8011550:	fb01 f303 	mul.w	r3, r1, r3
 8011554:	4413      	add	r3, r2
 8011556:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801155a:	2200      	movs	r2, #0
 801155c:	701a      	strb	r2, [r3, #0]
					break;
 801155e:	e2bf      	b.n	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011560:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011564:	4613      	mov	r3, r2
 8011566:	00db      	lsls	r3, r3, #3
 8011568:	1a9b      	subs	r3, r3, r2
 801156a:	461a      	mov	r2, r3
 801156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156e:	4413      	add	r3, r2
 8011570:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011572:	2301      	movs	r3, #1
 8011574:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011578:	e016      	b.n	80115a8 <readCanToStructs+0xd34>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801157a:	4b67      	ldr	r3, [pc, #412]	; (8011718 <readCanToStructs+0xea4>)
 801157c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011580:	885b      	ldrh	r3, [r3, #2]
 8011582:	461a      	mov	r2, r3
 8011584:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011588:	4963      	ldr	r1, [pc, #396]	; (8011718 <readCanToStructs+0xea4>)
 801158a:	0112      	lsls	r2, r2, #4
 801158c:	440a      	add	r2, r1
 801158e:	4413      	add	r3, r2
 8011590:	3304      	adds	r3, #4
 8011592:	781a      	ldrb	r2, [r3, #0]
 8011594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011596:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159a:	3301      	adds	r3, #1
 801159c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801159e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115a2:	3301      	adds	r3, #1
 80115a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80115a8:	4b5b      	ldr	r3, [pc, #364]	; (8011718 <readCanToStructs+0xea4>)
 80115aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115ae:	885b      	ldrh	r3, [r3, #2]
 80115b0:	4a59      	ldr	r2, [pc, #356]	; (8011718 <readCanToStructs+0xea4>)
 80115b2:	011b      	lsls	r3, r3, #4
 80115b4:	4413      	add	r3, r2
 80115b6:	330c      	adds	r3, #12
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80115be:	429a      	cmp	r2, r3
 80115c0:	d3db      	bcc.n	801157a <readCanToStructs+0xd06>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 80115c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115c6:	4a52      	ldr	r2, [pc, #328]	; (8011710 <readCanToStructs+0xe9c>)
 80115c8:	f240 4112 	movw	r1, #1042	; 0x412
 80115cc:	fb01 f303 	mul.w	r3, r1, r3
 80115d0:	4413      	add	r3, r2
 80115d2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	461a      	mov	r2, r3
 80115da:	4613      	mov	r3, r2
 80115dc:	00db      	lsls	r3, r3, #3
 80115de:	1a9a      	subs	r2, r3, r2
 80115e0:	4b4d      	ldr	r3, [pc, #308]	; (8011718 <readCanToStructs+0xea4>)
 80115e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115e6:	885b      	ldrh	r3, [r3, #2]
 80115e8:	494b      	ldr	r1, [pc, #300]	; (8011718 <readCanToStructs+0xea4>)
 80115ea:	011b      	lsls	r3, r3, #4
 80115ec:	440b      	add	r3, r1
 80115ee:	330c      	adds	r3, #12
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	3b01      	subs	r3, #1
 80115f4:	4413      	add	r3, r2
 80115f6:	2b07      	cmp	r3, #7
 80115f8:	d912      	bls.n	8011620 <readCanToStructs+0xdac>
					printf("Received Fault Injection Data\n");
 80115fa:	4849      	ldr	r0, [pc, #292]	; (8011720 <readCanToStructs+0xeac>)
 80115fc:	f013 fa48 	bl	8024a90 <puts>
					Is_CAN_Exchange_happening = YES;
 8011600:	4b48      	ldr	r3, [pc, #288]	; (8011724 <readCanToStructs+0xeb0>)
 8011602:	2201      	movs	r2, #1
 8011604:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801160a:	4a41      	ldr	r2, [pc, #260]	; (8011710 <readCanToStructs+0xe9c>)
 801160c:	f240 4112 	movw	r1, #1042	; 0x412
 8011610:	fb01 f303 	mul.w	r3, r1, r3
 8011614:	4413      	add	r3, r2
 8011616:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801161a:	2200      	movs	r2, #0
 801161c:	701a      	strb	r2, [r3, #0]
				break;
 801161e:	e25f      	b.n	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8011620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011624:	4a3a      	ldr	r2, [pc, #232]	; (8011710 <readCanToStructs+0xe9c>)
 8011626:	f240 4112 	movw	r1, #1042	; 0x412
 801162a:	fb01 f303 	mul.w	r3, r1, r3
 801162e:	4413      	add	r3, r2
 8011630:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8011634:	2201      	movs	r2, #1
 8011636:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8011638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801163c:	4934      	ldr	r1, [pc, #208]	; (8011710 <readCanToStructs+0xe9c>)
 801163e:	f240 4212 	movw	r2, #1042	; 0x412
 8011642:	fb03 f202 	mul.w	r2, r3, r2
 8011646:	440a      	add	r2, r1
 8011648:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801164c:	7812      	ldrb	r2, [r2, #0]
 801164e:	3201      	adds	r2, #1
 8011650:	b2d0      	uxtb	r0, r2
 8011652:	4a2f      	ldr	r2, [pc, #188]	; (8011710 <readCanToStructs+0xe9c>)
 8011654:	f240 4112 	movw	r1, #1042	; 0x412
 8011658:	fb01 f303 	mul.w	r3, r1, r3
 801165c:	4413      	add	r3, r2
 801165e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011662:	4602      	mov	r2, r0
 8011664:	701a      	strb	r2, [r3, #0]
				break;
 8011666:	e23b      	b.n	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8011668:	4b2f      	ldr	r3, [pc, #188]	; (8011728 <readCanToStructs+0xeb4>)
 801166a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801166c:	4b2a      	ldr	r3, [pc, #168]	; (8011718 <readCanToStructs+0xea4>)
 801166e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011672:	885b      	ldrh	r3, [r3, #2]
 8011674:	4a28      	ldr	r2, [pc, #160]	; (8011718 <readCanToStructs+0xea4>)
 8011676:	011b      	lsls	r3, r3, #4
 8011678:	4413      	add	r3, r2
 801167a:	3304      	adds	r3, #4
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011682:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011686:	2b00      	cmp	r3, #0
 8011688:	d110      	bne.n	80116ac <readCanToStructs+0xe38>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 801168a:	2214      	movs	r2, #20
 801168c:	2100      	movs	r1, #0
 801168e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011690:	f013 f87a 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011698:	4a1d      	ldr	r2, [pc, #116]	; (8011710 <readCanToStructs+0xe9c>)
 801169a:	f240 4112 	movw	r1, #1042	; 0x412
 801169e:	fb01 f303 	mul.w	r3, r1, r3
 80116a2:	4413      	add	r3, r2
 80116a4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80116a8:	2200      	movs	r2, #0
 80116aa:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80116ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116b0:	4a17      	ldr	r2, [pc, #92]	; (8011710 <readCanToStructs+0xe9c>)
 80116b2:	f240 4112 	movw	r1, #1042	; 0x412
 80116b6:	fb01 f303 	mul.w	r3, r1, r3
 80116ba:	4413      	add	r3, r2
 80116bc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d014      	beq.n	80116f4 <readCanToStructs+0xe80>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 80116ca:	4818      	ldr	r0, [pc, #96]	; (801172c <readCanToStructs+0xeb8>)
 80116cc:	f013 f9e0 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80116d0:	2214      	movs	r2, #20
 80116d2:	2100      	movs	r1, #0
 80116d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116d6:	f013 f857 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80116da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116de:	4a0c      	ldr	r2, [pc, #48]	; (8011710 <readCanToStructs+0xe9c>)
 80116e0:	f240 4112 	movw	r1, #1042	; 0x412
 80116e4:	fb01 f303 	mul.w	r3, r1, r3
 80116e8:	4413      	add	r3, r2
 80116ea:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80116ee:	2200      	movs	r2, #0
 80116f0:	701a      	strb	r2, [r3, #0]
					break;
 80116f2:	e1f5      	b.n	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 80116f4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80116f8:	4613      	mov	r3, r2
 80116fa:	00db      	lsls	r3, r3, #3
 80116fc:	1a9b      	subs	r3, r3, r2
 80116fe:	461a      	mov	r2, r3
 8011700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011702:	4413      	add	r3, r2
 8011704:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011706:	2301      	movs	r3, #1
 8011708:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801170c:	e027      	b.n	801175e <readCanToStructs+0xeea>
 801170e:	bf00      	nop
 8011710:	2000532c 	.word	0x2000532c
 8011714:	2000198c 	.word	0x2000198c
 8011718:	20005b50 	.word	0x20005b50
 801171c:	08028ff0 	.word	0x08028ff0
 8011720:	08029010 	.word	0x08029010
 8011724:	20000108 	.word	0x20000108
 8011728:	20002054 	.word	0x20002054
 801172c:	08029030 	.word	0x08029030
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011730:	4bb9      	ldr	r3, [pc, #740]	; (8011a18 <readCanToStructs+0x11a4>)
 8011732:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011736:	885b      	ldrh	r3, [r3, #2]
 8011738:	461a      	mov	r2, r3
 801173a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801173e:	49b6      	ldr	r1, [pc, #728]	; (8011a18 <readCanToStructs+0x11a4>)
 8011740:	0112      	lsls	r2, r2, #4
 8011742:	440a      	add	r2, r1
 8011744:	4413      	add	r3, r2
 8011746:	3304      	adds	r3, #4
 8011748:	781a      	ldrb	r2, [r3, #0]
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011750:	3301      	adds	r3, #1
 8011752:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011758:	3301      	adds	r3, #1
 801175a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801175e:	4bae      	ldr	r3, [pc, #696]	; (8011a18 <readCanToStructs+0x11a4>)
 8011760:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011764:	885b      	ldrh	r3, [r3, #2]
 8011766:	4aac      	ldr	r2, [pc, #688]	; (8011a18 <readCanToStructs+0x11a4>)
 8011768:	011b      	lsls	r3, r3, #4
 801176a:	4413      	add	r3, r2
 801176c:	330c      	adds	r3, #12
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011774:	429a      	cmp	r2, r3
 8011776:	d3db      	bcc.n	8011730 <readCanToStructs+0xebc>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801177c:	4aa7      	ldr	r2, [pc, #668]	; (8011a1c <readCanToStructs+0x11a8>)
 801177e:	f240 4112 	movw	r1, #1042	; 0x412
 8011782:	fb01 f303 	mul.w	r3, r1, r3
 8011786:	4413      	add	r3, r2
 8011788:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	4613      	mov	r3, r2
 8011792:	00db      	lsls	r3, r3, #3
 8011794:	1a9a      	subs	r2, r3, r2
 8011796:	4ba0      	ldr	r3, [pc, #640]	; (8011a18 <readCanToStructs+0x11a4>)
 8011798:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801179c:	885b      	ldrh	r3, [r3, #2]
 801179e:	499e      	ldr	r1, [pc, #632]	; (8011a18 <readCanToStructs+0x11a4>)
 80117a0:	011b      	lsls	r3, r3, #4
 80117a2:	440b      	add	r3, r1
 80117a4:	330c      	adds	r3, #12
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	3b01      	subs	r3, #1
 80117aa:	4413      	add	r3, r2
 80117ac:	2b13      	cmp	r3, #19
 80117ae:	d954      	bls.n	801185a <readCanToStructs+0xfe6>
					uint16_t CRC16 = 0;
 80117b0:	2300      	movs	r3, #0
 80117b2:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 80117b4:	2300      	movs	r3, #0
 80117b6:	603b      	str	r3, [r7, #0]
 80117b8:	1d3b      	adds	r3, r7, #4
 80117ba:	2224      	movs	r2, #36	; 0x24
 80117bc:	2100      	movs	r1, #0
 80117be:	4618      	mov	r0, r3
 80117c0:	f012 ffe2 	bl	8024788 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80117c4:	463b      	mov	r3, r7
 80117c6:	2214      	movs	r2, #20
 80117c8:	4995      	ldr	r1, [pc, #596]	; (8011a20 <readCanToStructs+0x11ac>)
 80117ca:	4618      	mov	r0, r3
 80117cc:	f012 ffb4 	bl	8024738 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80117d0:	463b      	mov	r3, r7
 80117d2:	2214      	movs	r2, #20
 80117d4:	4619      	mov	r1, r3
 80117d6:	2000      	movs	r0, #0
 80117d8:	f002 fa92 	bl	8013d00 <GetCRC16>
 80117dc:	4603      	mov	r3, r0
 80117de:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 80117e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d10c      	bne.n	8011800 <readCanToStructs+0xf8c>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80117e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117ea:	4a8c      	ldr	r2, [pc, #560]	; (8011a1c <readCanToStructs+0x11a8>)
 80117ec:	f240 4112 	movw	r1, #1042	; 0x412
 80117f0:	fb01 f303 	mul.w	r3, r1, r3
 80117f4:	4413      	add	r3, r2
 80117f6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80117fa:	2200      	movs	r2, #0
 80117fc:	701a      	strb	r2, [r3, #0]
				break;
 80117fe:	e16f      	b.n	8011ae0 <readCanToStructs+0x126c>
						if(Debug_flag == 1)
 8011800:	4b88      	ldr	r3, [pc, #544]	; (8011a24 <readCanToStructs+0x11b0>)
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b01      	cmp	r3, #1
 8011806:	d10a      	bne.n	801181e <readCanToStructs+0xfaa>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8011808:	4b85      	ldr	r3, [pc, #532]	; (8011a20 <readCanToStructs+0x11ac>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	4a86      	ldr	r2, [pc, #536]	; (8011a28 <readCanToStructs+0x11b4>)
 801180e:	3366      	adds	r3, #102	; 0x66
 8011810:	009b      	lsls	r3, r3, #2
 8011812:	4413      	add	r3, r2
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	4619      	mov	r1, r3
 8011818:	4884      	ldr	r0, [pc, #528]	; (8011a2c <readCanToStructs+0x11b8>)
 801181a:	f013 f89d 	bl	8024958 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 801181e:	4b80      	ldr	r3, [pc, #512]	; (8011a20 <readCanToStructs+0x11ac>)
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	461a      	mov	r2, r3
 8011824:	4613      	mov	r3, r2
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	4413      	add	r3, r2
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	4a80      	ldr	r2, [pc, #512]	; (8011a30 <readCanToStructs+0x11bc>)
 801182e:	4413      	add	r3, r2
 8011830:	2214      	movs	r2, #20
 8011832:	497b      	ldr	r1, [pc, #492]	; (8011a20 <readCanToStructs+0x11ac>)
 8011834:	4618      	mov	r0, r3
 8011836:	f012 ff7f 	bl	8024738 <memcpy>
						Is_CAN_Exchange_happening = YES;
 801183a:	4b7e      	ldr	r3, [pc, #504]	; (8011a34 <readCanToStructs+0x11c0>)
 801183c:	2201      	movs	r2, #1
 801183e:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011844:	4a75      	ldr	r2, [pc, #468]	; (8011a1c <readCanToStructs+0x11a8>)
 8011846:	f240 4112 	movw	r1, #1042	; 0x412
 801184a:	fb01 f303 	mul.w	r3, r1, r3
 801184e:	4413      	add	r3, r2
 8011850:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011854:	2200      	movs	r2, #0
 8011856:	701a      	strb	r2, [r3, #0]
				break;
 8011858:	e142      	b.n	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 801185a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801185e:	4a6f      	ldr	r2, [pc, #444]	; (8011a1c <readCanToStructs+0x11a8>)
 8011860:	f240 4112 	movw	r1, #1042	; 0x412
 8011864:	fb01 f303 	mul.w	r3, r1, r3
 8011868:	4413      	add	r3, r2
 801186a:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 801186e:	2201      	movs	r2, #1
 8011870:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011876:	4969      	ldr	r1, [pc, #420]	; (8011a1c <readCanToStructs+0x11a8>)
 8011878:	f240 4212 	movw	r2, #1042	; 0x412
 801187c:	fb03 f202 	mul.w	r2, r3, r2
 8011880:	440a      	add	r2, r1
 8011882:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8011886:	7812      	ldrb	r2, [r2, #0]
 8011888:	3201      	adds	r2, #1
 801188a:	b2d0      	uxtb	r0, r2
 801188c:	4a63      	ldr	r2, [pc, #396]	; (8011a1c <readCanToStructs+0x11a8>)
 801188e:	f240 4112 	movw	r1, #1042	; 0x412
 8011892:	fb01 f303 	mul.w	r3, r1, r3
 8011896:	4413      	add	r3, r2
 8011898:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801189c:	4602      	mov	r2, r0
 801189e:	701a      	strb	r2, [r3, #0]
				break;
 80118a0:	e11e      	b.n	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 80118a2:	4b5f      	ldr	r3, [pc, #380]	; (8011a20 <readCanToStructs+0x11ac>)
 80118a4:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80118a6:	4b5c      	ldr	r3, [pc, #368]	; (8011a18 <readCanToStructs+0x11a4>)
 80118a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118ac:	885b      	ldrh	r3, [r3, #2]
 80118ae:	4a5a      	ldr	r2, [pc, #360]	; (8011a18 <readCanToStructs+0x11a4>)
 80118b0:	011b      	lsls	r3, r3, #4
 80118b2:	4413      	add	r3, r2
 80118b4:	3304      	adds	r3, #4
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80118bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d110      	bne.n	80118e6 <readCanToStructs+0x1072>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80118c4:	2214      	movs	r2, #20
 80118c6:	2100      	movs	r1, #0
 80118c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118ca:	f012 ff5d 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80118ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118d2:	4a52      	ldr	r2, [pc, #328]	; (8011a1c <readCanToStructs+0x11a8>)
 80118d4:	f240 4112 	movw	r1, #1042	; 0x412
 80118d8:	fb01 f303 	mul.w	r3, r1, r3
 80118dc:	4413      	add	r3, r2
 80118de:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80118e2:	2200      	movs	r2, #0
 80118e4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80118e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118ea:	4a4c      	ldr	r2, [pc, #304]	; (8011a1c <readCanToStructs+0x11a8>)
 80118ec:	f240 4112 	movw	r1, #1042	; 0x412
 80118f0:	fb01 f303 	mul.w	r3, r1, r3
 80118f4:	4413      	add	r3, r2
 80118f6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011900:	429a      	cmp	r2, r3
 8011902:	d014      	beq.n	801192e <readCanToStructs+0x10ba>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8011904:	484c      	ldr	r0, [pc, #304]	; (8011a38 <readCanToStructs+0x11c4>)
 8011906:	f013 f8c3 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 801190a:	2214      	movs	r2, #20
 801190c:	2100      	movs	r1, #0
 801190e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011910:	f012 ff3a 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011918:	4a40      	ldr	r2, [pc, #256]	; (8011a1c <readCanToStructs+0x11a8>)
 801191a:	f240 4112 	movw	r1, #1042	; 0x412
 801191e:	fb01 f303 	mul.w	r3, r1, r3
 8011922:	4413      	add	r3, r2
 8011924:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011928:	2200      	movs	r2, #0
 801192a:	701a      	strb	r2, [r3, #0]
					break;
 801192c:	e0d8      	b.n	8011ae0 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 801192e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011932:	4613      	mov	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	1a9b      	subs	r3, r3, r2
 8011938:	461a      	mov	r2, r3
 801193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193c:	4413      	add	r3, r2
 801193e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011940:	2301      	movs	r3, #1
 8011942:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011946:	e016      	b.n	8011976 <readCanToStructs+0x1102>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011948:	4b33      	ldr	r3, [pc, #204]	; (8011a18 <readCanToStructs+0x11a4>)
 801194a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801194e:	885b      	ldrh	r3, [r3, #2]
 8011950:	461a      	mov	r2, r3
 8011952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011956:	4930      	ldr	r1, [pc, #192]	; (8011a18 <readCanToStructs+0x11a4>)
 8011958:	0112      	lsls	r2, r2, #4
 801195a:	440a      	add	r2, r1
 801195c:	4413      	add	r3, r2
 801195e:	3304      	adds	r3, #4
 8011960:	781a      	ldrb	r2, [r3, #0]
 8011962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011964:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011968:	3301      	adds	r3, #1
 801196a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801196c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011970:	3301      	adds	r3, #1
 8011972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011976:	4b28      	ldr	r3, [pc, #160]	; (8011a18 <readCanToStructs+0x11a4>)
 8011978:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801197c:	885b      	ldrh	r3, [r3, #2]
 801197e:	4a26      	ldr	r2, [pc, #152]	; (8011a18 <readCanToStructs+0x11a4>)
 8011980:	011b      	lsls	r3, r3, #4
 8011982:	4413      	add	r3, r2
 8011984:	330c      	adds	r3, #12
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801198c:	429a      	cmp	r2, r3
 801198e:	d3db      	bcc.n	8011948 <readCanToStructs+0x10d4>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011994:	4a21      	ldr	r2, [pc, #132]	; (8011a1c <readCanToStructs+0x11a8>)
 8011996:	f240 4112 	movw	r1, #1042	; 0x412
 801199a:	fb01 f303 	mul.w	r3, r1, r3
 801199e:	4413      	add	r3, r2
 80119a0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	461a      	mov	r2, r3
 80119a8:	4613      	mov	r3, r2
 80119aa:	00db      	lsls	r3, r3, #3
 80119ac:	1a9a      	subs	r2, r3, r2
 80119ae:	4b1a      	ldr	r3, [pc, #104]	; (8011a18 <readCanToStructs+0x11a4>)
 80119b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119b4:	885b      	ldrh	r3, [r3, #2]
 80119b6:	4918      	ldr	r1, [pc, #96]	; (8011a18 <readCanToStructs+0x11a4>)
 80119b8:	011b      	lsls	r3, r3, #4
 80119ba:	440b      	add	r3, r1
 80119bc:	330c      	adds	r3, #12
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	3b01      	subs	r3, #1
 80119c2:	4413      	add	r3, r2
 80119c4:	2b13      	cmp	r3, #19
 80119c6:	d966      	bls.n	8011a96 <readCanToStructs+0x1222>
					uint16_t CRC16 = 0;
 80119c8:	2300      	movs	r3, #0
 80119ca:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 80119cc:	2300      	movs	r3, #0
 80119ce:	603b      	str	r3, [r7, #0]
 80119d0:	1d3b      	adds	r3, r7, #4
 80119d2:	2224      	movs	r2, #36	; 0x24
 80119d4:	2100      	movs	r1, #0
 80119d6:	4618      	mov	r0, r3
 80119d8:	f012 fed6 	bl	8024788 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80119dc:	463b      	mov	r3, r7
 80119de:	2214      	movs	r2, #20
 80119e0:	490f      	ldr	r1, [pc, #60]	; (8011a20 <readCanToStructs+0x11ac>)
 80119e2:	4618      	mov	r0, r3
 80119e4:	f012 fea8 	bl	8024738 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80119e8:	463b      	mov	r3, r7
 80119ea:	2214      	movs	r2, #20
 80119ec:	4619      	mov	r1, r3
 80119ee:	2000      	movs	r0, #0
 80119f0:	f002 f986 	bl	8013d00 <GetCRC16>
 80119f4:	4603      	mov	r3, r0
 80119f6:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 80119f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d11e      	bne.n	8011a3c <readCanToStructs+0x11c8>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80119fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a02:	4a06      	ldr	r2, [pc, #24]	; (8011a1c <readCanToStructs+0x11a8>)
 8011a04:	f240 4112 	movw	r1, #1042	; 0x412
 8011a08:	fb01 f303 	mul.w	r3, r1, r3
 8011a0c:	4413      	add	r3, r2
 8011a0e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011a12:	2200      	movs	r2, #0
 8011a14:	701a      	strb	r2, [r3, #0]
				break;
 8011a16:	e063      	b.n	8011ae0 <readCanToStructs+0x126c>
 8011a18:	20005b50 	.word	0x20005b50
 8011a1c:	2000532c 	.word	0x2000532c
 8011a20:	20002054 	.word	0x20002054
 8011a24:	2000065d 	.word	0x2000065d
 8011a28:	20000304 	.word	0x20000304
 8011a2c:	0802904c 	.word	0x0802904c
 8011a30:	20001f78 	.word	0x20001f78
 8011a34:	20000108 	.word	0x20000108
 8011a38:	08029060 	.word	0x08029060
						if(Debug_flag == 1)
 8011a3c:	4bc7      	ldr	r3, [pc, #796]	; (8011d5c <readCanToStructs+0x14e8>)
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d10a      	bne.n	8011a5a <readCanToStructs+0x11e6>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8011a44:	4bc6      	ldr	r3, [pc, #792]	; (8011d60 <readCanToStructs+0x14ec>)
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	4ac6      	ldr	r2, [pc, #792]	; (8011d64 <readCanToStructs+0x14f0>)
 8011a4a:	3366      	adds	r3, #102	; 0x66
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	4413      	add	r3, r2
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	4619      	mov	r1, r3
 8011a54:	48c4      	ldr	r0, [pc, #784]	; (8011d68 <readCanToStructs+0x14f4>)
 8011a56:	f012 ff7f 	bl	8024958 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8011a5a:	4bc1      	ldr	r3, [pc, #772]	; (8011d60 <readCanToStructs+0x14ec>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	461a      	mov	r2, r3
 8011a60:	4613      	mov	r3, r2
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	4413      	add	r3, r2
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	4ac0      	ldr	r2, [pc, #768]	; (8011d6c <readCanToStructs+0x14f8>)
 8011a6a:	4413      	add	r3, r2
 8011a6c:	2214      	movs	r2, #20
 8011a6e:	49bc      	ldr	r1, [pc, #752]	; (8011d60 <readCanToStructs+0x14ec>)
 8011a70:	4618      	mov	r0, r3
 8011a72:	f012 fe61 	bl	8024738 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8011a76:	4bbe      	ldr	r3, [pc, #760]	; (8011d70 <readCanToStructs+0x14fc>)
 8011a78:	2201      	movs	r2, #1
 8011a7a:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a80:	4abc      	ldr	r2, [pc, #752]	; (8011d74 <readCanToStructs+0x1500>)
 8011a82:	f240 4112 	movw	r1, #1042	; 0x412
 8011a86:	fb01 f303 	mul.w	r3, r1, r3
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011a90:	2200      	movs	r2, #0
 8011a92:	701a      	strb	r2, [r3, #0]
				break;
 8011a94:	e024      	b.n	8011ae0 <readCanToStructs+0x126c>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8011a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a9a:	4ab6      	ldr	r2, [pc, #728]	; (8011d74 <readCanToStructs+0x1500>)
 8011a9c:	f240 4112 	movw	r1, #1042	; 0x412
 8011aa0:	fb01 f303 	mul.w	r3, r1, r3
 8011aa4:	4413      	add	r3, r2
 8011aa6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8011aaa:	2201      	movs	r2, #1
 8011aac:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8011aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ab2:	49b0      	ldr	r1, [pc, #704]	; (8011d74 <readCanToStructs+0x1500>)
 8011ab4:	f240 4212 	movw	r2, #1042	; 0x412
 8011ab8:	fb03 f202 	mul.w	r2, r3, r2
 8011abc:	440a      	add	r2, r1
 8011abe:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011ac2:	7812      	ldrb	r2, [r2, #0]
 8011ac4:	3201      	adds	r2, #1
 8011ac6:	b2d0      	uxtb	r0, r2
 8011ac8:	4aaa      	ldr	r2, [pc, #680]	; (8011d74 <readCanToStructs+0x1500>)
 8011aca:	f240 4112 	movw	r1, #1042	; 0x412
 8011ace:	fb01 f303 	mul.w	r3, r1, r3
 8011ad2:	4413      	add	r3, r2
 8011ad4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011ad8:	4602      	mov	r2, r0
 8011ada:	701a      	strb	r2, [r3, #0]
				break;
 8011adc:	e000      	b.n	8011ae0 <readCanToStructs+0x126c>
				break;
 8011ade:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011ae0:	4ba5      	ldr	r3, [pc, #660]	; (8011d78 <readCanToStructs+0x1504>)
 8011ae2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ae6:	885b      	ldrh	r3, [r3, #2]
 8011ae8:	011b      	lsls	r3, r3, #4
 8011aea:	4aa3      	ldr	r2, [pc, #652]	; (8011d78 <readCanToStructs+0x1504>)
 8011aec:	4413      	add	r3, r2
 8011aee:	2210      	movs	r2, #16
 8011af0:	2100      	movs	r1, #0
 8011af2:	4618      	mov	r0, r3
 8011af4:	f012 fe48 	bl	8024788 <memset>
			canRead.Out++;
 8011af8:	4b9f      	ldr	r3, [pc, #636]	; (8011d78 <readCanToStructs+0x1504>)
 8011afa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011afe:	885b      	ldrh	r3, [r3, #2]
 8011b00:	3301      	adds	r3, #1
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	4b9c      	ldr	r3, [pc, #624]	; (8011d78 <readCanToStructs+0x1504>)
 8011b06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b0a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8011b0c:	4b9a      	ldr	r3, [pc, #616]	; (8011d78 <readCanToStructs+0x1504>)
 8011b0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b12:	885b      	ldrh	r3, [r3, #2]
 8011b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b18:	d104      	bne.n	8011b24 <readCanToStructs+0x12b0>
				canRead.Out = 0;
 8011b1a:	4b97      	ldr	r3, [pc, #604]	; (8011d78 <readCanToStructs+0x1504>)
 8011b1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b20:	2200      	movs	r2, #0
 8011b22:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011b24:	f7fe fe50 	bl	80107c8 <canDataReady>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	f47e aecc 	bne.w	80108c8 <readCanToStructs+0x54>

		}
		/* ___________________ HITACHI _______________ */
	}
	break;
 8011b30:	f002 b87a 	b.w	8013c28 <readCanToStructs+0x33b4>
	case SIEMENS:
	{
		/* __________ SIEMENS _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011b34:	4b90      	ldr	r3, [pc, #576]	; (8011d78 <readCanToStructs+0x1504>)
 8011b36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b3a:	885b      	ldrh	r3, [r3, #2]
 8011b3c:	4a8e      	ldr	r2, [pc, #568]	; (8011d78 <readCanToStructs+0x1504>)
 8011b3e:	011b      	lsls	r3, r3, #4
 8011b40:	4413      	add	r3, r2
 8011b42:	330f      	adds	r3, #15
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	3b01      	subs	r3, #1
 8011b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011b4c:	4b8a      	ldr	r3, [pc, #552]	; (8011d78 <readCanToStructs+0x1504>)
 8011b4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b52:	885b      	ldrh	r3, [r3, #2]
 8011b54:	4a88      	ldr	r2, [pc, #544]	; (8011d78 <readCanToStructs+0x1504>)
 8011b56:	011b      	lsls	r3, r3, #4
 8011b58:	4413      	add	r3, r2
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011b60:	f200 8672 	bhi.w	8012848 <readCanToStructs+0x1fd4>
 8011b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b68:	d80a      	bhi.n	8011b80 <readCanToStructs+0x130c>
 8011b6a:	f240 1203 	movw	r2, #259	; 0x103
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d01e      	beq.n	8011bb0 <readCanToStructs+0x133c>
 8011b72:	f240 1209 	movw	r2, #265	; 0x109
 8011b76:	4293      	cmp	r3, r2
 8011b78:	f000 8108 	beq.w	8011d8c <readCanToStructs+0x1518>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;

			default:
				break;
 8011b7c:	f000 be64 	b.w	8012848 <readCanToStructs+0x1fd4>
 8011b80:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011b84:	2b07      	cmp	r3, #7
 8011b86:	f200 865f 	bhi.w	8012848 <readCanToStructs+0x1fd4>
 8011b8a:	a201      	add	r2, pc, #4	; (adr r2, 8011b90 <readCanToStructs+0x131c>)
 8011b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b90:	08011f39 	.word	0x08011f39
 8011b94:	0801211d 	.word	0x0801211d
 8011b98:	08012849 	.word	0x08012849
 8011b9c:	08012849 	.word	0x08012849
 8011ba0:	080126ab 	.word	0x080126ab
 8011ba4:	08012849 	.word	0x08012849
 8011ba8:	080122cd 	.word	0x080122cd
 8011bac:	080124bf 	.word	0x080124bf
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011bb0:	4b72      	ldr	r3, [pc, #456]	; (8011d7c <readCanToStructs+0x1508>)
 8011bb2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011bb4:	4b70      	ldr	r3, [pc, #448]	; (8011d78 <readCanToStructs+0x1504>)
 8011bb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bba:	885b      	ldrh	r3, [r3, #2]
 8011bbc:	4a6e      	ldr	r2, [pc, #440]	; (8011d78 <readCanToStructs+0x1504>)
 8011bbe:	011b      	lsls	r3, r3, #4
 8011bc0:	4413      	add	r3, r2
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011bca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d110      	bne.n	8011bf4 <readCanToStructs+0x1380>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011bd2:	2206      	movs	r2, #6
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bd8:	f012 fdd6 	bl	8024788 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011be0:	4a64      	ldr	r2, [pc, #400]	; (8011d74 <readCanToStructs+0x1500>)
 8011be2:	f240 4112 	movw	r1, #1042	; 0x412
 8011be6:	fb01 f303 	mul.w	r3, r1, r3
 8011bea:	4413      	add	r3, r2
 8011bec:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bf8:	4a5e      	ldr	r2, [pc, #376]	; (8011d74 <readCanToStructs+0x1500>)
 8011bfa:	f240 4112 	movw	r1, #1042	; 0x412
 8011bfe:	fb01 f303 	mul.w	r3, r1, r3
 8011c02:	4413      	add	r3, r2
 8011c04:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d015      	beq.n	8011c3e <readCanToStructs+0x13ca>
					printf("GPS Packet Seq no MisMatch\n");
 8011c12:	485b      	ldr	r0, [pc, #364]	; (8011d80 <readCanToStructs+0x150c>)
 8011c14:	f012 ff3c 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011c18:	2206      	movs	r2, #6
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c1e:	f012 fdb3 	bl	8024788 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c26:	4a53      	ldr	r2, [pc, #332]	; (8011d74 <readCanToStructs+0x1500>)
 8011c28:	f240 4112 	movw	r1, #1042	; 0x412
 8011c2c:	fb01 f303 	mul.w	r3, r1, r3
 8011c30:	4413      	add	r3, r2
 8011c32:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011c36:	2200      	movs	r2, #0
 8011c38:	701a      	strb	r2, [r3, #0]
					break;
 8011c3a:	f000 be0a 	b.w	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011c3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c42:	4613      	mov	r3, r2
 8011c44:	00db      	lsls	r3, r3, #3
 8011c46:	1a9b      	subs	r3, r3, r2
 8011c48:	461a      	mov	r2, r3
 8011c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4c:	4413      	add	r3, r2
 8011c4e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c50:	2301      	movs	r3, #1
 8011c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c56:	e016      	b.n	8011c86 <readCanToStructs+0x1412>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011c58:	4b47      	ldr	r3, [pc, #284]	; (8011d78 <readCanToStructs+0x1504>)
 8011c5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c5e:	885b      	ldrh	r3, [r3, #2]
 8011c60:	461a      	mov	r2, r3
 8011c62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c66:	4944      	ldr	r1, [pc, #272]	; (8011d78 <readCanToStructs+0x1504>)
 8011c68:	0112      	lsls	r2, r2, #4
 8011c6a:	440a      	add	r2, r1
 8011c6c:	4413      	add	r3, r2
 8011c6e:	3304      	adds	r3, #4
 8011c70:	781a      	ldrb	r2, [r3, #0]
 8011c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c74:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c78:	3301      	adds	r3, #1
 8011c7a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c80:	3301      	adds	r3, #1
 8011c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c86:	4b3c      	ldr	r3, [pc, #240]	; (8011d78 <readCanToStructs+0x1504>)
 8011c88:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c8c:	885b      	ldrh	r3, [r3, #2]
 8011c8e:	4a3a      	ldr	r2, [pc, #232]	; (8011d78 <readCanToStructs+0x1504>)
 8011c90:	011b      	lsls	r3, r3, #4
 8011c92:	4413      	add	r3, r2
 8011c94:	330c      	adds	r3, #12
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d3db      	bcc.n	8011c58 <readCanToStructs+0x13e4>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ca4:	4a33      	ldr	r2, [pc, #204]	; (8011d74 <readCanToStructs+0x1500>)
 8011ca6:	f240 4112 	movw	r1, #1042	; 0x412
 8011caa:	fb01 f303 	mul.w	r3, r1, r3
 8011cae:	4413      	add	r3, r2
 8011cb0:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	4613      	mov	r3, r2
 8011cba:	00db      	lsls	r3, r3, #3
 8011cbc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011cbe:	4b2e      	ldr	r3, [pc, #184]	; (8011d78 <readCanToStructs+0x1504>)
 8011cc0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cc4:	885b      	ldrh	r3, [r3, #2]
 8011cc6:	492c      	ldr	r1, [pc, #176]	; (8011d78 <readCanToStructs+0x1504>)
 8011cc8:	011b      	lsls	r3, r3, #4
 8011cca:	440b      	add	r3, r1
 8011ccc:	330c      	adds	r3, #12
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011cd4:	2b05      	cmp	r3, #5
 8011cd6:	d91c      	bls.n	8011d12 <readCanToStructs+0x149e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011cd8:	4b2a      	ldr	r3, [pc, #168]	; (8011d84 <readCanToStructs+0x1510>)
 8011cda:	4a28      	ldr	r2, [pc, #160]	; (8011d7c <readCanToStructs+0x1508>)
 8011cdc:	6811      	ldr	r1, [r2, #0]
 8011cde:	6019      	str	r1, [r3, #0]
 8011ce0:	8892      	ldrh	r2, [r2, #4]
 8011ce2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011ce4:	4b1d      	ldr	r3, [pc, #116]	; (8011d5c <readCanToStructs+0x14e8>)
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d102      	bne.n	8011cf2 <readCanToStructs+0x147e>
						printf("GPS_PACKET_RECEIVED\n");
 8011cec:	4826      	ldr	r0, [pc, #152]	; (8011d88 <readCanToStructs+0x1514>)
 8011cee:	f012 fecf 	bl	8024a90 <puts>
					Write_RTC();
 8011cf2:	f7f9 fdf9 	bl	800b8e8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cfa:	4a1e      	ldr	r2, [pc, #120]	; (8011d74 <readCanToStructs+0x1500>)
 8011cfc:	f240 4112 	movw	r1, #1042	; 0x412
 8011d00:	fb01 f303 	mul.w	r3, r1, r3
 8011d04:	4413      	add	r3, r2
 8011d06:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	701a      	strb	r2, [r3, #0]
				break;
 8011d0e:	f000 bda0 	b.w	8012852 <readCanToStructs+0x1fde>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d16:	4a17      	ldr	r2, [pc, #92]	; (8011d74 <readCanToStructs+0x1500>)
 8011d18:	f240 4112 	movw	r1, #1042	; 0x412
 8011d1c:	fb01 f303 	mul.w	r3, r1, r3
 8011d20:	4413      	add	r3, r2
 8011d22:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011d26:	2201      	movs	r2, #1
 8011d28:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d2e:	4911      	ldr	r1, [pc, #68]	; (8011d74 <readCanToStructs+0x1500>)
 8011d30:	f240 4212 	movw	r2, #1042	; 0x412
 8011d34:	fb03 f202 	mul.w	r2, r3, r2
 8011d38:	440a      	add	r2, r1
 8011d3a:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011d3e:	7812      	ldrb	r2, [r2, #0]
 8011d40:	3201      	adds	r2, #1
 8011d42:	b2d0      	uxtb	r0, r2
 8011d44:	4a0b      	ldr	r2, [pc, #44]	; (8011d74 <readCanToStructs+0x1500>)
 8011d46:	f240 4112 	movw	r1, #1042	; 0x412
 8011d4a:	fb01 f303 	mul.w	r3, r1, r3
 8011d4e:	4413      	add	r3, r2
 8011d50:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011d54:	4602      	mov	r2, r0
 8011d56:	701a      	strb	r2, [r3, #0]
				break;
 8011d58:	f000 bd7b 	b.w	8012852 <readCanToStructs+0x1fde>
 8011d5c:	2000065d 	.word	0x2000065d
 8011d60:	20002054 	.word	0x20002054
 8011d64:	20000304 	.word	0x20000304
 8011d68:	08029080 	.word	0x08029080
 8011d6c:	20001f78 	.word	0x20001f78
 8011d70:	20000108 	.word	0x20000108
 8011d74:	2000532c 	.word	0x2000532c
 8011d78:	20005b50 	.word	0x20005b50
 8011d7c:	200028d4 	.word	0x200028d4
 8011d80:	08028ebc 	.word	0x08028ebc
 8011d84:	200028cc 	.word	0x200028cc
 8011d88:	08028ed8 	.word	0x08028ed8
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011d8c:	4bc5      	ldr	r3, [pc, #788]	; (80120a4 <readCanToStructs+0x1830>)
 8011d8e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011d90:	4bc5      	ldr	r3, [pc, #788]	; (80120a8 <readCanToStructs+0x1834>)
 8011d92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d96:	885b      	ldrh	r3, [r3, #2]
 8011d98:	4ac3      	ldr	r2, [pc, #780]	; (80120a8 <readCanToStructs+0x1834>)
 8011d9a:	011b      	lsls	r3, r3, #4
 8011d9c:	4413      	add	r3, r2
 8011d9e:	3304      	adds	r3, #4
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011da6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d110      	bne.n	8011dd0 <readCanToStructs+0x155c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011dae:	2206      	movs	r2, #6
 8011db0:	2100      	movs	r1, #0
 8011db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011db4:	f012 fce8 	bl	8024788 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011db8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dbc:	4abb      	ldr	r2, [pc, #748]	; (80120ac <readCanToStructs+0x1838>)
 8011dbe:	f240 4112 	movw	r1, #1042	; 0x412
 8011dc2:	fb01 f303 	mul.w	r3, r1, r3
 8011dc6:	4413      	add	r3, r2
 8011dc8:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011dcc:	2200      	movs	r2, #0
 8011dce:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dd4:	4ab5      	ldr	r2, [pc, #724]	; (80120ac <readCanToStructs+0x1838>)
 8011dd6:	f240 4112 	movw	r1, #1042	; 0x412
 8011dda:	fb01 f303 	mul.w	r3, r1, r3
 8011dde:	4413      	add	r3, r2
 8011de0:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d015      	beq.n	8011e1a <readCanToStructs+0x15a6>
					printf("GPS2 Packet Seq no MisMatch\n");
 8011dee:	48b0      	ldr	r0, [pc, #704]	; (80120b0 <readCanToStructs+0x183c>)
 8011df0:	f012 fe4e 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011df4:	2206      	movs	r2, #6
 8011df6:	2100      	movs	r1, #0
 8011df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dfa:	f012 fcc5 	bl	8024788 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e02:	4aaa      	ldr	r2, [pc, #680]	; (80120ac <readCanToStructs+0x1838>)
 8011e04:	f240 4112 	movw	r1, #1042	; 0x412
 8011e08:	fb01 f303 	mul.w	r3, r1, r3
 8011e0c:	4413      	add	r3, r2
 8011e0e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011e12:	2200      	movs	r2, #0
 8011e14:	701a      	strb	r2, [r3, #0]
					break;
 8011e16:	f000 bd1c 	b.w	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011e1a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e1e:	4613      	mov	r3, r2
 8011e20:	00db      	lsls	r3, r3, #3
 8011e22:	1a9b      	subs	r3, r3, r2
 8011e24:	461a      	mov	r2, r3
 8011e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e28:	4413      	add	r3, r2
 8011e2a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e32:	e016      	b.n	8011e62 <readCanToStructs+0x15ee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011e34:	4b9c      	ldr	r3, [pc, #624]	; (80120a8 <readCanToStructs+0x1834>)
 8011e36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e3a:	885b      	ldrh	r3, [r3, #2]
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e42:	4999      	ldr	r1, [pc, #612]	; (80120a8 <readCanToStructs+0x1834>)
 8011e44:	0112      	lsls	r2, r2, #4
 8011e46:	440a      	add	r2, r1
 8011e48:	4413      	add	r3, r2
 8011e4a:	3304      	adds	r3, #4
 8011e4c:	781a      	ldrb	r2, [r3, #0]
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e50:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e54:	3301      	adds	r3, #1
 8011e56:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e62:	4b91      	ldr	r3, [pc, #580]	; (80120a8 <readCanToStructs+0x1834>)
 8011e64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e68:	885b      	ldrh	r3, [r3, #2]
 8011e6a:	4a8f      	ldr	r2, [pc, #572]	; (80120a8 <readCanToStructs+0x1834>)
 8011e6c:	011b      	lsls	r3, r3, #4
 8011e6e:	4413      	add	r3, r2
 8011e70:	330c      	adds	r3, #12
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d3db      	bcc.n	8011e34 <readCanToStructs+0x15c0>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e80:	4a8a      	ldr	r2, [pc, #552]	; (80120ac <readCanToStructs+0x1838>)
 8011e82:	f240 4112 	movw	r1, #1042	; 0x412
 8011e86:	fb01 f303 	mul.w	r3, r1, r3
 8011e8a:	4413      	add	r3, r2
 8011e8c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	461a      	mov	r2, r3
 8011e94:	4613      	mov	r3, r2
 8011e96:	00db      	lsls	r3, r3, #3
 8011e98:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011e9a:	4b83      	ldr	r3, [pc, #524]	; (80120a8 <readCanToStructs+0x1834>)
 8011e9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ea0:	885b      	ldrh	r3, [r3, #2]
 8011ea2:	4981      	ldr	r1, [pc, #516]	; (80120a8 <readCanToStructs+0x1834>)
 8011ea4:	011b      	lsls	r3, r3, #4
 8011ea6:	440b      	add	r3, r1
 8011ea8:	330c      	adds	r3, #12
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	3b01      	subs	r3, #1
 8011eae:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011eb0:	2b05      	cmp	r3, #5
 8011eb2:	d91c      	bls.n	8011eee <readCanToStructs+0x167a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011eb4:	4b7f      	ldr	r3, [pc, #508]	; (80120b4 <readCanToStructs+0x1840>)
 8011eb6:	4a7b      	ldr	r2, [pc, #492]	; (80120a4 <readCanToStructs+0x1830>)
 8011eb8:	6811      	ldr	r1, [r2, #0]
 8011eba:	6019      	str	r1, [r3, #0]
 8011ebc:	8892      	ldrh	r2, [r2, #4]
 8011ebe:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011ec0:	4b7d      	ldr	r3, [pc, #500]	; (80120b8 <readCanToStructs+0x1844>)
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d102      	bne.n	8011ece <readCanToStructs+0x165a>
						printf("GPS2_PACKET_RECEIVED\n");
 8011ec8:	487c      	ldr	r0, [pc, #496]	; (80120bc <readCanToStructs+0x1848>)
 8011eca:	f012 fde1 	bl	8024a90 <puts>
					Write_RTC();
 8011ece:	f7f9 fd0b 	bl	800b8e8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ed6:	4a75      	ldr	r2, [pc, #468]	; (80120ac <readCanToStructs+0x1838>)
 8011ed8:	f240 4112 	movw	r1, #1042	; 0x412
 8011edc:	fb01 f303 	mul.w	r3, r1, r3
 8011ee0:	4413      	add	r3, r2
 8011ee2:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	701a      	strb	r2, [r3, #0]
				break;
 8011eea:	f000 bcb2 	b.w	8012852 <readCanToStructs+0x1fde>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ef2:	4a6e      	ldr	r2, [pc, #440]	; (80120ac <readCanToStructs+0x1838>)
 8011ef4:	f240 4112 	movw	r1, #1042	; 0x412
 8011ef8:	fb01 f303 	mul.w	r3, r1, r3
 8011efc:	4413      	add	r3, r2
 8011efe:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011f02:	2201      	movs	r2, #1
 8011f04:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f0a:	4968      	ldr	r1, [pc, #416]	; (80120ac <readCanToStructs+0x1838>)
 8011f0c:	f240 4212 	movw	r2, #1042	; 0x412
 8011f10:	fb03 f202 	mul.w	r2, r3, r2
 8011f14:	440a      	add	r2, r1
 8011f16:	f202 2213 	addw	r2, r2, #531	; 0x213
 8011f1a:	7812      	ldrb	r2, [r2, #0]
 8011f1c:	3201      	adds	r2, #1
 8011f1e:	b2d0      	uxtb	r0, r2
 8011f20:	4a62      	ldr	r2, [pc, #392]	; (80120ac <readCanToStructs+0x1838>)
 8011f22:	f240 4112 	movw	r1, #1042	; 0x412
 8011f26:	fb01 f303 	mul.w	r3, r1, r3
 8011f2a:	4413      	add	r3, r2
 8011f2c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011f30:	4602      	mov	r2, r0
 8011f32:	701a      	strb	r2, [r3, #0]
				break;
 8011f34:	f000 bc8d 	b.w	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011f38:	4b61      	ldr	r3, [pc, #388]	; (80120c0 <readCanToStructs+0x184c>)
 8011f3a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011f3c:	4b5a      	ldr	r3, [pc, #360]	; (80120a8 <readCanToStructs+0x1834>)
 8011f3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f42:	885b      	ldrh	r3, [r3, #2]
 8011f44:	4a58      	ldr	r2, [pc, #352]	; (80120a8 <readCanToStructs+0x1834>)
 8011f46:	011b      	lsls	r3, r3, #4
 8011f48:	4413      	add	r3, r2
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011f52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d110      	bne.n	8011f7c <readCanToStructs+0x1708>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011f5a:	2204      	movs	r2, #4
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f60:	f012 fc12 	bl	8024788 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f68:	4a50      	ldr	r2, [pc, #320]	; (80120ac <readCanToStructs+0x1838>)
 8011f6a:	f240 4112 	movw	r1, #1042	; 0x412
 8011f6e:	fb01 f303 	mul.w	r3, r1, r3
 8011f72:	4413      	add	r3, r2
 8011f74:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011f78:	2200      	movs	r2, #0
 8011f7a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8011f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f80:	4a4a      	ldr	r2, [pc, #296]	; (80120ac <readCanToStructs+0x1838>)
 8011f82:	f240 4112 	movw	r1, #1042	; 0x412
 8011f86:	fb01 f303 	mul.w	r3, r1, r3
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d015      	beq.n	8011fc6 <readCanToStructs+0x1752>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8011f9a:	484a      	ldr	r0, [pc, #296]	; (80120c4 <readCanToStructs+0x1850>)
 8011f9c:	f012 fd78 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011fa0:	2204      	movs	r2, #4
 8011fa2:	2100      	movs	r1, #0
 8011fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fa6:	f012 fbef 	bl	8024788 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fae:	4a3f      	ldr	r2, [pc, #252]	; (80120ac <readCanToStructs+0x1838>)
 8011fb0:	f240 4112 	movw	r1, #1042	; 0x412
 8011fb4:	fb01 f303 	mul.w	r3, r1, r3
 8011fb8:	4413      	add	r3, r2
 8011fba:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	701a      	strb	r2, [r3, #0]
					break;
 8011fc2:	f000 bc46 	b.w	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011fc6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011fca:	4613      	mov	r3, r2
 8011fcc:	00db      	lsls	r3, r3, #3
 8011fce:	1a9b      	subs	r3, r3, r2
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd4:	4413      	add	r3, r2
 8011fd6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011fd8:	2301      	movs	r3, #1
 8011fda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011fde:	e016      	b.n	801200e <readCanToStructs+0x179a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011fe0:	4b31      	ldr	r3, [pc, #196]	; (80120a8 <readCanToStructs+0x1834>)
 8011fe2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fe6:	885b      	ldrh	r3, [r3, #2]
 8011fe8:	461a      	mov	r2, r3
 8011fea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fee:	492e      	ldr	r1, [pc, #184]	; (80120a8 <readCanToStructs+0x1834>)
 8011ff0:	0112      	lsls	r2, r2, #4
 8011ff2:	440a      	add	r2, r1
 8011ff4:	4413      	add	r3, r2
 8011ff6:	3304      	adds	r3, #4
 8011ff8:	781a      	ldrb	r2, [r3, #0]
 8011ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012000:	3301      	adds	r3, #1
 8012002:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012008:	3301      	adds	r3, #1
 801200a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801200e:	4b26      	ldr	r3, [pc, #152]	; (80120a8 <readCanToStructs+0x1834>)
 8012010:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012014:	885b      	ldrh	r3, [r3, #2]
 8012016:	4a24      	ldr	r2, [pc, #144]	; (80120a8 <readCanToStructs+0x1834>)
 8012018:	011b      	lsls	r3, r3, #4
 801201a:	4413      	add	r3, r2
 801201c:	330c      	adds	r3, #12
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012024:	429a      	cmp	r2, r3
 8012026:	d3db      	bcc.n	8011fe0 <readCanToStructs+0x176c>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801202c:	4a1f      	ldr	r2, [pc, #124]	; (80120ac <readCanToStructs+0x1838>)
 801202e:	f240 4112 	movw	r1, #1042	; 0x412
 8012032:	fb01 f303 	mul.w	r3, r1, r3
 8012036:	4413      	add	r3, r2
 8012038:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	4613      	mov	r3, r2
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012046:	4b18      	ldr	r3, [pc, #96]	; (80120a8 <readCanToStructs+0x1834>)
 8012048:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801204c:	885b      	ldrh	r3, [r3, #2]
 801204e:	4916      	ldr	r1, [pc, #88]	; (80120a8 <readCanToStructs+0x1834>)
 8012050:	011b      	lsls	r3, r3, #4
 8012052:	440b      	add	r3, r1
 8012054:	330c      	adds	r3, #12
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	3b01      	subs	r3, #1
 801205a:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801205c:	2b03      	cmp	r3, #3
 801205e:	d939      	bls.n	80120d4 <readCanToStructs+0x1860>
 8012060:	4b17      	ldr	r3, [pc, #92]	; (80120c0 <readCanToStructs+0x184c>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012066:	4b18      	ldr	r3, [pc, #96]	; (80120c8 <readCanToStructs+0x1854>)
 8012068:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 801206a:	4b13      	ldr	r3, [pc, #76]	; (80120b8 <readCanToStructs+0x1844>)
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	2b01      	cmp	r3, #1
 8012070:	d102      	bne.n	8012078 <readCanToStructs+0x1804>
						printf("O_Info1_RCV\n");
 8012072:	4816      	ldr	r0, [pc, #88]	; (80120cc <readCanToStructs+0x1858>)
 8012074:	f012 fd0c 	bl	8024a90 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012078:	4b15      	ldr	r3, [pc, #84]	; (80120d0 <readCanToStructs+0x185c>)
 801207a:	2201      	movs	r2, #1
 801207c:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801207e:	f005 fc61 	bl	8017944 <HAL_GetTick>
 8012082:	4603      	mov	r3, r0
 8012084:	4a12      	ldr	r2, [pc, #72]	; (80120d0 <readCanToStructs+0x185c>)
 8012086:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801208c:	4a07      	ldr	r2, [pc, #28]	; (80120ac <readCanToStructs+0x1838>)
 801208e:	f240 4112 	movw	r1, #1042	; 0x412
 8012092:	fb01 f303 	mul.w	r3, r1, r3
 8012096:	4413      	add	r3, r2
 8012098:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801209c:	2200      	movs	r2, #0
 801209e:	701a      	strb	r2, [r3, #0]
				break;
 80120a0:	e3d7      	b.n	8012852 <readCanToStructs+0x1fde>
 80120a2:	bf00      	nop
 80120a4:	200028d4 	.word	0x200028d4
 80120a8:	20005b50 	.word	0x20005b50
 80120ac:	2000532c 	.word	0x2000532c
 80120b0:	08028eec 	.word	0x08028eec
 80120b4:	200028cc 	.word	0x200028cc
 80120b8:	2000065d 	.word	0x2000065d
 80120bc:	08028f08 	.word	0x08028f08
 80120c0:	2000357c 	.word	0x2000357c
 80120c4:	08028f20 	.word	0x08028f20
 80120c8:	20003578 	.word	0x20003578
 80120cc:	08029094 	.word	0x08029094
 80120d0:	20003580 	.word	0x20003580
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80120d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120d8:	4a98      	ldr	r2, [pc, #608]	; (801233c <readCanToStructs+0x1ac8>)
 80120da:	f240 4112 	movw	r1, #1042	; 0x412
 80120de:	fb01 f303 	mul.w	r3, r1, r3
 80120e2:	4413      	add	r3, r2
 80120e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80120e8:	2201      	movs	r2, #1
 80120ea:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80120ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120f0:	4992      	ldr	r1, [pc, #584]	; (801233c <readCanToStructs+0x1ac8>)
 80120f2:	f240 4212 	movw	r2, #1042	; 0x412
 80120f6:	fb03 f202 	mul.w	r2, r3, r2
 80120fa:	440a      	add	r2, r1
 80120fc:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8012100:	7812      	ldrb	r2, [r2, #0]
 8012102:	3201      	adds	r2, #1
 8012104:	b2d0      	uxtb	r0, r2
 8012106:	4a8d      	ldr	r2, [pc, #564]	; (801233c <readCanToStructs+0x1ac8>)
 8012108:	f240 4112 	movw	r1, #1042	; 0x412
 801210c:	fb01 f303 	mul.w	r3, r1, r3
 8012110:	4413      	add	r3, r2
 8012112:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012116:	4602      	mov	r2, r0
 8012118:	701a      	strb	r2, [r3, #0]
				break;
 801211a:	e39a      	b.n	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801211c:	4b88      	ldr	r3, [pc, #544]	; (8012340 <readCanToStructs+0x1acc>)
 801211e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012120:	4b88      	ldr	r3, [pc, #544]	; (8012344 <readCanToStructs+0x1ad0>)
 8012122:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012126:	885b      	ldrh	r3, [r3, #2]
 8012128:	4a86      	ldr	r2, [pc, #536]	; (8012344 <readCanToStructs+0x1ad0>)
 801212a:	011b      	lsls	r3, r3, #4
 801212c:	4413      	add	r3, r2
 801212e:	3304      	adds	r3, #4
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012136:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801213a:	2b00      	cmp	r3, #0
 801213c:	d110      	bne.n	8012160 <readCanToStructs+0x18ec>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801213e:	2204      	movs	r2, #4
 8012140:	2100      	movs	r1, #0
 8012142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012144:	f012 fb20 	bl	8024788 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801214c:	4a7b      	ldr	r2, [pc, #492]	; (801233c <readCanToStructs+0x1ac8>)
 801214e:	f240 4112 	movw	r1, #1042	; 0x412
 8012152:	fb01 f303 	mul.w	r3, r1, r3
 8012156:	4413      	add	r3, r2
 8012158:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801215c:	2200      	movs	r2, #0
 801215e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012164:	4a75      	ldr	r2, [pc, #468]	; (801233c <readCanToStructs+0x1ac8>)
 8012166:	f240 4112 	movw	r1, #1042	; 0x412
 801216a:	fb01 f303 	mul.w	r3, r1, r3
 801216e:	4413      	add	r3, r2
 8012170:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801217a:	429a      	cmp	r2, r3
 801217c:	d014      	beq.n	80121a8 <readCanToStructs+0x1934>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801217e:	4872      	ldr	r0, [pc, #456]	; (8012348 <readCanToStructs+0x1ad4>)
 8012180:	f012 fc86 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012184:	2204      	movs	r2, #4
 8012186:	2100      	movs	r1, #0
 8012188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801218a:	f012 fafd 	bl	8024788 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801218e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012192:	4a6a      	ldr	r2, [pc, #424]	; (801233c <readCanToStructs+0x1ac8>)
 8012194:	f240 4112 	movw	r1, #1042	; 0x412
 8012198:	fb01 f303 	mul.w	r3, r1, r3
 801219c:	4413      	add	r3, r2
 801219e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80121a2:	2200      	movs	r2, #0
 80121a4:	701a      	strb	r2, [r3, #0]
					break;
 80121a6:	e354      	b.n	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr += (7 * uc_seqNo);
 80121a8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80121ac:	4613      	mov	r3, r2
 80121ae:	00db      	lsls	r3, r3, #3
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	461a      	mov	r2, r3
 80121b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b6:	4413      	add	r3, r2
 80121b8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80121ba:	2301      	movs	r3, #1
 80121bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80121c0:	e016      	b.n	80121f0 <readCanToStructs+0x197c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80121c2:	4b60      	ldr	r3, [pc, #384]	; (8012344 <readCanToStructs+0x1ad0>)
 80121c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121c8:	885b      	ldrh	r3, [r3, #2]
 80121ca:	461a      	mov	r2, r3
 80121cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121d0:	495c      	ldr	r1, [pc, #368]	; (8012344 <readCanToStructs+0x1ad0>)
 80121d2:	0112      	lsls	r2, r2, #4
 80121d4:	440a      	add	r2, r1
 80121d6:	4413      	add	r3, r2
 80121d8:	3304      	adds	r3, #4
 80121da:	781a      	ldrb	r2, [r3, #0]
 80121dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121de:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80121e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e2:	3301      	adds	r3, #1
 80121e4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80121e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121ea:	3301      	adds	r3, #1
 80121ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80121f0:	4b54      	ldr	r3, [pc, #336]	; (8012344 <readCanToStructs+0x1ad0>)
 80121f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121f6:	885b      	ldrh	r3, [r3, #2]
 80121f8:	4a52      	ldr	r2, [pc, #328]	; (8012344 <readCanToStructs+0x1ad0>)
 80121fa:	011b      	lsls	r3, r3, #4
 80121fc:	4413      	add	r3, r2
 80121fe:	330c      	adds	r3, #12
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012206:	429a      	cmp	r2, r3
 8012208:	d3db      	bcc.n	80121c2 <readCanToStructs+0x194e>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801220a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801220e:	4a4b      	ldr	r2, [pc, #300]	; (801233c <readCanToStructs+0x1ac8>)
 8012210:	f240 4112 	movw	r1, #1042	; 0x412
 8012214:	fb01 f303 	mul.w	r3, r1, r3
 8012218:	4413      	add	r3, r2
 801221a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	461a      	mov	r2, r3
 8012222:	4613      	mov	r3, r2
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012228:	4b46      	ldr	r3, [pc, #280]	; (8012344 <readCanToStructs+0x1ad0>)
 801222a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801222e:	885b      	ldrh	r3, [r3, #2]
 8012230:	4944      	ldr	r1, [pc, #272]	; (8012344 <readCanToStructs+0x1ad0>)
 8012232:	011b      	lsls	r3, r3, #4
 8012234:	440b      	add	r3, r1
 8012236:	330c      	adds	r3, #12
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	3b01      	subs	r3, #1
 801223c:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801223e:	2b03      	cmp	r3, #3
 8012240:	d920      	bls.n	8012284 <readCanToStructs+0x1a10>
 8012242:	4b3f      	ldr	r3, [pc, #252]	; (8012340 <readCanToStructs+0x1acc>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012248:	4b40      	ldr	r3, [pc, #256]	; (801234c <readCanToStructs+0x1ad8>)
 801224a:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 801224c:	4b40      	ldr	r3, [pc, #256]	; (8012350 <readCanToStructs+0x1adc>)
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d102      	bne.n	801225a <readCanToStructs+0x19e6>
						printf("O_Info2_RCV\n");
 8012254:	483f      	ldr	r0, [pc, #252]	; (8012354 <readCanToStructs+0x1ae0>)
 8012256:	f012 fc1b 	bl	8024a90 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801225a:	4b3f      	ldr	r3, [pc, #252]	; (8012358 <readCanToStructs+0x1ae4>)
 801225c:	2201      	movs	r2, #1
 801225e:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012260:	f005 fb70 	bl	8017944 <HAL_GetTick>
 8012264:	4603      	mov	r3, r0
 8012266:	4a3c      	ldr	r2, [pc, #240]	; (8012358 <readCanToStructs+0x1ae4>)
 8012268:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801226a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801226e:	4a33      	ldr	r2, [pc, #204]	; (801233c <readCanToStructs+0x1ac8>)
 8012270:	f240 4112 	movw	r1, #1042	; 0x412
 8012274:	fb01 f303 	mul.w	r3, r1, r3
 8012278:	4413      	add	r3, r2
 801227a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801227e:	2200      	movs	r2, #0
 8012280:	701a      	strb	r2, [r3, #0]
				break;
 8012282:	e2e6      	b.n	8012852 <readCanToStructs+0x1fde>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8012284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012288:	4a2c      	ldr	r2, [pc, #176]	; (801233c <readCanToStructs+0x1ac8>)
 801228a:	f240 4112 	movw	r1, #1042	; 0x412
 801228e:	fb01 f303 	mul.w	r3, r1, r3
 8012292:	4413      	add	r3, r2
 8012294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012298:	2201      	movs	r2, #1
 801229a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 801229c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122a0:	4926      	ldr	r1, [pc, #152]	; (801233c <readCanToStructs+0x1ac8>)
 80122a2:	f240 4212 	movw	r2, #1042	; 0x412
 80122a6:	fb03 f202 	mul.w	r2, r3, r2
 80122aa:	440a      	add	r2, r1
 80122ac:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80122b0:	7812      	ldrb	r2, [r2, #0]
 80122b2:	3201      	adds	r2, #1
 80122b4:	b2d0      	uxtb	r0, r2
 80122b6:	4a21      	ldr	r2, [pc, #132]	; (801233c <readCanToStructs+0x1ac8>)
 80122b8:	f240 4112 	movw	r1, #1042	; 0x412
 80122bc:	fb01 f303 	mul.w	r3, r1, r3
 80122c0:	4413      	add	r3, r2
 80122c2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80122c6:	4602      	mov	r2, r0
 80122c8:	701a      	strb	r2, [r3, #0]
				break;
 80122ca:	e2c2      	b.n	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 80122cc:	4b23      	ldr	r3, [pc, #140]	; (801235c <readCanToStructs+0x1ae8>)
 80122ce:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80122d0:	4b1c      	ldr	r3, [pc, #112]	; (8012344 <readCanToStructs+0x1ad0>)
 80122d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122d6:	885b      	ldrh	r3, [r3, #2]
 80122d8:	4a1a      	ldr	r2, [pc, #104]	; (8012344 <readCanToStructs+0x1ad0>)
 80122da:	011b      	lsls	r3, r3, #4
 80122dc:	4413      	add	r3, r2
 80122de:	3304      	adds	r3, #4
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 80122e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d005      	beq.n	80122fa <readCanToStructs+0x1a86>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 80122ee:	4b1c      	ldr	r3, [pc, #112]	; (8012360 <readCanToStructs+0x1aec>)
 80122f0:	881b      	ldrh	r3, [r3, #0]
 80122f2:	461a      	mov	r2, r3
 80122f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f6:	4413      	add	r3, r2
 80122f8:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 80122fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d117      	bne.n	8012332 <readCanToStructs+0x1abe>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012302:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012306:	2100      	movs	r1, #0
 8012308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801230a:	f012 fa3d 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801230e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012312:	4a0a      	ldr	r2, [pc, #40]	; (801233c <readCanToStructs+0x1ac8>)
 8012314:	f240 4112 	movw	r1, #1042	; 0x412
 8012318:	fb01 f303 	mul.w	r3, r1, r3
 801231c:	4413      	add	r3, r2
 801231e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012322:	2200      	movs	r2, #0
 8012324:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012326:	4b0e      	ldr	r3, [pc, #56]	; (8012360 <readCanToStructs+0x1aec>)
 8012328:	2200      	movs	r2, #0
 801232a:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801232c:	4b0d      	ldr	r3, [pc, #52]	; (8012364 <readCanToStructs+0x1af0>)
 801232e:	2200      	movs	r2, #0
 8012330:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012332:	2301      	movs	r3, #1
 8012334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012338:	e033      	b.n	80123a2 <readCanToStructs+0x1b2e>
 801233a:	bf00      	nop
 801233c:	2000532c 	.word	0x2000532c
 8012340:	2000357c 	.word	0x2000357c
 8012344:	20005b50 	.word	0x20005b50
 8012348:	08028f54 	.word	0x08028f54
 801234c:	20003578 	.word	0x20003578
 8012350:	2000065d 	.word	0x2000065d
 8012354:	080290a0 	.word	0x080290a0
 8012358:	20003580 	.word	0x20003580
 801235c:	20003ba8 	.word	0x20003ba8
 8012360:	20009ca8 	.word	0x20009ca8
 8012364:	20009caa 	.word	0x20009caa
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012368:	4ba0      	ldr	r3, [pc, #640]	; (80125ec <readCanToStructs+0x1d78>)
 801236a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801236e:	885b      	ldrh	r3, [r3, #2]
 8012370:	461a      	mov	r2, r3
 8012372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012376:	499d      	ldr	r1, [pc, #628]	; (80125ec <readCanToStructs+0x1d78>)
 8012378:	0112      	lsls	r2, r2, #4
 801237a:	440a      	add	r2, r1
 801237c:	4413      	add	r3, r2
 801237e:	3304      	adds	r3, #4
 8012380:	781a      	ldrb	r2, [r3, #0]
 8012382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012384:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012388:	3301      	adds	r3, #1
 801238a:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 801238c:	4b98      	ldr	r3, [pc, #608]	; (80125f0 <readCanToStructs+0x1d7c>)
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	3301      	adds	r3, #1
 8012392:	b29a      	uxth	r2, r3
 8012394:	4b96      	ldr	r3, [pc, #600]	; (80125f0 <readCanToStructs+0x1d7c>)
 8012396:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801239c:	3301      	adds	r3, #1
 801239e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80123a2:	4b92      	ldr	r3, [pc, #584]	; (80125ec <readCanToStructs+0x1d78>)
 80123a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123a8:	885b      	ldrh	r3, [r3, #2]
 80123aa:	4a90      	ldr	r2, [pc, #576]	; (80125ec <readCanToStructs+0x1d78>)
 80123ac:	011b      	lsls	r3, r3, #4
 80123ae:	4413      	add	r3, r2
 80123b0:	330c      	adds	r3, #12
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d3d5      	bcc.n	8012368 <readCanToStructs+0x1af4>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80123bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123c0:	4a8c      	ldr	r2, [pc, #560]	; (80125f4 <readCanToStructs+0x1d80>)
 80123c2:	f240 4112 	movw	r1, #1042	; 0x412
 80123c6:	fb01 f303 	mul.w	r3, r1, r3
 80123ca:	4413      	add	r3, r2
 80123cc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d026      	beq.n	8012428 <readCanToStructs+0x1bb4>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 80123da:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80123de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123e2:	4a84      	ldr	r2, [pc, #528]	; (80125f4 <readCanToStructs+0x1d80>)
 80123e4:	f240 4012 	movw	r0, #1042	; 0x412
 80123e8:	fb00 f303 	mul.w	r3, r0, r3
 80123ec:	4413      	add	r3, r2
 80123ee:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	461a      	mov	r2, r3
 80123f6:	4880      	ldr	r0, [pc, #512]	; (80125f8 <readCanToStructs+0x1d84>)
 80123f8:	f012 faae 	bl	8024958 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 80123fc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012400:	2100      	movs	r1, #0
 8012402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012404:	f012 f9c0 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801240c:	4a79      	ldr	r2, [pc, #484]	; (80125f4 <readCanToStructs+0x1d80>)
 801240e:	f240 4112 	movw	r1, #1042	; 0x412
 8012412:	fb01 f303 	mul.w	r3, r1, r3
 8012416:	4413      	add	r3, r2
 8012418:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801241c:	2200      	movs	r2, #0
 801241e:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012420:	4b73      	ldr	r3, [pc, #460]	; (80125f0 <readCanToStructs+0x1d7c>)
 8012422:	2200      	movs	r2, #0
 8012424:	801a      	strh	r2, [r3, #0]
					break;
 8012426:	e214      	b.n	8012852 <readCanToStructs+0x1fde>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801242c:	4971      	ldr	r1, [pc, #452]	; (80125f4 <readCanToStructs+0x1d80>)
 801242e:	f240 4212 	movw	r2, #1042	; 0x412
 8012432:	fb03 f202 	mul.w	r2, r3, r2
 8012436:	440a      	add	r2, r1
 8012438:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801243c:	7812      	ldrb	r2, [r2, #0]
 801243e:	3201      	adds	r2, #1
 8012440:	b2d0      	uxtb	r0, r2
 8012442:	4a6c      	ldr	r2, [pc, #432]	; (80125f4 <readCanToStructs+0x1d80>)
 8012444:	f240 4112 	movw	r1, #1042	; 0x412
 8012448:	fb01 f303 	mul.w	r3, r1, r3
 801244c:	4413      	add	r3, r2
 801244e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012452:	4602      	mov	r2, r0
 8012454:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8012456:	4b69      	ldr	r3, [pc, #420]	; (80125fc <readCanToStructs+0x1d88>)
 8012458:	881b      	ldrh	r3, [r3, #0]
 801245a:	3304      	adds	r3, #4
 801245c:	b29a      	uxth	r2, r3
 801245e:	4b68      	ldr	r3, [pc, #416]	; (8012600 <readCanToStructs+0x1d8c>)
 8012460:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8012462:	4b63      	ldr	r3, [pc, #396]	; (80125f0 <readCanToStructs+0x1d7c>)
 8012464:	881a      	ldrh	r2, [r3, #0]
 8012466:	4b66      	ldr	r3, [pc, #408]	; (8012600 <readCanToStructs+0x1d8c>)
 8012468:	881b      	ldrh	r3, [r3, #0]
 801246a:	429a      	cmp	r2, r3
 801246c:	f0c0 81ee 	bcc.w	801284c <readCanToStructs+0x1fd8>
					printf("EI1 Relay Info Received\n");
 8012470:	4864      	ldr	r0, [pc, #400]	; (8012604 <readCanToStructs+0x1d90>)
 8012472:	f012 fb0d 	bl	8024a90 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8012476:	4a64      	ldr	r2, [pc, #400]	; (8012608 <readCanToStructs+0x1d94>)
 8012478:	4b60      	ldr	r3, [pc, #384]	; (80125fc <readCanToStructs+0x1d88>)
 801247a:	4610      	mov	r0, r2
 801247c:	4619      	mov	r1, r3
 801247e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8012482:	461a      	mov	r2, r3
 8012484:	f012 f958 	bl	8024738 <memcpy>
					DataTraverser = 0;
 8012488:	4b59      	ldr	r3, [pc, #356]	; (80125f0 <readCanToStructs+0x1d7c>)
 801248a:	2200      	movs	r2, #0
 801248c:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 801248e:	4b5c      	ldr	r3, [pc, #368]	; (8012600 <readCanToStructs+0x1d8c>)
 8012490:	2200      	movs	r2, #0
 8012492:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012494:	4b5d      	ldr	r3, [pc, #372]	; (801260c <readCanToStructs+0x1d98>)
 8012496:	2201      	movs	r2, #1
 8012498:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801249a:	f005 fa53 	bl	8017944 <HAL_GetTick>
 801249e:	4603      	mov	r3, r0
 80124a0:	4a5a      	ldr	r2, [pc, #360]	; (801260c <readCanToStructs+0x1d98>)
 80124a2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80124a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124a8:	4a52      	ldr	r2, [pc, #328]	; (80125f4 <readCanToStructs+0x1d80>)
 80124aa:	f240 4112 	movw	r1, #1042	; 0x412
 80124ae:	fb01 f303 	mul.w	r3, r1, r3
 80124b2:	4413      	add	r3, r2
 80124b4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80124b8:	2200      	movs	r2, #0
 80124ba:	701a      	strb	r2, [r3, #0]
				break;
 80124bc:	e1c6      	b.n	801284c <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 80124be:	4b4f      	ldr	r3, [pc, #316]	; (80125fc <readCanToStructs+0x1d88>)
 80124c0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80124c2:	4b4a      	ldr	r3, [pc, #296]	; (80125ec <readCanToStructs+0x1d78>)
 80124c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124c8:	885b      	ldrh	r3, [r3, #2]
 80124ca:	4a48      	ldr	r2, [pc, #288]	; (80125ec <readCanToStructs+0x1d78>)
 80124cc:	011b      	lsls	r3, r3, #4
 80124ce:	4413      	add	r3, r2
 80124d0:	3304      	adds	r3, #4
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 80124d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d005      	beq.n	80124ec <readCanToStructs+0x1c78>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 80124e0:	4b43      	ldr	r3, [pc, #268]	; (80125f0 <readCanToStructs+0x1d7c>)
 80124e2:	881b      	ldrh	r3, [r3, #0]
 80124e4:	461a      	mov	r2, r3
 80124e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e8:	4413      	add	r3, r2
 80124ea:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 80124ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d117      	bne.n	8012524 <readCanToStructs+0x1cb0>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 80124f4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80124f8:	2100      	movs	r1, #0
 80124fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124fc:	f012 f944 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012504:	4a3b      	ldr	r2, [pc, #236]	; (80125f4 <readCanToStructs+0x1d80>)
 8012506:	f240 4112 	movw	r1, #1042	; 0x412
 801250a:	fb01 f303 	mul.w	r3, r1, r3
 801250e:	4413      	add	r3, r2
 8012510:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012514:	2200      	movs	r2, #0
 8012516:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012518:	4b35      	ldr	r3, [pc, #212]	; (80125f0 <readCanToStructs+0x1d7c>)
 801251a:	2200      	movs	r2, #0
 801251c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801251e:	4b38      	ldr	r3, [pc, #224]	; (8012600 <readCanToStructs+0x1d8c>)
 8012520:	2200      	movs	r2, #0
 8012522:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012524:	2301      	movs	r3, #1
 8012526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801252a:	e01c      	b.n	8012566 <readCanToStructs+0x1cf2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801252c:	4b2f      	ldr	r3, [pc, #188]	; (80125ec <readCanToStructs+0x1d78>)
 801252e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012532:	885b      	ldrh	r3, [r3, #2]
 8012534:	461a      	mov	r2, r3
 8012536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801253a:	492c      	ldr	r1, [pc, #176]	; (80125ec <readCanToStructs+0x1d78>)
 801253c:	0112      	lsls	r2, r2, #4
 801253e:	440a      	add	r2, r1
 8012540:	4413      	add	r3, r2
 8012542:	3304      	adds	r3, #4
 8012544:	781a      	ldrb	r2, [r3, #0]
 8012546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012548:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254c:	3301      	adds	r3, #1
 801254e:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8012550:	4b27      	ldr	r3, [pc, #156]	; (80125f0 <readCanToStructs+0x1d7c>)
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	3301      	adds	r3, #1
 8012556:	b29a      	uxth	r2, r3
 8012558:	4b25      	ldr	r3, [pc, #148]	; (80125f0 <readCanToStructs+0x1d7c>)
 801255a:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801255c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012560:	3301      	adds	r3, #1
 8012562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012566:	4b21      	ldr	r3, [pc, #132]	; (80125ec <readCanToStructs+0x1d78>)
 8012568:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801256c:	885b      	ldrh	r3, [r3, #2]
 801256e:	4a1f      	ldr	r2, [pc, #124]	; (80125ec <readCanToStructs+0x1d78>)
 8012570:	011b      	lsls	r3, r3, #4
 8012572:	4413      	add	r3, r2
 8012574:	330c      	adds	r3, #12
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801257c:	429a      	cmp	r2, r3
 801257e:	d3d5      	bcc.n	801252c <readCanToStructs+0x1cb8>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012584:	4a1b      	ldr	r2, [pc, #108]	; (80125f4 <readCanToStructs+0x1d80>)
 8012586:	f240 4112 	movw	r1, #1042	; 0x412
 801258a:	fb01 f303 	mul.w	r3, r1, r3
 801258e:	4413      	add	r3, r2
 8012590:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801259a:	429a      	cmp	r2, r3
 801259c:	d03a      	beq.n	8012614 <readCanToStructs+0x1da0>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 801259e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80125a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125a6:	4a13      	ldr	r2, [pc, #76]	; (80125f4 <readCanToStructs+0x1d80>)
 80125a8:	f240 4012 	movw	r0, #1042	; 0x412
 80125ac:	fb00 f303 	mul.w	r3, r0, r3
 80125b0:	4413      	add	r3, r2
 80125b2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	461a      	mov	r2, r3
 80125ba:	4815      	ldr	r0, [pc, #84]	; (8012610 <readCanToStructs+0x1d9c>)
 80125bc:	f012 f9cc 	bl	8024958 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 80125c0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80125c4:	2100      	movs	r1, #0
 80125c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125c8:	f012 f8de 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80125cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125d0:	4a08      	ldr	r2, [pc, #32]	; (80125f4 <readCanToStructs+0x1d80>)
 80125d2:	f240 4112 	movw	r1, #1042	; 0x412
 80125d6:	fb01 f303 	mul.w	r3, r1, r3
 80125da:	4413      	add	r3, r2
 80125dc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80125e0:	2200      	movs	r2, #0
 80125e2:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 80125e4:	4b02      	ldr	r3, [pc, #8]	; (80125f0 <readCanToStructs+0x1d7c>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	801a      	strh	r2, [r3, #0]
					break;
 80125ea:	e132      	b.n	8012852 <readCanToStructs+0x1fde>
 80125ec:	20005b50 	.word	0x20005b50
 80125f0:	20009ca8 	.word	0x20009ca8
 80125f4:	2000532c 	.word	0x2000532c
 80125f8:	080290ac 	.word	0x080290ac
 80125fc:	20003ba8 	.word	0x20003ba8
 8012600:	20009caa 	.word	0x20009caa
 8012604:	080290d8 	.word	0x080290d8
 8012608:	200039a4 	.word	0x200039a4
 801260c:	20003580 	.word	0x20003580
 8012610:	080290f0 	.word	0x080290f0
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012618:	49c2      	ldr	r1, [pc, #776]	; (8012924 <readCanToStructs+0x20b0>)
 801261a:	f240 4212 	movw	r2, #1042	; 0x412
 801261e:	fb03 f202 	mul.w	r2, r3, r2
 8012622:	440a      	add	r2, r1
 8012624:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012628:	7812      	ldrb	r2, [r2, #0]
 801262a:	3201      	adds	r2, #1
 801262c:	b2d0      	uxtb	r0, r2
 801262e:	4abd      	ldr	r2, [pc, #756]	; (8012924 <readCanToStructs+0x20b0>)
 8012630:	f240 4112 	movw	r1, #1042	; 0x412
 8012634:	fb01 f303 	mul.w	r3, r1, r3
 8012638:	4413      	add	r3, r2
 801263a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801263e:	4602      	mov	r2, r0
 8012640:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8012642:	4bb9      	ldr	r3, [pc, #740]	; (8012928 <readCanToStructs+0x20b4>)
 8012644:	881b      	ldrh	r3, [r3, #0]
 8012646:	3304      	adds	r3, #4
 8012648:	b29a      	uxth	r2, r3
 801264a:	4bb8      	ldr	r3, [pc, #736]	; (801292c <readCanToStructs+0x20b8>)
 801264c:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 801264e:	4bb8      	ldr	r3, [pc, #736]	; (8012930 <readCanToStructs+0x20bc>)
 8012650:	881a      	ldrh	r2, [r3, #0]
 8012652:	4bb6      	ldr	r3, [pc, #728]	; (801292c <readCanToStructs+0x20b8>)
 8012654:	881b      	ldrh	r3, [r3, #0]
 8012656:	429a      	cmp	r2, r3
 8012658:	f0c0 80fa 	bcc.w	8012850 <readCanToStructs+0x1fdc>
					printf("EI2 Relay Info Received\n");
 801265c:	48b5      	ldr	r0, [pc, #724]	; (8012934 <readCanToStructs+0x20c0>)
 801265e:	f012 fa17 	bl	8024a90 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8012662:	4ab5      	ldr	r2, [pc, #724]	; (8012938 <readCanToStructs+0x20c4>)
 8012664:	4bb0      	ldr	r3, [pc, #704]	; (8012928 <readCanToStructs+0x20b4>)
 8012666:	4610      	mov	r0, r2
 8012668:	4619      	mov	r1, r3
 801266a:	f44f 7301 	mov.w	r3, #516	; 0x204
 801266e:	461a      	mov	r2, r3
 8012670:	f012 f862 	bl	8024738 <memcpy>
					DataTraverser = 0;
 8012674:	4bae      	ldr	r3, [pc, #696]	; (8012930 <readCanToStructs+0x20bc>)
 8012676:	2200      	movs	r2, #0
 8012678:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 801267a:	4bac      	ldr	r3, [pc, #688]	; (801292c <readCanToStructs+0x20b8>)
 801267c:	2200      	movs	r2, #0
 801267e:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012680:	4bae      	ldr	r3, [pc, #696]	; (801293c <readCanToStructs+0x20c8>)
 8012682:	2201      	movs	r2, #1
 8012684:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012686:	f005 f95d 	bl	8017944 <HAL_GetTick>
 801268a:	4603      	mov	r3, r0
 801268c:	4aab      	ldr	r2, [pc, #684]	; (801293c <readCanToStructs+0x20c8>)
 801268e:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012694:	4aa3      	ldr	r2, [pc, #652]	; (8012924 <readCanToStructs+0x20b0>)
 8012696:	f240 4112 	movw	r1, #1042	; 0x412
 801269a:	fb01 f303 	mul.w	r3, r1, r3
 801269e:	4413      	add	r3, r2
 80126a0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80126a4:	2200      	movs	r2, #0
 80126a6:	701a      	strb	r2, [r3, #0]
				break;
 80126a8:	e0d2      	b.n	8012850 <readCanToStructs+0x1fdc>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 80126aa:	4ba5      	ldr	r3, [pc, #660]	; (8012940 <readCanToStructs+0x20cc>)
 80126ac:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80126ae:	4ba5      	ldr	r3, [pc, #660]	; (8012944 <readCanToStructs+0x20d0>)
 80126b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126b4:	885b      	ldrh	r3, [r3, #2]
 80126b6:	4aa3      	ldr	r2, [pc, #652]	; (8012944 <readCanToStructs+0x20d0>)
 80126b8:	011b      	lsls	r3, r3, #4
 80126ba:	4413      	add	r3, r2
 80126bc:	3304      	adds	r3, #4
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80126c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d110      	bne.n	80126ee <readCanToStructs+0x1e7a>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 80126cc:	2208      	movs	r2, #8
 80126ce:	2100      	movs	r1, #0
 80126d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126d2:	f012 f859 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80126d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126da:	4a92      	ldr	r2, [pc, #584]	; (8012924 <readCanToStructs+0x20b0>)
 80126dc:	f240 4112 	movw	r1, #1042	; 0x412
 80126e0:	fb01 f303 	mul.w	r3, r1, r3
 80126e4:	4413      	add	r3, r2
 80126e6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80126ea:	2200      	movs	r2, #0
 80126ec:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80126ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126f2:	4a8c      	ldr	r2, [pc, #560]	; (8012924 <readCanToStructs+0x20b0>)
 80126f4:	f240 4112 	movw	r1, #1042	; 0x412
 80126f8:	fb01 f303 	mul.w	r3, r1, r3
 80126fc:	4413      	add	r3, r2
 80126fe:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012708:	429a      	cmp	r2, r3
 801270a:	d014      	beq.n	8012736 <readCanToStructs+0x1ec2>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 801270c:	488e      	ldr	r0, [pc, #568]	; (8012948 <readCanToStructs+0x20d4>)
 801270e:	f012 f9bf 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8012712:	2208      	movs	r2, #8
 8012714:	2100      	movs	r1, #0
 8012716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012718:	f012 f836 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801271c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012720:	4a80      	ldr	r2, [pc, #512]	; (8012924 <readCanToStructs+0x20b0>)
 8012722:	f240 4112 	movw	r1, #1042	; 0x412
 8012726:	fb01 f303 	mul.w	r3, r1, r3
 801272a:	4413      	add	r3, r2
 801272c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012730:	2200      	movs	r2, #0
 8012732:	701a      	strb	r2, [r3, #0]
					break;
 8012734:	e08d      	b.n	8012852 <readCanToStructs+0x1fde>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012736:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801273a:	4613      	mov	r3, r2
 801273c:	00db      	lsls	r3, r3, #3
 801273e:	1a9b      	subs	r3, r3, r2
 8012740:	461a      	mov	r2, r3
 8012742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012744:	4413      	add	r3, r2
 8012746:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012748:	2301      	movs	r3, #1
 801274a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801274e:	e016      	b.n	801277e <readCanToStructs+0x1f0a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012750:	4b7c      	ldr	r3, [pc, #496]	; (8012944 <readCanToStructs+0x20d0>)
 8012752:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012756:	885b      	ldrh	r3, [r3, #2]
 8012758:	461a      	mov	r2, r3
 801275a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801275e:	4979      	ldr	r1, [pc, #484]	; (8012944 <readCanToStructs+0x20d0>)
 8012760:	0112      	lsls	r2, r2, #4
 8012762:	440a      	add	r2, r1
 8012764:	4413      	add	r3, r2
 8012766:	3304      	adds	r3, #4
 8012768:	781a      	ldrb	r2, [r3, #0]
 801276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012770:	3301      	adds	r3, #1
 8012772:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012778:	3301      	adds	r3, #1
 801277a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801277e:	4b71      	ldr	r3, [pc, #452]	; (8012944 <readCanToStructs+0x20d0>)
 8012780:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012784:	885b      	ldrh	r3, [r3, #2]
 8012786:	4a6f      	ldr	r2, [pc, #444]	; (8012944 <readCanToStructs+0x20d0>)
 8012788:	011b      	lsls	r3, r3, #4
 801278a:	4413      	add	r3, r2
 801278c:	330c      	adds	r3, #12
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012794:	429a      	cmp	r2, r3
 8012796:	d3db      	bcc.n	8012750 <readCanToStructs+0x1edc>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8012798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801279c:	4a61      	ldr	r2, [pc, #388]	; (8012924 <readCanToStructs+0x20b0>)
 801279e:	f240 4112 	movw	r1, #1042	; 0x412
 80127a2:	fb01 f303 	mul.w	r3, r1, r3
 80127a6:	4413      	add	r3, r2
 80127a8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	461a      	mov	r2, r3
 80127b0:	4613      	mov	r3, r2
 80127b2:	00db      	lsls	r3, r3, #3
 80127b4:	1a9a      	subs	r2, r3, r2
 80127b6:	4b63      	ldr	r3, [pc, #396]	; (8012944 <readCanToStructs+0x20d0>)
 80127b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127bc:	885b      	ldrh	r3, [r3, #2]
 80127be:	4961      	ldr	r1, [pc, #388]	; (8012944 <readCanToStructs+0x20d0>)
 80127c0:	011b      	lsls	r3, r3, #4
 80127c2:	440b      	add	r3, r1
 80127c4:	330c      	adds	r3, #12
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	3b01      	subs	r3, #1
 80127ca:	4413      	add	r3, r2
 80127cc:	2b07      	cmp	r3, #7
 80127ce:	d917      	bls.n	8012800 <readCanToStructs+0x1f8c>
					printf("Received Fault Injection Data\n");
 80127d0:	485e      	ldr	r0, [pc, #376]	; (801294c <readCanToStructs+0x20d8>)
 80127d2:	f012 f95d 	bl	8024a90 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80127d6:	4b59      	ldr	r3, [pc, #356]	; (801293c <readCanToStructs+0x20c8>)
 80127d8:	2201      	movs	r2, #1
 80127da:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80127dc:	f005 f8b2 	bl	8017944 <HAL_GetTick>
 80127e0:	4603      	mov	r3, r0
 80127e2:	4a56      	ldr	r2, [pc, #344]	; (801293c <readCanToStructs+0x20c8>)
 80127e4:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80127e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127ea:	4a4e      	ldr	r2, [pc, #312]	; (8012924 <readCanToStructs+0x20b0>)
 80127ec:	f240 4112 	movw	r1, #1042	; 0x412
 80127f0:	fb01 f303 	mul.w	r3, r1, r3
 80127f4:	4413      	add	r3, r2
 80127f6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80127fa:	2200      	movs	r2, #0
 80127fc:	701a      	strb	r2, [r3, #0]
				break;
 80127fe:	e028      	b.n	8012852 <readCanToStructs+0x1fde>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012804:	4a47      	ldr	r2, [pc, #284]	; (8012924 <readCanToStructs+0x20b0>)
 8012806:	f240 4112 	movw	r1, #1042	; 0x412
 801280a:	fb01 f303 	mul.w	r3, r1, r3
 801280e:	4413      	add	r3, r2
 8012810:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012814:	2201      	movs	r2, #1
 8012816:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801281c:	4941      	ldr	r1, [pc, #260]	; (8012924 <readCanToStructs+0x20b0>)
 801281e:	f240 4212 	movw	r2, #1042	; 0x412
 8012822:	fb03 f202 	mul.w	r2, r3, r2
 8012826:	440a      	add	r2, r1
 8012828:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801282c:	7812      	ldrb	r2, [r2, #0]
 801282e:	3201      	adds	r2, #1
 8012830:	b2d0      	uxtb	r0, r2
 8012832:	4a3c      	ldr	r2, [pc, #240]	; (8012924 <readCanToStructs+0x20b0>)
 8012834:	f240 4112 	movw	r1, #1042	; 0x412
 8012838:	fb01 f303 	mul.w	r3, r1, r3
 801283c:	4413      	add	r3, r2
 801283e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012842:	4602      	mov	r2, r0
 8012844:	701a      	strb	r2, [r3, #0]
				break;
 8012846:	e004      	b.n	8012852 <readCanToStructs+0x1fde>
				break;
 8012848:	bf00      	nop
 801284a:	e002      	b.n	8012852 <readCanToStructs+0x1fde>
				break;
 801284c:	bf00      	nop
 801284e:	e000      	b.n	8012852 <readCanToStructs+0x1fde>
				break;
 8012850:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8012852:	4b3c      	ldr	r3, [pc, #240]	; (8012944 <readCanToStructs+0x20d0>)
 8012854:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012858:	885b      	ldrh	r3, [r3, #2]
 801285a:	011b      	lsls	r3, r3, #4
 801285c:	4a39      	ldr	r2, [pc, #228]	; (8012944 <readCanToStructs+0x20d0>)
 801285e:	4413      	add	r3, r2
 8012860:	2210      	movs	r2, #16
 8012862:	2100      	movs	r1, #0
 8012864:	4618      	mov	r0, r3
 8012866:	f011 ff8f 	bl	8024788 <memset>
			canRead.Out++;
 801286a:	4b36      	ldr	r3, [pc, #216]	; (8012944 <readCanToStructs+0x20d0>)
 801286c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012870:	885b      	ldrh	r3, [r3, #2]
 8012872:	3301      	adds	r3, #1
 8012874:	b29a      	uxth	r2, r3
 8012876:	4b33      	ldr	r3, [pc, #204]	; (8012944 <readCanToStructs+0x20d0>)
 8012878:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801287c:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801287e:	4b31      	ldr	r3, [pc, #196]	; (8012944 <readCanToStructs+0x20d0>)
 8012880:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012884:	885b      	ldrh	r3, [r3, #2]
 8012886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801288a:	d104      	bne.n	8012896 <readCanToStructs+0x2022>
			{
				canRead.Out = 0;
 801288c:	4b2d      	ldr	r3, [pc, #180]	; (8012944 <readCanToStructs+0x20d0>)
 801288e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012892:	2200      	movs	r2, #0
 8012894:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8012896:	f7fd ff97 	bl	80107c8 <canDataReady>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	f47f a949 	bne.w	8011b34 <readCanToStructs+0x12c0>
			}

		}
		/* __________ SIEMENS _________ */
	}
	break;
 80128a2:	f001 b9c1 	b.w	8013c28 <readCanToStructs+0x33b4>
	case MEDHA:
	{
		/* __________ MEDHA _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80128a6:	4b27      	ldr	r3, [pc, #156]	; (8012944 <readCanToStructs+0x20d0>)
 80128a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128ac:	885b      	ldrh	r3, [r3, #2]
 80128ae:	4a25      	ldr	r2, [pc, #148]	; (8012944 <readCanToStructs+0x20d0>)
 80128b0:	011b      	lsls	r3, r3, #4
 80128b2:	4413      	add	r3, r2
 80128b4:	330f      	adds	r3, #15
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	3b01      	subs	r3, #1
 80128ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80128be:	4b21      	ldr	r3, [pc, #132]	; (8012944 <readCanToStructs+0x20d0>)
 80128c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128c4:	885b      	ldrh	r3, [r3, #2]
 80128c6:	4a1f      	ldr	r2, [pc, #124]	; (8012944 <readCanToStructs+0x20d0>)
 80128c8:	011b      	lsls	r3, r3, #4
 80128ca:	4413      	add	r3, r2
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80128d2:	f200 866c 	bhi.w	80135ae <readCanToStructs+0x2d3a>
 80128d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128da:	d80a      	bhi.n	80128f2 <readCanToStructs+0x207e>
 80128dc:	f240 1203 	movw	r2, #259	; 0x103
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d035      	beq.n	8012950 <readCanToStructs+0x20dc>
 80128e4:	f240 1209 	movw	r2, #265	; 0x109
 80128e8:	4293      	cmp	r3, r2
 80128ea:	f000 8107 	beq.w	8012afc <readCanToStructs+0x2288>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
			default:
				break;
 80128ee:	f000 be5e 	b.w	80135ae <readCanToStructs+0x2d3a>
 80128f2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80128f6:	2b07      	cmp	r3, #7
 80128f8:	f200 8659 	bhi.w	80135ae <readCanToStructs+0x2d3a>
 80128fc:	a201      	add	r2, pc, #4	; (adr r2, 8012904 <readCanToStructs+0x2090>)
 80128fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012902:	bf00      	nop
 8012904:	08012ccf 	.word	0x08012ccf
 8012908:	08012ea5 	.word	0x08012ea5
 801290c:	080135af 	.word	0x080135af
 8012910:	080135af 	.word	0x080135af
 8012914:	080130a5 	.word	0x080130a5
 8012918:	080135af 	.word	0x080135af
 801291c:	08013237 	.word	0x08013237
 8012920:	08013409 	.word	0x08013409
 8012924:	2000532c 	.word	0x2000532c
 8012928:	20003ba8 	.word	0x20003ba8
 801292c:	20009caa 	.word	0x20009caa
 8012930:	20009ca8 	.word	0x20009ca8
 8012934:	0802911c 	.word	0x0802911c
 8012938:	200039a4 	.word	0x200039a4
 801293c:	20003580 	.word	0x20003580
 8012940:	2000356c 	.word	0x2000356c
 8012944:	20005b50 	.word	0x20005b50
 8012948:	08028ff0 	.word	0x08028ff0
 801294c:	08029010 	.word	0x08029010
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012950:	4bc3      	ldr	r3, [pc, #780]	; (8012c60 <readCanToStructs+0x23ec>)
 8012952:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012954:	4bc3      	ldr	r3, [pc, #780]	; (8012c64 <readCanToStructs+0x23f0>)
 8012956:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801295a:	885b      	ldrh	r3, [r3, #2]
 801295c:	4ac1      	ldr	r2, [pc, #772]	; (8012c64 <readCanToStructs+0x23f0>)
 801295e:	011b      	lsls	r3, r3, #4
 8012960:	4413      	add	r3, r2
 8012962:	3304      	adds	r3, #4
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801296a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801296e:	2b00      	cmp	r3, #0
 8012970:	d110      	bne.n	8012994 <readCanToStructs+0x2120>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012972:	2206      	movs	r2, #6
 8012974:	2100      	movs	r1, #0
 8012976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012978:	f011 ff06 	bl	8024788 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801297c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012980:	4ab9      	ldr	r2, [pc, #740]	; (8012c68 <readCanToStructs+0x23f4>)
 8012982:	f240 4112 	movw	r1, #1042	; 0x412
 8012986:	fb01 f303 	mul.w	r3, r1, r3
 801298a:	4413      	add	r3, r2
 801298c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012990:	2200      	movs	r2, #0
 8012992:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8012994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012998:	4ab3      	ldr	r2, [pc, #716]	; (8012c68 <readCanToStructs+0x23f4>)
 801299a:	f240 4112 	movw	r1, #1042	; 0x412
 801299e:	fb01 f303 	mul.w	r3, r1, r3
 80129a2:	4413      	add	r3, r2
 80129a4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d015      	beq.n	80129de <readCanToStructs+0x216a>
					printf("GPS Packet Seq no MisMatch\n");
 80129b2:	48ae      	ldr	r0, [pc, #696]	; (8012c6c <readCanToStructs+0x23f8>)
 80129b4:	f012 f86c 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80129b8:	2206      	movs	r2, #6
 80129ba:	2100      	movs	r1, #0
 80129bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129be:	f011 fee3 	bl	8024788 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80129c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129c6:	4aa8      	ldr	r2, [pc, #672]	; (8012c68 <readCanToStructs+0x23f4>)
 80129c8:	f240 4112 	movw	r1, #1042	; 0x412
 80129cc:	fb01 f303 	mul.w	r3, r1, r3
 80129d0:	4413      	add	r3, r2
 80129d2:	f203 2307 	addw	r3, r3, #519	; 0x207
 80129d6:	2200      	movs	r2, #0
 80129d8:	701a      	strb	r2, [r3, #0]
					break;
 80129da:	f000 bde9 	b.w	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr += (7 * uc_seqNo);
 80129de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129e2:	4613      	mov	r3, r2
 80129e4:	00db      	lsls	r3, r3, #3
 80129e6:	1a9b      	subs	r3, r3, r2
 80129e8:	461a      	mov	r2, r3
 80129ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ec:	4413      	add	r3, r2
 80129ee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129f0:	2301      	movs	r3, #1
 80129f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129f6:	e016      	b.n	8012a26 <readCanToStructs+0x21b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80129f8:	4b9a      	ldr	r3, [pc, #616]	; (8012c64 <readCanToStructs+0x23f0>)
 80129fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129fe:	885b      	ldrh	r3, [r3, #2]
 8012a00:	461a      	mov	r2, r3
 8012a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a06:	4997      	ldr	r1, [pc, #604]	; (8012c64 <readCanToStructs+0x23f0>)
 8012a08:	0112      	lsls	r2, r2, #4
 8012a0a:	440a      	add	r2, r1
 8012a0c:	4413      	add	r3, r2
 8012a0e:	3304      	adds	r3, #4
 8012a10:	781a      	ldrb	r2, [r3, #0]
 8012a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a14:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a18:	3301      	adds	r3, #1
 8012a1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a20:	3301      	adds	r3, #1
 8012a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a26:	4b8f      	ldr	r3, [pc, #572]	; (8012c64 <readCanToStructs+0x23f0>)
 8012a28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a2c:	885b      	ldrh	r3, [r3, #2]
 8012a2e:	4a8d      	ldr	r2, [pc, #564]	; (8012c64 <readCanToStructs+0x23f0>)
 8012a30:	011b      	lsls	r3, r3, #4
 8012a32:	4413      	add	r3, r2
 8012a34:	330c      	adds	r3, #12
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d3db      	bcc.n	80129f8 <readCanToStructs+0x2184>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a44:	4a88      	ldr	r2, [pc, #544]	; (8012c68 <readCanToStructs+0x23f4>)
 8012a46:	f240 4112 	movw	r1, #1042	; 0x412
 8012a4a:	fb01 f303 	mul.w	r3, r1, r3
 8012a4e:	4413      	add	r3, r2
 8012a50:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	461a      	mov	r2, r3
 8012a58:	4613      	mov	r3, r2
 8012a5a:	00db      	lsls	r3, r3, #3
 8012a5c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012a5e:	4b81      	ldr	r3, [pc, #516]	; (8012c64 <readCanToStructs+0x23f0>)
 8012a60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a64:	885b      	ldrh	r3, [r3, #2]
 8012a66:	497f      	ldr	r1, [pc, #508]	; (8012c64 <readCanToStructs+0x23f0>)
 8012a68:	011b      	lsls	r3, r3, #4
 8012a6a:	440b      	add	r3, r1
 8012a6c:	330c      	adds	r3, #12
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	3b01      	subs	r3, #1
 8012a72:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012a74:	2b05      	cmp	r3, #5
 8012a76:	d91c      	bls.n	8012ab2 <readCanToStructs+0x223e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012a78:	4b7d      	ldr	r3, [pc, #500]	; (8012c70 <readCanToStructs+0x23fc>)
 8012a7a:	4a79      	ldr	r2, [pc, #484]	; (8012c60 <readCanToStructs+0x23ec>)
 8012a7c:	6811      	ldr	r1, [r2, #0]
 8012a7e:	6019      	str	r1, [r3, #0]
 8012a80:	8892      	ldrh	r2, [r2, #4]
 8012a82:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012a84:	4b7b      	ldr	r3, [pc, #492]	; (8012c74 <readCanToStructs+0x2400>)
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d102      	bne.n	8012a92 <readCanToStructs+0x221e>
						printf("GPS_PACKET_RECEIVED\n");
 8012a8c:	487a      	ldr	r0, [pc, #488]	; (8012c78 <readCanToStructs+0x2404>)
 8012a8e:	f011 ffff 	bl	8024a90 <puts>
					Write_RTC();
 8012a92:	f7f8 ff29 	bl	800b8e8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a9a:	4a73      	ldr	r2, [pc, #460]	; (8012c68 <readCanToStructs+0x23f4>)
 8012a9c:	f240 4112 	movw	r1, #1042	; 0x412
 8012aa0:	fb01 f303 	mul.w	r3, r1, r3
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012aaa:	2200      	movs	r2, #0
 8012aac:	701a      	strb	r2, [r3, #0]
				break;
 8012aae:	f000 bd7f 	b.w	80135b0 <readCanToStructs+0x2d3c>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8012ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ab6:	4a6c      	ldr	r2, [pc, #432]	; (8012c68 <readCanToStructs+0x23f4>)
 8012ab8:	f240 4112 	movw	r1, #1042	; 0x412
 8012abc:	fb01 f303 	mul.w	r3, r1, r3
 8012ac0:	4413      	add	r3, r2
 8012ac2:	f203 2306 	addw	r3, r3, #518	; 0x206
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8012aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ace:	4966      	ldr	r1, [pc, #408]	; (8012c68 <readCanToStructs+0x23f4>)
 8012ad0:	f240 4212 	movw	r2, #1042	; 0x412
 8012ad4:	fb03 f202 	mul.w	r2, r3, r2
 8012ad8:	440a      	add	r2, r1
 8012ada:	f202 2207 	addw	r2, r2, #519	; 0x207
 8012ade:	7812      	ldrb	r2, [r2, #0]
 8012ae0:	3201      	adds	r2, #1
 8012ae2:	b2d0      	uxtb	r0, r2
 8012ae4:	4a60      	ldr	r2, [pc, #384]	; (8012c68 <readCanToStructs+0x23f4>)
 8012ae6:	f240 4112 	movw	r1, #1042	; 0x412
 8012aea:	fb01 f303 	mul.w	r3, r1, r3
 8012aee:	4413      	add	r3, r2
 8012af0:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012af4:	4602      	mov	r2, r0
 8012af6:	701a      	strb	r2, [r3, #0]
				break;
 8012af8:	f000 bd5a 	b.w	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012afc:	4b58      	ldr	r3, [pc, #352]	; (8012c60 <readCanToStructs+0x23ec>)
 8012afe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012b00:	4b58      	ldr	r3, [pc, #352]	; (8012c64 <readCanToStructs+0x23f0>)
 8012b02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b06:	885b      	ldrh	r3, [r3, #2]
 8012b08:	4a56      	ldr	r2, [pc, #344]	; (8012c64 <readCanToStructs+0x23f0>)
 8012b0a:	011b      	lsls	r3, r3, #4
 8012b0c:	4413      	add	r3, r2
 8012b0e:	3304      	adds	r3, #4
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012b16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d110      	bne.n	8012b40 <readCanToStructs+0x22cc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012b1e:	2206      	movs	r2, #6
 8012b20:	2100      	movs	r1, #0
 8012b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b24:	f011 fe30 	bl	8024788 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b2c:	4a4e      	ldr	r2, [pc, #312]	; (8012c68 <readCanToStructs+0x23f4>)
 8012b2e:	f240 4112 	movw	r1, #1042	; 0x412
 8012b32:	fb01 f303 	mul.w	r3, r1, r3
 8012b36:	4413      	add	r3, r2
 8012b38:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8012b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b44:	4a48      	ldr	r2, [pc, #288]	; (8012c68 <readCanToStructs+0x23f4>)
 8012b46:	f240 4112 	movw	r1, #1042	; 0x412
 8012b4a:	fb01 f303 	mul.w	r3, r1, r3
 8012b4e:	4413      	add	r3, r2
 8012b50:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d015      	beq.n	8012b8a <readCanToStructs+0x2316>
					printf("GPS2 Packet Seq no MisMatch\n");
 8012b5e:	4847      	ldr	r0, [pc, #284]	; (8012c7c <readCanToStructs+0x2408>)
 8012b60:	f011 ff96 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012b64:	2206      	movs	r2, #6
 8012b66:	2100      	movs	r1, #0
 8012b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b6a:	f011 fe0d 	bl	8024788 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b72:	4a3d      	ldr	r2, [pc, #244]	; (8012c68 <readCanToStructs+0x23f4>)
 8012b74:	f240 4112 	movw	r1, #1042	; 0x412
 8012b78:	fb01 f303 	mul.w	r3, r1, r3
 8012b7c:	4413      	add	r3, r2
 8012b7e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012b82:	2200      	movs	r2, #0
 8012b84:	701a      	strb	r2, [r3, #0]
					break;
 8012b86:	f000 bd13 	b.w	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012b8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b8e:	4613      	mov	r3, r2
 8012b90:	00db      	lsls	r3, r3, #3
 8012b92:	1a9b      	subs	r3, r3, r2
 8012b94:	461a      	mov	r2, r3
 8012b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b98:	4413      	add	r3, r2
 8012b9a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ba2:	e016      	b.n	8012bd2 <readCanToStructs+0x235e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012ba4:	4b2f      	ldr	r3, [pc, #188]	; (8012c64 <readCanToStructs+0x23f0>)
 8012ba6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012baa:	885b      	ldrh	r3, [r3, #2]
 8012bac:	461a      	mov	r2, r3
 8012bae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bb2:	492c      	ldr	r1, [pc, #176]	; (8012c64 <readCanToStructs+0x23f0>)
 8012bb4:	0112      	lsls	r2, r2, #4
 8012bb6:	440a      	add	r2, r1
 8012bb8:	4413      	add	r3, r2
 8012bba:	3304      	adds	r3, #4
 8012bbc:	781a      	ldrb	r2, [r3, #0]
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc4:	3301      	adds	r3, #1
 8012bc6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012bc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bcc:	3301      	adds	r3, #1
 8012bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012bd2:	4b24      	ldr	r3, [pc, #144]	; (8012c64 <readCanToStructs+0x23f0>)
 8012bd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bd8:	885b      	ldrh	r3, [r3, #2]
 8012bda:	4a22      	ldr	r2, [pc, #136]	; (8012c64 <readCanToStructs+0x23f0>)
 8012bdc:	011b      	lsls	r3, r3, #4
 8012bde:	4413      	add	r3, r2
 8012be0:	330c      	adds	r3, #12
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d3db      	bcc.n	8012ba4 <readCanToStructs+0x2330>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bf0:	4a1d      	ldr	r2, [pc, #116]	; (8012c68 <readCanToStructs+0x23f4>)
 8012bf2:	f240 4112 	movw	r1, #1042	; 0x412
 8012bf6:	fb01 f303 	mul.w	r3, r1, r3
 8012bfa:	4413      	add	r3, r2
 8012bfc:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	461a      	mov	r2, r3
 8012c04:	4613      	mov	r3, r2
 8012c06:	00db      	lsls	r3, r3, #3
 8012c08:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012c0a:	4b16      	ldr	r3, [pc, #88]	; (8012c64 <readCanToStructs+0x23f0>)
 8012c0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c10:	885b      	ldrh	r3, [r3, #2]
 8012c12:	4914      	ldr	r1, [pc, #80]	; (8012c64 <readCanToStructs+0x23f0>)
 8012c14:	011b      	lsls	r3, r3, #4
 8012c16:	440b      	add	r3, r1
 8012c18:	330c      	adds	r3, #12
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012c20:	2b05      	cmp	r3, #5
 8012c22:	d92f      	bls.n	8012c84 <readCanToStructs+0x2410>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012c24:	4b12      	ldr	r3, [pc, #72]	; (8012c70 <readCanToStructs+0x23fc>)
 8012c26:	4a0e      	ldr	r2, [pc, #56]	; (8012c60 <readCanToStructs+0x23ec>)
 8012c28:	6811      	ldr	r1, [r2, #0]
 8012c2a:	6019      	str	r1, [r3, #0]
 8012c2c:	8892      	ldrh	r2, [r2, #4]
 8012c2e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012c30:	4b10      	ldr	r3, [pc, #64]	; (8012c74 <readCanToStructs+0x2400>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d102      	bne.n	8012c3e <readCanToStructs+0x23ca>
						printf("GPS2_PACKET_RECEIVED\n");
 8012c38:	4811      	ldr	r0, [pc, #68]	; (8012c80 <readCanToStructs+0x240c>)
 8012c3a:	f011 ff29 	bl	8024a90 <puts>
					Write_RTC();
 8012c3e:	f7f8 fe53 	bl	800b8e8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c46:	4a08      	ldr	r2, [pc, #32]	; (8012c68 <readCanToStructs+0x23f4>)
 8012c48:	f240 4112 	movw	r1, #1042	; 0x412
 8012c4c:	fb01 f303 	mul.w	r3, r1, r3
 8012c50:	4413      	add	r3, r2
 8012c52:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012c56:	2200      	movs	r2, #0
 8012c58:	701a      	strb	r2, [r3, #0]
				break;
 8012c5a:	f000 bca9 	b.w	80135b0 <readCanToStructs+0x2d3c>
 8012c5e:	bf00      	nop
 8012c60:	200028d4 	.word	0x200028d4
 8012c64:	20005b50 	.word	0x20005b50
 8012c68:	2000532c 	.word	0x2000532c
 8012c6c:	08028ebc 	.word	0x08028ebc
 8012c70:	200028cc 	.word	0x200028cc
 8012c74:	2000065d 	.word	0x2000065d
 8012c78:	08028ed8 	.word	0x08028ed8
 8012c7c:	08028eec 	.word	0x08028eec
 8012c80:	08028f08 	.word	0x08028f08
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8012c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c88:	4ab8      	ldr	r2, [pc, #736]	; (8012f6c <readCanToStructs+0x26f8>)
 8012c8a:	f240 4112 	movw	r1, #1042	; 0x412
 8012c8e:	fb01 f303 	mul.w	r3, r1, r3
 8012c92:	4413      	add	r3, r2
 8012c94:	f203 2312 	addw	r3, r3, #530	; 0x212
 8012c98:	2201      	movs	r2, #1
 8012c9a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8012c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ca0:	49b2      	ldr	r1, [pc, #712]	; (8012f6c <readCanToStructs+0x26f8>)
 8012ca2:	f240 4212 	movw	r2, #1042	; 0x412
 8012ca6:	fb03 f202 	mul.w	r2, r3, r2
 8012caa:	440a      	add	r2, r1
 8012cac:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012cb0:	7812      	ldrb	r2, [r2, #0]
 8012cb2:	3201      	adds	r2, #1
 8012cb4:	b2d0      	uxtb	r0, r2
 8012cb6:	4aad      	ldr	r2, [pc, #692]	; (8012f6c <readCanToStructs+0x26f8>)
 8012cb8:	f240 4112 	movw	r1, #1042	; 0x412
 8012cbc:	fb01 f303 	mul.w	r3, r1, r3
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	701a      	strb	r2, [r3, #0]
				break;
 8012cca:	f000 bc71 	b.w	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012cce:	4ba8      	ldr	r3, [pc, #672]	; (8012f70 <readCanToStructs+0x26fc>)
 8012cd0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012cd2:	4ba8      	ldr	r3, [pc, #672]	; (8012f74 <readCanToStructs+0x2700>)
 8012cd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012cd8:	885b      	ldrh	r3, [r3, #2]
 8012cda:	4aa6      	ldr	r2, [pc, #664]	; (8012f74 <readCanToStructs+0x2700>)
 8012cdc:	011b      	lsls	r3, r3, #4
 8012cde:	4413      	add	r3, r2
 8012ce0:	3304      	adds	r3, #4
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012ce8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d110      	bne.n	8012d12 <readCanToStructs+0x249e>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012cf0:	2208      	movs	r2, #8
 8012cf2:	2100      	movs	r1, #0
 8012cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cf6:	f011 fd47 	bl	8024788 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cfe:	4a9b      	ldr	r2, [pc, #620]	; (8012f6c <readCanToStructs+0x26f8>)
 8012d00:	f240 4112 	movw	r1, #1042	; 0x412
 8012d04:	fb01 f303 	mul.w	r3, r1, r3
 8012d08:	4413      	add	r3, r2
 8012d0a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012d0e:	2200      	movs	r2, #0
 8012d10:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d16:	4a95      	ldr	r2, [pc, #596]	; (8012f6c <readCanToStructs+0x26f8>)
 8012d18:	f240 4112 	movw	r1, #1042	; 0x412
 8012d1c:	fb01 f303 	mul.w	r3, r1, r3
 8012d20:	4413      	add	r3, r2
 8012d22:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d026      	beq.n	8012d7e <readCanToStructs+0x250a>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8012d30:	4891      	ldr	r0, [pc, #580]	; (8012f78 <readCanToStructs+0x2704>)
 8012d32:	f011 fead 	bl	8024a90 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 8012d36:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8012d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d3e:	4a8b      	ldr	r2, [pc, #556]	; (8012f6c <readCanToStructs+0x26f8>)
 8012d40:	f240 4012 	movw	r0, #1042	; 0x412
 8012d44:	fb00 f303 	mul.w	r3, r0, r3
 8012d48:	4413      	add	r3, r2
 8012d4a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	461a      	mov	r2, r3
 8012d52:	488a      	ldr	r0, [pc, #552]	; (8012f7c <readCanToStructs+0x2708>)
 8012d54:	f011 fe00 	bl	8024958 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012d58:	2208      	movs	r2, #8
 8012d5a:	2100      	movs	r1, #0
 8012d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d5e:	f011 fd13 	bl	8024788 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d66:	4a81      	ldr	r2, [pc, #516]	; (8012f6c <readCanToStructs+0x26f8>)
 8012d68:	f240 4112 	movw	r1, #1042	; 0x412
 8012d6c:	fb01 f303 	mul.w	r3, r1, r3
 8012d70:	4413      	add	r3, r2
 8012d72:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012d76:	2200      	movs	r2, #0
 8012d78:	701a      	strb	r2, [r3, #0]
					break;
 8012d7a:	f000 bc19 	b.w	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012d7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d82:	4613      	mov	r3, r2
 8012d84:	00db      	lsls	r3, r3, #3
 8012d86:	1a9b      	subs	r3, r3, r2
 8012d88:	461a      	mov	r2, r3
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	4413      	add	r3, r2
 8012d8e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d90:	2301      	movs	r3, #1
 8012d92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d96:	e016      	b.n	8012dc6 <readCanToStructs+0x2552>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012d98:	4b76      	ldr	r3, [pc, #472]	; (8012f74 <readCanToStructs+0x2700>)
 8012d9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d9e:	885b      	ldrh	r3, [r3, #2]
 8012da0:	461a      	mov	r2, r3
 8012da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012da6:	4973      	ldr	r1, [pc, #460]	; (8012f74 <readCanToStructs+0x2700>)
 8012da8:	0112      	lsls	r2, r2, #4
 8012daa:	440a      	add	r2, r1
 8012dac:	4413      	add	r3, r2
 8012dae:	3304      	adds	r3, #4
 8012db0:	781a      	ldrb	r2, [r3, #0]
 8012db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db8:	3301      	adds	r3, #1
 8012dba:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012dc6:	4b6b      	ldr	r3, [pc, #428]	; (8012f74 <readCanToStructs+0x2700>)
 8012dc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012dcc:	885b      	ldrh	r3, [r3, #2]
 8012dce:	4a69      	ldr	r2, [pc, #420]	; (8012f74 <readCanToStructs+0x2700>)
 8012dd0:	011b      	lsls	r3, r3, #4
 8012dd2:	4413      	add	r3, r2
 8012dd4:	330c      	adds	r3, #12
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d3db      	bcc.n	8012d98 <readCanToStructs+0x2524>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012de4:	4a61      	ldr	r2, [pc, #388]	; (8012f6c <readCanToStructs+0x26f8>)
 8012de6:	f240 4112 	movw	r1, #1042	; 0x412
 8012dea:	fb01 f303 	mul.w	r3, r1, r3
 8012dee:	4413      	add	r3, r2
 8012df0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	461a      	mov	r2, r3
 8012df8:	4613      	mov	r3, r2
 8012dfa:	00db      	lsls	r3, r3, #3
 8012dfc:	1a9a      	subs	r2, r3, r2
 8012dfe:	4b5d      	ldr	r3, [pc, #372]	; (8012f74 <readCanToStructs+0x2700>)
 8012e00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e04:	885b      	ldrh	r3, [r3, #2]
 8012e06:	495b      	ldr	r1, [pc, #364]	; (8012f74 <readCanToStructs+0x2700>)
 8012e08:	011b      	lsls	r3, r3, #4
 8012e0a:	440b      	add	r3, r1
 8012e0c:	330c      	adds	r3, #12
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	3b01      	subs	r3, #1
 8012e12:	4413      	add	r3, r2
 8012e14:	2b07      	cmp	r3, #7
 8012e16:	d921      	bls.n	8012e5c <readCanToStructs+0x25e8>
					if(Debug_flag == 1)
 8012e18:	4b59      	ldr	r3, [pc, #356]	; (8012f80 <readCanToStructs+0x270c>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d102      	bne.n	8012e26 <readCanToStructs+0x25b2>
						printf("\nRCV OTH_INFO1\n");
 8012e20:	4858      	ldr	r0, [pc, #352]	; (8012f84 <readCanToStructs+0x2710>)
 8012e22:	f011 fe35 	bl	8024a90 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012e26:	4b58      	ldr	r3, [pc, #352]	; (8012f88 <readCanToStructs+0x2714>)
 8012e28:	4a51      	ldr	r2, [pc, #324]	; (8012f70 <readCanToStructs+0x26fc>)
 8012e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e2e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8012e32:	4b56      	ldr	r3, [pc, #344]	; (8012f8c <readCanToStructs+0x2718>)
 8012e34:	2201      	movs	r2, #1
 8012e36:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012e38:	f004 fd84 	bl	8017944 <HAL_GetTick>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	4a54      	ldr	r2, [pc, #336]	; (8012f90 <readCanToStructs+0x271c>)
 8012e40:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e46:	4a49      	ldr	r2, [pc, #292]	; (8012f6c <readCanToStructs+0x26f8>)
 8012e48:	f240 4112 	movw	r1, #1042	; 0x412
 8012e4c:	fb01 f303 	mul.w	r3, r1, r3
 8012e50:	4413      	add	r3, r2
 8012e52:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012e56:	2200      	movs	r2, #0
 8012e58:	701a      	strb	r2, [r3, #0]
				break;
 8012e5a:	e3a9      	b.n	80135b0 <readCanToStructs+0x2d3c>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8012e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e60:	4a42      	ldr	r2, [pc, #264]	; (8012f6c <readCanToStructs+0x26f8>)
 8012e62:	f240 4112 	movw	r1, #1042	; 0x412
 8012e66:	fb01 f303 	mul.w	r3, r1, r3
 8012e6a:	4413      	add	r3, r2
 8012e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012e70:	2201      	movs	r2, #1
 8012e72:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8012e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e78:	493c      	ldr	r1, [pc, #240]	; (8012f6c <readCanToStructs+0x26f8>)
 8012e7a:	f240 4212 	movw	r2, #1042	; 0x412
 8012e7e:	fb03 f202 	mul.w	r2, r3, r2
 8012e82:	440a      	add	r2, r1
 8012e84:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8012e88:	7812      	ldrb	r2, [r2, #0]
 8012e8a:	3201      	adds	r2, #1
 8012e8c:	b2d0      	uxtb	r0, r2
 8012e8e:	4a37      	ldr	r2, [pc, #220]	; (8012f6c <readCanToStructs+0x26f8>)
 8012e90:	f240 4112 	movw	r1, #1042	; 0x412
 8012e94:	fb01 f303 	mul.w	r3, r1, r3
 8012e98:	4413      	add	r3, r2
 8012e9a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	701a      	strb	r2, [r3, #0]
				break;
 8012ea2:	e385      	b.n	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012ea4:	4b32      	ldr	r3, [pc, #200]	; (8012f70 <readCanToStructs+0x26fc>)
 8012ea6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012ea8:	4b32      	ldr	r3, [pc, #200]	; (8012f74 <readCanToStructs+0x2700>)
 8012eaa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012eae:	885b      	ldrh	r3, [r3, #2]
 8012eb0:	4a30      	ldr	r2, [pc, #192]	; (8012f74 <readCanToStructs+0x2700>)
 8012eb2:	011b      	lsls	r3, r3, #4
 8012eb4:	4413      	add	r3, r2
 8012eb6:	3304      	adds	r3, #4
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012ebe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d110      	bne.n	8012ee8 <readCanToStructs+0x2674>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012ec6:	2208      	movs	r2, #8
 8012ec8:	2100      	movs	r1, #0
 8012eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ecc:	f011 fc5c 	bl	8024788 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ed4:	4a25      	ldr	r2, [pc, #148]	; (8012f6c <readCanToStructs+0x26f8>)
 8012ed6:	f240 4112 	movw	r1, #1042	; 0x412
 8012eda:	fb01 f303 	mul.w	r3, r1, r3
 8012ede:	4413      	add	r3, r2
 8012ee0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eec:	4a1f      	ldr	r2, [pc, #124]	; (8012f6c <readCanToStructs+0x26f8>)
 8012eee:	f240 4112 	movw	r1, #1042	; 0x412
 8012ef2:	fb01 f303 	mul.w	r3, r1, r3
 8012ef6:	4413      	add	r3, r2
 8012ef8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d025      	beq.n	8012f52 <readCanToStructs+0x26de>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 8012f06:	4823      	ldr	r0, [pc, #140]	; (8012f94 <readCanToStructs+0x2720>)
 8012f08:	f011 fdc2 	bl	8024a90 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 8012f0c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8012f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f14:	4a15      	ldr	r2, [pc, #84]	; (8012f6c <readCanToStructs+0x26f8>)
 8012f16:	f240 4012 	movw	r0, #1042	; 0x412
 8012f1a:	fb00 f303 	mul.w	r3, r0, r3
 8012f1e:	4413      	add	r3, r2
 8012f20:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	461a      	mov	r2, r3
 8012f28:	4814      	ldr	r0, [pc, #80]	; (8012f7c <readCanToStructs+0x2708>)
 8012f2a:	f011 fd15 	bl	8024958 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012f2e:	2208      	movs	r2, #8
 8012f30:	2100      	movs	r1, #0
 8012f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f34:	f011 fc28 	bl	8024788 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012f38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f3c:	4a0b      	ldr	r2, [pc, #44]	; (8012f6c <readCanToStructs+0x26f8>)
 8012f3e:	f240 4112 	movw	r1, #1042	; 0x412
 8012f42:	fb01 f303 	mul.w	r3, r1, r3
 8012f46:	4413      	add	r3, r2
 8012f48:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	701a      	strb	r2, [r3, #0]
					break;
 8012f50:	e32e      	b.n	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012f52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012f56:	4613      	mov	r3, r2
 8012f58:	00db      	lsls	r3, r3, #3
 8012f5a:	1a9b      	subs	r3, r3, r2
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	4413      	add	r3, r2
 8012f62:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012f64:	2301      	movs	r3, #1
 8012f66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f6a:	e02c      	b.n	8012fc6 <readCanToStructs+0x2752>
 8012f6c:	2000532c 	.word	0x2000532c
 8012f70:	20002714 	.word	0x20002714
 8012f74:	20005b50 	.word	0x20005b50
 8012f78:	08029134 	.word	0x08029134
 8012f7c:	0802915c 	.word	0x0802915c
 8012f80:	2000065d 	.word	0x2000065d
 8012f84:	0802916c 	.word	0x0802916c
 8012f88:	2000270c 	.word	0x2000270c
 8012f8c:	200021a8 	.word	0x200021a8
 8012f90:	200021ac 	.word	0x200021ac
 8012f94:	0802917c 	.word	0x0802917c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012f98:	4bc8      	ldr	r3, [pc, #800]	; (80132bc <readCanToStructs+0x2a48>)
 8012f9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f9e:	885b      	ldrh	r3, [r3, #2]
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fa6:	49c5      	ldr	r1, [pc, #788]	; (80132bc <readCanToStructs+0x2a48>)
 8012fa8:	0112      	lsls	r2, r2, #4
 8012faa:	440a      	add	r2, r1
 8012fac:	4413      	add	r3, r2
 8012fae:	3304      	adds	r3, #4
 8012fb0:	781a      	ldrb	r2, [r3, #0]
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb8:	3301      	adds	r3, #1
 8012fba:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012fc6:	4bbd      	ldr	r3, [pc, #756]	; (80132bc <readCanToStructs+0x2a48>)
 8012fc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012fcc:	885b      	ldrh	r3, [r3, #2]
 8012fce:	4abb      	ldr	r2, [pc, #748]	; (80132bc <readCanToStructs+0x2a48>)
 8012fd0:	011b      	lsls	r3, r3, #4
 8012fd2:	4413      	add	r3, r2
 8012fd4:	330c      	adds	r3, #12
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d3db      	bcc.n	8012f98 <readCanToStructs+0x2724>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fe4:	4ab6      	ldr	r2, [pc, #728]	; (80132c0 <readCanToStructs+0x2a4c>)
 8012fe6:	f240 4112 	movw	r1, #1042	; 0x412
 8012fea:	fb01 f303 	mul.w	r3, r1, r3
 8012fee:	4413      	add	r3, r2
 8012ff0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	461a      	mov	r2, r3
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	1a9a      	subs	r2, r3, r2
 8012ffe:	4baf      	ldr	r3, [pc, #700]	; (80132bc <readCanToStructs+0x2a48>)
 8013000:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013004:	885b      	ldrh	r3, [r3, #2]
 8013006:	49ad      	ldr	r1, [pc, #692]	; (80132bc <readCanToStructs+0x2a48>)
 8013008:	011b      	lsls	r3, r3, #4
 801300a:	440b      	add	r3, r1
 801300c:	330c      	adds	r3, #12
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	3b01      	subs	r3, #1
 8013012:	4413      	add	r3, r2
 8013014:	2b07      	cmp	r3, #7
 8013016:	d921      	bls.n	801305c <readCanToStructs+0x27e8>
					if(Debug_flag == 1)
 8013018:	4baa      	ldr	r3, [pc, #680]	; (80132c4 <readCanToStructs+0x2a50>)
 801301a:	781b      	ldrb	r3, [r3, #0]
 801301c:	2b01      	cmp	r3, #1
 801301e:	d102      	bne.n	8013026 <readCanToStructs+0x27b2>
						printf("\nRCV OTH_INFO2\n");
 8013020:	48a9      	ldr	r0, [pc, #676]	; (80132c8 <readCanToStructs+0x2a54>)
 8013022:	f011 fd35 	bl	8024a90 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013026:	4ba9      	ldr	r3, [pc, #676]	; (80132cc <readCanToStructs+0x2a58>)
 8013028:	4aa9      	ldr	r2, [pc, #676]	; (80132d0 <readCanToStructs+0x2a5c>)
 801302a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801302e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8013032:	4ba8      	ldr	r3, [pc, #672]	; (80132d4 <readCanToStructs+0x2a60>)
 8013034:	2201      	movs	r2, #1
 8013036:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013038:	f004 fc84 	bl	8017944 <HAL_GetTick>
 801303c:	4603      	mov	r3, r0
 801303e:	4aa6      	ldr	r2, [pc, #664]	; (80132d8 <readCanToStructs+0x2a64>)
 8013040:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013046:	4a9e      	ldr	r2, [pc, #632]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013048:	f240 4112 	movw	r1, #1042	; 0x412
 801304c:	fb01 f303 	mul.w	r3, r1, r3
 8013050:	4413      	add	r3, r2
 8013052:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013056:	2200      	movs	r2, #0
 8013058:	701a      	strb	r2, [r3, #0]
				break;
 801305a:	e2a9      	b.n	80135b0 <readCanToStructs+0x2d3c>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 801305c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013060:	4a97      	ldr	r2, [pc, #604]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013062:	f240 4112 	movw	r1, #1042	; 0x412
 8013066:	fb01 f303 	mul.w	r3, r1, r3
 801306a:	4413      	add	r3, r2
 801306c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8013070:	2201      	movs	r2, #1
 8013072:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8013074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013078:	4991      	ldr	r1, [pc, #580]	; (80132c0 <readCanToStructs+0x2a4c>)
 801307a:	f240 4212 	movw	r2, #1042	; 0x412
 801307e:	fb03 f202 	mul.w	r2, r3, r2
 8013082:	440a      	add	r2, r1
 8013084:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8013088:	7812      	ldrb	r2, [r2, #0]
 801308a:	3201      	adds	r2, #1
 801308c:	b2d0      	uxtb	r0, r2
 801308e:	4a8c      	ldr	r2, [pc, #560]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013090:	f240 4112 	movw	r1, #1042	; 0x412
 8013094:	fb01 f303 	mul.w	r3, r1, r3
 8013098:	4413      	add	r3, r2
 801309a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801309e:	4602      	mov	r2, r0
 80130a0:	701a      	strb	r2, [r3, #0]
				break;
 80130a2:	e285      	b.n	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 80130a4:	4b8d      	ldr	r3, [pc, #564]	; (80132dc <readCanToStructs+0x2a68>)
 80130a6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80130a8:	4b84      	ldr	r3, [pc, #528]	; (80132bc <readCanToStructs+0x2a48>)
 80130aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80130ae:	885b      	ldrh	r3, [r3, #2]
 80130b0:	4a82      	ldr	r2, [pc, #520]	; (80132bc <readCanToStructs+0x2a48>)
 80130b2:	011b      	lsls	r3, r3, #4
 80130b4:	4413      	add	r3, r2
 80130b6:	3304      	adds	r3, #4
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80130be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d110      	bne.n	80130e8 <readCanToStructs+0x2874>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 80130c6:	2204      	movs	r2, #4
 80130c8:	2100      	movs	r1, #0
 80130ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130cc:	f011 fb5c 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80130d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130d4:	4a7a      	ldr	r2, [pc, #488]	; (80132c0 <readCanToStructs+0x2a4c>)
 80130d6:	f240 4112 	movw	r1, #1042	; 0x412
 80130da:	fb01 f303 	mul.w	r3, r1, r3
 80130de:	4413      	add	r3, r2
 80130e0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80130e4:	2200      	movs	r2, #0
 80130e6:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80130e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130ec:	4a74      	ldr	r2, [pc, #464]	; (80132c0 <readCanToStructs+0x2a4c>)
 80130ee:	f240 4112 	movw	r1, #1042	; 0x412
 80130f2:	fb01 f303 	mul.w	r3, r1, r3
 80130f6:	4413      	add	r3, r2
 80130f8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013102:	429a      	cmp	r2, r3
 8013104:	d011      	beq.n	801312a <readCanToStructs+0x28b6>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8013106:	2204      	movs	r2, #4
 8013108:	2100      	movs	r1, #0
 801310a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801310c:	f011 fb3c 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013114:	4a6a      	ldr	r2, [pc, #424]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013116:	f240 4112 	movw	r1, #1042	; 0x412
 801311a:	fb01 f303 	mul.w	r3, r1, r3
 801311e:	4413      	add	r3, r2
 8013120:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013124:	2200      	movs	r2, #0
 8013126:	701a      	strb	r2, [r3, #0]
					break;
 8013128:	e242      	b.n	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr += (7 * uc_seqNo);
 801312a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801312e:	4613      	mov	r3, r2
 8013130:	00db      	lsls	r3, r3, #3
 8013132:	1a9b      	subs	r3, r3, r2
 8013134:	461a      	mov	r2, r3
 8013136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013138:	4413      	add	r3, r2
 801313a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801313c:	2301      	movs	r3, #1
 801313e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013142:	e016      	b.n	8013172 <readCanToStructs+0x28fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013144:	4b5d      	ldr	r3, [pc, #372]	; (80132bc <readCanToStructs+0x2a48>)
 8013146:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801314a:	885b      	ldrh	r3, [r3, #2]
 801314c:	461a      	mov	r2, r3
 801314e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013152:	495a      	ldr	r1, [pc, #360]	; (80132bc <readCanToStructs+0x2a48>)
 8013154:	0112      	lsls	r2, r2, #4
 8013156:	440a      	add	r2, r1
 8013158:	4413      	add	r3, r2
 801315a:	3304      	adds	r3, #4
 801315c:	781a      	ldrb	r2, [r3, #0]
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013164:	3301      	adds	r3, #1
 8013166:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013168:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801316c:	3301      	adds	r3, #1
 801316e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013172:	4b52      	ldr	r3, [pc, #328]	; (80132bc <readCanToStructs+0x2a48>)
 8013174:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013178:	885b      	ldrh	r3, [r3, #2]
 801317a:	4a50      	ldr	r2, [pc, #320]	; (80132bc <readCanToStructs+0x2a48>)
 801317c:	011b      	lsls	r3, r3, #4
 801317e:	4413      	add	r3, r2
 8013180:	330c      	adds	r3, #12
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013188:	429a      	cmp	r2, r3
 801318a:	d3db      	bcc.n	8013144 <readCanToStructs+0x28d0>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 801318c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013190:	4a4b      	ldr	r2, [pc, #300]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013192:	f240 4112 	movw	r1, #1042	; 0x412
 8013196:	fb01 f303 	mul.w	r3, r1, r3
 801319a:	4413      	add	r3, r2
 801319c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	461a      	mov	r2, r3
 80131a4:	4613      	mov	r3, r2
 80131a6:	00db      	lsls	r3, r3, #3
 80131a8:	1a9a      	subs	r2, r3, r2
 80131aa:	4b44      	ldr	r3, [pc, #272]	; (80132bc <readCanToStructs+0x2a48>)
 80131ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80131b0:	885b      	ldrh	r3, [r3, #2]
 80131b2:	4942      	ldr	r1, [pc, #264]	; (80132bc <readCanToStructs+0x2a48>)
 80131b4:	011b      	lsls	r3, r3, #4
 80131b6:	440b      	add	r3, r1
 80131b8:	330c      	adds	r3, #12
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	3b01      	subs	r3, #1
 80131be:	4413      	add	r3, r2
 80131c0:	2b03      	cmp	r3, #3
 80131c2:	d914      	bls.n	80131ee <readCanToStructs+0x297a>
					printf("Received CAN_FAULT_INJECTION\n");
 80131c4:	4846      	ldr	r0, [pc, #280]	; (80132e0 <readCanToStructs+0x2a6c>)
 80131c6:	f011 fc63 	bl	8024a90 <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80131ca:	f004 fbbb 	bl	8017944 <HAL_GetTick>
 80131ce:	4603      	mov	r3, r0
 80131d0:	4a41      	ldr	r2, [pc, #260]	; (80132d8 <readCanToStructs+0x2a64>)
 80131d2:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80131d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131d8:	4a39      	ldr	r2, [pc, #228]	; (80132c0 <readCanToStructs+0x2a4c>)
 80131da:	f240 4112 	movw	r1, #1042	; 0x412
 80131de:	fb01 f303 	mul.w	r3, r1, r3
 80131e2:	4413      	add	r3, r2
 80131e4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80131e8:	2200      	movs	r2, #0
 80131ea:	701a      	strb	r2, [r3, #0]
				break;
 80131ec:	e1e0      	b.n	80135b0 <readCanToStructs+0x2d3c>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80131ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131f2:	4a33      	ldr	r2, [pc, #204]	; (80132c0 <readCanToStructs+0x2a4c>)
 80131f4:	f240 4112 	movw	r1, #1042	; 0x412
 80131f8:	fb01 f303 	mul.w	r3, r1, r3
 80131fc:	4413      	add	r3, r2
 80131fe:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013202:	2201      	movs	r2, #1
 8013204:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8013206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801320a:	492d      	ldr	r1, [pc, #180]	; (80132c0 <readCanToStructs+0x2a4c>)
 801320c:	f240 4212 	movw	r2, #1042	; 0x412
 8013210:	fb03 f202 	mul.w	r2, r3, r2
 8013214:	440a      	add	r2, r1
 8013216:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801321a:	7812      	ldrb	r2, [r2, #0]
 801321c:	3201      	adds	r2, #1
 801321e:	b2d0      	uxtb	r0, r2
 8013220:	4a27      	ldr	r2, [pc, #156]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013222:	f240 4112 	movw	r1, #1042	; 0x412
 8013226:	fb01 f303 	mul.w	r3, r1, r3
 801322a:	4413      	add	r3, r2
 801322c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013230:	4602      	mov	r2, r0
 8013232:	701a      	strb	r2, [r3, #0]
				break;
 8013234:	e1bc      	b.n	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8013236:	4b2b      	ldr	r3, [pc, #172]	; (80132e4 <readCanToStructs+0x2a70>)
 8013238:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801323a:	4b20      	ldr	r3, [pc, #128]	; (80132bc <readCanToStructs+0x2a48>)
 801323c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013240:	885b      	ldrh	r3, [r3, #2]
 8013242:	4a1e      	ldr	r2, [pc, #120]	; (80132bc <readCanToStructs+0x2a48>)
 8013244:	011b      	lsls	r3, r3, #4
 8013246:	4413      	add	r3, r2
 8013248:	3304      	adds	r3, #4
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013250:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013254:	2b00      	cmp	r3, #0
 8013256:	d110      	bne.n	801327a <readCanToStructs+0x2a06>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013258:	2284      	movs	r2, #132	; 0x84
 801325a:	2100      	movs	r1, #0
 801325c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801325e:	f011 fa93 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013266:	4a16      	ldr	r2, [pc, #88]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013268:	f240 4112 	movw	r1, #1042	; 0x412
 801326c:	fb01 f303 	mul.w	r3, r1, r3
 8013270:	4413      	add	r3, r2
 8013272:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013276:	2200      	movs	r2, #0
 8013278:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 801327a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801327e:	4a10      	ldr	r2, [pc, #64]	; (80132c0 <readCanToStructs+0x2a4c>)
 8013280:	f240 4112 	movw	r1, #1042	; 0x412
 8013284:	fb01 f303 	mul.w	r3, r1, r3
 8013288:	4413      	add	r3, r2
 801328a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013294:	429a      	cmp	r2, r3
 8013296:	d027      	beq.n	80132e8 <readCanToStructs+0x2a74>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013298:	2284      	movs	r2, #132	; 0x84
 801329a:	2100      	movs	r1, #0
 801329c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801329e:	f011 fa73 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80132a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132a6:	4a06      	ldr	r2, [pc, #24]	; (80132c0 <readCanToStructs+0x2a4c>)
 80132a8:	f240 4112 	movw	r1, #1042	; 0x412
 80132ac:	fb01 f303 	mul.w	r3, r1, r3
 80132b0:	4413      	add	r3, r2
 80132b2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80132b6:	2200      	movs	r2, #0
 80132b8:	701a      	strb	r2, [r3, #0]
					break;
 80132ba:	e179      	b.n	80135b0 <readCanToStructs+0x2d3c>
 80132bc:	20005b50 	.word	0x20005b50
 80132c0:	2000532c 	.word	0x2000532c
 80132c4:	2000065d 	.word	0x2000065d
 80132c8:	080291a4 	.word	0x080291a4
 80132cc:	2000270c 	.word	0x2000270c
 80132d0:	20002714 	.word	0x20002714
 80132d4:	200021a8 	.word	0x200021a8
 80132d8:	200021ac 	.word	0x200021ac
 80132dc:	20002700 	.word	0x20002700
 80132e0:	080291b4 	.word	0x080291b4
 80132e4:	200027a0 	.word	0x200027a0
				uc_pp_charPtr += (7 * uc_seqNo);
 80132e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80132ec:	4613      	mov	r3, r2
 80132ee:	00db      	lsls	r3, r3, #3
 80132f0:	1a9b      	subs	r3, r3, r2
 80132f2:	461a      	mov	r2, r3
 80132f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f6:	4413      	add	r3, r2
 80132f8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80132fa:	2301      	movs	r3, #1
 80132fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013300:	e016      	b.n	8013330 <readCanToStructs+0x2abc>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013302:	4bc0      	ldr	r3, [pc, #768]	; (8013604 <readCanToStructs+0x2d90>)
 8013304:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013308:	885b      	ldrh	r3, [r3, #2]
 801330a:	461a      	mov	r2, r3
 801330c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013310:	49bc      	ldr	r1, [pc, #752]	; (8013604 <readCanToStructs+0x2d90>)
 8013312:	0112      	lsls	r2, r2, #4
 8013314:	440a      	add	r2, r1
 8013316:	4413      	add	r3, r2
 8013318:	3304      	adds	r3, #4
 801331a:	781a      	ldrb	r2, [r3, #0]
 801331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013322:	3301      	adds	r3, #1
 8013324:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801332a:	3301      	adds	r3, #1
 801332c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013330:	4bb4      	ldr	r3, [pc, #720]	; (8013604 <readCanToStructs+0x2d90>)
 8013332:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013336:	885b      	ldrh	r3, [r3, #2]
 8013338:	4ab2      	ldr	r2, [pc, #712]	; (8013604 <readCanToStructs+0x2d90>)
 801333a:	011b      	lsls	r3, r3, #4
 801333c:	4413      	add	r3, r2
 801333e:	330c      	adds	r3, #12
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013346:	429a      	cmp	r2, r3
 8013348:	d3db      	bcc.n	8013302 <readCanToStructs+0x2a8e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 801334a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801334e:	4aae      	ldr	r2, [pc, #696]	; (8013608 <readCanToStructs+0x2d94>)
 8013350:	f240 4112 	movw	r1, #1042	; 0x412
 8013354:	fb01 f303 	mul.w	r3, r1, r3
 8013358:	4413      	add	r3, r2
 801335a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	461a      	mov	r2, r3
 8013362:	4613      	mov	r3, r2
 8013364:	00db      	lsls	r3, r3, #3
 8013366:	1a9a      	subs	r2, r3, r2
 8013368:	4ba6      	ldr	r3, [pc, #664]	; (8013604 <readCanToStructs+0x2d90>)
 801336a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801336e:	885b      	ldrh	r3, [r3, #2]
 8013370:	49a4      	ldr	r1, [pc, #656]	; (8013604 <readCanToStructs+0x2d90>)
 8013372:	011b      	lsls	r3, r3, #4
 8013374:	440b      	add	r3, r1
 8013376:	330c      	adds	r3, #12
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	3b01      	subs	r3, #1
 801337c:	4413      	add	r3, r2
 801337e:	2b83      	cmp	r3, #131	; 0x83
 8013380:	d91e      	bls.n	80133c0 <readCanToStructs+0x2b4c>
					if(Debug_flag == 1)
 8013382:	4ba2      	ldr	r3, [pc, #648]	; (801360c <readCanToStructs+0x2d98>)
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d102      	bne.n	8013390 <readCanToStructs+0x2b1c>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 801338a:	48a1      	ldr	r0, [pc, #644]	; (8013610 <readCanToStructs+0x2d9c>)
 801338c:	f011 fb80 	bl	8024a90 <puts>
					Received_CAN_Relay_Status = YES;
 8013390:	4ba0      	ldr	r3, [pc, #640]	; (8013614 <readCanToStructs+0x2da0>)
 8013392:	2201      	movs	r2, #1
 8013394:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 8013396:	4ba0      	ldr	r3, [pc, #640]	; (8013618 <readCanToStructs+0x2da4>)
 8013398:	2201      	movs	r2, #1
 801339a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801339c:	f004 fad2 	bl	8017944 <HAL_GetTick>
 80133a0:	4603      	mov	r3, r0
 80133a2:	4a9e      	ldr	r2, [pc, #632]	; (801361c <readCanToStructs+0x2da8>)
 80133a4:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80133a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133aa:	4a97      	ldr	r2, [pc, #604]	; (8013608 <readCanToStructs+0x2d94>)
 80133ac:	f240 4112 	movw	r1, #1042	; 0x412
 80133b0:	fb01 f303 	mul.w	r3, r1, r3
 80133b4:	4413      	add	r3, r2
 80133b6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80133ba:	2200      	movs	r2, #0
 80133bc:	701a      	strb	r2, [r3, #0]
				break;
 80133be:	e0f7      	b.n	80135b0 <readCanToStructs+0x2d3c>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 80133c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133c4:	4a90      	ldr	r2, [pc, #576]	; (8013608 <readCanToStructs+0x2d94>)
 80133c6:	f240 4112 	movw	r1, #1042	; 0x412
 80133ca:	fb01 f303 	mul.w	r3, r1, r3
 80133ce:	4413      	add	r3, r2
 80133d0:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80133d4:	2201      	movs	r2, #1
 80133d6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80133d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133dc:	498a      	ldr	r1, [pc, #552]	; (8013608 <readCanToStructs+0x2d94>)
 80133de:	f240 4212 	movw	r2, #1042	; 0x412
 80133e2:	fb03 f202 	mul.w	r2, r3, r2
 80133e6:	440a      	add	r2, r1
 80133e8:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80133ec:	7812      	ldrb	r2, [r2, #0]
 80133ee:	3201      	adds	r2, #1
 80133f0:	b2d0      	uxtb	r0, r2
 80133f2:	4a85      	ldr	r2, [pc, #532]	; (8013608 <readCanToStructs+0x2d94>)
 80133f4:	f240 4112 	movw	r1, #1042	; 0x412
 80133f8:	fb01 f303 	mul.w	r3, r1, r3
 80133fc:	4413      	add	r3, r2
 80133fe:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013402:	4602      	mov	r2, r0
 8013404:	701a      	strb	r2, [r3, #0]
				break;
 8013406:	e0d3      	b.n	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8013408:	4b85      	ldr	r3, [pc, #532]	; (8013620 <readCanToStructs+0x2dac>)
 801340a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801340c:	4b7d      	ldr	r3, [pc, #500]	; (8013604 <readCanToStructs+0x2d90>)
 801340e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013412:	885b      	ldrh	r3, [r3, #2]
 8013414:	4a7b      	ldr	r2, [pc, #492]	; (8013604 <readCanToStructs+0x2d90>)
 8013416:	011b      	lsls	r3, r3, #4
 8013418:	4413      	add	r3, r2
 801341a:	3304      	adds	r3, #4
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013422:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013426:	2b00      	cmp	r3, #0
 8013428:	d110      	bne.n	801344c <readCanToStructs+0x2bd8>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801342a:	2284      	movs	r2, #132	; 0x84
 801342c:	2100      	movs	r1, #0
 801342e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013430:	f011 f9aa 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013438:	4a73      	ldr	r2, [pc, #460]	; (8013608 <readCanToStructs+0x2d94>)
 801343a:	f240 4112 	movw	r1, #1042	; 0x412
 801343e:	fb01 f303 	mul.w	r3, r1, r3
 8013442:	4413      	add	r3, r2
 8013444:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013448:	2200      	movs	r2, #0
 801344a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 801344c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013450:	4a6d      	ldr	r2, [pc, #436]	; (8013608 <readCanToStructs+0x2d94>)
 8013452:	f240 4112 	movw	r1, #1042	; 0x412
 8013456:	fb01 f303 	mul.w	r3, r1, r3
 801345a:	4413      	add	r3, r2
 801345c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013466:	429a      	cmp	r2, r3
 8013468:	d011      	beq.n	801348e <readCanToStructs+0x2c1a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801346a:	2284      	movs	r2, #132	; 0x84
 801346c:	2100      	movs	r1, #0
 801346e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013470:	f011 f98a 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013478:	4a63      	ldr	r2, [pc, #396]	; (8013608 <readCanToStructs+0x2d94>)
 801347a:	f240 4112 	movw	r1, #1042	; 0x412
 801347e:	fb01 f303 	mul.w	r3, r1, r3
 8013482:	4413      	add	r3, r2
 8013484:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013488:	2200      	movs	r2, #0
 801348a:	701a      	strb	r2, [r3, #0]
					break;
 801348c:	e090      	b.n	80135b0 <readCanToStructs+0x2d3c>
				uc_pp_charPtr += (7 * uc_seqNo);
 801348e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013492:	4613      	mov	r3, r2
 8013494:	00db      	lsls	r3, r3, #3
 8013496:	1a9b      	subs	r3, r3, r2
 8013498:	461a      	mov	r2, r3
 801349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349c:	4413      	add	r3, r2
 801349e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80134a0:	2301      	movs	r3, #1
 80134a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80134a6:	e016      	b.n	80134d6 <readCanToStructs+0x2c62>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80134a8:	4b56      	ldr	r3, [pc, #344]	; (8013604 <readCanToStructs+0x2d90>)
 80134aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134ae:	885b      	ldrh	r3, [r3, #2]
 80134b0:	461a      	mov	r2, r3
 80134b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134b6:	4953      	ldr	r1, [pc, #332]	; (8013604 <readCanToStructs+0x2d90>)
 80134b8:	0112      	lsls	r2, r2, #4
 80134ba:	440a      	add	r2, r1
 80134bc:	4413      	add	r3, r2
 80134be:	3304      	adds	r3, #4
 80134c0:	781a      	ldrb	r2, [r3, #0]
 80134c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80134c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c8:	3301      	adds	r3, #1
 80134ca:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80134cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134d0:	3301      	adds	r3, #1
 80134d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80134d6:	4b4b      	ldr	r3, [pc, #300]	; (8013604 <readCanToStructs+0x2d90>)
 80134d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134dc:	885b      	ldrh	r3, [r3, #2]
 80134de:	4a49      	ldr	r2, [pc, #292]	; (8013604 <readCanToStructs+0x2d90>)
 80134e0:	011b      	lsls	r3, r3, #4
 80134e2:	4413      	add	r3, r2
 80134e4:	330c      	adds	r3, #12
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d3db      	bcc.n	80134a8 <readCanToStructs+0x2c34>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 80134f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134f4:	4a44      	ldr	r2, [pc, #272]	; (8013608 <readCanToStructs+0x2d94>)
 80134f6:	f240 4112 	movw	r1, #1042	; 0x412
 80134fa:	fb01 f303 	mul.w	r3, r1, r3
 80134fe:	4413      	add	r3, r2
 8013500:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	461a      	mov	r2, r3
 8013508:	4613      	mov	r3, r2
 801350a:	00db      	lsls	r3, r3, #3
 801350c:	1a9a      	subs	r2, r3, r2
 801350e:	4b3d      	ldr	r3, [pc, #244]	; (8013604 <readCanToStructs+0x2d90>)
 8013510:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013514:	885b      	ldrh	r3, [r3, #2]
 8013516:	493b      	ldr	r1, [pc, #236]	; (8013604 <readCanToStructs+0x2d90>)
 8013518:	011b      	lsls	r3, r3, #4
 801351a:	440b      	add	r3, r1
 801351c:	330c      	adds	r3, #12
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	3b01      	subs	r3, #1
 8013522:	4413      	add	r3, r2
 8013524:	2b83      	cmp	r3, #131	; 0x83
 8013526:	d91e      	bls.n	8013566 <readCanToStructs+0x2cf2>
					if(Debug_flag == 1)
 8013528:	4b38      	ldr	r3, [pc, #224]	; (801360c <readCanToStructs+0x2d98>)
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d102      	bne.n	8013536 <readCanToStructs+0x2cc2>
						printf("\nRCV RELAY_DATA_EI2\n");
 8013530:	483c      	ldr	r0, [pc, #240]	; (8013624 <readCanToStructs+0x2db0>)
 8013532:	f011 faad 	bl	8024a90 <puts>
					Medha_CAN_Xchanging_Happening = SET;
 8013536:	4b38      	ldr	r3, [pc, #224]	; (8013618 <readCanToStructs+0x2da4>)
 8013538:	2201      	movs	r2, #1
 801353a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801353c:	f004 fa02 	bl	8017944 <HAL_GetTick>
 8013540:	4603      	mov	r3, r0
 8013542:	4a36      	ldr	r2, [pc, #216]	; (801361c <readCanToStructs+0x2da8>)
 8013544:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 8013546:	4b33      	ldr	r3, [pc, #204]	; (8013614 <readCanToStructs+0x2da0>)
 8013548:	2201      	movs	r2, #1
 801354a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801354c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013550:	4a2d      	ldr	r2, [pc, #180]	; (8013608 <readCanToStructs+0x2d94>)
 8013552:	f240 4112 	movw	r1, #1042	; 0x412
 8013556:	fb01 f303 	mul.w	r3, r1, r3
 801355a:	4413      	add	r3, r2
 801355c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013560:	2200      	movs	r2, #0
 8013562:	701a      	strb	r2, [r3, #0]
				break;
 8013564:	e024      	b.n	80135b0 <readCanToStructs+0x2d3c>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8013566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801356a:	4a27      	ldr	r2, [pc, #156]	; (8013608 <readCanToStructs+0x2d94>)
 801356c:	f240 4112 	movw	r1, #1042	; 0x412
 8013570:	fb01 f303 	mul.w	r3, r1, r3
 8013574:	4413      	add	r3, r2
 8013576:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801357a:	2201      	movs	r2, #1
 801357c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 801357e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013582:	4921      	ldr	r1, [pc, #132]	; (8013608 <readCanToStructs+0x2d94>)
 8013584:	f240 4212 	movw	r2, #1042	; 0x412
 8013588:	fb03 f202 	mul.w	r2, r3, r2
 801358c:	440a      	add	r2, r1
 801358e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8013592:	7812      	ldrb	r2, [r2, #0]
 8013594:	3201      	adds	r2, #1
 8013596:	b2d0      	uxtb	r0, r2
 8013598:	4a1b      	ldr	r2, [pc, #108]	; (8013608 <readCanToStructs+0x2d94>)
 801359a:	f240 4112 	movw	r1, #1042	; 0x412
 801359e:	fb01 f303 	mul.w	r3, r1, r3
 80135a2:	4413      	add	r3, r2
 80135a4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80135a8:	4602      	mov	r2, r0
 80135aa:	701a      	strb	r2, [r3, #0]
				break;
 80135ac:	e000      	b.n	80135b0 <readCanToStructs+0x2d3c>
				break;
 80135ae:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80135b0:	4b14      	ldr	r3, [pc, #80]	; (8013604 <readCanToStructs+0x2d90>)
 80135b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135b6:	885b      	ldrh	r3, [r3, #2]
 80135b8:	011b      	lsls	r3, r3, #4
 80135ba:	4a12      	ldr	r2, [pc, #72]	; (8013604 <readCanToStructs+0x2d90>)
 80135bc:	4413      	add	r3, r2
 80135be:	2210      	movs	r2, #16
 80135c0:	2100      	movs	r1, #0
 80135c2:	4618      	mov	r0, r3
 80135c4:	f011 f8e0 	bl	8024788 <memset>
			canRead.Out++;
 80135c8:	4b0e      	ldr	r3, [pc, #56]	; (8013604 <readCanToStructs+0x2d90>)
 80135ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135ce:	885b      	ldrh	r3, [r3, #2]
 80135d0:	3301      	adds	r3, #1
 80135d2:	b29a      	uxth	r2, r3
 80135d4:	4b0b      	ldr	r3, [pc, #44]	; (8013604 <readCanToStructs+0x2d90>)
 80135d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135da:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80135dc:	4b09      	ldr	r3, [pc, #36]	; (8013604 <readCanToStructs+0x2d90>)
 80135de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135e2:	885b      	ldrh	r3, [r3, #2]
 80135e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80135e8:	d104      	bne.n	80135f4 <readCanToStructs+0x2d80>
				canRead.Out = 0;
 80135ea:	4b06      	ldr	r3, [pc, #24]	; (8013604 <readCanToStructs+0x2d90>)
 80135ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135f0:	2200      	movs	r2, #0
 80135f2:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80135f4:	f7fd f8e8 	bl	80107c8 <canDataReady>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	f47f a953 	bne.w	80128a6 <readCanToStructs+0x2032>
		}
		/* __________ MEDHA _________ */
	}
	break;
 8013600:	e312      	b.n	8013c28 <readCanToStructs+0x33b4>
 8013602:	bf00      	nop
 8013604:	20005b50 	.word	0x20005b50
 8013608:	2000532c 	.word	0x2000532c
 801360c:	2000065d 	.word	0x2000065d
 8013610:	080291d4 	.word	0x080291d4
 8013614:	200021a9 	.word	0x200021a9
 8013618:	200021a8 	.word	0x200021a8
 801361c:	200021ac 	.word	0x200021ac
 8013620:	200027a0 	.word	0x200027a0
 8013624:	080291f0 	.word	0x080291f0
	case KYOSAN:
	{
		/* __________ KYOSAN _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8013628:	4bb1      	ldr	r3, [pc, #708]	; (80138f0 <readCanToStructs+0x307c>)
 801362a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801362e:	885b      	ldrh	r3, [r3, #2]
 8013630:	4aaf      	ldr	r2, [pc, #700]	; (80138f0 <readCanToStructs+0x307c>)
 8013632:	011b      	lsls	r3, r3, #4
 8013634:	4413      	add	r3, r2
 8013636:	330f      	adds	r3, #15
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	3b01      	subs	r3, #1
 801363c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8013640:	4bab      	ldr	r3, [pc, #684]	; (80138f0 <readCanToStructs+0x307c>)
 8013642:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013646:	885b      	ldrh	r3, [r3, #2]
 8013648:	4aa9      	ldr	r2, [pc, #676]	; (80138f0 <readCanToStructs+0x307c>)
 801364a:	011b      	lsls	r3, r3, #4
 801364c:	4413      	add	r3, r2
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8013654:	f000 80f9 	beq.w	801384a <readCanToStructs+0x2fd6>
 8013658:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801365c:	f200 82b8 	bhi.w	8013bd0 <readCanToStructs+0x335c>
 8013660:	f240 2205 	movw	r2, #517	; 0x205
 8013664:	4293      	cmp	r3, r2
 8013666:	f000 81ef 	beq.w	8013a48 <readCanToStructs+0x31d4>
 801366a:	f240 2207 	movw	r2, #519	; 0x207
 801366e:	4293      	cmp	r3, r2
 8013670:	f040 82ae 	bne.w	8013bd0 <readCanToStructs+0x335c>
			{

			case EIPC1_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8013674:	4b9f      	ldr	r3, [pc, #636]	; (80138f4 <readCanToStructs+0x3080>)
 8013676:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013678:	4b9d      	ldr	r3, [pc, #628]	; (80138f0 <readCanToStructs+0x307c>)
 801367a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801367e:	885b      	ldrh	r3, [r3, #2]
 8013680:	4a9b      	ldr	r2, [pc, #620]	; (80138f0 <readCanToStructs+0x307c>)
 8013682:	011b      	lsls	r3, r3, #4
 8013684:	4413      	add	r3, r2
 8013686:	3304      	adds	r3, #4
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801368e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013692:	2b00      	cmp	r3, #0
 8013694:	d110      	bne.n	80136b8 <readCanToStructs+0x2e44>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8013696:	2240      	movs	r2, #64	; 0x40
 8013698:	2100      	movs	r1, #0
 801369a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801369c:	f011 f874 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80136a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136a4:	4a94      	ldr	r2, [pc, #592]	; (80138f8 <readCanToStructs+0x3084>)
 80136a6:	f240 4112 	movw	r1, #1042	; 0x412
 80136aa:	fb01 f303 	mul.w	r3, r1, r3
 80136ae:	4413      	add	r3, r2
 80136b0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80136b4:	2200      	movs	r2, #0
 80136b6:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80136b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136bc:	4a8e      	ldr	r2, [pc, #568]	; (80138f8 <readCanToStructs+0x3084>)
 80136be:	f240 4112 	movw	r1, #1042	; 0x412
 80136c2:	fb01 f303 	mul.w	r3, r1, r3
 80136c6:	4413      	add	r3, r2
 80136c8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80136d2:	429a      	cmp	r2, r3
 80136d4:	d014      	beq.n	8013700 <readCanToStructs+0x2e8c>
				{
					printf("EIPC1RELAYS Seq no MisMatch\n");
 80136d6:	4889      	ldr	r0, [pc, #548]	; (80138fc <readCanToStructs+0x3088>)
 80136d8:	f011 f9da 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80136dc:	2240      	movs	r2, #64	; 0x40
 80136de:	2100      	movs	r1, #0
 80136e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136e2:	f011 f851 	bl	8024788 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80136e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136ea:	4a83      	ldr	r2, [pc, #524]	; (80138f8 <readCanToStructs+0x3084>)
 80136ec:	f240 4112 	movw	r1, #1042	; 0x412
 80136f0:	fb01 f303 	mul.w	r3, r1, r3
 80136f4:	4413      	add	r3, r2
 80136f6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80136fa:	2200      	movs	r2, #0
 80136fc:	701a      	strb	r2, [r3, #0]
					break;
 80136fe:	e268      	b.n	8013bd2 <readCanToStructs+0x335e>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8013700:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013704:	4613      	mov	r3, r2
 8013706:	00db      	lsls	r3, r3, #3
 8013708:	1a9b      	subs	r3, r3, r2
 801370a:	461a      	mov	r2, r3
 801370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370e:	4413      	add	r3, r2
 8013710:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013712:	2301      	movs	r3, #1
 8013714:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013718:	e016      	b.n	8013748 <readCanToStructs+0x2ed4>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801371a:	4b75      	ldr	r3, [pc, #468]	; (80138f0 <readCanToStructs+0x307c>)
 801371c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013720:	885b      	ldrh	r3, [r3, #2]
 8013722:	461a      	mov	r2, r3
 8013724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013728:	4971      	ldr	r1, [pc, #452]	; (80138f0 <readCanToStructs+0x307c>)
 801372a:	0112      	lsls	r2, r2, #4
 801372c:	440a      	add	r2, r1
 801372e:	4413      	add	r3, r2
 8013730:	3304      	adds	r3, #4
 8013732:	781a      	ldrb	r2, [r3, #0]
 8013734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013736:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373a:	3301      	adds	r3, #1
 801373c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801373e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013742:	3301      	adds	r3, #1
 8013744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013748:	4b69      	ldr	r3, [pc, #420]	; (80138f0 <readCanToStructs+0x307c>)
 801374a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801374e:	885b      	ldrh	r3, [r3, #2]
 8013750:	4a67      	ldr	r2, [pc, #412]	; (80138f0 <readCanToStructs+0x307c>)
 8013752:	011b      	lsls	r3, r3, #4
 8013754:	4413      	add	r3, r2
 8013756:	330c      	adds	r3, #12
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801375e:	429a      	cmp	r2, r3
 8013760:	d3db      	bcc.n	801371a <readCanToStructs+0x2ea6>
				}
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8013762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013766:	4a64      	ldr	r2, [pc, #400]	; (80138f8 <readCanToStructs+0x3084>)
 8013768:	f240 4112 	movw	r1, #1042	; 0x412
 801376c:	fb01 f303 	mul.w	r3, r1, r3
 8013770:	4413      	add	r3, r2
 8013772:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	461a      	mov	r2, r3
 801377a:	4613      	mov	r3, r2
 801377c:	00db      	lsls	r3, r3, #3
 801377e:	1a9a      	subs	r2, r3, r2
 8013780:	4b5b      	ldr	r3, [pc, #364]	; (80138f0 <readCanToStructs+0x307c>)
 8013782:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013786:	885b      	ldrh	r3, [r3, #2]
 8013788:	4959      	ldr	r1, [pc, #356]	; (80138f0 <readCanToStructs+0x307c>)
 801378a:	011b      	lsls	r3, r3, #4
 801378c:	440b      	add	r3, r1
 801378e:	330c      	adds	r3, #12
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	3b01      	subs	r3, #1
 8013794:	4413      	add	r3, r2
 8013796:	2b3f      	cmp	r3, #63	; 0x3f
 8013798:	d933      	bls.n	8013802 <readCanToStructs+0x2f8e>
				{
					if(Debug_flag == 1)
 801379a:	4b59      	ldr	r3, [pc, #356]	; (8013900 <readCanToStructs+0x308c>)
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d105      	bne.n	80137ae <readCanToStructs+0x2f3a>
					{
						printf("Rcv Relays1-O:%u\n",Kyosan_CANRelays.Index);
 80137a2:	4b54      	ldr	r3, [pc, #336]	; (80138f4 <readCanToStructs+0x3080>)
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	4619      	mov	r1, r3
 80137a8:	4856      	ldr	r0, [pc, #344]	; (8013904 <readCanToStructs+0x3090>)
 80137aa:	f011 f8d5 	bl	8024958 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 80137ae:	4a56      	ldr	r2, [pc, #344]	; (8013908 <readCanToStructs+0x3094>)
 80137b0:	4b50      	ldr	r3, [pc, #320]	; (80138f4 <readCanToStructs+0x3080>)
 80137b2:	4610      	mov	r0, r2
 80137b4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80137b8:	4602      	mov	r2, r0
 80137ba:	4619      	mov	r1, r3
 80137bc:	f8d1 c000 	ldr.w	ip, [r1]
 80137c0:	684e      	ldr	r6, [r1, #4]
 80137c2:	688d      	ldr	r5, [r1, #8]
 80137c4:	68c9      	ldr	r1, [r1, #12]
 80137c6:	f8c2 c000 	str.w	ip, [r2]
 80137ca:	6056      	str	r6, [r2, #4]
 80137cc:	6095      	str	r5, [r2, #8]
 80137ce:	60d1      	str	r1, [r2, #12]
 80137d0:	3310      	adds	r3, #16
 80137d2:	3010      	adds	r0, #16
 80137d4:	42a3      	cmp	r3, r4
 80137d6:	d1ef      	bne.n	80137b8 <readCanToStructs+0x2f44>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 80137d8:	f004 f8b4 	bl	8017944 <HAL_GetTick>
 80137dc:	4603      	mov	r3, r0
 80137de:	4a4b      	ldr	r2, [pc, #300]	; (801390c <readCanToStructs+0x3098>)
 80137e0:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 80137e2:	4b4b      	ldr	r3, [pc, #300]	; (8013910 <readCanToStructs+0x309c>)
 80137e4:	2201      	movs	r2, #1
 80137e6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80137e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137ec:	4a42      	ldr	r2, [pc, #264]	; (80138f8 <readCanToStructs+0x3084>)
 80137ee:	f240 4112 	movw	r1, #1042	; 0x412
 80137f2:	fb01 f303 	mul.w	r3, r1, r3
 80137f6:	4413      	add	r3, r2
 80137f8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80137fc:	2200      	movs	r2, #0
 80137fe:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8013800:	e1e7      	b.n	8013bd2 <readCanToStructs+0x335e>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8013802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013806:	4a3c      	ldr	r2, [pc, #240]	; (80138f8 <readCanToStructs+0x3084>)
 8013808:	f240 4112 	movw	r1, #1042	; 0x412
 801380c:	fb01 f303 	mul.w	r3, r1, r3
 8013810:	4413      	add	r3, r2
 8013812:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8013816:	2201      	movs	r2, #1
 8013818:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801381a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801381e:	4936      	ldr	r1, [pc, #216]	; (80138f8 <readCanToStructs+0x3084>)
 8013820:	f240 4212 	movw	r2, #1042	; 0x412
 8013824:	fb03 f202 	mul.w	r2, r3, r2
 8013828:	440a      	add	r2, r1
 801382a:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801382e:	7812      	ldrb	r2, [r2, #0]
 8013830:	3201      	adds	r2, #1
 8013832:	b2d0      	uxtb	r0, r2
 8013834:	4a30      	ldr	r2, [pc, #192]	; (80138f8 <readCanToStructs+0x3084>)
 8013836:	f240 4112 	movw	r1, #1042	; 0x412
 801383a:	fb01 f303 	mul.w	r3, r1, r3
 801383e:	4413      	add	r3, r2
 8013840:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013844:	4602      	mov	r2, r0
 8013846:	701a      	strb	r2, [r3, #0]
				break;
 8013848:	e1c3      	b.n	8013bd2 <readCanToStructs+0x335e>

			case EIPC2_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 801384a:	4b2a      	ldr	r3, [pc, #168]	; (80138f4 <readCanToStructs+0x3080>)
 801384c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801384e:	4b28      	ldr	r3, [pc, #160]	; (80138f0 <readCanToStructs+0x307c>)
 8013850:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013854:	885b      	ldrh	r3, [r3, #2]
 8013856:	4a26      	ldr	r2, [pc, #152]	; (80138f0 <readCanToStructs+0x307c>)
 8013858:	011b      	lsls	r3, r3, #4
 801385a:	4413      	add	r3, r2
 801385c:	3304      	adds	r3, #4
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013864:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013868:	2b00      	cmp	r3, #0
 801386a:	d110      	bne.n	801388e <readCanToStructs+0x301a>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 801386c:	2240      	movs	r2, #64	; 0x40
 801386e:	2100      	movs	r1, #0
 8013870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013872:	f010 ff89 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801387a:	4a1f      	ldr	r2, [pc, #124]	; (80138f8 <readCanToStructs+0x3084>)
 801387c:	f240 4112 	movw	r1, #1042	; 0x412
 8013880:	fb01 f303 	mul.w	r3, r1, r3
 8013884:	4413      	add	r3, r2
 8013886:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801388a:	2200      	movs	r2, #0
 801388c:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 801388e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013892:	4a19      	ldr	r2, [pc, #100]	; (80138f8 <readCanToStructs+0x3084>)
 8013894:	f240 4112 	movw	r1, #1042	; 0x412
 8013898:	fb01 f303 	mul.w	r3, r1, r3
 801389c:	4413      	add	r3, r2
 801389e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d014      	beq.n	80138d6 <readCanToStructs+0x3062>
				{
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 80138ac:	4819      	ldr	r0, [pc, #100]	; (8013914 <readCanToStructs+0x30a0>)
 80138ae:	f011 f8ef 	bl	8024a90 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80138b2:	2240      	movs	r2, #64	; 0x40
 80138b4:	2100      	movs	r1, #0
 80138b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138b8:	f010 ff66 	bl	8024788 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80138bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138c0:	4a0d      	ldr	r2, [pc, #52]	; (80138f8 <readCanToStructs+0x3084>)
 80138c2:	f240 4112 	movw	r1, #1042	; 0x412
 80138c6:	fb01 f303 	mul.w	r3, r1, r3
 80138ca:	4413      	add	r3, r2
 80138cc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80138d0:	2200      	movs	r2, #0
 80138d2:	701a      	strb	r2, [r3, #0]
					break;
 80138d4:	e17d      	b.n	8013bd2 <readCanToStructs+0x335e>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80138d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80138da:	4613      	mov	r3, r2
 80138dc:	00db      	lsls	r3, r3, #3
 80138de:	1a9b      	subs	r3, r3, r2
 80138e0:	461a      	mov	r2, r3
 80138e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e4:	4413      	add	r3, r2
 80138e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80138e8:	2301      	movs	r3, #1
 80138ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80138ee:	e02a      	b.n	8013946 <readCanToStructs+0x30d2>
 80138f0:	20005b50 	.word	0x20005b50
 80138f4:	20009e10 	.word	0x20009e10
 80138f8:	2000532c 	.word	0x2000532c
 80138fc:	08029030 	.word	0x08029030
 8013900:	2000065d 	.word	0x2000065d
 8013904:	08029204 	.word	0x08029204
 8013908:	20009dd0 	.word	0x20009dd0
 801390c:	2000ecb4 	.word	0x2000ecb4
 8013910:	20000108 	.word	0x20000108
 8013914:	08029060 	.word	0x08029060
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013918:	4bc5      	ldr	r3, [pc, #788]	; (8013c30 <readCanToStructs+0x33bc>)
 801391a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801391e:	885b      	ldrh	r3, [r3, #2]
 8013920:	461a      	mov	r2, r3
 8013922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013926:	49c2      	ldr	r1, [pc, #776]	; (8013c30 <readCanToStructs+0x33bc>)
 8013928:	0112      	lsls	r2, r2, #4
 801392a:	440a      	add	r2, r1
 801392c:	4413      	add	r3, r2
 801392e:	3304      	adds	r3, #4
 8013930:	781a      	ldrb	r2, [r3, #0]
 8013932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013934:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013938:	3301      	adds	r3, #1
 801393a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801393c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013940:	3301      	adds	r3, #1
 8013942:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013946:	4bba      	ldr	r3, [pc, #744]	; (8013c30 <readCanToStructs+0x33bc>)
 8013948:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801394c:	885b      	ldrh	r3, [r3, #2]
 801394e:	4ab8      	ldr	r2, [pc, #736]	; (8013c30 <readCanToStructs+0x33bc>)
 8013950:	011b      	lsls	r3, r3, #4
 8013952:	4413      	add	r3, r2
 8013954:	330c      	adds	r3, #12
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801395c:	429a      	cmp	r2, r3
 801395e:	d3db      	bcc.n	8013918 <readCanToStructs+0x30a4>
				}
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8013960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013964:	4ab3      	ldr	r2, [pc, #716]	; (8013c34 <readCanToStructs+0x33c0>)
 8013966:	f240 4112 	movw	r1, #1042	; 0x412
 801396a:	fb01 f303 	mul.w	r3, r1, r3
 801396e:	4413      	add	r3, r2
 8013970:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	461a      	mov	r2, r3
 8013978:	4613      	mov	r3, r2
 801397a:	00db      	lsls	r3, r3, #3
 801397c:	1a9a      	subs	r2, r3, r2
 801397e:	4bac      	ldr	r3, [pc, #688]	; (8013c30 <readCanToStructs+0x33bc>)
 8013980:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013984:	885b      	ldrh	r3, [r3, #2]
 8013986:	49aa      	ldr	r1, [pc, #680]	; (8013c30 <readCanToStructs+0x33bc>)
 8013988:	011b      	lsls	r3, r3, #4
 801398a:	440b      	add	r3, r1
 801398c:	330c      	adds	r3, #12
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	3b01      	subs	r3, #1
 8013992:	4413      	add	r3, r2
 8013994:	2b3f      	cmp	r3, #63	; 0x3f
 8013996:	d933      	bls.n	8013a00 <readCanToStructs+0x318c>
				{
					if(Debug_flag == 1)
 8013998:	4ba7      	ldr	r3, [pc, #668]	; (8013c38 <readCanToStructs+0x33c4>)
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2b01      	cmp	r3, #1
 801399e:	d105      	bne.n	80139ac <readCanToStructs+0x3138>
					{
						printf("Rcv Relays2-O:%u\n",Kyosan_CANRelays.Index);
 80139a0:	4ba6      	ldr	r3, [pc, #664]	; (8013c3c <readCanToStructs+0x33c8>)
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	4619      	mov	r1, r3
 80139a6:	48a6      	ldr	r0, [pc, #664]	; (8013c40 <readCanToStructs+0x33cc>)
 80139a8:	f010 ffd6 	bl	8024958 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 80139ac:	4aa5      	ldr	r2, [pc, #660]	; (8013c44 <readCanToStructs+0x33d0>)
 80139ae:	4ba3      	ldr	r3, [pc, #652]	; (8013c3c <readCanToStructs+0x33c8>)
 80139b0:	4610      	mov	r0, r2
 80139b2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80139b6:	4602      	mov	r2, r0
 80139b8:	4619      	mov	r1, r3
 80139ba:	f8d1 c000 	ldr.w	ip, [r1]
 80139be:	684e      	ldr	r6, [r1, #4]
 80139c0:	688d      	ldr	r5, [r1, #8]
 80139c2:	68c9      	ldr	r1, [r1, #12]
 80139c4:	f8c2 c000 	str.w	ip, [r2]
 80139c8:	6056      	str	r6, [r2, #4]
 80139ca:	6095      	str	r5, [r2, #8]
 80139cc:	60d1      	str	r1, [r2, #12]
 80139ce:	3310      	adds	r3, #16
 80139d0:	3010      	adds	r0, #16
 80139d2:	42a3      	cmp	r3, r4
 80139d4:	d1ef      	bne.n	80139b6 <readCanToStructs+0x3142>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 80139d6:	f003 ffb5 	bl	8017944 <HAL_GetTick>
 80139da:	4603      	mov	r3, r0
 80139dc:	4a9a      	ldr	r2, [pc, #616]	; (8013c48 <readCanToStructs+0x33d4>)
 80139de:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 80139e0:	4b9a      	ldr	r3, [pc, #616]	; (8013c4c <readCanToStructs+0x33d8>)
 80139e2:	2201      	movs	r2, #1
 80139e4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80139e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139ea:	4a92      	ldr	r2, [pc, #584]	; (8013c34 <readCanToStructs+0x33c0>)
 80139ec:	f240 4112 	movw	r1, #1042	; 0x412
 80139f0:	fb01 f303 	mul.w	r3, r1, r3
 80139f4:	4413      	add	r3, r2
 80139f6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80139fa:	2200      	movs	r2, #0
 80139fc:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 80139fe:	e0e8      	b.n	8013bd2 <readCanToStructs+0x335e>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8013a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a04:	4a8b      	ldr	r2, [pc, #556]	; (8013c34 <readCanToStructs+0x33c0>)
 8013a06:	f240 4112 	movw	r1, #1042	; 0x412
 8013a0a:	fb01 f303 	mul.w	r3, r1, r3
 8013a0e:	4413      	add	r3, r2
 8013a10:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013a14:	2201      	movs	r2, #1
 8013a16:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8013a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a1c:	4985      	ldr	r1, [pc, #532]	; (8013c34 <readCanToStructs+0x33c0>)
 8013a1e:	f240 4212 	movw	r2, #1042	; 0x412
 8013a22:	fb03 f202 	mul.w	r2, r3, r2
 8013a26:	440a      	add	r2, r1
 8013a28:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8013a2c:	7812      	ldrb	r2, [r2, #0]
 8013a2e:	3201      	adds	r2, #1
 8013a30:	b2d0      	uxtb	r0, r2
 8013a32:	4a80      	ldr	r2, [pc, #512]	; (8013c34 <readCanToStructs+0x33c0>)
 8013a34:	f240 4112 	movw	r1, #1042	; 0x412
 8013a38:	fb01 f303 	mul.w	r3, r1, r3
 8013a3c:	4413      	add	r3, r2
 8013a3e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013a42:	4602      	mov	r2, r0
 8013a44:	701a      	strb	r2, [r3, #0]
				break;
 8013a46:	e0c4      	b.n	8013bd2 <readCanToStructs+0x335e>

			case CAN_FAULT_INJECTION:

				uc_pp_charPtr = (uint8_t *)&KyosanFaultInjection_st;
 8013a48:	4b81      	ldr	r3, [pc, #516]	; (8013c50 <readCanToStructs+0x33dc>)
 8013a4a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013a4c:	4b78      	ldr	r3, [pc, #480]	; (8013c30 <readCanToStructs+0x33bc>)
 8013a4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a52:	885b      	ldrh	r3, [r3, #2]
 8013a54:	4a76      	ldr	r2, [pc, #472]	; (8013c30 <readCanToStructs+0x33bc>)
 8013a56:	011b      	lsls	r3, r3, #4
 8013a58:	4413      	add	r3, r2
 8013a5a:	3304      	adds	r3, #4
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013a62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d110      	bne.n	8013a8c <readCanToStructs+0x3218>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8013a6a:	2208      	movs	r2, #8
 8013a6c:	2100      	movs	r1, #0
 8013a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a70:	f010 fe8a 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a78:	4a6e      	ldr	r2, [pc, #440]	; (8013c34 <readCanToStructs+0x33c0>)
 8013a7a:	f240 4112 	movw	r1, #1042	; 0x412
 8013a7e:	fb01 f303 	mul.w	r3, r1, r3
 8013a82:	4413      	add	r3, r2
 8013a84:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013a88:	2200      	movs	r2, #0
 8013a8a:	701a      	strb	r2, [r3, #0]
				}
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8013a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a90:	4a68      	ldr	r2, [pc, #416]	; (8013c34 <readCanToStructs+0x33c0>)
 8013a92:	f240 4112 	movw	r1, #1042	; 0x412
 8013a96:	fb01 f303 	mul.w	r3, r1, r3
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d011      	beq.n	8013ace <readCanToStructs+0x325a>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8013aaa:	2208      	movs	r2, #8
 8013aac:	2100      	movs	r1, #0
 8013aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ab0:	f010 fe6a 	bl	8024788 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ab8:	4a5e      	ldr	r2, [pc, #376]	; (8013c34 <readCanToStructs+0x33c0>)
 8013aba:	f240 4112 	movw	r1, #1042	; 0x412
 8013abe:	fb01 f303 	mul.w	r3, r1, r3
 8013ac2:	4413      	add	r3, r2
 8013ac4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013ac8:	2200      	movs	r2, #0
 8013aca:	701a      	strb	r2, [r3, #0]
					break;
 8013acc:	e081      	b.n	8013bd2 <readCanToStructs+0x335e>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8013ace:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013ad2:	4613      	mov	r3, r2
 8013ad4:	00db      	lsls	r3, r3, #3
 8013ad6:	1a9b      	subs	r3, r3, r2
 8013ad8:	461a      	mov	r2, r3
 8013ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013adc:	4413      	add	r3, r2
 8013ade:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013ae6:	e016      	b.n	8013b16 <readCanToStructs+0x32a2>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013ae8:	4b51      	ldr	r3, [pc, #324]	; (8013c30 <readCanToStructs+0x33bc>)
 8013aea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013aee:	885b      	ldrh	r3, [r3, #2]
 8013af0:	461a      	mov	r2, r3
 8013af2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013af6:	494e      	ldr	r1, [pc, #312]	; (8013c30 <readCanToStructs+0x33bc>)
 8013af8:	0112      	lsls	r2, r2, #4
 8013afa:	440a      	add	r2, r1
 8013afc:	4413      	add	r3, r2
 8013afe:	3304      	adds	r3, #4
 8013b00:	781a      	ldrb	r2, [r3, #0]
 8013b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b04:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b08:	3301      	adds	r3, #1
 8013b0a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013b0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b10:	3301      	adds	r3, #1
 8013b12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013b16:	4b46      	ldr	r3, [pc, #280]	; (8013c30 <readCanToStructs+0x33bc>)
 8013b18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b1c:	885b      	ldrh	r3, [r3, #2]
 8013b1e:	4a44      	ldr	r2, [pc, #272]	; (8013c30 <readCanToStructs+0x33bc>)
 8013b20:	011b      	lsls	r3, r3, #4
 8013b22:	4413      	add	r3, r2
 8013b24:	330c      	adds	r3, #12
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d3db      	bcc.n	8013ae8 <readCanToStructs+0x3274>
				}
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_FAULT_INJECTION_t))
 8013b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b34:	4a3f      	ldr	r2, [pc, #252]	; (8013c34 <readCanToStructs+0x33c0>)
 8013b36:	f240 4112 	movw	r1, #1042	; 0x412
 8013b3a:	fb01 f303 	mul.w	r3, r1, r3
 8013b3e:	4413      	add	r3, r2
 8013b40:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	461a      	mov	r2, r3
 8013b48:	4613      	mov	r3, r2
 8013b4a:	00db      	lsls	r3, r3, #3
 8013b4c:	1a9a      	subs	r2, r3, r2
 8013b4e:	4b38      	ldr	r3, [pc, #224]	; (8013c30 <readCanToStructs+0x33bc>)
 8013b50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b54:	885b      	ldrh	r3, [r3, #2]
 8013b56:	4936      	ldr	r1, [pc, #216]	; (8013c30 <readCanToStructs+0x33bc>)
 8013b58:	011b      	lsls	r3, r3, #4
 8013b5a:	440b      	add	r3, r1
 8013b5c:	330c      	adds	r3, #12
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	3b01      	subs	r3, #1
 8013b62:	4413      	add	r3, r2
 8013b64:	2b07      	cmp	r3, #7
 8013b66:	d90f      	bls.n	8013b88 <readCanToStructs+0x3314>
				{
					printf("Received CAN_FAULT_INJECTION\n");
 8013b68:	483a      	ldr	r0, [pc, #232]	; (8013c54 <readCanToStructs+0x33e0>)
 8013b6a:	f010 ff91 	bl	8024a90 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b72:	4a30      	ldr	r2, [pc, #192]	; (8013c34 <readCanToStructs+0x33c0>)
 8013b74:	f240 4112 	movw	r1, #1042	; 0x412
 8013b78:	fb01 f303 	mul.w	r3, r1, r3
 8013b7c:	4413      	add	r3, r2
 8013b7e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013b82:	2200      	movs	r2, #0
 8013b84:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;
 8013b86:	e024      	b.n	8013bd2 <readCanToStructs+0x335e>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8013b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b8c:	4a29      	ldr	r2, [pc, #164]	; (8013c34 <readCanToStructs+0x33c0>)
 8013b8e:	f240 4112 	movw	r1, #1042	; 0x412
 8013b92:	fb01 f303 	mul.w	r3, r1, r3
 8013b96:	4413      	add	r3, r2
 8013b98:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8013ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ba4:	4923      	ldr	r1, [pc, #140]	; (8013c34 <readCanToStructs+0x33c0>)
 8013ba6:	f240 4212 	movw	r2, #1042	; 0x412
 8013baa:	fb03 f202 	mul.w	r2, r3, r2
 8013bae:	440a      	add	r2, r1
 8013bb0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8013bb4:	7812      	ldrb	r2, [r2, #0]
 8013bb6:	3201      	adds	r2, #1
 8013bb8:	b2d0      	uxtb	r0, r2
 8013bba:	4a1e      	ldr	r2, [pc, #120]	; (8013c34 <readCanToStructs+0x33c0>)
 8013bbc:	f240 4112 	movw	r1, #1042	; 0x412
 8013bc0:	fb01 f303 	mul.w	r3, r1, r3
 8013bc4:	4413      	add	r3, r2
 8013bc6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013bca:	4602      	mov	r2, r0
 8013bcc:	701a      	strb	r2, [r3, #0]
				break;
 8013bce:	e000      	b.n	8013bd2 <readCanToStructs+0x335e>

			default:
				break;
 8013bd0:	bf00      	nop
			}

			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8013bd2:	4b17      	ldr	r3, [pc, #92]	; (8013c30 <readCanToStructs+0x33bc>)
 8013bd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bd8:	885b      	ldrh	r3, [r3, #2]
 8013bda:	011b      	lsls	r3, r3, #4
 8013bdc:	4a14      	ldr	r2, [pc, #80]	; (8013c30 <readCanToStructs+0x33bc>)
 8013bde:	4413      	add	r3, r2
 8013be0:	2210      	movs	r2, #16
 8013be2:	2100      	movs	r1, #0
 8013be4:	4618      	mov	r0, r3
 8013be6:	f010 fdcf 	bl	8024788 <memset>
			canRead.Out++;
 8013bea:	4b11      	ldr	r3, [pc, #68]	; (8013c30 <readCanToStructs+0x33bc>)
 8013bec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bf0:	885b      	ldrh	r3, [r3, #2]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	4b0e      	ldr	r3, [pc, #56]	; (8013c30 <readCanToStructs+0x33bc>)
 8013bf8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bfc:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8013bfe:	4b0c      	ldr	r3, [pc, #48]	; (8013c30 <readCanToStructs+0x33bc>)
 8013c00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c04:	885b      	ldrh	r3, [r3, #2]
 8013c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c0a:	d104      	bne.n	8013c16 <readCanToStructs+0x33a2>
				canRead.Out = 0;
 8013c0c:	4b08      	ldr	r3, [pc, #32]	; (8013c30 <readCanToStructs+0x33bc>)
 8013c0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c12:	2200      	movs	r2, #0
 8013c14:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8013c16:	f7fc fdd7 	bl	80107c8 <canDataReady>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	f47f ad03 	bne.w	8013628 <readCanToStructs+0x2db4>
			/* Protocol Type */
		}
	}
	default:
		break;
 8013c22:	bf00      	nop
 8013c24:	e000      	b.n	8013c28 <readCanToStructs+0x33b4>
			return;
 8013c26:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8013c28:	373c      	adds	r7, #60	; 0x3c
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	20005b50 	.word	0x20005b50
 8013c34:	2000532c 	.word	0x2000532c
 8013c38:	2000065d 	.word	0x2000065d
 8013c3c:	20009e10 	.word	0x20009e10
 8013c40:	08029218 	.word	0x08029218
 8013c44:	20009dd0 	.word	0x20009dd0
 8013c48:	2000ecb4 	.word	0x2000ecb4
 8013c4c:	20000108 	.word	0x20000108
 8013c50:	20009d74 	.word	0x20009d74
 8013c54:	080291b4 	.word	0x080291b4

08013c58 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	460b      	mov	r3, r1
 8013c62:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8013c64:	2300      	movs	r3, #0
 8013c66:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8013c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	6879      	ldr	r1, [r7, #4]
 8013c70:	2000      	movs	r0, #0
 8013c72:	f000 f845 	bl	8013d00 <GetCRC16>
 8013c76:	4603      	mov	r3, r0
 8013c78:	461a      	mov	r2, r3
 8013c7a:	4b1d      	ldr	r3, [pc, #116]	; (8013cf0 <CheckCRC+0x98>)
 8013c7c:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8013c7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c82:	687a      	ldr	r2, [r7, #4]
 8013c84:	4413      	add	r3, r2
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	4b1a      	ldr	r3, [pc, #104]	; (8013cf4 <CheckCRC+0x9c>)
 8013c8c:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8013c8e:	4b19      	ldr	r3, [pc, #100]	; (8013cf4 <CheckCRC+0x9c>)
 8013c90:	881b      	ldrh	r3, [r3, #0]
 8013c92:	021b      	lsls	r3, r3, #8
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	4b17      	ldr	r3, [pc, #92]	; (8013cf4 <CheckCRC+0x9c>)
 8013c98:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8013c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	687a      	ldr	r2, [r7, #4]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	781b      	ldrb	r3, [r3, #0]
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	4b12      	ldr	r3, [pc, #72]	; (8013cf4 <CheckCRC+0x9c>)
 8013caa:	881b      	ldrh	r3, [r3, #0]
 8013cac:	4313      	orrs	r3, r2
 8013cae:	b29a      	uxth	r2, r3
 8013cb0:	4b10      	ldr	r3, [pc, #64]	; (8013cf4 <CheckCRC+0x9c>)
 8013cb2:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8013cb4:	4b0f      	ldr	r3, [pc, #60]	; (8013cf4 <CheckCRC+0x9c>)
 8013cb6:	881a      	ldrh	r2, [r3, #0]
 8013cb8:	4b0d      	ldr	r3, [pc, #52]	; (8013cf0 <CheckCRC+0x98>)
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d105      	bne.n	8013ccc <CheckCRC+0x74>
	{
		retVal = 1;
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	81fb      	strh	r3, [r7, #14]
		return k;
 8013cc4:	4b0b      	ldr	r3, [pc, #44]	; (8013cf4 <CheckCRC+0x9c>)
 8013cc6:	881b      	ldrh	r3, [r3, #0]
 8013cc8:	b21b      	sxth	r3, r3
 8013cca:	e00d      	b.n	8013ce8 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8013ccc:	4b08      	ldr	r3, [pc, #32]	; (8013cf0 <CheckCRC+0x98>)
 8013cce:	881b      	ldrh	r3, [r3, #0]
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	4809      	ldr	r0, [pc, #36]	; (8013cf8 <CheckCRC+0xa0>)
 8013cd4:	f010 fe40 	bl	8024958 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8013cd8:	4b06      	ldr	r3, [pc, #24]	; (8013cf4 <CheckCRC+0x9c>)
 8013cda:	881b      	ldrh	r3, [r3, #0]
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4807      	ldr	r0, [pc, #28]	; (8013cfc <CheckCRC+0xa4>)
 8013ce0:	f010 fe3a 	bl	8024958 <iprintf>
	return retVal;
 8013ce4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3710      	adds	r7, #16
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}
 8013cf0:	20009cac 	.word	0x20009cac
 8013cf4:	20009cae 	.word	0x20009cae
 8013cf8:	0802922c 	.word	0x0802922c
 8013cfc:	08029244 	.word	0x08029244

08013d00 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b085      	sub	sp, #20
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	4603      	mov	r3, r0
 8013d08:	6039      	str	r1, [r7, #0]
 8013d0a:	80fb      	strh	r3, [r7, #6]
 8013d0c:	4613      	mov	r3, r2
 8013d0e:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8013d10:	88fb      	ldrh	r3, [r7, #6]
 8013d12:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8013d14:	e038      	b.n	8013d88 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8013d16:	89fb      	ldrh	r3, [r7, #14]
 8013d18:	f003 030f 	and.w	r3, r3, #15
 8013d1c:	4a22      	ldr	r2, [pc, #136]	; (8013da8 <GetCRC16+0xa8>)
 8013d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d22:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8013d24:	89fb      	ldrh	r3, [r7, #14]
 8013d26:	091b      	lsrs	r3, r3, #4
 8013d28:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8013d2a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013d2e:	89bb      	ldrh	r3, [r7, #12]
 8013d30:	4053      	eors	r3, r2
 8013d32:	b21a      	sxth	r2, r3
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	f003 030f 	and.w	r3, r3, #15
 8013d3c:	491a      	ldr	r1, [pc, #104]	; (8013da8 <GetCRC16+0xa8>)
 8013d3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d42:	b21b      	sxth	r3, r3
 8013d44:	4053      	eors	r3, r2
 8013d46:	b21b      	sxth	r3, r3
 8013d48:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8013d4a:	89fb      	ldrh	r3, [r7, #14]
 8013d4c:	f003 030f 	and.w	r3, r3, #15
 8013d50:	4a15      	ldr	r2, [pc, #84]	; (8013da8 <GetCRC16+0xa8>)
 8013d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d56:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8013d58:	89fb      	ldrh	r3, [r7, #14]
 8013d5a:	091b      	lsrs	r3, r3, #4
 8013d5c:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8013d5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013d62:	89bb      	ldrh	r3, [r7, #12]
 8013d64:	4053      	eors	r3, r2
 8013d66:	b21a      	sxth	r2, r3
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	091b      	lsrs	r3, r3, #4
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	f003 030f 	and.w	r3, r3, #15
 8013d74:	490c      	ldr	r1, [pc, #48]	; (8013da8 <GetCRC16+0xa8>)
 8013d76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d7a:	b21b      	sxth	r3, r3
 8013d7c:	4053      	eors	r3, r2
 8013d7e:	b21b      	sxth	r3, r3
 8013d80:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	3301      	adds	r3, #1
 8013d86:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8013d88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	3a01      	subs	r2, #1
 8013d90:	b292      	uxth	r2, r2
 8013d92:	80ba      	strh	r2, [r7, #4]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	dcbe      	bgt.n	8013d16 <GetCRC16+0x16>
	}
	return(uiCrc);
 8013d98:	89fb      	ldrh	r3, [r7, #14]
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	3714      	adds	r7, #20
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr
 8013da6:	bf00      	nop
 8013da8:	0802b6dc 	.word	0x0802b6dc

08013dac <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	460b      	mov	r3, r1
 8013db6:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8013db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	6879      	ldr	r1, [r7, #4]
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	f7ff ff9d 	bl	8013d00 <GetCRC16>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	461a      	mov	r2, r3
 8013dca:	4b11      	ldr	r3, [pc, #68]	; (8013e10 <ComputeCRC+0x64>)
 8013dcc:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8013dce:	4b10      	ldr	r3, [pc, #64]	; (8013e10 <ComputeCRC+0x64>)
 8013dd0:	881a      	ldrh	r2, [r3, #0]
 8013dd2:	4b10      	ldr	r3, [pc, #64]	; (8013e14 <ComputeCRC+0x68>)
 8013dd4:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8013dd6:	4b0e      	ldr	r3, [pc, #56]	; (8013e10 <ComputeCRC+0x64>)
 8013dd8:	8819      	ldrh	r1, [r3, #0]
 8013dda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013dde:	3301      	adds	r3, #1
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	4413      	add	r3, r2
 8013de4:	b2ca      	uxtb	r2, r1
 8013de6:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8013de8:	4b09      	ldr	r3, [pc, #36]	; (8013e10 <ComputeCRC+0x64>)
 8013dea:	881b      	ldrh	r3, [r3, #0]
 8013dec:	0a1b      	lsrs	r3, r3, #8
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	4b07      	ldr	r3, [pc, #28]	; (8013e10 <ComputeCRC+0x64>)
 8013df2:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8013df4:	4b06      	ldr	r3, [pc, #24]	; (8013e10 <ComputeCRC+0x64>)
 8013df6:	8819      	ldrh	r1, [r3, #0]
 8013df8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	4413      	add	r3, r2
 8013e00:	b2ca      	uxtb	r2, r1
 8013e02:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8013e04:	4b03      	ldr	r3, [pc, #12]	; (8013e14 <ComputeCRC+0x68>)
 8013e06:	881b      	ldrh	r3, [r3, #0]
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3708      	adds	r7, #8
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	20009cb0 	.word	0x20009cb0
 8013e14:	20009cb2 	.word	0x20009cb2

08013e18 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b087      	sub	sp, #28
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8013e24:	2300      	movs	r3, #0
 8013e26:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	005b      	lsls	r3, r3, #1
 8013e30:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8013e32:	2300      	movs	r3, #0
 8013e34:	60fb      	str	r3, [r7, #12]
 8013e36:	e012      	b.n	8013e5e <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	f003 0301 	and.w	r3, r3, #1
 8013e3e:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f1c3 031f 	rsb	r3, r3, #31
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	fa02 f303 	lsl.w	r3, r2, r3
 8013e4c:	697a      	ldr	r2, [r7, #20]
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	085b      	lsrs	r3, r3, #1
 8013e56:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	60fb      	str	r3, [r7, #12]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2b1f      	cmp	r3, #31
 8013e62:	dde9      	ble.n	8013e38 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8013e64:	697b      	ldr	r3, [r7, #20]
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	371c      	adds	r7, #28
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e70:	4770      	bx	lr
	...

08013e74 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b088      	sub	sp, #32
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8013e80:	2300      	movs	r3, #0
 8013e82:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8013e84:	2300      	movs	r3, #0
 8013e86:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	613b      	str	r3, [r7, #16]
	int i=0;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8013e90:	4b26      	ldr	r3, [pc, #152]	; (8013f2c <CalculateDirectReverseCrc+0xb8>)
 8013e92:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f7ff ffbf 	bl	8013e18 <ReverseCRCPolynomial>
 8013e9a:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	61bb      	str	r3, [r7, #24]
 8013ea0:	e00d      	b.n	8013ebe <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8013ea2:	69f8      	ldr	r0, [r7, #28]
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	697a      	ldr	r2, [r7, #20]
 8013eae:	4619      	mov	r1, r3
 8013eb0:	f000 f844 	bl	8013f3c <AnsoldoCrc>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8013eb8:	69bb      	ldr	r3, [r7, #24]
 8013eba:	3301      	adds	r3, #1
 8013ebc:	61bb      	str	r3, [r7, #24]
 8013ebe:	887b      	ldrh	r3, [r7, #2]
 8013ec0:	69ba      	ldr	r2, [r7, #24]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	dbed      	blt.n	8013ea2 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8013ec6:	69fb      	ldr	r3, [r7, #28]
 8013ec8:	061b      	lsls	r3, r3, #24
 8013eca:	693a      	ldr	r2, [r7, #16]
 8013ecc:	4313      	orrs	r3, r2
 8013ece:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	021b      	lsls	r3, r3, #8
 8013ed4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013ed8:	693a      	ldr	r2, [r7, #16]
 8013eda:	4313      	orrs	r3, r2
 8013edc:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	121b      	asrs	r3, r3, #8
 8013ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013ee6:	693a      	ldr	r2, [r7, #16]
 8013ee8:	4313      	orrs	r3, r2
 8013eea:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8013eec:	69fb      	ldr	r3, [r7, #28]
 8013eee:	0e1a      	lsrs	r2, r3, #24
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	4313      	orrs	r3, r2
 8013ef4:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8013ef6:	4b0e      	ldr	r3, [pc, #56]	; (8013f30 <CalculateDirectReverseCrc+0xbc>)
 8013ef8:	781b      	ldrb	r3, [r3, #0]
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d110      	bne.n	8013f20 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8013efe:	480d      	ldr	r0, [pc, #52]	; (8013f34 <CalculateDirectReverseCrc+0xc0>)
 8013f00:	f008 f9d2 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8013f04:	4601      	mov	r1, r0
 8013f06:	4b0c      	ldr	r3, [pc, #48]	; (8013f38 <CalculateDirectReverseCrc+0xc4>)
 8013f08:	fba3 2301 	umull	r2, r3, r3, r1
 8013f0c:	08da      	lsrs	r2, r3, #3
 8013f0e:	4613      	mov	r3, r2
 8013f10:	009b      	lsls	r3, r3, #2
 8013f12:	4413      	add	r3, r2
 8013f14:	005b      	lsls	r3, r3, #1
 8013f16:	1aca      	subs	r2, r1, r3
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	e000      	b.n	8013f22 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8013f20:	693b      	ldr	r3, [r7, #16]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3720      	adds	r7, #32
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	d20d8a81 	.word	0xd20d8a81
 8013f30:	20000e51 	.word	0x20000e51
 8013f34:	2000f3c4 	.word	0x2000f3c4
 8013f38:	cccccccd 	.word	0xcccccccd

08013f3c <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b08b      	sub	sp, #44	; 0x2c
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	460b      	mov	r3, r1
 8013f46:	607a      	str	r2, [r7, #4]
 8013f48:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8013f4a:	7afb      	ldrb	r3, [r7, #11]
 8013f4c:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8013f4e:	2301      	movs	r3, #1
 8013f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f54:	e01d      	b.n	8013f92 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f003 0301 	and.w	r3, r3, #1
 8013f5c:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8013f5e:	6a3b      	ldr	r3, [r7, #32]
 8013f60:	f003 0301 	and.w	r3, r3, #1
 8013f64:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	085b      	lsrs	r3, r3, #1
 8013f6a:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8013f6c:	69fa      	ldr	r2, [r7, #28]
 8013f6e:	69bb      	ldr	r3, [r7, #24]
 8013f70:	4053      	eors	r3, r2
 8013f72:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d103      	bne.n	8013f82 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	4053      	eors	r3, r2
 8013f80:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8013f82:	6a3b      	ldr	r3, [r7, #32]
 8013f84:	085b      	lsrs	r3, r3, #1
 8013f86:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8013f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f96:	2b08      	cmp	r3, #8
 8013f98:	d9dd      	bls.n	8013f56 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8013f9a:	68fb      	ldr	r3, [r7, #12]
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	372c      	adds	r7, #44	; 0x2c
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr

08013fa8 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b090      	sub	sp, #64	; 0x40
 8013fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	601a      	str	r2, [r3, #0]
 8013fb6:	605a      	str	r2, [r3, #4]
 8013fb8:	609a      	str	r2, [r3, #8]
 8013fba:	60da      	str	r2, [r3, #12]
 8013fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8013fbe:	4bb2      	ldr	r3, [pc, #712]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fc2:	4ab1      	ldr	r2, [pc, #708]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8013fca:	4baf      	ldr	r3, [pc, #700]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013fd6:	4bac      	ldr	r3, [pc, #688]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fda:	4aab      	ldr	r2, [pc, #684]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013fdc:	f043 0320 	orr.w	r3, r3, #32
 8013fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8013fe2:	4ba9      	ldr	r3, [pc, #676]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fe6:	f003 0320 	and.w	r3, r3, #32
 8013fea:	627b      	str	r3, [r7, #36]	; 0x24
 8013fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013fee:	4ba6      	ldr	r3, [pc, #664]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ff2:	4aa5      	ldr	r2, [pc, #660]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8013ffa:	4ba3      	ldr	r3, [pc, #652]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8013ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014002:	623b      	str	r3, [r7, #32]
 8014004:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014006:	4ba0      	ldr	r3, [pc, #640]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801400a:	4a9f      	ldr	r2, [pc, #636]	; (8014288 <MX_GPIO_Init+0x2e0>)
 801400c:	f043 0304 	orr.w	r3, r3, #4
 8014010:	6313      	str	r3, [r2, #48]	; 0x30
 8014012:	4b9d      	ldr	r3, [pc, #628]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014016:	f003 0304 	and.w	r3, r3, #4
 801401a:	61fb      	str	r3, [r7, #28]
 801401c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801401e:	4b9a      	ldr	r3, [pc, #616]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014022:	4a99      	ldr	r2, [pc, #612]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014024:	f043 0301 	orr.w	r3, r3, #1
 8014028:	6313      	str	r3, [r2, #48]	; 0x30
 801402a:	4b97      	ldr	r3, [pc, #604]	; (8014288 <MX_GPIO_Init+0x2e0>)
 801402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801402e:	f003 0301 	and.w	r3, r3, #1
 8014032:	61bb      	str	r3, [r7, #24]
 8014034:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8014036:	4b94      	ldr	r3, [pc, #592]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801403a:	4a93      	ldr	r2, [pc, #588]	; (8014288 <MX_GPIO_Init+0x2e0>)
 801403c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014040:	6313      	str	r3, [r2, #48]	; 0x30
 8014042:	4b91      	ldr	r3, [pc, #580]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801404a:	617b      	str	r3, [r7, #20]
 801404c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801404e:	4b8e      	ldr	r3, [pc, #568]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014052:	4a8d      	ldr	r2, [pc, #564]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014054:	f043 0310 	orr.w	r3, r3, #16
 8014058:	6313      	str	r3, [r2, #48]	; 0x30
 801405a:	4b8b      	ldr	r3, [pc, #556]	; (8014288 <MX_GPIO_Init+0x2e0>)
 801405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801405e:	f003 0310 	and.w	r3, r3, #16
 8014062:	613b      	str	r3, [r7, #16]
 8014064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014066:	4b88      	ldr	r3, [pc, #544]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801406a:	4a87      	ldr	r2, [pc, #540]	; (8014288 <MX_GPIO_Init+0x2e0>)
 801406c:	f043 0302 	orr.w	r3, r3, #2
 8014070:	6313      	str	r3, [r2, #48]	; 0x30
 8014072:	4b85      	ldr	r3, [pc, #532]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014076:	f003 0302 	and.w	r3, r3, #2
 801407a:	60fb      	str	r3, [r7, #12]
 801407c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801407e:	4b82      	ldr	r3, [pc, #520]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014082:	4a81      	ldr	r2, [pc, #516]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014084:	f043 0308 	orr.w	r3, r3, #8
 8014088:	6313      	str	r3, [r2, #48]	; 0x30
 801408a:	4b7f      	ldr	r3, [pc, #508]	; (8014288 <MX_GPIO_Init+0x2e0>)
 801408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801408e:	f003 0308 	and.w	r3, r3, #8
 8014092:	60bb      	str	r3, [r7, #8]
 8014094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014096:	4b7c      	ldr	r3, [pc, #496]	; (8014288 <MX_GPIO_Init+0x2e0>)
 8014098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801409a:	4a7b      	ldr	r2, [pc, #492]	; (8014288 <MX_GPIO_Init+0x2e0>)
 801409c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80140a0:	6313      	str	r3, [r2, #48]	; 0x30
 80140a2:	4b79      	ldr	r3, [pc, #484]	; (8014288 <MX_GPIO_Init+0x2e0>)
 80140a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80140aa:	607b      	str	r3, [r7, #4]
 80140ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80140ae:	4b76      	ldr	r3, [pc, #472]	; (8014288 <MX_GPIO_Init+0x2e0>)
 80140b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140b2:	4a75      	ldr	r2, [pc, #468]	; (8014288 <MX_GPIO_Init+0x2e0>)
 80140b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80140b8:	6313      	str	r3, [r2, #48]	; 0x30
 80140ba:	4b73      	ldr	r3, [pc, #460]	; (8014288 <MX_GPIO_Init+0x2e0>)
 80140bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80140c2:	603b      	str	r3, [r7, #0]
 80140c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 80140c6:	2200      	movs	r2, #0
 80140c8:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80140cc:	486f      	ldr	r0, [pc, #444]	; (801428c <MX_GPIO_Init+0x2e4>)
 80140ce:	f006 f909 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 80140d2:	2200      	movs	r2, #0
 80140d4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80140d8:	486d      	ldr	r0, [pc, #436]	; (8014290 <MX_GPIO_Init+0x2e8>)
 80140da:	f006 f903 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 80140de:	2200      	movs	r2, #0
 80140e0:	f240 7104 	movw	r1, #1796	; 0x704
 80140e4:	486b      	ldr	r0, [pc, #428]	; (8014294 <MX_GPIO_Init+0x2ec>)
 80140e6:	f006 f8fd 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 80140ea:	2201      	movs	r2, #1
 80140ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80140f0:	4869      	ldr	r0, [pc, #420]	; (8014298 <MX_GPIO_Init+0x2f0>)
 80140f2:	f006 f8f7 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 80140f6:	2200      	movs	r2, #0
 80140f8:	f241 0104 	movw	r1, #4100	; 0x1004
 80140fc:	4867      	ldr	r0, [pc, #412]	; (801429c <MX_GPIO_Init+0x2f4>)
 80140fe:	f006 f8f1 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8014102:	2201      	movs	r2, #1
 8014104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014108:	4865      	ldr	r0, [pc, #404]	; (80142a0 <MX_GPIO_Init+0x2f8>)
 801410a:	f006 f8eb 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 801410e:	2200      	movs	r2, #0
 8014110:	2108      	movs	r1, #8
 8014112:	4864      	ldr	r0, [pc, #400]	; (80142a4 <MX_GPIO_Init+0x2fc>)
 8014114:	f006 f8e6 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8014118:	2201      	movs	r2, #1
 801411a:	2160      	movs	r1, #96	; 0x60
 801411c:	4861      	ldr	r0, [pc, #388]	; (80142a4 <MX_GPIO_Init+0x2fc>)
 801411e:	f006 f8e1 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8014122:	2200      	movs	r2, #0
 8014124:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8014128:	485f      	ldr	r0, [pc, #380]	; (80142a8 <MX_GPIO_Init+0x300>)
 801412a:	f006 f8db 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 801412e:	2201      	movs	r2, #1
 8014130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014134:	485c      	ldr	r0, [pc, #368]	; (80142a8 <MX_GPIO_Init+0x300>)
 8014136:	f006 f8d5 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 801413a:	2201      	movs	r2, #1
 801413c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014140:	4856      	ldr	r0, [pc, #344]	; (801429c <MX_GPIO_Init+0x2f4>)
 8014142:	f006 f8cf 	bl	801a2e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8014146:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 801414a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801414c:	2301      	movs	r3, #1
 801414e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014150:	2300      	movs	r3, #0
 8014152:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014154:	2303      	movs	r3, #3
 8014156:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8014158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801415c:	4619      	mov	r1, r3
 801415e:	484b      	ldr	r0, [pc, #300]	; (801428c <MX_GPIO_Init+0x2e4>)
 8014160:	f005 fefc 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8014164:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801416a:	2300      	movs	r3, #0
 801416c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801416e:	2300      	movs	r3, #0
 8014170:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8014172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014176:	4619      	mov	r1, r3
 8014178:	4844      	ldr	r0, [pc, #272]	; (801428c <MX_GPIO_Init+0x2e4>)
 801417a:	f005 feef 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 801417e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8014182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014184:	2301      	movs	r3, #1
 8014186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014188:	2300      	movs	r3, #0
 801418a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801418c:	2303      	movs	r3, #3
 801418e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014194:	4619      	mov	r1, r3
 8014196:	483e      	ldr	r0, [pc, #248]	; (8014290 <MX_GPIO_Init+0x2e8>)
 8014198:	f005 fee0 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 801419c:	2304      	movs	r3, #4
 801419e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80141a0:	2300      	movs	r3, #0
 80141a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141a4:	2300      	movs	r3, #0
 80141a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 80141a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80141ac:	4619      	mov	r1, r3
 80141ae:	483c      	ldr	r0, [pc, #240]	; (80142a0 <MX_GPIO_Init+0x2f8>)
 80141b0:	f005 fed4 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 80141b4:	f240 7304 	movw	r3, #1796	; 0x704
 80141b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80141ba:	2301      	movs	r3, #1
 80141bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141be:	2300      	movs	r3, #0
 80141c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141c2:	2303      	movs	r3, #3
 80141c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80141c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80141ca:	4619      	mov	r1, r3
 80141cc:	4831      	ldr	r0, [pc, #196]	; (8014294 <MX_GPIO_Init+0x2ec>)
 80141ce:	f005 fec5 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 80141d2:	2303      	movs	r3, #3
 80141d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80141d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80141da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141dc:	2300      	movs	r3, #0
 80141de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80141e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80141e4:	4619      	mov	r1, r3
 80141e6:	482d      	ldr	r0, [pc, #180]	; (801429c <MX_GPIO_Init+0x2f4>)
 80141e8:	f005 feb8 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 80141ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80141f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80141f2:	2300      	movs	r3, #0
 80141f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141f6:	2300      	movs	r3, #0
 80141f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 80141fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80141fe:	4619      	mov	r1, r3
 8014200:	4825      	ldr	r0, [pc, #148]	; (8014298 <MX_GPIO_Init+0x2f0>)
 8014202:	f005 feab 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8014206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801420a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801420c:	2301      	movs	r3, #1
 801420e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014210:	2300      	movs	r3, #0
 8014212:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014214:	2303      	movs	r3, #3
 8014216:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8014218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801421c:	4619      	mov	r1, r3
 801421e:	481e      	ldr	r0, [pc, #120]	; (8014298 <MX_GPIO_Init+0x2f0>)
 8014220:	f005 fe9c 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8014224:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8014228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801422a:	2300      	movs	r3, #0
 801422c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801422e:	2300      	movs	r3, #0
 8014230:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014236:	4619      	mov	r1, r3
 8014238:	481a      	ldr	r0, [pc, #104]	; (80142a4 <MX_GPIO_Init+0x2fc>)
 801423a:	f005 fe8f 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 801423e:	f241 4304 	movw	r3, #5124	; 0x1404
 8014242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014244:	2301      	movs	r3, #1
 8014246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014248:	2300      	movs	r3, #0
 801424a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801424c:	2303      	movs	r3, #3
 801424e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014254:	4619      	mov	r1, r3
 8014256:	4811      	ldr	r0, [pc, #68]	; (801429c <MX_GPIO_Init+0x2f4>)
 8014258:	f005 fe80 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 801425c:	2308      	movs	r3, #8
 801425e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014260:	2300      	movs	r3, #0
 8014262:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014264:	2300      	movs	r3, #0
 8014266:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8014268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801426c:	4619      	mov	r1, r3
 801426e:	480b      	ldr	r0, [pc, #44]	; (801429c <MX_GPIO_Init+0x2f4>)
 8014270:	f005 fe74 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8014274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801427a:	2301      	movs	r3, #1
 801427c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801427e:	2300      	movs	r3, #0
 8014280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014282:	2300      	movs	r3, #0
 8014284:	63bb      	str	r3, [r7, #56]	; 0x38
 8014286:	e011      	b.n	80142ac <MX_GPIO_Init+0x304>
 8014288:	40023800 	.word	0x40023800
 801428c:	40022000 	.word	0x40022000
 8014290:	40021400 	.word	0x40021400
 8014294:	40021c00 	.word	0x40021c00
 8014298:	40021000 	.word	0x40021000
 801429c:	40021800 	.word	0x40021800
 80142a0:	40020800 	.word	0x40020800
 80142a4:	40020c00 	.word	0x40020c00
 80142a8:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 80142ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142b0:	4619      	mov	r1, r3
 80142b2:	4836      	ldr	r0, [pc, #216]	; (801438c <MX_GPIO_Init+0x3e4>)
 80142b4:	f005 fe52 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 80142b8:	2303      	movs	r3, #3
 80142ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142bc:	2302      	movs	r3, #2
 80142be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142c0:	2300      	movs	r3, #0
 80142c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142c4:	2303      	movs	r3, #3
 80142c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80142c8:	2309      	movs	r3, #9
 80142ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80142cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142d0:	4619      	mov	r1, r3
 80142d2:	482f      	ldr	r0, [pc, #188]	; (8014390 <MX_GPIO_Init+0x3e8>)
 80142d4:	f005 fe42 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 80142d8:	2368      	movs	r3, #104	; 0x68
 80142da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80142dc:	2301      	movs	r3, #1
 80142de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142e0:	2300      	movs	r3, #0
 80142e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142e4:	2303      	movs	r3, #3
 80142e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80142e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142ec:	4619      	mov	r1, r3
 80142ee:	4828      	ldr	r0, [pc, #160]	; (8014390 <MX_GPIO_Init+0x3e8>)
 80142f0:	f005 fe34 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 80142f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80142fa:	2300      	movs	r3, #0
 80142fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142fe:	2300      	movs	r3, #0
 8014300:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8014302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014306:	4619      	mov	r1, r3
 8014308:	4822      	ldr	r0, [pc, #136]	; (8014394 <MX_GPIO_Init+0x3ec>)
 801430a:	f005 fe27 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 801430e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014314:	2301      	movs	r3, #1
 8014316:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014318:	2300      	movs	r3, #0
 801431a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801431c:	2300      	movs	r3, #0
 801431e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8014320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014324:	4619      	mov	r1, r3
 8014326:	481b      	ldr	r0, [pc, #108]	; (8014394 <MX_GPIO_Init+0x3ec>)
 8014328:	f005 fe18 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 801432c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014332:	2301      	movs	r3, #1
 8014334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014336:	2300      	movs	r3, #0
 8014338:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801433a:	2303      	movs	r3, #3
 801433c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 801433e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014342:	4619      	mov	r1, r3
 8014344:	4813      	ldr	r0, [pc, #76]	; (8014394 <MX_GPIO_Init+0x3ec>)
 8014346:	f005 fe09 	bl	8019f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 801434a:	2318      	movs	r3, #24
 801434c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801434e:	2300      	movs	r3, #0
 8014350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014352:	2300      	movs	r3, #0
 8014354:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8014356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801435a:	4619      	mov	r1, r3
 801435c:	480e      	ldr	r0, [pc, #56]	; (8014398 <MX_GPIO_Init+0x3f0>)
 801435e:	f005 fdfd 	bl	8019f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8014362:	2200      	movs	r2, #0
 8014364:	2101      	movs	r1, #1
 8014366:	2006      	movs	r0, #6
 8014368:	f004 facd 	bl	8018906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 801436c:	2006      	movs	r0, #6
 801436e:	f004 fae6 	bl	801893e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8014372:	2201      	movs	r2, #1
 8014374:	2101      	movs	r1, #1
 8014376:	2007      	movs	r0, #7
 8014378:	f004 fac5 	bl	8018906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 801437c:	2007      	movs	r0, #7
 801437e:	f004 fade 	bl	801893e <HAL_NVIC_EnableIRQ>

}
 8014382:	bf00      	nop
 8014384:	3740      	adds	r7, #64	; 0x40
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	40020800 	.word	0x40020800
 8014390:	40020c00 	.word	0x40020c00
 8014394:	40022400 	.word	0x40022400
 8014398:	40022800 	.word	0x40022800

0801439c <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 80143a0:	4b0a      	ldr	r3, [pc, #40]	; (80143cc <Feed_wdt+0x30>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fa ffbb 	bl	800f320 <HAL_Elaps_Ticks>
 80143aa:	4603      	mov	r3, r0
 80143ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80143b0:	d309      	bcc.n	80143c6 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 80143b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80143b6:	4806      	ldr	r0, [pc, #24]	; (80143d0 <Feed_wdt+0x34>)
 80143b8:	f005 ffad 	bl	801a316 <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 80143bc:	f003 fac2 	bl	8017944 <HAL_GetTick>
 80143c0:	4603      	mov	r3, r0
 80143c2:	4a02      	ldr	r2, [pc, #8]	; (80143cc <Feed_wdt+0x30>)
 80143c4:	6013      	str	r3, [r2, #0]
	}

}
 80143c6:	bf00      	nop
 80143c8:	bd80      	pop	{r7, pc}
 80143ca:	bf00      	nop
 80143cc:	20009cb4 	.word	0x20009cb4
 80143d0:	40022400 	.word	0x40022400

080143d4 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 80143d8:	4b09      	ldr	r3, [pc, #36]	; (8014400 <Blink_S2+0x2c>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4618      	mov	r0, r3
 80143de:	f7fa ff9f 	bl	800f320 <HAL_Elaps_Ticks>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b64      	cmp	r3, #100	; 0x64
 80143e6:	d909      	bls.n	80143fc <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 80143e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80143ec:	4805      	ldr	r0, [pc, #20]	; (8014404 <Blink_S2+0x30>)
 80143ee:	f005 ff92 	bl	801a316 <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 80143f2:	f003 faa7 	bl	8017944 <HAL_GetTick>
 80143f6:	4603      	mov	r3, r0
 80143f8:	4a01      	ldr	r2, [pc, #4]	; (8014400 <Blink_S2+0x2c>)
 80143fa:	6013      	str	r3, [r2, #0]
	}
}
 80143fc:	bf00      	nop
 80143fe:	bd80      	pop	{r7, pc}
 8014400:	20009cb8 	.word	0x20009cb8
 8014404:	40021c00 	.word	0x40021c00

08014408 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801440c:	4b1b      	ldr	r3, [pc, #108]	; (801447c <MX_I2C1_Init+0x74>)
 801440e:	4a1c      	ldr	r2, [pc, #112]	; (8014480 <MX_I2C1_Init+0x78>)
 8014410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8014412:	4b1a      	ldr	r3, [pc, #104]	; (801447c <MX_I2C1_Init+0x74>)
 8014414:	4a1b      	ldr	r2, [pc, #108]	; (8014484 <MX_I2C1_Init+0x7c>)
 8014416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8014418:	4b18      	ldr	r3, [pc, #96]	; (801447c <MX_I2C1_Init+0x74>)
 801441a:	2200      	movs	r2, #0
 801441c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801441e:	4b17      	ldr	r3, [pc, #92]	; (801447c <MX_I2C1_Init+0x74>)
 8014420:	2201      	movs	r2, #1
 8014422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014424:	4b15      	ldr	r3, [pc, #84]	; (801447c <MX_I2C1_Init+0x74>)
 8014426:	2200      	movs	r2, #0
 8014428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801442a:	4b14      	ldr	r3, [pc, #80]	; (801447c <MX_I2C1_Init+0x74>)
 801442c:	2200      	movs	r2, #0
 801442e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8014430:	4b12      	ldr	r3, [pc, #72]	; (801447c <MX_I2C1_Init+0x74>)
 8014432:	2200      	movs	r2, #0
 8014434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014436:	4b11      	ldr	r3, [pc, #68]	; (801447c <MX_I2C1_Init+0x74>)
 8014438:	2200      	movs	r2, #0
 801443a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801443c:	4b0f      	ldr	r3, [pc, #60]	; (801447c <MX_I2C1_Init+0x74>)
 801443e:	2200      	movs	r2, #0
 8014440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014442:	480e      	ldr	r0, [pc, #56]	; (801447c <MX_I2C1_Init+0x74>)
 8014444:	f005 ffa6 	bl	801a394 <HAL_I2C_Init>
 8014448:	4603      	mov	r3, r0
 801444a:	2b00      	cmp	r3, #0
 801444c:	d001      	beq.n	8014452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 801444e:	f001 fcdb 	bl	8015e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014452:	2100      	movs	r1, #0
 8014454:	4809      	ldr	r0, [pc, #36]	; (801447c <MX_I2C1_Init+0x74>)
 8014456:	f006 fcf5 	bl	801ae44 <HAL_I2CEx_ConfigAnalogFilter>
 801445a:	4603      	mov	r3, r0
 801445c:	2b00      	cmp	r3, #0
 801445e:	d001      	beq.n	8014464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8014460:	f001 fcd2 	bl	8015e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8014464:	2100      	movs	r1, #0
 8014466:	4805      	ldr	r0, [pc, #20]	; (801447c <MX_I2C1_Init+0x74>)
 8014468:	f006 fd37 	bl	801aeda <HAL_I2CEx_ConfigDigitalFilter>
 801446c:	4603      	mov	r3, r0
 801446e:	2b00      	cmp	r3, #0
 8014470:	d001      	beq.n	8014476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8014472:	f001 fcc9 	bl	8015e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8014476:	bf00      	nop
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	20009cbc 	.word	0x20009cbc
 8014480:	40005400 	.word	0x40005400
 8014484:	c0000e12 	.word	0xc0000e12

08014488 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 801448c:	4b1b      	ldr	r3, [pc, #108]	; (80144fc <MX_I2C2_Init+0x74>)
 801448e:	4a1c      	ldr	r2, [pc, #112]	; (8014500 <MX_I2C2_Init+0x78>)
 8014490:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8014492:	4b1a      	ldr	r3, [pc, #104]	; (80144fc <MX_I2C2_Init+0x74>)
 8014494:	4a1b      	ldr	r2, [pc, #108]	; (8014504 <MX_I2C2_Init+0x7c>)
 8014496:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8014498:	4b18      	ldr	r3, [pc, #96]	; (80144fc <MX_I2C2_Init+0x74>)
 801449a:	2200      	movs	r2, #0
 801449c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801449e:	4b17      	ldr	r3, [pc, #92]	; (80144fc <MX_I2C2_Init+0x74>)
 80144a0:	2201      	movs	r2, #1
 80144a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80144a4:	4b15      	ldr	r3, [pc, #84]	; (80144fc <MX_I2C2_Init+0x74>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80144aa:	4b14      	ldr	r3, [pc, #80]	; (80144fc <MX_I2C2_Init+0x74>)
 80144ac:	2200      	movs	r2, #0
 80144ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80144b0:	4b12      	ldr	r3, [pc, #72]	; (80144fc <MX_I2C2_Init+0x74>)
 80144b2:	2200      	movs	r2, #0
 80144b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80144b6:	4b11      	ldr	r3, [pc, #68]	; (80144fc <MX_I2C2_Init+0x74>)
 80144b8:	2200      	movs	r2, #0
 80144ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80144bc:	4b0f      	ldr	r3, [pc, #60]	; (80144fc <MX_I2C2_Init+0x74>)
 80144be:	2200      	movs	r2, #0
 80144c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80144c2:	480e      	ldr	r0, [pc, #56]	; (80144fc <MX_I2C2_Init+0x74>)
 80144c4:	f005 ff66 	bl	801a394 <HAL_I2C_Init>
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d001      	beq.n	80144d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80144ce:	f001 fc9b 	bl	8015e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80144d2:	2100      	movs	r1, #0
 80144d4:	4809      	ldr	r0, [pc, #36]	; (80144fc <MX_I2C2_Init+0x74>)
 80144d6:	f006 fcb5 	bl	801ae44 <HAL_I2CEx_ConfigAnalogFilter>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d001      	beq.n	80144e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80144e0:	f001 fc92 	bl	8015e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80144e4:	2100      	movs	r1, #0
 80144e6:	4805      	ldr	r0, [pc, #20]	; (80144fc <MX_I2C2_Init+0x74>)
 80144e8:	f006 fcf7 	bl	801aeda <HAL_I2CEx_ConfigDigitalFilter>
 80144ec:	4603      	mov	r3, r0
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d001      	beq.n	80144f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80144f2:	f001 fc89 	bl	8015e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80144f6:	bf00      	nop
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	20009d10 	.word	0x20009d10
 8014500:	40005800 	.word	0x40005800
 8014504:	c0000e12 	.word	0xc0000e12

08014508 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b0b0      	sub	sp, #192	; 0xc0
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014510:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014514:	2200      	movs	r2, #0
 8014516:	601a      	str	r2, [r3, #0]
 8014518:	605a      	str	r2, [r3, #4]
 801451a:	609a      	str	r2, [r3, #8]
 801451c:	60da      	str	r2, [r3, #12]
 801451e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014520:	f107 031c 	add.w	r3, r7, #28
 8014524:	2290      	movs	r2, #144	; 0x90
 8014526:	2100      	movs	r1, #0
 8014528:	4618      	mov	r0, r3
 801452a:	f010 f92d 	bl	8024788 <memset>
  if(i2cHandle->Instance==I2C1)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	4a44      	ldr	r2, [pc, #272]	; (8014644 <HAL_I2C_MspInit+0x13c>)
 8014534:	4293      	cmp	r3, r2
 8014536:	d13e      	bne.n	80145b6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8014538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801453c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801453e:	2300      	movs	r3, #0
 8014540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014544:	f107 031c 	add.w	r3, r7, #28
 8014548:	4618      	mov	r0, r3
 801454a:	f007 fa05 	bl	801b958 <HAL_RCCEx_PeriphCLKConfig>
 801454e:	4603      	mov	r3, r0
 8014550:	2b00      	cmp	r3, #0
 8014552:	d001      	beq.n	8014558 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8014554:	f001 fc58 	bl	8015e08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014558:	4b3b      	ldr	r3, [pc, #236]	; (8014648 <HAL_I2C_MspInit+0x140>)
 801455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801455c:	4a3a      	ldr	r2, [pc, #232]	; (8014648 <HAL_I2C_MspInit+0x140>)
 801455e:	f043 0302 	orr.w	r3, r3, #2
 8014562:	6313      	str	r3, [r2, #48]	; 0x30
 8014564:	4b38      	ldr	r3, [pc, #224]	; (8014648 <HAL_I2C_MspInit+0x140>)
 8014566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014568:	f003 0302 	and.w	r3, r3, #2
 801456c:	61bb      	str	r3, [r7, #24]
 801456e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8014570:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8014574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014578:	2312      	movs	r3, #18
 801457a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801457e:	2300      	movs	r3, #0
 8014580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014584:	2303      	movs	r3, #3
 8014586:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801458a:	2304      	movs	r3, #4
 801458c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014590:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014594:	4619      	mov	r1, r3
 8014596:	482d      	ldr	r0, [pc, #180]	; (801464c <HAL_I2C_MspInit+0x144>)
 8014598:	f005 fce0 	bl	8019f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801459c:	4b2a      	ldr	r3, [pc, #168]	; (8014648 <HAL_I2C_MspInit+0x140>)
 801459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145a0:	4a29      	ldr	r2, [pc, #164]	; (8014648 <HAL_I2C_MspInit+0x140>)
 80145a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80145a6:	6413      	str	r3, [r2, #64]	; 0x40
 80145a8:	4b27      	ldr	r3, [pc, #156]	; (8014648 <HAL_I2C_MspInit+0x140>)
 80145aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80145b0:	617b      	str	r3, [r7, #20]
 80145b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80145b4:	e041      	b.n	801463a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4a25      	ldr	r2, [pc, #148]	; (8014650 <HAL_I2C_MspInit+0x148>)
 80145bc:	4293      	cmp	r3, r2
 80145be:	d13c      	bne.n	801463a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80145c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80145c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80145c6:	2300      	movs	r3, #0
 80145c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80145cc:	f107 031c 	add.w	r3, r7, #28
 80145d0:	4618      	mov	r0, r3
 80145d2:	f007 f9c1 	bl	801b958 <HAL_RCCEx_PeriphCLKConfig>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d001      	beq.n	80145e0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80145dc:	f001 fc14 	bl	8015e08 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80145e0:	4b19      	ldr	r3, [pc, #100]	; (8014648 <HAL_I2C_MspInit+0x140>)
 80145e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145e4:	4a18      	ldr	r2, [pc, #96]	; (8014648 <HAL_I2C_MspInit+0x140>)
 80145e6:	f043 0320 	orr.w	r3, r3, #32
 80145ea:	6313      	str	r3, [r2, #48]	; 0x30
 80145ec:	4b16      	ldr	r3, [pc, #88]	; (8014648 <HAL_I2C_MspInit+0x140>)
 80145ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145f0:	f003 0320 	and.w	r3, r3, #32
 80145f4:	613b      	str	r3, [r7, #16]
 80145f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 80145f8:	2303      	movs	r3, #3
 80145fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80145fe:	2312      	movs	r3, #18
 8014600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014604:	2300      	movs	r3, #0
 8014606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801460a:	2303      	movs	r3, #3
 801460c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8014610:	2304      	movs	r3, #4
 8014612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801461a:	4619      	mov	r1, r3
 801461c:	480d      	ldr	r0, [pc, #52]	; (8014654 <HAL_I2C_MspInit+0x14c>)
 801461e:	f005 fc9d 	bl	8019f5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8014622:	4b09      	ldr	r3, [pc, #36]	; (8014648 <HAL_I2C_MspInit+0x140>)
 8014624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014626:	4a08      	ldr	r2, [pc, #32]	; (8014648 <HAL_I2C_MspInit+0x140>)
 8014628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801462c:	6413      	str	r3, [r2, #64]	; 0x40
 801462e:	4b06      	ldr	r3, [pc, #24]	; (8014648 <HAL_I2C_MspInit+0x140>)
 8014630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014636:	60fb      	str	r3, [r7, #12]
 8014638:	68fb      	ldr	r3, [r7, #12]
}
 801463a:	bf00      	nop
 801463c:	37c0      	adds	r7, #192	; 0xc0
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	40005400 	.word	0x40005400
 8014648:	40023800 	.word	0x40023800
 801464c:	40020400 	.word	0x40020400
 8014650:	40005800 	.word	0x40005800
 8014654:	40021400 	.word	0x40021400

08014658 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 801465c:	4b0b      	ldr	r3, [pc, #44]	; (801468c <MX_IWDG_Init+0x34>)
 801465e:	4a0c      	ldr	r2, [pc, #48]	; (8014690 <MX_IWDG_Init+0x38>)
 8014660:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8014662:	4b0a      	ldr	r3, [pc, #40]	; (801468c <MX_IWDG_Init+0x34>)
 8014664:	2203      	movs	r2, #3
 8014666:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8014668:	4b08      	ldr	r3, [pc, #32]	; (801468c <MX_IWDG_Init+0x34>)
 801466a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801466e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 8014670:	4b06      	ldr	r3, [pc, #24]	; (801468c <MX_IWDG_Init+0x34>)
 8014672:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8014676:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8014678:	4804      	ldr	r0, [pc, #16]	; (801468c <MX_IWDG_Init+0x34>)
 801467a:	f006 fc7a 	bl	801af72 <HAL_IWDG_Init>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	d001      	beq.n	8014688 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8014684:	f001 fbc0 	bl	8015e08 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8014688:	bf00      	nop
 801468a:	bd80      	pop	{r7, pc}
 801468c:	20009d64 	.word	0x20009d64
 8014690:	40003000 	.word	0x40003000

08014694 <Process_Kyosan_EI>:
#ifdef EI_1
uint8_t SendThisCardRelays = 0;
#endif

void Process_Kyosan_EI(void)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	af00      	add	r7, sp, #0

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8014698:	480a      	ldr	r0, [pc, #40]	; (80146c4 <Process_Kyosan_EI+0x30>)
 801469a:	f006 fcb9 	bl	801b010 <HAL_IWDG_Refresh>

		Feed_wdt();
 801469e:	f7ff fe7d 	bl	801439c <Feed_wdt>

		Get_Kyosan_EI_Message(KYOSAN_PORT);
 80146a2:	2003      	movs	r0, #3
 80146a4:	f000 f9cc 	bl	8014a40 <Get_Kyosan_EI_Message>

		Process_Send_Signals_2_MIE_Kyosan();
 80146a8:	f000 f8e8 	bl	801487c <Process_Send_Signals_2_MIE_Kyosan>

		DetectCanXchangeFailure();
 80146ac:	f000 f8b2 	bl	8014814 <DetectCanXchangeFailure>

		Process_ComFailTimeout();
 80146b0:	f000 f80a 	bl	80146c8 <Process_ComFailTimeout>

		readCanToStructs();
 80146b4:	f7fc f8de 	bl	8010874 <readCanToStructs>

		Check_forKyosanCMD();
 80146b8:	f000 feb0 	bl	801541c <Check_forKyosanCMD>

		SendKyosanRelays2Other();
 80146bc:	f000 f890 	bl	80147e0 <SendKyosanRelays2Other>
		HAL_IWDG_Refresh(&hiwdg);
 80146c0:	e7ea      	b.n	8014698 <Process_Kyosan_EI+0x4>
 80146c2:	bf00      	nop
 80146c4:	20009d64 	.word	0x20009d64

080146c8 <Process_ComFailTimeout>:
	}
}

void Process_ComFailTimeout(void)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	af00      	add	r7, sp, #0
	if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) > EI_data.Kyosan_st.Comm_Fail_Time)
 80146cc:	4b40      	ldr	r3, [pc, #256]	; (80147d0 <Process_ComFailTimeout+0x108>)
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7fa fe25 	bl	800f320 <HAL_Elaps_Ticks>
 80146d6:	4602      	mov	r2, r0
 80146d8:	4b3e      	ldr	r3, [pc, #248]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 80146da:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80146de:	429a      	cmp	r2, r3
 80146e0:	d82b      	bhi.n	801473a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80146e2:	4b3b      	ldr	r3, [pc, #236]	; (80147d0 <Process_ComFailTimeout+0x108>)
 80146e4:	689b      	ldr	r3, [r3, #8]
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7fa fe1a 	bl	800f320 <HAL_Elaps_Ticks>
 80146ec:	4602      	mov	r2, r0
 80146ee:	4b39      	ldr	r3, [pc, #228]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 80146f0:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d820      	bhi.n	801473a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80146f8:	4b35      	ldr	r3, [pc, #212]	; (80147d0 <Process_ComFailTimeout+0x108>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7fa fe0f 	bl	800f320 <HAL_Elaps_Ticks>
 8014702:	4602      	mov	r2, r0
 8014704:	4b33      	ldr	r3, [pc, #204]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 8014706:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801470a:	429a      	cmp	r2, r3
 801470c:	d815      	bhi.n	801473a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 801470e:	4b30      	ldr	r3, [pc, #192]	; (80147d0 <Process_ComFailTimeout+0x108>)
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	4618      	mov	r0, r3
 8014714:	f7fa fe04 	bl	800f320 <HAL_Elaps_Ticks>
 8014718:	4602      	mov	r2, r0
 801471a:	4b2e      	ldr	r3, [pc, #184]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 801471c:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8014720:	429a      	cmp	r2, r3
 8014722:	d80a      	bhi.n	801473a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time))
 8014724:	4b2a      	ldr	r3, [pc, #168]	; (80147d0 <Process_ComFailTimeout+0x108>)
 8014726:	691b      	ldr	r3, [r3, #16]
 8014728:	4618      	mov	r0, r3
 801472a:	f7fa fdf9 	bl	800f320 <HAL_Elaps_Ticks>
 801472e:	4602      	mov	r2, r0
 8014730:	4b28      	ldr	r3, [pc, #160]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 8014732:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8014736:	429a      	cmp	r2, r3
 8014738:	d90c      	bls.n	8014754 <Process_ComFailTimeout+0x8c>
	{
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 801473a:	4b27      	ldr	r3, [pc, #156]	; (80147d8 <Process_ComFailTimeout+0x110>)
 801473c:	785b      	ldrb	r3, [r3, #1]
 801473e:	2b01      	cmp	r3, #1
 8014740:	d143      	bne.n	80147ca <Process_ComFailTimeout+0x102>
		{
			printf("Time out for Message Packets Reached\n");
 8014742:	4826      	ldr	r0, [pc, #152]	; (80147dc <Process_ComFailTimeout+0x114>)
 8014744:	f010 f9a4 	bl	8024a90 <puts>
			memset(&Kyosan_SelfRelays,0,sizeof(KYOSAN_RELAYS_t));
 8014748:	2240      	movs	r2, #64	; 0x40
 801474a:	2100      	movs	r1, #0
 801474c:	4822      	ldr	r0, [pc, #136]	; (80147d8 <Process_ComFailTimeout+0x110>)
 801474e:	f010 f81b 	bl	8024788 <memset>
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8014752:	e03a      	b.n	80147ca <Process_ComFailTimeout+0x102>
		}
	}
	else if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) < EI_data.Kyosan_st.Comm_Fail_Time)
 8014754:	4b1e      	ldr	r3, [pc, #120]	; (80147d0 <Process_ComFailTimeout+0x108>)
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	4618      	mov	r0, r3
 801475a:	f7fa fde1 	bl	800f320 <HAL_Elaps_Ticks>
 801475e:	4602      	mov	r2, r0
 8014760:	4b1c      	ldr	r3, [pc, #112]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 8014762:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8014766:	429a      	cmp	r2, r3
 8014768:	d22f      	bcs.n	80147ca <Process_ComFailTimeout+0x102>
			&& (HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 801476a:	4b19      	ldr	r3, [pc, #100]	; (80147d0 <Process_ComFailTimeout+0x108>)
 801476c:	689b      	ldr	r3, [r3, #8]
 801476e:	4618      	mov	r0, r3
 8014770:	f7fa fdd6 	bl	800f320 <HAL_Elaps_Ticks>
 8014774:	4602      	mov	r2, r0
 8014776:	4b17      	ldr	r3, [pc, #92]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 8014778:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801477c:	429a      	cmp	r2, r3
 801477e:	d224      	bcs.n	80147ca <Process_ComFailTimeout+0x102>
			&& (HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8014780:	4b13      	ldr	r3, [pc, #76]	; (80147d0 <Process_ComFailTimeout+0x108>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4618      	mov	r0, r3
 8014786:	f7fa fdcb 	bl	800f320 <HAL_Elaps_Ticks>
 801478a:	4602      	mov	r2, r0
 801478c:	4b11      	ldr	r3, [pc, #68]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 801478e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8014792:	429a      	cmp	r2, r3
 8014794:	d219      	bcs.n	80147ca <Process_ComFailTimeout+0x102>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8014796:	4b0e      	ldr	r3, [pc, #56]	; (80147d0 <Process_ComFailTimeout+0x108>)
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	4618      	mov	r0, r3
 801479c:	f7fa fdc0 	bl	800f320 <HAL_Elaps_Ticks>
 80147a0:	4602      	mov	r2, r0
 80147a2:	4b0c      	ldr	r3, [pc, #48]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 80147a4:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d20e      	bcs.n	80147ca <Process_ComFailTimeout+0x102>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time))
 80147ac:	4b08      	ldr	r3, [pc, #32]	; (80147d0 <Process_ComFailTimeout+0x108>)
 80147ae:	691b      	ldr	r3, [r3, #16]
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fa fdb5 	bl	800f320 <HAL_Elaps_Ticks>
 80147b6:	4602      	mov	r2, r0
 80147b8:	4b06      	ldr	r3, [pc, #24]	; (80147d4 <Process_ComFailTimeout+0x10c>)
 80147ba:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80147be:	429a      	cmp	r2, r3
 80147c0:	d203      	bcs.n	80147ca <Process_ComFailTimeout+0x102>

	{
		Kyosan_SelfRelays.Message_Receiving = SET;
 80147c2:	4b05      	ldr	r3, [pc, #20]	; (80147d8 <Process_ComFailTimeout+0x110>)
 80147c4:	2201      	movs	r2, #1
 80147c6:	705a      	strb	r2, [r3, #1]
	}
}
 80147c8:	e7ff      	b.n	80147ca <Process_ComFailTimeout+0x102>
 80147ca:	bf00      	nop
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	20009d7c 	.word	0x20009d7c
 80147d4:	20000304 	.word	0x20000304
 80147d8:	20009d90 	.word	0x20009d90
 80147dc:	0802925c 	.word	0x0802925c

080147e0 <SendKyosanRelays2Other>:
		RelayMisMatchCnt = RESET;
	}
}

void SendKyosanRelays2Other(void)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	af00      	add	r7, sp, #0
	static uint32_t RelaySendingClk = 0;
	if(HAL_Elaps_Ticks(RelaySendingClk) > 3000)
 80147e4:	4b0a      	ldr	r3, [pc, #40]	; (8014810 <SendKyosanRelays2Other+0x30>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fa fd99 	bl	800f320 <HAL_Elaps_Ticks>
 80147ee:	4603      	mov	r3, r0
 80147f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80147f4:	4293      	cmp	r3, r2
 80147f6:	d908      	bls.n	801480a <SendKyosanRelays2Other+0x2a>
	{
#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 80147f8:	f240 2007 	movw	r0, #519	; 0x207
 80147fc:	f7fb fb44 	bl	800fe88 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		RelaySendingClk = HAL_GetTick();
 8014800:	f003 f8a0 	bl	8017944 <HAL_GetTick>
 8014804:	4603      	mov	r3, r0
 8014806:	4a02      	ldr	r2, [pc, #8]	; (8014810 <SendKyosanRelays2Other+0x30>)
 8014808:	6013      	str	r3, [r2, #0]
	}
}
 801480a:	bf00      	nop
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	2000f0a8 	.word	0x2000f0a8

08014814 <DetectCanXchangeFailure>:

void DetectCanXchangeFailure(void)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	af00      	add	r7, sp, #0
	static uint32_t S2_BlinkClk = 0;

	if( (HAL_Elaps_Ticks(LastCANReceived_Clk_Kyosan) > EI_data.Kyosan_st.CAN_Fail_Clk) && (Is_CAN_Exchange_happening != RESET ))
 8014818:	4b13      	ldr	r3, [pc, #76]	; (8014868 <DetectCanXchangeFailure+0x54>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4618      	mov	r0, r3
 801481e:	f7fa fd7f 	bl	800f320 <HAL_Elaps_Ticks>
 8014822:	4602      	mov	r2, r0
 8014824:	4b11      	ldr	r3, [pc, #68]	; (801486c <DetectCanXchangeFailure+0x58>)
 8014826:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 801482a:	429a      	cmp	r2, r3
 801482c:	d907      	bls.n	801483e <DetectCanXchangeFailure+0x2a>
 801482e:	4b10      	ldr	r3, [pc, #64]	; (8014870 <DetectCanXchangeFailure+0x5c>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d003      	beq.n	801483e <DetectCanXchangeFailure+0x2a>
	{
		Is_CAN_Exchange_happening = RESET;
 8014836:	4b0e      	ldr	r3, [pc, #56]	; (8014870 <DetectCanXchangeFailure+0x5c>)
 8014838:	2200      	movs	r2, #0
 801483a:	701a      	strb	r2, [r3, #0]
			S2_BlinkClk = HAL_GetTick();
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
		}

	}
}
 801483c:	e012      	b.n	8014864 <DetectCanXchangeFailure+0x50>
		if(HAL_Elaps_Ticks(S2_BlinkClk) > 300)
 801483e:	4b0d      	ldr	r3, [pc, #52]	; (8014874 <DetectCanXchangeFailure+0x60>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	4618      	mov	r0, r3
 8014844:	f7fa fd6c 	bl	800f320 <HAL_Elaps_Ticks>
 8014848:	4603      	mov	r3, r0
 801484a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801484e:	d909      	bls.n	8014864 <DetectCanXchangeFailure+0x50>
			S2_BlinkClk = HAL_GetTick();
 8014850:	f003 f878 	bl	8017944 <HAL_GetTick>
 8014854:	4603      	mov	r3, r0
 8014856:	4a07      	ldr	r2, [pc, #28]	; (8014874 <DetectCanXchangeFailure+0x60>)
 8014858:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 801485a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801485e:	4806      	ldr	r0, [pc, #24]	; (8014878 <DetectCanXchangeFailure+0x64>)
 8014860:	f005 fd59 	bl	801a316 <HAL_GPIO_TogglePin>
}
 8014864:	bf00      	nop
 8014866:	bd80      	pop	{r7, pc}
 8014868:	2000ecb4 	.word	0x2000ecb4
 801486c:	20000304 	.word	0x20000304
 8014870:	20000108 	.word	0x20000108
 8014874:	2000f0ac 	.word	0x2000f0ac
 8014878:	40021c00 	.word	0x40021c00

0801487c <Process_Send_Signals_2_MIE_Kyosan>:

void Process_Send_Signals_2_MIE_Kyosan(void)
{
 801487c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
	uint8_t Choice =0;
 8014882:	2300      	movs	r3, #0
 8014884:	71fb      	strb	r3, [r7, #7]

	if(HAL_Elaps_Ticks(MIE_SignalsSending_Clk_Kyosan) > EI_data.Kyosan_st.MIE_SEND_CLK)
 8014886:	4b63      	ldr	r3, [pc, #396]	; (8014a14 <Process_Send_Signals_2_MIE_Kyosan+0x198>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	4618      	mov	r0, r3
 801488c:	f7fa fd48 	bl	800f320 <HAL_Elaps_Ticks>
 8014890:	4602      	mov	r2, r0
 8014892:	4b61      	ldr	r3, [pc, #388]	; (8014a18 <Process_Send_Signals_2_MIE_Kyosan+0x19c>)
 8014894:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8014898:	429a      	cmp	r2, r3
 801489a:	f240 80b7 	bls.w	8014a0c <Process_Send_Signals_2_MIE_Kyosan+0x190>
	{
#ifdef EI_1
		if((Is_CAN_Exchange_happening == SET) && (MisMatchFlagKyosan == RESET) )
 801489e:	4b5f      	ldr	r3, [pc, #380]	; (8014a1c <Process_Send_Signals_2_MIE_Kyosan+0x1a0>)
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	f040 80a4 	bne.w	80149f0 <Process_Send_Signals_2_MIE_Kyosan+0x174>
 80148a8:	4b5d      	ldr	r3, [pc, #372]	; (8014a20 <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	f040 809f 	bne.w	80149f0 <Process_Send_Signals_2_MIE_Kyosan+0x174>
		{

			Choice = 0;
 80148b2:	2300      	movs	r3, #0
 80148b4:	71fb      	strb	r3, [r7, #7]
			(Kyosan_OtherRelays.Message_Receiving == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 80148b6:	4b5b      	ldr	r3, [pc, #364]	; (8014a24 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 80148b8:	785b      	ldrb	r3, [r3, #1]
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d104      	bne.n	80148c8 <Process_Send_Signals_2_MIE_Kyosan+0x4c>
 80148be:	79fb      	ldrb	r3, [r7, #7]
 80148c0:	f043 0301 	orr.w	r3, r3, #1
 80148c4:	71fb      	strb	r3, [r7, #7]
 80148c6:	e003      	b.n	80148d0 <Process_Send_Signals_2_MIE_Kyosan+0x54>
 80148c8:	79fb      	ldrb	r3, [r7, #7]
 80148ca:	f023 0301 	bic.w	r3, r3, #1
 80148ce:	71fb      	strb	r3, [r7, #7]
			(Kyosan_SelfRelays.Message_Receiving == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 80148d0:	4b55      	ldr	r3, [pc, #340]	; (8014a28 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 80148d2:	785b      	ldrb	r3, [r3, #1]
 80148d4:	2b01      	cmp	r3, #1
 80148d6:	d104      	bne.n	80148e2 <Process_Send_Signals_2_MIE_Kyosan+0x66>
 80148d8:	79fb      	ldrb	r3, [r7, #7]
 80148da:	f043 0302 	orr.w	r3, r3, #2
 80148de:	71fb      	strb	r3, [r7, #7]
 80148e0:	e003      	b.n	80148ea <Process_Send_Signals_2_MIE_Kyosan+0x6e>
 80148e2:	79fb      	ldrb	r3, [r7, #7]
 80148e4:	f023 0302 	bic.w	r3, r3, #2
 80148e8:	71fb      	strb	r3, [r7, #7]

			switch(Choice)
 80148ea:	79fb      	ldrb	r3, [r7, #7]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d005      	beq.n	80148fc <Process_Send_Signals_2_MIE_Kyosan+0x80>
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	dd45      	ble.n	8014980 <Process_Send_Signals_2_MIE_Kyosan+0x104>
 80148f4:	3b02      	subs	r3, #2
 80148f6:	2b01      	cmp	r3, #1
 80148f8:	d842      	bhi.n	8014980 <Process_Send_Signals_2_MIE_Kyosan+0x104>
 80148fa:	e020      	b.n	801493e <Process_Send_Signals_2_MIE_Kyosan+0xc2>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_OtherRelays.Relays,MAX_KYOSAN_RELAYS);
 80148fc:	4a4b      	ldr	r2, [pc, #300]	; (8014a2c <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 80148fe:	4b49      	ldr	r3, [pc, #292]	; (8014a24 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 8014900:	3302      	adds	r3, #2
 8014902:	1c90      	adds	r0, r2, #2
 8014904:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8014908:	4602      	mov	r2, r0
 801490a:	4619      	mov	r1, r3
 801490c:	f8d1 c000 	ldr.w	ip, [r1]
 8014910:	684e      	ldr	r6, [r1, #4]
 8014912:	688d      	ldr	r5, [r1, #8]
 8014914:	68c9      	ldr	r1, [r1, #12]
 8014916:	f8c2 c000 	str.w	ip, [r2]
 801491a:	6056      	str	r6, [r2, #4]
 801491c:	6095      	str	r5, [r2, #8]
 801491e:	60d1      	str	r1, [r2, #12]
 8014920:	3310      	adds	r3, #16
 8014922:	3010      	adds	r0, #16
 8014924:	42a3      	cmp	r3, r4
 8014926:	d1ef      	bne.n	8014908 <Process_Send_Signals_2_MIE_Kyosan+0x8c>
 8014928:	4602      	mov	r2, r0
 801492a:	6818      	ldr	r0, [r3, #0]
 801492c:	6859      	ldr	r1, [r3, #4]
 801492e:	689b      	ldr	r3, [r3, #8]
 8014930:	6010      	str	r0, [r2, #0]
 8014932:	6051      	str	r1, [r2, #4]
 8014934:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = RESET;
 8014936:	4b3e      	ldr	r3, [pc, #248]	; (8014a30 <Process_Send_Signals_2_MIE_Kyosan+0x1b4>)
 8014938:	2200      	movs	r2, #0
 801493a:	701a      	strb	r2, [r3, #0]
#endif
				break;
 801493c:	e028      	b.n	8014990 <Process_Send_Signals_2_MIE_Kyosan+0x114>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_SelfRelays.Relays,MAX_KYOSAN_RELAYS);
 801493e:	4a3b      	ldr	r2, [pc, #236]	; (8014a2c <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8014940:	4b39      	ldr	r3, [pc, #228]	; (8014a28 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8014942:	3302      	adds	r3, #2
 8014944:	1c90      	adds	r0, r2, #2
 8014946:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801494a:	4602      	mov	r2, r0
 801494c:	4619      	mov	r1, r3
 801494e:	f8d1 c000 	ldr.w	ip, [r1]
 8014952:	684e      	ldr	r6, [r1, #4]
 8014954:	688d      	ldr	r5, [r1, #8]
 8014956:	68c9      	ldr	r1, [r1, #12]
 8014958:	f8c2 c000 	str.w	ip, [r2]
 801495c:	6056      	str	r6, [r2, #4]
 801495e:	6095      	str	r5, [r2, #8]
 8014960:	60d1      	str	r1, [r2, #12]
 8014962:	3310      	adds	r3, #16
 8014964:	3010      	adds	r0, #16
 8014966:	42a3      	cmp	r3, r4
 8014968:	d1ef      	bne.n	801494a <Process_Send_Signals_2_MIE_Kyosan+0xce>
 801496a:	4602      	mov	r2, r0
 801496c:	6818      	ldr	r0, [r3, #0]
 801496e:	6859      	ldr	r1, [r3, #4]
 8014970:	689b      	ldr	r3, [r3, #8]
 8014972:	6010      	str	r0, [r2, #0]
 8014974:	6051      	str	r1, [r2, #4]
 8014976:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = SET;
 8014978:	4b2d      	ldr	r3, [pc, #180]	; (8014a30 <Process_Send_Signals_2_MIE_Kyosan+0x1b4>)
 801497a:	2201      	movs	r2, #1
 801497c:	701a      	strb	r2, [r3, #0]
#endif
				break;
 801497e:	e007      	b.n	8014990 <Process_Send_Signals_2_MIE_Kyosan+0x114>

			default:
				memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8014980:	2240      	movs	r2, #64	; 0x40
 8014982:	2100      	movs	r1, #0
 8014984:	4829      	ldr	r0, [pc, #164]	; (8014a2c <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8014986:	f00f feff 	bl	8024788 <memset>
#ifdef EI_1
				SendThisCardRelays = RESET;
 801498a:	4b29      	ldr	r3, [pc, #164]	; (8014a30 <Process_Send_Signals_2_MIE_Kyosan+0x1b4>)
 801498c:	2200      	movs	r2, #0
 801498e:	701a      	strb	r2, [r3, #0]
#endif
			}

			printf("Data Sending 2 MIE:\n");
 8014990:	4828      	ldr	r0, [pc, #160]	; (8014a34 <Process_Send_Signals_2_MIE_Kyosan+0x1b8>)
 8014992:	f010 f87d 	bl	8024a90 <puts>
			for(uint8_t i=0;i<60;++i)
 8014996:	2300      	movs	r3, #0
 8014998:	71bb      	strb	r3, [r7, #6]
 801499a:	e01c      	b.n	80149d6 <Process_Send_Signals_2_MIE_Kyosan+0x15a>
			{
				printf("%02X ",Kyosan_FinalRelays.Relays[i]);
 801499c:	79bb      	ldrb	r3, [r7, #6]
 801499e:	4a23      	ldr	r2, [pc, #140]	; (8014a2c <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 80149a0:	4413      	add	r3, r2
 80149a2:	789b      	ldrb	r3, [r3, #2]
 80149a4:	4619      	mov	r1, r3
 80149a6:	4824      	ldr	r0, [pc, #144]	; (8014a38 <Process_Send_Signals_2_MIE_Kyosan+0x1bc>)
 80149a8:	f00f ffd6 	bl	8024958 <iprintf>

				if(((i+1)%10)==0)
 80149ac:	79bb      	ldrb	r3, [r7, #6]
 80149ae:	1c59      	adds	r1, r3, #1
 80149b0:	4b22      	ldr	r3, [pc, #136]	; (8014a3c <Process_Send_Signals_2_MIE_Kyosan+0x1c0>)
 80149b2:	fb83 2301 	smull	r2, r3, r3, r1
 80149b6:	109a      	asrs	r2, r3, #2
 80149b8:	17cb      	asrs	r3, r1, #31
 80149ba:	1ad2      	subs	r2, r2, r3
 80149bc:	4613      	mov	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4413      	add	r3, r2
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	1aca      	subs	r2, r1, r3
 80149c6:	2a00      	cmp	r2, #0
 80149c8:	d102      	bne.n	80149d0 <Process_Send_Signals_2_MIE_Kyosan+0x154>
				{
					printf("\n");
 80149ca:	200a      	movs	r0, #10
 80149cc:	f00f ffdc 	bl	8024988 <putchar>
			for(uint8_t i=0;i<60;++i)
 80149d0:	79bb      	ldrb	r3, [r7, #6]
 80149d2:	3301      	adds	r3, #1
 80149d4:	71bb      	strb	r3, [r7, #6]
 80149d6:	79bb      	ldrb	r3, [r7, #6]
 80149d8:	2b3b      	cmp	r3, #59	; 0x3b
 80149da:	d9df      	bls.n	801499c <Process_Send_Signals_2_MIE_Kyosan+0x120>
				}
			}
			printf("\n");
 80149dc:	200a      	movs	r0, #10
 80149de:	f00f ffd3 	bl	8024988 <putchar>
			PrintSignalsKyosan();
 80149e2:	f000 fcb7 	bl	8015354 <PrintSignalsKyosan>


			TransmitCanPkt(EI_PROCESS_DATA);
 80149e6:	f240 1019 	movw	r0, #281	; 0x119
 80149ea:	f7fb fa4d 	bl	800fe88 <TransmitCanPkt>
 80149ee:	e008      	b.n	8014a02 <Process_Send_Signals_2_MIE_Kyosan+0x186>
		}
		else
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 80149f0:	2240      	movs	r2, #64	; 0x40
 80149f2:	2100      	movs	r1, #0
 80149f4:	480d      	ldr	r0, [pc, #52]	; (8014a2c <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 80149f6:	f00f fec7 	bl	8024788 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 80149fa:	f240 1019 	movw	r0, #281	; 0x119
 80149fe:	f7fb fa43 	bl	800fe88 <TransmitCanPkt>
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
			TransmitCanPkt(EI_PROCESS_DATA);
		}
#endif
		MIE_SignalsSending_Clk_Kyosan = HAL_GetTick();
 8014a02:	f002 ff9f 	bl	8017944 <HAL_GetTick>
 8014a06:	4603      	mov	r3, r0
 8014a08:	4a02      	ldr	r2, [pc, #8]	; (8014a14 <Process_Send_Signals_2_MIE_Kyosan+0x198>)
 8014a0a:	6013      	str	r3, [r2, #0]
	}
}
 8014a0c:	bf00      	nop
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a14:	2000ecb0 	.word	0x2000ecb0
 8014a18:	20000304 	.word	0x20000304
 8014a1c:	20000108 	.word	0x20000108
 8014a20:	2000ecb8 	.word	0x2000ecb8
 8014a24:	20009dd0 	.word	0x20009dd0
 8014a28:	20009d90 	.word	0x20009d90
 8014a2c:	20009e50 	.word	0x20009e50
 8014a30:	2000f0a5 	.word	0x2000f0a5
 8014a34:	08029284 	.word	0x08029284
 8014a38:	08029298 	.word	0x08029298
 8014a3c:	66666667 	.word	0x66666667

08014a40 <Get_Kyosan_EI_Message>:

void Get_Kyosan_EI_Message(uint8_t ComPort)
{
 8014a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a42:	b089      	sub	sp, #36	; 0x24
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	4603      	mov	r3, r0
 8014a48:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	737b      	strb	r3, [r7, #13]
	static uint16_t Cur_Receive_Length = 0;
	static uint8_t Buffer[256] = {0,};
	static uint8_t Curnt_ProcessingDataType = 0;
	static uint8_t Control_DataReceived = RESET;
	static uint32_t Last_ValidControlInfoClk = 0;
	uint16_t C_CRC = 0;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	817b      	strh	r3, [r7, #10]
	uint16_t R_CRC = 0;
 8014a52:	2300      	movs	r3, #0
 8014a54:	83fb      	strh	r3, [r7, #30]
#ifdef EI_1
	static uint16_t PrevRelayCRC = 0;
#endif
	static uint8_t ControlData_Positive[256] = {0,};
	static uint8_t ControlData_Negative[256] = {0,};
	uint8_t Pos_NegDataMisMatch = RESET;
 8014a56:	2300      	movs	r3, #0
 8014a58:	777b      	strb	r3, [r7, #29]
	static uint8_t Pos_NegDataMisMatch_Count = RESET;
	uint8_t TypeofDataMisMatch = RESET;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	773b      	strb	r3, [r7, #28]
	uint8_t ControlID = 0;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	727b      	strb	r3, [r7, #9]



	if((HAL_Elaps_Ticks(Last_ValidControlInfoClk) >= EI_data.Kyosan_st.Comm_Fail_Time) && (Control_DataReceived == SET))
 8014a62:	4b33      	ldr	r3, [pc, #204]	; (8014b30 <Get_Kyosan_EI_Message+0xf0>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7fa fc5a 	bl	800f320 <HAL_Elaps_Ticks>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	4b31      	ldr	r3, [pc, #196]	; (8014b34 <Get_Kyosan_EI_Message+0xf4>)
 8014a70:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8014a74:	429a      	cmp	r2, r3
 8014a76:	f0c0 8409 	bcc.w	801528c <Get_Kyosan_EI_Message+0x84c>
 8014a7a:	4b2f      	ldr	r3, [pc, #188]	; (8014b38 <Get_Kyosan_EI_Message+0xf8>)
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	f040 8404 	bne.w	801528c <Get_Kyosan_EI_Message+0x84c>
	{
		Control_DataReceived = RESET;
 8014a84:	4b2c      	ldr	r3, [pc, #176]	; (8014b38 <Get_Kyosan_EI_Message+0xf8>)
 8014a86:	2200      	movs	r2, #0
 8014a88:	701a      	strb	r2, [r3, #0]
	}

	while(Com_DataReady(ComPort))
 8014a8a:	e3ff      	b.n	801528c <Get_Kyosan_EI_Message+0x84c>
	{
		Data = Com_Get_Byte(ComPort);
 8014a8c:	79fb      	ldrb	r3, [r7, #7]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f002 fc30 	bl	80172f4 <Com_Get_Byte>
 8014a94:	4603      	mov	r3, r0
 8014a96:	737b      	strb	r3, [r7, #13]
		//		printf("%02X ",Data);

		if((Cur_Receive_Length == Max_Receive_Length) || (Cur_Receive_Length == RESET))
 8014a98:	4b28      	ldr	r3, [pc, #160]	; (8014b3c <Get_Kyosan_EI_Message+0xfc>)
 8014a9a:	881a      	ldrh	r2, [r3, #0]
 8014a9c:	4b28      	ldr	r3, [pc, #160]	; (8014b40 <Get_Kyosan_EI_Message+0x100>)
 8014a9e:	881b      	ldrh	r3, [r3, #0]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d003      	beq.n	8014aac <Get_Kyosan_EI_Message+0x6c>
 8014aa4:	4b25      	ldr	r3, [pc, #148]	; (8014b3c <Get_Kyosan_EI_Message+0xfc>)
 8014aa6:	881b      	ldrh	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d139      	bne.n	8014b20 <Get_Kyosan_EI_Message+0xe0>
		{
			memset(Buffer,0,sizeof(Buffer));
 8014aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014ab0:	2100      	movs	r1, #0
 8014ab2:	4824      	ldr	r0, [pc, #144]	; (8014b44 <Get_Kyosan_EI_Message+0x104>)
 8014ab4:	f00f fe68 	bl	8024788 <memset>
			Cur_Receive_Length = RESET;
 8014ab8:	4b20      	ldr	r3, [pc, #128]	; (8014b3c <Get_Kyosan_EI_Message+0xfc>)
 8014aba:	2200      	movs	r2, #0
 8014abc:	801a      	strh	r2, [r3, #0]

			switch(Data)
 8014abe:	7b7b      	ldrb	r3, [r7, #13]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d001      	beq.n	8014ac8 <Get_Kyosan_EI_Message+0x88>
 8014ac4:	2bfe      	cmp	r3, #254	; 0xfe
 8014ac6:	d113      	bne.n	8014af0 <Get_Kyosan_EI_Message+0xb0>
			{
			case ACTUAL_CONTROL_DATA:
			case COMPLIMENT_CONTROL_DATA:
				Max_Receive_Length = (	EI_data.Kyosan_st.No_ofFrames * 64);
 8014ac8:	4b1a      	ldr	r3, [pc, #104]	; (8014b34 <Get_Kyosan_EI_Message+0xf4>)
 8014aca:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	019b      	lsls	r3, r3, #6
 8014ad2:	b29a      	uxth	r2, r3
 8014ad4:	4b1a      	ldr	r3, [pc, #104]	; (8014b40 <Get_Kyosan_EI_Message+0x100>)
 8014ad6:	801a      	strh	r2, [r3, #0]
				if(EI_data.Kyosan_st.No_ofFrames == 4)
 8014ad8:	4b16      	ldr	r3, [pc, #88]	; (8014b34 <Get_Kyosan_EI_Message+0xf4>)
 8014ada:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8014ade:	2b04      	cmp	r3, #4
 8014ae0:	d102      	bne.n	8014ae8 <Get_Kyosan_EI_Message+0xa8>
				{
					Max_Receive_Length = 192;
 8014ae2:	4b17      	ldr	r3, [pc, #92]	; (8014b40 <Get_Kyosan_EI_Message+0x100>)
 8014ae4:	22c0      	movs	r2, #192	; 0xc0
 8014ae6:	801a      	strh	r2, [r3, #0]
				}
				Curnt_ProcessingDataType = CONTROL_DATA;
 8014ae8:	4b17      	ldr	r3, [pc, #92]	; (8014b48 <Get_Kyosan_EI_Message+0x108>)
 8014aea:	2201      	movs	r2, #1
 8014aec:	701a      	strb	r2, [r3, #0]
				//				printf("Received Ctrl Data|");
				break;
 8014aee:	e017      	b.n	8014b20 <Get_Kyosan_EI_Message+0xe0>

			default:

				/* Polling Data Range (0x11-0x7f for Positive data) (0x80-0xEE for Negative data)*/
				/* Control_DataReceived checking is added to Avoid Control information data to be processed as Polling Information */
				if( (Control_DataReceived == SET) && (((Data >= 0X11 ) && (Data <= 0X7F)) || ((Data >= 0X80 ) && (Data <= 0XEE))) )
 8014af0:	4b11      	ldr	r3, [pc, #68]	; (8014b38 <Get_Kyosan_EI_Message+0xf8>)
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d113      	bne.n	8014b20 <Get_Kyosan_EI_Message+0xe0>
 8014af8:	7b7b      	ldrb	r3, [r7, #13]
 8014afa:	2b10      	cmp	r3, #16
 8014afc:	d903      	bls.n	8014b06 <Get_Kyosan_EI_Message+0xc6>
 8014afe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	da06      	bge.n	8014b14 <Get_Kyosan_EI_Message+0xd4>
 8014b06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	da08      	bge.n	8014b20 <Get_Kyosan_EI_Message+0xe0>
 8014b0e:	7b7b      	ldrb	r3, [r7, #13]
 8014b10:	2bee      	cmp	r3, #238	; 0xee
 8014b12:	d805      	bhi.n	8014b20 <Get_Kyosan_EI_Message+0xe0>
				{
					/* Consider the data as Polling Data */
					//					printf("Received Polling Data:%u|%02X\n",Control_DataReceived,Data);
					Curnt_ProcessingDataType = POLLING_DATA;
 8014b14:	4b0c      	ldr	r3, [pc, #48]	; (8014b48 <Get_Kyosan_EI_Message+0x108>)
 8014b16:	2202      	movs	r2, #2
 8014b18:	701a      	strb	r2, [r3, #0]
					Max_Receive_Length = 3;
 8014b1a:	4b09      	ldr	r3, [pc, #36]	; (8014b40 <Get_Kyosan_EI_Message+0x100>)
 8014b1c:	2203      	movs	r2, #3
 8014b1e:	801a      	strh	r2, [r3, #0]
				}
			}
		}

		switch(Curnt_ProcessingDataType)
 8014b20:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <Get_Kyosan_EI_Message+0x108>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d011      	beq.n	8014b4c <Get_Kyosan_EI_Message+0x10c>
 8014b28:	2b02      	cmp	r3, #2
 8014b2a:	f000 82db 	beq.w	80150e4 <Get_Kyosan_EI_Message+0x6a4>
 8014b2e:	e3aa      	b.n	8015286 <Get_Kyosan_EI_Message+0x846>
 8014b30:	2000f0b0 	.word	0x2000f0b0
 8014b34:	20000304 	.word	0x20000304
 8014b38:	2000f0b4 	.word	0x2000f0b4
 8014b3c:	2000f0b6 	.word	0x2000f0b6
 8014b40:	2000f0b8 	.word	0x2000f0b8
 8014b44:	2000f0bc 	.word	0x2000f0bc
 8014b48:	2000f1bc 	.word	0x2000f1bc
		{
		case CONTROL_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8014b4c:	4baf      	ldr	r3, [pc, #700]	; (8014e0c <Get_Kyosan_EI_Message+0x3cc>)
 8014b4e:	881b      	ldrh	r3, [r3, #0]
 8014b50:	1c5a      	adds	r2, r3, #1
 8014b52:	b291      	uxth	r1, r2
 8014b54:	4aad      	ldr	r2, [pc, #692]	; (8014e0c <Get_Kyosan_EI_Message+0x3cc>)
 8014b56:	8011      	strh	r1, [r2, #0]
 8014b58:	4619      	mov	r1, r3
 8014b5a:	4aad      	ldr	r2, [pc, #692]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014b5c:	7b7b      	ldrb	r3, [r7, #13]
 8014b5e:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 8014b60:	4baa      	ldr	r3, [pc, #680]	; (8014e0c <Get_Kyosan_EI_Message+0x3cc>)
 8014b62:	881a      	ldrh	r2, [r3, #0]
 8014b64:	4bab      	ldr	r3, [pc, #684]	; (8014e14 <Get_Kyosan_EI_Message+0x3d4>)
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	f040 838f 	bne.w	801528c <Get_Kyosan_EI_Message+0x84c>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 8014b6e:	4ba7      	ldr	r3, [pc, #668]	; (8014e0c <Get_Kyosan_EI_Message+0x3cc>)
 8014b70:	881b      	ldrh	r3, [r3, #0]
 8014b72:	3b02      	subs	r3, #2
 8014b74:	4619      	mov	r1, r3
 8014b76:	48a6      	ldr	r0, [pc, #664]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014b78:	f000 fbb0 	bl	80152dc <Calc_Kysoan_CRC>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8014b80:	4ba2      	ldr	r3, [pc, #648]	; (8014e0c <Get_Kyosan_EI_Message+0x3cc>)
 8014b82:	881b      	ldrh	r3, [r3, #0]
 8014b84:	3b02      	subs	r3, #2
 8014b86:	4aa2      	ldr	r2, [pc, #648]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014b88:	4413      	add	r3, r2
 8014b8a:	461a      	mov	r2, r3
 8014b8c:	2110      	movs	r1, #16
 8014b8e:	2000      	movs	r0, #0
 8014b90:	f7eb fd40 	bl	8000614 <ExtractBits>
 8014b94:	4603      	mov	r3, r0
 8014b96:	83fb      	strh	r3, [r7, #30]


				if( (  (CHECKFLAG(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8014b98:	4b9f      	ldr	r3, [pc, #636]	; (8014e18 <Get_Kyosan_EI_Message+0x3d8>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	f003 0301 	and.w	r3, r3, #1
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d02d      	beq.n	8014c00 <Get_Kyosan_EI_Message+0x1c0>
 8014ba4:	4b9a      	ldr	r3, [pc, #616]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014ba6:	781b      	ldrb	r3, [r3, #0]
 8014ba8:	b25b      	sxtb	r3, r3
 8014baa:	11db      	asrs	r3, r3, #7
 8014bac:	b25b      	sxtb	r3, r3
 8014bae:	f003 0301 	and.w	r3, r3, #1
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d124      	bne.n	8014c00 <Get_Kyosan_EI_Message+0x1c0>
				{
					printf("\nInjecting Positive Control Data CRC Failure\n");
 8014bb6:	4899      	ldr	r0, [pc, #612]	; (8014e1c <Get_Kyosan_EI_Message+0x3dc>)
 8014bb8:	f00f ff6a 	bl	8024a90 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8014bbc:	4898      	ldr	r0, [pc, #608]	; (8014e20 <Get_Kyosan_EI_Message+0x3e0>)
 8014bbe:	f007 fb73 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014bc2:	4601      	mov	r1, r0
 8014bc4:	4b97      	ldr	r3, [pc, #604]	; (8014e24 <Get_Kyosan_EI_Message+0x3e4>)
 8014bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8014bca:	0bda      	lsrs	r2, r3, #15
 8014bcc:	4613      	mov	r3, r2
 8014bce:	041b      	lsls	r3, r3, #16
 8014bd0:	1a9b      	subs	r3, r3, r2
 8014bd2:	1aca      	subs	r2, r1, r3
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8014bd8:	8bfa      	ldrh	r2, [r7, #30]
 8014bda:	897b      	ldrh	r3, [r7, #10]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d10f      	bne.n	8014c00 <Get_Kyosan_EI_Message+0x1c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8014be0:	488f      	ldr	r0, [pc, #572]	; (8014e20 <Get_Kyosan_EI_Message+0x3e0>)
 8014be2:	f007 fb61 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014be6:	4601      	mov	r1, r0
 8014be8:	4b8f      	ldr	r3, [pc, #572]	; (8014e28 <Get_Kyosan_EI_Message+0x3e8>)
 8014bea:	fba3 2301 	umull	r2, r3, r3, r1
 8014bee:	09da      	lsrs	r2, r3, #7
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	021b      	lsls	r3, r3, #8
 8014bf4:	1a9b      	subs	r3, r3, r2
 8014bf6:	1aca      	subs	r2, r1, r3
 8014bf8:	b293      	uxth	r3, r2
 8014bfa:	8bfa      	ldrh	r2, [r7, #30]
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8014c00:	4b85      	ldr	r3, [pc, #532]	; (8014e18 <Get_Kyosan_EI_Message+0x3d8>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	085b      	lsrs	r3, r3, #1
 8014c06:	f003 0301 	and.w	r3, r3, #1
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d02d      	beq.n	8014c6a <Get_Kyosan_EI_Message+0x22a>
 8014c0e:	4b80      	ldr	r3, [pc, #512]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014c10:	781b      	ldrb	r3, [r3, #0]
 8014c12:	b25b      	sxtb	r3, r3
 8014c14:	11db      	asrs	r3, r3, #7
 8014c16:	b25b      	sxtb	r3, r3
 8014c18:	f003 0301 	and.w	r3, r3, #1
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d024      	beq.n	8014c6a <Get_Kyosan_EI_Message+0x22a>
				{
					printf("\nInjecting Negative Control Data CRC Failure\n");
 8014c20:	4882      	ldr	r0, [pc, #520]	; (8014e2c <Get_Kyosan_EI_Message+0x3ec>)
 8014c22:	f00f ff35 	bl	8024a90 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8014c26:	487e      	ldr	r0, [pc, #504]	; (8014e20 <Get_Kyosan_EI_Message+0x3e0>)
 8014c28:	f007 fb3e 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014c2c:	4601      	mov	r1, r0
 8014c2e:	4b7d      	ldr	r3, [pc, #500]	; (8014e24 <Get_Kyosan_EI_Message+0x3e4>)
 8014c30:	fba3 2301 	umull	r2, r3, r3, r1
 8014c34:	0bda      	lsrs	r2, r3, #15
 8014c36:	4613      	mov	r3, r2
 8014c38:	041b      	lsls	r3, r3, #16
 8014c3a:	1a9b      	subs	r3, r3, r2
 8014c3c:	1aca      	subs	r2, r1, r3
 8014c3e:	4613      	mov	r3, r2
 8014c40:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8014c42:	8bfa      	ldrh	r2, [r7, #30]
 8014c44:	897b      	ldrh	r3, [r7, #10]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d10f      	bne.n	8014c6a <Get_Kyosan_EI_Message+0x22a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8014c4a:	4875      	ldr	r0, [pc, #468]	; (8014e20 <Get_Kyosan_EI_Message+0x3e0>)
 8014c4c:	f007 fb2c 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014c50:	4601      	mov	r1, r0
 8014c52:	4b75      	ldr	r3, [pc, #468]	; (8014e28 <Get_Kyosan_EI_Message+0x3e8>)
 8014c54:	fba3 2301 	umull	r2, r3, r3, r1
 8014c58:	09da      	lsrs	r2, r3, #7
 8014c5a:	4613      	mov	r3, r2
 8014c5c:	021b      	lsls	r3, r3, #8
 8014c5e:	1a9b      	subs	r3, r3, r2
 8014c60:	1aca      	subs	r2, r1, r3
 8014c62:	b293      	uxth	r3, r2
 8014c64:	8bfa      	ldrh	r2, [r7, #30]
 8014c66:	1ad3      	subs	r3, r2, r3
 8014c68:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(R_CRC == C_CRC)
 8014c6a:	8bfa      	ldrh	r2, [r7, #30]
 8014c6c:	897b      	ldrh	r3, [r7, #10]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	f040 81f5 	bne.w	801505e <Get_Kyosan_EI_Message+0x61e>
				{

					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8014c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014c78:	486d      	ldr	r0, [pc, #436]	; (8014e30 <Get_Kyosan_EI_Message+0x3f0>)
 8014c7a:	f005 fb4c 	bl	801a316 <HAL_GPIO_TogglePin>


					Last_ValidControlInfoClk = HAL_GetTick();
 8014c7e:	f002 fe61 	bl	8017944 <HAL_GetTick>
 8014c82:	4603      	mov	r3, r0
 8014c84:	4a6b      	ldr	r2, [pc, #428]	; (8014e34 <Get_Kyosan_EI_Message+0x3f4>)
 8014c86:	6013      	str	r3, [r2, #0]
					Control_DataReceived = SET;
 8014c88:	4b6b      	ldr	r3, [pc, #428]	; (8014e38 <Get_Kyosan_EI_Message+0x3f8>)
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	701a      	strb	r2, [r3, #0]
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8014c8e:	f002 fe59 	bl	8017944 <HAL_GetTick>
 8014c92:	4603      	mov	r3, r0
 8014c94:	4a69      	ldr	r2, [pc, #420]	; (8014e3c <Get_Kyosan_EI_Message+0x3fc>)
 8014c96:	6013      	str	r3, [r2, #0]

					//					printf("CTRL-Data CRC OK\n");
					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8014c98:	4b5d      	ldr	r3, [pc, #372]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	b25b      	sxtb	r3, r3
 8014c9e:	11db      	asrs	r3, r3, #7
 8014ca0:	b25b      	sxtb	r3, r3
 8014ca2:	f003 0301 	and.w	r3, r3, #1
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	f040 80e0 	bne.w	8014e6c <Get_Kyosan_EI_Message+0x42c>
					{
						printf("+ Ctrl Data|");
 8014cac:	4864      	ldr	r0, [pc, #400]	; (8014e40 <Get_Kyosan_EI_Message+0x400>)
 8014cae:	f00f fe53 	bl	8024958 <iprintf>
						memcpy(&ControlData_Positive,&Buffer,Cur_Receive_Length);
 8014cb2:	4b56      	ldr	r3, [pc, #344]	; (8014e0c <Get_Kyosan_EI_Message+0x3cc>)
 8014cb4:	881b      	ldrh	r3, [r3, #0]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	4955      	ldr	r1, [pc, #340]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014cba:	4862      	ldr	r0, [pc, #392]	; (8014e44 <Get_Kyosan_EI_Message+0x404>)
 8014cbc:	f00f fd3c 	bl	8024738 <memcpy>

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8014cc0:	4b55      	ldr	r3, [pc, #340]	; (8014e18 <Get_Kyosan_EI_Message+0x3d8>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	091b      	lsrs	r3, r3, #4
 8014cc6:	f003 0301 	and.w	r3, r3, #1
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d027      	beq.n	8014d1e <Get_Kyosan_EI_Message+0x2de>
 8014cce:	4b50      	ldr	r3, [pc, #320]	; (8014e10 <Get_Kyosan_EI_Message+0x3d0>)
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	b25b      	sxtb	r3, r3
 8014cd4:	11db      	asrs	r3, r3, #7
 8014cd6:	b25b      	sxtb	r3, r3
 8014cd8:	f003 0301 	and.w	r3, r3, #1
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d01e      	beq.n	8014d1e <Get_Kyosan_EI_Message+0x2de>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8014ce0:	4859      	ldr	r0, [pc, #356]	; (8014e48 <Get_Kyosan_EI_Message+0x408>)
 8014ce2:	f00f fed5 	bl	8024a90 <puts>
							ControlData_Positive[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8014ce6:	484e      	ldr	r0, [pc, #312]	; (8014e20 <Get_Kyosan_EI_Message+0x3e0>)
 8014ce8:	f007 fade 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014cec:	4602      	mov	r2, r0
 8014cee:	4b4e      	ldr	r3, [pc, #312]	; (8014e28 <Get_Kyosan_EI_Message+0x3e8>)
 8014cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8014cf4:	09dc      	lsrs	r4, r3, #7
 8014cf6:	4623      	mov	r3, r4
 8014cf8:	021b      	lsls	r3, r3, #8
 8014cfa:	1b1b      	subs	r3, r3, r4
 8014cfc:	1ad4      	subs	r4, r2, r3
 8014cfe:	4848      	ldr	r0, [pc, #288]	; (8014e20 <Get_Kyosan_EI_Message+0x3e0>)
 8014d00:	f007 fad2 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014d04:	4601      	mov	r1, r0
 8014d06:	4b51      	ldr	r3, [pc, #324]	; (8014e4c <Get_Kyosan_EI_Message+0x40c>)
 8014d08:	fba3 2301 	umull	r2, r3, r3, r1
 8014d0c:	08da      	lsrs	r2, r3, #3
 8014d0e:	4613      	mov	r3, r2
 8014d10:	011b      	lsls	r3, r3, #4
 8014d12:	1a9b      	subs	r3, r3, r2
 8014d14:	1aca      	subs	r2, r1, r3
 8014d16:	1c53      	adds	r3, r2, #1
 8014d18:	b2e1      	uxtb	r1, r4
 8014d1a:	4a4a      	ldr	r2, [pc, #296]	; (8014e44 <Get_Kyosan_EI_Message+0x404>)
 8014d1c:	54d1      	strb	r1, [r2, r3]
						}

						ControlID = (uint8_t)((uint8_t)ControlData_Positive[0]&(uint8_t)0x0f);
 8014d1e:	4b49      	ldr	r3, [pc, #292]	; (8014e44 <Get_Kyosan_EI_Message+0x404>)
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	f003 030f 	and.w	r3, r3, #15
 8014d26:	727b      	strb	r3, [r7, #9]
						//						printf("%u|",ControlID);
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8014d28:	2300      	movs	r3, #0
 8014d2a:	837b      	strh	r3, [r7, #26]
 8014d2c:	e011      	b.n	8014d52 <Get_Kyosan_EI_Message+0x312>
						{
							if(ControlData_Negative[i] != (uint8_t)(~ControlData_Positive[i]))
 8014d2e:	8b7b      	ldrh	r3, [r7, #26]
 8014d30:	4a47      	ldr	r2, [pc, #284]	; (8014e50 <Get_Kyosan_EI_Message+0x410>)
 8014d32:	5cd2      	ldrb	r2, [r2, r3]
 8014d34:	8b7b      	ldrh	r3, [r7, #26]
 8014d36:	4943      	ldr	r1, [pc, #268]	; (8014e44 <Get_Kyosan_EI_Message+0x404>)
 8014d38:	5ccb      	ldrb	r3, [r1, r3]
 8014d3a:	43db      	mvns	r3, r3
 8014d3c:	b2db      	uxtb	r3, r3
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d004      	beq.n	8014d4c <Get_Kyosan_EI_Message+0x30c>
							{
								Pos_NegDataMisMatch = SET;
 8014d42:	2301      	movs	r3, #1
 8014d44:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = POS_DATA_MISMATCH;
 8014d46:	2301      	movs	r3, #1
 8014d48:	773b      	strb	r3, [r7, #28]
								//								printf("Positive & Negative data not Matching\n");
								//								printf("P:%X-N:%X -> %X\n",ControlData_Positive[i],ControlData_Negative[i],(uint8_t)(~ControlData_Positive[i]));
								break;
 8014d4a:	e008      	b.n	8014d5e <Get_Kyosan_EI_Message+0x31e>
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8014d4c:	8b7b      	ldrh	r3, [r7, #26]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	837b      	strh	r3, [r7, #26]
 8014d52:	8b7a      	ldrh	r2, [r7, #26]
 8014d54:	4b2d      	ldr	r3, [pc, #180]	; (8014e0c <Get_Kyosan_EI_Message+0x3cc>)
 8014d56:	881b      	ldrh	r3, [r3, #0]
 8014d58:	3b02      	subs	r3, #2
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	dbe7      	blt.n	8014d2e <Get_Kyosan_EI_Message+0x2ee>
							}
						}

						if(Pos_NegDataMisMatch == RESET)
 8014d5e:	7f7b      	ldrb	r3, [r7, #29]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	f040 80db 	bne.w	8014f1c <Get_Kyosan_EI_Message+0x4dc>
						{
							printf("\nR:");
 8014d66:	483b      	ldr	r0, [pc, #236]	; (8014e54 <Get_Kyosan_EI_Message+0x414>)
 8014d68:	f00f fdf6 	bl	8024958 <iprintf>
							for(uint8_t i=1;i<61;++i)
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	767b      	strb	r3, [r7, #25]
 8014d70:	e009      	b.n	8014d86 <Get_Kyosan_EI_Message+0x346>
							{
								printf("%02X ",ControlData_Positive[i]);
 8014d72:	7e7b      	ldrb	r3, [r7, #25]
 8014d74:	4a33      	ldr	r2, [pc, #204]	; (8014e44 <Get_Kyosan_EI_Message+0x404>)
 8014d76:	5cd3      	ldrb	r3, [r2, r3]
 8014d78:	4619      	mov	r1, r3
 8014d7a:	4837      	ldr	r0, [pc, #220]	; (8014e58 <Get_Kyosan_EI_Message+0x418>)
 8014d7c:	f00f fdec 	bl	8024958 <iprintf>
							for(uint8_t i=1;i<61;++i)
 8014d80:	7e7b      	ldrb	r3, [r7, #25]
 8014d82:	3301      	adds	r3, #1
 8014d84:	767b      	strb	r3, [r7, #25]
 8014d86:	7e7b      	ldrb	r3, [r7, #25]
 8014d88:	2b3c      	cmp	r3, #60	; 0x3c
 8014d8a:	d9f2      	bls.n	8014d72 <Get_Kyosan_EI_Message+0x332>
							}
							printf("\n");
 8014d8c:	200a      	movs	r0, #10
 8014d8e:	f00f fdfb 	bl	8024988 <putchar>

							memcpy(Kyosan_SelfRelays.Relays,&ControlData_Positive[1],60);
 8014d92:	4a32      	ldr	r2, [pc, #200]	; (8014e5c <Get_Kyosan_EI_Message+0x41c>)
 8014d94:	4b2b      	ldr	r3, [pc, #172]	; (8014e44 <Get_Kyosan_EI_Message+0x404>)
 8014d96:	3301      	adds	r3, #1
 8014d98:	1c90      	adds	r0, r2, #2
 8014d9a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8014d9e:	4602      	mov	r2, r0
 8014da0:	4619      	mov	r1, r3
 8014da2:	f8d1 c000 	ldr.w	ip, [r1]
 8014da6:	684e      	ldr	r6, [r1, #4]
 8014da8:	688d      	ldr	r5, [r1, #8]
 8014daa:	68c9      	ldr	r1, [r1, #12]
 8014dac:	f8c2 c000 	str.w	ip, [r2]
 8014db0:	6056      	str	r6, [r2, #4]
 8014db2:	6095      	str	r5, [r2, #8]
 8014db4:	60d1      	str	r1, [r2, #12]
 8014db6:	3310      	adds	r3, #16
 8014db8:	3010      	adds	r0, #16
 8014dba:	42a3      	cmp	r3, r4
 8014dbc:	d1ef      	bne.n	8014d9e <Get_Kyosan_EI_Message+0x35e>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	6818      	ldr	r0, [r3, #0]
 8014dc2:	6859      	ldr	r1, [r3, #4]
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	6010      	str	r0, [r2, #0]
 8014dc8:	6051      	str	r1, [r2, #4]
 8014dca:	6093      	str	r3, [r2, #8]
							Kyosan_SelfRelays.Relay_CRC = Calc_Kysoan_CRC(Kyosan_SelfRelays.Relays, 60);
 8014dcc:	213c      	movs	r1, #60	; 0x3c
 8014dce:	4824      	ldr	r0, [pc, #144]	; (8014e60 <Get_Kyosan_EI_Message+0x420>)
 8014dd0:	f000 fa84 	bl	80152dc <Calc_Kysoan_CRC>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	4b20      	ldr	r3, [pc, #128]	; (8014e5c <Get_Kyosan_EI_Message+0x41c>)
 8014dda:	87da      	strh	r2, [r3, #62]	; 0x3e

#ifdef EI_1
							if((SendThisCardRelays == SET)&&(PrevRelayCRC != Kyosan_SelfRelays.Relay_CRC))
 8014ddc:	4b21      	ldr	r3, [pc, #132]	; (8014e64 <Get_Kyosan_EI_Message+0x424>)
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	f040 809b 	bne.w	8014f1c <Get_Kyosan_EI_Message+0x4dc>
 8014de6:	4b1d      	ldr	r3, [pc, #116]	; (8014e5c <Get_Kyosan_EI_Message+0x41c>)
 8014de8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8014dea:	4b1f      	ldr	r3, [pc, #124]	; (8014e68 <Get_Kyosan_EI_Message+0x428>)
 8014dec:	881b      	ldrh	r3, [r3, #0]
 8014dee:	429a      	cmp	r2, r3
 8014df0:	f000 8094 	beq.w	8014f1c <Get_Kyosan_EI_Message+0x4dc>
							{
								PrevRelayCRC = Kyosan_SelfRelays.Relay_CRC;
 8014df4:	4b19      	ldr	r3, [pc, #100]	; (8014e5c <Get_Kyosan_EI_Message+0x41c>)
 8014df6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8014df8:	4b1b      	ldr	r3, [pc, #108]	; (8014e68 <Get_Kyosan_EI_Message+0x428>)
 8014dfa:	801a      	strh	r2, [r3, #0]
								TransmitCanPkt(EI_PROCESS_DATA);
 8014dfc:	f240 1019 	movw	r0, #281	; 0x119
 8014e00:	f7fb f842 	bl	800fe88 <TransmitCanPkt>
								PrintSignalsKyosan();
 8014e04:	f000 faa6 	bl	8015354 <PrintSignalsKyosan>
 8014e08:	e088      	b.n	8014f1c <Get_Kyosan_EI_Message+0x4dc>
 8014e0a:	bf00      	nop
 8014e0c:	2000f0b6 	.word	0x2000f0b6
 8014e10:	2000f0bc 	.word	0x2000f0bc
 8014e14:	2000f0b8 	.word	0x2000f0b8
 8014e18:	20009d74 	.word	0x20009d74
 8014e1c:	080292a0 	.word	0x080292a0
 8014e20:	2000f3c4 	.word	0x2000f3c4
 8014e24:	80008001 	.word	0x80008001
 8014e28:	80808081 	.word	0x80808081
 8014e2c:	080292d0 	.word	0x080292d0
 8014e30:	40021c00 	.word	0x40021c00
 8014e34:	2000f0b0 	.word	0x2000f0b0
 8014e38:	2000f0b4 	.word	0x2000f0b4
 8014e3c:	20009d7c 	.word	0x20009d7c
 8014e40:	08029300 	.word	0x08029300
 8014e44:	2000f1c0 	.word	0x2000f1c0
 8014e48:	08029310 	.word	0x08029310
 8014e4c:	88888889 	.word	0x88888889
 8014e50:	2000f2c0 	.word	0x2000f2c0
 8014e54:	08029350 	.word	0x08029350
 8014e58:	08029298 	.word	0x08029298
 8014e5c:	20009d90 	.word	0x20009d90
 8014e60:	20009d92 	.word	0x20009d92
 8014e64:	2000f0a5 	.word	0x2000f0a5
 8014e68:	2000f3c0 	.word	0x2000f3c0
						}

					}
					else
					{
						printf("- Ctrl Data|");
 8014e6c:	4888      	ldr	r0, [pc, #544]	; (8015090 <Get_Kyosan_EI_Message+0x650>)
 8014e6e:	f00f fd73 	bl	8024958 <iprintf>
						memcpy(&ControlData_Negative,&Buffer,Cur_Receive_Length);
 8014e72:	4b88      	ldr	r3, [pc, #544]	; (8015094 <Get_Kyosan_EI_Message+0x654>)
 8014e74:	881b      	ldrh	r3, [r3, #0]
 8014e76:	461a      	mov	r2, r3
 8014e78:	4987      	ldr	r1, [pc, #540]	; (8015098 <Get_Kyosan_EI_Message+0x658>)
 8014e7a:	4888      	ldr	r0, [pc, #544]	; (801509c <Get_Kyosan_EI_Message+0x65c>)
 8014e7c:	f00f fc5c 	bl	8024738 <memcpy>
						ControlID = (uint8_t)(~ControlData_Negative[0]);
 8014e80:	4b86      	ldr	r3, [pc, #536]	; (801509c <Get_Kyosan_EI_Message+0x65c>)
 8014e82:	781b      	ldrb	r3, [r3, #0]
 8014e84:	43db      	mvns	r3, r3
 8014e86:	727b      	strb	r3, [r7, #9]

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8014e88:	4b85      	ldr	r3, [pc, #532]	; (80150a0 <Get_Kyosan_EI_Message+0x660>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	091b      	lsrs	r3, r3, #4
 8014e8e:	f003 0301 	and.w	r3, r3, #1
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d027      	beq.n	8014ee6 <Get_Kyosan_EI_Message+0x4a6>
 8014e96:	4b80      	ldr	r3, [pc, #512]	; (8015098 <Get_Kyosan_EI_Message+0x658>)
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	b25b      	sxtb	r3, r3
 8014e9c:	11db      	asrs	r3, r3, #7
 8014e9e:	b25b      	sxtb	r3, r3
 8014ea0:	f003 0301 	and.w	r3, r3, #1
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d01e      	beq.n	8014ee6 <Get_Kyosan_EI_Message+0x4a6>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8014ea8:	487e      	ldr	r0, [pc, #504]	; (80150a4 <Get_Kyosan_EI_Message+0x664>)
 8014eaa:	f00f fdf1 	bl	8024a90 <puts>
							ControlData_Negative[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8014eae:	487e      	ldr	r0, [pc, #504]	; (80150a8 <Get_Kyosan_EI_Message+0x668>)
 8014eb0:	f007 f9fa 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	4b7d      	ldr	r3, [pc, #500]	; (80150ac <Get_Kyosan_EI_Message+0x66c>)
 8014eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8014ebc:	09dc      	lsrs	r4, r3, #7
 8014ebe:	4623      	mov	r3, r4
 8014ec0:	021b      	lsls	r3, r3, #8
 8014ec2:	1b1b      	subs	r3, r3, r4
 8014ec4:	1ad4      	subs	r4, r2, r3
 8014ec6:	4878      	ldr	r0, [pc, #480]	; (80150a8 <Get_Kyosan_EI_Message+0x668>)
 8014ec8:	f007 f9ee 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8014ecc:	4601      	mov	r1, r0
 8014ece:	4b78      	ldr	r3, [pc, #480]	; (80150b0 <Get_Kyosan_EI_Message+0x670>)
 8014ed0:	fba3 2301 	umull	r2, r3, r3, r1
 8014ed4:	08da      	lsrs	r2, r3, #3
 8014ed6:	4613      	mov	r3, r2
 8014ed8:	011b      	lsls	r3, r3, #4
 8014eda:	1a9b      	subs	r3, r3, r2
 8014edc:	1aca      	subs	r2, r1, r3
 8014ede:	1c53      	adds	r3, r2, #1
 8014ee0:	b2e1      	uxtb	r1, r4
 8014ee2:	4a6e      	ldr	r2, [pc, #440]	; (801509c <Get_Kyosan_EI_Message+0x65c>)
 8014ee4:	54d1      	strb	r1, [r2, r3]
						}


						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	82fb      	strh	r3, [r7, #22]
 8014eea:	e011      	b.n	8014f10 <Get_Kyosan_EI_Message+0x4d0>
						{
							if(ControlData_Positive[i] != (uint8_t)(~ControlData_Negative[i]))
 8014eec:	8afb      	ldrh	r3, [r7, #22]
 8014eee:	4a71      	ldr	r2, [pc, #452]	; (80150b4 <Get_Kyosan_EI_Message+0x674>)
 8014ef0:	5cd2      	ldrb	r2, [r2, r3]
 8014ef2:	8afb      	ldrh	r3, [r7, #22]
 8014ef4:	4969      	ldr	r1, [pc, #420]	; (801509c <Get_Kyosan_EI_Message+0x65c>)
 8014ef6:	5ccb      	ldrb	r3, [r1, r3]
 8014ef8:	43db      	mvns	r3, r3
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	429a      	cmp	r2, r3
 8014efe:	d004      	beq.n	8014f0a <Get_Kyosan_EI_Message+0x4ca>
							{
								Pos_NegDataMisMatch = SET;
 8014f00:	2301      	movs	r3, #1
 8014f02:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = NEG_DATA_MISMATCH;
 8014f04:	2302      	movs	r3, #2
 8014f06:	773b      	strb	r3, [r7, #28]
								//								printf("Negative & Positive data not Matching\n");
								//								printf("N:%02X-P:%02X -> %X\n",ControlData_Negative[i],ControlData_Positive[i],(uint8_t)(~ControlData_Negative[i]));
								break;
 8014f08:	e008      	b.n	8014f1c <Get_Kyosan_EI_Message+0x4dc>
						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8014f0a:	8afb      	ldrh	r3, [r7, #22]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	82fb      	strh	r3, [r7, #22]
 8014f10:	8afa      	ldrh	r2, [r7, #22]
 8014f12:	4b60      	ldr	r3, [pc, #384]	; (8015094 <Get_Kyosan_EI_Message+0x654>)
 8014f14:	881b      	ldrh	r3, [r3, #0]
 8014f16:	3b02      	subs	r3, #2
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	dbe7      	blt.n	8014eec <Get_Kyosan_EI_Message+0x4ac>
							//							}
							//							printf("\n");
						}
					}

					if(Pos_NegDataMisMatch == RESET)
 8014f1c:	7f7b      	ldrb	r3, [r7, #29]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d11b      	bne.n	8014f5a <Get_Kyosan_EI_Message+0x51a>
					{
						//						printf("+ & -:DATA:OK\n");
						if(CHECKFLAG(7,Buffer[0]) == RESET)
 8014f22:	4b5d      	ldr	r3, [pc, #372]	; (8015098 <Get_Kyosan_EI_Message+0x658>)
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	b25b      	sxtb	r3, r3
 8014f28:	11db      	asrs	r3, r3, #7
 8014f2a:	b25b      	sxtb	r3, r3
 8014f2c:	f003 0301 	and.w	r3, r3, #1
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d105      	bne.n	8014f40 <Get_Kyosan_EI_Message+0x500>
						{
							KyosanClocks.ControlDataPosRecvCLK = HAL_GetTick();
 8014f34:	f002 fd06 	bl	8017944 <HAL_GetTick>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	4a5f      	ldr	r2, [pc, #380]	; (80150b8 <Get_Kyosan_EI_Message+0x678>)
 8014f3c:	6053      	str	r3, [r2, #4]
 8014f3e:	e004      	b.n	8014f4a <Get_Kyosan_EI_Message+0x50a>
						}
						else
						{
							KyosanClocks.ControlDataNegRecvCLK = HAL_GetTick();
 8014f40:	f002 fd00 	bl	8017944 <HAL_GetTick>
 8014f44:	4603      	mov	r3, r0
 8014f46:	4a5c      	ldr	r2, [pc, #368]	; (80150b8 <Get_Kyosan_EI_Message+0x678>)
 8014f48:	6093      	str	r3, [r2, #8]
						}
						Pos_NegDataMisMatch_Count = RESET;
 8014f4a:	4b5c      	ldr	r3, [pc, #368]	; (80150bc <Get_Kyosan_EI_Message+0x67c>)
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	701a      	strb	r2, [r3, #0]
						TypeofDataMisMatch = RESET;
 8014f50:	2300      	movs	r3, #0
 8014f52:	773b      	strb	r3, [r7, #28]
						Pos_NegDataMisMatch = RESET;
 8014f54:	2300      	movs	r3, #0
 8014f56:	777b      	strb	r3, [r7, #29]
 8014f58:	e092      	b.n	8015080 <Get_Kyosan_EI_Message+0x640>
					}
					else
					{
						++Pos_NegDataMisMatch_Count;
 8014f5a:	4b58      	ldr	r3, [pc, #352]	; (80150bc <Get_Kyosan_EI_Message+0x67c>)
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	4b56      	ldr	r3, [pc, #344]	; (80150bc <Get_Kyosan_EI_Message+0x67c>)
 8014f64:	701a      	strb	r2, [r3, #0]

						if(Pos_NegDataMisMatch_Count == 2)
 8014f66:	4b55      	ldr	r3, [pc, #340]	; (80150bc <Get_Kyosan_EI_Message+0x67c>)
 8014f68:	781b      	ldrb	r3, [r3, #0]
 8014f6a:	2b02      	cmp	r3, #2
 8014f6c:	d161      	bne.n	8015032 <Get_Kyosan_EI_Message+0x5f2>
						{
							switch(TypeofDataMisMatch)
 8014f6e:	7f3b      	ldrb	r3, [r7, #28]
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d002      	beq.n	8014f7a <Get_Kyosan_EI_Message+0x53a>
 8014f74:	2b02      	cmp	r3, #2
 8014f76:	d02e      	beq.n	8014fd6 <Get_Kyosan_EI_Message+0x596>
 8014f78:	e05c      	b.n	8015034 <Get_Kyosan_EI_Message+0x5f4>
							{
							case POS_DATA_MISMATCH:
								printf("P:");
 8014f7a:	4851      	ldr	r0, [pc, #324]	; (80150c0 <Get_Kyosan_EI_Message+0x680>)
 8014f7c:	f00f fcec 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8014f80:	2300      	movs	r3, #0
 8014f82:	82bb      	strh	r3, [r7, #20]
 8014f84:	e009      	b.n	8014f9a <Get_Kyosan_EI_Message+0x55a>
								{
									printf("%02X ",ControlData_Positive[i]);
 8014f86:	8abb      	ldrh	r3, [r7, #20]
 8014f88:	4a4a      	ldr	r2, [pc, #296]	; (80150b4 <Get_Kyosan_EI_Message+0x674>)
 8014f8a:	5cd3      	ldrb	r3, [r2, r3]
 8014f8c:	4619      	mov	r1, r3
 8014f8e:	484d      	ldr	r0, [pc, #308]	; (80150c4 <Get_Kyosan_EI_Message+0x684>)
 8014f90:	f00f fce2 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8014f94:	8abb      	ldrh	r3, [r7, #20]
 8014f96:	3301      	adds	r3, #1
 8014f98:	82bb      	strh	r3, [r7, #20]
 8014f9a:	4b3e      	ldr	r3, [pc, #248]	; (8015094 <Get_Kyosan_EI_Message+0x654>)
 8014f9c:	881b      	ldrh	r3, [r3, #0]
 8014f9e:	8aba      	ldrh	r2, [r7, #20]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d3f0      	bcc.n	8014f86 <Get_Kyosan_EI_Message+0x546>
								}
								printf("\nN:");
 8014fa4:	4848      	ldr	r0, [pc, #288]	; (80150c8 <Get_Kyosan_EI_Message+0x688>)
 8014fa6:	f00f fcd7 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8014faa:	2300      	movs	r3, #0
 8014fac:	827b      	strh	r3, [r7, #18]
 8014fae:	e009      	b.n	8014fc4 <Get_Kyosan_EI_Message+0x584>
								{
									printf("%02X ",ControlData_Negative[i]);
 8014fb0:	8a7b      	ldrh	r3, [r7, #18]
 8014fb2:	4a3a      	ldr	r2, [pc, #232]	; (801509c <Get_Kyosan_EI_Message+0x65c>)
 8014fb4:	5cd3      	ldrb	r3, [r2, r3]
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	4842      	ldr	r0, [pc, #264]	; (80150c4 <Get_Kyosan_EI_Message+0x684>)
 8014fba:	f00f fccd 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8014fbe:	8a7b      	ldrh	r3, [r7, #18]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	827b      	strh	r3, [r7, #18]
 8014fc4:	4b33      	ldr	r3, [pc, #204]	; (8015094 <Get_Kyosan_EI_Message+0x654>)
 8014fc6:	881b      	ldrh	r3, [r3, #0]
 8014fc8:	8a7a      	ldrh	r2, [r7, #18]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d3f0      	bcc.n	8014fb0 <Get_Kyosan_EI_Message+0x570>
								}
								printf("\n");
 8014fce:	200a      	movs	r0, #10
 8014fd0:	f00f fcda 	bl	8024988 <putchar>
								break;
 8014fd4:	e02e      	b.n	8015034 <Get_Kyosan_EI_Message+0x5f4>
							case NEG_DATA_MISMATCH:
								printf("N:");
 8014fd6:	483d      	ldr	r0, [pc, #244]	; (80150cc <Get_Kyosan_EI_Message+0x68c>)
 8014fd8:	f00f fcbe 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8014fdc:	2300      	movs	r3, #0
 8014fde:	823b      	strh	r3, [r7, #16]
 8014fe0:	e009      	b.n	8014ff6 <Get_Kyosan_EI_Message+0x5b6>
								{
									printf("%02X ",ControlData_Negative[i]);
 8014fe2:	8a3b      	ldrh	r3, [r7, #16]
 8014fe4:	4a2d      	ldr	r2, [pc, #180]	; (801509c <Get_Kyosan_EI_Message+0x65c>)
 8014fe6:	5cd3      	ldrb	r3, [r2, r3]
 8014fe8:	4619      	mov	r1, r3
 8014fea:	4836      	ldr	r0, [pc, #216]	; (80150c4 <Get_Kyosan_EI_Message+0x684>)
 8014fec:	f00f fcb4 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8014ff0:	8a3b      	ldrh	r3, [r7, #16]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	823b      	strh	r3, [r7, #16]
 8014ff6:	4b27      	ldr	r3, [pc, #156]	; (8015094 <Get_Kyosan_EI_Message+0x654>)
 8014ff8:	881b      	ldrh	r3, [r3, #0]
 8014ffa:	8a3a      	ldrh	r2, [r7, #16]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d3f0      	bcc.n	8014fe2 <Get_Kyosan_EI_Message+0x5a2>
								}
								printf("\nP:");
 8015000:	4833      	ldr	r0, [pc, #204]	; (80150d0 <Get_Kyosan_EI_Message+0x690>)
 8015002:	f00f fca9 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015006:	2300      	movs	r3, #0
 8015008:	81fb      	strh	r3, [r7, #14]
 801500a:	e009      	b.n	8015020 <Get_Kyosan_EI_Message+0x5e0>
								{
									printf("%02X ",ControlData_Positive[i]);
 801500c:	89fb      	ldrh	r3, [r7, #14]
 801500e:	4a29      	ldr	r2, [pc, #164]	; (80150b4 <Get_Kyosan_EI_Message+0x674>)
 8015010:	5cd3      	ldrb	r3, [r2, r3]
 8015012:	4619      	mov	r1, r3
 8015014:	482b      	ldr	r0, [pc, #172]	; (80150c4 <Get_Kyosan_EI_Message+0x684>)
 8015016:	f00f fc9f 	bl	8024958 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801501a:	89fb      	ldrh	r3, [r7, #14]
 801501c:	3301      	adds	r3, #1
 801501e:	81fb      	strh	r3, [r7, #14]
 8015020:	4b1c      	ldr	r3, [pc, #112]	; (8015094 <Get_Kyosan_EI_Message+0x654>)
 8015022:	881b      	ldrh	r3, [r3, #0]
 8015024:	89fa      	ldrh	r2, [r7, #14]
 8015026:	429a      	cmp	r2, r3
 8015028:	d3f0      	bcc.n	801500c <Get_Kyosan_EI_Message+0x5cc>
								}
								printf("\n");
 801502a:	200a      	movs	r0, #10
 801502c:	f00f fcac 	bl	8024988 <putchar>
								break;
 8015030:	e000      	b.n	8015034 <Get_Kyosan_EI_Message+0x5f4>
							default:
 8015032:	bf00      	nop
								;

							}
						}

						if(Pos_NegDataMisMatch_Count >= EI_data.Kyosan_st.MaxMisMatchCnt)
 8015034:	4b21      	ldr	r3, [pc, #132]	; (80150bc <Get_Kyosan_EI_Message+0x67c>)
 8015036:	781b      	ldrb	r3, [r3, #0]
 8015038:	b29a      	uxth	r2, r3
 801503a:	4b26      	ldr	r3, [pc, #152]	; (80150d4 <Get_Kyosan_EI_Message+0x694>)
 801503c:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8015040:	429a      	cmp	r2, r3
 8015042:	d31d      	bcc.n	8015080 <Get_Kyosan_EI_Message+0x640>
						{
							printf("\n+ & - Data Mismatch count Reached:%u\n",Pos_NegDataMisMatch_Count);
 8015044:	4b1d      	ldr	r3, [pc, #116]	; (80150bc <Get_Kyosan_EI_Message+0x67c>)
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	4619      	mov	r1, r3
 801504a:	4823      	ldr	r0, [pc, #140]	; (80150d8 <Get_Kyosan_EI_Message+0x698>)
 801504c:	f00f fc84 	bl	8024958 <iprintf>
							Pos_NegDataMisMatch_Count = EI_data.Kyosan_st.MaxMisMatchCnt; /* To avoid Overflow */
 8015050:	4b20      	ldr	r3, [pc, #128]	; (80150d4 <Get_Kyosan_EI_Message+0x694>)
 8015052:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8015056:	b2da      	uxtb	r2, r3
 8015058:	4b18      	ldr	r3, [pc, #96]	; (80150bc <Get_Kyosan_EI_Message+0x67c>)
 801505a:	701a      	strb	r2, [r3, #0]
 801505c:	e010      	b.n	8015080 <Get_Kyosan_EI_Message+0x640>
						}
					}
				}
				else
				{
					printf("\n%c Control Data Packet CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 801505e:	4b0e      	ldr	r3, [pc, #56]	; (8015098 <Get_Kyosan_EI_Message+0x658>)
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	b25b      	sxtb	r3, r3
 8015064:	11db      	asrs	r3, r3, #7
 8015066:	b25b      	sxtb	r3, r3
 8015068:	f003 0301 	and.w	r3, r3, #1
 801506c:	2b00      	cmp	r3, #0
 801506e:	d101      	bne.n	8015074 <Get_Kyosan_EI_Message+0x634>
 8015070:	212b      	movs	r1, #43	; 0x2b
 8015072:	e000      	b.n	8015076 <Get_Kyosan_EI_Message+0x636>
 8015074:	212d      	movs	r1, #45	; 0x2d
 8015076:	897a      	ldrh	r2, [r7, #10]
 8015078:	8bfb      	ldrh	r3, [r7, #30]
 801507a:	4818      	ldr	r0, [pc, #96]	; (80150dc <Get_Kyosan_EI_Message+0x69c>)
 801507c:	f00f fc6c 	bl	8024958 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8015080:	4b04      	ldr	r3, [pc, #16]	; (8015094 <Get_Kyosan_EI_Message+0x654>)
 8015082:	2200      	movs	r2, #0
 8015084:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8015086:	4b16      	ldr	r3, [pc, #88]	; (80150e0 <Get_Kyosan_EI_Message+0x6a0>)
 8015088:	2200      	movs	r2, #0
 801508a:	801a      	strh	r2, [r3, #0]
			}
			break;
 801508c:	e0fe      	b.n	801528c <Get_Kyosan_EI_Message+0x84c>
 801508e:	bf00      	nop
 8015090:	08029354 	.word	0x08029354
 8015094:	2000f0b6 	.word	0x2000f0b6
 8015098:	2000f0bc 	.word	0x2000f0bc
 801509c:	2000f2c0 	.word	0x2000f2c0
 80150a0:	20009d74 	.word	0x20009d74
 80150a4:	08029310 	.word	0x08029310
 80150a8:	2000f3c4 	.word	0x2000f3c4
 80150ac:	80808081 	.word	0x80808081
 80150b0:	88888889 	.word	0x88888889
 80150b4:	2000f1c0 	.word	0x2000f1c0
 80150b8:	20009d7c 	.word	0x20009d7c
 80150bc:	2000f3c2 	.word	0x2000f3c2
 80150c0:	08029364 	.word	0x08029364
 80150c4:	08029298 	.word	0x08029298
 80150c8:	08029368 	.word	0x08029368
 80150cc:	0802936c 	.word	0x0802936c
 80150d0:	08029370 	.word	0x08029370
 80150d4:	20000304 	.word	0x20000304
 80150d8:	08029374 	.word	0x08029374
 80150dc:	0802939c 	.word	0x0802939c
 80150e0:	2000f0b8 	.word	0x2000f0b8
		case POLLING_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 80150e4:	4b70      	ldr	r3, [pc, #448]	; (80152a8 <Get_Kyosan_EI_Message+0x868>)
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	1c5a      	adds	r2, r3, #1
 80150ea:	b291      	uxth	r1, r2
 80150ec:	4a6e      	ldr	r2, [pc, #440]	; (80152a8 <Get_Kyosan_EI_Message+0x868>)
 80150ee:	8011      	strh	r1, [r2, #0]
 80150f0:	4619      	mov	r1, r3
 80150f2:	4a6e      	ldr	r2, [pc, #440]	; (80152ac <Get_Kyosan_EI_Message+0x86c>)
 80150f4:	7b7b      	ldrb	r3, [r7, #13]
 80150f6:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 80150f8:	4b6b      	ldr	r3, [pc, #428]	; (80152a8 <Get_Kyosan_EI_Message+0x868>)
 80150fa:	881a      	ldrh	r2, [r3, #0]
 80150fc:	4b6c      	ldr	r3, [pc, #432]	; (80152b0 <Get_Kyosan_EI_Message+0x870>)
 80150fe:	881b      	ldrh	r3, [r3, #0]
 8015100:	429a      	cmp	r2, r3
 8015102:	f040 80c3 	bne.w	801528c <Get_Kyosan_EI_Message+0x84c>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 8015106:	4b68      	ldr	r3, [pc, #416]	; (80152a8 <Get_Kyosan_EI_Message+0x868>)
 8015108:	881b      	ldrh	r3, [r3, #0]
 801510a:	3b02      	subs	r3, #2
 801510c:	4619      	mov	r1, r3
 801510e:	4867      	ldr	r0, [pc, #412]	; (80152ac <Get_Kyosan_EI_Message+0x86c>)
 8015110:	f000 f8e4 	bl	80152dc <Calc_Kysoan_CRC>
 8015114:	4603      	mov	r3, r0
 8015116:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8015118:	4b63      	ldr	r3, [pc, #396]	; (80152a8 <Get_Kyosan_EI_Message+0x868>)
 801511a:	881b      	ldrh	r3, [r3, #0]
 801511c:	3b02      	subs	r3, #2
 801511e:	4a63      	ldr	r2, [pc, #396]	; (80152ac <Get_Kyosan_EI_Message+0x86c>)
 8015120:	4413      	add	r3, r2
 8015122:	461a      	mov	r2, r3
 8015124:	2110      	movs	r1, #16
 8015126:	2000      	movs	r0, #0
 8015128:	f7eb fa74 	bl	8000614 <ExtractBits>
 801512c:	4603      	mov	r3, r0
 801512e:	83fb      	strh	r3, [r7, #30]

				if( (  (CHECKFLAG(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8015130:	4b60      	ldr	r3, [pc, #384]	; (80152b4 <Get_Kyosan_EI_Message+0x874>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	089b      	lsrs	r3, r3, #2
 8015136:	f003 0301 	and.w	r3, r3, #1
 801513a:	2b00      	cmp	r3, #0
 801513c:	d02d      	beq.n	801519a <Get_Kyosan_EI_Message+0x75a>
 801513e:	4b5b      	ldr	r3, [pc, #364]	; (80152ac <Get_Kyosan_EI_Message+0x86c>)
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	b25b      	sxtb	r3, r3
 8015144:	11db      	asrs	r3, r3, #7
 8015146:	b25b      	sxtb	r3, r3
 8015148:	f003 0301 	and.w	r3, r3, #1
 801514c:	2b00      	cmp	r3, #0
 801514e:	d124      	bne.n	801519a <Get_Kyosan_EI_Message+0x75a>
				{
					printf("\nInjecting Positive Polling Data CRC Failure\n");
 8015150:	4859      	ldr	r0, [pc, #356]	; (80152b8 <Get_Kyosan_EI_Message+0x878>)
 8015152:	f00f fc9d 	bl	8024a90 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8015156:	4859      	ldr	r0, [pc, #356]	; (80152bc <Get_Kyosan_EI_Message+0x87c>)
 8015158:	f007 f8a6 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 801515c:	4601      	mov	r1, r0
 801515e:	4b58      	ldr	r3, [pc, #352]	; (80152c0 <Get_Kyosan_EI_Message+0x880>)
 8015160:	fba3 2301 	umull	r2, r3, r3, r1
 8015164:	0bda      	lsrs	r2, r3, #15
 8015166:	4613      	mov	r3, r2
 8015168:	041b      	lsls	r3, r3, #16
 801516a:	1a9b      	subs	r3, r3, r2
 801516c:	1aca      	subs	r2, r1, r3
 801516e:	4613      	mov	r3, r2
 8015170:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8015172:	8bfa      	ldrh	r2, [r7, #30]
 8015174:	897b      	ldrh	r3, [r7, #10]
 8015176:	429a      	cmp	r2, r3
 8015178:	d10f      	bne.n	801519a <Get_Kyosan_EI_Message+0x75a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 801517a:	4850      	ldr	r0, [pc, #320]	; (80152bc <Get_Kyosan_EI_Message+0x87c>)
 801517c:	f007 f894 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 8015180:	4601      	mov	r1, r0
 8015182:	4b50      	ldr	r3, [pc, #320]	; (80152c4 <Get_Kyosan_EI_Message+0x884>)
 8015184:	fba3 2301 	umull	r2, r3, r3, r1
 8015188:	09da      	lsrs	r2, r3, #7
 801518a:	4613      	mov	r3, r2
 801518c:	021b      	lsls	r3, r3, #8
 801518e:	1a9b      	subs	r3, r3, r2
 8015190:	1aca      	subs	r2, r1, r3
 8015192:	b293      	uxth	r3, r2
 8015194:	8bfa      	ldrh	r2, [r7, #30]
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 801519a:	4b46      	ldr	r3, [pc, #280]	; (80152b4 <Get_Kyosan_EI_Message+0x874>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	08db      	lsrs	r3, r3, #3
 80151a0:	f003 0301 	and.w	r3, r3, #1
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d02d      	beq.n	8015204 <Get_Kyosan_EI_Message+0x7c4>
 80151a8:	4b40      	ldr	r3, [pc, #256]	; (80152ac <Get_Kyosan_EI_Message+0x86c>)
 80151aa:	781b      	ldrb	r3, [r3, #0]
 80151ac:	b25b      	sxtb	r3, r3
 80151ae:	11db      	asrs	r3, r3, #7
 80151b0:	b25b      	sxtb	r3, r3
 80151b2:	f003 0301 	and.w	r3, r3, #1
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d024      	beq.n	8015204 <Get_Kyosan_EI_Message+0x7c4>
				{
					printf("\nInjecting Negative Polling Data CRC Failure\n");
 80151ba:	4843      	ldr	r0, [pc, #268]	; (80152c8 <Get_Kyosan_EI_Message+0x888>)
 80151bc:	f00f fc68 	bl	8024a90 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 80151c0:	483e      	ldr	r0, [pc, #248]	; (80152bc <Get_Kyosan_EI_Message+0x87c>)
 80151c2:	f007 f871 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 80151c6:	4601      	mov	r1, r0
 80151c8:	4b3d      	ldr	r3, [pc, #244]	; (80152c0 <Get_Kyosan_EI_Message+0x880>)
 80151ca:	fba3 2301 	umull	r2, r3, r3, r1
 80151ce:	0bda      	lsrs	r2, r3, #15
 80151d0:	4613      	mov	r3, r2
 80151d2:	041b      	lsls	r3, r3, #16
 80151d4:	1a9b      	subs	r3, r3, r2
 80151d6:	1aca      	subs	r2, r1, r3
 80151d8:	4613      	mov	r3, r2
 80151da:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 80151dc:	8bfa      	ldrh	r2, [r7, #30]
 80151de:	897b      	ldrh	r3, [r7, #10]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d10f      	bne.n	8015204 <Get_Kyosan_EI_Message+0x7c4>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 80151e4:	4835      	ldr	r0, [pc, #212]	; (80152bc <Get_Kyosan_EI_Message+0x87c>)
 80151e6:	f007 f85f 	bl	801c2a8 <HAL_RNG_GetRandomNumber>
 80151ea:	4601      	mov	r1, r0
 80151ec:	4b35      	ldr	r3, [pc, #212]	; (80152c4 <Get_Kyosan_EI_Message+0x884>)
 80151ee:	fba3 2301 	umull	r2, r3, r3, r1
 80151f2:	09da      	lsrs	r2, r3, #7
 80151f4:	4613      	mov	r3, r2
 80151f6:	021b      	lsls	r3, r3, #8
 80151f8:	1a9b      	subs	r3, r3, r2
 80151fa:	1aca      	subs	r2, r1, r3
 80151fc:	b293      	uxth	r3, r2
 80151fe:	8bfa      	ldrh	r2, [r7, #30]
 8015200:	1ad3      	subs	r3, r2, r3
 8015202:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(C_CRC == R_CRC)
 8015204:	897a      	ldrh	r2, [r7, #10]
 8015206:	8bfb      	ldrh	r3, [r7, #30]
 8015208:	429a      	cmp	r2, r3
 801520a:	d11e      	bne.n	801524a <Get_Kyosan_EI_Message+0x80a>
				{
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 801520c:	f002 fb9a 	bl	8017944 <HAL_GetTick>
 8015210:	4603      	mov	r3, r0
 8015212:	4a2e      	ldr	r2, [pc, #184]	; (80152cc <Get_Kyosan_EI_Message+0x88c>)
 8015214:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8015216:	f44f 7180 	mov.w	r1, #256	; 0x100
 801521a:	482d      	ldr	r0, [pc, #180]	; (80152d0 <Get_Kyosan_EI_Message+0x890>)
 801521c:	f005 f87b 	bl	801a316 <HAL_GPIO_TogglePin>

					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8015220:	4b22      	ldr	r3, [pc, #136]	; (80152ac <Get_Kyosan_EI_Message+0x86c>)
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	b25b      	sxtb	r3, r3
 8015226:	11db      	asrs	r3, r3, #7
 8015228:	b25b      	sxtb	r3, r3
 801522a:	f003 0301 	and.w	r3, r3, #1
 801522e:	2b00      	cmp	r3, #0
 8015230:	d105      	bne.n	801523e <Get_Kyosan_EI_Message+0x7fe>
					{
						KyosanClocks.PollingDataPosRecvCLK = HAL_GetTick();
 8015232:	f002 fb87 	bl	8017944 <HAL_GetTick>
 8015236:	4603      	mov	r3, r0
 8015238:	4a24      	ldr	r2, [pc, #144]	; (80152cc <Get_Kyosan_EI_Message+0x88c>)
 801523a:	60d3      	str	r3, [r2, #12]
 801523c:	e01c      	b.n	8015278 <Get_Kyosan_EI_Message+0x838>
					}
					else
					{
						KyosanClocks.PollingDataNegRecvCLK = HAL_GetTick();
 801523e:	f002 fb81 	bl	8017944 <HAL_GetTick>
 8015242:	4603      	mov	r3, r0
 8015244:	4a21      	ldr	r2, [pc, #132]	; (80152cc <Get_Kyosan_EI_Message+0x88c>)
 8015246:	6113      	str	r3, [r2, #16]
 8015248:	e016      	b.n	8015278 <Get_Kyosan_EI_Message+0x838>
					}
					//CRC_FailCnt = RESET;
				}
				else
				{
					printf("Polling Data CRC Failed\nC:%04x-R:%04x\n",C_CRC,R_CRC);
 801524a:	897b      	ldrh	r3, [r7, #10]
 801524c:	8bfa      	ldrh	r2, [r7, #30]
 801524e:	4619      	mov	r1, r3
 8015250:	4820      	ldr	r0, [pc, #128]	; (80152d4 <Get_Kyosan_EI_Message+0x894>)
 8015252:	f00f fb81 	bl	8024958 <iprintf>
					printf("\n%c Polling Data CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8015256:	4b15      	ldr	r3, [pc, #84]	; (80152ac <Get_Kyosan_EI_Message+0x86c>)
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	b25b      	sxtb	r3, r3
 801525c:	11db      	asrs	r3, r3, #7
 801525e:	b25b      	sxtb	r3, r3
 8015260:	f003 0301 	and.w	r3, r3, #1
 8015264:	2b00      	cmp	r3, #0
 8015266:	d101      	bne.n	801526c <Get_Kyosan_EI_Message+0x82c>
 8015268:	212b      	movs	r1, #43	; 0x2b
 801526a:	e000      	b.n	801526e <Get_Kyosan_EI_Message+0x82e>
 801526c:	212d      	movs	r1, #45	; 0x2d
 801526e:	897a      	ldrh	r2, [r7, #10]
 8015270:	8bfb      	ldrh	r3, [r7, #30]
 8015272:	4819      	ldr	r0, [pc, #100]	; (80152d8 <Get_Kyosan_EI_Message+0x898>)
 8015274:	f00f fb70 	bl	8024958 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8015278:	4b0b      	ldr	r3, [pc, #44]	; (80152a8 <Get_Kyosan_EI_Message+0x868>)
 801527a:	2200      	movs	r2, #0
 801527c:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 801527e:	4b0c      	ldr	r3, [pc, #48]	; (80152b0 <Get_Kyosan_EI_Message+0x870>)
 8015280:	2200      	movs	r2, #0
 8015282:	801a      	strh	r2, [r3, #0]
			}
			break;
 8015284:	e002      	b.n	801528c <Get_Kyosan_EI_Message+0x84c>
		default:
			Cur_Receive_Length = RESET;
 8015286:	4b08      	ldr	r3, [pc, #32]	; (80152a8 <Get_Kyosan_EI_Message+0x868>)
 8015288:	2200      	movs	r2, #0
 801528a:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(ComPort))
 801528c:	79fb      	ldrb	r3, [r7, #7]
 801528e:	4618      	mov	r0, r3
 8015290:	f001 fff0 	bl	8017274 <Com_DataReady>
 8015294:	4603      	mov	r3, r0
 8015296:	2b00      	cmp	r3, #0
 8015298:	f47f abf8 	bne.w	8014a8c <Get_Kyosan_EI_Message+0x4c>

		}
	}
	UNUSED(ControlID);
}
 801529c:	bf00      	nop
 801529e:	bf00      	nop
 80152a0:	3724      	adds	r7, #36	; 0x24
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152a6:	bf00      	nop
 80152a8:	2000f0b6 	.word	0x2000f0b6
 80152ac:	2000f0bc 	.word	0x2000f0bc
 80152b0:	2000f0b8 	.word	0x2000f0b8
 80152b4:	20009d74 	.word	0x20009d74
 80152b8:	080293d0 	.word	0x080293d0
 80152bc:	2000f3c4 	.word	0x2000f3c4
 80152c0:	80008001 	.word	0x80008001
 80152c4:	80808081 	.word	0x80808081
 80152c8:	08029400 	.word	0x08029400
 80152cc:	20009d7c 	.word	0x20009d7c
 80152d0:	40021c00 	.word	0x40021c00
 80152d4:	08029430 	.word	0x08029430
 80152d8:	08029458 	.word	0x08029458

080152dc <Calc_Kysoan_CRC>:


uint16_t Calc_Kysoan_CRC(uint8_t *data, size_t length)
{
 80152dc:	b480      	push	{r7}
 80152de:	b087      	sub	sp, #28
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
	uint16_t crc = KYOSAN_CRC_INIT_VAL;
 80152e6:	2300      	movs	r3, #0
 80152e8:	82fb      	strh	r3, [r7, #22]

	for (size_t i = 0; i < length; i++)
 80152ea:	2300      	movs	r3, #0
 80152ec:	613b      	str	r3, [r7, #16]
 80152ee:	e026      	b.n	801533e <Calc_Kysoan_CRC+0x62>
	{
		crc ^= (uint16_t)data[i] << 8; // XOR with next byte shifted to left
 80152f0:	687a      	ldr	r2, [r7, #4]
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	4413      	add	r3, r2
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	021b      	lsls	r3, r3, #8
 80152fa:	b21a      	sxth	r2, r3
 80152fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015300:	4053      	eors	r3, r2
 8015302:	b21b      	sxth	r3, r3
 8015304:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8015306:	2300      	movs	r3, #0
 8015308:	60fb      	str	r3, [r7, #12]
 801530a:	e012      	b.n	8015332 <Calc_Kysoan_CRC+0x56>
		{
			if (crc & 0x8000)
 801530c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015310:	2b00      	cmp	r3, #0
 8015312:	da08      	bge.n	8015326 <Calc_Kysoan_CRC+0x4a>
			{
				crc = (crc << 1) ^ KYOSAN_CRC_POLYNOMIAL;
 8015314:	8afb      	ldrh	r3, [r7, #22]
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	b21a      	sxth	r2, r3
 801531a:	f241 0321 	movw	r3, #4129	; 0x1021
 801531e:	4053      	eors	r3, r2
 8015320:	b21b      	sxth	r3, r3
 8015322:	82fb      	strh	r3, [r7, #22]
 8015324:	e002      	b.n	801532c <Calc_Kysoan_CRC+0x50>
			}
			else
			{
				crc <<= 1;
 8015326:	8afb      	ldrh	r3, [r7, #22]
 8015328:	005b      	lsls	r3, r3, #1
 801532a:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	3301      	adds	r3, #1
 8015330:	60fb      	str	r3, [r7, #12]
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b07      	cmp	r3, #7
 8015336:	dde9      	ble.n	801530c <Calc_Kysoan_CRC+0x30>
	for (size_t i = 0; i < length; i++)
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	3301      	adds	r3, #1
 801533c:	613b      	str	r3, [r7, #16]
 801533e:	693a      	ldr	r2, [r7, #16]
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	429a      	cmp	r2, r3
 8015344:	d3d4      	bcc.n	80152f0 <Calc_Kysoan_CRC+0x14>
			}
		}
	}
	return crc;
 8015346:	8afb      	ldrh	r3, [r7, #22]
}
 8015348:	4618      	mov	r0, r3
 801534a:	371c      	adds	r7, #28
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <PrintSignalsKyosan>:

}


void PrintSignalsKyosan(void)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
	//	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
	//	static uint8_t PrevRelays[1024] = {0,};
	uint8_t EnablePrint = 0;
 801535a:	2300      	movs	r3, #0
 801535c:	717b      	strb	r3, [r7, #5]


	//if(memcmp(&PrevRelays,&vEI_Transver_EI_To_MIE.Inputs,(EI_data.Hitachi_st.PeersCnt*MAX_OUTPUTS_PER_PEER))!= 0)
	{
		EnablePrint = 1;
 801535e:	2301      	movs	r3, #1
 8015360:	717b      	strb	r3, [r7, #5]
	}

	if(EnablePrint == 1)
 8015362:	797b      	ldrb	r3, [r7, #5]
 8015364:	2b01      	cmp	r3, #1
 8015366:	d149      	bne.n	80153fc <PrintSignalsKyosan+0xa8>
	{
		Get_time();
 8015368:	f7f6 fb60 	bl	800ba2c <Get_time>
		printf("Time:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 801536c:	4b25      	ldr	r3, [pc, #148]	; (8015404 <PrintSignalsKyosan+0xb0>)
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	4619      	mov	r1, r3
 8015372:	4b24      	ldr	r3, [pc, #144]	; (8015404 <PrintSignalsKyosan+0xb0>)
 8015374:	785b      	ldrb	r3, [r3, #1]
 8015376:	461a      	mov	r2, r3
 8015378:	4b22      	ldr	r3, [pc, #136]	; (8015404 <PrintSignalsKyosan+0xb0>)
 801537a:	789b      	ldrb	r3, [r3, #2]
 801537c:	4822      	ldr	r0, [pc, #136]	; (8015408 <PrintSignalsKyosan+0xb4>)
 801537e:	f00f faeb 	bl	8024958 <iprintf>
		for(uint16_t Traverser = 0;Traverser< 64;++Traverser)
 8015382:	2300      	movs	r3, #0
 8015384:	80fb      	strh	r3, [r7, #6]
 8015386:	e036      	b.n	80153f6 <PrintSignalsKyosan+0xa2>
		{

			if(GETPIN_Kyosan(Traverser+1) > 0)
 8015388:	88fb      	ldrh	r3, [r7, #6]
 801538a:	2b00      	cmp	r3, #0
 801538c:	da00      	bge.n	8015390 <PrintSignalsKyosan+0x3c>
 801538e:	3307      	adds	r3, #7
 8015390:	10db      	asrs	r3, r3, #3
 8015392:	461a      	mov	r2, r3
 8015394:	4b1d      	ldr	r3, [pc, #116]	; (801540c <PrintSignalsKyosan+0xb8>)
 8015396:	4413      	add	r3, r2
 8015398:	789b      	ldrb	r3, [r3, #2]
 801539a:	4619      	mov	r1, r3
 801539c:	88fb      	ldrh	r3, [r7, #6]
 801539e:	f003 0307 	and.w	r3, r3, #7
 80153a2:	2201      	movs	r2, #1
 80153a4:	fa02 f303 	lsl.w	r3, r2, r3
 80153a8:	400b      	ands	r3, r1
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	dd0a      	ble.n	80153c4 <PrintSignalsKyosan+0x70>
			{
				printf("%15s:PICKUP   ",SignalsKyosan[Traverser]);
 80153ae:	88fb      	ldrh	r3, [r7, #6]
 80153b0:	2264      	movs	r2, #100	; 0x64
 80153b2:	fb02 f303 	mul.w	r3, r2, r3
 80153b6:	4a16      	ldr	r2, [pc, #88]	; (8015410 <PrintSignalsKyosan+0xbc>)
 80153b8:	4413      	add	r3, r2
 80153ba:	4619      	mov	r1, r3
 80153bc:	4815      	ldr	r0, [pc, #84]	; (8015414 <PrintSignalsKyosan+0xc0>)
 80153be:	f00f facb 	bl	8024958 <iprintf>
 80153c2:	e009      	b.n	80153d8 <PrintSignalsKyosan+0x84>
			}
			else
			{
				printf("%15s:DROP      ",SignalsKyosan[Traverser]);
 80153c4:	88fb      	ldrh	r3, [r7, #6]
 80153c6:	2264      	movs	r2, #100	; 0x64
 80153c8:	fb02 f303 	mul.w	r3, r2, r3
 80153cc:	4a10      	ldr	r2, [pc, #64]	; (8015410 <PrintSignalsKyosan+0xbc>)
 80153ce:	4413      	add	r3, r2
 80153d0:	4619      	mov	r1, r3
 80153d2:	4811      	ldr	r0, [pc, #68]	; (8015418 <PrintSignalsKyosan+0xc4>)
 80153d4:	f00f fac0 	bl	8024958 <iprintf>
			}

			if( (Traverser >0) &&(Traverser%4) == 0)
 80153d8:	88fb      	ldrh	r3, [r7, #6]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d008      	beq.n	80153f0 <PrintSignalsKyosan+0x9c>
 80153de:	88fb      	ldrh	r3, [r7, #6]
 80153e0:	f003 0303 	and.w	r3, r3, #3
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d102      	bne.n	80153f0 <PrintSignalsKyosan+0x9c>
			{
				printf("\n");
 80153ea:	200a      	movs	r0, #10
 80153ec:	f00f facc 	bl	8024988 <putchar>
		for(uint16_t Traverser = 0;Traverser< 64;++Traverser)
 80153f0:	88fb      	ldrh	r3, [r7, #6]
 80153f2:	3301      	adds	r3, #1
 80153f4:	80fb      	strh	r3, [r7, #6]
 80153f6:	88fb      	ldrh	r3, [r7, #6]
 80153f8:	2b3f      	cmp	r3, #63	; 0x3f
 80153fa:	d9c5      	bls.n	8015388 <PrintSignalsKyosan+0x34>
			}
		}
	}
}
 80153fc:	bf00      	nop
 80153fe:	3708      	adds	r7, #8
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}
 8015404:	200028dc 	.word	0x200028dc
 8015408:	080296b8 	.word	0x080296b8
 801540c:	20009e50 	.word	0x20009e50
 8015410:	20009e90 	.word	0x20009e90
 8015414:	080296d0 	.word	0x080296d0
 8015418:	080296e0 	.word	0x080296e0

0801541c <Check_forKyosanCMD>:


void Check_forKyosanCMD(void)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b09a      	sub	sp, #104	; 0x68
 8015420:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8015422:	2300      	movs	r3, #0
 8015424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8015428:	2300      	movs	r3, #0
 801542a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 801542e:	2300      	movs	r3, #0
 8015430:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t Buffer[100] = {0,};
 8015434:	2300      	movs	r3, #0
 8015436:	603b      	str	r3, [r7, #0]
 8015438:	1d3b      	adds	r3, r7, #4
 801543a:	2260      	movs	r2, #96	; 0x60
 801543c:	2100      	movs	r1, #0
 801543e:	4618      	mov	r0, r3
 8015440:	f00f f9a2 	bl	8024788 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8015444:	4b90      	ldr	r3, [pc, #576]	; (8015688 <Check_forKyosanCMD+0x26c>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	4618      	mov	r0, r3
 801544a:	f7f9 ff69 	bl	800f320 <HAL_Elaps_Ticks>
 801544e:	4603      	mov	r3, r0
 8015450:	2b09      	cmp	r3, #9
 8015452:	f240 8114 	bls.w	801567e <Check_forKyosanCMD+0x262>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8015456:	e010      	b.n	801547a <Check_forKyosanCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8015458:	2000      	movs	r0, #0
 801545a:	f001 ff4b 	bl	80172f4 <Com_Get_Byte>
 801545e:	4603      	mov	r3, r0
 8015460:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			Buffer[Index++] = Byte;
 8015464:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015468:	1c5a      	adds	r2, r3, #1
 801546a:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 801546e:	3368      	adds	r3, #104	; 0x68
 8015470:	443b      	add	r3, r7
 8015472:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8015476:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 801547a:	2000      	movs	r0, #0
 801547c:	f001 fefa 	bl	8017274 <Com_DataReady>
 8015480:	4603      	mov	r3, r0
 8015482:	2b00      	cmp	r3, #0
 8015484:	d1e8      	bne.n	8015458 <Check_forKyosanCMD+0x3c>
		}
		if(Index>0)
 8015486:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801548a:	2b00      	cmp	r3, #0
 801548c:	f000 80ee 	beq.w	801566c <Check_forKyosanCMD+0x250>
		{
			Buffer[Index] = 0;
 8015490:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015494:	3368      	adds	r3, #104	; 0x68
 8015496:	443b      	add	r3, r7
 8015498:	2200      	movs	r2, #0
 801549a:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 801549e:	463b      	mov	r3, r7
 80154a0:	4619      	mov	r1, r3
 80154a2:	487a      	ldr	r0, [pc, #488]	; (801568c <Check_forKyosanCMD+0x270>)
 80154a4:	f00f fa58 	bl	8024958 <iprintf>
			switch(Is_KyosanCommand_Valid(Buffer,Index))
 80154a8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80154ac:	463b      	mov	r3, r7
 80154ae:	4611      	mov	r1, r2
 80154b0:	4618      	mov	r0, r3
 80154b2:	f000 fa25 	bl	8015900 <Is_KyosanCommand_Valid>
 80154b6:	4603      	mov	r3, r0
 80154b8:	2b07      	cmp	r3, #7
 80154ba:	f200 80bb 	bhi.w	8015634 <Check_forKyosanCMD+0x218>
 80154be:	a201      	add	r2, pc, #4	; (adr r2, 80154c4 <Check_forKyosanCMD+0xa8>)
 80154c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154c4:	080154e5 	.word	0x080154e5
 80154c8:	080154f3 	.word	0x080154f3
 80154cc:	08015557 	.word	0x08015557
 80154d0:	08015579 	.word	0x08015579
 80154d4:	080155a1 	.word	0x080155a1
 80154d8:	080155c9 	.word	0x080155c9
 80154dc:	080155f1 	.word	0x080155f1
 80154e0:	08015619 	.word	0x08015619
			{
			case ZERO:
				Dats_Request_Flag = 1;
 80154e4:	4b6a      	ldr	r3, [pc, #424]	; (8015690 <Check_forKyosanCMD+0x274>)
 80154e6:	2201      	movs	r2, #1
 80154e8:	701a      	strb	r2, [r3, #0]
				printf("Please Load EIPC Dats\n");
 80154ea:	486a      	ldr	r0, [pc, #424]	; (8015694 <Check_forKyosanCMD+0x278>)
 80154ec:	f00f fad0 	bl	8024a90 <puts>
				break;
 80154f0:	e0bc      	b.n	801566c <Check_forKyosanCMD+0x250>
			case ONE:
				printf("Received \"%s\":%u\n",KyosanCommands_List[ONE],(Buffer[Index-1])-'0');
 80154f2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80154f6:	3b01      	subs	r3, #1
 80154f8:	3368      	adds	r3, #104	; 0x68
 80154fa:	443b      	add	r3, r7
 80154fc:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8015500:	3b30      	subs	r3, #48	; 0x30
 8015502:	461a      	mov	r2, r3
 8015504:	4964      	ldr	r1, [pc, #400]	; (8015698 <Check_forKyosanCMD+0x27c>)
 8015506:	4865      	ldr	r0, [pc, #404]	; (801569c <Check_forKyosanCMD+0x280>)
 8015508:	f00f fa26 	bl	8024958 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 801550c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015510:	3b01      	subs	r3, #1
 8015512:	3368      	adds	r3, #104	; 0x68
 8015514:	443b      	add	r3, r7
 8015516:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 801551a:	2b2f      	cmp	r3, #47	; 0x2f
 801551c:	d914      	bls.n	8015548 <Check_forKyosanCMD+0x12c>
 801551e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015522:	3b01      	subs	r3, #1
 8015524:	3368      	adds	r3, #104	; 0x68
 8015526:	443b      	add	r3, r7
 8015528:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 801552c:	2b31      	cmp	r3, #49	; 0x31
 801552e:	d80b      	bhi.n	8015548 <Check_forKyosanCMD+0x12c>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8015530:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015534:	3b01      	subs	r3, #1
 8015536:	3368      	adds	r3, #104	; 0x68
 8015538:	443b      	add	r3, r7
 801553a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 801553e:	3b30      	subs	r3, #48	; 0x30
 8015540:	b2da      	uxtb	r2, r3
 8015542:	4b57      	ldr	r3, [pc, #348]	; (80156a0 <Check_forKyosanCMD+0x284>)
 8015544:	701a      	strb	r2, [r3, #0]
 8015546:	e002      	b.n	801554e <Check_forKyosanCMD+0x132>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8015548:	4856      	ldr	r0, [pc, #344]	; (80156a4 <Check_forKyosanCMD+0x288>)
 801554a:	f00f faa1 	bl	8024a90 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 801554e:	2301      	movs	r3, #1
 8015550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015554:	e08a      	b.n	801566c <Check_forKyosanCMD+0x250>

			case TWO:
				printf("Received %s\n",KyosanCommands_List[TWO]);
 8015556:	4954      	ldr	r1, [pc, #336]	; (80156a8 <Check_forKyosanCMD+0x28c>)
 8015558:	4854      	ldr	r0, [pc, #336]	; (80156ac <Check_forKyosanCMD+0x290>)
 801555a:	f00f f9fd 	bl	8024958 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_POS\n");
 801555e:	4854      	ldr	r0, [pc, #336]	; (80156b0 <Check_forKyosanCMD+0x294>)
 8015560:	f00f fa96 	bl	8024a90 <puts>
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8015564:	4b53      	ldr	r3, [pc, #332]	; (80156b4 <Check_forKyosanCMD+0x298>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f043 0301 	orr.w	r3, r3, #1
 801556c:	4a51      	ldr	r2, [pc, #324]	; (80156b4 <Check_forKyosanCMD+0x298>)
 801556e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015570:	2301      	movs	r3, #1
 8015572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015576:	e079      	b.n	801566c <Check_forKyosanCMD+0x250>

			case THREE:
				printf("Received %s\n",KyosanCommands_List[THREE]);
 8015578:	494f      	ldr	r1, [pc, #316]	; (80156b8 <Check_forKyosanCMD+0x29c>)
 801557a:	484c      	ldr	r0, [pc, #304]	; (80156ac <Check_forKyosanCMD+0x290>)
 801557c:	f00f f9ec 	bl	8024958 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_NEG\n");
 8015580:	484e      	ldr	r0, [pc, #312]	; (80156bc <Check_forKyosanCMD+0x2a0>)
 8015582:	f00f fa85 	bl	8024a90 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8015586:	4b4b      	ldr	r3, [pc, #300]	; (80156b4 <Check_forKyosanCMD+0x298>)
 8015588:	2200      	movs	r2, #0
 801558a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 801558c:	4b49      	ldr	r3, [pc, #292]	; (80156b4 <Check_forKyosanCMD+0x298>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	f043 0302 	orr.w	r3, r3, #2
 8015594:	4a47      	ldr	r2, [pc, #284]	; (80156b4 <Check_forKyosanCMD+0x298>)
 8015596:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015598:	2301      	movs	r3, #1
 801559a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801559e:	e065      	b.n	801566c <Check_forKyosanCMD+0x250>

			case FOUR:
				printf("Received %s\n",KyosanCommands_List[FOUR]);
 80155a0:	4947      	ldr	r1, [pc, #284]	; (80156c0 <Check_forKyosanCMD+0x2a4>)
 80155a2:	4842      	ldr	r0, [pc, #264]	; (80156ac <Check_forKyosanCMD+0x290>)
 80155a4:	f00f f9d8 	bl	8024958 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_POS\n");
 80155a8:	4846      	ldr	r0, [pc, #280]	; (80156c4 <Check_forKyosanCMD+0x2a8>)
 80155aa:	f00f fa71 	bl	8024a90 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80155ae:	4b41      	ldr	r3, [pc, #260]	; (80156b4 <Check_forKyosanCMD+0x298>)
 80155b0:	2200      	movs	r2, #0
 80155b2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80155b4:	4b3f      	ldr	r3, [pc, #252]	; (80156b4 <Check_forKyosanCMD+0x298>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f043 0304 	orr.w	r3, r3, #4
 80155bc:	4a3d      	ldr	r2, [pc, #244]	; (80156b4 <Check_forKyosanCMD+0x298>)
 80155be:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80155c0:	2301      	movs	r3, #1
 80155c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80155c6:	e051      	b.n	801566c <Check_forKyosanCMD+0x250>

			case FIVE:
				printf("Received %s\n",KyosanCommands_List[FIVE]);
 80155c8:	493f      	ldr	r1, [pc, #252]	; (80156c8 <Check_forKyosanCMD+0x2ac>)
 80155ca:	4838      	ldr	r0, [pc, #224]	; (80156ac <Check_forKyosanCMD+0x290>)
 80155cc:	f00f f9c4 	bl	8024958 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_NEG\n");
 80155d0:	483e      	ldr	r0, [pc, #248]	; (80156cc <Check_forKyosanCMD+0x2b0>)
 80155d2:	f00f fa5d 	bl	8024a90 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80155d6:	4b37      	ldr	r3, [pc, #220]	; (80156b4 <Check_forKyosanCMD+0x298>)
 80155d8:	2200      	movs	r2, #0
 80155da:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80155dc:	4b35      	ldr	r3, [pc, #212]	; (80156b4 <Check_forKyosanCMD+0x298>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	f043 0308 	orr.w	r3, r3, #8
 80155e4:	4a33      	ldr	r2, [pc, #204]	; (80156b4 <Check_forKyosanCMD+0x298>)
 80155e6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80155e8:	2301      	movs	r3, #1
 80155ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80155ee:	e03d      	b.n	801566c <Check_forKyosanCMD+0x250>

			case SIX:
				printf("Received %s\n",KyosanCommands_List[SIX]);
 80155f0:	4937      	ldr	r1, [pc, #220]	; (80156d0 <Check_forKyosanCMD+0x2b4>)
 80155f2:	482e      	ldr	r0, [pc, #184]	; (80156ac <Check_forKyosanCMD+0x290>)
 80155f4:	f00f f9b0 	bl	8024958 <iprintf>
				printf("COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA\n");
 80155f8:	4836      	ldr	r0, [pc, #216]	; (80156d4 <Check_forKyosanCMD+0x2b8>)
 80155fa:	f00f fa49 	bl	8024a90 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80155fe:	4b2d      	ldr	r3, [pc, #180]	; (80156b4 <Check_forKyosanCMD+0x298>)
 8015600:	2200      	movs	r2, #0
 8015602:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8015604:	4b2b      	ldr	r3, [pc, #172]	; (80156b4 <Check_forKyosanCMD+0x298>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	f043 0310 	orr.w	r3, r3, #16
 801560c:	4a29      	ldr	r2, [pc, #164]	; (80156b4 <Check_forKyosanCMD+0x298>)
 801560e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015610:	2301      	movs	r3, #1
 8015612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015616:	e029      	b.n	801566c <Check_forKyosanCMD+0x250>
			case SEVEN:
				printf("Received %s\n",KyosanCommands_List[SEVEN]);
 8015618:	492f      	ldr	r1, [pc, #188]	; (80156d8 <Check_forKyosanCMD+0x2bc>)
 801561a:	4824      	ldr	r0, [pc, #144]	; (80156ac <Check_forKyosanCMD+0x290>)
 801561c:	f00f f99c 	bl	8024958 <iprintf>
				printf("CLEAR ALL\n");
 8015620:	482e      	ldr	r0, [pc, #184]	; (80156dc <Check_forKyosanCMD+0x2c0>)
 8015622:	f00f fa35 	bl	8024a90 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8015626:	4b23      	ldr	r3, [pc, #140]	; (80156b4 <Check_forKyosanCMD+0x298>)
 8015628:	2200      	movs	r2, #0
 801562a:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 801562c:	2301      	movs	r3, #1
 801562e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015632:	e01b      	b.n	801566c <Check_forKyosanCMD+0x250>
			default:
				printf("Please Send Valid Command\n");
 8015634:	481b      	ldr	r0, [pc, #108]	; (80156a4 <Check_forKyosanCMD+0x288>)
 8015636:	f00f fa2b 	bl	8024a90 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 801563a:	2300      	movs	r3, #0
 801563c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8015640:	e00e      	b.n	8015660 <Check_forKyosanCMD+0x244>
				{
					printf("%s\n",KyosanCommands_List[i]);
 8015642:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8015646:	2232      	movs	r2, #50	; 0x32
 8015648:	fb02 f303 	mul.w	r3, r2, r3
 801564c:	4a24      	ldr	r2, [pc, #144]	; (80156e0 <Check_forKyosanCMD+0x2c4>)
 801564e:	4413      	add	r3, r2
 8015650:	4618      	mov	r0, r3
 8015652:	f00f fa1d 	bl	8024a90 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8015656:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801565a:	3301      	adds	r3, #1
 801565c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8015660:	4b20      	ldr	r3, [pc, #128]	; (80156e4 <Check_forKyosanCMD+0x2c8>)
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8015668:	429a      	cmp	r2, r3
 801566a:	d3ea      	bcc.n	8015642 <Check_forKyosanCMD+0x226>
				}
			}
		}

		if(IS_COMMAND_RECEIVED == YES)
 801566c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015670:	2b01      	cmp	r3, #1
 8015672:	d105      	bne.n	8015680 <Check_forKyosanCMD+0x264>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8015674:	f240 2005 	movw	r0, #517	; 0x205
 8015678:	f7fa fc06 	bl	800fe88 <TransmitCanPkt>
 801567c:	e000      	b.n	8015680 <Check_forKyosanCMD+0x264>
		return;
 801567e:	bf00      	nop
		}
	}
}
 8015680:	3768      	adds	r7, #104	; 0x68
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
 8015686:	bf00      	nop
 8015688:	2000f74c 	.word	0x2000f74c
 801568c:	080296f0 	.word	0x080296f0
 8015690:	2000065c 	.word	0x2000065c
 8015694:	08029708 	.word	0x08029708
 8015698:	2000ecee 	.word	0x2000ecee
 801569c:	08029720 	.word	0x08029720
 80156a0:	2000065d 	.word	0x2000065d
 80156a4:	08029734 	.word	0x08029734
 80156a8:	2000ed20 	.word	0x2000ed20
 80156ac:	08029750 	.word	0x08029750
 80156b0:	08029760 	.word	0x08029760
 80156b4:	20009d74 	.word	0x20009d74
 80156b8:	2000ed52 	.word	0x2000ed52
 80156bc:	0802977c 	.word	0x0802977c
 80156c0:	2000ed84 	.word	0x2000ed84
 80156c4:	08029798 	.word	0x08029798
 80156c8:	2000edb6 	.word	0x2000edb6
 80156cc:	080297b4 	.word	0x080297b4
 80156d0:	2000ede8 	.word	0x2000ede8
 80156d4:	080297d0 	.word	0x080297d0
 80156d8:	2000ee1a 	.word	0x2000ee1a
 80156dc:	080297fc 	.word	0x080297fc
 80156e0:	2000ecbc 	.word	0x2000ecbc
 80156e4:	2000f0a4 	.word	0x2000f0a4

080156e8 <Update_KyosanCommands>:


void Update_KyosanCommands(void)
{
 80156e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156ea:	b083      	sub	sp, #12
 80156ec:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80156ee:	2300      	movs	r3, #0
 80156f0:	71fb      	strb	r3, [r7, #7]

	KyosanCommands_List[CmdCnt][0] = 0X24;
 80156f2:	79fb      	ldrb	r3, [r7, #7]
 80156f4:	4a78      	ldr	r2, [pc, #480]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 80156f6:	2132      	movs	r1, #50	; 0x32
 80156f8:	fb01 f303 	mul.w	r3, r1, r3
 80156fc:	4413      	add	r3, r2
 80156fe:	2224      	movs	r2, #36	; 0x24
 8015700:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][1] = 0X01;
 8015702:	79fb      	ldrb	r3, [r7, #7]
 8015704:	4a74      	ldr	r2, [pc, #464]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 8015706:	2132      	movs	r1, #50	; 0x32
 8015708:	fb01 f303 	mul.w	r3, r1, r3
 801570c:	4413      	add	r3, r2
 801570e:	3301      	adds	r3, #1
 8015710:	2201      	movs	r2, #1
 8015712:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][2] = 0X30;
 8015714:	79fb      	ldrb	r3, [r7, #7]
 8015716:	4a70      	ldr	r2, [pc, #448]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 8015718:	2132      	movs	r1, #50	; 0x32
 801571a:	fb01 f303 	mul.w	r3, r1, r3
 801571e:	4413      	add	r3, r2
 8015720:	3302      	adds	r3, #2
 8015722:	2230      	movs	r2, #48	; 0x30
 8015724:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][3] = 0X40;
 8015726:	79fb      	ldrb	r3, [r7, #7]
 8015728:	4a6b      	ldr	r2, [pc, #428]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 801572a:	2132      	movs	r1, #50	; 0x32
 801572c:	fb01 f303 	mul.w	r3, r1, r3
 8015730:	4413      	add	r3, r2
 8015732:	3303      	adds	r3, #3
 8015734:	2240      	movs	r2, #64	; 0x40
 8015736:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][4] = 0XC0;
 8015738:	79fb      	ldrb	r3, [r7, #7]
 801573a:	4a67      	ldr	r2, [pc, #412]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 801573c:	2132      	movs	r1, #50	; 0x32
 801573e:	fb01 f303 	mul.w	r3, r1, r3
 8015742:	4413      	add	r3, r2
 8015744:	3304      	adds	r3, #4
 8015746:	22c0      	movs	r2, #192	; 0xc0
 8015748:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][5] = 0X4E;
 801574a:	79fb      	ldrb	r3, [r7, #7]
 801574c:	4a62      	ldr	r2, [pc, #392]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 801574e:	2132      	movs	r1, #50	; 0x32
 8015750:	fb01 f303 	mul.w	r3, r1, r3
 8015754:	4413      	add	r3, r2
 8015756:	3305      	adds	r3, #5
 8015758:	224e      	movs	r2, #78	; 0x4e
 801575a:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][6] = 0X26;
 801575c:	79fb      	ldrb	r3, [r7, #7]
 801575e:	4a5e      	ldr	r2, [pc, #376]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 8015760:	2132      	movs	r1, #50	; 0x32
 8015762:	fb01 f303 	mul.w	r3, r1, r3
 8015766:	4413      	add	r3, r2
 8015768:	3306      	adds	r3, #6
 801576a:	2226      	movs	r2, #38	; 0x26
 801576c:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 801576e:	79fb      	ldrb	r3, [r7, #7]
 8015770:	3301      	adds	r3, #1
 8015772:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8015774:	79fb      	ldrb	r3, [r7, #7]
 8015776:	1c5a      	adds	r2, r3, #1
 8015778:	71fa      	strb	r2, [r7, #7]
 801577a:	461a      	mov	r2, r3
 801577c:	2332      	movs	r3, #50	; 0x32
 801577e:	fb02 f303 	mul.w	r3, r2, r3
 8015782:	4a55      	ldr	r2, [pc, #340]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 8015784:	4413      	add	r3, r2
 8015786:	4955      	ldr	r1, [pc, #340]	; (80158dc <Update_KyosanCommands+0x1f4>)
 8015788:	461a      	mov	r2, r3
 801578a:	460b      	mov	r3, r1
 801578c:	cb03      	ldmia	r3!, {r0, r1}
 801578e:	6010      	str	r0, [r2, #0]
 8015790:	6051      	str	r1, [r2, #4]
 8015792:	8819      	ldrh	r1, [r3, #0]
 8015794:	789b      	ldrb	r3, [r3, #2]
 8015796:	8111      	strh	r1, [r2, #8]
 8015798:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_POS");
 801579a:	79fb      	ldrb	r3, [r7, #7]
 801579c:	1c5a      	adds	r2, r3, #1
 801579e:	71fa      	strb	r2, [r7, #7]
 80157a0:	461a      	mov	r2, r3
 80157a2:	2332      	movs	r3, #50	; 0x32
 80157a4:	fb02 f303 	mul.w	r3, r2, r3
 80157a8:	4a4b      	ldr	r2, [pc, #300]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 80157aa:	4413      	add	r3, r2
 80157ac:	4a4c      	ldr	r2, [pc, #304]	; (80158e0 <Update_KyosanCommands+0x1f8>)
 80157ae:	461d      	mov	r5, r3
 80157b0:	4614      	mov	r4, r2
 80157b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157b4:	6028      	str	r0, [r5, #0]
 80157b6:	6069      	str	r1, [r5, #4]
 80157b8:	60aa      	str	r2, [r5, #8]
 80157ba:	60eb      	str	r3, [r5, #12]
 80157bc:	cc03      	ldmia	r4!, {r0, r1}
 80157be:	6128      	str	r0, [r5, #16]
 80157c0:	6169      	str	r1, [r5, #20]
 80157c2:	8823      	ldrh	r3, [r4, #0]
 80157c4:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_NEG");
 80157c6:	79fb      	ldrb	r3, [r7, #7]
 80157c8:	1c5a      	adds	r2, r3, #1
 80157ca:	71fa      	strb	r2, [r7, #7]
 80157cc:	461a      	mov	r2, r3
 80157ce:	2332      	movs	r3, #50	; 0x32
 80157d0:	fb02 f303 	mul.w	r3, r2, r3
 80157d4:	4a40      	ldr	r2, [pc, #256]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 80157d6:	4413      	add	r3, r2
 80157d8:	4a42      	ldr	r2, [pc, #264]	; (80158e4 <Update_KyosanCommands+0x1fc>)
 80157da:	461d      	mov	r5, r3
 80157dc:	4614      	mov	r4, r2
 80157de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157e0:	6028      	str	r0, [r5, #0]
 80157e2:	6069      	str	r1, [r5, #4]
 80157e4:	60aa      	str	r2, [r5, #8]
 80157e6:	60eb      	str	r3, [r5, #12]
 80157e8:	cc03      	ldmia	r4!, {r0, r1}
 80157ea:	6128      	str	r0, [r5, #16]
 80157ec:	6169      	str	r1, [r5, #20]
 80157ee:	8823      	ldrh	r3, [r4, #0]
 80157f0:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_POS");
 80157f2:	79fb      	ldrb	r3, [r7, #7]
 80157f4:	1c5a      	adds	r2, r3, #1
 80157f6:	71fa      	strb	r2, [r7, #7]
 80157f8:	461a      	mov	r2, r3
 80157fa:	2332      	movs	r3, #50	; 0x32
 80157fc:	fb02 f303 	mul.w	r3, r2, r3
 8015800:	4a35      	ldr	r2, [pc, #212]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 8015802:	4413      	add	r3, r2
 8015804:	4a38      	ldr	r2, [pc, #224]	; (80158e8 <Update_KyosanCommands+0x200>)
 8015806:	461d      	mov	r5, r3
 8015808:	4614      	mov	r4, r2
 801580a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801580c:	6028      	str	r0, [r5, #0]
 801580e:	6069      	str	r1, [r5, #4]
 8015810:	60aa      	str	r2, [r5, #8]
 8015812:	60eb      	str	r3, [r5, #12]
 8015814:	cc03      	ldmia	r4!, {r0, r1}
 8015816:	6128      	str	r0, [r5, #16]
 8015818:	6169      	str	r1, [r5, #20]
 801581a:	8823      	ldrh	r3, [r4, #0]
 801581c:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_NEG");
 801581e:	79fb      	ldrb	r3, [r7, #7]
 8015820:	1c5a      	adds	r2, r3, #1
 8015822:	71fa      	strb	r2, [r7, #7]
 8015824:	461a      	mov	r2, r3
 8015826:	2332      	movs	r3, #50	; 0x32
 8015828:	fb02 f303 	mul.w	r3, r2, r3
 801582c:	4a2a      	ldr	r2, [pc, #168]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 801582e:	4413      	add	r3, r2
 8015830:	4a2e      	ldr	r2, [pc, #184]	; (80158ec <Update_KyosanCommands+0x204>)
 8015832:	461d      	mov	r5, r3
 8015834:	4614      	mov	r4, r2
 8015836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015838:	6028      	str	r0, [r5, #0]
 801583a:	6069      	str	r1, [r5, #4]
 801583c:	60aa      	str	r2, [r5, #8]
 801583e:	60eb      	str	r3, [r5, #12]
 8015840:	cc03      	ldmia	r4!, {r0, r1}
 8015842:	6128      	str	r0, [r5, #16]
 8015844:	6169      	str	r1, [r5, #20]
 8015846:	8823      	ldrh	r3, [r4, #0]
 8015848:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA");
 801584a:	79fb      	ldrb	r3, [r7, #7]
 801584c:	1c5a      	adds	r2, r3, #1
 801584e:	71fa      	strb	r2, [r7, #7]
 8015850:	461a      	mov	r2, r3
 8015852:	2332      	movs	r3, #50	; 0x32
 8015854:	fb02 f303 	mul.w	r3, r2, r3
 8015858:	4a1f      	ldr	r2, [pc, #124]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 801585a:	4413      	add	r3, r2
 801585c:	4a24      	ldr	r2, [pc, #144]	; (80158f0 <Update_KyosanCommands+0x208>)
 801585e:	4614      	mov	r4, r2
 8015860:	469c      	mov	ip, r3
 8015862:	f104 0e20 	add.w	lr, r4, #32
 8015866:	4665      	mov	r5, ip
 8015868:	4626      	mov	r6, r4
 801586a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801586c:	6028      	str	r0, [r5, #0]
 801586e:	6069      	str	r1, [r5, #4]
 8015870:	60aa      	str	r2, [r5, #8]
 8015872:	60eb      	str	r3, [r5, #12]
 8015874:	3410      	adds	r4, #16
 8015876:	f10c 0c10 	add.w	ip, ip, #16
 801587a:	4574      	cmp	r4, lr
 801587c:	d1f3      	bne.n	8015866 <Update_KyosanCommands+0x17e>
 801587e:	4662      	mov	r2, ip
 8015880:	4623      	mov	r3, r4
 8015882:	cb03      	ldmia	r3!, {r0, r1}
 8015884:	6010      	str	r0, [r2, #0]
 8015886:	6051      	str	r1, [r2, #4]
 8015888:	881b      	ldrh	r3, [r3, #0]
 801588a:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 801588c:	79fb      	ldrb	r3, [r7, #7]
 801588e:	1c5a      	adds	r2, r3, #1
 8015890:	71fa      	strb	r2, [r7, #7]
 8015892:	461a      	mov	r2, r3
 8015894:	2332      	movs	r3, #50	; 0x32
 8015896:	fb02 f303 	mul.w	r3, r2, r3
 801589a:	4a0f      	ldr	r2, [pc, #60]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 801589c:	4413      	add	r3, r2
 801589e:	4915      	ldr	r1, [pc, #84]	; (80158f4 <Update_KyosanCommands+0x20c>)
 80158a0:	461a      	mov	r2, r3
 80158a2:	460b      	mov	r3, r1
 80158a4:	cb03      	ldmia	r3!, {r0, r1}
 80158a6:	6010      	str	r0, [r2, #0]
 80158a8:	6051      	str	r1, [r2, #4]
 80158aa:	881b      	ldrh	r3, [r3, #0]
 80158ac:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"HELP");
 80158ae:	79fb      	ldrb	r3, [r7, #7]
 80158b0:	1c5a      	adds	r2, r3, #1
 80158b2:	71fa      	strb	r2, [r7, #7]
 80158b4:	461a      	mov	r2, r3
 80158b6:	2332      	movs	r3, #50	; 0x32
 80158b8:	fb02 f303 	mul.w	r3, r2, r3
 80158bc:	4a06      	ldr	r2, [pc, #24]	; (80158d8 <Update_KyosanCommands+0x1f0>)
 80158be:	4413      	add	r3, r2
 80158c0:	4a0d      	ldr	r2, [pc, #52]	; (80158f8 <Update_KyosanCommands+0x210>)
 80158c2:	6810      	ldr	r0, [r2, #0]
 80158c4:	6018      	str	r0, [r3, #0]
 80158c6:	7912      	ldrb	r2, [r2, #4]
 80158c8:	711a      	strb	r2, [r3, #4]
	KyosanCommands_Count =  CmdCnt;
 80158ca:	4a0c      	ldr	r2, [pc, #48]	; (80158fc <Update_KyosanCommands+0x214>)
 80158cc:	79fb      	ldrb	r3, [r7, #7]
 80158ce:	7013      	strb	r3, [r2, #0]
}
 80158d0:	bf00      	nop
 80158d2:	370c      	adds	r7, #12
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158d8:	2000ecbc 	.word	0x2000ecbc
 80158dc:	08029808 	.word	0x08029808
 80158e0:	08029760 	.word	0x08029760
 80158e4:	0802977c 	.word	0x0802977c
 80158e8:	08029798 	.word	0x08029798
 80158ec:	080297b4 	.word	0x080297b4
 80158f0:	080297d0 	.word	0x080297d0
 80158f4:	08029814 	.word	0x08029814
 80158f8:	08029820 	.word	0x08029820
 80158fc:	2000f0a4 	.word	0x2000f0a4

08015900 <Is_KyosanCommand_Valid>:

uint8_t Is_KyosanCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 8015900:	b590      	push	{r4, r7, lr}
 8015902:	b085      	sub	sp, #20
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	460b      	mov	r3, r1
 801590a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 801590c:	2300      	movs	r3, #0
 801590e:	73fb      	strb	r3, [r7, #15]
 8015910:	e01c      	b.n	801594c <Is_KyosanCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)KyosanCommands_List[Traverser]) != NULL)
		if(memcmp(Buffer,KyosanCommands_List[Traverser],strlen((char *)KyosanCommands_List[Traverser])) == 0)
 8015912:	7bfb      	ldrb	r3, [r7, #15]
 8015914:	2232      	movs	r2, #50	; 0x32
 8015916:	fb02 f303 	mul.w	r3, r2, r3
 801591a:	4a11      	ldr	r2, [pc, #68]	; (8015960 <Is_KyosanCommand_Valid+0x60>)
 801591c:	189c      	adds	r4, r3, r2
 801591e:	7bfb      	ldrb	r3, [r7, #15]
 8015920:	2232      	movs	r2, #50	; 0x32
 8015922:	fb02 f303 	mul.w	r3, r2, r3
 8015926:	4a0e      	ldr	r2, [pc, #56]	; (8015960 <Is_KyosanCommand_Valid+0x60>)
 8015928:	4413      	add	r3, r2
 801592a:	4618      	mov	r0, r3
 801592c:	f7ea fc92 	bl	8000254 <strlen>
 8015930:	4603      	mov	r3, r0
 8015932:	461a      	mov	r2, r3
 8015934:	4621      	mov	r1, r4
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f00e feee 	bl	8024718 <memcmp>
 801593c:	4603      	mov	r3, r0
 801593e:	2b00      	cmp	r3, #0
 8015940:	d101      	bne.n	8015946 <Is_KyosanCommand_Valid+0x46>
		{
			return Traverser;
 8015942:	7bfb      	ldrb	r3, [r7, #15]
 8015944:	e008      	b.n	8015958 <Is_KyosanCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8015946:	7bfb      	ldrb	r3, [r7, #15]
 8015948:	3301      	adds	r3, #1
 801594a:	73fb      	strb	r3, [r7, #15]
 801594c:	4b05      	ldr	r3, [pc, #20]	; (8015964 <Is_KyosanCommand_Valid+0x64>)
 801594e:	781b      	ldrb	r3, [r3, #0]
 8015950:	7bfa      	ldrb	r2, [r7, #15]
 8015952:	429a      	cmp	r2, r3
 8015954:	d3dd      	bcc.n	8015912 <Is_KyosanCommand_Valid+0x12>
		}
	}
	return 255;
 8015956:	23ff      	movs	r3, #255	; 0xff
}
 8015958:	4618      	mov	r0, r3
 801595a:	3714      	adds	r7, #20
 801595c:	46bd      	mov	sp, r7
 801595e:	bd90      	pop	{r4, r7, pc}
 8015960:	2000ecbc 	.word	0x2000ecbc
 8015964:	2000f0a4 	.word	0x2000f0a4

08015968 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8015968:	b480      	push	{r7}
 801596a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801596c:	f3bf 8f4f 	dsb	sy
}
 8015970:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015972:	f3bf 8f6f 	isb	sy
}
 8015976:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8015978:	4b0d      	ldr	r3, [pc, #52]	; (80159b0 <SCB_EnableICache+0x48>)
 801597a:	2200      	movs	r2, #0
 801597c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8015980:	f3bf 8f4f 	dsb	sy
}
 8015984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015986:	f3bf 8f6f 	isb	sy
}
 801598a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801598c:	4b08      	ldr	r3, [pc, #32]	; (80159b0 <SCB_EnableICache+0x48>)
 801598e:	695b      	ldr	r3, [r3, #20]
 8015990:	4a07      	ldr	r2, [pc, #28]	; (80159b0 <SCB_EnableICache+0x48>)
 8015992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015996:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8015998:	f3bf 8f4f 	dsb	sy
}
 801599c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801599e:	f3bf 8f6f 	isb	sy
}
 80159a2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80159a4:	bf00      	nop
 80159a6:	46bd      	mov	sp, r7
 80159a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ac:	4770      	bx	lr
 80159ae:	bf00      	nop
 80159b0:	e000ed00 	.word	0xe000ed00

080159b4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80159b4:	b480      	push	{r7}
 80159b6:	b085      	sub	sp, #20
 80159b8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80159ba:	4b1f      	ldr	r3, [pc, #124]	; (8015a38 <SCB_EnableDCache+0x84>)
 80159bc:	2200      	movs	r2, #0
 80159be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80159c2:	f3bf 8f4f 	dsb	sy
}
 80159c6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80159c8:	4b1b      	ldr	r3, [pc, #108]	; (8015a38 <SCB_EnableDCache+0x84>)
 80159ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159ce:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	0b5b      	lsrs	r3, r3, #13
 80159d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80159d8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	08db      	lsrs	r3, r3, #3
 80159de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80159e2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	015a      	lsls	r2, r3, #5
 80159e8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80159ec:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80159ee:	68ba      	ldr	r2, [r7, #8]
 80159f0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80159f2:	4911      	ldr	r1, [pc, #68]	; (8015a38 <SCB_EnableDCache+0x84>)
 80159f4:	4313      	orrs	r3, r2
 80159f6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	1e5a      	subs	r2, r3, #1
 80159fe:	60ba      	str	r2, [r7, #8]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d1ef      	bne.n	80159e4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	1e5a      	subs	r2, r3, #1
 8015a08:	60fa      	str	r2, [r7, #12]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d1e5      	bne.n	80159da <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8015a0e:	f3bf 8f4f 	dsb	sy
}
 8015a12:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8015a14:	4b08      	ldr	r3, [pc, #32]	; (8015a38 <SCB_EnableDCache+0x84>)
 8015a16:	695b      	ldr	r3, [r3, #20]
 8015a18:	4a07      	ldr	r2, [pc, #28]	; (8015a38 <SCB_EnableDCache+0x84>)
 8015a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015a1e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8015a20:	f3bf 8f4f 	dsb	sy
}
 8015a24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015a26:	f3bf 8f6f 	isb	sy
}
 8015a2a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8015a2c:	bf00      	nop
 8015a2e:	3714      	adds	r7, #20
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr
 8015a38:	e000ed00 	.word	0xe000ed00

08015a3c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8015a42:	2300      	movs	r3, #0
 8015a44:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8015a46:	f000 f9b3 	bl	8015db0 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8015a4a:	f7ff ff8d 	bl	8015968 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8015a4e:	f7ff ffb1 	bl	80159b4 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8015a52:	f001 ff17 	bl	8017884 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8015a56:	f000 f8e5 	bl	8015c24 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 8015a5a:	f7f3 fe73 	bl	8009744 <reset_cause_get>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f3 fec1 	bl	80097e8 <reset_cause_get_name>
 8015a66:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8015a68:	f7fe fa9e 	bl	8013fa8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8015a6c:	f001 f91e 	bl	8016cac <MX_USART1_UART_Init>
	Get_Slot();
 8015a70:	f7eb f82c 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8015a74:	f7fa f87e 	bl	800fb74 <MX_CAN2_Init>
	MX_CAN3_Init();
 8015a78:	f7fa f8f4 	bl	800fc64 <MX_CAN3_Init>
	MX_I2C1_Init();
 8015a7c:	f7fe fcc4 	bl	8014408 <MX_I2C1_Init>
	MX_I2C2_Init();
 8015a80:	f7fe fd02 	bl	8014488 <MX_I2C2_Init>
	MX_SPI1_Init();
 8015a84:	f000 fa24 	bl	8015ed0 <MX_SPI1_Init>
	Get_Config();
 8015a88:	f000 fd8e 	bl	80165a8 <Get_Config>
	MX_RNG_Init();
 8015a8c:	f000 f9c2 	bl	8015e14 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8015a90:	2208      	movs	r2, #8
 8015a92:	2100      	movs	r1, #0
 8015a94:	4855      	ldr	r0, [pc, #340]	; (8015bec <main+0x1b0>)
 8015a96:	f00e fe77 	bl	8024788 <memset>
	HAL_Delay(250);
 8015a9a:	20fa      	movs	r0, #250	; 0xfa
 8015a9c:	f001 ff5e 	bl	801795c <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 8015aa0:	4853      	ldr	r0, [pc, #332]	; (8015bf0 <main+0x1b4>)
 8015aa2:	f00e ff59 	bl	8024958 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 8015aa6:	4853      	ldr	r0, [pc, #332]	; (8015bf4 <main+0x1b8>)
 8015aa8:	f00e fff2 	bl	8024a90 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8015aac:	6879      	ldr	r1, [r7, #4]
 8015aae:	4852      	ldr	r0, [pc, #328]	; (8015bf8 <main+0x1bc>)
 8015ab0:	f00e ff52 	bl	8024958 <iprintf>
	Get_Build_Details();
 8015ab4:	f000 f920 	bl	8015cf8 <Get_Build_Details>
	switch(EI_data.ProtocolType)
 8015ab8:	4b50      	ldr	r3, [pc, #320]	; (8015bfc <main+0x1c0>)
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	3b01      	subs	r3, #1
 8015abe:	2b03      	cmp	r3, #3
 8015ac0:	d869      	bhi.n	8015b96 <main+0x15a>
 8015ac2:	a201      	add	r2, pc, #4	; (adr r2, 8015ac8 <main+0x8c>)
 8015ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ac8:	08015ad9 	.word	0x08015ad9
 8015acc:	08015b2b 	.word	0x08015b2b
 8015ad0:	08015b53 	.word	0x08015b53
 8015ad4:	08015b83 	.word	0x08015b83
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8015ad8:	4849      	ldr	r0, [pc, #292]	; (8015c00 <main+0x1c4>)
 8015ada:	f00e ffd9 	bl	8024a90 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8015ade:	4849      	ldr	r0, [pc, #292]	; (8015c04 <main+0x1c8>)
 8015ae0:	f00e ffd6 	bl	8024a90 <puts>
		MX_LWIP_Init();
 8015ae4:	f009 f858 	bl	801eb98 <MX_LWIP_Init>
		udpServer_init();
 8015ae8:	f7f9 fc2a 	bl	800f340 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8015aec:	4846      	ldr	r0, [pc, #280]	; (8015c08 <main+0x1cc>)
 8015aee:	f00e ffcf 	bl	8024a90 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort >= 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 8015af2:	4b42      	ldr	r3, [pc, #264]	; (8015bfc <main+0x1c0>)
 8015af4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d011      	beq.n	8015b20 <main+0xe4>
 8015afc:	4b3f      	ldr	r3, [pc, #252]	; (8015bfc <main+0x1c0>)
 8015afe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00c      	beq.n	8015b20 <main+0xe4>
		{
			printf("Initializing UART with BaudRate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8015b06:	4b3d      	ldr	r3, [pc, #244]	; (8015bfc <main+0x1c0>)
 8015b08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	483f      	ldr	r0, [pc, #252]	; (8015c0c <main+0x1d0>)
 8015b10:	f00e ff22 	bl	8024958 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 8015b14:	4b39      	ldr	r3, [pc, #228]	; (8015bfc <main+0x1c0>)
 8015b16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f001 fa74 	bl	8017008 <UART4_Init>
		}
		print_self_Details();
 8015b20:	f7f3 f88c 	bl	8008c3c <print_self_Details>
		Update_HitachiCommands();
 8015b24:	f7ea febe 	bl	80008a4 <Update_HitachiCommands>
#if ENABLE_SIGNAL_PRINT
		UpdateSIGNALSNamesHitachi();
#endif
		break;
 8015b28:	e039      	b.n	8015b9e <main+0x162>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8015b2a:	4839      	ldr	r0, [pc, #228]	; (8015c10 <main+0x1d4>)
 8015b2c:	f00e ffb0 	bl	8024a90 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8015b30:	4834      	ldr	r0, [pc, #208]	; (8015c04 <main+0x1c8>)
 8015b32:	f00e ffad 	bl	8024a90 <puts>
		MX_LWIP_Init();
 8015b36:	f009 f82f 	bl	801eb98 <MX_LWIP_Init>
		udpServer_init();
 8015b3a:	f7f9 fc01 	bl	800f340 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8015b3e:	4832      	ldr	r0, [pc, #200]	; (8015c08 <main+0x1cc>)
 8015b40:	f00e ffa6 	bl	8024a90 <puts>
		print_self_DetailsSiemens();
 8015b44:	f7f9 fae2 	bl	800f10c <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8015b48:	f7f7 ffec 	bl	800db24 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8015b4c:	f7f8 fe00 	bl	800e750 <UpdateSIGNALSNames>
		break;
 8015b50:	e025      	b.n	8015b9e <main+0x162>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8015b52:	4830      	ldr	r0, [pc, #192]	; (8015c14 <main+0x1d8>)
 8015b54:	f00e ff9c 	bl	8024a90 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8015b58:	4b28      	ldr	r3, [pc, #160]	; (8015bfc <main+0x1c0>)
 8015b5a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d006      	beq.n	8015b70 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8015b62:	4b26      	ldr	r3, [pc, #152]	; (8015bfc <main+0x1c0>)
 8015b64:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f001 fa4d 	bl	8017008 <UART4_Init>
 8015b6e:	e003      	b.n	8015b78 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 8015b70:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8015b74:	f001 fa48 	bl	8017008 <UART4_Init>
		}
		Update_MedhaCommands();
 8015b78:	f7f5 faac 	bl	800b0d4 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8015b7c:	f7f5 f86a 	bl	800ac54 <Print_Medha_Self_Details>
		break;
 8015b80:	e00d      	b.n	8015b9e <main+0x162>

	case KYOSAN:
		printf("Protocol Selected is KYOSAN\n");
 8015b82:	4825      	ldr	r0, [pc, #148]	; (8015c18 <main+0x1dc>)
 8015b84:	f00e ff84 	bl	8024a90 <puts>
		UART4_Init(9600);
 8015b88:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8015b8c:	f001 fa3c 	bl	8017008 <UART4_Init>
//		Update_KyosanStructure();
//		UpdateSIGNALSNamesKyosan();
		Update_KyosanCommands();
 8015b90:	f7ff fdaa 	bl	80156e8 <Update_KyosanCommands>
		break;
 8015b94:	e003      	b.n	8015b9e <main+0x162>

	default:
		printf("Please Select Protocol Type\n");
 8015b96:	4821      	ldr	r0, [pc, #132]	; (8015c1c <main+0x1e0>)
 8015b98:	f00e ff7a 	bl	8024a90 <puts>
		while(1);
 8015b9c:	e7fe      	b.n	8015b9c <main+0x160>
	}


	printf("Initialization Success\n");
 8015b9e:	4820      	ldr	r0, [pc, #128]	; (8015c20 <main+0x1e4>)
 8015ba0:	f00e ff76 	bl	8024a90 <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 8015ba4:	f7fe fd58 	bl	8014658 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8015ba8:	4b14      	ldr	r3, [pc, #80]	; (8015bfc <main+0x1c0>)
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	3b01      	subs	r3, #1
 8015bae:	2b03      	cmp	r3, #3
 8015bb0:	d816      	bhi.n	8015be0 <main+0x1a4>
 8015bb2:	a201      	add	r2, pc, #4	; (adr r2, 8015bb8 <main+0x17c>)
 8015bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bb8:	08015bc9 	.word	0x08015bc9
 8015bbc:	08015bcf 	.word	0x08015bcf
 8015bc0:	08015bd5 	.word	0x08015bd5
 8015bc4:	08015bdb 	.word	0x08015bdb
		{
		case HITACHI:
			Process_HitachiEI();
 8015bc8:	f7f3 fd7c 	bl	80096c4 <Process_HitachiEI>
			break;
 8015bcc:	e00c      	b.n	8015be8 <main+0x1ac>

		case SIEMENS:
			Process_SiemensEI();
 8015bce:	f7f5 ffa7 	bl	800bb20 <Process_SiemensEI>
			break;
 8015bd2:	e009      	b.n	8015be8 <main+0x1ac>

		case MEDHA:
			Process_Medha_EI();
 8015bd4:	f7f3 fe58 	bl	8009888 <Process_Medha_EI>
			break;
 8015bd8:	e006      	b.n	8015be8 <main+0x1ac>
		case KYOSAN:
			//Print_Medha_Self_Details();
			//Process_Medha_EI();
			//		break;

			Process_Kyosan_EI();
 8015bda:	f7fe fd5b 	bl	8014694 <Process_Kyosan_EI>
			break;
 8015bde:	e003      	b.n	8015be8 <main+0x1ac>
//			while(Com_DataReady(3))
//			printf("0x%02x ",Com_Get_Byte(3));
//			}

		default:
			printf("Please Select Protocol Type\n");
 8015be0:	480e      	ldr	r0, [pc, #56]	; (8015c1c <main+0x1e0>)
 8015be2:	f00e ff55 	bl	8024a90 <puts>
			while(1);
 8015be6:	e7fe      	b.n	8015be6 <main+0x1aa>
		switch(EI_data.ProtocolType)
 8015be8:	e7de      	b.n	8015ba8 <main+0x16c>
 8015bea:	bf00      	nop
 8015bec:	2000198c 	.word	0x2000198c
 8015bf0:	08029828 	.word	0x08029828
 8015bf4:	08029834 	.word	0x08029834
 8015bf8:	08029884 	.word	0x08029884
 8015bfc:	20000304 	.word	0x20000304
 8015c00:	080298a0 	.word	0x080298a0
 8015c04:	080298c0 	.word	0x080298c0
 8015c08:	080298e8 	.word	0x080298e8
 8015c0c:	08029904 	.word	0x08029904
 8015c10:	0802992c 	.word	0x0802992c
 8015c14:	0802994c 	.word	0x0802994c
 8015c18:	08029968 	.word	0x08029968
 8015c1c:	08029984 	.word	0x08029984
 8015c20:	080299a0 	.word	0x080299a0

08015c24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b094      	sub	sp, #80	; 0x50
 8015c28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8015c2a:	f107 031c 	add.w	r3, r7, #28
 8015c2e:	2234      	movs	r2, #52	; 0x34
 8015c30:	2100      	movs	r1, #0
 8015c32:	4618      	mov	r0, r3
 8015c34:	f00e fda8 	bl	8024788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8015c38:	f107 0308 	add.w	r3, r7, #8
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	601a      	str	r2, [r3, #0]
 8015c40:	605a      	str	r2, [r3, #4]
 8015c42:	609a      	str	r2, [r3, #8]
 8015c44:	60da      	str	r2, [r3, #12]
 8015c46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8015c48:	4b29      	ldr	r3, [pc, #164]	; (8015cf0 <SystemClock_Config+0xcc>)
 8015c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c4c:	4a28      	ldr	r2, [pc, #160]	; (8015cf0 <SystemClock_Config+0xcc>)
 8015c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c52:	6413      	str	r3, [r2, #64]	; 0x40
 8015c54:	4b26      	ldr	r3, [pc, #152]	; (8015cf0 <SystemClock_Config+0xcc>)
 8015c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c5c:	607b      	str	r3, [r7, #4]
 8015c5e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015c60:	4b24      	ldr	r3, [pc, #144]	; (8015cf4 <SystemClock_Config+0xd0>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	4a23      	ldr	r2, [pc, #140]	; (8015cf4 <SystemClock_Config+0xd0>)
 8015c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015c6a:	6013      	str	r3, [r2, #0]
 8015c6c:	4b21      	ldr	r3, [pc, #132]	; (8015cf4 <SystemClock_Config+0xd0>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8015c74:	603b      	str	r3, [r7, #0]
 8015c76:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8015c78:	2309      	movs	r3, #9
 8015c7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8015c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015c80:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8015c82:	2301      	movs	r3, #1
 8015c84:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015c86:	2302      	movs	r3, #2
 8015c88:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8015c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015c8e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8015c90:	2306      	movs	r3, #6
 8015c92:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8015c94:	23b4      	movs	r3, #180	; 0xb4
 8015c96:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015c98:	2302      	movs	r3, #2
 8015c9a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8015c9c:	2308      	movs	r3, #8
 8015c9e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8015ca0:	2302      	movs	r3, #2
 8015ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015ca4:	f107 031c 	add.w	r3, r7, #28
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f005 f9c1 	bl	801b030 <HAL_RCC_OscConfig>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d001      	beq.n	8015cb8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8015cb4:	f000 f8a8 	bl	8015e08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015cb8:	230f      	movs	r3, #15
 8015cba:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015cbc:	2302      	movs	r3, #2
 8015cbe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8015cc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8015cc8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8015cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015cce:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8015cd0:	f107 0308 	add.w	r3, r7, #8
 8015cd4:	2105      	movs	r1, #5
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f005 fc58 	bl	801b58c <HAL_RCC_ClockConfig>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d001      	beq.n	8015ce6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8015ce2:	f000 f891 	bl	8015e08 <Error_Handler>
	}
}
 8015ce6:	bf00      	nop
 8015ce8:	3750      	adds	r7, #80	; 0x50
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}
 8015cee:	bf00      	nop
 8015cf0:	40023800 	.word	0x40023800
 8015cf4:	40007000 	.word	0x40007000

08015cf8 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b08e      	sub	sp, #56	; 0x38
 8015cfc:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8015cfe:	2300      	movs	r3, #0
 8015d00:	607b      	str	r3, [r7, #4]
 8015d02:	f107 0308 	add.w	r3, r7, #8
 8015d06:	222e      	movs	r2, #46	; 0x2e
 8015d08:	2100      	movs	r1, #0
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f00e fd3c 	bl	8024788 <memset>
	printf("\n_____________________________________________\n");
 8015d10:	481d      	ldr	r0, [pc, #116]	; (8015d88 <Get_Build_Details+0x90>)
 8015d12:	f00e febd 	bl	8024a90 <puts>
	printf("Build Date:%s\n",__DATE__);
 8015d16:	491d      	ldr	r1, [pc, #116]	; (8015d8c <Get_Build_Details+0x94>)
 8015d18:	481d      	ldr	r0, [pc, #116]	; (8015d90 <Get_Build_Details+0x98>)
 8015d1a:	f00e fe1d 	bl	8024958 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8015d1e:	491d      	ldr	r1, [pc, #116]	; (8015d94 <Get_Build_Details+0x9c>)
 8015d20:	481d      	ldr	r0, [pc, #116]	; (8015d98 <Get_Build_Details+0xa0>)
 8015d22:	f00e fe19 	bl	8024958 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8015d26:	1d3b      	adds	r3, r7, #4
 8015d28:	4a18      	ldr	r2, [pc, #96]	; (8015d8c <Get_Build_Details+0x94>)
 8015d2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8015d30:	1d3b      	adds	r3, r7, #4
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7ea fa8e 	bl	8000254 <strlen>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	1d3b      	adds	r3, r7, #4
 8015d3e:	4413      	add	r3, r2
 8015d40:	4914      	ldr	r1, [pc, #80]	; (8015d94 <Get_Build_Details+0x9c>)
 8015d42:	461a      	mov	r2, r3
 8015d44:	460b      	mov	r3, r1
 8015d46:	cb03      	ldmia	r3!, {r0, r1}
 8015d48:	6010      	str	r0, [r2, #0]
 8015d4a:	6051      	str	r1, [r2, #4]
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8015d50:	1d3b      	adds	r3, r7, #4
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ea fa7e 	bl	8000254 <strlen>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	b21a      	sxth	r2, r3
 8015d5c:	1d3b      	adds	r3, r7, #4
 8015d5e:	4619      	mov	r1, r3
 8015d60:	2000      	movs	r0, #0
 8015d62:	f7fd ffcd 	bl	8013d00 <GetCRC16>
 8015d66:	4603      	mov	r3, r0
 8015d68:	461a      	mov	r2, r3
 8015d6a:	4b0c      	ldr	r3, [pc, #48]	; (8015d9c <Get_Build_Details+0xa4>)
 8015d6c:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8015d6e:	4a0c      	ldr	r2, [pc, #48]	; (8015da0 <Get_Build_Details+0xa8>)
 8015d70:	490c      	ldr	r1, [pc, #48]	; (8015da4 <Get_Build_Details+0xac>)
 8015d72:	480d      	ldr	r0, [pc, #52]	; (8015da8 <Get_Build_Details+0xb0>)
 8015d74:	f00e fdf0 	bl	8024958 <iprintf>
	printf("_____________________________________________\n");
 8015d78:	480c      	ldr	r0, [pc, #48]	; (8015dac <Get_Build_Details+0xb4>)
 8015d7a:	f00e fe89 	bl	8024a90 <puts>

}
 8015d7e:	bf00      	nop
 8015d80:	3738      	adds	r7, #56	; 0x38
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	080299b8 	.word	0x080299b8
 8015d8c:	080299e8 	.word	0x080299e8
 8015d90:	080299f4 	.word	0x080299f4
 8015d94:	08029a04 	.word	0x08029a04
 8015d98:	08029a10 	.word	0x08029a10
 8015d9c:	2000f3e8 	.word	0x2000f3e8
 8015da0:	08029a20 	.word	0x08029a20
 8015da4:	08029a28 	.word	0x08029a28
 8015da8:	08029a40 	.word	0x08029a40
 8015dac:	08029a5c 	.word	0x08029a5c

08015db0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b084      	sub	sp, #16
 8015db4:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8015db6:	463b      	mov	r3, r7
 8015db8:	2200      	movs	r2, #0
 8015dba:	601a      	str	r2, [r3, #0]
 8015dbc:	605a      	str	r2, [r3, #4]
 8015dbe:	609a      	str	r2, [r3, #8]
 8015dc0:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8015dc2:	f002 fdd7 	bl	8018974 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8015dc6:	2301      	movs	r3, #1
 8015dc8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8015dd2:	231f      	movs	r3, #31
 8015dd4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8015dd6:	2387      	movs	r3, #135	; 0x87
 8015dd8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8015dde:	2300      	movs	r3, #0
 8015de0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8015de2:	2301      	movs	r3, #1
 8015de4:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8015de6:	2301      	movs	r3, #1
 8015de8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8015dea:	2300      	movs	r3, #0
 8015dec:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8015dee:	2300      	movs	r3, #0
 8015df0:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8015df2:	463b      	mov	r3, r7
 8015df4:	4618      	mov	r0, r3
 8015df6:	f002 fdf5 	bl	80189e4 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8015dfa:	2004      	movs	r0, #4
 8015dfc:	f002 fdd2 	bl	80189a4 <HAL_MPU_Enable>

}
 8015e00:	bf00      	nop
 8015e02:	3710      	adds	r7, #16
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8015e08:	b480      	push	{r7}
 8015e0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8015e0c:	b672      	cpsid	i
}
 8015e0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8015e10:	e7fe      	b.n	8015e10 <Error_Handler+0x8>
	...

08015e14 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8015e18:	4b06      	ldr	r3, [pc, #24]	; (8015e34 <MX_RNG_Init+0x20>)
 8015e1a:	4a07      	ldr	r2, [pc, #28]	; (8015e38 <MX_RNG_Init+0x24>)
 8015e1c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8015e1e:	4805      	ldr	r0, [pc, #20]	; (8015e34 <MX_RNG_Init+0x20>)
 8015e20:	f006 f9c2 	bl	801c1a8 <HAL_RNG_Init>
 8015e24:	4603      	mov	r3, r0
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d001      	beq.n	8015e2e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8015e2a:	f7ff ffed 	bl	8015e08 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8015e2e:	bf00      	nop
 8015e30:	bd80      	pop	{r7, pc}
 8015e32:	bf00      	nop
 8015e34:	2000f3c4 	.word	0x2000f3c4
 8015e38:	50060800 	.word	0x50060800

08015e3c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b0a8      	sub	sp, #160	; 0xa0
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015e44:	f107 0310 	add.w	r3, r7, #16
 8015e48:	2290      	movs	r2, #144	; 0x90
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f00e fc9b 	bl	8024788 <memset>
  if(rngHandle->Instance==RNG)
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	4a11      	ldr	r2, [pc, #68]	; (8015e9c <HAL_RNG_MspInit+0x60>)
 8015e58:	4293      	cmp	r3, r2
 8015e5a:	d11b      	bne.n	8015e94 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8015e5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015e60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8015e62:	2300      	movs	r3, #0
 8015e64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015e68:	f107 0310 	add.w	r3, r7, #16
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f005 fd73 	bl	801b958 <HAL_RCCEx_PeriphCLKConfig>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d001      	beq.n	8015e7c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8015e78:	f7ff ffc6 	bl	8015e08 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8015e7c:	4b08      	ldr	r3, [pc, #32]	; (8015ea0 <HAL_RNG_MspInit+0x64>)
 8015e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e80:	4a07      	ldr	r2, [pc, #28]	; (8015ea0 <HAL_RNG_MspInit+0x64>)
 8015e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e86:	6353      	str	r3, [r2, #52]	; 0x34
 8015e88:	4b05      	ldr	r3, [pc, #20]	; (8015ea0 <HAL_RNG_MspInit+0x64>)
 8015e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e90:	60fb      	str	r3, [r7, #12]
 8015e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8015e94:	bf00      	nop
 8015e96:	37a0      	adds	r7, #160	; 0xa0
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}
 8015e9c:	50060800 	.word	0x50060800
 8015ea0:	40023800 	.word	0x40023800

08015ea4 <__NVIC_SystemReset>:
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015ea8:	f3bf 8f4f 	dsb	sy
}
 8015eac:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015eae:	4b06      	ldr	r3, [pc, #24]	; (8015ec8 <__NVIC_SystemReset+0x24>)
 8015eb0:	68db      	ldr	r3, [r3, #12]
 8015eb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015eb6:	4904      	ldr	r1, [pc, #16]	; (8015ec8 <__NVIC_SystemReset+0x24>)
 8015eb8:	4b04      	ldr	r3, [pc, #16]	; (8015ecc <__NVIC_SystemReset+0x28>)
 8015eba:	4313      	orrs	r3, r2
 8015ebc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8015ebe:	f3bf 8f4f 	dsb	sy
}
 8015ec2:	bf00      	nop
    __NOP();
 8015ec4:	bf00      	nop
 8015ec6:	e7fd      	b.n	8015ec4 <__NVIC_SystemReset+0x20>
 8015ec8:	e000ed00 	.word	0xe000ed00
 8015ecc:	05fa0004 	.word	0x05fa0004

08015ed0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8015ed4:	4b1b      	ldr	r3, [pc, #108]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015ed6:	4a1c      	ldr	r2, [pc, #112]	; (8015f48 <MX_SPI1_Init+0x78>)
 8015ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8015eda:	4b1a      	ldr	r3, [pc, #104]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8015ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8015ee2:	4b18      	ldr	r3, [pc, #96]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8015ee8:	4b16      	ldr	r3, [pc, #88]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015eea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8015eee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8015ef0:	4b14      	ldr	r3, [pc, #80]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8015ef6:	4b13      	ldr	r3, [pc, #76]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015ef8:	2200      	movs	r2, #0
 8015efa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8015efc:	4b11      	ldr	r3, [pc, #68]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8015f04:	4b0f      	ldr	r3, [pc, #60]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f06:	2208      	movs	r2, #8
 8015f08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8015f0a:	4b0e      	ldr	r3, [pc, #56]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8015f10:	4b0c      	ldr	r3, [pc, #48]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f12:	2200      	movs	r2, #0
 8015f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015f16:	4b0b      	ldr	r3, [pc, #44]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f18:	2200      	movs	r2, #0
 8015f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8015f1c:	4b09      	ldr	r3, [pc, #36]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f1e:	2207      	movs	r2, #7
 8015f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8015f22:	4b08      	ldr	r3, [pc, #32]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f24:	2200      	movs	r2, #0
 8015f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8015f28:	4b06      	ldr	r3, [pc, #24]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f2a:	2208      	movs	r2, #8
 8015f2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8015f2e:	4805      	ldr	r0, [pc, #20]	; (8015f44 <MX_SPI1_Init+0x74>)
 8015f30:	f006 f9cf 	bl	801c2d2 <HAL_SPI_Init>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d001      	beq.n	8015f3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8015f3a:	f7ff ff65 	bl	8015e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8015f3e:	bf00      	nop
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	2000f3ec 	.word	0x2000f3ec
 8015f48:	40013000 	.word	0x40013000

08015f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b08c      	sub	sp, #48	; 0x30
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f54:	f107 031c 	add.w	r3, r7, #28
 8015f58:	2200      	movs	r2, #0
 8015f5a:	601a      	str	r2, [r3, #0]
 8015f5c:	605a      	str	r2, [r3, #4]
 8015f5e:	609a      	str	r2, [r3, #8]
 8015f60:	60da      	str	r2, [r3, #12]
 8015f62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	4a33      	ldr	r2, [pc, #204]	; (8016038 <HAL_SPI_MspInit+0xec>)
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	d160      	bne.n	8016030 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8015f6e:	4b33      	ldr	r3, [pc, #204]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f72:	4a32      	ldr	r2, [pc, #200]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015f78:	6453      	str	r3, [r2, #68]	; 0x44
 8015f7a:	4b30      	ldr	r3, [pc, #192]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015f82:	61bb      	str	r3, [r7, #24]
 8015f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015f86:	4b2d      	ldr	r3, [pc, #180]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f8a:	4a2c      	ldr	r2, [pc, #176]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015f8c:	f043 0301 	orr.w	r3, r3, #1
 8015f90:	6313      	str	r3, [r2, #48]	; 0x30
 8015f92:	4b2a      	ldr	r3, [pc, #168]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f96:	f003 0301 	and.w	r3, r3, #1
 8015f9a:	617b      	str	r3, [r7, #20]
 8015f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015f9e:	4b27      	ldr	r3, [pc, #156]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fa2:	4a26      	ldr	r2, [pc, #152]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015fa4:	f043 0308 	orr.w	r3, r3, #8
 8015fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8015faa:	4b24      	ldr	r3, [pc, #144]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fae:	f003 0308 	and.w	r3, r3, #8
 8015fb2:	613b      	str	r3, [r7, #16]
 8015fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015fb6:	4b21      	ldr	r3, [pc, #132]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fba:	4a20      	ldr	r2, [pc, #128]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8015fc2:	4b1e      	ldr	r3, [pc, #120]	; (801603c <HAL_SPI_MspInit+0xf0>)
 8015fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fca:	60fb      	str	r3, [r7, #12]
 8015fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8015fce:	2320      	movs	r3, #32
 8015fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fd2:	2302      	movs	r3, #2
 8015fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015fda:	2303      	movs	r3, #3
 8015fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8015fde:	2305      	movs	r3, #5
 8015fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8015fe2:	f107 031c 	add.w	r3, r7, #28
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	4815      	ldr	r0, [pc, #84]	; (8016040 <HAL_SPI_MspInit+0xf4>)
 8015fea:	f003 ffb7 	bl	8019f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8015fee:	2380      	movs	r3, #128	; 0x80
 8015ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ff2:	2302      	movs	r3, #2
 8015ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ffa:	2303      	movs	r3, #3
 8015ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8015ffe:	2305      	movs	r3, #5
 8016000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8016002:	f107 031c 	add.w	r3, r7, #28
 8016006:	4619      	mov	r1, r3
 8016008:	480e      	ldr	r0, [pc, #56]	; (8016044 <HAL_SPI_MspInit+0xf8>)
 801600a:	f003 ffa7 	bl	8019f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 801600e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016014:	2302      	movs	r3, #2
 8016016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016018:	2300      	movs	r3, #0
 801601a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801601c:	2303      	movs	r3, #3
 801601e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8016020:	2305      	movs	r3, #5
 8016022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8016024:	f107 031c 	add.w	r3, r7, #28
 8016028:	4619      	mov	r1, r3
 801602a:	4807      	ldr	r0, [pc, #28]	; (8016048 <HAL_SPI_MspInit+0xfc>)
 801602c:	f003 ff96 	bl	8019f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8016030:	bf00      	nop
 8016032:	3730      	adds	r7, #48	; 0x30
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	40013000 	.word	0x40013000
 801603c:	40023800 	.word	0x40023800
 8016040:	40020000 	.word	0x40020000
 8016044:	40020c00 	.word	0x40020c00
 8016048:	40021800 	.word	0x40021800

0801604c <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	60b9      	str	r1, [r7, #8]
 8016054:	607b      	str	r3, [r7, #4]
 8016056:	4603      	mov	r3, r0
 8016058:	73fb      	strb	r3, [r7, #15]
 801605a:	4613      	mov	r3, r2
 801605c:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 801605e:	2300      	movs	r3, #0
 8016060:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8016062:	7bfb      	ldrb	r3, [r7, #15]
 8016064:	3b01      	subs	r3, #1
 8016066:	2b03      	cmp	r3, #3
 8016068:	d828      	bhi.n	80160bc <SPI_WriteInFlash+0x70>
 801606a:	a201      	add	r2, pc, #4	; (adr r2, 8016070 <SPI_WriteInFlash+0x24>)
 801606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016070:	08016081 	.word	0x08016081
 8016074:	08016091 	.word	0x08016091
 8016078:	0801609f 	.word	0x0801609f
 801607c:	080160ad 	.word	0x080160ad
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8016080:	4b75      	ldr	r3, [pc, #468]	; (8016258 <SPI_WriteInFlash+0x20c>)
 8016082:	4a76      	ldr	r2, [pc, #472]	; (801625c <SPI_WriteInFlash+0x210>)
 8016084:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8016086:	4b76      	ldr	r3, [pc, #472]	; (8016260 <SPI_WriteInFlash+0x214>)
 8016088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801608c:	601a      	str	r2, [r3, #0]
		break;
 801608e:	e018      	b.n	80160c2 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8016090:	4b71      	ldr	r3, [pc, #452]	; (8016258 <SPI_WriteInFlash+0x20c>)
 8016092:	4a74      	ldr	r2, [pc, #464]	; (8016264 <SPI_WriteInFlash+0x218>)
 8016094:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8016096:	4b72      	ldr	r3, [pc, #456]	; (8016260 <SPI_WriteInFlash+0x214>)
 8016098:	2220      	movs	r2, #32
 801609a:	601a      	str	r2, [r3, #0]
		break;
 801609c:	e011      	b.n	80160c2 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 801609e:	4b6e      	ldr	r3, [pc, #440]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80160a0:	4a70      	ldr	r2, [pc, #448]	; (8016264 <SPI_WriteInFlash+0x218>)
 80160a2:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80160a4:	4b6e      	ldr	r3, [pc, #440]	; (8016260 <SPI_WriteInFlash+0x214>)
 80160a6:	2240      	movs	r2, #64	; 0x40
 80160a8:	601a      	str	r2, [r3, #0]
		break;
 80160aa:	e00a      	b.n	80160c2 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 80160ac:	4b6a      	ldr	r3, [pc, #424]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80160ae:	4a6e      	ldr	r2, [pc, #440]	; (8016268 <SPI_WriteInFlash+0x21c>)
 80160b0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80160b2:	4b6b      	ldr	r3, [pc, #428]	; (8016260 <SPI_WriteInFlash+0x214>)
 80160b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80160b8:	601a      	str	r2, [r3, #0]
		break;
 80160ba:	e002      	b.n	80160c2 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 80160bc:	486b      	ldr	r0, [pc, #428]	; (801626c <SPI_WriteInFlash+0x220>)
 80160be:	f00e fce7 	bl	8024a90 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80160c2:	4b65      	ldr	r3, [pc, #404]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	4a66      	ldr	r2, [pc, #408]	; (8016260 <SPI_WriteInFlash+0x214>)
 80160c8:	6812      	ldr	r2, [r2, #0]
 80160ca:	b291      	uxth	r1, r2
 80160cc:	2201      	movs	r2, #1
 80160ce:	4618      	mov	r0, r3
 80160d0:	f004 f908 	bl	801a2e4 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80160d4:	4b60      	ldr	r3, [pc, #384]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	4a61      	ldr	r2, [pc, #388]	; (8016260 <SPI_WriteInFlash+0x214>)
 80160da:	6812      	ldr	r2, [r2, #0]
 80160dc:	b291      	uxth	r1, r2
 80160de:	2200      	movs	r2, #0
 80160e0:	4618      	mov	r0, r3
 80160e2:	f004 f8ff 	bl	801a2e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 80160e6:	2364      	movs	r3, #100	; 0x64
 80160e8:	2201      	movs	r2, #1
 80160ea:	4961      	ldr	r1, [pc, #388]	; (8016270 <SPI_WriteInFlash+0x224>)
 80160ec:	4861      	ldr	r0, [pc, #388]	; (8016274 <SPI_WriteInFlash+0x228>)
 80160ee:	f006 f99b 	bl	801c428 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80160f2:	4b59      	ldr	r3, [pc, #356]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	4a5a      	ldr	r2, [pc, #360]	; (8016260 <SPI_WriteInFlash+0x214>)
 80160f8:	6812      	ldr	r2, [r2, #0]
 80160fa:	b291      	uxth	r1, r2
 80160fc:	2201      	movs	r2, #1
 80160fe:	4618      	mov	r0, r3
 8016100:	f004 f8f0 	bl	801a2e4 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016104:	4b54      	ldr	r3, [pc, #336]	; (8016258 <SPI_WriteInFlash+0x20c>)
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	4a55      	ldr	r2, [pc, #340]	; (8016260 <SPI_WriteInFlash+0x214>)
 801610a:	6812      	ldr	r2, [r2, #0]
 801610c:	b291      	uxth	r1, r2
 801610e:	2200      	movs	r2, #0
 8016110:	4618      	mov	r0, r3
 8016112:	f004 f8e7 	bl	801a2e4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 8016116:	2364      	movs	r3, #100	; 0x64
 8016118:	2201      	movs	r2, #1
 801611a:	4957      	ldr	r1, [pc, #348]	; (8016278 <SPI_WriteInFlash+0x22c>)
 801611c:	4855      	ldr	r0, [pc, #340]	; (8016274 <SPI_WriteInFlash+0x228>)
 801611e:	f006 f983 	bl	801c428 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016122:	2364      	movs	r3, #100	; 0x64
 8016124:	2201      	movs	r2, #1
 8016126:	4955      	ldr	r1, [pc, #340]	; (801627c <SPI_WriteInFlash+0x230>)
 8016128:	4852      	ldr	r0, [pc, #328]	; (8016274 <SPI_WriteInFlash+0x228>)
 801612a:	f006 faeb 	bl	801c704 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801612e:	4b4a      	ldr	r3, [pc, #296]	; (8016258 <SPI_WriteInFlash+0x20c>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	4a4b      	ldr	r2, [pc, #300]	; (8016260 <SPI_WriteInFlash+0x214>)
 8016134:	6812      	ldr	r2, [r2, #0]
 8016136:	b291      	uxth	r1, r2
 8016138:	2201      	movs	r2, #1
 801613a:	4618      	mov	r0, r3
 801613c:	f004 f8d2 	bl	801a2e4 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8016140:	4b4e      	ldr	r3, [pc, #312]	; (801627c <SPI_WriteInFlash+0x230>)
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	f003 0302 	and.w	r3, r3, #2
 8016148:	2b00      	cmp	r3, #0
 801614a:	d103      	bne.n	8016154 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 801614c:	484c      	ldr	r0, [pc, #304]	; (8016280 <SPI_WriteInFlash+0x234>)
 801614e:	f00e fc03 	bl	8024958 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016152:	e7d7      	b.n	8016104 <SPI_WriteInFlash+0xb8>
			break;
 8016154:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016156:	4b40      	ldr	r3, [pc, #256]	; (8016258 <SPI_WriteInFlash+0x20c>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4a41      	ldr	r2, [pc, #260]	; (8016260 <SPI_WriteInFlash+0x214>)
 801615c:	6812      	ldr	r2, [r2, #0]
 801615e:	b291      	uxth	r1, r2
 8016160:	2200      	movs	r2, #0
 8016162:	4618      	mov	r0, r3
 8016164:	f004 f8be 	bl	801a2e4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8016168:	2202      	movs	r2, #2
 801616a:	4b46      	ldr	r3, [pc, #280]	; (8016284 <SPI_WriteInFlash+0x238>)
 801616c:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	0c1b      	lsrs	r3, r3, #16
 8016172:	b2da      	uxtb	r2, r3
 8016174:	4b43      	ldr	r3, [pc, #268]	; (8016284 <SPI_WriteInFlash+0x238>)
 8016176:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	0a1b      	lsrs	r3, r3, #8
 801617c:	b2da      	uxtb	r2, r3
 801617e:	4b41      	ldr	r3, [pc, #260]	; (8016284 <SPI_WriteInFlash+0x238>)
 8016180:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	b2da      	uxtb	r2, r3
 8016186:	4b3f      	ldr	r3, [pc, #252]	; (8016284 <SPI_WriteInFlash+0x238>)
 8016188:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 801618a:	2364      	movs	r3, #100	; 0x64
 801618c:	2204      	movs	r2, #4
 801618e:	493d      	ldr	r1, [pc, #244]	; (8016284 <SPI_WriteInFlash+0x238>)
 8016190:	4838      	ldr	r0, [pc, #224]	; (8016274 <SPI_WriteInFlash+0x228>)
 8016192:	f006 f949 	bl	801c428 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8016196:	89ba      	ldrh	r2, [r7, #12]
 8016198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801619c:	6879      	ldr	r1, [r7, #4]
 801619e:	4835      	ldr	r0, [pc, #212]	; (8016274 <SPI_WriteInFlash+0x228>)
 80161a0:	f006 f942 	bl	801c428 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80161a4:	4b2c      	ldr	r3, [pc, #176]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	4a2d      	ldr	r2, [pc, #180]	; (8016260 <SPI_WriteInFlash+0x214>)
 80161aa:	6812      	ldr	r2, [r2, #0]
 80161ac:	b291      	uxth	r1, r2
 80161ae:	2201      	movs	r2, #1
 80161b0:	4618      	mov	r0, r3
 80161b2:	f004 f897 	bl	801a2e4 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80161b6:	4b28      	ldr	r3, [pc, #160]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	4a29      	ldr	r2, [pc, #164]	; (8016260 <SPI_WriteInFlash+0x214>)
 80161bc:	6812      	ldr	r2, [r2, #0]
 80161be:	b291      	uxth	r1, r2
 80161c0:	2200      	movs	r2, #0
 80161c2:	4618      	mov	r0, r3
 80161c4:	f004 f88e 	bl	801a2e4 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80161c8:	2205      	movs	r2, #5
 80161ca:	4b2e      	ldr	r3, [pc, #184]	; (8016284 <SPI_WriteInFlash+0x238>)
 80161cc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80161ce:	2364      	movs	r3, #100	; 0x64
 80161d0:	2201      	movs	r2, #1
 80161d2:	492c      	ldr	r1, [pc, #176]	; (8016284 <SPI_WriteInFlash+0x238>)
 80161d4:	4827      	ldr	r0, [pc, #156]	; (8016274 <SPI_WriteInFlash+0x228>)
 80161d6:	f006 f927 	bl	801c428 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80161da:	2364      	movs	r3, #100	; 0x64
 80161dc:	2201      	movs	r2, #1
 80161de:	4927      	ldr	r1, [pc, #156]	; (801627c <SPI_WriteInFlash+0x230>)
 80161e0:	4824      	ldr	r0, [pc, #144]	; (8016274 <SPI_WriteInFlash+0x228>)
 80161e2:	f006 fa8f 	bl	801c704 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80161e6:	4b1c      	ldr	r3, [pc, #112]	; (8016258 <SPI_WriteInFlash+0x20c>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	4a1d      	ldr	r2, [pc, #116]	; (8016260 <SPI_WriteInFlash+0x214>)
 80161ec:	6812      	ldr	r2, [r2, #0]
 80161ee:	b291      	uxth	r1, r2
 80161f0:	2201      	movs	r2, #1
 80161f2:	4618      	mov	r0, r3
 80161f4:	f004 f876 	bl	801a2e4 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 80161f8:	4b20      	ldr	r3, [pc, #128]	; (801627c <SPI_WriteInFlash+0x230>)
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	f003 0301 	and.w	r3, r3, #1
 8016200:	2b00      	cmp	r3, #0
 8016202:	d1d8      	bne.n	80161b6 <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8016204:	2301      	movs	r3, #1
 8016206:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8016208:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801620a:	4b13      	ldr	r3, [pc, #76]	; (8016258 <SPI_WriteInFlash+0x20c>)
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	4a14      	ldr	r2, [pc, #80]	; (8016260 <SPI_WriteInFlash+0x214>)
 8016210:	6812      	ldr	r2, [r2, #0]
 8016212:	b291      	uxth	r1, r2
 8016214:	2200      	movs	r2, #0
 8016216:	4618      	mov	r0, r3
 8016218:	f004 f864 	bl	801a2e4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 801621c:	2204      	movs	r2, #4
 801621e:	4b19      	ldr	r3, [pc, #100]	; (8016284 <SPI_WriteInFlash+0x238>)
 8016220:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8016222:	2364      	movs	r3, #100	; 0x64
 8016224:	2201      	movs	r2, #1
 8016226:	4917      	ldr	r1, [pc, #92]	; (8016284 <SPI_WriteInFlash+0x238>)
 8016228:	4812      	ldr	r0, [pc, #72]	; (8016274 <SPI_WriteInFlash+0x228>)
 801622a:	f006 f8fd 	bl	801c428 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801622e:	2364      	movs	r3, #100	; 0x64
 8016230:	2201      	movs	r2, #1
 8016232:	4912      	ldr	r1, [pc, #72]	; (801627c <SPI_WriteInFlash+0x230>)
 8016234:	480f      	ldr	r0, [pc, #60]	; (8016274 <SPI_WriteInFlash+0x228>)
 8016236:	f006 fa65 	bl	801c704 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801623a:	4b07      	ldr	r3, [pc, #28]	; (8016258 <SPI_WriteInFlash+0x20c>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	4a08      	ldr	r2, [pc, #32]	; (8016260 <SPI_WriteInFlash+0x214>)
 8016240:	6812      	ldr	r2, [r2, #0]
 8016242:	b291      	uxth	r1, r2
 8016244:	2201      	movs	r2, #1
 8016246:	4618      	mov	r0, r3
 8016248:	f004 f84c 	bl	801a2e4 <HAL_GPIO_WritePin>

	return Return_Value;
 801624c:	7dfb      	ldrb	r3, [r7, #23]
}
 801624e:	4618      	mov	r0, r3
 8016250:	3718      	adds	r7, #24
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	2000f3e0 	.word	0x2000f3e0
 801625c:	40021800 	.word	0x40021800
 8016260:	2000f3e4 	.word	0x2000f3e4
 8016264:	40020c00 	.word	0x40020c00
 8016268:	40021000 	.word	0x40021000
 801626c:	08029a8c 	.word	0x08029a8c
 8016270:	0802b6fc 	.word	0x0802b6fc
 8016274:	2000f3ec 	.word	0x2000f3ec
 8016278:	0802b6fd 	.word	0x0802b6fd
 801627c:	2000f3dc 	.word	0x2000f3dc
 8016280:	08029aa4 	.word	0x08029aa4
 8016284:	2000f3d8 	.word	0x2000f3d8

08016288 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
 801628e:	4603      	mov	r3, r0
 8016290:	6039      	str	r1, [r7, #0]
 8016292:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8016294:	2300      	movs	r3, #0
 8016296:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8016298:	79fb      	ldrb	r3, [r7, #7]
 801629a:	3b01      	subs	r3, #1
 801629c:	2b03      	cmp	r3, #3
 801629e:	d829      	bhi.n	80162f4 <SPI_MemoryEraseBySector+0x6c>
 80162a0:	a201      	add	r2, pc, #4	; (adr r2, 80162a8 <SPI_MemoryEraseBySector+0x20>)
 80162a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162a6:	bf00      	nop
 80162a8:	080162b9 	.word	0x080162b9
 80162ac:	080162c9 	.word	0x080162c9
 80162b0:	080162d7 	.word	0x080162d7
 80162b4:	080162e5 	.word	0x080162e5
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 80162b8:	4b6d      	ldr	r3, [pc, #436]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 80162ba:	4a6e      	ldr	r2, [pc, #440]	; (8016474 <SPI_MemoryEraseBySector+0x1ec>)
 80162bc:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80162be:	4b6e      	ldr	r3, [pc, #440]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 80162c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80162c4:	601a      	str	r2, [r3, #0]
		break;
 80162c6:	e018      	b.n	80162fa <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80162c8:	4b69      	ldr	r3, [pc, #420]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 80162ca:	4a6c      	ldr	r2, [pc, #432]	; (801647c <SPI_MemoryEraseBySector+0x1f4>)
 80162cc:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80162ce:	4b6a      	ldr	r3, [pc, #424]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 80162d0:	2220      	movs	r2, #32
 80162d2:	601a      	str	r2, [r3, #0]
		break;
 80162d4:	e011      	b.n	80162fa <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 80162d6:	4b66      	ldr	r3, [pc, #408]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 80162d8:	4a68      	ldr	r2, [pc, #416]	; (801647c <SPI_MemoryEraseBySector+0x1f4>)
 80162da:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80162dc:	4b66      	ldr	r3, [pc, #408]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 80162de:	2240      	movs	r2, #64	; 0x40
 80162e0:	601a      	str	r2, [r3, #0]
		break;
 80162e2:	e00a      	b.n	80162fa <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 80162e4:	4b62      	ldr	r3, [pc, #392]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 80162e6:	4a66      	ldr	r2, [pc, #408]	; (8016480 <SPI_MemoryEraseBySector+0x1f8>)
 80162e8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80162ea:	4b63      	ldr	r3, [pc, #396]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 80162ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80162f0:	601a      	str	r2, [r3, #0]
		break;
 80162f2:	e002      	b.n	80162fa <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 80162f4:	4863      	ldr	r0, [pc, #396]	; (8016484 <SPI_MemoryEraseBySector+0x1fc>)
 80162f6:	f00e fbcb 	bl	8024a90 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80162fa:	4b5d      	ldr	r3, [pc, #372]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	4a5e      	ldr	r2, [pc, #376]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 8016300:	6812      	ldr	r2, [r2, #0]
 8016302:	b291      	uxth	r1, r2
 8016304:	2200      	movs	r2, #0
 8016306:	4618      	mov	r0, r3
 8016308:	f003 ffec 	bl	801a2e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 801630c:	2364      	movs	r3, #100	; 0x64
 801630e:	2201      	movs	r2, #1
 8016310:	495d      	ldr	r1, [pc, #372]	; (8016488 <SPI_MemoryEraseBySector+0x200>)
 8016312:	485e      	ldr	r0, [pc, #376]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 8016314:	f006 f888 	bl	801c428 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016318:	4b55      	ldr	r3, [pc, #340]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	4a56      	ldr	r2, [pc, #344]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 801631e:	6812      	ldr	r2, [r2, #0]
 8016320:	b291      	uxth	r1, r2
 8016322:	2201      	movs	r2, #1
 8016324:	4618      	mov	r0, r3
 8016326:	f003 ffdd 	bl	801a2e4 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801632a:	4b51      	ldr	r3, [pc, #324]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4a52      	ldr	r2, [pc, #328]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 8016330:	6812      	ldr	r2, [r2, #0]
 8016332:	b291      	uxth	r1, r2
 8016334:	2200      	movs	r2, #0
 8016336:	4618      	mov	r0, r3
 8016338:	f003 ffd4 	bl	801a2e4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 801633c:	2364      	movs	r3, #100	; 0x64
 801633e:	2201      	movs	r2, #1
 8016340:	4953      	ldr	r1, [pc, #332]	; (8016490 <SPI_MemoryEraseBySector+0x208>)
 8016342:	4852      	ldr	r0, [pc, #328]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 8016344:	f006 f870 	bl	801c428 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016348:	2364      	movs	r3, #100	; 0x64
 801634a:	2201      	movs	r2, #1
 801634c:	4951      	ldr	r1, [pc, #324]	; (8016494 <SPI_MemoryEraseBySector+0x20c>)
 801634e:	484f      	ldr	r0, [pc, #316]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 8016350:	f006 f9d8 	bl	801c704 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016354:	4b46      	ldr	r3, [pc, #280]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	4a47      	ldr	r2, [pc, #284]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 801635a:	6812      	ldr	r2, [r2, #0]
 801635c:	b291      	uxth	r1, r2
 801635e:	2201      	movs	r2, #1
 8016360:	4618      	mov	r0, r3
 8016362:	f003 ffbf 	bl	801a2e4 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8016366:	4b4b      	ldr	r3, [pc, #300]	; (8016494 <SPI_MemoryEraseBySector+0x20c>)
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	f003 0302 	and.w	r3, r3, #2
 801636e:	2b00      	cmp	r3, #0
 8016370:	d103      	bne.n	801637a <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8016372:	4849      	ldr	r0, [pc, #292]	; (8016498 <SPI_MemoryEraseBySector+0x210>)
 8016374:	f00e faf0 	bl	8024958 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016378:	e7d7      	b.n	801632a <SPI_MemoryEraseBySector+0xa2>
			break;
 801637a:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801637c:	4b3c      	ldr	r3, [pc, #240]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	4a3d      	ldr	r2, [pc, #244]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 8016382:	6812      	ldr	r2, [r2, #0]
 8016384:	b291      	uxth	r1, r2
 8016386:	2200      	movs	r2, #0
 8016388:	4618      	mov	r0, r3
 801638a:	f003 ffab 	bl	801a2e4 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 801638e:	4b43      	ldr	r3, [pc, #268]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 8016390:	2220      	movs	r2, #32
 8016392:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	0c1b      	lsrs	r3, r3, #16
 8016398:	b2da      	uxtb	r2, r3
 801639a:	4b40      	ldr	r3, [pc, #256]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 801639c:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	0a1b      	lsrs	r3, r3, #8
 80163a2:	b2da      	uxtb	r2, r3
 80163a4:	4b3d      	ldr	r3, [pc, #244]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 80163a6:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80163a8:	683b      	ldr	r3, [r7, #0]
 80163aa:	b2da      	uxtb	r2, r3
 80163ac:	4b3b      	ldr	r3, [pc, #236]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 80163ae:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80163b0:	2364      	movs	r3, #100	; 0x64
 80163b2:	2204      	movs	r2, #4
 80163b4:	4939      	ldr	r1, [pc, #228]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 80163b6:	4835      	ldr	r0, [pc, #212]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 80163b8:	f006 f836 	bl	801c428 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80163bc:	4b2c      	ldr	r3, [pc, #176]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	4a2d      	ldr	r2, [pc, #180]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 80163c2:	6812      	ldr	r2, [r2, #0]
 80163c4:	b291      	uxth	r1, r2
 80163c6:	2201      	movs	r2, #1
 80163c8:	4618      	mov	r0, r3
 80163ca:	f003 ff8b 	bl	801a2e4 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80163ce:	4b28      	ldr	r3, [pc, #160]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	4a29      	ldr	r2, [pc, #164]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 80163d4:	6812      	ldr	r2, [r2, #0]
 80163d6:	b291      	uxth	r1, r2
 80163d8:	2200      	movs	r2, #0
 80163da:	4618      	mov	r0, r3
 80163dc:	f003 ff82 	bl	801a2e4 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80163e0:	2205      	movs	r2, #5
 80163e2:	4b2e      	ldr	r3, [pc, #184]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 80163e4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80163e6:	2364      	movs	r3, #100	; 0x64
 80163e8:	2201      	movs	r2, #1
 80163ea:	492c      	ldr	r1, [pc, #176]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 80163ec:	4827      	ldr	r0, [pc, #156]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 80163ee:	f006 f81b 	bl	801c428 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80163f2:	2364      	movs	r3, #100	; 0x64
 80163f4:	2201      	movs	r2, #1
 80163f6:	4927      	ldr	r1, [pc, #156]	; (8016494 <SPI_MemoryEraseBySector+0x20c>)
 80163f8:	4824      	ldr	r0, [pc, #144]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 80163fa:	f006 f983 	bl	801c704 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80163fe:	4b1c      	ldr	r3, [pc, #112]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	4a1d      	ldr	r2, [pc, #116]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 8016404:	6812      	ldr	r2, [r2, #0]
 8016406:	b291      	uxth	r1, r2
 8016408:	2201      	movs	r2, #1
 801640a:	4618      	mov	r0, r3
 801640c:	f003 ff6a 	bl	801a2e4 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8016410:	4b20      	ldr	r3, [pc, #128]	; (8016494 <SPI_MemoryEraseBySector+0x20c>)
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	f003 0301 	and.w	r3, r3, #1
 8016418:	2b00      	cmp	r3, #0
 801641a:	d1d8      	bne.n	80163ce <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 801641c:	2301      	movs	r3, #1
 801641e:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8016420:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016422:	4b13      	ldr	r3, [pc, #76]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	4a14      	ldr	r2, [pc, #80]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 8016428:	6812      	ldr	r2, [r2, #0]
 801642a:	b291      	uxth	r1, r2
 801642c:	2200      	movs	r2, #0
 801642e:	4618      	mov	r0, r3
 8016430:	f003 ff58 	bl	801a2e4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8016434:	2204      	movs	r2, #4
 8016436:	4b19      	ldr	r3, [pc, #100]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 8016438:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801643a:	2364      	movs	r3, #100	; 0x64
 801643c:	2201      	movs	r2, #1
 801643e:	4917      	ldr	r1, [pc, #92]	; (801649c <SPI_MemoryEraseBySector+0x214>)
 8016440:	4812      	ldr	r0, [pc, #72]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 8016442:	f005 fff1 	bl	801c428 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016446:	2364      	movs	r3, #100	; 0x64
 8016448:	2201      	movs	r2, #1
 801644a:	4912      	ldr	r1, [pc, #72]	; (8016494 <SPI_MemoryEraseBySector+0x20c>)
 801644c:	480f      	ldr	r0, [pc, #60]	; (801648c <SPI_MemoryEraseBySector+0x204>)
 801644e:	f006 f959 	bl	801c704 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016452:	4b07      	ldr	r3, [pc, #28]	; (8016470 <SPI_MemoryEraseBySector+0x1e8>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	4a08      	ldr	r2, [pc, #32]	; (8016478 <SPI_MemoryEraseBySector+0x1f0>)
 8016458:	6812      	ldr	r2, [r2, #0]
 801645a:	b291      	uxth	r1, r2
 801645c:	2201      	movs	r2, #1
 801645e:	4618      	mov	r0, r3
 8016460:	f003 ff40 	bl	801a2e4 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8016464:	68fb      	ldr	r3, [r7, #12]

}
 8016466:	4618      	mov	r0, r3
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	2000f3e0 	.word	0x2000f3e0
 8016474:	40021800 	.word	0x40021800
 8016478:	2000f3e4 	.word	0x2000f3e4
 801647c:	40020c00 	.word	0x40020c00
 8016480:	40021000 	.word	0x40021000
 8016484:	08029a8c 	.word	0x08029a8c
 8016488:	0802b6fc 	.word	0x0802b6fc
 801648c:	2000f3ec 	.word	0x2000f3ec
 8016490:	0802b6fd 	.word	0x0802b6fd
 8016494:	2000f3dc 	.word	0x2000f3dc
 8016498:	08029ac8 	.word	0x08029ac8
 801649c:	2000f3d8 	.word	0x2000f3d8

080164a0 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	60b9      	str	r1, [r7, #8]
 80164a8:	607b      	str	r3, [r7, #4]
 80164aa:	4603      	mov	r3, r0
 80164ac:	73fb      	strb	r3, [r7, #15]
 80164ae:	4613      	mov	r3, r2
 80164b0:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 80164b2:	7bfb      	ldrb	r3, [r7, #15]
 80164b4:	3b01      	subs	r3, #1
 80164b6:	2b03      	cmp	r3, #3
 80164b8:	d828      	bhi.n	801650c <SPI_ReadFromFlash+0x6c>
 80164ba:	a201      	add	r2, pc, #4	; (adr r2, 80164c0 <SPI_ReadFromFlash+0x20>)
 80164bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164c0:	080164d1 	.word	0x080164d1
 80164c4:	080164e1 	.word	0x080164e1
 80164c8:	080164ef 	.word	0x080164ef
 80164cc:	080164fd 	.word	0x080164fd
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 80164d0:	4b2d      	ldr	r3, [pc, #180]	; (8016588 <SPI_ReadFromFlash+0xe8>)
 80164d2:	4a2e      	ldr	r2, [pc, #184]	; (801658c <SPI_ReadFromFlash+0xec>)
 80164d4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80164d6:	4b2e      	ldr	r3, [pc, #184]	; (8016590 <SPI_ReadFromFlash+0xf0>)
 80164d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164dc:	601a      	str	r2, [r3, #0]
		break;
 80164de:	e018      	b.n	8016512 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80164e0:	4b29      	ldr	r3, [pc, #164]	; (8016588 <SPI_ReadFromFlash+0xe8>)
 80164e2:	4a2c      	ldr	r2, [pc, #176]	; (8016594 <SPI_ReadFromFlash+0xf4>)
 80164e4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80164e6:	4b2a      	ldr	r3, [pc, #168]	; (8016590 <SPI_ReadFromFlash+0xf0>)
 80164e8:	2220      	movs	r2, #32
 80164ea:	601a      	str	r2, [r3, #0]
		break;
 80164ec:	e011      	b.n	8016512 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 80164ee:	4b26      	ldr	r3, [pc, #152]	; (8016588 <SPI_ReadFromFlash+0xe8>)
 80164f0:	4a28      	ldr	r2, [pc, #160]	; (8016594 <SPI_ReadFromFlash+0xf4>)
 80164f2:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80164f4:	4b26      	ldr	r3, [pc, #152]	; (8016590 <SPI_ReadFromFlash+0xf0>)
 80164f6:	2240      	movs	r2, #64	; 0x40
 80164f8:	601a      	str	r2, [r3, #0]
		break;
 80164fa:	e00a      	b.n	8016512 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 80164fc:	4b22      	ldr	r3, [pc, #136]	; (8016588 <SPI_ReadFromFlash+0xe8>)
 80164fe:	4a26      	ldr	r2, [pc, #152]	; (8016598 <SPI_ReadFromFlash+0xf8>)
 8016500:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8016502:	4b23      	ldr	r3, [pc, #140]	; (8016590 <SPI_ReadFromFlash+0xf0>)
 8016504:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016508:	601a      	str	r2, [r3, #0]
		break;
 801650a:	e002      	b.n	8016512 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 801650c:	4823      	ldr	r0, [pc, #140]	; (801659c <SPI_ReadFromFlash+0xfc>)
 801650e:	f00e fabf 	bl	8024a90 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8016512:	89bb      	ldrh	r3, [r7, #12]
 8016514:	461a      	mov	r2, r3
 8016516:	2100      	movs	r1, #0
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f00e f935 	bl	8024788 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801651e:	4b1a      	ldr	r3, [pc, #104]	; (8016588 <SPI_ReadFromFlash+0xe8>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4a1b      	ldr	r2, [pc, #108]	; (8016590 <SPI_ReadFromFlash+0xf0>)
 8016524:	6812      	ldr	r2, [r2, #0]
 8016526:	b291      	uxth	r1, r2
 8016528:	2200      	movs	r2, #0
 801652a:	4618      	mov	r0, r3
 801652c:	f003 feda 	bl	801a2e4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8016530:	2203      	movs	r2, #3
 8016532:	4b1b      	ldr	r3, [pc, #108]	; (80165a0 <SPI_ReadFromFlash+0x100>)
 8016534:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	0c1b      	lsrs	r3, r3, #16
 801653a:	b2da      	uxtb	r2, r3
 801653c:	4b18      	ldr	r3, [pc, #96]	; (80165a0 <SPI_ReadFromFlash+0x100>)
 801653e:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	0a1b      	lsrs	r3, r3, #8
 8016544:	b2da      	uxtb	r2, r3
 8016546:	4b16      	ldr	r3, [pc, #88]	; (80165a0 <SPI_ReadFromFlash+0x100>)
 8016548:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801654a:	68bb      	ldr	r3, [r7, #8]
 801654c:	b2da      	uxtb	r2, r3
 801654e:	4b14      	ldr	r3, [pc, #80]	; (80165a0 <SPI_ReadFromFlash+0x100>)
 8016550:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8016552:	2364      	movs	r3, #100	; 0x64
 8016554:	2204      	movs	r2, #4
 8016556:	4912      	ldr	r1, [pc, #72]	; (80165a0 <SPI_ReadFromFlash+0x100>)
 8016558:	4812      	ldr	r0, [pc, #72]	; (80165a4 <SPI_ReadFromFlash+0x104>)
 801655a:	f005 ff65 	bl	801c428 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 801655e:	89ba      	ldrh	r2, [r7, #12]
 8016560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016564:	6879      	ldr	r1, [r7, #4]
 8016566:	480f      	ldr	r0, [pc, #60]	; (80165a4 <SPI_ReadFromFlash+0x104>)
 8016568:	f006 f8cc 	bl	801c704 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801656c:	4b06      	ldr	r3, [pc, #24]	; (8016588 <SPI_ReadFromFlash+0xe8>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	4a07      	ldr	r2, [pc, #28]	; (8016590 <SPI_ReadFromFlash+0xf0>)
 8016572:	6812      	ldr	r2, [r2, #0]
 8016574:	b291      	uxth	r1, r2
 8016576:	2201      	movs	r2, #1
 8016578:	4618      	mov	r0, r3
 801657a:	f003 feb3 	bl	801a2e4 <HAL_GPIO_WritePin>

}
 801657e:	bf00      	nop
 8016580:	3710      	adds	r7, #16
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	2000f3e0 	.word	0x2000f3e0
 801658c:	40021800 	.word	0x40021800
 8016590:	2000f3e4 	.word	0x2000f3e4
 8016594:	40020c00 	.word	0x40020c00
 8016598:	40021000 	.word	0x40021000
 801659c:	08029a8c 	.word	0x08029a8c
 80165a0:	2000f3d8 	.word	0x2000f3d8
 80165a4:	2000f3ec 	.word	0x2000f3ec

080165a8 <Get_Config>:




void Get_Config(void)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b084      	sub	sp, #16
 80165ac:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 80165ae:	2300      	movs	r3, #0
 80165b0:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 80165b2:	f240 335e 	movw	r3, #862	; 0x35e
 80165b6:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80165bc:	2300      	movs	r3, #0
 80165be:	60fb      	str	r3, [r7, #12]
 80165c0:	e01d      	b.n	80165fe <Get_Config+0x56>
	{
		HAL_Delay(20);
 80165c2:	2014      	movs	r0, #20
 80165c4:	f001 f9ca 	bl	801795c <HAL_Delay>
		if(SIZE_VAR <32)
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	2b1f      	cmp	r3, #31
 80165cc:	d809      	bhi.n	80165e2 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	492c      	ldr	r1, [pc, #176]	; (8016688 <Get_Config+0xe0>)
 80165d6:	440b      	add	r3, r1
 80165d8:	68f9      	ldr	r1, [r7, #12]
 80165da:	2001      	movs	r0, #1
 80165dc:	f7ff ff60 	bl	80164a0 <SPI_ReadFromFlash>
 80165e0:	e00a      	b.n	80165f8 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	4a28      	ldr	r2, [pc, #160]	; (8016688 <Get_Config+0xe0>)
 80165e6:	4413      	add	r3, r2
 80165e8:	2220      	movs	r2, #32
 80165ea:	68f9      	ldr	r1, [r7, #12]
 80165ec:	2001      	movs	r0, #1
 80165ee:	f7ff ff57 	bl	80164a0 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 80165f2:	68bb      	ldr	r3, [r7, #8]
 80165f4:	3b20      	subs	r3, #32
 80165f6:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	3320      	adds	r3, #32
 80165fc:	60fb      	str	r3, [r7, #12]
 80165fe:	68fa      	ldr	r2, [r7, #12]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	429a      	cmp	r2, r3
 8016604:	d3dd      	bcc.n	80165c2 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8016606:	f44f 7157 	mov.w	r1, #860	; 0x35c
 801660a:	481f      	ldr	r0, [pc, #124]	; (8016688 <Get_Config+0xe0>)
 801660c:	f7fd fb24 	bl	8013c58 <CheckCRC>
 8016610:	4603      	mov	r3, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	d013      	beq.n	801663e <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8016616:	f44f 7256 	mov.w	r2, #856	; 0x358
 801661a:	491c      	ldr	r1, [pc, #112]	; (801668c <Get_Config+0xe4>)
 801661c:	481c      	ldr	r0, [pc, #112]	; (8016690 <Get_Config+0xe8>)
 801661e:	f00e f88b 	bl	8024738 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8016622:	4a1c      	ldr	r2, [pc, #112]	; (8016694 <Get_Config+0xec>)
 8016624:	2110      	movs	r1, #16
 8016626:	2000      	movs	r0, #0
 8016628:	f7e9 fff4 	bl	8000614 <ExtractBits>
 801662c:	4603      	mov	r3, r0
 801662e:	b29a      	uxth	r2, r3
 8016630:	4b19      	ldr	r3, [pc, #100]	; (8016698 <Get_Config+0xf0>)
 8016632:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8016634:	4b19      	ldr	r3, [pc, #100]	; (801669c <Get_Config+0xf4>)
 8016636:	781b      	ldrb	r3, [r3, #0]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d121      	bne.n	8016680 <Get_Config+0xd8>
 801663c:	e01e      	b.n	801667c <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 801663e:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8016642:	4817      	ldr	r0, [pc, #92]	; (80166a0 <Get_Config+0xf8>)
 8016644:	f00e f988 	bl	8024958 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8016648:	4b16      	ldr	r3, [pc, #88]	; (80166a4 <Get_Config+0xfc>)
 801664a:	4a10      	ldr	r2, [pc, #64]	; (801668c <Get_Config+0xe4>)
 801664c:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 801664e:	4b0e      	ldr	r3, [pc, #56]	; (8016688 <Get_Config+0xe0>)
 8016650:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 8016654:	4619      	mov	r1, r3
 8016656:	4b0c      	ldr	r3, [pc, #48]	; (8016688 <Get_Config+0xe0>)
 8016658:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 801665c:	461a      	mov	r2, r3
 801665e:	4812      	ldr	r0, [pc, #72]	; (80166a8 <Get_Config+0x100>)
 8016660:	f00e f97a 	bl	8024958 <iprintf>
		printf("\nCheck for CRC:");
 8016664:	4811      	ldr	r0, [pc, #68]	; (80166ac <Get_Config+0x104>)
 8016666:	f00e f977 	bl	8024958 <iprintf>
		gucFlagUpdate =3;
 801666a:	4b11      	ldr	r3, [pc, #68]	; (80166b0 <Get_Config+0x108>)
 801666c:	2203      	movs	r2, #3
 801666e:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8016670:	4810      	ldr	r0, [pc, #64]	; (80166b4 <Get_Config+0x10c>)
 8016672:	f00e fa0d 	bl	8024a90 <puts>
			Data_Processing();
 8016676:	f000 f81f 	bl	80166b8 <Data_Processing>
 801667a:	e7fc      	b.n	8016676 <Get_Config+0xce>
	{
		readCanToStructs();
 801667c:	f7fa f8fa 	bl	8010874 <readCanToStructs>
	}
}
 8016680:	bf00      	nop
 8016682:	3710      	adds	r7, #16
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	20000660 	.word	0x20000660
 801668c:	20000664 	.word	0x20000664
 8016690:	20000304 	.word	0x20000304
 8016694:	200009bc 	.word	0x200009bc
 8016698:	2000f3ea 	.word	0x2000f3ea
 801669c:	20000a63 	.word	0x20000a63
 80166a0:	08029af8 	.word	0x08029af8
 80166a4:	20000300 	.word	0x20000300
 80166a8:	08029b20 	.word	0x08029b20
 80166ac:	08029b34 	.word	0x08029b34
 80166b0:	20000a61 	.word	0x20000a61
 80166b4:	08029b44 	.word	0x08029b44

080166b8 <Data_Processing>:


void Data_Processing(void)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 80166bc:	4b0b      	ldr	r3, [pc, #44]	; (80166ec <Data_Processing+0x34>)
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	2b03      	cmp	r3, #3
 80166c2:	d10e      	bne.n	80166e2 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 80166c4:	2000      	movs	r0, #0
 80166c6:	f7f4 fe29 	bl	800b31c <CheckForRqst>
 80166ca:	4603      	mov	r3, r0
 80166cc:	461a      	mov	r2, r3
 80166ce:	4b08      	ldr	r3, [pc, #32]	; (80166f0 <Data_Processing+0x38>)
 80166d0:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 80166d2:	4b07      	ldr	r3, [pc, #28]	; (80166f0 <Data_Processing+0x38>)
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d105      	bne.n	80166e6 <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 80166da:	2000      	movs	r0, #0
 80166dc:	f000 f80a 	bl	80166f4 <AutoLoadDat>
		}
		break;
 80166e0:	e001      	b.n	80166e6 <Data_Processing+0x2e>
	default:
		break;
 80166e2:	bf00      	nop
 80166e4:	e000      	b.n	80166e8 <Data_Processing+0x30>
		break;
 80166e6:	bf00      	nop
	}
}
 80166e8:	bf00      	nop
 80166ea:	bd80      	pop	{r7, pc}
 80166ec:	20000a61 	.word	0x20000a61
 80166f0:	20000a62 	.word	0x20000a62

080166f4 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b084      	sub	sp, #16
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	4603      	mov	r3, r0
 80166fc:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 80166fe:	2300      	movs	r3, #0
 8016700:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8016702:	79fb      	ldrb	r3, [r7, #7]
 8016704:	b29b      	uxth	r3, r3
 8016706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801670a:	4934      	ldr	r1, [pc, #208]	; (80167dc <AutoLoadDat+0xe8>)
 801670c:	4618      	mov	r0, r3
 801670e:	f7f4 ffad 	bl	800b66c <ReadAndFormConfig>
 8016712:	4603      	mov	r3, r0
 8016714:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8016716:	4832      	ldr	r0, [pc, #200]	; (80167e0 <AutoLoadDat+0xec>)
 8016718:	f004 fc7a 	bl	801b010 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 801671c:	7bbb      	ldrb	r3, [r7, #14]
 801671e:	2b01      	cmp	r3, #1
 8016720:	d921      	bls.n	8016766 <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8016722:	4b30      	ldr	r3, [pc, #192]	; (80167e4 <AutoLoadDat+0xf0>)
 8016724:	2200      	movs	r2, #0
 8016726:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8016728:	4b2c      	ldr	r3, [pc, #176]	; (80167dc <AutoLoadDat+0xe8>)
 801672a:	785b      	ldrb	r3, [r3, #1]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d107      	bne.n	8016740 <AutoLoadDat+0x4c>
 8016730:	4b2a      	ldr	r3, [pc, #168]	; (80167dc <AutoLoadDat+0xe8>)
 8016732:	789b      	ldrb	r3, [r3, #2]
 8016734:	2b01      	cmp	r3, #1
 8016736:	d103      	bne.n	8016740 <AutoLoadDat+0x4c>
 8016738:	4b28      	ldr	r3, [pc, #160]	; (80167dc <AutoLoadDat+0xe8>)
 801673a:	78db      	ldrb	r3, [r3, #3]
 801673c:	2b04      	cmp	r3, #4
 801673e:	d003      	beq.n	8016748 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8016740:	4829      	ldr	r0, [pc, #164]	; (80167e8 <AutoLoadDat+0xf4>)
 8016742:	f00e f9a5 	bl	8024a90 <puts>
				return;
 8016746:	e046      	b.n	80167d6 <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8016748:	4b28      	ldr	r3, [pc, #160]	; (80167ec <AutoLoadDat+0xf8>)
 801674a:	4a29      	ldr	r2, [pc, #164]	; (80167f0 <AutoLoadDat+0xfc>)
 801674c:	601a      	str	r2, [r3, #0]
			saveConfig();
 801674e:	f000 f85b 	bl	8016808 <saveConfig>
			gucFlagCheck =1;
 8016752:	4b28      	ldr	r3, [pc, #160]	; (80167f4 <AutoLoadDat+0x100>)
 8016754:	2201      	movs	r2, #1
 8016756:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8016758:	4b27      	ldr	r3, [pc, #156]	; (80167f8 <AutoLoadDat+0x104>)
 801675a:	2201      	movs	r2, #1
 801675c:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 801675e:	4827      	ldr	r0, [pc, #156]	; (80167fc <AutoLoadDat+0x108>)
 8016760:	f00e f996 	bl	8024a90 <puts>
			break;
 8016764:	e037      	b.n	80167d6 <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 8016766:	7bbb      	ldrb	r3, [r7, #14]
 8016768:	2b01      	cmp	r3, #1
 801676a:	d11b      	bne.n	80167a4 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 801676c:	7bfb      	ldrb	r3, [r7, #15]
 801676e:	2b03      	cmp	r3, #3
 8016770:	d109      	bne.n	8016786 <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 8016772:	4b1c      	ldr	r3, [pc, #112]	; (80167e4 <AutoLoadDat+0xf0>)
 8016774:	2200      	movs	r2, #0
 8016776:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 8016778:	79fb      	ldrb	r3, [r7, #7]
 801677a:	2203      	movs	r2, #3
 801677c:	2101      	movs	r1, #1
 801677e:	4618      	mov	r0, r3
 8016780:	f7f4 ff28 	bl	800b5d4 <SendAck>
				break;
 8016784:	e027      	b.n	80167d6 <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 8016786:	79fb      	ldrb	r3, [r7, #7]
 8016788:	2202      	movs	r2, #2
 801678a:	2101      	movs	r1, #1
 801678c:	4618      	mov	r0, r3
 801678e:	f7f4 ff21 	bl	800b5d4 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 8016792:	f001 f8d7 	bl	8017944 <HAL_GetTick>
 8016796:	4603      	mov	r3, r0
 8016798:	4a19      	ldr	r2, [pc, #100]	; (8016800 <AutoLoadDat+0x10c>)
 801679a:	6013      	str	r3, [r2, #0]
			AckCount++;
 801679c:	7bfb      	ldrb	r3, [r7, #15]
 801679e:	3301      	adds	r3, #1
 80167a0:	73fb      	strb	r3, [r7, #15]
 80167a2:	e7ae      	b.n	8016702 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 80167a4:	f001 f8ce 	bl	8017944 <HAL_GetTick>
 80167a8:	4602      	mov	r2, r0
 80167aa:	4b15      	ldr	r3, [pc, #84]	; (8016800 <AutoLoadDat+0x10c>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	1ad3      	subs	r3, r2, r3
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	bfb8      	it	lt
 80167b4:	425b      	neglt	r3, r3
 80167b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80167ba:	4293      	cmp	r3, r2
 80167bc:	dda1      	ble.n	8016702 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 80167be:	4b09      	ldr	r3, [pc, #36]	; (80167e4 <AutoLoadDat+0xf0>)
 80167c0:	2200      	movs	r2, #0
 80167c2:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 80167c4:	480f      	ldr	r0, [pc, #60]	; (8016804 <AutoLoadDat+0x110>)
 80167c6:	f00e f963 	bl	8024a90 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 80167ca:	79fb      	ldrb	r3, [r7, #7]
 80167cc:	2205      	movs	r2, #5
 80167ce:	2101      	movs	r1, #1
 80167d0:	4618      	mov	r0, r3
 80167d2:	f7f4 feff 	bl	800b5d4 <SendAck>
				break;
			}
		}
	}
}
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	20000660 	.word	0x20000660
 80167e0:	20009d64 	.word	0x20009d64
 80167e4:	20000a62 	.word	0x20000a62
 80167e8:	08029b84 	.word	0x08029b84
 80167ec:	20000300 	.word	0x20000300
 80167f0:	20000664 	.word	0x20000664
 80167f4:	2000f3d4 	.word	0x2000f3d4
 80167f8:	2000f3d5 	.word	0x2000f3d5
 80167fc:	08029b9c 	.word	0x08029b9c
 8016800:	20000a64 	.word	0x20000a64
 8016804:	08029bac 	.word	0x08029bac

08016808 <saveConfig>:

unsigned char saveConfig(void)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b084      	sub	sp, #16
 801680c:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 801680e:	2300      	movs	r3, #0
 8016810:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8016812:	4825      	ldr	r0, [pc, #148]	; (80168a8 <saveConfig+0xa0>)
 8016814:	f00e f93c 	bl	8024a90 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8016818:	2300      	movs	r3, #0
 801681a:	60fb      	str	r3, [r7, #12]
 801681c:	e011      	b.n	8016842 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	031b      	lsls	r3, r3, #12
 8016822:	4619      	mov	r1, r3
 8016824:	2001      	movs	r0, #1
 8016826:	f7ff fd2f 	bl	8016288 <SPI_MemoryEraseBySector>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	d005      	beq.n	801683c <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8016830:	481e      	ldr	r0, [pc, #120]	; (80168ac <saveConfig+0xa4>)
 8016832:	f004 fbed 	bl	801b010 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 8016836:	481e      	ldr	r0, [pc, #120]	; (80168b0 <saveConfig+0xa8>)
 8016838:	f00e f92a 	bl	8024a90 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	3301      	adds	r3, #1
 8016840:	60fb      	str	r3, [r7, #12]
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2b05      	cmp	r3, #5
 8016846:	d9ea      	bls.n	801681e <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8016848:	f240 335f 	movw	r3, #863	; 0x35f
 801684c:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8016852:	2300      	movs	r3, #0
 8016854:	60fb      	str	r3, [r7, #12]
 8016856:	e01d      	b.n	8016894 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8016858:	4814      	ldr	r0, [pc, #80]	; (80168ac <saveConfig+0xa4>)
 801685a:	f004 fbd9 	bl	801b010 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	2b1f      	cmp	r3, #31
 8016862:	d809      	bhi.n	8016878 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	b29a      	uxth	r2, r3
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	4912      	ldr	r1, [pc, #72]	; (80168b4 <saveConfig+0xac>)
 801686c:	440b      	add	r3, r1
 801686e:	68f9      	ldr	r1, [r7, #12]
 8016870:	2001      	movs	r0, #1
 8016872:	f7ff fbeb 	bl	801604c <SPI_WriteInFlash>
 8016876:	e00a      	b.n	801688e <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	4a0e      	ldr	r2, [pc, #56]	; (80168b4 <saveConfig+0xac>)
 801687c:	4413      	add	r3, r2
 801687e:	2220      	movs	r2, #32
 8016880:	68f9      	ldr	r1, [r7, #12]
 8016882:	2001      	movs	r0, #1
 8016884:	f7ff fbe2 	bl	801604c <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	3b20      	subs	r3, #32
 801688c:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	3320      	adds	r3, #32
 8016892:	60fb      	str	r3, [r7, #12]
 8016894:	68fa      	ldr	r2, [r7, #12]
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	429a      	cmp	r2, r3
 801689a:	d3dd      	bcc.n	8016858 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 801689c:	4806      	ldr	r0, [pc, #24]	; (80168b8 <saveConfig+0xb0>)
 801689e:	f00e f85b 	bl	8024958 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 80168a2:	f7ff faff 	bl	8015ea4 <__NVIC_SystemReset>
 80168a6:	bf00      	nop
 80168a8:	08029bc8 	.word	0x08029bc8
 80168ac:	20009d64 	.word	0x20009d64
 80168b0:	08029bd4 	.word	0x08029bd4
 80168b4:	20000660 	.word	0x20000660
 80168b8:	08029be8 	.word	0x08029be8

080168bc <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 80168c0:	4b14      	ldr	r3, [pc, #80]	; (8016914 <Print_BuildDat_Details+0x58>)
 80168c2:	781b      	ldrb	r3, [r3, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d022      	beq.n	801690e <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 80168c8:	4b13      	ldr	r3, [pc, #76]	; (8016918 <Print_BuildDat_Details+0x5c>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7f8 fd27 	bl	800f320 <HAL_Elaps_Ticks>
 80168d2:	4603      	mov	r3, r0
 80168d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80168d8:	4293      	cmp	r3, r2
 80168da:	d919      	bls.n	8016910 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 80168dc:	480f      	ldr	r0, [pc, #60]	; (801691c <Print_BuildDat_Details+0x60>)
 80168de:	f00e f8d7 	bl	8024a90 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80168e2:	490f      	ldr	r1, [pc, #60]	; (8016920 <Print_BuildDat_Details+0x64>)
 80168e4:	480f      	ldr	r0, [pc, #60]	; (8016924 <Print_BuildDat_Details+0x68>)
 80168e6:	f00e f837 	bl	8024958 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80168ea:	4b0f      	ldr	r3, [pc, #60]	; (8016928 <Print_BuildDat_Details+0x6c>)
 80168ec:	881b      	ldrh	r3, [r3, #0]
 80168ee:	4619      	mov	r1, r3
 80168f0:	480e      	ldr	r0, [pc, #56]	; (801692c <Print_BuildDat_Details+0x70>)
 80168f2:	f00e f831 	bl	8024958 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 80168f6:	4b0e      	ldr	r3, [pc, #56]	; (8016930 <Print_BuildDat_Details+0x74>)
 80168f8:	881b      	ldrh	r3, [r3, #0]
 80168fa:	4619      	mov	r1, r3
 80168fc:	480d      	ldr	r0, [pc, #52]	; (8016934 <Print_BuildDat_Details+0x78>)
 80168fe:	f00e f82b 	bl	8024958 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8016902:	f001 f81f 	bl	8017944 <HAL_GetTick>
 8016906:	4603      	mov	r3, r0
 8016908:	4a03      	ldr	r2, [pc, #12]	; (8016918 <Print_BuildDat_Details+0x5c>)
 801690a:	6013      	str	r3, [r2, #0]
 801690c:	e000      	b.n	8016910 <Print_BuildDat_Details+0x54>
		return;
 801690e:	bf00      	nop
	}
}
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	2000065d 	.word	0x2000065d
 8016918:	2000f450 	.word	0x2000f450
 801691c:	08029c04 	.word	0x08029c04
 8016920:	20000305 	.word	0x20000305
 8016924:	08029c38 	.word	0x08029c38
 8016928:	2000f3ea 	.word	0x2000f3ea
 801692c:	08029c4c 	.word	0x08029c4c
 8016930:	2000f3e8 	.word	0x2000f3e8
 8016934:	08029c5c 	.word	0x08029c5c

08016938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801693e:	4b0f      	ldr	r3, [pc, #60]	; (801697c <HAL_MspInit+0x44>)
 8016940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016942:	4a0e      	ldr	r2, [pc, #56]	; (801697c <HAL_MspInit+0x44>)
 8016944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016948:	6413      	str	r3, [r2, #64]	; 0x40
 801694a:	4b0c      	ldr	r3, [pc, #48]	; (801697c <HAL_MspInit+0x44>)
 801694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801694e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016952:	607b      	str	r3, [r7, #4]
 8016954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016956:	4b09      	ldr	r3, [pc, #36]	; (801697c <HAL_MspInit+0x44>)
 8016958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801695a:	4a08      	ldr	r2, [pc, #32]	; (801697c <HAL_MspInit+0x44>)
 801695c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016960:	6453      	str	r3, [r2, #68]	; 0x44
 8016962:	4b06      	ldr	r3, [pc, #24]	; (801697c <HAL_MspInit+0x44>)
 8016964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801696a:	603b      	str	r3, [r7, #0]
 801696c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 801696e:	2004      	movs	r0, #4
 8016970:	f001 ffbe 	bl	80188f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016974:	bf00      	nop
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	40023800 	.word	0x40023800

08016980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016980:	b480      	push	{r7}
 8016982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8016984:	e7fe      	b.n	8016984 <NMI_Handler+0x4>

08016986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016986:	b480      	push	{r7}
 8016988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801698a:	e7fe      	b.n	801698a <HardFault_Handler+0x4>

0801698c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801698c:	b480      	push	{r7}
 801698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016990:	e7fe      	b.n	8016990 <MemManage_Handler+0x4>

08016992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016992:	b480      	push	{r7}
 8016994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016996:	e7fe      	b.n	8016996 <BusFault_Handler+0x4>

08016998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016998:	b480      	push	{r7}
 801699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801699c:	e7fe      	b.n	801699c <UsageFault_Handler+0x4>

0801699e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801699e:	b480      	push	{r7}
 80169a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80169a2:	bf00      	nop
 80169a4:	46bd      	mov	sp, r7
 80169a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169aa:	4770      	bx	lr

080169ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80169ac:	b480      	push	{r7}
 80169ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80169b0:	bf00      	nop
 80169b2:	46bd      	mov	sp, r7
 80169b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b8:	4770      	bx	lr

080169ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80169ba:	b480      	push	{r7}
 80169bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80169be:	bf00      	nop
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr

080169c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80169cc:	f000 ffa6 	bl	801791c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80169d0:	bf00      	nop
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 80169d8:	2001      	movs	r0, #1
 80169da:	f003 fcb7 	bl	801a34c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80169de:	bf00      	nop
 80169e0:	bd80      	pop	{r7, pc}

080169e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80169e2:	b580      	push	{r7, lr}
 80169e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 80169e6:	2002      	movs	r0, #2
 80169e8:	f003 fcb0 	bl	801a34c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80169ec:	bf00      	nop
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80169f4:	4802      	ldr	r0, [pc, #8]	; (8016a00 <TIM4_IRQHandler+0x10>)
 80169f6:	f006 fbcd 	bl	801d194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80169fa:	bf00      	nop
 80169fc:	bd80      	pop	{r7, pc}
 80169fe:	bf00      	nop
 8016a00:	2000f458 	.word	0x2000f458

08016a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8016a08:	4802      	ldr	r0, [pc, #8]	; (8016a14 <USART1_IRQHandler+0x10>)
 8016a0a:	f006 fde7 	bl	801d5dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8016a0e:	bf00      	nop
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	20011390 	.word	0x20011390

08016a18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8016a1c:	4802      	ldr	r0, [pc, #8]	; (8016a28 <TIM5_IRQHandler+0x10>)
 8016a1e:	f006 fbb9 	bl	801d194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8016a22:	bf00      	nop
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	2000f514 	.word	0x2000f514

08016a2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8016a30:	4802      	ldr	r0, [pc, #8]	; (8016a3c <UART4_IRQHandler+0x10>)
 8016a32:	f006 fdd3 	bl	801d5dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8016a36:	bf00      	nop
 8016a38:	bd80      	pop	{r7, pc}
 8016a3a:	bf00      	nop
 8016a3c:	20011168 	.word	0x20011168

08016a40 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8016a44:	4802      	ldr	r0, [pc, #8]	; (8016a50 <UART5_IRQHandler+0x10>)
 8016a46:	f006 fdc9 	bl	801d5dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8016a4a:	bf00      	nop
 8016a4c:	bd80      	pop	{r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	20011220 	.word	0x20011220

08016a54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8016a58:	4802      	ldr	r0, [pc, #8]	; (8016a64 <TIM6_DAC_IRQHandler+0x10>)
 8016a5a:	f006 fb9b 	bl	801d194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8016a5e:	bf00      	nop
 8016a60:	bd80      	pop	{r7, pc}
 8016a62:	bf00      	nop
 8016a64:	2000f5d0 	.word	0x2000f5d0

08016a68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8016a6c:	4802      	ldr	r0, [pc, #8]	; (8016a78 <TIM7_IRQHandler+0x10>)
 8016a6e:	f006 fb91 	bl	801d194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8016a72:	bf00      	nop
 8016a74:	bd80      	pop	{r7, pc}
 8016a76:	bf00      	nop
 8016a78:	2000f68c 	.word	0x2000f68c

08016a7c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8016a80:	4802      	ldr	r0, [pc, #8]	; (8016a8c <ETH_IRQHandler+0x10>)
 8016a82:	f002 fb85 	bl	8019190 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8016a86:	bf00      	nop
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	bf00      	nop
 8016a8c:	20015da4 	.word	0x20015da4

08016a90 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8016a94:	4802      	ldr	r0, [pc, #8]	; (8016aa0 <CAN2_RX0_IRQHandler+0x10>)
 8016a96:	f001 fc27 	bl	80182e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8016a9a:	bf00      	nop
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	20009be0 	.word	0x20009be0

08016aa4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8016aa8:	4802      	ldr	r0, [pc, #8]	; (8016ab4 <CAN2_RX1_IRQHandler+0x10>)
 8016aaa:	f001 fc1d 	bl	80182e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8016aae:	bf00      	nop
 8016ab0:	bd80      	pop	{r7, pc}
 8016ab2:	bf00      	nop
 8016ab4:	20009be0 	.word	0x20009be0

08016ab8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8016abc:	4802      	ldr	r0, [pc, #8]	; (8016ac8 <UART7_IRQHandler+0x10>)
 8016abe:	f006 fd8d 	bl	801d5dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8016ac2:	bf00      	nop
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	200112d8 	.word	0x200112d8

08016acc <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8016ad0:	4802      	ldr	r0, [pc, #8]	; (8016adc <CAN3_RX0_IRQHandler+0x10>)
 8016ad2:	f001 fc09 	bl	80182e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8016ad6:	bf00      	nop
 8016ad8:	bd80      	pop	{r7, pc}
 8016ada:	bf00      	nop
 8016adc:	20009c44 	.word	0x20009c44

08016ae0 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8016ae4:	4802      	ldr	r0, [pc, #8]	; (8016af0 <CAN3_RX1_IRQHandler+0x10>)
 8016ae6:	f001 fbff 	bl	80182e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8016aea:	bf00      	nop
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	20009c44 	.word	0x20009c44

08016af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016af4:	b480      	push	{r7}
 8016af6:	af00      	add	r7, sp, #0
	return 1;
 8016af8:	2301      	movs	r3, #1
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr

08016b04 <_kill>:

int _kill(int pid, int sig)
{
 8016b04:	b480      	push	{r7}
 8016b06:	b083      	sub	sp, #12
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
 8016b0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016b0e:	4b05      	ldr	r3, [pc, #20]	; (8016b24 <_kill+0x20>)
 8016b10:	2216      	movs	r2, #22
 8016b12:	601a      	str	r2, [r3, #0]
	return -1;
 8016b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	370c      	adds	r7, #12
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b22:	4770      	bx	lr
 8016b24:	200199e8 	.word	0x200199e8

08016b28 <_exit>:

void _exit (int status)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016b30:	f04f 31ff 	mov.w	r1, #4294967295
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f7ff ffe5 	bl	8016b04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8016b3a:	e7fe      	b.n	8016b3a <_exit+0x12>

08016b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b086      	sub	sp, #24
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	60f8      	str	r0, [r7, #12]
 8016b44:	60b9      	str	r1, [r7, #8]
 8016b46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016b48:	2300      	movs	r3, #0
 8016b4a:	617b      	str	r3, [r7, #20]
 8016b4c:	e00a      	b.n	8016b64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016b4e:	f3af 8000 	nop.w
 8016b52:	4601      	mov	r1, r0
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	1c5a      	adds	r2, r3, #1
 8016b58:	60ba      	str	r2, [r7, #8]
 8016b5a:	b2ca      	uxtb	r2, r1
 8016b5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	3301      	adds	r3, #1
 8016b62:	617b      	str	r3, [r7, #20]
 8016b64:	697a      	ldr	r2, [r7, #20]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	dbf0      	blt.n	8016b4e <_read+0x12>
	}

return len;
 8016b6c:	687b      	ldr	r3, [r7, #4]
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3718      	adds	r7, #24
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}

08016b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b086      	sub	sp, #24
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	60f8      	str	r0, [r7, #12]
 8016b7e:	60b9      	str	r1, [r7, #8]
 8016b80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016b82:	2300      	movs	r3, #0
 8016b84:	617b      	str	r3, [r7, #20]
 8016b86:	e009      	b.n	8016b9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	1c5a      	adds	r2, r3, #1
 8016b8c:	60ba      	str	r2, [r7, #8]
 8016b8e:	781b      	ldrb	r3, [r3, #0]
 8016b90:	4618      	mov	r0, r3
 8016b92:	f7e9 ff7f 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016b96:	697b      	ldr	r3, [r7, #20]
 8016b98:	3301      	adds	r3, #1
 8016b9a:	617b      	str	r3, [r7, #20]
 8016b9c:	697a      	ldr	r2, [r7, #20]
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	dbf1      	blt.n	8016b88 <_write+0x12>
	}
	return len;
 8016ba4:	687b      	ldr	r3, [r7, #4]
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	3718      	adds	r7, #24
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}

08016bae <_close>:

int _close(int file)
{
 8016bae:	b480      	push	{r7}
 8016bb0:	b083      	sub	sp, #12
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
	return -1;
 8016bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	370c      	adds	r7, #12
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr

08016bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016bc6:	b480      	push	{r7}
 8016bc8:	b083      	sub	sp, #12
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
 8016bce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016bd6:	605a      	str	r2, [r3, #4]
	return 0;
 8016bd8:	2300      	movs	r3, #0
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	370c      	adds	r7, #12
 8016bde:	46bd      	mov	sp, r7
 8016be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be4:	4770      	bx	lr

08016be6 <_isatty>:

int _isatty(int file)
{
 8016be6:	b480      	push	{r7}
 8016be8:	b083      	sub	sp, #12
 8016bea:	af00      	add	r7, sp, #0
 8016bec:	6078      	str	r0, [r7, #4]
	return 1;
 8016bee:	2301      	movs	r3, #1
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	370c      	adds	r7, #12
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfa:	4770      	bx	lr

08016bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016bfc:	b480      	push	{r7}
 8016bfe:	b085      	sub	sp, #20
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	607a      	str	r2, [r7, #4]
	return 0;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3714      	adds	r7, #20
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c14:	4770      	bx	lr
	...

08016c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016c18:	b480      	push	{r7}
 8016c1a:	b087      	sub	sp, #28
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016c20:	4a14      	ldr	r2, [pc, #80]	; (8016c74 <_sbrk+0x5c>)
 8016c22:	4b15      	ldr	r3, [pc, #84]	; (8016c78 <_sbrk+0x60>)
 8016c24:	1ad3      	subs	r3, r2, r3
 8016c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016c2c:	4b13      	ldr	r3, [pc, #76]	; (8016c7c <_sbrk+0x64>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d102      	bne.n	8016c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016c34:	4b11      	ldr	r3, [pc, #68]	; (8016c7c <_sbrk+0x64>)
 8016c36:	4a12      	ldr	r2, [pc, #72]	; (8016c80 <_sbrk+0x68>)
 8016c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8016c3a:	4b10      	ldr	r3, [pc, #64]	; (8016c7c <_sbrk+0x64>)
 8016c3c:	681a      	ldr	r2, [r3, #0]
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	4413      	add	r3, r2
 8016c42:	693a      	ldr	r2, [r7, #16]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d205      	bcs.n	8016c54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8016c48:	4b0e      	ldr	r3, [pc, #56]	; (8016c84 <_sbrk+0x6c>)
 8016c4a:	220c      	movs	r2, #12
 8016c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8016c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c52:	e009      	b.n	8016c68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8016c54:	4b09      	ldr	r3, [pc, #36]	; (8016c7c <_sbrk+0x64>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016c5a:	4b08      	ldr	r3, [pc, #32]	; (8016c7c <_sbrk+0x64>)
 8016c5c:	681a      	ldr	r2, [r3, #0]
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	4413      	add	r3, r2
 8016c62:	4a06      	ldr	r2, [pc, #24]	; (8016c7c <_sbrk+0x64>)
 8016c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016c66:	68fb      	ldr	r3, [r7, #12]
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	371c      	adds	r7, #28
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c72:	4770      	bx	lr
 8016c74:	20080000 	.word	0x20080000
 8016c78:	00000400 	.word	0x00000400
 8016c7c:	2000f454 	.word	0x2000f454
 8016c80:	200199f0 	.word	0x200199f0
 8016c84:	200199e8 	.word	0x200199e8

08016c88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016c88:	b480      	push	{r7}
 8016c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016c8c:	4b06      	ldr	r3, [pc, #24]	; (8016ca8 <SystemInit+0x20>)
 8016c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c92:	4a05      	ldr	r2, [pc, #20]	; (8016ca8 <SystemInit+0x20>)
 8016c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016c9c:	bf00      	nop
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca4:	4770      	bx	lr
 8016ca6:	bf00      	nop
 8016ca8:	e000ed00 	.word	0xe000ed00

08016cac <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8016cb0:	4b16      	ldr	r3, [pc, #88]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cb2:	4a17      	ldr	r2, [pc, #92]	; (8016d10 <MX_USART1_UART_Init+0x64>)
 8016cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8016cb6:	4b15      	ldr	r3, [pc, #84]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8016cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8016cbe:	4b13      	ldr	r3, [pc, #76]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8016cc4:	4b11      	ldr	r3, [pc, #68]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8016cca:	4b10      	ldr	r3, [pc, #64]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016ccc:	2200      	movs	r2, #0
 8016cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8016cd0:	4b0e      	ldr	r3, [pc, #56]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cd2:	220c      	movs	r2, #12
 8016cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8016cd6:	4b0d      	ldr	r3, [pc, #52]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cd8:	2200      	movs	r2, #0
 8016cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8016cdc:	4b0b      	ldr	r3, [pc, #44]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cde:	2200      	movs	r2, #0
 8016ce0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8016ce2:	4b0a      	ldr	r3, [pc, #40]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8016ce8:	4b08      	ldr	r3, [pc, #32]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cea:	2200      	movs	r2, #0
 8016cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8016cee:	4807      	ldr	r0, [pc, #28]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016cf0:	f006 fb92 	bl	801d418 <HAL_UART_Init>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d001      	beq.n	8016cfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8016cfa:	f7ff f885 	bl	8015e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8016cfe:	2280      	movs	r2, #128	; 0x80
 8016d00:	4904      	ldr	r1, [pc, #16]	; (8016d14 <MX_USART1_UART_Init+0x68>)
 8016d02:	4802      	ldr	r0, [pc, #8]	; (8016d0c <MX_USART1_UART_Init+0x60>)
 8016d04:	f007 fef4 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8016d08:	bf00      	nop
 8016d0a:	bd80      	pop	{r7, pc}
 8016d0c:	20011390 	.word	0x20011390
 8016d10:	40011000 	.word	0x40011000
 8016d14:	20010f68 	.word	0x20010f68

08016d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b0b4      	sub	sp, #208	; 0xd0
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016d20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016d24:	2200      	movs	r2, #0
 8016d26:	601a      	str	r2, [r3, #0]
 8016d28:	605a      	str	r2, [r3, #4]
 8016d2a:	609a      	str	r2, [r3, #8]
 8016d2c:	60da      	str	r2, [r3, #12]
 8016d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016d34:	2290      	movs	r2, #144	; 0x90
 8016d36:	2100      	movs	r1, #0
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f00d fd25 	bl	8024788 <memset>
  if(uartHandle->Instance==UART4)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	4aa7      	ldr	r2, [pc, #668]	; (8016fe0 <HAL_UART_MspInit+0x2c8>)
 8016d44:	4293      	cmp	r3, r2
 8016d46:	d145      	bne.n	8016dd4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8016d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016d56:	4618      	mov	r0, r3
 8016d58:	f004 fdfe 	bl	801b958 <HAL_RCCEx_PeriphCLKConfig>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d001      	beq.n	8016d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8016d62:	f7ff f851 	bl	8015e08 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8016d66:	4b9f      	ldr	r3, [pc, #636]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d6a:	4a9e      	ldr	r2, [pc, #632]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016d70:	6413      	str	r3, [r2, #64]	; 0x40
 8016d72:	4b9c      	ldr	r3, [pc, #624]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8016d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8016d7e:	4b99      	ldr	r3, [pc, #612]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d82:	4a98      	ldr	r2, [pc, #608]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d88:	6313      	str	r3, [r2, #48]	; 0x30
 8016d8a:	4b96      	ldr	r3, [pc, #600]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d92:	627b      	str	r3, [r7, #36]	; 0x24
 8016d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8016d96:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8016d9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016d9e:	2302      	movs	r3, #2
 8016da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016da4:	2300      	movs	r3, #0
 8016da6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016daa:	2303      	movs	r3, #3
 8016dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8016db0:	2308      	movs	r3, #8
 8016db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8016db6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016dba:	4619      	mov	r1, r3
 8016dbc:	488a      	ldr	r0, [pc, #552]	; (8016fe8 <HAL_UART_MspInit+0x2d0>)
 8016dbe:	f003 f8cd 	bl	8019f5c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	2105      	movs	r1, #5
 8016dc6:	2034      	movs	r0, #52	; 0x34
 8016dc8:	f001 fd9d 	bl	8018906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8016dcc:	2034      	movs	r0, #52	; 0x34
 8016dce:	f001 fdb6 	bl	801893e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8016dd2:	e100      	b.n	8016fd6 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	4a84      	ldr	r2, [pc, #528]	; (8016fec <HAL_UART_MspInit+0x2d4>)
 8016dda:	4293      	cmp	r3, r2
 8016ddc:	d167      	bne.n	8016eae <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8016dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8016de4:	2300      	movs	r3, #0
 8016de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016dee:	4618      	mov	r0, r3
 8016df0:	f004 fdb2 	bl	801b958 <HAL_RCCEx_PeriphCLKConfig>
 8016df4:	4603      	mov	r3, r0
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d001      	beq.n	8016dfe <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8016dfa:	f7ff f805 	bl	8015e08 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8016dfe:	4b79      	ldr	r3, [pc, #484]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e02:	4a78      	ldr	r2, [pc, #480]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e08:	6413      	str	r3, [r2, #64]	; 0x40
 8016e0a:	4b76      	ldr	r3, [pc, #472]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016e12:	623b      	str	r3, [r7, #32]
 8016e14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016e16:	4b73      	ldr	r3, [pc, #460]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e1a:	4a72      	ldr	r2, [pc, #456]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e1c:	f043 0308 	orr.w	r3, r3, #8
 8016e20:	6313      	str	r3, [r2, #48]	; 0x30
 8016e22:	4b70      	ldr	r3, [pc, #448]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e26:	f003 0308 	and.w	r3, r3, #8
 8016e2a:	61fb      	str	r3, [r7, #28]
 8016e2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016e2e:	4b6d      	ldr	r3, [pc, #436]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e32:	4a6c      	ldr	r2, [pc, #432]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e34:	f043 0302 	orr.w	r3, r3, #2
 8016e38:	6313      	str	r3, [r2, #48]	; 0x30
 8016e3a:	4b6a      	ldr	r3, [pc, #424]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e3e:	f003 0302 	and.w	r3, r3, #2
 8016e42:	61bb      	str	r3, [r7, #24]
 8016e44:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8016e46:	2304      	movs	r3, #4
 8016e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016e4c:	2302      	movs	r3, #2
 8016e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e52:	2300      	movs	r3, #0
 8016e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016e58:	2303      	movs	r3, #3
 8016e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8016e5e:	2308      	movs	r3, #8
 8016e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8016e64:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016e68:	4619      	mov	r1, r3
 8016e6a:	4861      	ldr	r0, [pc, #388]	; (8016ff0 <HAL_UART_MspInit+0x2d8>)
 8016e6c:	f003 f876 	bl	8019f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8016e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016e78:	2302      	movs	r3, #2
 8016e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016e84:	2303      	movs	r3, #3
 8016e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8016e8a:	2307      	movs	r3, #7
 8016e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8016e90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016e94:	4619      	mov	r1, r3
 8016e96:	4857      	ldr	r0, [pc, #348]	; (8016ff4 <HAL_UART_MspInit+0x2dc>)
 8016e98:	f003 f860 	bl	8019f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	2105      	movs	r1, #5
 8016ea0:	2035      	movs	r0, #53	; 0x35
 8016ea2:	f001 fd30 	bl	8018906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8016ea6:	2035      	movs	r0, #53	; 0x35
 8016ea8:	f001 fd49 	bl	801893e <HAL_NVIC_EnableIRQ>
}
 8016eac:	e093      	b.n	8016fd6 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4a51      	ldr	r2, [pc, #324]	; (8016ff8 <HAL_UART_MspInit+0x2e0>)
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d145      	bne.n	8016f44 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8016eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f004 fd45 	bl	801b958 <HAL_RCCEx_PeriphCLKConfig>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d001      	beq.n	8016ed8 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8016ed4:	f7fe ff98 	bl	8015e08 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8016ed8:	4b42      	ldr	r3, [pc, #264]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016edc:	4a41      	ldr	r2, [pc, #260]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8016ee4:	4b3f      	ldr	r3, [pc, #252]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016eec:	617b      	str	r3, [r7, #20]
 8016eee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8016ef0:	4b3c      	ldr	r3, [pc, #240]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ef4:	4a3b      	ldr	r2, [pc, #236]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016ef6:	f043 0320 	orr.w	r3, r3, #32
 8016efa:	6313      	str	r3, [r2, #48]	; 0x30
 8016efc:	4b39      	ldr	r3, [pc, #228]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f00:	f003 0320 	and.w	r3, r3, #32
 8016f04:	613b      	str	r3, [r7, #16]
 8016f06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8016f08:	23c0      	movs	r3, #192	; 0xc0
 8016f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f0e:	2302      	movs	r3, #2
 8016f10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f14:	2300      	movs	r3, #0
 8016f16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016f1a:	2303      	movs	r3, #3
 8016f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8016f20:	2308      	movs	r3, #8
 8016f22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8016f26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016f2a:	4619      	mov	r1, r3
 8016f2c:	4833      	ldr	r0, [pc, #204]	; (8016ffc <HAL_UART_MspInit+0x2e4>)
 8016f2e:	f003 f815 	bl	8019f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8016f32:	2200      	movs	r2, #0
 8016f34:	2105      	movs	r1, #5
 8016f36:	2052      	movs	r0, #82	; 0x52
 8016f38:	f001 fce5 	bl	8018906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8016f3c:	2052      	movs	r0, #82	; 0x52
 8016f3e:	f001 fcfe 	bl	801893e <HAL_NVIC_EnableIRQ>
}
 8016f42:	e048      	b.n	8016fd6 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	4a2d      	ldr	r2, [pc, #180]	; (8017000 <HAL_UART_MspInit+0x2e8>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	d143      	bne.n	8016fd6 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8016f4e:	2340      	movs	r3, #64	; 0x40
 8016f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8016f52:	2300      	movs	r3, #0
 8016f54:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f004 fcfc 	bl	801b958 <HAL_RCCEx_PeriphCLKConfig>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d001      	beq.n	8016f6a <HAL_UART_MspInit+0x252>
      Error_Handler();
 8016f66:	f7fe ff4f 	bl	8015e08 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8016f6a:	4b1e      	ldr	r3, [pc, #120]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f6e:	4a1d      	ldr	r2, [pc, #116]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016f70:	f043 0310 	orr.w	r3, r3, #16
 8016f74:	6453      	str	r3, [r2, #68]	; 0x44
 8016f76:	4b1b      	ldr	r3, [pc, #108]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f7a:	f003 0310 	and.w	r3, r3, #16
 8016f7e:	60fb      	str	r3, [r7, #12]
 8016f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016f82:	4b18      	ldr	r3, [pc, #96]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f86:	4a17      	ldr	r2, [pc, #92]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016f88:	f043 0301 	orr.w	r3, r3, #1
 8016f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8016f8e:	4b15      	ldr	r3, [pc, #84]	; (8016fe4 <HAL_UART_MspInit+0x2cc>)
 8016f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f92:	f003 0301 	and.w	r3, r3, #1
 8016f96:	60bb      	str	r3, [r7, #8]
 8016f98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8016f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8016f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016fa2:	2302      	movs	r3, #2
 8016fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016fae:	2303      	movs	r3, #3
 8016fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8016fb4:	2307      	movs	r3, #7
 8016fb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016fba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	4810      	ldr	r0, [pc, #64]	; (8017004 <HAL_UART_MspInit+0x2ec>)
 8016fc2:	f002 ffcb 	bl	8019f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	2107      	movs	r1, #7
 8016fca:	2025      	movs	r0, #37	; 0x25
 8016fcc:	f001 fc9b 	bl	8018906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8016fd0:	2025      	movs	r0, #37	; 0x25
 8016fd2:	f001 fcb4 	bl	801893e <HAL_NVIC_EnableIRQ>
}
 8016fd6:	bf00      	nop
 8016fd8:	37d0      	adds	r7, #208	; 0xd0
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}
 8016fde:	bf00      	nop
 8016fe0:	40004c00 	.word	0x40004c00
 8016fe4:	40023800 	.word	0x40023800
 8016fe8:	40021c00 	.word	0x40021c00
 8016fec:	40005000 	.word	0x40005000
 8016ff0:	40020c00 	.word	0x40020c00
 8016ff4:	40020400 	.word	0x40020400
 8016ff8:	40007800 	.word	0x40007800
 8016ffc:	40021400 	.word	0x40021400
 8017000:	40011000 	.word	0x40011000
 8017004:	40020000 	.word	0x40020000

08017008 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8017010:	4b17      	ldr	r3, [pc, #92]	; (8017070 <UART4_Init+0x68>)
 8017012:	4a18      	ldr	r2, [pc, #96]	; (8017074 <UART4_Init+0x6c>)
 8017014:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8017016:	4a16      	ldr	r2, [pc, #88]	; (8017070 <UART4_Init+0x68>)
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 801701c:	4b14      	ldr	r3, [pc, #80]	; (8017070 <UART4_Init+0x68>)
 801701e:	2200      	movs	r2, #0
 8017020:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8017022:	4b13      	ldr	r3, [pc, #76]	; (8017070 <UART4_Init+0x68>)
 8017024:	2200      	movs	r2, #0
 8017026:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8017028:	4b11      	ldr	r3, [pc, #68]	; (8017070 <UART4_Init+0x68>)
 801702a:	2200      	movs	r2, #0
 801702c:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 801702e:	4b10      	ldr	r3, [pc, #64]	; (8017070 <UART4_Init+0x68>)
 8017030:	220c      	movs	r2, #12
 8017032:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017034:	4b0e      	ldr	r3, [pc, #56]	; (8017070 <UART4_Init+0x68>)
 8017036:	2200      	movs	r2, #0
 8017038:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 801703a:	4b0d      	ldr	r3, [pc, #52]	; (8017070 <UART4_Init+0x68>)
 801703c:	2200      	movs	r2, #0
 801703e:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017040:	4b0b      	ldr	r3, [pc, #44]	; (8017070 <UART4_Init+0x68>)
 8017042:	2200      	movs	r2, #0
 8017044:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017046:	4b0a      	ldr	r3, [pc, #40]	; (8017070 <UART4_Init+0x68>)
 8017048:	2200      	movs	r2, #0
 801704a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 801704c:	4808      	ldr	r0, [pc, #32]	; (8017070 <UART4_Init+0x68>)
 801704e:	f006 f9e3 	bl	801d418 <HAL_UART_Init>
 8017052:	4603      	mov	r3, r0
 8017054:	2b00      	cmp	r3, #0
 8017056:	d001      	beq.n	801705c <UART4_Init+0x54>
	{
		Error_Handler();
 8017058:	f7fe fed6 	bl	8015e08 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801705c:	2280      	movs	r2, #128	; 0x80
 801705e:	4906      	ldr	r1, [pc, #24]	; (8017078 <UART4_Init+0x70>)
 8017060:	4803      	ldr	r0, [pc, #12]	; (8017070 <UART4_Init+0x68>)
 8017062:	f007 fd45 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8017066:	bf00      	nop
 8017068:	3708      	adds	r7, #8
 801706a:	46bd      	mov	sp, r7
 801706c:	bd80      	pop	{r7, pc}
 801706e:	bf00      	nop
 8017070:	20011168 	.word	0x20011168
 8017074:	40004c00 	.word	0x40004c00
 8017078:	200110e8 	.word	0x200110e8

0801707c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b084      	sub	sp, #16
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	460b      	mov	r3, r1
 8017086:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	4a68      	ldr	r2, [pc, #416]	; (8017230 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801708e:	4293      	cmp	r3, r2
 8017090:	d129      	bne.n	80170e6 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017092:	2280      	movs	r2, #128	; 0x80
 8017094:	4967      	ldr	r1, [pc, #412]	; (8017234 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8017096:	4868      	ldr	r0, [pc, #416]	; (8017238 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8017098:	f007 fd2a 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801709c:	2300      	movs	r3, #0
 801709e:	81fb      	strh	r3, [r7, #14]
 80170a0:	e017      	b.n	80170d2 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 80170a2:	89fa      	ldrh	r2, [r7, #14]
 80170a4:	4b65      	ldr	r3, [pc, #404]	; (801723c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80170a6:	881b      	ldrh	r3, [r3, #0]
 80170a8:	1c59      	adds	r1, r3, #1
 80170aa:	b288      	uxth	r0, r1
 80170ac:	4963      	ldr	r1, [pc, #396]	; (801723c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80170ae:	8008      	strh	r0, [r1, #0]
 80170b0:	4619      	mov	r1, r3
 80170b2:	4b60      	ldr	r3, [pc, #384]	; (8017234 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80170b4:	5c9a      	ldrb	r2, [r3, r2]
 80170b6:	4b61      	ldr	r3, [pc, #388]	; (801723c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80170b8:	440b      	add	r3, r1
 80170ba:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 80170bc:	4b5f      	ldr	r3, [pc, #380]	; (801723c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80170be:	881b      	ldrh	r3, [r3, #0]
 80170c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80170c4:	d302      	bcc.n	80170cc <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 80170c6:	4b5d      	ldr	r3, [pc, #372]	; (801723c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80170c8:	2200      	movs	r2, #0
 80170ca:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 80170cc:	89fb      	ldrh	r3, [r7, #14]
 80170ce:	3301      	adds	r3, #1
 80170d0:	81fb      	strh	r3, [r7, #14]
 80170d2:	89fa      	ldrh	r2, [r7, #14]
 80170d4:	887b      	ldrh	r3, [r7, #2]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d3e3      	bcc.n	80170a2 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 80170da:	f000 fc33 	bl	8017944 <HAL_GetTick>
 80170de:	4603      	mov	r3, r0
 80170e0:	4a57      	ldr	r2, [pc, #348]	; (8017240 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80170e2:	6013      	str	r3, [r2, #0]
		{
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 80170e4:	e0a0      	b.n	8017228 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART5)
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	4a56      	ldr	r2, [pc, #344]	; (8017244 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80170ec:	4293      	cmp	r3, r2
 80170ee:	d129      	bne.n	8017144 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80170f0:	2280      	movs	r2, #128	; 0x80
 80170f2:	4955      	ldr	r1, [pc, #340]	; (8017248 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80170f4:	4855      	ldr	r0, [pc, #340]	; (801724c <HAL_UARTEx_RxEventCallback+0x1d0>)
 80170f6:	f007 fcfb 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80170fa:	2300      	movs	r3, #0
 80170fc:	81bb      	strh	r3, [r7, #12]
 80170fe:	e01c      	b.n	801713a <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8017100:	89ba      	ldrh	r2, [r7, #12]
 8017102:	4b53      	ldr	r3, [pc, #332]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017104:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8017108:	1c59      	adds	r1, r3, #1
 801710a:	b288      	uxth	r0, r1
 801710c:	4950      	ldr	r1, [pc, #320]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801710e:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8017112:	4619      	mov	r1, r3
 8017114:	4b4c      	ldr	r3, [pc, #304]	; (8017248 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8017116:	5c9a      	ldrb	r2, [r3, r2]
 8017118:	4b4d      	ldr	r3, [pc, #308]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801711a:	440b      	add	r3, r1
 801711c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8017120:	4b4b      	ldr	r3, [pc, #300]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017122:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8017126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801712a:	d303      	bcc.n	8017134 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 801712c:	4b48      	ldr	r3, [pc, #288]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801712e:	2200      	movs	r2, #0
 8017130:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8017134:	89bb      	ldrh	r3, [r7, #12]
 8017136:	3301      	adds	r3, #1
 8017138:	81bb      	strh	r3, [r7, #12]
 801713a:	89ba      	ldrh	r2, [r7, #12]
 801713c:	887b      	ldrh	r3, [r7, #2]
 801713e:	429a      	cmp	r2, r3
 8017140:	d3de      	bcc.n	8017100 <HAL_UARTEx_RxEventCallback+0x84>
}
 8017142:	e071      	b.n	8017228 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART7)
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	4a42      	ldr	r2, [pc, #264]	; (8017254 <HAL_UARTEx_RxEventCallback+0x1d8>)
 801714a:	4293      	cmp	r3, r2
 801714c:	d129      	bne.n	80171a2 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801714e:	2280      	movs	r2, #128	; 0x80
 8017150:	4941      	ldr	r1, [pc, #260]	; (8017258 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8017152:	4842      	ldr	r0, [pc, #264]	; (801725c <HAL_UARTEx_RxEventCallback+0x1e0>)
 8017154:	f007 fccc 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8017158:	2300      	movs	r3, #0
 801715a:	817b      	strh	r3, [r7, #10]
 801715c:	e01c      	b.n	8017198 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 801715e:	897a      	ldrh	r2, [r7, #10]
 8017160:	4b3b      	ldr	r3, [pc, #236]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017162:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8017166:	1c59      	adds	r1, r3, #1
 8017168:	b288      	uxth	r0, r1
 801716a:	4939      	ldr	r1, [pc, #228]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801716c:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8017170:	4619      	mov	r1, r3
 8017172:	4b39      	ldr	r3, [pc, #228]	; (8017258 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8017174:	5c9a      	ldrb	r2, [r3, r2]
 8017176:	4b36      	ldr	r3, [pc, #216]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017178:	440b      	add	r3, r1
 801717a:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 801717e:	4b34      	ldr	r3, [pc, #208]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017180:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8017184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017188:	d303      	bcc.n	8017192 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 801718a:	4b31      	ldr	r3, [pc, #196]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801718c:	2200      	movs	r2, #0
 801718e:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8017192:	897b      	ldrh	r3, [r7, #10]
 8017194:	3301      	adds	r3, #1
 8017196:	817b      	strh	r3, [r7, #10]
 8017198:	897a      	ldrh	r2, [r7, #10]
 801719a:	887b      	ldrh	r3, [r7, #2]
 801719c:	429a      	cmp	r2, r3
 801719e:	d3de      	bcc.n	801715e <HAL_UARTEx_RxEventCallback+0xe2>
}
 80171a0:	e042      	b.n	8017228 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART4)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	4a2e      	ldr	r2, [pc, #184]	; (8017260 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80171a8:	4293      	cmp	r3, r2
 80171aa:	d13d      	bne.n	8017228 <HAL_UARTEx_RxEventCallback+0x1ac>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80171ac:	2280      	movs	r2, #128	; 0x80
 80171ae:	492d      	ldr	r1, [pc, #180]	; (8017264 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80171b0:	482d      	ldr	r0, [pc, #180]	; (8017268 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80171b2:	f007 fc9d 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80171b6:	2300      	movs	r3, #0
 80171b8:	813b      	strh	r3, [r7, #8]
 80171ba:	e01c      	b.n	80171f6 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 80171bc:	893a      	ldrh	r2, [r7, #8]
 80171be:	4b24      	ldr	r3, [pc, #144]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80171c0:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80171c4:	1c59      	adds	r1, r3, #1
 80171c6:	b288      	uxth	r0, r1
 80171c8:	4921      	ldr	r1, [pc, #132]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80171ca:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 80171ce:	4619      	mov	r1, r3
 80171d0:	4b24      	ldr	r3, [pc, #144]	; (8017264 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80171d2:	5c9a      	ldrb	r2, [r3, r2]
 80171d4:	4b1e      	ldr	r3, [pc, #120]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80171d6:	440b      	add	r3, r1
 80171d8:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 80171dc:	4b1c      	ldr	r3, [pc, #112]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80171de:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80171e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80171e6:	d303      	bcc.n	80171f0 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 80171e8:	4b19      	ldr	r3, [pc, #100]	; (8017250 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80171ea:	2200      	movs	r2, #0
 80171ec:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 80171f0:	893b      	ldrh	r3, [r7, #8]
 80171f2:	3301      	adds	r3, #1
 80171f4:	813b      	strh	r3, [r7, #8]
 80171f6:	893a      	ldrh	r2, [r7, #8]
 80171f8:	887b      	ldrh	r3, [r7, #2]
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d3de      	bcc.n	80171bc <HAL_UARTEx_RxEventCallback+0x140>
		if(HAL_Elaps_Ticks(UART4_Intr_Clk) > 50)
 80171fe:	4b1b      	ldr	r3, [pc, #108]	; (801726c <HAL_UARTEx_RxEventCallback+0x1f0>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	4618      	mov	r0, r3
 8017204:	f7f8 f88c 	bl	800f320 <HAL_Elaps_Ticks>
 8017208:	4603      	mov	r3, r0
 801720a:	2b32      	cmp	r3, #50	; 0x32
 801720c:	d907      	bls.n	801721e <HAL_UARTEx_RxEventCallback+0x1a2>
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
 801720e:	4b17      	ldr	r3, [pc, #92]	; (801726c <HAL_UARTEx_RxEventCallback+0x1f0>)
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	4618      	mov	r0, r3
 8017214:	f7f8 f884 	bl	800f320 <HAL_Elaps_Ticks>
 8017218:	4603      	mov	r3, r0
 801721a:	4a15      	ldr	r2, [pc, #84]	; (8017270 <HAL_UARTEx_RxEventCallback+0x1f4>)
 801721c:	6013      	str	r3, [r2, #0]
		UART4_Intr_Clk = HAL_GetTick();
 801721e:	f000 fb91 	bl	8017944 <HAL_GetTick>
 8017222:	4603      	mov	r3, r0
 8017224:	4a11      	ldr	r2, [pc, #68]	; (801726c <HAL_UARTEx_RxEventCallback+0x1f0>)
 8017226:	6013      	str	r3, [r2, #0]
}
 8017228:	bf00      	nop
 801722a:	3710      	adds	r7, #16
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}
 8017230:	40011000 	.word	0x40011000
 8017234:	20010f68 	.word	0x20010f68
 8017238:	20011390 	.word	0x20011390
 801723c:	20010764 	.word	0x20010764
 8017240:	2000f74c 	.word	0x2000f74c
 8017244:	40005000 	.word	0x40005000
 8017248:	20010fe8 	.word	0x20010fe8
 801724c:	20011220 	.word	0x20011220
 8017250:	2000f754 	.word	0x2000f754
 8017254:	40007800 	.word	0x40007800
 8017258:	20011068 	.word	0x20011068
 801725c:	200112d8 	.word	0x200112d8
 8017260:	40004c00 	.word	0x40004c00
 8017264:	200110e8 	.word	0x200110e8
 8017268:	20011168 	.word	0x20011168
 801726c:	2000f748 	.word	0x2000f748
 8017270:	2000f750 	.word	0x2000f750

08017274 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8017274:	b480      	push	{r7}
 8017276:	b085      	sub	sp, #20
 8017278:	af00      	add	r7, sp, #0
 801727a:	4603      	mov	r3, r0
 801727c:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 801727e:	2300      	movs	r3, #0
 8017280:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8017282:	79fb      	ldrb	r3, [r7, #7]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d115      	bne.n	80172b4 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8017288:	79fa      	ldrb	r2, [r7, #7]
 801728a:	4918      	ldr	r1, [pc, #96]	; (80172ec <Com_DataReady+0x78>)
 801728c:	4613      	mov	r3, r2
 801728e:	025b      	lsls	r3, r3, #9
 8017290:	4413      	add	r3, r2
 8017292:	009b      	lsls	r3, r3, #2
 8017294:	440b      	add	r3, r1
 8017296:	8819      	ldrh	r1, [r3, #0]
 8017298:	79fa      	ldrb	r2, [r7, #7]
 801729a:	4814      	ldr	r0, [pc, #80]	; (80172ec <Com_DataReady+0x78>)
 801729c:	4613      	mov	r3, r2
 801729e:	025b      	lsls	r3, r3, #9
 80172a0:	4413      	add	r3, r2
 80172a2:	009b      	lsls	r3, r3, #2
 80172a4:	4403      	add	r3, r0
 80172a6:	3302      	adds	r3, #2
 80172a8:	881b      	ldrh	r3, [r3, #0]
 80172aa:	4299      	cmp	r1, r3
 80172ac:	d017      	beq.n	80172de <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 80172ae:	2301      	movs	r3, #1
 80172b0:	73fb      	strb	r3, [r7, #15]
 80172b2:	e014      	b.n	80172de <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 80172b4:	79fa      	ldrb	r2, [r7, #7]
 80172b6:	490e      	ldr	r1, [pc, #56]	; (80172f0 <Com_DataReady+0x7c>)
 80172b8:	4613      	mov	r3, r2
 80172ba:	021b      	lsls	r3, r3, #8
 80172bc:	4413      	add	r3, r2
 80172be:	009b      	lsls	r3, r3, #2
 80172c0:	440b      	add	r3, r1
 80172c2:	8819      	ldrh	r1, [r3, #0]
 80172c4:	79fa      	ldrb	r2, [r7, #7]
 80172c6:	480a      	ldr	r0, [pc, #40]	; (80172f0 <Com_DataReady+0x7c>)
 80172c8:	4613      	mov	r3, r2
 80172ca:	021b      	lsls	r3, r3, #8
 80172cc:	4413      	add	r3, r2
 80172ce:	009b      	lsls	r3, r3, #2
 80172d0:	4403      	add	r3, r0
 80172d2:	3302      	adds	r3, #2
 80172d4:	881b      	ldrh	r3, [r3, #0]
 80172d6:	4299      	cmp	r1, r3
 80172d8:	d001      	beq.n	80172de <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 80172da:	2301      	movs	r3, #1
 80172dc:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 80172de:	7bfb      	ldrb	r3, [r7, #15]
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3714      	adds	r7, #20
 80172e4:	46bd      	mov	sp, r7
 80172e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ea:	4770      	bx	lr
 80172ec:	20010764 	.word	0x20010764
 80172f0:	2000f754 	.word	0x2000f754

080172f4 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 80172f4:	b4b0      	push	{r4, r5, r7}
 80172f6:	b085      	sub	sp, #20
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	4603      	mov	r3, r0
 80172fc:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 80172fe:	2300      	movs	r3, #0
 8017300:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8017302:	79fb      	ldrb	r3, [r7, #7]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d135      	bne.n	8017374 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8017308:	79f9      	ldrb	r1, [r7, #7]
 801730a:	79fa      	ldrb	r2, [r7, #7]
 801730c:	4837      	ldr	r0, [pc, #220]	; (80173ec <Com_Get_Byte+0xf8>)
 801730e:	4613      	mov	r3, r2
 8017310:	025b      	lsls	r3, r3, #9
 8017312:	4413      	add	r3, r2
 8017314:	009b      	lsls	r3, r3, #2
 8017316:	4403      	add	r3, r0
 8017318:	3302      	adds	r3, #2
 801731a:	8818      	ldrh	r0, [r3, #0]
 801731c:	1c43      	adds	r3, r0, #1
 801731e:	b29d      	uxth	r5, r3
 8017320:	4c32      	ldr	r4, [pc, #200]	; (80173ec <Com_Get_Byte+0xf8>)
 8017322:	4613      	mov	r3, r2
 8017324:	025b      	lsls	r3, r3, #9
 8017326:	4413      	add	r3, r2
 8017328:	009b      	lsls	r3, r3, #2
 801732a:	4423      	add	r3, r4
 801732c:	3302      	adds	r3, #2
 801732e:	462a      	mov	r2, r5
 8017330:	801a      	strh	r2, [r3, #0]
 8017332:	4a2e      	ldr	r2, [pc, #184]	; (80173ec <Com_Get_Byte+0xf8>)
 8017334:	460b      	mov	r3, r1
 8017336:	025b      	lsls	r3, r3, #9
 8017338:	440b      	add	r3, r1
 801733a:	009b      	lsls	r3, r3, #2
 801733c:	4413      	add	r3, r2
 801733e:	4403      	add	r3, r0
 8017340:	3304      	adds	r3, #4
 8017342:	781b      	ldrb	r3, [r3, #0]
 8017344:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8017346:	79fa      	ldrb	r2, [r7, #7]
 8017348:	4928      	ldr	r1, [pc, #160]	; (80173ec <Com_Get_Byte+0xf8>)
 801734a:	4613      	mov	r3, r2
 801734c:	025b      	lsls	r3, r3, #9
 801734e:	4413      	add	r3, r2
 8017350:	009b      	lsls	r3, r3, #2
 8017352:	440b      	add	r3, r1
 8017354:	3302      	adds	r3, #2
 8017356:	881b      	ldrh	r3, [r3, #0]
 8017358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801735c:	d33f      	bcc.n	80173de <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 801735e:	79fa      	ldrb	r2, [r7, #7]
 8017360:	4922      	ldr	r1, [pc, #136]	; (80173ec <Com_Get_Byte+0xf8>)
 8017362:	4613      	mov	r3, r2
 8017364:	025b      	lsls	r3, r3, #9
 8017366:	4413      	add	r3, r2
 8017368:	009b      	lsls	r3, r3, #2
 801736a:	440b      	add	r3, r1
 801736c:	3302      	adds	r3, #2
 801736e:	2200      	movs	r2, #0
 8017370:	801a      	strh	r2, [r3, #0]
 8017372:	e034      	b.n	80173de <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8017374:	79f9      	ldrb	r1, [r7, #7]
 8017376:	79fa      	ldrb	r2, [r7, #7]
 8017378:	481d      	ldr	r0, [pc, #116]	; (80173f0 <Com_Get_Byte+0xfc>)
 801737a:	4613      	mov	r3, r2
 801737c:	021b      	lsls	r3, r3, #8
 801737e:	4413      	add	r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	4403      	add	r3, r0
 8017384:	3302      	adds	r3, #2
 8017386:	8818      	ldrh	r0, [r3, #0]
 8017388:	1c43      	adds	r3, r0, #1
 801738a:	b29d      	uxth	r5, r3
 801738c:	4c18      	ldr	r4, [pc, #96]	; (80173f0 <Com_Get_Byte+0xfc>)
 801738e:	4613      	mov	r3, r2
 8017390:	021b      	lsls	r3, r3, #8
 8017392:	4413      	add	r3, r2
 8017394:	009b      	lsls	r3, r3, #2
 8017396:	4423      	add	r3, r4
 8017398:	3302      	adds	r3, #2
 801739a:	462a      	mov	r2, r5
 801739c:	801a      	strh	r2, [r3, #0]
 801739e:	4a14      	ldr	r2, [pc, #80]	; (80173f0 <Com_Get_Byte+0xfc>)
 80173a0:	460b      	mov	r3, r1
 80173a2:	021b      	lsls	r3, r3, #8
 80173a4:	440b      	add	r3, r1
 80173a6:	009b      	lsls	r3, r3, #2
 80173a8:	4413      	add	r3, r2
 80173aa:	4403      	add	r3, r0
 80173ac:	3304      	adds	r3, #4
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 80173b2:	79fa      	ldrb	r2, [r7, #7]
 80173b4:	490e      	ldr	r1, [pc, #56]	; (80173f0 <Com_Get_Byte+0xfc>)
 80173b6:	4613      	mov	r3, r2
 80173b8:	021b      	lsls	r3, r3, #8
 80173ba:	4413      	add	r3, r2
 80173bc:	009b      	lsls	r3, r3, #2
 80173be:	440b      	add	r3, r1
 80173c0:	3302      	adds	r3, #2
 80173c2:	881b      	ldrh	r3, [r3, #0]
 80173c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80173c8:	d309      	bcc.n	80173de <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 80173ca:	79fa      	ldrb	r2, [r7, #7]
 80173cc:	4908      	ldr	r1, [pc, #32]	; (80173f0 <Com_Get_Byte+0xfc>)
 80173ce:	4613      	mov	r3, r2
 80173d0:	021b      	lsls	r3, r3, #8
 80173d2:	4413      	add	r3, r2
 80173d4:	009b      	lsls	r3, r3, #2
 80173d6:	440b      	add	r3, r1
 80173d8:	3302      	adds	r3, #2
 80173da:	2200      	movs	r2, #0
 80173dc:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 80173de:	7bfb      	ldrb	r3, [r7, #15]
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	3714      	adds	r7, #20
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bcb0      	pop	{r4, r5, r7}
 80173e8:	4770      	bx	lr
 80173ea:	bf00      	nop
 80173ec:	20010764 	.word	0x20010764
 80173f0:	2000f754 	.word	0x2000f754

080173f4 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b084      	sub	sp, #16
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	4603      	mov	r3, r0
 80173fc:	6039      	str	r1, [r7, #0]
 80173fe:	71fb      	strb	r3, [r7, #7]
 8017400:	4613      	mov	r3, r2
 8017402:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8017404:	2300      	movs	r3, #0
 8017406:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8017408:	2300      	movs	r3, #0
 801740a:	81fb      	strh	r3, [r7, #14]
 801740c:	e03a      	b.n	8017484 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 801740e:	89fb      	ldrh	r3, [r7, #14]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d00a      	beq.n	801742a <CommTransmitMessage+0x36>
 8017414:	89fb      	ldrh	r3, [r7, #14]
 8017416:	683a      	ldr	r2, [r7, #0]
 8017418:	4413      	add	r3, r2
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	2b24      	cmp	r3, #36	; 0x24
 801741e:	d104      	bne.n	801742a <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8017420:	79fb      	ldrb	r3, [r7, #7]
 8017422:	2105      	movs	r1, #5
 8017424:	4618      	mov	r0, r3
 8017426:	f000 f835 	bl	8017494 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 801742a:	89fb      	ldrh	r3, [r7, #14]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d00e      	beq.n	801744e <CommTransmitMessage+0x5a>
 8017430:	89fa      	ldrh	r2, [r7, #14]
 8017432:	88bb      	ldrh	r3, [r7, #4]
 8017434:	429a      	cmp	r2, r3
 8017436:	d20a      	bcs.n	801744e <CommTransmitMessage+0x5a>
 8017438:	89fb      	ldrh	r3, [r7, #14]
 801743a:	683a      	ldr	r2, [r7, #0]
 801743c:	4413      	add	r3, r2
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	2b05      	cmp	r3, #5
 8017442:	d104      	bne.n	801744e <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8017444:	79fb      	ldrb	r3, [r7, #7]
 8017446:	2105      	movs	r1, #5
 8017448:	4618      	mov	r0, r3
 801744a:	f000 f823 	bl	8017494 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 801744e:	89fb      	ldrh	r3, [r7, #14]
 8017450:	683a      	ldr	r2, [r7, #0]
 8017452:	4413      	add	r3, r2
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	2b26      	cmp	r3, #38	; 0x26
 8017458:	d108      	bne.n	801746c <CommTransmitMessage+0x78>
 801745a:	89fa      	ldrh	r2, [r7, #14]
 801745c:	88bb      	ldrh	r3, [r7, #4]
 801745e:	429a      	cmp	r2, r3
 8017460:	d004      	beq.n	801746c <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8017462:	79fb      	ldrb	r3, [r7, #7]
 8017464:	2105      	movs	r1, #5
 8017466:	4618      	mov	r0, r3
 8017468:	f000 f814 	bl	8017494 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 801746c:	89fb      	ldrh	r3, [r7, #14]
 801746e:	683a      	ldr	r2, [r7, #0]
 8017470:	4413      	add	r3, r2
 8017472:	781a      	ldrb	r2, [r3, #0]
 8017474:	79fb      	ldrb	r3, [r7, #7]
 8017476:	4611      	mov	r1, r2
 8017478:	4618      	mov	r0, r3
 801747a:	f000 f80b 	bl	8017494 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 801747e:	89fb      	ldrh	r3, [r7, #14]
 8017480:	3301      	adds	r3, #1
 8017482:	81fb      	strh	r3, [r7, #14]
 8017484:	89fa      	ldrh	r2, [r7, #14]
 8017486:	88bb      	ldrh	r3, [r7, #4]
 8017488:	429a      	cmp	r2, r3
 801748a:	d9c0      	bls.n	801740e <CommTransmitMessage+0x1a>
	}

	return;
 801748c:	bf00      	nop
}
 801748e:	3710      	adds	r7, #16
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b084      	sub	sp, #16
 8017498:	af00      	add	r7, sp, #0
 801749a:	4603      	mov	r3, r0
 801749c:	460a      	mov	r2, r1
 801749e:	71fb      	strb	r3, [r7, #7]
 80174a0:	4613      	mov	r3, r2
 80174a2:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 80174a4:	1dbb      	adds	r3, r7, #6
 80174a6:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 80174a8:	79fb      	ldrb	r3, [r7, #7]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d107      	bne.n	80174be <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 80174ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174b2:	2201      	movs	r2, #1
 80174b4:	68f9      	ldr	r1, [r7, #12]
 80174b6:	4816      	ldr	r0, [pc, #88]	; (8017510 <Com_SendByte+0x7c>)
 80174b8:	f006 f80c 	bl	801d4d4 <HAL_UART_Transmit>
 80174bc:	e01f      	b.n	80174fe <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 80174be:	79fb      	ldrb	r3, [r7, #7]
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	d107      	bne.n	80174d4 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 80174c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174c8:	2201      	movs	r2, #1
 80174ca:	68f9      	ldr	r1, [r7, #12]
 80174cc:	4811      	ldr	r0, [pc, #68]	; (8017514 <Com_SendByte+0x80>)
 80174ce:	f006 f801 	bl	801d4d4 <HAL_UART_Transmit>
 80174d2:	e014      	b.n	80174fe <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 80174d4:	79fb      	ldrb	r3, [r7, #7]
 80174d6:	2b02      	cmp	r3, #2
 80174d8:	d107      	bne.n	80174ea <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 80174da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174de:	2201      	movs	r2, #1
 80174e0:	68f9      	ldr	r1, [r7, #12]
 80174e2:	480d      	ldr	r0, [pc, #52]	; (8017518 <Com_SendByte+0x84>)
 80174e4:	f005 fff6 	bl	801d4d4 <HAL_UART_Transmit>
 80174e8:	e009      	b.n	80174fe <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 80174ea:	79fb      	ldrb	r3, [r7, #7]
 80174ec:	2b03      	cmp	r3, #3
 80174ee:	d106      	bne.n	80174fe <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 80174f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174f4:	2201      	movs	r2, #1
 80174f6:	68f9      	ldr	r1, [r7, #12]
 80174f8:	4808      	ldr	r0, [pc, #32]	; (801751c <Com_SendByte+0x88>)
 80174fa:	f005 ffeb 	bl	801d4d4 <HAL_UART_Transmit>
	}

	ptr=NULL;
 80174fe:	2300      	movs	r3, #0
 8017500:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f00d f900 	bl	8024708 <free>
}
 8017508:	bf00      	nop
 801750a:	3710      	adds	r7, #16
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	20011390 	.word	0x20011390
 8017514:	20011220 	.word	0x20011220
 8017518:	200112d8 	.word	0x200112d8
 801751c:	20011168 	.word	0x20011168

08017520 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017524:	2280      	movs	r2, #128	; 0x80
 8017526:	490a      	ldr	r1, [pc, #40]	; (8017550 <Enable_UART_Interrupts+0x30>)
 8017528:	480a      	ldr	r0, [pc, #40]	; (8017554 <Enable_UART_Interrupts+0x34>)
 801752a:	f007 fae1 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801752e:	2280      	movs	r2, #128	; 0x80
 8017530:	4909      	ldr	r1, [pc, #36]	; (8017558 <Enable_UART_Interrupts+0x38>)
 8017532:	480a      	ldr	r0, [pc, #40]	; (801755c <Enable_UART_Interrupts+0x3c>)
 8017534:	f007 fadc 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017538:	2280      	movs	r2, #128	; 0x80
 801753a:	4909      	ldr	r1, [pc, #36]	; (8017560 <Enable_UART_Interrupts+0x40>)
 801753c:	4809      	ldr	r0, [pc, #36]	; (8017564 <Enable_UART_Interrupts+0x44>)
 801753e:	f007 fad7 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017542:	2280      	movs	r2, #128	; 0x80
 8017544:	4908      	ldr	r1, [pc, #32]	; (8017568 <Enable_UART_Interrupts+0x48>)
 8017546:	4809      	ldr	r0, [pc, #36]	; (801756c <Enable_UART_Interrupts+0x4c>)
 8017548:	f007 fad2 	bl	801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 801754c:	bf00      	nop
 801754e:	bd80      	pop	{r7, pc}
 8017550:	20010f68 	.word	0x20010f68
 8017554:	20011390 	.word	0x20011390
 8017558:	20010fe8 	.word	0x20010fe8
 801755c:	20011220 	.word	0x20011220
 8017560:	20011068 	.word	0x20011068
 8017564:	200112d8 	.word	0x200112d8
 8017568:	200110e8 	.word	0x200110e8
 801756c:	20011168 	.word	0x20011168

08017570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8017570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80175a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8017574:	480d      	ldr	r0, [pc, #52]	; (80175ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8017576:	490e      	ldr	r1, [pc, #56]	; (80175b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8017578:	4a0e      	ldr	r2, [pc, #56]	; (80175b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801757a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801757c:	e002      	b.n	8017584 <LoopCopyDataInit>

0801757e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801757e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017582:	3304      	adds	r3, #4

08017584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017588:	d3f9      	bcc.n	801757e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801758a:	4a0b      	ldr	r2, [pc, #44]	; (80175b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801758c:	4c0b      	ldr	r4, [pc, #44]	; (80175bc <LoopFillZerobss+0x26>)
  movs r3, #0
 801758e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017590:	e001      	b.n	8017596 <LoopFillZerobss>

08017592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017594:	3204      	adds	r2, #4

08017596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017598:	d3fb      	bcc.n	8017592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801759a:	f7ff fb75 	bl	8016c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801759e:	f00d f887 	bl	80246b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80175a2:	f7fe fa4b 	bl	8015a3c <main>
  bx  lr    
 80175a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80175a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80175ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80175b0:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80175b4:	0802b900 	.word	0x0802b900
  ldr r2, =_sbss
 80175b8:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80175bc:	200199f0 	.word	0x200199f0

080175c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80175c0:	e7fe      	b.n	80175c0 <ADC_IRQHandler>

080175c2 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80175c2:	b480      	push	{r7}
 80175c4:	b083      	sub	sp, #12
 80175c6:	af00      	add	r7, sp, #0
 80175c8:	6078      	str	r0, [r7, #4]
 80175ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00b      	beq.n	80175ea <DP83848_RegisterBusIO+0x28>
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	68db      	ldr	r3, [r3, #12]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d007      	beq.n	80175ea <DP83848_RegisterBusIO+0x28>
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	689b      	ldr	r3, [r3, #8]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d003      	beq.n	80175ea <DP83848_RegisterBusIO+0x28>
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	691b      	ldr	r3, [r3, #16]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d102      	bne.n	80175f0 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80175ea:	f04f 33ff 	mov.w	r3, #4294967295
 80175ee:	e014      	b.n	801761a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	681a      	ldr	r2, [r3, #0]
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	685a      	ldr	r2, [r3, #4]
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	68da      	ldr	r2, [r3, #12]
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	689a      	ldr	r2, [r3, #8]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	691a      	ldr	r2, [r3, #16]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8017618:	2300      	movs	r3, #0
}
 801761a:	4618      	mov	r0, r3
 801761c:	370c      	adds	r7, #12
 801761e:	46bd      	mov	sp, r7
 8017620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017624:	4770      	bx	lr

08017626 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8017626:	b580      	push	{r7, lr}
 8017628:	b086      	sub	sp, #24
 801762a:	af00      	add	r7, sp, #0
 801762c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801762e:	2300      	movs	r3, #0
 8017630:	60fb      	str	r3, [r7, #12]
 8017632:	2300      	movs	r3, #0
 8017634:	60bb      	str	r3, [r7, #8]
 8017636:	2300      	movs	r3, #0
 8017638:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 801763a:	2300      	movs	r3, #0
 801763c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	685b      	ldr	r3, [r3, #4]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d17c      	bne.n	8017740 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	689b      	ldr	r3, [r3, #8]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d002      	beq.n	8017654 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	689b      	ldr	r3, [r3, #8]
 8017652:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2220      	movs	r2, #32
 8017658:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 801765a:	2300      	movs	r3, #0
 801765c:	617b      	str	r3, [r7, #20]
 801765e:	e01c      	b.n	801769a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	695b      	ldr	r3, [r3, #20]
 8017664:	f107 0208 	add.w	r2, r7, #8
 8017668:	2119      	movs	r1, #25
 801766a:	6978      	ldr	r0, [r7, #20]
 801766c:	4798      	blx	r3
 801766e:	4603      	mov	r3, r0
 8017670:	2b00      	cmp	r3, #0
 8017672:	da03      	bge.n	801767c <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8017674:	f06f 0304 	mvn.w	r3, #4
 8017678:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 801767a:	e00b      	b.n	8017694 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 801767c:	68bb      	ldr	r3, [r7, #8]
 801767e:	f003 031f 	and.w	r3, r3, #31
 8017682:	697a      	ldr	r2, [r7, #20]
 8017684:	429a      	cmp	r2, r3
 8017686:	d105      	bne.n	8017694 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	697a      	ldr	r2, [r7, #20]
 801768c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 801768e:	2300      	movs	r3, #0
 8017690:	613b      	str	r3, [r7, #16]
         break;
 8017692:	e005      	b.n	80176a0 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	3301      	adds	r3, #1
 8017698:	617b      	str	r3, [r7, #20]
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	2b1f      	cmp	r3, #31
 801769e:	d9df      	bls.n	8017660 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	2b1f      	cmp	r3, #31
 80176a6:	d902      	bls.n	80176ae <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80176a8:	f06f 0302 	mvn.w	r3, #2
 80176ac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d145      	bne.n	8017740 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	691b      	ldr	r3, [r3, #16]
 80176b8:	687a      	ldr	r2, [r7, #4]
 80176ba:	6810      	ldr	r0, [r2, #0]
 80176bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80176c0:	2100      	movs	r1, #0
 80176c2:	4798      	blx	r3
 80176c4:	4603      	mov	r3, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	db37      	blt.n	801773a <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	695b      	ldr	r3, [r3, #20]
 80176ce:	687a      	ldr	r2, [r7, #4]
 80176d0:	6810      	ldr	r0, [r2, #0]
 80176d2:	f107 0208 	add.w	r2, r7, #8
 80176d6:	2100      	movs	r1, #0
 80176d8:	4798      	blx	r3
 80176da:	4603      	mov	r3, r0
 80176dc:	2b00      	cmp	r3, #0
 80176de:	db28      	blt.n	8017732 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	699b      	ldr	r3, [r3, #24]
 80176e4:	4798      	blx	r3
 80176e6:	4603      	mov	r3, r0
 80176e8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80176ea:	e01c      	b.n	8017726 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	699b      	ldr	r3, [r3, #24]
 80176f0:	4798      	blx	r3
 80176f2:	4603      	mov	r3, r0
 80176f4:	461a      	mov	r2, r3
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	1ad3      	subs	r3, r2, r3
 80176fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80176fe:	d80e      	bhi.n	801771e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	695b      	ldr	r3, [r3, #20]
 8017704:	687a      	ldr	r2, [r7, #4]
 8017706:	6810      	ldr	r0, [r2, #0]
 8017708:	f107 0208 	add.w	r2, r7, #8
 801770c:	2100      	movs	r1, #0
 801770e:	4798      	blx	r3
 8017710:	4603      	mov	r3, r0
 8017712:	2b00      	cmp	r3, #0
 8017714:	da07      	bge.n	8017726 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8017716:	f06f 0304 	mvn.w	r3, #4
 801771a:	613b      	str	r3, [r7, #16]
                 break;
 801771c:	e010      	b.n	8017740 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 801771e:	f06f 0301 	mvn.w	r3, #1
 8017722:	613b      	str	r3, [r7, #16]
               break;
 8017724:	e00c      	b.n	8017740 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801772c:	2b00      	cmp	r3, #0
 801772e:	d1dd      	bne.n	80176ec <DP83848_Init+0xc6>
 8017730:	e006      	b.n	8017740 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8017732:	f06f 0304 	mvn.w	r3, #4
 8017736:	613b      	str	r3, [r7, #16]
 8017738:	e002      	b.n	8017740 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 801773a:	f06f 0303 	mvn.w	r3, #3
 801773e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8017740:	693b      	ldr	r3, [r7, #16]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d112      	bne.n	801776c <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	699b      	ldr	r3, [r3, #24]
 801774a:	4798      	blx	r3
 801774c:	4603      	mov	r3, r0
 801774e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8017750:	bf00      	nop
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	699b      	ldr	r3, [r3, #24]
 8017756:	4798      	blx	r3
 8017758:	4603      	mov	r3, r0
 801775a:	461a      	mov	r2, r3
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	1ad3      	subs	r3, r2, r3
 8017760:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8017764:	d9f5      	bls.n	8017752 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	2201      	movs	r2, #1
 801776a:	605a      	str	r2, [r3, #4]
   }

   return status;
 801776c:	693b      	ldr	r3, [r7, #16]
 }
 801776e:	4618      	mov	r0, r3
 8017770:	3718      	adds	r7, #24
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}

08017776 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8017776:	b580      	push	{r7, lr}
 8017778:	b084      	sub	sp, #16
 801777a:	af00      	add	r7, sp, #0
 801777c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 801777e:	2300      	movs	r3, #0
 8017780:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	695b      	ldr	r3, [r3, #20]
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	6810      	ldr	r0, [r2, #0]
 801778a:	f107 020c 	add.w	r2, r7, #12
 801778e:	2101      	movs	r1, #1
 8017790:	4798      	blx	r3
 8017792:	4603      	mov	r3, r0
 8017794:	2b00      	cmp	r3, #0
 8017796:	da02      	bge.n	801779e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8017798:	f06f 0304 	mvn.w	r3, #4
 801779c:	e06e      	b.n	801787c <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	695b      	ldr	r3, [r3, #20]
 80177a2:	687a      	ldr	r2, [r7, #4]
 80177a4:	6810      	ldr	r0, [r2, #0]
 80177a6:	f107 020c 	add.w	r2, r7, #12
 80177aa:	2101      	movs	r1, #1
 80177ac:	4798      	blx	r3
 80177ae:	4603      	mov	r3, r0
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	da02      	bge.n	80177ba <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80177b4:	f06f 0304 	mvn.w	r3, #4
 80177b8:	e060      	b.n	801787c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	f003 0304 	and.w	r3, r3, #4
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d101      	bne.n	80177c8 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80177c4:	2301      	movs	r3, #1
 80177c6:	e059      	b.n	801787c <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	695b      	ldr	r3, [r3, #20]
 80177cc:	687a      	ldr	r2, [r7, #4]
 80177ce:	6810      	ldr	r0, [r2, #0]
 80177d0:	f107 020c 	add.w	r2, r7, #12
 80177d4:	2100      	movs	r1, #0
 80177d6:	4798      	blx	r3
 80177d8:	4603      	mov	r3, r0
 80177da:	2b00      	cmp	r3, #0
 80177dc:	da02      	bge.n	80177e4 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80177de:	f06f 0304 	mvn.w	r3, #4
 80177e2:	e04b      	b.n	801787c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d11b      	bne.n	8017826 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d006      	beq.n	8017806 <DP83848_GetLinkState+0x90>
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d001      	beq.n	8017806 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8017802:	2302      	movs	r3, #2
 8017804:	e03a      	b.n	801787c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801780c:	2b00      	cmp	r3, #0
 801780e:	d001      	beq.n	8017814 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8017810:	2303      	movs	r3, #3
 8017812:	e033      	b.n	801787c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801781a:	2b00      	cmp	r3, #0
 801781c:	d001      	beq.n	8017822 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801781e:	2304      	movs	r3, #4
 8017820:	e02c      	b.n	801787c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8017822:	2305      	movs	r3, #5
 8017824:	e02a      	b.n	801787c <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	695b      	ldr	r3, [r3, #20]
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	6810      	ldr	r0, [r2, #0]
 801782e:	f107 020c 	add.w	r2, r7, #12
 8017832:	2110      	movs	r1, #16
 8017834:	4798      	blx	r3
 8017836:	4603      	mov	r3, r0
 8017838:	2b00      	cmp	r3, #0
 801783a:	da02      	bge.n	8017842 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 801783c:	f06f 0304 	mvn.w	r3, #4
 8017840:	e01c      	b.n	801787c <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017848:	2b00      	cmp	r3, #0
 801784a:	d101      	bne.n	8017850 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 801784c:	2306      	movs	r3, #6
 801784e:	e015      	b.n	801787c <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	f003 0306 	and.w	r3, r3, #6
 8017856:	2b04      	cmp	r3, #4
 8017858:	d101      	bne.n	801785e <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 801785a:	2302      	movs	r3, #2
 801785c:	e00e      	b.n	801787c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	f003 0306 	and.w	r3, r3, #6
 8017864:	2b00      	cmp	r3, #0
 8017866:	d101      	bne.n	801786c <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8017868:	2303      	movs	r3, #3
 801786a:	e007      	b.n	801787c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	f003 0306 	and.w	r3, r3, #6
 8017872:	2b06      	cmp	r3, #6
 8017874:	d101      	bne.n	801787a <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8017876:	2304      	movs	r3, #4
 8017878:	e000      	b.n	801787c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801787a:	2305      	movs	r3, #5
    }
  }
}
 801787c:	4618      	mov	r0, r3
 801787e:	3710      	adds	r7, #16
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}

08017884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8017888:	4b0b      	ldr	r3, [pc, #44]	; (80178b8 <HAL_Init+0x34>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	4a0a      	ldr	r2, [pc, #40]	; (80178b8 <HAL_Init+0x34>)
 801788e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017892:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017894:	4b08      	ldr	r3, [pc, #32]	; (80178b8 <HAL_Init+0x34>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	4a07      	ldr	r2, [pc, #28]	; (80178b8 <HAL_Init+0x34>)
 801789a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801789e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80178a0:	2003      	movs	r0, #3
 80178a2:	f001 f825 	bl	80188f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80178a6:	2007      	movs	r0, #7
 80178a8:	f000 f808 	bl	80178bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80178ac:	f7ff f844 	bl	8016938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80178b0:	2300      	movs	r3, #0
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	bd80      	pop	{r7, pc}
 80178b6:	bf00      	nop
 80178b8:	40023c00 	.word	0x40023c00

080178bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80178c4:	4b12      	ldr	r3, [pc, #72]	; (8017910 <HAL_InitTick+0x54>)
 80178c6:	681a      	ldr	r2, [r3, #0]
 80178c8:	4b12      	ldr	r3, [pc, #72]	; (8017914 <HAL_InitTick+0x58>)
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	4619      	mov	r1, r3
 80178ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80178d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80178d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80178da:	4618      	mov	r0, r3
 80178dc:	f001 f83d 	bl	801895a <HAL_SYSTICK_Config>
 80178e0:	4603      	mov	r3, r0
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d001      	beq.n	80178ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80178e6:	2301      	movs	r3, #1
 80178e8:	e00e      	b.n	8017908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2b0f      	cmp	r3, #15
 80178ee:	d80a      	bhi.n	8017906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80178f0:	2200      	movs	r2, #0
 80178f2:	6879      	ldr	r1, [r7, #4]
 80178f4:	f04f 30ff 	mov.w	r0, #4294967295
 80178f8:	f001 f805 	bl	8018906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80178fc:	4a06      	ldr	r2, [pc, #24]	; (8017918 <HAL_InitTick+0x5c>)
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8017902:	2300      	movs	r3, #0
 8017904:	e000      	b.n	8017908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8017906:	2301      	movs	r3, #1
}
 8017908:	4618      	mov	r0, r3
 801790a:	3708      	adds	r7, #8
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}
 8017910:	2000011c 	.word	0x2000011c
 8017914:	20000124 	.word	0x20000124
 8017918:	20000120 	.word	0x20000120

0801791c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801791c:	b480      	push	{r7}
 801791e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8017920:	4b06      	ldr	r3, [pc, #24]	; (801793c <HAL_IncTick+0x20>)
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	461a      	mov	r2, r3
 8017926:	4b06      	ldr	r3, [pc, #24]	; (8017940 <HAL_IncTick+0x24>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4413      	add	r3, r2
 801792c:	4a04      	ldr	r2, [pc, #16]	; (8017940 <HAL_IncTick+0x24>)
 801792e:	6013      	str	r3, [r2, #0]
}
 8017930:	bf00      	nop
 8017932:	46bd      	mov	sp, r7
 8017934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017938:	4770      	bx	lr
 801793a:	bf00      	nop
 801793c:	20000124 	.word	0x20000124
 8017940:	20011448 	.word	0x20011448

08017944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017944:	b480      	push	{r7}
 8017946:	af00      	add	r7, sp, #0
  return uwTick;
 8017948:	4b03      	ldr	r3, [pc, #12]	; (8017958 <HAL_GetTick+0x14>)
 801794a:	681b      	ldr	r3, [r3, #0]
}
 801794c:	4618      	mov	r0, r3
 801794e:	46bd      	mov	sp, r7
 8017950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017954:	4770      	bx	lr
 8017956:	bf00      	nop
 8017958:	20011448 	.word	0x20011448

0801795c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b084      	sub	sp, #16
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017964:	f7ff ffee 	bl	8017944 <HAL_GetTick>
 8017968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017974:	d005      	beq.n	8017982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8017976:	4b0a      	ldr	r3, [pc, #40]	; (80179a0 <HAL_Delay+0x44>)
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	461a      	mov	r2, r3
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	4413      	add	r3, r2
 8017980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017982:	bf00      	nop
 8017984:	f7ff ffde 	bl	8017944 <HAL_GetTick>
 8017988:	4602      	mov	r2, r0
 801798a:	68bb      	ldr	r3, [r7, #8]
 801798c:	1ad3      	subs	r3, r2, r3
 801798e:	68fa      	ldr	r2, [r7, #12]
 8017990:	429a      	cmp	r2, r3
 8017992:	d8f7      	bhi.n	8017984 <HAL_Delay+0x28>
  {
  }
}
 8017994:	bf00      	nop
 8017996:	bf00      	nop
 8017998:	3710      	adds	r7, #16
 801799a:	46bd      	mov	sp, r7
 801799c:	bd80      	pop	{r7, pc}
 801799e:	bf00      	nop
 80179a0:	20000124 	.word	0x20000124

080179a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b084      	sub	sp, #16
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d101      	bne.n	80179b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80179b2:	2301      	movs	r3, #1
 80179b4:	e11c      	b.n	8017bf0 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d131      	bne.n	8017a26 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	4a8c      	ldr	r2, [pc, #560]	; (8017bf8 <HAL_CAN_Init+0x254>)
 80179c6:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	4a8c      	ldr	r2, [pc, #560]	; (8017bfc <HAL_CAN_Init+0x258>)
 80179cc:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	4a8b      	ldr	r2, [pc, #556]	; (8017c00 <HAL_CAN_Init+0x25c>)
 80179d2:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	4a8b      	ldr	r2, [pc, #556]	; (8017c04 <HAL_CAN_Init+0x260>)
 80179d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	4a8a      	ldr	r2, [pc, #552]	; (8017c08 <HAL_CAN_Init+0x264>)
 80179de:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	4a8a      	ldr	r2, [pc, #552]	; (8017c0c <HAL_CAN_Init+0x268>)
 80179e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	4a89      	ldr	r2, [pc, #548]	; (8017c10 <HAL_CAN_Init+0x26c>)
 80179ea:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	4a89      	ldr	r2, [pc, #548]	; (8017c14 <HAL_CAN_Init+0x270>)
 80179f0:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	4a88      	ldr	r2, [pc, #544]	; (8017c18 <HAL_CAN_Init+0x274>)
 80179f6:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	4a88      	ldr	r2, [pc, #544]	; (8017c1c <HAL_CAN_Init+0x278>)
 80179fc:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	4a87      	ldr	r2, [pc, #540]	; (8017c20 <HAL_CAN_Init+0x27c>)
 8017a02:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	4a87      	ldr	r2, [pc, #540]	; (8017c24 <HAL_CAN_Init+0x280>)
 8017a08:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	4a86      	ldr	r2, [pc, #536]	; (8017c28 <HAL_CAN_Init+0x284>)
 8017a0e:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d102      	bne.n	8017a1e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	4a84      	ldr	r2, [pc, #528]	; (8017c2c <HAL_CAN_Init+0x288>)
 8017a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017a22:	6878      	ldr	r0, [r7, #4]
 8017a24:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	681a      	ldr	r2, [r3, #0]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	f042 0201 	orr.w	r2, r2, #1
 8017a34:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017a36:	f7ff ff85 	bl	8017944 <HAL_GetTick>
 8017a3a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8017a3c:	e012      	b.n	8017a64 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8017a3e:	f7ff ff81 	bl	8017944 <HAL_GetTick>
 8017a42:	4602      	mov	r2, r0
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	1ad3      	subs	r3, r2, r3
 8017a48:	2b0a      	cmp	r3, #10
 8017a4a:	d90b      	bls.n	8017a64 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2205      	movs	r2, #5
 8017a5c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8017a60:	2301      	movs	r3, #1
 8017a62:	e0c5      	b.n	8017bf0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	f003 0301 	and.w	r3, r3, #1
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d0e5      	beq.n	8017a3e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	681a      	ldr	r2, [r3, #0]
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	f022 0202 	bic.w	r2, r2, #2
 8017a80:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017a82:	f7ff ff5f 	bl	8017944 <HAL_GetTick>
 8017a86:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8017a88:	e012      	b.n	8017ab0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8017a8a:	f7ff ff5b 	bl	8017944 <HAL_GetTick>
 8017a8e:	4602      	mov	r2, r0
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	1ad3      	subs	r3, r2, r3
 8017a94:	2b0a      	cmp	r3, #10
 8017a96:	d90b      	bls.n	8017ab0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	2205      	movs	r2, #5
 8017aa8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8017aac:	2301      	movs	r3, #1
 8017aae:	e09f      	b.n	8017bf0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	685b      	ldr	r3, [r3, #4]
 8017ab6:	f003 0302 	and.w	r3, r3, #2
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d1e5      	bne.n	8017a8a <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	7e1b      	ldrb	r3, [r3, #24]
 8017ac2:	2b01      	cmp	r3, #1
 8017ac4:	d108      	bne.n	8017ad8 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	681a      	ldr	r2, [r3, #0]
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017ad4:	601a      	str	r2, [r3, #0]
 8017ad6:	e007      	b.n	8017ae8 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	681a      	ldr	r2, [r3, #0]
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	7e5b      	ldrb	r3, [r3, #25]
 8017aec:	2b01      	cmp	r3, #1
 8017aee:	d108      	bne.n	8017b02 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	681a      	ldr	r2, [r3, #0]
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017afe:	601a      	str	r2, [r3, #0]
 8017b00:	e007      	b.n	8017b12 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	681a      	ldr	r2, [r3, #0]
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	7e9b      	ldrb	r3, [r3, #26]
 8017b16:	2b01      	cmp	r3, #1
 8017b18:	d108      	bne.n	8017b2c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	681a      	ldr	r2, [r3, #0]
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	f042 0220 	orr.w	r2, r2, #32
 8017b28:	601a      	str	r2, [r3, #0]
 8017b2a:	e007      	b.n	8017b3c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	681a      	ldr	r2, [r3, #0]
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	f022 0220 	bic.w	r2, r2, #32
 8017b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	7edb      	ldrb	r3, [r3, #27]
 8017b40:	2b01      	cmp	r3, #1
 8017b42:	d108      	bne.n	8017b56 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	f022 0210 	bic.w	r2, r2, #16
 8017b52:	601a      	str	r2, [r3, #0]
 8017b54:	e007      	b.n	8017b66 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	681a      	ldr	r2, [r3, #0]
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	f042 0210 	orr.w	r2, r2, #16
 8017b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	7f1b      	ldrb	r3, [r3, #28]
 8017b6a:	2b01      	cmp	r3, #1
 8017b6c:	d108      	bne.n	8017b80 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	681a      	ldr	r2, [r3, #0]
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	f042 0208 	orr.w	r2, r2, #8
 8017b7c:	601a      	str	r2, [r3, #0]
 8017b7e:	e007      	b.n	8017b90 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	681a      	ldr	r2, [r3, #0]
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	f022 0208 	bic.w	r2, r2, #8
 8017b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	7f5b      	ldrb	r3, [r3, #29]
 8017b94:	2b01      	cmp	r3, #1
 8017b96:	d108      	bne.n	8017baa <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	681a      	ldr	r2, [r3, #0]
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	f042 0204 	orr.w	r2, r2, #4
 8017ba6:	601a      	str	r2, [r3, #0]
 8017ba8:	e007      	b.n	8017bba <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	681a      	ldr	r2, [r3, #0]
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	f022 0204 	bic.w	r2, r2, #4
 8017bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	689a      	ldr	r2, [r3, #8]
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	68db      	ldr	r3, [r3, #12]
 8017bc2:	431a      	orrs	r2, r3
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	691b      	ldr	r3, [r3, #16]
 8017bc8:	431a      	orrs	r2, r3
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	695b      	ldr	r3, [r3, #20]
 8017bce:	ea42 0103 	orr.w	r1, r2, r3
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	685b      	ldr	r3, [r3, #4]
 8017bd6:	1e5a      	subs	r2, r3, #1
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	430a      	orrs	r2, r1
 8017bde:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	2200      	movs	r2, #0
 8017be4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	2201      	movs	r2, #1
 8017bea:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8017bee:	2300      	movs	r3, #0
}
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	3710      	adds	r7, #16
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	bd80      	pop	{r7, pc}
 8017bf8:	08010581 	.word	0x08010581
 8017bfc:	080186eb 	.word	0x080186eb
 8017c00:	0801069d 	.word	0x0801069d
 8017c04:	080186ff 	.word	0x080186ff
 8017c08:	08018673 	.word	0x08018673
 8017c0c:	08018687 	.word	0x08018687
 8017c10:	0801869b 	.word	0x0801869b
 8017c14:	080186af 	.word	0x080186af
 8017c18:	080186c3 	.word	0x080186c3
 8017c1c:	080186d7 	.word	0x080186d7
 8017c20:	08018713 	.word	0x08018713
 8017c24:	08018727 	.word	0x08018727
 8017c28:	0801873b 	.word	0x0801873b
 8017c2c:	0800fd45 	.word	0x0800fd45

08017c30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8017c30:	b480      	push	{r7}
 8017c32:	b087      	sub	sp, #28
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017c46:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8017c48:	7cfb      	ldrb	r3, [r7, #19]
 8017c4a:	2b01      	cmp	r3, #1
 8017c4c:	d003      	beq.n	8017c56 <HAL_CAN_ConfigFilter+0x26>
 8017c4e:	7cfb      	ldrb	r3, [r7, #19]
 8017c50:	2b02      	cmp	r3, #2
 8017c52:	f040 80c7 	bne.w	8017de4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	4a69      	ldr	r2, [pc, #420]	; (8017e00 <HAL_CAN_ConfigFilter+0x1d0>)
 8017c5c:	4293      	cmp	r3, r2
 8017c5e:	d001      	beq.n	8017c64 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8017c60:	4b68      	ldr	r3, [pc, #416]	; (8017e04 <HAL_CAN_ConfigFilter+0x1d4>)
 8017c62:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8017c6a:	f043 0201 	orr.w	r2, r3, #1
 8017c6e:	697b      	ldr	r3, [r7, #20]
 8017c70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	4a63      	ldr	r2, [pc, #396]	; (8017e04 <HAL_CAN_ConfigFilter+0x1d4>)
 8017c78:	4293      	cmp	r3, r2
 8017c7a:	d111      	bne.n	8017ca0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8017c82:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8017c8c:	697b      	ldr	r3, [r7, #20]
 8017c8e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c96:	021b      	lsls	r3, r3, #8
 8017c98:	431a      	orrs	r2, r3
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	695b      	ldr	r3, [r3, #20]
 8017ca4:	f003 031f 	and.w	r3, r3, #31
 8017ca8:	2201      	movs	r2, #1
 8017caa:	fa02 f303 	lsl.w	r3, r2, r3
 8017cae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8017cb0:	697b      	ldr	r3, [r7, #20]
 8017cb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	43db      	mvns	r3, r3
 8017cba:	401a      	ands	r2, r3
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	69db      	ldr	r3, [r3, #28]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d123      	bne.n	8017d12 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8017cca:	697b      	ldr	r3, [r7, #20]
 8017ccc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	43db      	mvns	r3, r3
 8017cd4:	401a      	ands	r2, r3
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	68db      	ldr	r3, [r3, #12]
 8017ce0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	685b      	ldr	r3, [r3, #4]
 8017ce6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8017ce8:	683a      	ldr	r2, [r7, #0]
 8017cea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8017cec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	3248      	adds	r2, #72	; 0x48
 8017cf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	689b      	ldr	r3, [r3, #8]
 8017cfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8017cfc:	683b      	ldr	r3, [r7, #0]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8017d02:	683b      	ldr	r3, [r7, #0]
 8017d04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8017d06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8017d08:	6979      	ldr	r1, [r7, #20]
 8017d0a:	3348      	adds	r3, #72	; 0x48
 8017d0c:	00db      	lsls	r3, r3, #3
 8017d0e:	440b      	add	r3, r1
 8017d10:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	69db      	ldr	r3, [r3, #28]
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d122      	bne.n	8017d60 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	431a      	orrs	r2, r3
 8017d24:	697b      	ldr	r3, [r7, #20]
 8017d26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8017d30:	683b      	ldr	r3, [r7, #0]
 8017d32:	685b      	ldr	r3, [r3, #4]
 8017d34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8017d36:	683a      	ldr	r2, [r7, #0]
 8017d38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8017d3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	3248      	adds	r2, #72	; 0x48
 8017d40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8017d44:	683b      	ldr	r3, [r7, #0]
 8017d46:	689b      	ldr	r3, [r3, #8]
 8017d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	68db      	ldr	r3, [r3, #12]
 8017d4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8017d54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8017d56:	6979      	ldr	r1, [r7, #20]
 8017d58:	3348      	adds	r3, #72	; 0x48
 8017d5a:	00db      	lsls	r3, r3, #3
 8017d5c:	440b      	add	r3, r1
 8017d5e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	699b      	ldr	r3, [r3, #24]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d109      	bne.n	8017d7c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8017d68:	697b      	ldr	r3, [r7, #20]
 8017d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	43db      	mvns	r3, r3
 8017d72:	401a      	ands	r2, r3
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8017d7a:	e007      	b.n	8017d8c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	431a      	orrs	r2, r3
 8017d86:	697b      	ldr	r3, [r7, #20]
 8017d88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8017d8c:	683b      	ldr	r3, [r7, #0]
 8017d8e:	691b      	ldr	r3, [r3, #16]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d109      	bne.n	8017da8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8017d94:	697b      	ldr	r3, [r7, #20]
 8017d96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	43db      	mvns	r3, r3
 8017d9e:	401a      	ands	r2, r3
 8017da0:	697b      	ldr	r3, [r7, #20]
 8017da2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8017da6:	e007      	b.n	8017db8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	431a      	orrs	r2, r3
 8017db2:	697b      	ldr	r3, [r7, #20]
 8017db4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	6a1b      	ldr	r3, [r3, #32]
 8017dbc:	2b01      	cmp	r3, #1
 8017dbe:	d107      	bne.n	8017dd0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8017dc0:	697b      	ldr	r3, [r7, #20]
 8017dc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	431a      	orrs	r2, r3
 8017dca:	697b      	ldr	r3, [r7, #20]
 8017dcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8017dd0:	697b      	ldr	r3, [r7, #20]
 8017dd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8017dd6:	f023 0201 	bic.w	r2, r3, #1
 8017dda:	697b      	ldr	r3, [r7, #20]
 8017ddc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8017de0:	2300      	movs	r3, #0
 8017de2:	e006      	b.n	8017df2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017de8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8017df0:	2301      	movs	r3, #1
  }
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	371c      	adds	r7, #28
 8017df6:	46bd      	mov	sp, r7
 8017df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfc:	4770      	bx	lr
 8017dfe:	bf00      	nop
 8017e00:	40003400 	.word	0x40003400
 8017e04:	40006400 	.word	0x40006400

08017e08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b084      	sub	sp, #16
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	2b01      	cmp	r3, #1
 8017e1a:	d12e      	bne.n	8017e7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	2202      	movs	r2, #2
 8017e20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	681a      	ldr	r2, [r3, #0]
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	f022 0201 	bic.w	r2, r2, #1
 8017e32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8017e34:	f7ff fd86 	bl	8017944 <HAL_GetTick>
 8017e38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8017e3a:	e012      	b.n	8017e62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8017e3c:	f7ff fd82 	bl	8017944 <HAL_GetTick>
 8017e40:	4602      	mov	r2, r0
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	1ad3      	subs	r3, r2, r3
 8017e46:	2b0a      	cmp	r3, #10
 8017e48:	d90b      	bls.n	8017e62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	2205      	movs	r2, #5
 8017e5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e012      	b.n	8017e88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	685b      	ldr	r3, [r3, #4]
 8017e68:	f003 0301 	and.w	r3, r3, #1
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d1e5      	bne.n	8017e3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2200      	movs	r2, #0
 8017e74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8017e76:	2300      	movs	r3, #0
 8017e78:	e006      	b.n	8017e88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8017e86:	2301      	movs	r3, #1
  }
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3710      	adds	r7, #16
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8017e90:	b480      	push	{r7}
 8017e92:	b089      	sub	sp, #36	; 0x24
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	60f8      	str	r0, [r7, #12]
 8017e98:	60b9      	str	r1, [r7, #8]
 8017e9a:	607a      	str	r2, [r7, #4]
 8017e9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017ea4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	689b      	ldr	r3, [r3, #8]
 8017eac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8017eae:	7ffb      	ldrb	r3, [r7, #31]
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d003      	beq.n	8017ebc <HAL_CAN_AddTxMessage+0x2c>
 8017eb4:	7ffb      	ldrb	r3, [r7, #31]
 8017eb6:	2b02      	cmp	r3, #2
 8017eb8:	f040 80ad 	bne.w	8018016 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8017ebc:	69bb      	ldr	r3, [r7, #24]
 8017ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d10a      	bne.n	8017edc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d105      	bne.n	8017edc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8017ed0:	69bb      	ldr	r3, [r7, #24]
 8017ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	f000 8095 	beq.w	8018006 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	0e1b      	lsrs	r3, r3, #24
 8017ee0:	f003 0303 	and.w	r3, r3, #3
 8017ee4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	697b      	ldr	r3, [r7, #20]
 8017eea:	409a      	lsls	r2, r3
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	689b      	ldr	r3, [r3, #8]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d10d      	bne.n	8017f14 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8017efe:	68bb      	ldr	r3, [r7, #8]
 8017f00:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8017f02:	68f9      	ldr	r1, [r7, #12]
 8017f04:	6809      	ldr	r1, [r1, #0]
 8017f06:	431a      	orrs	r2, r3
 8017f08:	697b      	ldr	r3, [r7, #20]
 8017f0a:	3318      	adds	r3, #24
 8017f0c:	011b      	lsls	r3, r3, #4
 8017f0e:	440b      	add	r3, r1
 8017f10:	601a      	str	r2, [r3, #0]
 8017f12:	e00f      	b.n	8017f34 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	685b      	ldr	r3, [r3, #4]
 8017f18:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8017f1a:	68bb      	ldr	r3, [r7, #8]
 8017f1c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8017f1e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8017f20:	68bb      	ldr	r3, [r7, #8]
 8017f22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8017f24:	68f9      	ldr	r1, [r7, #12]
 8017f26:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8017f28:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8017f2a:	697b      	ldr	r3, [r7, #20]
 8017f2c:	3318      	adds	r3, #24
 8017f2e:	011b      	lsls	r3, r3, #4
 8017f30:	440b      	add	r3, r1
 8017f32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	6819      	ldr	r1, [r3, #0]
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	691a      	ldr	r2, [r3, #16]
 8017f3c:	697b      	ldr	r3, [r7, #20]
 8017f3e:	3318      	adds	r3, #24
 8017f40:	011b      	lsls	r3, r3, #4
 8017f42:	440b      	add	r3, r1
 8017f44:	3304      	adds	r3, #4
 8017f46:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	7d1b      	ldrb	r3, [r3, #20]
 8017f4c:	2b01      	cmp	r3, #1
 8017f4e:	d111      	bne.n	8017f74 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	681a      	ldr	r2, [r3, #0]
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	3318      	adds	r3, #24
 8017f58:	011b      	lsls	r3, r3, #4
 8017f5a:	4413      	add	r3, r2
 8017f5c:	3304      	adds	r3, #4
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	68fa      	ldr	r2, [r7, #12]
 8017f62:	6811      	ldr	r1, [r2, #0]
 8017f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	3318      	adds	r3, #24
 8017f6c:	011b      	lsls	r3, r3, #4
 8017f6e:	440b      	add	r3, r1
 8017f70:	3304      	adds	r3, #4
 8017f72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	3307      	adds	r3, #7
 8017f78:	781b      	ldrb	r3, [r3, #0]
 8017f7a:	061a      	lsls	r2, r3, #24
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	3306      	adds	r3, #6
 8017f80:	781b      	ldrb	r3, [r3, #0]
 8017f82:	041b      	lsls	r3, r3, #16
 8017f84:	431a      	orrs	r2, r3
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	3305      	adds	r3, #5
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	021b      	lsls	r3, r3, #8
 8017f8e:	4313      	orrs	r3, r2
 8017f90:	687a      	ldr	r2, [r7, #4]
 8017f92:	3204      	adds	r2, #4
 8017f94:	7812      	ldrb	r2, [r2, #0]
 8017f96:	4610      	mov	r0, r2
 8017f98:	68fa      	ldr	r2, [r7, #12]
 8017f9a:	6811      	ldr	r1, [r2, #0]
 8017f9c:	ea43 0200 	orr.w	r2, r3, r0
 8017fa0:	697b      	ldr	r3, [r7, #20]
 8017fa2:	011b      	lsls	r3, r3, #4
 8017fa4:	440b      	add	r3, r1
 8017fa6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8017faa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	3303      	adds	r3, #3
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	061a      	lsls	r2, r3, #24
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	3302      	adds	r3, #2
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	041b      	lsls	r3, r3, #16
 8017fbc:	431a      	orrs	r2, r3
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	3301      	adds	r3, #1
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	021b      	lsls	r3, r3, #8
 8017fc6:	4313      	orrs	r3, r2
 8017fc8:	687a      	ldr	r2, [r7, #4]
 8017fca:	7812      	ldrb	r2, [r2, #0]
 8017fcc:	4610      	mov	r0, r2
 8017fce:	68fa      	ldr	r2, [r7, #12]
 8017fd0:	6811      	ldr	r1, [r2, #0]
 8017fd2:	ea43 0200 	orr.w	r2, r3, r0
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	011b      	lsls	r3, r3, #4
 8017fda:	440b      	add	r3, r1
 8017fdc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8017fe0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	681a      	ldr	r2, [r3, #0]
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	3318      	adds	r3, #24
 8017fea:	011b      	lsls	r3, r3, #4
 8017fec:	4413      	add	r3, r2
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	68fa      	ldr	r2, [r7, #12]
 8017ff2:	6811      	ldr	r1, [r2, #0]
 8017ff4:	f043 0201 	orr.w	r2, r3, #1
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	3318      	adds	r3, #24
 8017ffc:	011b      	lsls	r3, r3, #4
 8017ffe:	440b      	add	r3, r1
 8018000:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8018002:	2300      	movs	r3, #0
 8018004:	e00e      	b.n	8018024 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801800a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8018012:	2301      	movs	r3, #1
 8018014:	e006      	b.n	8018024 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801801a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8018022:	2301      	movs	r3, #1
  }
}
 8018024:	4618      	mov	r0, r3
 8018026:	3724      	adds	r7, #36	; 0x24
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr

08018030 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8018030:	b480      	push	{r7}
 8018032:	b085      	sub	sp, #20
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 801803a:	2300      	movs	r3, #0
 801803c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018044:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8018046:	7afb      	ldrb	r3, [r7, #11]
 8018048:	2b01      	cmp	r3, #1
 801804a:	d002      	beq.n	8018052 <HAL_CAN_IsTxMessagePending+0x22>
 801804c:	7afb      	ldrb	r3, [r7, #11]
 801804e:	2b02      	cmp	r3, #2
 8018050:	d10b      	bne.n	801806a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	689a      	ldr	r2, [r3, #8]
 8018058:	683b      	ldr	r3, [r7, #0]
 801805a:	069b      	lsls	r3, r3, #26
 801805c:	401a      	ands	r2, r3
 801805e:	683b      	ldr	r3, [r7, #0]
 8018060:	069b      	lsls	r3, r3, #26
 8018062:	429a      	cmp	r2, r3
 8018064:	d001      	beq.n	801806a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8018066:	2301      	movs	r3, #1
 8018068:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 801806a:	68fb      	ldr	r3, [r7, #12]
}
 801806c:	4618      	mov	r0, r3
 801806e:	3714      	adds	r7, #20
 8018070:	46bd      	mov	sp, r7
 8018072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018076:	4770      	bx	lr

08018078 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8018078:	b480      	push	{r7}
 801807a:	b087      	sub	sp, #28
 801807c:	af00      	add	r7, sp, #0
 801807e:	60f8      	str	r0, [r7, #12]
 8018080:	60b9      	str	r1, [r7, #8]
 8018082:	607a      	str	r2, [r7, #4]
 8018084:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	f893 3020 	ldrb.w	r3, [r3, #32]
 801808c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 801808e:	7dfb      	ldrb	r3, [r7, #23]
 8018090:	2b01      	cmp	r3, #1
 8018092:	d003      	beq.n	801809c <HAL_CAN_GetRxMessage+0x24>
 8018094:	7dfb      	ldrb	r3, [r7, #23]
 8018096:	2b02      	cmp	r3, #2
 8018098:	f040 80f3 	bne.w	8018282 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d10e      	bne.n	80180c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	68db      	ldr	r3, [r3, #12]
 80180a8:	f003 0303 	and.w	r3, r3, #3
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d116      	bne.n	80180de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80180bc:	2301      	movs	r3, #1
 80180be:	e0e7      	b.n	8018290 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	691b      	ldr	r3, [r3, #16]
 80180c6:	f003 0303 	and.w	r3, r3, #3
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d107      	bne.n	80180de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80180da:	2301      	movs	r3, #1
 80180dc:	e0d8      	b.n	8018290 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	681a      	ldr	r2, [r3, #0]
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	331b      	adds	r3, #27
 80180e6:	011b      	lsls	r3, r3, #4
 80180e8:	4413      	add	r3, r2
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	f003 0204 	and.w	r2, r3, #4
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	689b      	ldr	r3, [r3, #8]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d10c      	bne.n	8018116 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	681a      	ldr	r2, [r3, #0]
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	331b      	adds	r3, #27
 8018104:	011b      	lsls	r3, r3, #4
 8018106:	4413      	add	r3, r2
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	0d5b      	lsrs	r3, r3, #21
 801810c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	601a      	str	r2, [r3, #0]
 8018114:	e00b      	b.n	801812e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	681a      	ldr	r2, [r3, #0]
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	331b      	adds	r3, #27
 801811e:	011b      	lsls	r3, r3, #4
 8018120:	4413      	add	r3, r2
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	08db      	lsrs	r3, r3, #3
 8018126:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	681a      	ldr	r2, [r3, #0]
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	331b      	adds	r3, #27
 8018136:	011b      	lsls	r3, r3, #4
 8018138:	4413      	add	r3, r2
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f003 0202 	and.w	r2, r3, #2
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	681a      	ldr	r2, [r3, #0]
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	331b      	adds	r3, #27
 801814c:	011b      	lsls	r3, r3, #4
 801814e:	4413      	add	r3, r2
 8018150:	3304      	adds	r3, #4
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	f003 020f 	and.w	r2, r3, #15
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	681a      	ldr	r2, [r3, #0]
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	331b      	adds	r3, #27
 8018164:	011b      	lsls	r3, r3, #4
 8018166:	4413      	add	r3, r2
 8018168:	3304      	adds	r3, #4
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	0a1b      	lsrs	r3, r3, #8
 801816e:	b2da      	uxtb	r2, r3
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	681a      	ldr	r2, [r3, #0]
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	331b      	adds	r3, #27
 801817c:	011b      	lsls	r3, r3, #4
 801817e:	4413      	add	r3, r2
 8018180:	3304      	adds	r3, #4
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	0c1b      	lsrs	r3, r3, #16
 8018186:	b29a      	uxth	r2, r3
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	681a      	ldr	r2, [r3, #0]
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	011b      	lsls	r3, r3, #4
 8018194:	4413      	add	r3, r2
 8018196:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	b2da      	uxtb	r2, r3
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	681a      	ldr	r2, [r3, #0]
 80181a6:	68bb      	ldr	r3, [r7, #8]
 80181a8:	011b      	lsls	r3, r3, #4
 80181aa:	4413      	add	r3, r2
 80181ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	0a1a      	lsrs	r2, r3, #8
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	3301      	adds	r3, #1
 80181b8:	b2d2      	uxtb	r2, r2
 80181ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	681a      	ldr	r2, [r3, #0]
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	011b      	lsls	r3, r3, #4
 80181c4:	4413      	add	r3, r2
 80181c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	0c1a      	lsrs	r2, r3, #16
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	3302      	adds	r3, #2
 80181d2:	b2d2      	uxtb	r2, r2
 80181d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	681a      	ldr	r2, [r3, #0]
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	011b      	lsls	r3, r3, #4
 80181de:	4413      	add	r3, r2
 80181e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	0e1a      	lsrs	r2, r3, #24
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	3303      	adds	r3, #3
 80181ec:	b2d2      	uxtb	r2, r2
 80181ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	681a      	ldr	r2, [r3, #0]
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	011b      	lsls	r3, r3, #4
 80181f8:	4413      	add	r3, r2
 80181fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80181fe:	681a      	ldr	r2, [r3, #0]
 8018200:	683b      	ldr	r3, [r7, #0]
 8018202:	3304      	adds	r3, #4
 8018204:	b2d2      	uxtb	r2, r2
 8018206:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	011b      	lsls	r3, r3, #4
 8018210:	4413      	add	r3, r2
 8018212:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	0a1a      	lsrs	r2, r3, #8
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	3305      	adds	r3, #5
 801821e:	b2d2      	uxtb	r2, r2
 8018220:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	681a      	ldr	r2, [r3, #0]
 8018226:	68bb      	ldr	r3, [r7, #8]
 8018228:	011b      	lsls	r3, r3, #4
 801822a:	4413      	add	r3, r2
 801822c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	0c1a      	lsrs	r2, r3, #16
 8018234:	683b      	ldr	r3, [r7, #0]
 8018236:	3306      	adds	r3, #6
 8018238:	b2d2      	uxtb	r2, r2
 801823a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	681a      	ldr	r2, [r3, #0]
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	011b      	lsls	r3, r3, #4
 8018244:	4413      	add	r3, r2
 8018246:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	0e1a      	lsrs	r2, r3, #24
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	3307      	adds	r3, #7
 8018252:	b2d2      	uxtb	r2, r2
 8018254:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d108      	bne.n	801826e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	68da      	ldr	r2, [r3, #12]
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	f042 0220 	orr.w	r2, r2, #32
 801826a:	60da      	str	r2, [r3, #12]
 801826c:	e007      	b.n	801827e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	691a      	ldr	r2, [r3, #16]
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	f042 0220 	orr.w	r2, r2, #32
 801827c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 801827e:	2300      	movs	r3, #0
 8018280:	e006      	b.n	8018290 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018286:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801828e:	2301      	movs	r3, #1
  }
}
 8018290:	4618      	mov	r0, r3
 8018292:	371c      	adds	r7, #28
 8018294:	46bd      	mov	sp, r7
 8018296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829a:	4770      	bx	lr

0801829c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 801829c:	b480      	push	{r7}
 801829e:	b085      	sub	sp, #20
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
 80182a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80182ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80182ae:	7bfb      	ldrb	r3, [r7, #15]
 80182b0:	2b01      	cmp	r3, #1
 80182b2:	d002      	beq.n	80182ba <HAL_CAN_ActivateNotification+0x1e>
 80182b4:	7bfb      	ldrb	r3, [r7, #15]
 80182b6:	2b02      	cmp	r3, #2
 80182b8:	d109      	bne.n	80182ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	6959      	ldr	r1, [r3, #20]
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	683a      	ldr	r2, [r7, #0]
 80182c6:	430a      	orrs	r2, r1
 80182c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80182ca:	2300      	movs	r3, #0
 80182cc:	e006      	b.n	80182dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80182da:	2301      	movs	r3, #1
  }
}
 80182dc:	4618      	mov	r0, r3
 80182de:	3714      	adds	r7, #20
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr

080182e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b08a      	sub	sp, #40	; 0x28
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80182f0:	2300      	movs	r3, #0
 80182f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	695b      	ldr	r3, [r3, #20]
 80182fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	685b      	ldr	r3, [r3, #4]
 8018302:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	689b      	ldr	r3, [r3, #8]
 801830a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	68db      	ldr	r3, [r3, #12]
 8018312:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	691b      	ldr	r3, [r3, #16]
 801831a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	699b      	ldr	r3, [r3, #24]
 8018322:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8018324:	6a3b      	ldr	r3, [r7, #32]
 8018326:	f003 0301 	and.w	r3, r3, #1
 801832a:	2b00      	cmp	r3, #0
 801832c:	f000 8083 	beq.w	8018436 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8018330:	69bb      	ldr	r3, [r7, #24]
 8018332:	f003 0301 	and.w	r3, r3, #1
 8018336:	2b00      	cmp	r3, #0
 8018338:	d025      	beq.n	8018386 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	2201      	movs	r2, #1
 8018340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8018342:	69bb      	ldr	r3, [r7, #24]
 8018344:	f003 0302 	and.w	r3, r3, #2
 8018348:	2b00      	cmp	r3, #0
 801834a:	d004      	beq.n	8018356 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	4798      	blx	r3
 8018354:	e017      	b.n	8018386 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8018356:	69bb      	ldr	r3, [r7, #24]
 8018358:	f003 0304 	and.w	r3, r3, #4
 801835c:	2b00      	cmp	r3, #0
 801835e:	d004      	beq.n	801836a <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8018360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018362:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018366:	627b      	str	r3, [r7, #36]	; 0x24
 8018368:	e00d      	b.n	8018386 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801836a:	69bb      	ldr	r3, [r7, #24]
 801836c:	f003 0308 	and.w	r3, r3, #8
 8018370:	2b00      	cmp	r3, #0
 8018372:	d004      	beq.n	801837e <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8018374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801837a:	627b      	str	r3, [r7, #36]	; 0x24
 801837c:	e003      	b.n	8018386 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018382:	6878      	ldr	r0, [r7, #4]
 8018384:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8018386:	69bb      	ldr	r3, [r7, #24]
 8018388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801838c:	2b00      	cmp	r3, #0
 801838e:	d026      	beq.n	80183de <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018398:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801839a:	69bb      	ldr	r3, [r7, #24]
 801839c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d004      	beq.n	80183ae <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183a8:	6878      	ldr	r0, [r7, #4]
 80183aa:	4798      	blx	r3
 80183ac:	e017      	b.n	80183de <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80183ae:	69bb      	ldr	r3, [r7, #24]
 80183b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d004      	beq.n	80183c2 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80183b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80183be:	627b      	str	r3, [r7, #36]	; 0x24
 80183c0:	e00d      	b.n	80183de <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80183c2:	69bb      	ldr	r3, [r7, #24]
 80183c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d004      	beq.n	80183d6 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80183cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80183d2:	627b      	str	r3, [r7, #36]	; 0x24
 80183d4:	e003      	b.n	80183de <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183da:	6878      	ldr	r0, [r7, #4]
 80183dc:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80183de:	69bb      	ldr	r3, [r7, #24]
 80183e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d026      	beq.n	8018436 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80183f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80183f2:	69bb      	ldr	r3, [r7, #24]
 80183f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d004      	beq.n	8018406 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018400:	6878      	ldr	r0, [r7, #4]
 8018402:	4798      	blx	r3
 8018404:	e017      	b.n	8018436 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8018406:	69bb      	ldr	r3, [r7, #24]
 8018408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801840c:	2b00      	cmp	r3, #0
 801840e:	d004      	beq.n	801841a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8018410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018416:	627b      	str	r3, [r7, #36]	; 0x24
 8018418:	e00d      	b.n	8018436 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801841a:	69bb      	ldr	r3, [r7, #24]
 801841c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018420:	2b00      	cmp	r3, #0
 8018422:	d004      	beq.n	801842e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801842a:	627b      	str	r3, [r7, #36]	; 0x24
 801842c:	e003      	b.n	8018436 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8018436:	6a3b      	ldr	r3, [r7, #32]
 8018438:	f003 0308 	and.w	r3, r3, #8
 801843c:	2b00      	cmp	r3, #0
 801843e:	d00c      	beq.n	801845a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	f003 0310 	and.w	r3, r3, #16
 8018446:	2b00      	cmp	r3, #0
 8018448:	d007      	beq.n	801845a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018450:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2210      	movs	r2, #16
 8018458:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801845a:	6a3b      	ldr	r3, [r7, #32]
 801845c:	f003 0304 	and.w	r3, r3, #4
 8018460:	2b00      	cmp	r3, #0
 8018462:	d00c      	beq.n	801847e <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8018464:	697b      	ldr	r3, [r7, #20]
 8018466:	f003 0308 	and.w	r3, r3, #8
 801846a:	2b00      	cmp	r3, #0
 801846c:	d007      	beq.n	801847e <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	2208      	movs	r2, #8
 8018474:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801847e:	6a3b      	ldr	r3, [r7, #32]
 8018480:	f003 0302 	and.w	r3, r3, #2
 8018484:	2b00      	cmp	r3, #0
 8018486:	d00a      	beq.n	801849e <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	68db      	ldr	r3, [r3, #12]
 801848e:	f003 0303 	and.w	r3, r3, #3
 8018492:	2b00      	cmp	r3, #0
 8018494:	d003      	beq.n	801849e <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801849a:	6878      	ldr	r0, [r7, #4]
 801849c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 801849e:	6a3b      	ldr	r3, [r7, #32]
 80184a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d00c      	beq.n	80184c2 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80184a8:	693b      	ldr	r3, [r7, #16]
 80184aa:	f003 0310 	and.w	r3, r3, #16
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d007      	beq.n	80184c2 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80184b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80184b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	2210      	movs	r2, #16
 80184c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80184c2:	6a3b      	ldr	r3, [r7, #32]
 80184c4:	f003 0320 	and.w	r3, r3, #32
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d00c      	beq.n	80184e6 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80184cc:	693b      	ldr	r3, [r7, #16]
 80184ce:	f003 0308 	and.w	r3, r3, #8
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d007      	beq.n	80184e6 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	2208      	movs	r2, #8
 80184dc:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184e2:	6878      	ldr	r0, [r7, #4]
 80184e4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80184e6:	6a3b      	ldr	r3, [r7, #32]
 80184e8:	f003 0310 	and.w	r3, r3, #16
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d00a      	beq.n	8018506 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	691b      	ldr	r3, [r3, #16]
 80184f6:	f003 0303 	and.w	r3, r3, #3
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d003      	beq.n	8018506 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8018506:	6a3b      	ldr	r3, [r7, #32]
 8018508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801850c:	2b00      	cmp	r3, #0
 801850e:	d00c      	beq.n	801852a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	f003 0310 	and.w	r3, r3, #16
 8018516:	2b00      	cmp	r3, #0
 8018518:	d007      	beq.n	801852a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	2210      	movs	r2, #16
 8018520:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801852a:	6a3b      	ldr	r3, [r7, #32]
 801852c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018530:	2b00      	cmp	r3, #0
 8018532:	d00c      	beq.n	801854e <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8018534:	69fb      	ldr	r3, [r7, #28]
 8018536:	f003 0308 	and.w	r3, r3, #8
 801853a:	2b00      	cmp	r3, #0
 801853c:	d007      	beq.n	801854e <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	2208      	movs	r2, #8
 8018544:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801854a:	6878      	ldr	r0, [r7, #4]
 801854c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801854e:	6a3b      	ldr	r3, [r7, #32]
 8018550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018554:	2b00      	cmp	r3, #0
 8018556:	d07b      	beq.n	8018650 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8018558:	69fb      	ldr	r3, [r7, #28]
 801855a:	f003 0304 	and.w	r3, r3, #4
 801855e:	2b00      	cmp	r3, #0
 8018560:	d072      	beq.n	8018648 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8018562:	6a3b      	ldr	r3, [r7, #32]
 8018564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018568:	2b00      	cmp	r3, #0
 801856a:	d008      	beq.n	801857e <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8018572:	2b00      	cmp	r3, #0
 8018574:	d003      	beq.n	801857e <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8018576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018578:	f043 0301 	orr.w	r3, r3, #1
 801857c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801857e:	6a3b      	ldr	r3, [r7, #32]
 8018580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018584:	2b00      	cmp	r3, #0
 8018586:	d008      	beq.n	801859a <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801858e:	2b00      	cmp	r3, #0
 8018590:	d003      	beq.n	801859a <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8018592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018594:	f043 0302 	orr.w	r3, r3, #2
 8018598:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801859a:	6a3b      	ldr	r3, [r7, #32]
 801859c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d008      	beq.n	80185b6 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d003      	beq.n	80185b6 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80185ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b0:	f043 0304 	orr.w	r3, r3, #4
 80185b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80185b6:	6a3b      	ldr	r3, [r7, #32]
 80185b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d043      	beq.n	8018648 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d03e      	beq.n	8018648 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80185d0:	2b60      	cmp	r3, #96	; 0x60
 80185d2:	d02b      	beq.n	801862c <HAL_CAN_IRQHandler+0x344>
 80185d4:	2b60      	cmp	r3, #96	; 0x60
 80185d6:	d82e      	bhi.n	8018636 <HAL_CAN_IRQHandler+0x34e>
 80185d8:	2b50      	cmp	r3, #80	; 0x50
 80185da:	d022      	beq.n	8018622 <HAL_CAN_IRQHandler+0x33a>
 80185dc:	2b50      	cmp	r3, #80	; 0x50
 80185de:	d82a      	bhi.n	8018636 <HAL_CAN_IRQHandler+0x34e>
 80185e0:	2b40      	cmp	r3, #64	; 0x40
 80185e2:	d019      	beq.n	8018618 <HAL_CAN_IRQHandler+0x330>
 80185e4:	2b40      	cmp	r3, #64	; 0x40
 80185e6:	d826      	bhi.n	8018636 <HAL_CAN_IRQHandler+0x34e>
 80185e8:	2b30      	cmp	r3, #48	; 0x30
 80185ea:	d010      	beq.n	801860e <HAL_CAN_IRQHandler+0x326>
 80185ec:	2b30      	cmp	r3, #48	; 0x30
 80185ee:	d822      	bhi.n	8018636 <HAL_CAN_IRQHandler+0x34e>
 80185f0:	2b10      	cmp	r3, #16
 80185f2:	d002      	beq.n	80185fa <HAL_CAN_IRQHandler+0x312>
 80185f4:	2b20      	cmp	r3, #32
 80185f6:	d005      	beq.n	8018604 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80185f8:	e01d      	b.n	8018636 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80185fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fc:	f043 0308 	orr.w	r3, r3, #8
 8018600:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8018602:	e019      	b.n	8018638 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8018604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018606:	f043 0310 	orr.w	r3, r3, #16
 801860a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801860c:	e014      	b.n	8018638 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 801860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018610:	f043 0320 	orr.w	r3, r3, #32
 8018614:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8018616:	e00f      	b.n	8018638 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8018618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801861a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801861e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8018620:	e00a      	b.n	8018638 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8018622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801862a:	e005      	b.n	8018638 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 801862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8018634:	e000      	b.n	8018638 <HAL_CAN_IRQHandler+0x350>
            break;
 8018636:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	699a      	ldr	r2, [r3, #24]
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8018646:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2204      	movs	r2, #4
 801864e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8018650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018652:	2b00      	cmp	r3, #0
 8018654:	d009      	beq.n	801866a <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801865c:	431a      	orrs	r2, r3
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801866a:	bf00      	nop
 801866c:	3728      	adds	r7, #40	; 0x28
 801866e:	46bd      	mov	sp, r7
 8018670:	bd80      	pop	{r7, pc}

08018672 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8018672:	b480      	push	{r7}
 8018674:	b083      	sub	sp, #12
 8018676:	af00      	add	r7, sp, #0
 8018678:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801867a:	bf00      	nop
 801867c:	370c      	adds	r7, #12
 801867e:	46bd      	mov	sp, r7
 8018680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018684:	4770      	bx	lr

08018686 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8018686:	b480      	push	{r7}
 8018688:	b083      	sub	sp, #12
 801868a:	af00      	add	r7, sp, #0
 801868c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801868e:	bf00      	nop
 8018690:	370c      	adds	r7, #12
 8018692:	46bd      	mov	sp, r7
 8018694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018698:	4770      	bx	lr

0801869a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801869a:	b480      	push	{r7}
 801869c:	b083      	sub	sp, #12
 801869e:	af00      	add	r7, sp, #0
 80186a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80186a2:	bf00      	nop
 80186a4:	370c      	adds	r7, #12
 80186a6:	46bd      	mov	sp, r7
 80186a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ac:	4770      	bx	lr

080186ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80186ae:	b480      	push	{r7}
 80186b0:	b083      	sub	sp, #12
 80186b2:	af00      	add	r7, sp, #0
 80186b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80186b6:	bf00      	nop
 80186b8:	370c      	adds	r7, #12
 80186ba:	46bd      	mov	sp, r7
 80186bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c0:	4770      	bx	lr

080186c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80186c2:	b480      	push	{r7}
 80186c4:	b083      	sub	sp, #12
 80186c6:	af00      	add	r7, sp, #0
 80186c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80186ca:	bf00      	nop
 80186cc:	370c      	adds	r7, #12
 80186ce:	46bd      	mov	sp, r7
 80186d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d4:	4770      	bx	lr

080186d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80186d6:	b480      	push	{r7}
 80186d8:	b083      	sub	sp, #12
 80186da:	af00      	add	r7, sp, #0
 80186dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80186de:	bf00      	nop
 80186e0:	370c      	adds	r7, #12
 80186e2:	46bd      	mov	sp, r7
 80186e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e8:	4770      	bx	lr

080186ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80186ea:	b480      	push	{r7}
 80186ec:	b083      	sub	sp, #12
 80186ee:	af00      	add	r7, sp, #0
 80186f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80186f2:	bf00      	nop
 80186f4:	370c      	adds	r7, #12
 80186f6:	46bd      	mov	sp, r7
 80186f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fc:	4770      	bx	lr

080186fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80186fe:	b480      	push	{r7}
 8018700:	b083      	sub	sp, #12
 8018702:	af00      	add	r7, sp, #0
 8018704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8018706:	bf00      	nop
 8018708:	370c      	adds	r7, #12
 801870a:	46bd      	mov	sp, r7
 801870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018710:	4770      	bx	lr

08018712 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8018712:	b480      	push	{r7}
 8018714:	b083      	sub	sp, #12
 8018716:	af00      	add	r7, sp, #0
 8018718:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801871a:	bf00      	nop
 801871c:	370c      	adds	r7, #12
 801871e:	46bd      	mov	sp, r7
 8018720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018724:	4770      	bx	lr

08018726 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8018726:	b480      	push	{r7}
 8018728:	b083      	sub	sp, #12
 801872a:	af00      	add	r7, sp, #0
 801872c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801872e:	bf00      	nop
 8018730:	370c      	adds	r7, #12
 8018732:	46bd      	mov	sp, r7
 8018734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018738:	4770      	bx	lr

0801873a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801873a:	b480      	push	{r7}
 801873c:	b083      	sub	sp, #12
 801873e:	af00      	add	r7, sp, #0
 8018740:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8018742:	bf00      	nop
 8018744:	370c      	adds	r7, #12
 8018746:	46bd      	mov	sp, r7
 8018748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874c:	4770      	bx	lr
	...

08018750 <__NVIC_SetPriorityGrouping>:
{
 8018750:	b480      	push	{r7}
 8018752:	b085      	sub	sp, #20
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	f003 0307 	and.w	r3, r3, #7
 801875e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018760:	4b0b      	ldr	r3, [pc, #44]	; (8018790 <__NVIC_SetPriorityGrouping+0x40>)
 8018762:	68db      	ldr	r3, [r3, #12]
 8018764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018766:	68ba      	ldr	r2, [r7, #8]
 8018768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801876c:	4013      	ands	r3, r2
 801876e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8018778:	4b06      	ldr	r3, [pc, #24]	; (8018794 <__NVIC_SetPriorityGrouping+0x44>)
 801877a:	4313      	orrs	r3, r2
 801877c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801877e:	4a04      	ldr	r2, [pc, #16]	; (8018790 <__NVIC_SetPriorityGrouping+0x40>)
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	60d3      	str	r3, [r2, #12]
}
 8018784:	bf00      	nop
 8018786:	3714      	adds	r7, #20
 8018788:	46bd      	mov	sp, r7
 801878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878e:	4770      	bx	lr
 8018790:	e000ed00 	.word	0xe000ed00
 8018794:	05fa0000 	.word	0x05fa0000

08018798 <__NVIC_GetPriorityGrouping>:
{
 8018798:	b480      	push	{r7}
 801879a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801879c:	4b04      	ldr	r3, [pc, #16]	; (80187b0 <__NVIC_GetPriorityGrouping+0x18>)
 801879e:	68db      	ldr	r3, [r3, #12]
 80187a0:	0a1b      	lsrs	r3, r3, #8
 80187a2:	f003 0307 	and.w	r3, r3, #7
}
 80187a6:	4618      	mov	r0, r3
 80187a8:	46bd      	mov	sp, r7
 80187aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ae:	4770      	bx	lr
 80187b0:	e000ed00 	.word	0xe000ed00

080187b4 <__NVIC_EnableIRQ>:
{
 80187b4:	b480      	push	{r7}
 80187b6:	b083      	sub	sp, #12
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	4603      	mov	r3, r0
 80187bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80187be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	db0b      	blt.n	80187de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80187c6:	79fb      	ldrb	r3, [r7, #7]
 80187c8:	f003 021f 	and.w	r2, r3, #31
 80187cc:	4907      	ldr	r1, [pc, #28]	; (80187ec <__NVIC_EnableIRQ+0x38>)
 80187ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187d2:	095b      	lsrs	r3, r3, #5
 80187d4:	2001      	movs	r0, #1
 80187d6:	fa00 f202 	lsl.w	r2, r0, r2
 80187da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80187de:	bf00      	nop
 80187e0:	370c      	adds	r7, #12
 80187e2:	46bd      	mov	sp, r7
 80187e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e8:	4770      	bx	lr
 80187ea:	bf00      	nop
 80187ec:	e000e100 	.word	0xe000e100

080187f0 <__NVIC_SetPriority>:
{
 80187f0:	b480      	push	{r7}
 80187f2:	b083      	sub	sp, #12
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	4603      	mov	r3, r0
 80187f8:	6039      	str	r1, [r7, #0]
 80187fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80187fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018800:	2b00      	cmp	r3, #0
 8018802:	db0a      	blt.n	801881a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	b2da      	uxtb	r2, r3
 8018808:	490c      	ldr	r1, [pc, #48]	; (801883c <__NVIC_SetPriority+0x4c>)
 801880a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801880e:	0112      	lsls	r2, r2, #4
 8018810:	b2d2      	uxtb	r2, r2
 8018812:	440b      	add	r3, r1
 8018814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018818:	e00a      	b.n	8018830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	b2da      	uxtb	r2, r3
 801881e:	4908      	ldr	r1, [pc, #32]	; (8018840 <__NVIC_SetPriority+0x50>)
 8018820:	79fb      	ldrb	r3, [r7, #7]
 8018822:	f003 030f 	and.w	r3, r3, #15
 8018826:	3b04      	subs	r3, #4
 8018828:	0112      	lsls	r2, r2, #4
 801882a:	b2d2      	uxtb	r2, r2
 801882c:	440b      	add	r3, r1
 801882e:	761a      	strb	r2, [r3, #24]
}
 8018830:	bf00      	nop
 8018832:	370c      	adds	r7, #12
 8018834:	46bd      	mov	sp, r7
 8018836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883a:	4770      	bx	lr
 801883c:	e000e100 	.word	0xe000e100
 8018840:	e000ed00 	.word	0xe000ed00

08018844 <NVIC_EncodePriority>:
{
 8018844:	b480      	push	{r7}
 8018846:	b089      	sub	sp, #36	; 0x24
 8018848:	af00      	add	r7, sp, #0
 801884a:	60f8      	str	r0, [r7, #12]
 801884c:	60b9      	str	r1, [r7, #8]
 801884e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	f003 0307 	and.w	r3, r3, #7
 8018856:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018858:	69fb      	ldr	r3, [r7, #28]
 801885a:	f1c3 0307 	rsb	r3, r3, #7
 801885e:	2b04      	cmp	r3, #4
 8018860:	bf28      	it	cs
 8018862:	2304      	movcs	r3, #4
 8018864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	3304      	adds	r3, #4
 801886a:	2b06      	cmp	r3, #6
 801886c:	d902      	bls.n	8018874 <NVIC_EncodePriority+0x30>
 801886e:	69fb      	ldr	r3, [r7, #28]
 8018870:	3b03      	subs	r3, #3
 8018872:	e000      	b.n	8018876 <NVIC_EncodePriority+0x32>
 8018874:	2300      	movs	r3, #0
 8018876:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018878:	f04f 32ff 	mov.w	r2, #4294967295
 801887c:	69bb      	ldr	r3, [r7, #24]
 801887e:	fa02 f303 	lsl.w	r3, r2, r3
 8018882:	43da      	mvns	r2, r3
 8018884:	68bb      	ldr	r3, [r7, #8]
 8018886:	401a      	ands	r2, r3
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801888c:	f04f 31ff 	mov.w	r1, #4294967295
 8018890:	697b      	ldr	r3, [r7, #20]
 8018892:	fa01 f303 	lsl.w	r3, r1, r3
 8018896:	43d9      	mvns	r1, r3
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801889c:	4313      	orrs	r3, r2
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3724      	adds	r7, #36	; 0x24
 80188a2:	46bd      	mov	sp, r7
 80188a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a8:	4770      	bx	lr
	...

080188ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b082      	sub	sp, #8
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	3b01      	subs	r3, #1
 80188b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80188bc:	d301      	bcc.n	80188c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80188be:	2301      	movs	r3, #1
 80188c0:	e00f      	b.n	80188e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80188c2:	4a0a      	ldr	r2, [pc, #40]	; (80188ec <SysTick_Config+0x40>)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	3b01      	subs	r3, #1
 80188c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80188ca:	210f      	movs	r1, #15
 80188cc:	f04f 30ff 	mov.w	r0, #4294967295
 80188d0:	f7ff ff8e 	bl	80187f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80188d4:	4b05      	ldr	r3, [pc, #20]	; (80188ec <SysTick_Config+0x40>)
 80188d6:	2200      	movs	r2, #0
 80188d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80188da:	4b04      	ldr	r3, [pc, #16]	; (80188ec <SysTick_Config+0x40>)
 80188dc:	2207      	movs	r2, #7
 80188de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80188e0:	2300      	movs	r3, #0
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3708      	adds	r7, #8
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bd80      	pop	{r7, pc}
 80188ea:	bf00      	nop
 80188ec:	e000e010 	.word	0xe000e010

080188f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80188f8:	6878      	ldr	r0, [r7, #4]
 80188fa:	f7ff ff29 	bl	8018750 <__NVIC_SetPriorityGrouping>
}
 80188fe:	bf00      	nop
 8018900:	3708      	adds	r7, #8
 8018902:	46bd      	mov	sp, r7
 8018904:	bd80      	pop	{r7, pc}

08018906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018906:	b580      	push	{r7, lr}
 8018908:	b086      	sub	sp, #24
 801890a:	af00      	add	r7, sp, #0
 801890c:	4603      	mov	r3, r0
 801890e:	60b9      	str	r1, [r7, #8]
 8018910:	607a      	str	r2, [r7, #4]
 8018912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8018914:	2300      	movs	r3, #0
 8018916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018918:	f7ff ff3e 	bl	8018798 <__NVIC_GetPriorityGrouping>
 801891c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801891e:	687a      	ldr	r2, [r7, #4]
 8018920:	68b9      	ldr	r1, [r7, #8]
 8018922:	6978      	ldr	r0, [r7, #20]
 8018924:	f7ff ff8e 	bl	8018844 <NVIC_EncodePriority>
 8018928:	4602      	mov	r2, r0
 801892a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801892e:	4611      	mov	r1, r2
 8018930:	4618      	mov	r0, r3
 8018932:	f7ff ff5d 	bl	80187f0 <__NVIC_SetPriority>
}
 8018936:	bf00      	nop
 8018938:	3718      	adds	r7, #24
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}

0801893e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801893e:	b580      	push	{r7, lr}
 8018940:	b082      	sub	sp, #8
 8018942:	af00      	add	r7, sp, #0
 8018944:	4603      	mov	r3, r0
 8018946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801894c:	4618      	mov	r0, r3
 801894e:	f7ff ff31 	bl	80187b4 <__NVIC_EnableIRQ>
}
 8018952:	bf00      	nop
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}

0801895a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801895a:	b580      	push	{r7, lr}
 801895c:	b082      	sub	sp, #8
 801895e:	af00      	add	r7, sp, #0
 8018960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	f7ff ffa2 	bl	80188ac <SysTick_Config>
 8018968:	4603      	mov	r3, r0
}
 801896a:	4618      	mov	r0, r3
 801896c:	3708      	adds	r7, #8
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
	...

08018974 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8018974:	b480      	push	{r7}
 8018976:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8018978:	f3bf 8f5f 	dmb	sy
}
 801897c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801897e:	4b07      	ldr	r3, [pc, #28]	; (801899c <HAL_MPU_Disable+0x28>)
 8018980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018982:	4a06      	ldr	r2, [pc, #24]	; (801899c <HAL_MPU_Disable+0x28>)
 8018984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018988:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801898a:	4b05      	ldr	r3, [pc, #20]	; (80189a0 <HAL_MPU_Disable+0x2c>)
 801898c:	2200      	movs	r2, #0
 801898e:	605a      	str	r2, [r3, #4]
}
 8018990:	bf00      	nop
 8018992:	46bd      	mov	sp, r7
 8018994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018998:	4770      	bx	lr
 801899a:	bf00      	nop
 801899c:	e000ed00 	.word	0xe000ed00
 80189a0:	e000ed90 	.word	0xe000ed90

080189a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80189a4:	b480      	push	{r7}
 80189a6:	b083      	sub	sp, #12
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80189ac:	4a0b      	ldr	r2, [pc, #44]	; (80189dc <HAL_MPU_Enable+0x38>)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	f043 0301 	orr.w	r3, r3, #1
 80189b4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80189b6:	4b0a      	ldr	r3, [pc, #40]	; (80189e0 <HAL_MPU_Enable+0x3c>)
 80189b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ba:	4a09      	ldr	r2, [pc, #36]	; (80189e0 <HAL_MPU_Enable+0x3c>)
 80189bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80189c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80189c2:	f3bf 8f4f 	dsb	sy
}
 80189c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80189c8:	f3bf 8f6f 	isb	sy
}
 80189cc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80189ce:	bf00      	nop
 80189d0:	370c      	adds	r7, #12
 80189d2:	46bd      	mov	sp, r7
 80189d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d8:	4770      	bx	lr
 80189da:	bf00      	nop
 80189dc:	e000ed90 	.word	0xe000ed90
 80189e0:	e000ed00 	.word	0xe000ed00

080189e4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80189e4:	b480      	push	{r7}
 80189e6:	b083      	sub	sp, #12
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	785a      	ldrb	r2, [r3, #1]
 80189f0:	4b1d      	ldr	r3, [pc, #116]	; (8018a68 <HAL_MPU_ConfigRegion+0x84>)
 80189f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	781b      	ldrb	r3, [r3, #0]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d029      	beq.n	8018a50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80189fc:	4a1a      	ldr	r2, [pc, #104]	; (8018a68 <HAL_MPU_ConfigRegion+0x84>)
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	7b1b      	ldrb	r3, [r3, #12]
 8018a08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	7adb      	ldrb	r3, [r3, #11]
 8018a0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8018a10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	7a9b      	ldrb	r3, [r3, #10]
 8018a16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8018a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	7b5b      	ldrb	r3, [r3, #13]
 8018a1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8018a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	7b9b      	ldrb	r3, [r3, #14]
 8018a26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8018a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	7bdb      	ldrb	r3, [r3, #15]
 8018a2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8018a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	7a5b      	ldrb	r3, [r3, #9]
 8018a36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8018a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	7a1b      	ldrb	r3, [r3, #8]
 8018a3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8018a40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8018a42:	687a      	ldr	r2, [r7, #4]
 8018a44:	7812      	ldrb	r2, [r2, #0]
 8018a46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8018a48:	4a07      	ldr	r2, [pc, #28]	; (8018a68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8018a4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8018a4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8018a4e:	e005      	b.n	8018a5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8018a50:	4b05      	ldr	r3, [pc, #20]	; (8018a68 <HAL_MPU_ConfigRegion+0x84>)
 8018a52:	2200      	movs	r2, #0
 8018a54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8018a56:	4b04      	ldr	r3, [pc, #16]	; (8018a68 <HAL_MPU_ConfigRegion+0x84>)
 8018a58:	2200      	movs	r2, #0
 8018a5a:	611a      	str	r2, [r3, #16]
}
 8018a5c:	bf00      	nop
 8018a5e:	370c      	adds	r7, #12
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr
 8018a68:	e000ed90 	.word	0xe000ed90

08018a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b084      	sub	sp, #16
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018a78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8018a7a:	f7fe ff63 	bl	8017944 <HAL_GetTick>
 8018a7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018a86:	b2db      	uxtb	r3, r3
 8018a88:	2b02      	cmp	r3, #2
 8018a8a:	d008      	beq.n	8018a9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	2280      	movs	r2, #128	; 0x80
 8018a90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	2200      	movs	r2, #0
 8018a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	e052      	b.n	8018b44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	681a      	ldr	r2, [r3, #0]
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	f022 0216 	bic.w	r2, r2, #22
 8018aac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	695a      	ldr	r2, [r3, #20]
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018abc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d103      	bne.n	8018ace <HAL_DMA_Abort+0x62>
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d007      	beq.n	8018ade <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	681a      	ldr	r2, [r3, #0]
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	f022 0208 	bic.w	r2, r2, #8
 8018adc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	681a      	ldr	r2, [r3, #0]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	f022 0201 	bic.w	r2, r2, #1
 8018aec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018aee:	e013      	b.n	8018b18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018af0:	f7fe ff28 	bl	8017944 <HAL_GetTick>
 8018af4:	4602      	mov	r2, r0
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	1ad3      	subs	r3, r2, r3
 8018afa:	2b05      	cmp	r3, #5
 8018afc:	d90c      	bls.n	8018b18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	2220      	movs	r2, #32
 8018b02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2203      	movs	r2, #3
 8018b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8018b14:	2303      	movs	r3, #3
 8018b16:	e015      	b.n	8018b44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f003 0301 	and.w	r3, r3, #1
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d1e4      	bne.n	8018af0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b2a:	223f      	movs	r2, #63	; 0x3f
 8018b2c:	409a      	lsls	r2, r3
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	2201      	movs	r2, #1
 8018b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8018b42:	2300      	movs	r3, #0
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	3710      	adds	r7, #16
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}

08018b4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018b4c:	b480      	push	{r7}
 8018b4e:	b083      	sub	sp, #12
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	2b02      	cmp	r3, #2
 8018b5e:	d004      	beq.n	8018b6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2280      	movs	r2, #128	; 0x80
 8018b64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018b66:	2301      	movs	r3, #1
 8018b68:	e00c      	b.n	8018b84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2205      	movs	r2, #5
 8018b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	681a      	ldr	r2, [r3, #0]
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	f022 0201 	bic.w	r2, r2, #1
 8018b80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018b82:	2300      	movs	r3, #0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	370c      	adds	r7, #12
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8e:	4770      	bx	lr

08018b90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b084      	sub	sp, #16
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d101      	bne.n	8018ba2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8018b9e:	2301      	movs	r3, #1
 8018ba0:	e06a      	b.n	8018c78 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d106      	bne.n	8018bba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2223      	movs	r2, #35	; 0x23
 8018bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8018bb4:	6878      	ldr	r0, [r7, #4]
 8018bb6:	f006 fbaf 	bl	801f318 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018bba:	4b31      	ldr	r3, [pc, #196]	; (8018c80 <HAL_ETH_Init+0xf0>)
 8018bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bbe:	4a30      	ldr	r2, [pc, #192]	; (8018c80 <HAL_ETH_Init+0xf0>)
 8018bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8018bc6:	4b2e      	ldr	r3, [pc, #184]	; (8018c80 <HAL_ETH_Init+0xf0>)
 8018bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018bce:	60bb      	str	r3, [r7, #8]
 8018bd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8018bd2:	4b2c      	ldr	r3, [pc, #176]	; (8018c84 <HAL_ETH_Init+0xf4>)
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	4a2b      	ldr	r2, [pc, #172]	; (8018c84 <HAL_ETH_Init+0xf4>)
 8018bd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8018bdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8018bde:	4b29      	ldr	r3, [pc, #164]	; (8018c84 <HAL_ETH_Init+0xf4>)
 8018be0:	685a      	ldr	r2, [r3, #4]
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	689b      	ldr	r3, [r3, #8]
 8018be6:	4927      	ldr	r1, [pc, #156]	; (8018c84 <HAL_ETH_Init+0xf4>)
 8018be8:	4313      	orrs	r3, r2
 8018bea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8018bec:	4b25      	ldr	r3, [pc, #148]	; (8018c84 <HAL_ETH_Init+0xf4>)
 8018bee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	687a      	ldr	r2, [r7, #4]
 8018bfc:	6812      	ldr	r2, [r2, #0]
 8018bfe:	f043 0301 	orr.w	r3, r3, #1
 8018c02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018c08:	f7fe fe9c 	bl	8017944 <HAL_GetTick>
 8018c0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8018c0e:	e011      	b.n	8018c34 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8018c10:	f7fe fe98 	bl	8017944 <HAL_GetTick>
 8018c14:	4602      	mov	r2, r0
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	1ad3      	subs	r3, r2, r3
 8018c1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8018c1e:	d909      	bls.n	8018c34 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2204      	movs	r2, #4
 8018c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	22e0      	movs	r2, #224	; 0xe0
 8018c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8018c30:	2301      	movs	r3, #1
 8018c32:	e021      	b.n	8018c78 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f003 0301 	and.w	r3, r3, #1
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d1e4      	bne.n	8018c10 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f000 fee4 	bl	8019a14 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	f000 ff8b 	bl	8019b68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f000 ffe1 	bl	8019c1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	685b      	ldr	r3, [r3, #4]
 8018c5c:	461a      	mov	r2, r3
 8018c5e:	2100      	movs	r1, #0
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	f000 ff49 	bl	8019af8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	2200      	movs	r2, #0
 8018c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	2210      	movs	r2, #16
 8018c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018c76:	2300      	movs	r3, #0
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3710      	adds	r7, #16
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	40023800 	.word	0x40023800
 8018c84:	40013800 	.word	0x40013800

08018c88 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b084      	sub	sp, #16
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c96:	2b10      	cmp	r3, #16
 8018c98:	d150      	bne.n	8018d3c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	2223      	movs	r2, #35	; 0x23
 8018c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	2204      	movs	r2, #4
 8018ca6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f000 f9fd 	bl	80190a8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	681a      	ldr	r2, [r3, #0]
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	f042 0208 	orr.w	r2, r2, #8
 8018cbc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8018cc6:	2001      	movs	r0, #1
 8018cc8:	f7fe fe48 	bl	801795c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	68fa      	ldr	r2, [r7, #12]
 8018cd2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	681a      	ldr	r2, [r3, #0]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	f042 0204 	orr.w	r2, r2, #4
 8018ce2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8018cec:	2001      	movs	r0, #1
 8018cee:	f7fe fe35 	bl	801795c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	68fa      	ldr	r2, [r7, #12]
 8018cf8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	f000 fd2a 	bl	8019754 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018d08:	699b      	ldr	r3, [r3, #24]
 8018d0a:	687a      	ldr	r2, [r7, #4]
 8018d0c:	6812      	ldr	r2, [r2, #0]
 8018d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018d16:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018d20:	699b      	ldr	r3, [r3, #24]
 8018d22:	687a      	ldr	r2, [r7, #4]
 8018d24:	6812      	ldr	r2, [r2, #0]
 8018d26:	f043 0302 	orr.w	r3, r3, #2
 8018d2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018d2e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2223      	movs	r2, #35	; 0x23
 8018d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	e000      	b.n	8018d3e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8018d3c:	2301      	movs	r3, #1
  }
}
 8018d3e:	4618      	mov	r0, r3
 8018d40:	3710      	adds	r7, #16
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}

08018d46 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8018d46:	b580      	push	{r7, lr}
 8018d48:	b084      	sub	sp, #16
 8018d4a:	af00      	add	r7, sp, #0
 8018d4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018d54:	2b23      	cmp	r3, #35	; 0x23
 8018d56:	d14a      	bne.n	8018dee <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2223      	movs	r2, #35	; 0x23
 8018d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018d68:	699b      	ldr	r3, [r3, #24]
 8018d6a:	687a      	ldr	r2, [r7, #4]
 8018d6c:	6812      	ldr	r2, [r2, #0]
 8018d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018d76:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018d80:	699b      	ldr	r3, [r3, #24]
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	6812      	ldr	r2, [r2, #0]
 8018d86:	f023 0302 	bic.w	r3, r3, #2
 8018d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018d8e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	681a      	ldr	r2, [r3, #0]
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	f022 0204 	bic.w	r2, r2, #4
 8018d9e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8018da8:	2001      	movs	r0, #1
 8018daa:	f7fe fdd7 	bl	801795c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	68fa      	ldr	r2, [r7, #12]
 8018db4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8018db6:	6878      	ldr	r0, [r7, #4]
 8018db8:	f000 fccc 	bl	8019754 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	681a      	ldr	r2, [r3, #0]
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	f022 0208 	bic.w	r2, r2, #8
 8018dca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8018dd4:	2001      	movs	r0, #1
 8018dd6:	f7fe fdc1 	bl	801795c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	68fa      	ldr	r2, [r7, #12]
 8018de0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	2210      	movs	r2, #16
 8018de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8018dea:	2300      	movs	r3, #0
 8018dec:	e000      	b.n	8018df0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8018dee:	2301      	movs	r3, #1
  }
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	3710      	adds	r7, #16
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}

08018df8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b086      	sub	sp, #24
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	60b9      	str	r1, [r7, #8]
 8018e02:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8018e04:	68bb      	ldr	r3, [r7, #8]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d109      	bne.n	8018e1e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018e10:	f043 0201 	orr.w	r2, r3, #1
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	e07c      	b.n	8018f18 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018e24:	2b23      	cmp	r3, #35	; 0x23
 8018e26:	d176      	bne.n	8018f16 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8018e28:	2200      	movs	r2, #0
 8018e2a:	68b9      	ldr	r1, [r7, #8]
 8018e2c:	68f8      	ldr	r0, [r7, #12]
 8018e2e:	f000 ff61 	bl	8019cf4 <ETH_Prepare_Tx_Descriptors>
 8018e32:	4603      	mov	r3, r0
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d009      	beq.n	8018e4c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018e3e:	f043 0202 	orr.w	r2, r3, #2
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8018e48:	2301      	movs	r3, #1
 8018e4a:	e065      	b.n	8018f18 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8018e4c:	f3bf 8f4f 	dsb	sy
}
 8018e50:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	3206      	adds	r2, #6
 8018e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e5e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e64:	1c5a      	adds	r2, r3, #1
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	629a      	str	r2, [r3, #40]	; 0x28
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e6e:	2b03      	cmp	r3, #3
 8018e70:	d904      	bls.n	8018e7c <HAL_ETH_Transmit+0x84>
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e76:	1f1a      	subs	r2, r3, #4
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	681a      	ldr	r2, [r3, #0]
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	3106      	adds	r1, #6
 8018e88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018e8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018e90:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8018e92:	f7fe fd57 	bl	8017944 <HAL_GetTick>
 8018e96:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8018e98:	e037      	b.n	8018f0a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018ea2:	695b      	ldr	r3, [r3, #20]
 8018ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d011      	beq.n	8018ed0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018eb2:	f043 0208 	orr.w	r2, r3, #8
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018ec4:	695a      	ldr	r2, [r3, #20]
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8018ecc:	2301      	movs	r3, #1
 8018ece:	e023      	b.n	8018f18 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ed6:	d018      	beq.n	8018f0a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018ed8:	f7fe fd34 	bl	8017944 <HAL_GetTick>
 8018edc:	4602      	mov	r2, r0
 8018ede:	693b      	ldr	r3, [r7, #16]
 8018ee0:	1ad3      	subs	r3, r2, r3
 8018ee2:	687a      	ldr	r2, [r7, #4]
 8018ee4:	429a      	cmp	r2, r3
 8018ee6:	d302      	bcc.n	8018eee <HAL_ETH_Transmit+0xf6>
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d10d      	bne.n	8018f0a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ef4:	f043 0204 	orr.w	r2, r3, #4
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8018f04:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8018f06:	2301      	movs	r3, #1
 8018f08:	e006      	b.n	8018f18 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	dbc3      	blt.n	8018e9a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8018f12:	2300      	movs	r3, #0
 8018f14:	e000      	b.n	8018f18 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8018f16:	2301      	movs	r3, #1
  }
}
 8018f18:	4618      	mov	r0, r3
 8018f1a:	3718      	adds	r7, #24
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	bd80      	pop	{r7, pc}

08018f20 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b088      	sub	sp, #32
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8018f2e:	2300      	movs	r3, #0
 8018f30:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d109      	bne.n	8018f4c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018f3e:	f043 0201 	orr.w	r2, r3, #1
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8018f48:	2301      	movs	r3, #1
 8018f4a:	e0a8      	b.n	801909e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018f52:	2b23      	cmp	r3, #35	; 0x23
 8018f54:	d001      	beq.n	8018f5a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8018f56:	2301      	movs	r3, #1
 8018f58:	e0a1      	b.n	801909e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f5e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	69fa      	ldr	r2, [r7, #28]
 8018f64:	3212      	adds	r2, #18
 8018f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f6a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f70:	f1c3 0304 	rsb	r3, r3, #4
 8018f74:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8018f76:	e06a      	b.n	801904e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8018f78:	69bb      	ldr	r3, [r7, #24]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d007      	beq.n	8018f94 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8018f84:	69bb      	ldr	r3, [r7, #24]
 8018f86:	699a      	ldr	r2, [r3, #24]
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8018f8c:	69bb      	ldr	r3, [r7, #24]
 8018f8e:	69da      	ldr	r2, [r3, #28]
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8018f94:	69bb      	ldr	r3, [r7, #24]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d103      	bne.n	8018fa8 <HAL_ETH_ReadData+0x88>
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d040      	beq.n	801902a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8018fa8:	69bb      	ldr	r3, [r7, #24]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d005      	beq.n	8018fc0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	2200      	movs	r2, #0
 8018fbe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	695b      	ldr	r3, [r3, #20]
 8018fc4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8018fc6:	69bb      	ldr	r3, [r7, #24]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d00c      	beq.n	8018fec <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8018fd2:	69bb      	ldr	r3, [r7, #24]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	0c1b      	lsrs	r3, r3, #16
 8018fd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018fdc:	3b04      	subs	r3, #4
 8018fde:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8018fe0:	69bb      	ldr	r3, [r7, #24]
 8018fe2:	681a      	ldr	r2, [r3, #0]
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8018fe8:	2301      	movs	r3, #1
 8018fea:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8018fec:	69bb      	ldr	r3, [r7, #24]
 8018fee:	689a      	ldr	r2, [r3, #8]
 8018ff0:	69bb      	ldr	r3, [r7, #24]
 8018ff2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8019000:	69bb      	ldr	r3, [r7, #24]
 8019002:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8019004:	461a      	mov	r2, r3
 8019006:	693b      	ldr	r3, [r7, #16]
 8019008:	b29b      	uxth	r3, r3
 801900a:	f006 fb4f 	bl	801f6ac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019012:	1c5a      	adds	r2, r3, #1
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801901c:	693b      	ldr	r3, [r7, #16]
 801901e:	441a      	add	r2, r3
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8019024:	69bb      	ldr	r3, [r7, #24]
 8019026:	2200      	movs	r2, #0
 8019028:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801902a:	69fb      	ldr	r3, [r7, #28]
 801902c:	3301      	adds	r3, #1
 801902e:	61fb      	str	r3, [r7, #28]
 8019030:	69fb      	ldr	r3, [r7, #28]
 8019032:	2b03      	cmp	r3, #3
 8019034:	d902      	bls.n	801903c <HAL_ETH_ReadData+0x11c>
 8019036:	69fb      	ldr	r3, [r7, #28]
 8019038:	3b04      	subs	r3, #4
 801903a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	69fa      	ldr	r2, [r7, #28]
 8019040:	3212      	adds	r2, #18
 8019042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019046:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	3301      	adds	r3, #1
 801904c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801904e:	69bb      	ldr	r3, [r7, #24]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	db06      	blt.n	8019064 <HAL_ETH_ReadData+0x144>
 8019056:	697a      	ldr	r2, [r7, #20]
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	429a      	cmp	r2, r3
 801905c:	d202      	bcs.n	8019064 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 801905e:	7bfb      	ldrb	r3, [r7, #15]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d089      	beq.n	8018f78 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	441a      	add	r2, r3
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019074:	2b00      	cmp	r3, #0
 8019076:	d002      	beq.n	801907e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8019078:	6878      	ldr	r0, [r7, #4]
 801907a:	f000 f815 	bl	80190a8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	69fa      	ldr	r2, [r7, #28]
 8019082:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8019084:	7bfb      	ldrb	r3, [r7, #15]
 8019086:	2b01      	cmp	r3, #1
 8019088:	d108      	bne.n	801909c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2200      	movs	r2, #0
 8019096:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8019098:	2300      	movs	r3, #0
 801909a:	e000      	b.n	801909e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 801909c:	2301      	movs	r3, #1
}
 801909e:	4618      	mov	r0, r3
 80190a0:	3720      	adds	r7, #32
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bd80      	pop	{r7, pc}
	...

080190a8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b088      	sub	sp, #32
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80190b0:	2300      	movs	r3, #0
 80190b2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80190b4:	2301      	movs	r3, #1
 80190b6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80190bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	69fa      	ldr	r2, [r7, #28]
 80190c2:	3212      	adds	r2, #18
 80190c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190c8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190ce:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80190d0:	e040      	b.n	8019154 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	6a1b      	ldr	r3, [r3, #32]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d112      	bne.n	8019100 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80190da:	f107 030c 	add.w	r3, r7, #12
 80190de:	4618      	mov	r0, r3
 80190e0:	f006 fab4 	bl	801f64c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d102      	bne.n	80190f0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80190ea:	2300      	movs	r3, #0
 80190ec:	74fb      	strb	r3, [r7, #19]
 80190ee:	e007      	b.n	8019100 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	461a      	mov	r2, r3
 80190f4:	697b      	ldr	r3, [r7, #20]
 80190f6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	461a      	mov	r2, r3
 80190fc:	697b      	ldr	r3, [r7, #20]
 80190fe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8019100:	7cfb      	ldrb	r3, [r7, #19]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d026      	beq.n	8019154 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801910a:	2b00      	cmp	r3, #0
 801910c:	d103      	bne.n	8019116 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	4a1e      	ldr	r2, [pc, #120]	; (801918c <ETH_UpdateDescriptor+0xe4>)
 8019112:	605a      	str	r2, [r3, #4]
 8019114:	e003      	b.n	801911e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8019116:	697b      	ldr	r3, [r7, #20]
 8019118:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801911c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 801911e:	f3bf 8f5f 	dmb	sy
}
 8019122:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8019124:	697b      	ldr	r3, [r7, #20]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801912c:	697b      	ldr	r3, [r7, #20]
 801912e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8019130:	69fb      	ldr	r3, [r7, #28]
 8019132:	3301      	adds	r3, #1
 8019134:	61fb      	str	r3, [r7, #28]
 8019136:	69fb      	ldr	r3, [r7, #28]
 8019138:	2b03      	cmp	r3, #3
 801913a:	d902      	bls.n	8019142 <ETH_UpdateDescriptor+0x9a>
 801913c:	69fb      	ldr	r3, [r7, #28]
 801913e:	3b04      	subs	r3, #4
 8019140:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	69fa      	ldr	r2, [r7, #28]
 8019146:	3212      	adds	r2, #18
 8019148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801914c:	617b      	str	r3, [r7, #20]
      desccount--;
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	3b01      	subs	r3, #1
 8019152:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8019154:	69bb      	ldr	r3, [r7, #24]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d002      	beq.n	8019160 <ETH_UpdateDescriptor+0xb8>
 801915a:	7cfb      	ldrb	r3, [r7, #19]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d1b8      	bne.n	80190d2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019164:	69ba      	ldr	r2, [r7, #24]
 8019166:	429a      	cmp	r2, r3
 8019168:	d00c      	beq.n	8019184 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019172:	461a      	mov	r2, r3
 8019174:	2300      	movs	r3, #0
 8019176:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	69fa      	ldr	r2, [r7, #28]
 801917c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	69ba      	ldr	r2, [r7, #24]
 8019182:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8019184:	bf00      	nop
 8019186:	3720      	adds	r7, #32
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}
 801918c:	800045f8 	.word	0x800045f8

08019190 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b082      	sub	sp, #8
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191a0:	695b      	ldr	r3, [r3, #20]
 80191a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80191a6:	2b40      	cmp	r3, #64	; 0x40
 80191a8:	d112      	bne.n	80191d0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191b2:	69db      	ldr	r3, [r3, #28]
 80191b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80191b8:	2b40      	cmp	r3, #64	; 0x40
 80191ba:	d109      	bne.n	80191d0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191c4:	461a      	mov	r2, r3
 80191c6:	4b50      	ldr	r3, [pc, #320]	; (8019308 <HAL_ETH_IRQHandler+0x178>)
 80191c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	f000 f8ac 	bl	8019328 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191d8:	695b      	ldr	r3, [r3, #20]
 80191da:	f003 0301 	and.w	r3, r3, #1
 80191de:	2b01      	cmp	r3, #1
 80191e0:	d113      	bne.n	801920a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191ea:	69db      	ldr	r3, [r3, #28]
 80191ec:	f003 0301 	and.w	r3, r3, #1
 80191f0:	2b01      	cmp	r3, #1
 80191f2:	d10a      	bne.n	801920a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191fc:	461a      	mov	r2, r3
 80191fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8019202:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8019204:	6878      	ldr	r0, [r7, #4]
 8019206:	f000 f885 	bl	8019314 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019212:	695b      	ldr	r3, [r3, #20]
 8019214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801921c:	d14c      	bne.n	80192b8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019226:	69db      	ldr	r3, [r3, #28]
 8019228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801922c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019230:	d142      	bne.n	80192b8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019238:	f043 0208 	orr.w	r2, r3, #8
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801924a:	695b      	ldr	r3, [r3, #20]
 801924c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019254:	d11a      	bne.n	801928c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801925e:	695a      	ldr	r2, [r3, #20]
 8019260:	4b2a      	ldr	r3, [pc, #168]	; (801930c <HAL_ETH_IRQHandler+0x17c>)
 8019262:	4013      	ands	r3, r2
 8019264:	687a      	ldr	r2, [r7, #4]
 8019266:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019272:	69db      	ldr	r3, [r3, #28]
 8019274:	687a      	ldr	r2, [r7, #4]
 8019276:	6812      	ldr	r2, [r2, #0]
 8019278:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 801927c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019280:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	22e0      	movs	r2, #224	; 0xe0
 8019286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801928a:	e012      	b.n	80192b2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019294:	695a      	ldr	r2, [r3, #20]
 8019296:	f248 6380 	movw	r3, #34432	; 0x8680
 801929a:	4013      	ands	r3, r2
 801929c:	687a      	ldr	r2, [r7, #4]
 801929e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80192aa:	461a      	mov	r2, r3
 80192ac:	f248 6380 	movw	r3, #34432	; 0x8680
 80192b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	f000 f842 	bl	801933c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192be:	f003 0308 	and.w	r3, r3, #8
 80192c2:	2b08      	cmp	r3, #8
 80192c4:	d10e      	bne.n	80192e4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192cc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80192d6:	6878      	ldr	r0, [r7, #4]
 80192d8:	f000 f83a 	bl	8019350 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	2200      	movs	r2, #0
 80192e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80192e4:	4b0a      	ldr	r3, [pc, #40]	; (8019310 <HAL_ETH_IRQHandler+0x180>)
 80192e6:	695b      	ldr	r3, [r3, #20]
 80192e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d006      	beq.n	80192fe <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80192f0:	4b07      	ldr	r3, [pc, #28]	; (8019310 <HAL_ETH_IRQHandler+0x180>)
 80192f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80192f6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80192f8:	6878      	ldr	r0, [r7, #4]
 80192fa:	f000 f833 	bl	8019364 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80192fe:	bf00      	nop
 8019300:	3708      	adds	r7, #8
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}
 8019306:	bf00      	nop
 8019308:	00010040 	.word	0x00010040
 801930c:	007e2000 	.word	0x007e2000
 8019310:	40013c00 	.word	0x40013c00

08019314 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8019314:	b480      	push	{r7}
 8019316:	b083      	sub	sp, #12
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 801931c:	bf00      	nop
 801931e:	370c      	adds	r7, #12
 8019320:	46bd      	mov	sp, r7
 8019322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019326:	4770      	bx	lr

08019328 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8019330:	bf00      	nop
 8019332:	370c      	adds	r7, #12
 8019334:	46bd      	mov	sp, r7
 8019336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933a:	4770      	bx	lr

0801933c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801933c:	b480      	push	{r7}
 801933e:	b083      	sub	sp, #12
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8019344:	bf00      	nop
 8019346:	370c      	adds	r7, #12
 8019348:	46bd      	mov	sp, r7
 801934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934e:	4770      	bx	lr

08019350 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8019350:	b480      	push	{r7}
 8019352:	b083      	sub	sp, #12
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8019358:	bf00      	nop
 801935a:	370c      	adds	r7, #12
 801935c:	46bd      	mov	sp, r7
 801935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019362:	4770      	bx	lr

08019364 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8019364:	b480      	push	{r7}
 8019366:	b083      	sub	sp, #12
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801936c:	bf00      	nop
 801936e:	370c      	adds	r7, #12
 8019370:	46bd      	mov	sp, r7
 8019372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019376:	4770      	bx	lr

08019378 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b086      	sub	sp, #24
 801937c:	af00      	add	r7, sp, #0
 801937e:	60f8      	str	r0, [r7, #12]
 8019380:	60b9      	str	r1, [r7, #8]
 8019382:	607a      	str	r2, [r7, #4]
 8019384:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	691b      	ldr	r3, [r3, #16]
 801938c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	f003 031c 	and.w	r3, r3, #28
 8019394:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8019396:	68bb      	ldr	r3, [r7, #8]
 8019398:	02db      	lsls	r3, r3, #11
 801939a:	b29b      	uxth	r3, r3
 801939c:	697a      	ldr	r2, [r7, #20]
 801939e:	4313      	orrs	r3, r2
 80193a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	019b      	lsls	r3, r3, #6
 80193a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80193aa:	697a      	ldr	r2, [r7, #20]
 80193ac:	4313      	orrs	r3, r2
 80193ae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	f023 0302 	bic.w	r3, r3, #2
 80193b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80193b8:	697b      	ldr	r3, [r7, #20]
 80193ba:	f043 0301 	orr.w	r3, r3, #1
 80193be:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	697a      	ldr	r2, [r7, #20]
 80193c6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80193c8:	f7fe fabc 	bl	8017944 <HAL_GetTick>
 80193cc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80193ce:	e00d      	b.n	80193ec <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80193d0:	f7fe fab8 	bl	8017944 <HAL_GetTick>
 80193d4:	4602      	mov	r2, r0
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	1ad3      	subs	r3, r2, r3
 80193da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80193de:	d301      	bcc.n	80193e4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80193e0:	2301      	movs	r3, #1
 80193e2:	e010      	b.n	8019406 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	691b      	ldr	r3, [r3, #16]
 80193ea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80193ec:	697b      	ldr	r3, [r7, #20]
 80193ee:	f003 0301 	and.w	r3, r3, #1
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d1ec      	bne.n	80193d0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	695b      	ldr	r3, [r3, #20]
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	461a      	mov	r2, r3
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019404:	2300      	movs	r3, #0
}
 8019406:	4618      	mov	r0, r3
 8019408:	3718      	adds	r7, #24
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}

0801940e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801940e:	b580      	push	{r7, lr}
 8019410:	b086      	sub	sp, #24
 8019412:	af00      	add	r7, sp, #0
 8019414:	60f8      	str	r0, [r7, #12]
 8019416:	60b9      	str	r1, [r7, #8]
 8019418:	607a      	str	r2, [r7, #4]
 801941a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	691b      	ldr	r3, [r3, #16]
 8019422:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8019424:	697b      	ldr	r3, [r7, #20]
 8019426:	f003 031c 	and.w	r3, r3, #28
 801942a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801942c:	68bb      	ldr	r3, [r7, #8]
 801942e:	02db      	lsls	r3, r3, #11
 8019430:	b29b      	uxth	r3, r3
 8019432:	697a      	ldr	r2, [r7, #20]
 8019434:	4313      	orrs	r3, r2
 8019436:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	019b      	lsls	r3, r3, #6
 801943c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8019440:	697a      	ldr	r2, [r7, #20]
 8019442:	4313      	orrs	r3, r2
 8019444:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8019446:	697b      	ldr	r3, [r7, #20]
 8019448:	f043 0302 	orr.w	r3, r3, #2
 801944c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801944e:	697b      	ldr	r3, [r7, #20]
 8019450:	f043 0301 	orr.w	r3, r3, #1
 8019454:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8019456:	683b      	ldr	r3, [r7, #0]
 8019458:	b29a      	uxth	r2, r3
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	697a      	ldr	r2, [r7, #20]
 8019466:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019468:	f7fe fa6c 	bl	8017944 <HAL_GetTick>
 801946c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801946e:	e00d      	b.n	801948c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8019470:	f7fe fa68 	bl	8017944 <HAL_GetTick>
 8019474:	4602      	mov	r2, r0
 8019476:	693b      	ldr	r3, [r7, #16]
 8019478:	1ad3      	subs	r3, r2, r3
 801947a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801947e:	d301      	bcc.n	8019484 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8019480:	2301      	movs	r3, #1
 8019482:	e009      	b.n	8019498 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	691b      	ldr	r3, [r3, #16]
 801948a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	f003 0301 	and.w	r3, r3, #1
 8019492:	2b00      	cmp	r3, #0
 8019494:	d1ec      	bne.n	8019470 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8019496:	2300      	movs	r3, #0
}
 8019498:	4618      	mov	r0, r3
 801949a:	3718      	adds	r7, #24
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}

080194a0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80194a0:	b480      	push	{r7}
 80194a2:	b083      	sub	sp, #12
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
 80194a8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d101      	bne.n	80194b4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80194b0:	2301      	movs	r3, #1
 80194b2:	e0d9      	b.n	8019668 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	f003 0310 	and.w	r3, r3, #16
 80194be:	2b00      	cmp	r3, #0
 80194c0:	bf14      	ite	ne
 80194c2:	2301      	movne	r3, #1
 80194c4:	2300      	moveq	r3, #0
 80194c6:	b2db      	uxtb	r3, r3
 80194c8:	461a      	mov	r2, r3
 80194ca:	683b      	ldr	r3, [r7, #0]
 80194cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80194da:	683b      	ldr	r3, [r7, #0]
 80194dc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	bf0c      	ite	eq
 80194ec:	2301      	moveq	r3, #1
 80194ee:	2300      	movne	r3, #0
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	461a      	mov	r2, r3
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8019504:	2b00      	cmp	r3, #0
 8019506:	bf14      	ite	ne
 8019508:	2301      	movne	r3, #1
 801950a:	2300      	moveq	r3, #0
 801950c:	b2db      	uxtb	r3, r3
 801950e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801951e:	2b00      	cmp	r3, #0
 8019520:	bf0c      	ite	eq
 8019522:	2301      	moveq	r3, #1
 8019524:	2300      	movne	r3, #0
 8019526:	b2db      	uxtb	r3, r3
 8019528:	461a      	mov	r2, r3
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019538:	2b00      	cmp	r3, #0
 801953a:	bf14      	ite	ne
 801953c:	2301      	movne	r3, #1
 801953e:	2300      	moveq	r3, #0
 8019540:	b2db      	uxtb	r3, r3
 8019542:	461a      	mov	r2, r3
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8019552:	683b      	ldr	r3, [r7, #0]
 8019554:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8019560:	683b      	ldr	r3, [r7, #0]
 8019562:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801956e:	2b00      	cmp	r3, #0
 8019570:	bf0c      	ite	eq
 8019572:	2301      	moveq	r3, #1
 8019574:	2300      	movne	r3, #0
 8019576:	b2db      	uxtb	r3, r3
 8019578:	461a      	mov	r2, r3
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019588:	2b00      	cmp	r3, #0
 801958a:	bf0c      	ite	eq
 801958c:	2301      	moveq	r3, #1
 801958e:	2300      	movne	r3, #0
 8019590:	b2db      	uxtb	r3, r3
 8019592:	461a      	mov	r2, r3
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	bf14      	ite	ne
 80195a6:	2301      	movne	r3, #1
 80195a8:	2300      	moveq	r3, #0
 80195aa:	b2db      	uxtb	r3, r3
 80195ac:	461a      	mov	r2, r3
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80195bc:	683b      	ldr	r3, [r7, #0]
 80195be:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	bf14      	ite	ne
 80195ce:	2301      	movne	r3, #1
 80195d0:	2300      	moveq	r3, #0
 80195d2:	b2db      	uxtb	r3, r3
 80195d4:	461a      	mov	r2, r3
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	699b      	ldr	r3, [r3, #24]
 80195e0:	f003 0302 	and.w	r3, r3, #2
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	bf14      	ite	ne
 80195e8:	2301      	movne	r3, #1
 80195ea:	2300      	moveq	r3, #0
 80195ec:	b2db      	uxtb	r3, r3
 80195ee:	461a      	mov	r2, r3
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	699b      	ldr	r3, [r3, #24]
 80195fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019600:	2b00      	cmp	r3, #0
 8019602:	bf0c      	ite	eq
 8019604:	2301      	moveq	r3, #1
 8019606:	2300      	movne	r3, #0
 8019608:	b2db      	uxtb	r3, r3
 801960a:	461a      	mov	r2, r3
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	699b      	ldr	r3, [r3, #24]
 8019618:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	699b      	ldr	r3, [r3, #24]
 8019626:	0c1b      	lsrs	r3, r3, #16
 8019628:	b29a      	uxth	r2, r3
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	699b      	ldr	r3, [r3, #24]
 8019634:	f003 0304 	and.w	r3, r3, #4
 8019638:	2b00      	cmp	r3, #0
 801963a:	bf14      	ite	ne
 801963c:	2301      	movne	r3, #1
 801963e:	2300      	moveq	r3, #0
 8019640:	b2db      	uxtb	r3, r3
 8019642:	461a      	mov	r2, r3
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	699b      	ldr	r3, [r3, #24]
 8019650:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8019654:	2b00      	cmp	r3, #0
 8019656:	bf14      	ite	ne
 8019658:	2301      	movne	r3, #1
 801965a:	2300      	moveq	r3, #0
 801965c:	b2db      	uxtb	r3, r3
 801965e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8019660:	683b      	ldr	r3, [r7, #0]
 8019662:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8019666:	2300      	movs	r3, #0
}
 8019668:	4618      	mov	r0, r3
 801966a:	370c      	adds	r7, #12
 801966c:	46bd      	mov	sp, r7
 801966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019672:	4770      	bx	lr

08019674 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b082      	sub	sp, #8
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d101      	bne.n	8019688 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8019684:	2301      	movs	r3, #1
 8019686:	e00b      	b.n	80196a0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801968e:	2b10      	cmp	r3, #16
 8019690:	d105      	bne.n	801969e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8019692:	6839      	ldr	r1, [r7, #0]
 8019694:	6878      	ldr	r0, [r7, #4]
 8019696:	f000 f883 	bl	80197a0 <ETH_SetMACConfig>

    return HAL_OK;
 801969a:	2300      	movs	r3, #0
 801969c:	e000      	b.n	80196a0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801969e:	2301      	movs	r3, #1
  }
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	3708      	adds	r7, #8
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}

080196a8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b084      	sub	sp, #16
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	691b      	ldr	r3, [r3, #16]
 80196b6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	f023 031c 	bic.w	r3, r3, #28
 80196be:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80196c0:	f002 f916 	bl	801b8f0 <HAL_RCC_GetHCLKFreq>
 80196c4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	4a1d      	ldr	r2, [pc, #116]	; (8019740 <HAL_ETH_SetMDIOClockRange+0x98>)
 80196ca:	4293      	cmp	r3, r2
 80196cc:	d908      	bls.n	80196e0 <HAL_ETH_SetMDIOClockRange+0x38>
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	4a1c      	ldr	r2, [pc, #112]	; (8019744 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80196d2:	4293      	cmp	r3, r2
 80196d4:	d804      	bhi.n	80196e0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	f043 0308 	orr.w	r3, r3, #8
 80196dc:	60fb      	str	r3, [r7, #12]
 80196de:	e027      	b.n	8019730 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80196e0:	68bb      	ldr	r3, [r7, #8]
 80196e2:	4a18      	ldr	r2, [pc, #96]	; (8019744 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80196e4:	4293      	cmp	r3, r2
 80196e6:	d908      	bls.n	80196fa <HAL_ETH_SetMDIOClockRange+0x52>
 80196e8:	68bb      	ldr	r3, [r7, #8]
 80196ea:	4a17      	ldr	r2, [pc, #92]	; (8019748 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80196ec:	4293      	cmp	r3, r2
 80196ee:	d204      	bcs.n	80196fa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	f043 030c 	orr.w	r3, r3, #12
 80196f6:	60fb      	str	r3, [r7, #12]
 80196f8:	e01a      	b.n	8019730 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80196fa:	68bb      	ldr	r3, [r7, #8]
 80196fc:	4a12      	ldr	r2, [pc, #72]	; (8019748 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80196fe:	4293      	cmp	r3, r2
 8019700:	d303      	bcc.n	801970a <HAL_ETH_SetMDIOClockRange+0x62>
 8019702:	68bb      	ldr	r3, [r7, #8]
 8019704:	4a11      	ldr	r2, [pc, #68]	; (801974c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8019706:	4293      	cmp	r3, r2
 8019708:	d911      	bls.n	801972e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801970a:	68bb      	ldr	r3, [r7, #8]
 801970c:	4a0f      	ldr	r2, [pc, #60]	; (801974c <HAL_ETH_SetMDIOClockRange+0xa4>)
 801970e:	4293      	cmp	r3, r2
 8019710:	d908      	bls.n	8019724 <HAL_ETH_SetMDIOClockRange+0x7c>
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	4a0e      	ldr	r2, [pc, #56]	; (8019750 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8019716:	4293      	cmp	r3, r2
 8019718:	d804      	bhi.n	8019724 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	f043 0304 	orr.w	r3, r3, #4
 8019720:	60fb      	str	r3, [r7, #12]
 8019722:	e005      	b.n	8019730 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	f043 0310 	orr.w	r3, r3, #16
 801972a:	60fb      	str	r3, [r7, #12]
 801972c:	e000      	b.n	8019730 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801972e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	68fa      	ldr	r2, [r7, #12]
 8019736:	611a      	str	r2, [r3, #16]
}
 8019738:	bf00      	nop
 801973a:	3710      	adds	r7, #16
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}
 8019740:	01312cff 	.word	0x01312cff
 8019744:	02160ebf 	.word	0x02160ebf
 8019748:	03938700 	.word	0x03938700
 801974c:	05f5e0ff 	.word	0x05f5e0ff
 8019750:	08f0d17f 	.word	0x08f0d17f

08019754 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b084      	sub	sp, #16
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801975c:	2300      	movs	r3, #0
 801975e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019768:	699b      	ldr	r3, [r3, #24]
 801976a:	687a      	ldr	r2, [r7, #4]
 801976c:	6812      	ldr	r2, [r2, #0]
 801976e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019776:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019780:	699b      	ldr	r3, [r3, #24]
 8019782:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8019784:	2001      	movs	r0, #1
 8019786:	f7fe f8e9 	bl	801795c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	681a      	ldr	r2, [r3, #0]
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019794:	6193      	str	r3, [r2, #24]
}
 8019796:	bf00      	nop
 8019798:	3710      	adds	r7, #16
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}
	...

080197a0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
 80197a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80197b2:	68fa      	ldr	r2, [r7, #12]
 80197b4:	4b51      	ldr	r3, [pc, #324]	; (80198fc <ETH_SetMACConfig+0x15c>)
 80197b6:	4013      	ands	r3, r2
 80197b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	7c1b      	ldrb	r3, [r3, #16]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d102      	bne.n	80197c8 <ETH_SetMACConfig+0x28>
 80197c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80197c6:	e000      	b.n	80197ca <ETH_SetMACConfig+0x2a>
 80197c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	7c5b      	ldrb	r3, [r3, #17]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d102      	bne.n	80197d8 <ETH_SetMACConfig+0x38>
 80197d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80197d6:	e000      	b.n	80197da <ETH_SetMACConfig+0x3a>
 80197d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80197da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80197e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80197e2:	683b      	ldr	r3, [r7, #0]
 80197e4:	7fdb      	ldrb	r3, [r3, #31]
 80197e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80197e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80197ea:	683b      	ldr	r3, [r7, #0]
 80197ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80197ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80197f0:	683a      	ldr	r2, [r7, #0]
 80197f2:	7f92      	ldrb	r2, [r2, #30]
 80197f4:	2a00      	cmp	r2, #0
 80197f6:	d102      	bne.n	80197fe <ETH_SetMACConfig+0x5e>
 80197f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80197fc:	e000      	b.n	8019800 <ETH_SetMACConfig+0x60>
 80197fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8019800:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	7f1b      	ldrb	r3, [r3, #28]
 8019806:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8019808:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801980e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	791b      	ldrb	r3, [r3, #4]
 8019814:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8019816:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8019818:	683a      	ldr	r2, [r7, #0]
 801981a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801981e:	2a00      	cmp	r2, #0
 8019820:	d102      	bne.n	8019828 <ETH_SetMACConfig+0x88>
 8019822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019826:	e000      	b.n	801982a <ETH_SetMACConfig+0x8a>
 8019828:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801982a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801982c:	683b      	ldr	r3, [r7, #0]
 801982e:	7bdb      	ldrb	r3, [r3, #15]
 8019830:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8019832:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8019838:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019840:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8019842:	4313      	orrs	r3, r2
 8019844:	68fa      	ldr	r2, [r7, #12]
 8019846:	4313      	orrs	r3, r2
 8019848:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	68fa      	ldr	r2, [r7, #12]
 8019850:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801985a:	2001      	movs	r0, #1
 801985c:	f7fe f87e 	bl	801795c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	68fa      	ldr	r2, [r7, #12]
 8019866:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	699b      	ldr	r3, [r3, #24]
 801986e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8019870:	68fa      	ldr	r2, [r7, #12]
 8019872:	f64f 7341 	movw	r3, #65345	; 0xff41
 8019876:	4013      	ands	r3, r2
 8019878:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801987a:	683b      	ldr	r3, [r7, #0]
 801987c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801987e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8019880:	683a      	ldr	r2, [r7, #0]
 8019882:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8019886:	2a00      	cmp	r2, #0
 8019888:	d101      	bne.n	801988e <ETH_SetMACConfig+0xee>
 801988a:	2280      	movs	r2, #128	; 0x80
 801988c:	e000      	b.n	8019890 <ETH_SetMACConfig+0xf0>
 801988e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8019890:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8019892:	683b      	ldr	r3, [r7, #0]
 8019894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8019896:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8019898:	683a      	ldr	r2, [r7, #0]
 801989a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801989e:	2a01      	cmp	r2, #1
 80198a0:	d101      	bne.n	80198a6 <ETH_SetMACConfig+0x106>
 80198a2:	2208      	movs	r2, #8
 80198a4:	e000      	b.n	80198a8 <ETH_SetMACConfig+0x108>
 80198a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80198a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80198aa:	683a      	ldr	r2, [r7, #0]
 80198ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80198b0:	2a01      	cmp	r2, #1
 80198b2:	d101      	bne.n	80198b8 <ETH_SetMACConfig+0x118>
 80198b4:	2204      	movs	r2, #4
 80198b6:	e000      	b.n	80198ba <ETH_SetMACConfig+0x11a>
 80198b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80198ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80198bc:	683a      	ldr	r2, [r7, #0]
 80198be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80198c2:	2a01      	cmp	r2, #1
 80198c4:	d101      	bne.n	80198ca <ETH_SetMACConfig+0x12a>
 80198c6:	2202      	movs	r2, #2
 80198c8:	e000      	b.n	80198cc <ETH_SetMACConfig+0x12c>
 80198ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80198cc:	4313      	orrs	r3, r2
 80198ce:	68fa      	ldr	r2, [r7, #12]
 80198d0:	4313      	orrs	r3, r2
 80198d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	68fa      	ldr	r2, [r7, #12]
 80198da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	699b      	ldr	r3, [r3, #24]
 80198e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80198e4:	2001      	movs	r0, #1
 80198e6:	f7fe f839 	bl	801795c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	68fa      	ldr	r2, [r7, #12]
 80198f0:	619a      	str	r2, [r3, #24]
}
 80198f2:	bf00      	nop
 80198f4:	3710      	adds	r7, #16
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bd80      	pop	{r7, pc}
 80198fa:	bf00      	nop
 80198fc:	ff20810f 	.word	0xff20810f

08019900 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019912:	699b      	ldr	r3, [r3, #24]
 8019914:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8019916:	68fa      	ldr	r2, [r7, #12]
 8019918:	4b3d      	ldr	r3, [pc, #244]	; (8019a10 <ETH_SetDMAConfig+0x110>)
 801991a:	4013      	ands	r3, r2
 801991c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	7b1b      	ldrb	r3, [r3, #12]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d102      	bne.n	801992c <ETH_SetDMAConfig+0x2c>
 8019926:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801992a:	e000      	b.n	801992e <ETH_SetDMAConfig+0x2e>
 801992c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	7b5b      	ldrb	r3, [r3, #13]
 8019932:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8019934:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8019936:	683a      	ldr	r2, [r7, #0]
 8019938:	7f52      	ldrb	r2, [r2, #29]
 801993a:	2a00      	cmp	r2, #0
 801993c:	d102      	bne.n	8019944 <ETH_SetDMAConfig+0x44>
 801993e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8019942:	e000      	b.n	8019946 <ETH_SetDMAConfig+0x46>
 8019944:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8019946:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	7b9b      	ldrb	r3, [r3, #14]
 801994c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801994e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8019950:	683b      	ldr	r3, [r7, #0]
 8019952:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8019954:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8019956:	683b      	ldr	r3, [r7, #0]
 8019958:	7f1b      	ldrb	r3, [r3, #28]
 801995a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801995c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	7f9b      	ldrb	r3, [r3, #30]
 8019962:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8019964:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801996a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801996c:	683b      	ldr	r3, [r7, #0]
 801996e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019972:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8019974:	4313      	orrs	r3, r2
 8019976:	68fa      	ldr	r2, [r7, #12]
 8019978:	4313      	orrs	r3, r2
 801997a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019984:	461a      	mov	r2, r3
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019992:	699b      	ldr	r3, [r3, #24]
 8019994:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8019996:	2001      	movs	r0, #1
 8019998:	f7fd ffe0 	bl	801795c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80199a4:	461a      	mov	r2, r3
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80199aa:	683b      	ldr	r3, [r7, #0]
 80199ac:	791b      	ldrb	r3, [r3, #4]
 80199ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80199b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80199ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80199bc:	683b      	ldr	r3, [r7, #0]
 80199be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80199c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80199c2:	683b      	ldr	r3, [r7, #0]
 80199c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80199c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80199ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80199d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80199d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	6812      	ldr	r2, [r2, #0]
 80199de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80199e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80199e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80199f4:	2001      	movs	r0, #1
 80199f6:	f7fd ffb1 	bl	801795c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019a02:	461a      	mov	r2, r3
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	6013      	str	r3, [r2, #0]
}
 8019a08:	bf00      	nop
 8019a0a:	3710      	adds	r7, #16
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}
 8019a10:	f8de3f23 	.word	0xf8de3f23

08019a14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b0a6      	sub	sp, #152	; 0x98
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8019a1c:	2301      	movs	r3, #1
 8019a1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8019a22:	2301      	movs	r3, #1
 8019a24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8019a28:	2300      	movs	r3, #0
 8019a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8019a32:	2301      	movs	r3, #1
 8019a34:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8019a3e:	2301      	movs	r3, #1
 8019a40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8019a44:	2300      	movs	r3, #0
 8019a46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8019a50:	2300      	movs	r3, #0
 8019a52:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8019a54:	2300      	movs	r3, #0
 8019a56:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8019a5e:	2300      	movs	r3, #0
 8019a60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8019a64:	2300      	movs	r3, #0
 8019a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8019a70:	2300      	movs	r3, #0
 8019a72:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8019a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8019a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8019a82:	2300      	movs	r3, #0
 8019a84:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8019a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019a8c:	4619      	mov	r1, r3
 8019a8e:	6878      	ldr	r0, [r7, #4]
 8019a90:	f7ff fe86 	bl	80197a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8019a94:	2301      	movs	r3, #1
 8019a96:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8019a98:	2301      	movs	r3, #1
 8019a9a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8019aa2:	2301      	movs	r3, #1
 8019aa4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8019aaa:	2300      	movs	r3, #0
 8019aac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8019aba:	2301      	movs	r3, #1
 8019abc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8019ac0:	2301      	movs	r3, #1
 8019ac2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8019ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019ac8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8019aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019ace:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8019ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019ad4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8019ad6:	2301      	movs	r3, #1
 8019ad8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8019adc:	2300      	movs	r3, #0
 8019ade:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8019ae4:	f107 0308 	add.w	r3, r7, #8
 8019ae8:	4619      	mov	r1, r3
 8019aea:	6878      	ldr	r0, [r7, #4]
 8019aec:	f7ff ff08 	bl	8019900 <ETH_SetDMAConfig>
}
 8019af0:	bf00      	nop
 8019af2:	3798      	adds	r7, #152	; 0x98
 8019af4:	46bd      	mov	sp, r7
 8019af6:	bd80      	pop	{r7, pc}

08019af8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8019af8:	b480      	push	{r7}
 8019afa:	b087      	sub	sp, #28
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	60f8      	str	r0, [r7, #12]
 8019b00:	60b9      	str	r1, [r7, #8]
 8019b02:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	3305      	adds	r3, #5
 8019b08:	781b      	ldrb	r3, [r3, #0]
 8019b0a:	021b      	lsls	r3, r3, #8
 8019b0c:	687a      	ldr	r2, [r7, #4]
 8019b0e:	3204      	adds	r2, #4
 8019b10:	7812      	ldrb	r2, [r2, #0]
 8019b12:	4313      	orrs	r3, r2
 8019b14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8019b16:	68ba      	ldr	r2, [r7, #8]
 8019b18:	4b11      	ldr	r3, [pc, #68]	; (8019b60 <ETH_MACAddressConfig+0x68>)
 8019b1a:	4413      	add	r3, r2
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	3303      	adds	r3, #3
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	061a      	lsls	r2, r3, #24
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	3302      	adds	r3, #2
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	041b      	lsls	r3, r3, #16
 8019b32:	431a      	orrs	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	3301      	adds	r3, #1
 8019b38:	781b      	ldrb	r3, [r3, #0]
 8019b3a:	021b      	lsls	r3, r3, #8
 8019b3c:	4313      	orrs	r3, r2
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	7812      	ldrb	r2, [r2, #0]
 8019b42:	4313      	orrs	r3, r2
 8019b44:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8019b46:	68ba      	ldr	r2, [r7, #8]
 8019b48:	4b06      	ldr	r3, [pc, #24]	; (8019b64 <ETH_MACAddressConfig+0x6c>)
 8019b4a:	4413      	add	r3, r2
 8019b4c:	461a      	mov	r2, r3
 8019b4e:	697b      	ldr	r3, [r7, #20]
 8019b50:	6013      	str	r3, [r2, #0]
}
 8019b52:	bf00      	nop
 8019b54:	371c      	adds	r7, #28
 8019b56:	46bd      	mov	sp, r7
 8019b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5c:	4770      	bx	lr
 8019b5e:	bf00      	nop
 8019b60:	40028040 	.word	0x40028040
 8019b64:	40028044 	.word	0x40028044

08019b68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8019b68:	b480      	push	{r7}
 8019b6a:	b085      	sub	sp, #20
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8019b70:	2300      	movs	r3, #0
 8019b72:	60fb      	str	r3, [r7, #12]
 8019b74:	e03e      	b.n	8019bf4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	68d9      	ldr	r1, [r3, #12]
 8019b7a:	68fa      	ldr	r2, [r7, #12]
 8019b7c:	4613      	mov	r3, r2
 8019b7e:	009b      	lsls	r3, r3, #2
 8019b80:	4413      	add	r3, r2
 8019b82:	00db      	lsls	r3, r3, #3
 8019b84:	440b      	add	r3, r1
 8019b86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8019b88:	68bb      	ldr	r3, [r7, #8]
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	2200      	movs	r2, #0
 8019b92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	2200      	movs	r2, #0
 8019b98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8019ba0:	68b9      	ldr	r1, [r7, #8]
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	68fa      	ldr	r2, [r7, #12]
 8019ba6:	3206      	adds	r2, #6
 8019ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8019bac:	68bb      	ldr	r3, [r7, #8]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	2b02      	cmp	r3, #2
 8019bbc:	d80c      	bhi.n	8019bd8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	68d9      	ldr	r1, [r3, #12]
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	1c5a      	adds	r2, r3, #1
 8019bc6:	4613      	mov	r3, r2
 8019bc8:	009b      	lsls	r3, r3, #2
 8019bca:	4413      	add	r3, r2
 8019bcc:	00db      	lsls	r3, r3, #3
 8019bce:	440b      	add	r3, r1
 8019bd0:	461a      	mov	r2, r3
 8019bd2:	68bb      	ldr	r3, [r7, #8]
 8019bd4:	60da      	str	r2, [r3, #12]
 8019bd6:	e004      	b.n	8019be2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	68db      	ldr	r3, [r3, #12]
 8019bdc:	461a      	mov	r2, r3
 8019bde:	68bb      	ldr	r3, [r7, #8]
 8019be0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8019be2:	68bb      	ldr	r3, [r7, #8]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8019bea:	68bb      	ldr	r3, [r7, #8]
 8019bec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	3301      	adds	r3, #1
 8019bf2:	60fb      	str	r3, [r7, #12]
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	2b03      	cmp	r3, #3
 8019bf8:	d9bd      	bls.n	8019b76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	68da      	ldr	r2, [r3, #12]
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c0c:	611a      	str	r2, [r3, #16]
}
 8019c0e:	bf00      	nop
 8019c10:	3714      	adds	r7, #20
 8019c12:	46bd      	mov	sp, r7
 8019c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c18:	4770      	bx	lr

08019c1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8019c1a:	b480      	push	{r7}
 8019c1c:	b085      	sub	sp, #20
 8019c1e:	af00      	add	r7, sp, #0
 8019c20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8019c22:	2300      	movs	r3, #0
 8019c24:	60fb      	str	r3, [r7, #12]
 8019c26:	e046      	b.n	8019cb6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	6919      	ldr	r1, [r3, #16]
 8019c2c:	68fa      	ldr	r2, [r7, #12]
 8019c2e:	4613      	mov	r3, r2
 8019c30:	009b      	lsls	r3, r3, #2
 8019c32:	4413      	add	r3, r2
 8019c34:	00db      	lsls	r3, r3, #3
 8019c36:	440b      	add	r3, r1
 8019c38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8019c3a:	68bb      	ldr	r3, [r7, #8]
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8019c40:	68bb      	ldr	r3, [r7, #8]
 8019c42:	2200      	movs	r2, #0
 8019c44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	2200      	movs	r2, #0
 8019c4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	2200      	movs	r2, #0
 8019c50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	2200      	movs	r2, #0
 8019c56:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019c64:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8019c6c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8019c7a:	68b9      	ldr	r1, [r7, #8]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	68fa      	ldr	r2, [r7, #12]
 8019c80:	3212      	adds	r2, #18
 8019c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	2b02      	cmp	r3, #2
 8019c8a:	d80c      	bhi.n	8019ca6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6919      	ldr	r1, [r3, #16]
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	1c5a      	adds	r2, r3, #1
 8019c94:	4613      	mov	r3, r2
 8019c96:	009b      	lsls	r3, r3, #2
 8019c98:	4413      	add	r3, r2
 8019c9a:	00db      	lsls	r3, r3, #3
 8019c9c:	440b      	add	r3, r1
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	60da      	str	r2, [r3, #12]
 8019ca4:	e004      	b.n	8019cb0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	691b      	ldr	r3, [r3, #16]
 8019caa:	461a      	mov	r2, r3
 8019cac:	68bb      	ldr	r3, [r7, #8]
 8019cae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	3301      	adds	r3, #1
 8019cb4:	60fb      	str	r3, [r7, #12]
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	2b03      	cmp	r3, #3
 8019cba:	d9b5      	bls.n	8019c28 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	2200      	movs	r2, #0
 8019ccc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	691a      	ldr	r2, [r3, #16]
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ce6:	60da      	str	r2, [r3, #12]
}
 8019ce8:	bf00      	nop
 8019cea:	3714      	adds	r7, #20
 8019cec:	46bd      	mov	sp, r7
 8019cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf2:	4770      	bx	lr

08019cf4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	b08d      	sub	sp, #52	; 0x34
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	60f8      	str	r0, [r7, #12]
 8019cfc:	60b9      	str	r1, [r7, #8]
 8019cfe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	3318      	adds	r3, #24
 8019d04:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8019d06:	697b      	ldr	r3, [r7, #20]
 8019d08:	691b      	ldr	r3, [r3, #16]
 8019d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8019d0c:	697b      	ldr	r3, [r7, #20]
 8019d0e:	691b      	ldr	r3, [r3, #16]
 8019d10:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8019d12:	2300      	movs	r3, #0
 8019d14:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d1e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	689b      	ldr	r3, [r3, #8]
 8019d24:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8019d26:	2300      	movs	r3, #0
 8019d28:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8019d2a:	6a3b      	ldr	r3, [r7, #32]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019d36:	d007      	beq.n	8019d48 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8019d38:	697a      	ldr	r2, [r7, #20]
 8019d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3c:	3304      	adds	r3, #4
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	4413      	add	r3, r2
 8019d42:	685b      	ldr	r3, [r3, #4]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d001      	beq.n	8019d4c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8019d48:	2302      	movs	r3, #2
 8019d4a:	e0ff      	b.n	8019f4c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8019d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d4e:	3301      	adds	r3, #1
 8019d50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8019d52:	69fb      	ldr	r3, [r7, #28]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	461a      	mov	r2, r3
 8019d58:	6a3b      	ldr	r3, [r7, #32]
 8019d5a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8019d5c:	6a3b      	ldr	r3, [r7, #32]
 8019d5e:	685a      	ldr	r2, [r3, #4]
 8019d60:	4b7d      	ldr	r3, [pc, #500]	; (8019f58 <ETH_Prepare_Tx_Descriptors+0x264>)
 8019d62:	4013      	ands	r3, r2
 8019d64:	69fa      	ldr	r2, [r7, #28]
 8019d66:	6852      	ldr	r2, [r2, #4]
 8019d68:	431a      	orrs	r2, r3
 8019d6a:	6a3b      	ldr	r3, [r7, #32]
 8019d6c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8019d6e:	68bb      	ldr	r3, [r7, #8]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	f003 0301 	and.w	r3, r3, #1
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d008      	beq.n	8019d8c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8019d7a:	6a3b      	ldr	r3, [r7, #32]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019d82:	68bb      	ldr	r3, [r7, #8]
 8019d84:	695b      	ldr	r3, [r3, #20]
 8019d86:	431a      	orrs	r2, r3
 8019d88:	6a3b      	ldr	r3, [r7, #32]
 8019d8a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8019d8c:	68bb      	ldr	r3, [r7, #8]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	f003 0320 	and.w	r3, r3, #32
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d008      	beq.n	8019daa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8019d98:	6a3b      	ldr	r3, [r7, #32]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	691b      	ldr	r3, [r3, #16]
 8019da4:	431a      	orrs	r2, r3
 8019da6:	6a3b      	ldr	r3, [r7, #32]
 8019da8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8019daa:	68bb      	ldr	r3, [r7, #8]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	f003 0304 	and.w	r3, r3, #4
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d005      	beq.n	8019dc2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8019db6:	6a3b      	ldr	r3, [r7, #32]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8019dbe:	6a3b      	ldr	r3, [r7, #32]
 8019dc0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8019dc2:	6a3b      	ldr	r3, [r7, #32]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019dca:	6a3b      	ldr	r3, [r7, #32]
 8019dcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8019dce:	f3bf 8f5f 	dmb	sy
}
 8019dd2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8019dd4:	6a3b      	ldr	r3, [r7, #32]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019ddc:	6a3b      	ldr	r3, [r7, #32]
 8019dde:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8019de0:	e082      	b.n	8019ee8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8019de2:	6a3b      	ldr	r3, [r7, #32]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8019dea:	6a3b      	ldr	r3, [r7, #32]
 8019dec:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d006      	beq.n	8019e02 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8019df4:	6a3b      	ldr	r3, [r7, #32]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019dfc:	6a3b      	ldr	r3, [r7, #32]
 8019dfe:	601a      	str	r2, [r3, #0]
 8019e00:	e005      	b.n	8019e0e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8019e02:	6a3b      	ldr	r3, [r7, #32]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8019e0a:	6a3b      	ldr	r3, [r7, #32]
 8019e0c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8019e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e10:	3301      	adds	r3, #1
 8019e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e16:	2b03      	cmp	r3, #3
 8019e18:	d902      	bls.n	8019e20 <ETH_Prepare_Tx_Descriptors+0x12c>
 8019e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e1c:	3b04      	subs	r3, #4
 8019e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8019e20:	697b      	ldr	r3, [r7, #20]
 8019e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e28:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8019e2a:	6a3b      	ldr	r3, [r7, #32]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8019e32:	6a3b      	ldr	r3, [r7, #32]
 8019e34:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8019e36:	6a3b      	ldr	r3, [r7, #32]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019e42:	d007      	beq.n	8019e54 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8019e44:	697a      	ldr	r2, [r7, #20]
 8019e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e48:	3304      	adds	r3, #4
 8019e4a:	009b      	lsls	r3, r3, #2
 8019e4c:	4413      	add	r3, r2
 8019e4e:	685b      	ldr	r3, [r3, #4]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d029      	beq.n	8019ea8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8019e54:	693b      	ldr	r3, [r7, #16]
 8019e56:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e60:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8019e62:	2300      	movs	r3, #0
 8019e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e66:	e019      	b.n	8019e9c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8019e68:	f3bf 8f5f 	dmb	sy
}
 8019e6c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8019e6e:	6a3b      	ldr	r3, [r7, #32]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019e76:	6a3b      	ldr	r3, [r7, #32]
 8019e78:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8019e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7c:	3301      	adds	r3, #1
 8019e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e82:	2b03      	cmp	r3, #3
 8019e84:	d902      	bls.n	8019e8c <ETH_Prepare_Tx_Descriptors+0x198>
 8019e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e88:	3b04      	subs	r3, #4
 8019e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8019e8c:	697b      	ldr	r3, [r7, #20]
 8019e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e94:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8019e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e98:	3301      	adds	r3, #1
 8019e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d3e1      	bcc.n	8019e68 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8019ea4:	2302      	movs	r3, #2
 8019ea6:	e051      	b.n	8019f4c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8019ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eaa:	3301      	adds	r3, #1
 8019eac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8019eae:	69fb      	ldr	r3, [r7, #28]
 8019eb0:	689b      	ldr	r3, [r3, #8]
 8019eb2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8019eb4:	69fb      	ldr	r3, [r7, #28]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	461a      	mov	r2, r3
 8019eba:	6a3b      	ldr	r3, [r7, #32]
 8019ebc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8019ebe:	6a3b      	ldr	r3, [r7, #32]
 8019ec0:	685a      	ldr	r2, [r3, #4]
 8019ec2:	4b25      	ldr	r3, [pc, #148]	; (8019f58 <ETH_Prepare_Tx_Descriptors+0x264>)
 8019ec4:	4013      	ands	r3, r2
 8019ec6:	69fa      	ldr	r2, [r7, #28]
 8019ec8:	6852      	ldr	r2, [r2, #4]
 8019eca:	431a      	orrs	r2, r3
 8019ecc:	6a3b      	ldr	r3, [r7, #32]
 8019ece:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8019ed0:	69bb      	ldr	r3, [r7, #24]
 8019ed2:	3301      	adds	r3, #1
 8019ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8019ed6:	f3bf 8f5f 	dmb	sy
}
 8019eda:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8019edc:	6a3b      	ldr	r3, [r7, #32]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019ee4:	6a3b      	ldr	r3, [r7, #32]
 8019ee6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8019ee8:	69fb      	ldr	r3, [r7, #28]
 8019eea:	689b      	ldr	r3, [r3, #8]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	f47f af78 	bne.w	8019de2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d006      	beq.n	8019f06 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8019ef8:	6a3b      	ldr	r3, [r7, #32]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019f00:	6a3b      	ldr	r3, [r7, #32]
 8019f02:	601a      	str	r2, [r3, #0]
 8019f04:	e005      	b.n	8019f12 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8019f06:	6a3b      	ldr	r3, [r7, #32]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8019f0e:	6a3b      	ldr	r3, [r7, #32]
 8019f10:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8019f12:	6a3b      	ldr	r3, [r7, #32]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8019f1a:	6a3b      	ldr	r3, [r7, #32]
 8019f1c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8019f1e:	697b      	ldr	r3, [r7, #20]
 8019f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019f22:	6979      	ldr	r1, [r7, #20]
 8019f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f26:	3304      	adds	r3, #4
 8019f28:	009b      	lsls	r3, r3, #2
 8019f2a:	440b      	add	r3, r1
 8019f2c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8019f2e:	697b      	ldr	r3, [r7, #20]
 8019f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f32:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019f34:	b672      	cpsid	i
}
 8019f36:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019f3c:	69bb      	ldr	r3, [r7, #24]
 8019f3e:	4413      	add	r3, r2
 8019f40:	1c5a      	adds	r2, r3, #1
 8019f42:	697b      	ldr	r3, [r7, #20]
 8019f44:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8019f46:	b662      	cpsie	i
}
 8019f48:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8019f4a:	2300      	movs	r3, #0
}
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	3734      	adds	r7, #52	; 0x34
 8019f50:	46bd      	mov	sp, r7
 8019f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f56:	4770      	bx	lr
 8019f58:	ffffe000 	.word	0xffffe000

08019f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019f5c:	b480      	push	{r7}
 8019f5e:	b089      	sub	sp, #36	; 0x24
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
 8019f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8019f66:	2300      	movs	r3, #0
 8019f68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8019f6e:	2300      	movs	r3, #0
 8019f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8019f72:	2300      	movs	r3, #0
 8019f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8019f76:	2300      	movs	r3, #0
 8019f78:	61fb      	str	r3, [r7, #28]
 8019f7a:	e175      	b.n	801a268 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8019f7c:	2201      	movs	r2, #1
 8019f7e:	69fb      	ldr	r3, [r7, #28]
 8019f80:	fa02 f303 	lsl.w	r3, r2, r3
 8019f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019f86:	683b      	ldr	r3, [r7, #0]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	697a      	ldr	r2, [r7, #20]
 8019f8c:	4013      	ands	r3, r2
 8019f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019f90:	693a      	ldr	r2, [r7, #16]
 8019f92:	697b      	ldr	r3, [r7, #20]
 8019f94:	429a      	cmp	r2, r3
 8019f96:	f040 8164 	bne.w	801a262 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	f003 0303 	and.w	r3, r3, #3
 8019fa2:	2b01      	cmp	r3, #1
 8019fa4:	d005      	beq.n	8019fb2 <HAL_GPIO_Init+0x56>
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	685b      	ldr	r3, [r3, #4]
 8019faa:	f003 0303 	and.w	r3, r3, #3
 8019fae:	2b02      	cmp	r3, #2
 8019fb0:	d130      	bne.n	801a014 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	689b      	ldr	r3, [r3, #8]
 8019fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8019fb8:	69fb      	ldr	r3, [r7, #28]
 8019fba:	005b      	lsls	r3, r3, #1
 8019fbc:	2203      	movs	r2, #3
 8019fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8019fc2:	43db      	mvns	r3, r3
 8019fc4:	69ba      	ldr	r2, [r7, #24]
 8019fc6:	4013      	ands	r3, r2
 8019fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	68da      	ldr	r2, [r3, #12]
 8019fce:	69fb      	ldr	r3, [r7, #28]
 8019fd0:	005b      	lsls	r3, r3, #1
 8019fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8019fd6:	69ba      	ldr	r2, [r7, #24]
 8019fd8:	4313      	orrs	r3, r2
 8019fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	69ba      	ldr	r2, [r7, #24]
 8019fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	685b      	ldr	r3, [r3, #4]
 8019fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019fe8:	2201      	movs	r2, #1
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	fa02 f303 	lsl.w	r3, r2, r3
 8019ff0:	43db      	mvns	r3, r3
 8019ff2:	69ba      	ldr	r2, [r7, #24]
 8019ff4:	4013      	ands	r3, r2
 8019ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019ff8:	683b      	ldr	r3, [r7, #0]
 8019ffa:	685b      	ldr	r3, [r3, #4]
 8019ffc:	091b      	lsrs	r3, r3, #4
 8019ffe:	f003 0201 	and.w	r2, r3, #1
 801a002:	69fb      	ldr	r3, [r7, #28]
 801a004:	fa02 f303 	lsl.w	r3, r2, r3
 801a008:	69ba      	ldr	r2, [r7, #24]
 801a00a:	4313      	orrs	r3, r2
 801a00c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	69ba      	ldr	r2, [r7, #24]
 801a012:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801a014:	683b      	ldr	r3, [r7, #0]
 801a016:	685b      	ldr	r3, [r3, #4]
 801a018:	f003 0303 	and.w	r3, r3, #3
 801a01c:	2b03      	cmp	r3, #3
 801a01e:	d017      	beq.n	801a050 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	68db      	ldr	r3, [r3, #12]
 801a024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801a026:	69fb      	ldr	r3, [r7, #28]
 801a028:	005b      	lsls	r3, r3, #1
 801a02a:	2203      	movs	r2, #3
 801a02c:	fa02 f303 	lsl.w	r3, r2, r3
 801a030:	43db      	mvns	r3, r3
 801a032:	69ba      	ldr	r2, [r7, #24]
 801a034:	4013      	ands	r3, r2
 801a036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	689a      	ldr	r2, [r3, #8]
 801a03c:	69fb      	ldr	r3, [r7, #28]
 801a03e:	005b      	lsls	r3, r3, #1
 801a040:	fa02 f303 	lsl.w	r3, r2, r3
 801a044:	69ba      	ldr	r2, [r7, #24]
 801a046:	4313      	orrs	r3, r2
 801a048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	69ba      	ldr	r2, [r7, #24]
 801a04e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a050:	683b      	ldr	r3, [r7, #0]
 801a052:	685b      	ldr	r3, [r3, #4]
 801a054:	f003 0303 	and.w	r3, r3, #3
 801a058:	2b02      	cmp	r3, #2
 801a05a:	d123      	bne.n	801a0a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	08da      	lsrs	r2, r3, #3
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	3208      	adds	r2, #8
 801a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801a06a:	69fb      	ldr	r3, [r7, #28]
 801a06c:	f003 0307 	and.w	r3, r3, #7
 801a070:	009b      	lsls	r3, r3, #2
 801a072:	220f      	movs	r2, #15
 801a074:	fa02 f303 	lsl.w	r3, r2, r3
 801a078:	43db      	mvns	r3, r3
 801a07a:	69ba      	ldr	r2, [r7, #24]
 801a07c:	4013      	ands	r3, r2
 801a07e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801a080:	683b      	ldr	r3, [r7, #0]
 801a082:	691a      	ldr	r2, [r3, #16]
 801a084:	69fb      	ldr	r3, [r7, #28]
 801a086:	f003 0307 	and.w	r3, r3, #7
 801a08a:	009b      	lsls	r3, r3, #2
 801a08c:	fa02 f303 	lsl.w	r3, r2, r3
 801a090:	69ba      	ldr	r2, [r7, #24]
 801a092:	4313      	orrs	r3, r2
 801a094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801a096:	69fb      	ldr	r3, [r7, #28]
 801a098:	08da      	lsrs	r2, r3, #3
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	3208      	adds	r2, #8
 801a09e:	69b9      	ldr	r1, [r7, #24]
 801a0a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801a0aa:	69fb      	ldr	r3, [r7, #28]
 801a0ac:	005b      	lsls	r3, r3, #1
 801a0ae:	2203      	movs	r2, #3
 801a0b0:	fa02 f303 	lsl.w	r3, r2, r3
 801a0b4:	43db      	mvns	r3, r3
 801a0b6:	69ba      	ldr	r2, [r7, #24]
 801a0b8:	4013      	ands	r3, r2
 801a0ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801a0bc:	683b      	ldr	r3, [r7, #0]
 801a0be:	685b      	ldr	r3, [r3, #4]
 801a0c0:	f003 0203 	and.w	r2, r3, #3
 801a0c4:	69fb      	ldr	r3, [r7, #28]
 801a0c6:	005b      	lsls	r3, r3, #1
 801a0c8:	fa02 f303 	lsl.w	r3, r2, r3
 801a0cc:	69ba      	ldr	r2, [r7, #24]
 801a0ce:	4313      	orrs	r3, r2
 801a0d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	69ba      	ldr	r2, [r7, #24]
 801a0d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	685b      	ldr	r3, [r3, #4]
 801a0dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	f000 80be 	beq.w	801a262 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a0e6:	4b66      	ldr	r3, [pc, #408]	; (801a280 <HAL_GPIO_Init+0x324>)
 801a0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0ea:	4a65      	ldr	r2, [pc, #404]	; (801a280 <HAL_GPIO_Init+0x324>)
 801a0ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a0f0:	6453      	str	r3, [r2, #68]	; 0x44
 801a0f2:	4b63      	ldr	r3, [pc, #396]	; (801a280 <HAL_GPIO_Init+0x324>)
 801a0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a0fa:	60fb      	str	r3, [r7, #12]
 801a0fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801a0fe:	4a61      	ldr	r2, [pc, #388]	; (801a284 <HAL_GPIO_Init+0x328>)
 801a100:	69fb      	ldr	r3, [r7, #28]
 801a102:	089b      	lsrs	r3, r3, #2
 801a104:	3302      	adds	r3, #2
 801a106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a10a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	f003 0303 	and.w	r3, r3, #3
 801a112:	009b      	lsls	r3, r3, #2
 801a114:	220f      	movs	r2, #15
 801a116:	fa02 f303 	lsl.w	r3, r2, r3
 801a11a:	43db      	mvns	r3, r3
 801a11c:	69ba      	ldr	r2, [r7, #24]
 801a11e:	4013      	ands	r3, r2
 801a120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	4a58      	ldr	r2, [pc, #352]	; (801a288 <HAL_GPIO_Init+0x32c>)
 801a126:	4293      	cmp	r3, r2
 801a128:	d037      	beq.n	801a19a <HAL_GPIO_Init+0x23e>
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	4a57      	ldr	r2, [pc, #348]	; (801a28c <HAL_GPIO_Init+0x330>)
 801a12e:	4293      	cmp	r3, r2
 801a130:	d031      	beq.n	801a196 <HAL_GPIO_Init+0x23a>
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	4a56      	ldr	r2, [pc, #344]	; (801a290 <HAL_GPIO_Init+0x334>)
 801a136:	4293      	cmp	r3, r2
 801a138:	d02b      	beq.n	801a192 <HAL_GPIO_Init+0x236>
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	4a55      	ldr	r2, [pc, #340]	; (801a294 <HAL_GPIO_Init+0x338>)
 801a13e:	4293      	cmp	r3, r2
 801a140:	d025      	beq.n	801a18e <HAL_GPIO_Init+0x232>
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	4a54      	ldr	r2, [pc, #336]	; (801a298 <HAL_GPIO_Init+0x33c>)
 801a146:	4293      	cmp	r3, r2
 801a148:	d01f      	beq.n	801a18a <HAL_GPIO_Init+0x22e>
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	4a53      	ldr	r2, [pc, #332]	; (801a29c <HAL_GPIO_Init+0x340>)
 801a14e:	4293      	cmp	r3, r2
 801a150:	d019      	beq.n	801a186 <HAL_GPIO_Init+0x22a>
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	4a52      	ldr	r2, [pc, #328]	; (801a2a0 <HAL_GPIO_Init+0x344>)
 801a156:	4293      	cmp	r3, r2
 801a158:	d013      	beq.n	801a182 <HAL_GPIO_Init+0x226>
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	4a51      	ldr	r2, [pc, #324]	; (801a2a4 <HAL_GPIO_Init+0x348>)
 801a15e:	4293      	cmp	r3, r2
 801a160:	d00d      	beq.n	801a17e <HAL_GPIO_Init+0x222>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	4a50      	ldr	r2, [pc, #320]	; (801a2a8 <HAL_GPIO_Init+0x34c>)
 801a166:	4293      	cmp	r3, r2
 801a168:	d007      	beq.n	801a17a <HAL_GPIO_Init+0x21e>
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	4a4f      	ldr	r2, [pc, #316]	; (801a2ac <HAL_GPIO_Init+0x350>)
 801a16e:	4293      	cmp	r3, r2
 801a170:	d101      	bne.n	801a176 <HAL_GPIO_Init+0x21a>
 801a172:	2309      	movs	r3, #9
 801a174:	e012      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a176:	230a      	movs	r3, #10
 801a178:	e010      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a17a:	2308      	movs	r3, #8
 801a17c:	e00e      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a17e:	2307      	movs	r3, #7
 801a180:	e00c      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a182:	2306      	movs	r3, #6
 801a184:	e00a      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a186:	2305      	movs	r3, #5
 801a188:	e008      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a18a:	2304      	movs	r3, #4
 801a18c:	e006      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a18e:	2303      	movs	r3, #3
 801a190:	e004      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a192:	2302      	movs	r3, #2
 801a194:	e002      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a196:	2301      	movs	r3, #1
 801a198:	e000      	b.n	801a19c <HAL_GPIO_Init+0x240>
 801a19a:	2300      	movs	r3, #0
 801a19c:	69fa      	ldr	r2, [r7, #28]
 801a19e:	f002 0203 	and.w	r2, r2, #3
 801a1a2:	0092      	lsls	r2, r2, #2
 801a1a4:	4093      	lsls	r3, r2
 801a1a6:	69ba      	ldr	r2, [r7, #24]
 801a1a8:	4313      	orrs	r3, r2
 801a1aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801a1ac:	4935      	ldr	r1, [pc, #212]	; (801a284 <HAL_GPIO_Init+0x328>)
 801a1ae:	69fb      	ldr	r3, [r7, #28]
 801a1b0:	089b      	lsrs	r3, r3, #2
 801a1b2:	3302      	adds	r3, #2
 801a1b4:	69ba      	ldr	r2, [r7, #24]
 801a1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801a1ba:	4b3d      	ldr	r3, [pc, #244]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a1bc:	689b      	ldr	r3, [r3, #8]
 801a1be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a1c0:	693b      	ldr	r3, [r7, #16]
 801a1c2:	43db      	mvns	r3, r3
 801a1c4:	69ba      	ldr	r2, [r7, #24]
 801a1c6:	4013      	ands	r3, r2
 801a1c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801a1ca:	683b      	ldr	r3, [r7, #0]
 801a1cc:	685b      	ldr	r3, [r3, #4]
 801a1ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d003      	beq.n	801a1de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801a1d6:	69ba      	ldr	r2, [r7, #24]
 801a1d8:	693b      	ldr	r3, [r7, #16]
 801a1da:	4313      	orrs	r3, r2
 801a1dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801a1de:	4a34      	ldr	r2, [pc, #208]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a1e0:	69bb      	ldr	r3, [r7, #24]
 801a1e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801a1e4:	4b32      	ldr	r3, [pc, #200]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a1e6:	68db      	ldr	r3, [r3, #12]
 801a1e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a1ea:	693b      	ldr	r3, [r7, #16]
 801a1ec:	43db      	mvns	r3, r3
 801a1ee:	69ba      	ldr	r2, [r7, #24]
 801a1f0:	4013      	ands	r3, r2
 801a1f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	685b      	ldr	r3, [r3, #4]
 801a1f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d003      	beq.n	801a208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801a200:	69ba      	ldr	r2, [r7, #24]
 801a202:	693b      	ldr	r3, [r7, #16]
 801a204:	4313      	orrs	r3, r2
 801a206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801a208:	4a29      	ldr	r2, [pc, #164]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a20a:	69bb      	ldr	r3, [r7, #24]
 801a20c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801a20e:	4b28      	ldr	r3, [pc, #160]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a210:	685b      	ldr	r3, [r3, #4]
 801a212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a214:	693b      	ldr	r3, [r7, #16]
 801a216:	43db      	mvns	r3, r3
 801a218:	69ba      	ldr	r2, [r7, #24]
 801a21a:	4013      	ands	r3, r2
 801a21c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	685b      	ldr	r3, [r3, #4]
 801a222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a226:	2b00      	cmp	r3, #0
 801a228:	d003      	beq.n	801a232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801a22a:	69ba      	ldr	r2, [r7, #24]
 801a22c:	693b      	ldr	r3, [r7, #16]
 801a22e:	4313      	orrs	r3, r2
 801a230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801a232:	4a1f      	ldr	r2, [pc, #124]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a234:	69bb      	ldr	r3, [r7, #24]
 801a236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801a238:	4b1d      	ldr	r3, [pc, #116]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801a23e:	693b      	ldr	r3, [r7, #16]
 801a240:	43db      	mvns	r3, r3
 801a242:	69ba      	ldr	r2, [r7, #24]
 801a244:	4013      	ands	r3, r2
 801a246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	685b      	ldr	r3, [r3, #4]
 801a24c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a250:	2b00      	cmp	r3, #0
 801a252:	d003      	beq.n	801a25c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801a254:	69ba      	ldr	r2, [r7, #24]
 801a256:	693b      	ldr	r3, [r7, #16]
 801a258:	4313      	orrs	r3, r2
 801a25a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801a25c:	4a14      	ldr	r2, [pc, #80]	; (801a2b0 <HAL_GPIO_Init+0x354>)
 801a25e:	69bb      	ldr	r3, [r7, #24]
 801a260:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801a262:	69fb      	ldr	r3, [r7, #28]
 801a264:	3301      	adds	r3, #1
 801a266:	61fb      	str	r3, [r7, #28]
 801a268:	69fb      	ldr	r3, [r7, #28]
 801a26a:	2b0f      	cmp	r3, #15
 801a26c:	f67f ae86 	bls.w	8019f7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801a270:	bf00      	nop
 801a272:	bf00      	nop
 801a274:	3724      	adds	r7, #36	; 0x24
 801a276:	46bd      	mov	sp, r7
 801a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27c:	4770      	bx	lr
 801a27e:	bf00      	nop
 801a280:	40023800 	.word	0x40023800
 801a284:	40013800 	.word	0x40013800
 801a288:	40020000 	.word	0x40020000
 801a28c:	40020400 	.word	0x40020400
 801a290:	40020800 	.word	0x40020800
 801a294:	40020c00 	.word	0x40020c00
 801a298:	40021000 	.word	0x40021000
 801a29c:	40021400 	.word	0x40021400
 801a2a0:	40021800 	.word	0x40021800
 801a2a4:	40021c00 	.word	0x40021c00
 801a2a8:	40022000 	.word	0x40022000
 801a2ac:	40022400 	.word	0x40022400
 801a2b0:	40013c00 	.word	0x40013c00

0801a2b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801a2b4:	b480      	push	{r7}
 801a2b6:	b085      	sub	sp, #20
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	6078      	str	r0, [r7, #4]
 801a2bc:	460b      	mov	r3, r1
 801a2be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	691a      	ldr	r2, [r3, #16]
 801a2c4:	887b      	ldrh	r3, [r7, #2]
 801a2c6:	4013      	ands	r3, r2
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d002      	beq.n	801a2d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801a2cc:	2301      	movs	r3, #1
 801a2ce:	73fb      	strb	r3, [r7, #15]
 801a2d0:	e001      	b.n	801a2d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801a2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2d8:	4618      	mov	r0, r3
 801a2da:	3714      	adds	r7, #20
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e2:	4770      	bx	lr

0801a2e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801a2e4:	b480      	push	{r7}
 801a2e6:	b083      	sub	sp, #12
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
 801a2ec:	460b      	mov	r3, r1
 801a2ee:	807b      	strh	r3, [r7, #2]
 801a2f0:	4613      	mov	r3, r2
 801a2f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801a2f4:	787b      	ldrb	r3, [r7, #1]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d003      	beq.n	801a302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801a2fa:	887a      	ldrh	r2, [r7, #2]
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 801a300:	e003      	b.n	801a30a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801a302:	887b      	ldrh	r3, [r7, #2]
 801a304:	041a      	lsls	r2, r3, #16
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	619a      	str	r2, [r3, #24]
}
 801a30a:	bf00      	nop
 801a30c:	370c      	adds	r7, #12
 801a30e:	46bd      	mov	sp, r7
 801a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a314:	4770      	bx	lr

0801a316 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801a316:	b480      	push	{r7}
 801a318:	b085      	sub	sp, #20
 801a31a:	af00      	add	r7, sp, #0
 801a31c:	6078      	str	r0, [r7, #4]
 801a31e:	460b      	mov	r3, r1
 801a320:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	695b      	ldr	r3, [r3, #20]
 801a326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801a328:	887a      	ldrh	r2, [r7, #2]
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	4013      	ands	r3, r2
 801a32e:	041a      	lsls	r2, r3, #16
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	43d9      	mvns	r1, r3
 801a334:	887b      	ldrh	r3, [r7, #2]
 801a336:	400b      	ands	r3, r1
 801a338:	431a      	orrs	r2, r3
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	619a      	str	r2, [r3, #24]
}
 801a33e:	bf00      	nop
 801a340:	3714      	adds	r7, #20
 801a342:	46bd      	mov	sp, r7
 801a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a348:	4770      	bx	lr
	...

0801a34c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b082      	sub	sp, #8
 801a350:	af00      	add	r7, sp, #0
 801a352:	4603      	mov	r3, r0
 801a354:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801a356:	4b08      	ldr	r3, [pc, #32]	; (801a378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801a358:	695a      	ldr	r2, [r3, #20]
 801a35a:	88fb      	ldrh	r3, [r7, #6]
 801a35c:	4013      	ands	r3, r2
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d006      	beq.n	801a370 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801a362:	4a05      	ldr	r2, [pc, #20]	; (801a378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801a364:	88fb      	ldrh	r3, [r7, #6]
 801a366:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801a368:	88fb      	ldrh	r3, [r7, #6]
 801a36a:	4618      	mov	r0, r3
 801a36c:	f000 f806 	bl	801a37c <HAL_GPIO_EXTI_Callback>
  }
}
 801a370:	bf00      	nop
 801a372:	3708      	adds	r7, #8
 801a374:	46bd      	mov	sp, r7
 801a376:	bd80      	pop	{r7, pc}
 801a378:	40013c00 	.word	0x40013c00

0801a37c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801a37c:	b480      	push	{r7}
 801a37e:	b083      	sub	sp, #12
 801a380:	af00      	add	r7, sp, #0
 801a382:	4603      	mov	r3, r0
 801a384:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801a386:	bf00      	nop
 801a388:	370c      	adds	r7, #12
 801a38a:	46bd      	mov	sp, r7
 801a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a390:	4770      	bx	lr
	...

0801a394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b082      	sub	sp, #8
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d101      	bne.n	801a3a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	e07f      	b.n	801a4a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d106      	bne.n	801a3c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801a3ba:	6878      	ldr	r0, [r7, #4]
 801a3bc:	f7fa f8a4 	bl	8014508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2224      	movs	r2, #36	; 0x24
 801a3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	681a      	ldr	r2, [r3, #0]
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f022 0201 	bic.w	r2, r2, #1
 801a3d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	685a      	ldr	r2, [r3, #4]
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801a3e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	689a      	ldr	r2, [r3, #8]
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a3f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	68db      	ldr	r3, [r3, #12]
 801a3fa:	2b01      	cmp	r3, #1
 801a3fc:	d107      	bne.n	801a40e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	689a      	ldr	r2, [r3, #8]
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a40a:	609a      	str	r2, [r3, #8]
 801a40c:	e006      	b.n	801a41c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	689a      	ldr	r2, [r3, #8]
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801a41a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	68db      	ldr	r3, [r3, #12]
 801a420:	2b02      	cmp	r3, #2
 801a422:	d104      	bne.n	801a42e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a42c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	6859      	ldr	r1, [r3, #4]
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	681a      	ldr	r2, [r3, #0]
 801a438:	4b1d      	ldr	r3, [pc, #116]	; (801a4b0 <HAL_I2C_Init+0x11c>)
 801a43a:	430b      	orrs	r3, r1
 801a43c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	68da      	ldr	r2, [r3, #12]
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a44c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	691a      	ldr	r2, [r3, #16]
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	695b      	ldr	r3, [r3, #20]
 801a456:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	699b      	ldr	r3, [r3, #24]
 801a45e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	430a      	orrs	r2, r1
 801a466:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	69d9      	ldr	r1, [r3, #28]
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	6a1a      	ldr	r2, [r3, #32]
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	430a      	orrs	r2, r1
 801a476:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	681a      	ldr	r2, [r3, #0]
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	f042 0201 	orr.w	r2, r2, #1
 801a486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2200      	movs	r2, #0
 801a48c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	2220      	movs	r2, #32
 801a492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	2200      	movs	r2, #0
 801a49a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	2200      	movs	r2, #0
 801a4a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801a4a4:	2300      	movs	r3, #0
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3708      	adds	r7, #8
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}
 801a4ae:	bf00      	nop
 801a4b0:	02008000 	.word	0x02008000

0801a4b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b088      	sub	sp, #32
 801a4b8:	af02      	add	r7, sp, #8
 801a4ba:	60f8      	str	r0, [r7, #12]
 801a4bc:	4608      	mov	r0, r1
 801a4be:	4611      	mov	r1, r2
 801a4c0:	461a      	mov	r2, r3
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	817b      	strh	r3, [r7, #10]
 801a4c6:	460b      	mov	r3, r1
 801a4c8:	813b      	strh	r3, [r7, #8]
 801a4ca:	4613      	mov	r3, r2
 801a4cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a4d4:	b2db      	uxtb	r3, r3
 801a4d6:	2b20      	cmp	r3, #32
 801a4d8:	f040 80f9 	bne.w	801a6ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801a4dc:	6a3b      	ldr	r3, [r7, #32]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d002      	beq.n	801a4e8 <HAL_I2C_Mem_Write+0x34>
 801a4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d105      	bne.n	801a4f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a4ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801a4f0:	2301      	movs	r3, #1
 801a4f2:	e0ed      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a4fa:	2b01      	cmp	r3, #1
 801a4fc:	d101      	bne.n	801a502 <HAL_I2C_Mem_Write+0x4e>
 801a4fe:	2302      	movs	r3, #2
 801a500:	e0e6      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	2201      	movs	r2, #1
 801a506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801a50a:	f7fd fa1b 	bl	8017944 <HAL_GetTick>
 801a50e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801a510:	697b      	ldr	r3, [r7, #20]
 801a512:	9300      	str	r3, [sp, #0]
 801a514:	2319      	movs	r3, #25
 801a516:	2201      	movs	r2, #1
 801a518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801a51c:	68f8      	ldr	r0, [r7, #12]
 801a51e:	f000 fac3 	bl	801aaa8 <I2C_WaitOnFlagUntilTimeout>
 801a522:	4603      	mov	r3, r0
 801a524:	2b00      	cmp	r3, #0
 801a526:	d001      	beq.n	801a52c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801a528:	2301      	movs	r3, #1
 801a52a:	e0d1      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	2221      	movs	r2, #33	; 0x21
 801a530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	2240      	movs	r2, #64	; 0x40
 801a538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	2200      	movs	r2, #0
 801a540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	6a3a      	ldr	r2, [r7, #32]
 801a546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a54c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	2200      	movs	r2, #0
 801a552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801a554:	88f8      	ldrh	r0, [r7, #6]
 801a556:	893a      	ldrh	r2, [r7, #8]
 801a558:	8979      	ldrh	r1, [r7, #10]
 801a55a:	697b      	ldr	r3, [r7, #20]
 801a55c:	9301      	str	r3, [sp, #4]
 801a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a560:	9300      	str	r3, [sp, #0]
 801a562:	4603      	mov	r3, r0
 801a564:	68f8      	ldr	r0, [r7, #12]
 801a566:	f000 f9d3 	bl	801a910 <I2C_RequestMemoryWrite>
 801a56a:	4603      	mov	r3, r0
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d005      	beq.n	801a57c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	2200      	movs	r2, #0
 801a574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801a578:	2301      	movs	r3, #1
 801a57a:	e0a9      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a580:	b29b      	uxth	r3, r3
 801a582:	2bff      	cmp	r3, #255	; 0xff
 801a584:	d90e      	bls.n	801a5a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	22ff      	movs	r2, #255	; 0xff
 801a58a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a590:	b2da      	uxtb	r2, r3
 801a592:	8979      	ldrh	r1, [r7, #10]
 801a594:	2300      	movs	r3, #0
 801a596:	9300      	str	r3, [sp, #0]
 801a598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a59c:	68f8      	ldr	r0, [r7, #12]
 801a59e:	f000 fc1f 	bl	801ade0 <I2C_TransferConfig>
 801a5a2:	e00f      	b.n	801a5c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a5a8:	b29a      	uxth	r2, r3
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5b2:	b2da      	uxtb	r2, r3
 801a5b4:	8979      	ldrh	r1, [r7, #10]
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	9300      	str	r3, [sp, #0]
 801a5ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a5be:	68f8      	ldr	r0, [r7, #12]
 801a5c0:	f000 fc0e 	bl	801ade0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a5c4:	697a      	ldr	r2, [r7, #20]
 801a5c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a5c8:	68f8      	ldr	r0, [r7, #12]
 801a5ca:	f000 faad 	bl	801ab28 <I2C_WaitOnTXISFlagUntilTimeout>
 801a5ce:	4603      	mov	r3, r0
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d001      	beq.n	801a5d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801a5d4:	2301      	movs	r3, #1
 801a5d6:	e07b      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5dc:	781a      	ldrb	r2, [r3, #0]
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5e8:	1c5a      	adds	r2, r3, #1
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a5f2:	b29b      	uxth	r3, r3
 801a5f4:	3b01      	subs	r3, #1
 801a5f6:	b29a      	uxth	r2, r3
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a600:	3b01      	subs	r3, #1
 801a602:	b29a      	uxth	r2, r3
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a60c:	b29b      	uxth	r3, r3
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d034      	beq.n	801a67c <HAL_I2C_Mem_Write+0x1c8>
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a616:	2b00      	cmp	r3, #0
 801a618:	d130      	bne.n	801a67c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801a61a:	697b      	ldr	r3, [r7, #20]
 801a61c:	9300      	str	r3, [sp, #0]
 801a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a620:	2200      	movs	r2, #0
 801a622:	2180      	movs	r1, #128	; 0x80
 801a624:	68f8      	ldr	r0, [r7, #12]
 801a626:	f000 fa3f 	bl	801aaa8 <I2C_WaitOnFlagUntilTimeout>
 801a62a:	4603      	mov	r3, r0
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d001      	beq.n	801a634 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801a630:	2301      	movs	r3, #1
 801a632:	e04d      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a638:	b29b      	uxth	r3, r3
 801a63a:	2bff      	cmp	r3, #255	; 0xff
 801a63c:	d90e      	bls.n	801a65c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	22ff      	movs	r2, #255	; 0xff
 801a642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a648:	b2da      	uxtb	r2, r3
 801a64a:	8979      	ldrh	r1, [r7, #10]
 801a64c:	2300      	movs	r3, #0
 801a64e:	9300      	str	r3, [sp, #0]
 801a650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a654:	68f8      	ldr	r0, [r7, #12]
 801a656:	f000 fbc3 	bl	801ade0 <I2C_TransferConfig>
 801a65a:	e00f      	b.n	801a67c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a660:	b29a      	uxth	r2, r3
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a66a:	b2da      	uxtb	r2, r3
 801a66c:	8979      	ldrh	r1, [r7, #10]
 801a66e:	2300      	movs	r3, #0
 801a670:	9300      	str	r3, [sp, #0]
 801a672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a676:	68f8      	ldr	r0, [r7, #12]
 801a678:	f000 fbb2 	bl	801ade0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a680:	b29b      	uxth	r3, r3
 801a682:	2b00      	cmp	r3, #0
 801a684:	d19e      	bne.n	801a5c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a686:	697a      	ldr	r2, [r7, #20]
 801a688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a68a:	68f8      	ldr	r0, [r7, #12]
 801a68c:	f000 fa8c 	bl	801aba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 801a690:	4603      	mov	r3, r0
 801a692:	2b00      	cmp	r3, #0
 801a694:	d001      	beq.n	801a69a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801a696:	2301      	movs	r3, #1
 801a698:	e01a      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	2220      	movs	r2, #32
 801a6a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	6859      	ldr	r1, [r3, #4]
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	681a      	ldr	r2, [r3, #0]
 801a6ac:	4b0a      	ldr	r3, [pc, #40]	; (801a6d8 <HAL_I2C_Mem_Write+0x224>)
 801a6ae:	400b      	ands	r3, r1
 801a6b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	2220      	movs	r2, #32
 801a6b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	2200      	movs	r2, #0
 801a6be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	e000      	b.n	801a6d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801a6ce:	2302      	movs	r3, #2
  }
}
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	3718      	adds	r7, #24
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	bd80      	pop	{r7, pc}
 801a6d8:	fe00e800 	.word	0xfe00e800

0801a6dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b088      	sub	sp, #32
 801a6e0:	af02      	add	r7, sp, #8
 801a6e2:	60f8      	str	r0, [r7, #12]
 801a6e4:	4608      	mov	r0, r1
 801a6e6:	4611      	mov	r1, r2
 801a6e8:	461a      	mov	r2, r3
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	817b      	strh	r3, [r7, #10]
 801a6ee:	460b      	mov	r3, r1
 801a6f0:	813b      	strh	r3, [r7, #8]
 801a6f2:	4613      	mov	r3, r2
 801a6f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a6fc:	b2db      	uxtb	r3, r3
 801a6fe:	2b20      	cmp	r3, #32
 801a700:	f040 80fd 	bne.w	801a8fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801a704:	6a3b      	ldr	r3, [r7, #32]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d002      	beq.n	801a710 <HAL_I2C_Mem_Read+0x34>
 801a70a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d105      	bne.n	801a71c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a716:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801a718:	2301      	movs	r3, #1
 801a71a:	e0f1      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a722:	2b01      	cmp	r3, #1
 801a724:	d101      	bne.n	801a72a <HAL_I2C_Mem_Read+0x4e>
 801a726:	2302      	movs	r3, #2
 801a728:	e0ea      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	2201      	movs	r2, #1
 801a72e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801a732:	f7fd f907 	bl	8017944 <HAL_GetTick>
 801a736:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	9300      	str	r3, [sp, #0]
 801a73c:	2319      	movs	r3, #25
 801a73e:	2201      	movs	r2, #1
 801a740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801a744:	68f8      	ldr	r0, [r7, #12]
 801a746:	f000 f9af 	bl	801aaa8 <I2C_WaitOnFlagUntilTimeout>
 801a74a:	4603      	mov	r3, r0
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d001      	beq.n	801a754 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801a750:	2301      	movs	r3, #1
 801a752:	e0d5      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	2222      	movs	r2, #34	; 0x22
 801a758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	2240      	movs	r2, #64	; 0x40
 801a760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	2200      	movs	r2, #0
 801a768:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	6a3a      	ldr	r2, [r7, #32]
 801a76e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	2200      	movs	r2, #0
 801a77a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801a77c:	88f8      	ldrh	r0, [r7, #6]
 801a77e:	893a      	ldrh	r2, [r7, #8]
 801a780:	8979      	ldrh	r1, [r7, #10]
 801a782:	697b      	ldr	r3, [r7, #20]
 801a784:	9301      	str	r3, [sp, #4]
 801a786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a788:	9300      	str	r3, [sp, #0]
 801a78a:	4603      	mov	r3, r0
 801a78c:	68f8      	ldr	r0, [r7, #12]
 801a78e:	f000 f913 	bl	801a9b8 <I2C_RequestMemoryRead>
 801a792:	4603      	mov	r3, r0
 801a794:	2b00      	cmp	r3, #0
 801a796:	d005      	beq.n	801a7a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	2200      	movs	r2, #0
 801a79c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801a7a0:	2301      	movs	r3, #1
 801a7a2:	e0ad      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a7a8:	b29b      	uxth	r3, r3
 801a7aa:	2bff      	cmp	r3, #255	; 0xff
 801a7ac:	d90e      	bls.n	801a7cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	22ff      	movs	r2, #255	; 0xff
 801a7b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a7b8:	b2da      	uxtb	r2, r3
 801a7ba:	8979      	ldrh	r1, [r7, #10]
 801a7bc:	4b52      	ldr	r3, [pc, #328]	; (801a908 <HAL_I2C_Mem_Read+0x22c>)
 801a7be:	9300      	str	r3, [sp, #0]
 801a7c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a7c4:	68f8      	ldr	r0, [r7, #12]
 801a7c6:	f000 fb0b 	bl	801ade0 <I2C_TransferConfig>
 801a7ca:	e00f      	b.n	801a7ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a7d0:	b29a      	uxth	r2, r3
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a7da:	b2da      	uxtb	r2, r3
 801a7dc:	8979      	ldrh	r1, [r7, #10]
 801a7de:	4b4a      	ldr	r3, [pc, #296]	; (801a908 <HAL_I2C_Mem_Read+0x22c>)
 801a7e0:	9300      	str	r3, [sp, #0]
 801a7e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a7e6:	68f8      	ldr	r0, [r7, #12]
 801a7e8:	f000 fafa 	bl	801ade0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	2104      	movs	r1, #4
 801a7f6:	68f8      	ldr	r0, [r7, #12]
 801a7f8:	f000 f956 	bl	801aaa8 <I2C_WaitOnFlagUntilTimeout>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d001      	beq.n	801a806 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801a802:	2301      	movs	r3, #1
 801a804:	e07c      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a810:	b2d2      	uxtb	r2, r2
 801a812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a818:	1c5a      	adds	r2, r3, #1
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a822:	3b01      	subs	r3, #1
 801a824:	b29a      	uxth	r2, r3
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a82e:	b29b      	uxth	r3, r3
 801a830:	3b01      	subs	r3, #1
 801a832:	b29a      	uxth	r2, r3
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a83c:	b29b      	uxth	r3, r3
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d034      	beq.n	801a8ac <HAL_I2C_Mem_Read+0x1d0>
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a846:	2b00      	cmp	r3, #0
 801a848:	d130      	bne.n	801a8ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801a84a:	697b      	ldr	r3, [r7, #20]
 801a84c:	9300      	str	r3, [sp, #0]
 801a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a850:	2200      	movs	r2, #0
 801a852:	2180      	movs	r1, #128	; 0x80
 801a854:	68f8      	ldr	r0, [r7, #12]
 801a856:	f000 f927 	bl	801aaa8 <I2C_WaitOnFlagUntilTimeout>
 801a85a:	4603      	mov	r3, r0
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d001      	beq.n	801a864 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801a860:	2301      	movs	r3, #1
 801a862:	e04d      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a868:	b29b      	uxth	r3, r3
 801a86a:	2bff      	cmp	r3, #255	; 0xff
 801a86c:	d90e      	bls.n	801a88c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	22ff      	movs	r2, #255	; 0xff
 801a872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a878:	b2da      	uxtb	r2, r3
 801a87a:	8979      	ldrh	r1, [r7, #10]
 801a87c:	2300      	movs	r3, #0
 801a87e:	9300      	str	r3, [sp, #0]
 801a880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a884:	68f8      	ldr	r0, [r7, #12]
 801a886:	f000 faab 	bl	801ade0 <I2C_TransferConfig>
 801a88a:	e00f      	b.n	801a8ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a890:	b29a      	uxth	r2, r3
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a89a:	b2da      	uxtb	r2, r3
 801a89c:	8979      	ldrh	r1, [r7, #10]
 801a89e:	2300      	movs	r3, #0
 801a8a0:	9300      	str	r3, [sp, #0]
 801a8a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a8a6:	68f8      	ldr	r0, [r7, #12]
 801a8a8:	f000 fa9a 	bl	801ade0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d19a      	bne.n	801a7ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a8b6:	697a      	ldr	r2, [r7, #20]
 801a8b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a8ba:	68f8      	ldr	r0, [r7, #12]
 801a8bc:	f000 f974 	bl	801aba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 801a8c0:	4603      	mov	r3, r0
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d001      	beq.n	801a8ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801a8c6:	2301      	movs	r3, #1
 801a8c8:	e01a      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	2220      	movs	r2, #32
 801a8d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	6859      	ldr	r1, [r3, #4]
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	681a      	ldr	r2, [r3, #0]
 801a8dc:	4b0b      	ldr	r3, [pc, #44]	; (801a90c <HAL_I2C_Mem_Read+0x230>)
 801a8de:	400b      	ands	r3, r1
 801a8e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	2220      	movs	r2, #32
 801a8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	2200      	movs	r2, #0
 801a8ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	e000      	b.n	801a900 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801a8fe:	2302      	movs	r3, #2
  }
}
 801a900:	4618      	mov	r0, r3
 801a902:	3718      	adds	r7, #24
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}
 801a908:	80002400 	.word	0x80002400
 801a90c:	fe00e800 	.word	0xfe00e800

0801a910 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b086      	sub	sp, #24
 801a914:	af02      	add	r7, sp, #8
 801a916:	60f8      	str	r0, [r7, #12]
 801a918:	4608      	mov	r0, r1
 801a91a:	4611      	mov	r1, r2
 801a91c:	461a      	mov	r2, r3
 801a91e:	4603      	mov	r3, r0
 801a920:	817b      	strh	r3, [r7, #10]
 801a922:	460b      	mov	r3, r1
 801a924:	813b      	strh	r3, [r7, #8]
 801a926:	4613      	mov	r3, r2
 801a928:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801a92a:	88fb      	ldrh	r3, [r7, #6]
 801a92c:	b2da      	uxtb	r2, r3
 801a92e:	8979      	ldrh	r1, [r7, #10]
 801a930:	4b20      	ldr	r3, [pc, #128]	; (801a9b4 <I2C_RequestMemoryWrite+0xa4>)
 801a932:	9300      	str	r3, [sp, #0]
 801a934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a938:	68f8      	ldr	r0, [r7, #12]
 801a93a:	f000 fa51 	bl	801ade0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a93e:	69fa      	ldr	r2, [r7, #28]
 801a940:	69b9      	ldr	r1, [r7, #24]
 801a942:	68f8      	ldr	r0, [r7, #12]
 801a944:	f000 f8f0 	bl	801ab28 <I2C_WaitOnTXISFlagUntilTimeout>
 801a948:	4603      	mov	r3, r0
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d001      	beq.n	801a952 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801a94e:	2301      	movs	r3, #1
 801a950:	e02c      	b.n	801a9ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801a952:	88fb      	ldrh	r3, [r7, #6]
 801a954:	2b01      	cmp	r3, #1
 801a956:	d105      	bne.n	801a964 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a958:	893b      	ldrh	r3, [r7, #8]
 801a95a:	b2da      	uxtb	r2, r3
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	629a      	str	r2, [r3, #40]	; 0x28
 801a962:	e015      	b.n	801a990 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801a964:	893b      	ldrh	r3, [r7, #8]
 801a966:	0a1b      	lsrs	r3, r3, #8
 801a968:	b29b      	uxth	r3, r3
 801a96a:	b2da      	uxtb	r2, r3
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a972:	69fa      	ldr	r2, [r7, #28]
 801a974:	69b9      	ldr	r1, [r7, #24]
 801a976:	68f8      	ldr	r0, [r7, #12]
 801a978:	f000 f8d6 	bl	801ab28 <I2C_WaitOnTXISFlagUntilTimeout>
 801a97c:	4603      	mov	r3, r0
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d001      	beq.n	801a986 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801a982:	2301      	movs	r3, #1
 801a984:	e012      	b.n	801a9ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a986:	893b      	ldrh	r3, [r7, #8]
 801a988:	b2da      	uxtb	r2, r3
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801a990:	69fb      	ldr	r3, [r7, #28]
 801a992:	9300      	str	r3, [sp, #0]
 801a994:	69bb      	ldr	r3, [r7, #24]
 801a996:	2200      	movs	r2, #0
 801a998:	2180      	movs	r1, #128	; 0x80
 801a99a:	68f8      	ldr	r0, [r7, #12]
 801a99c:	f000 f884 	bl	801aaa8 <I2C_WaitOnFlagUntilTimeout>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d001      	beq.n	801a9aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801a9a6:	2301      	movs	r3, #1
 801a9a8:	e000      	b.n	801a9ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801a9aa:	2300      	movs	r3, #0
}
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	3710      	adds	r7, #16
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}
 801a9b4:	80002000 	.word	0x80002000

0801a9b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b086      	sub	sp, #24
 801a9bc:	af02      	add	r7, sp, #8
 801a9be:	60f8      	str	r0, [r7, #12]
 801a9c0:	4608      	mov	r0, r1
 801a9c2:	4611      	mov	r1, r2
 801a9c4:	461a      	mov	r2, r3
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	817b      	strh	r3, [r7, #10]
 801a9ca:	460b      	mov	r3, r1
 801a9cc:	813b      	strh	r3, [r7, #8]
 801a9ce:	4613      	mov	r3, r2
 801a9d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801a9d2:	88fb      	ldrh	r3, [r7, #6]
 801a9d4:	b2da      	uxtb	r2, r3
 801a9d6:	8979      	ldrh	r1, [r7, #10]
 801a9d8:	4b20      	ldr	r3, [pc, #128]	; (801aa5c <I2C_RequestMemoryRead+0xa4>)
 801a9da:	9300      	str	r3, [sp, #0]
 801a9dc:	2300      	movs	r3, #0
 801a9de:	68f8      	ldr	r0, [r7, #12]
 801a9e0:	f000 f9fe 	bl	801ade0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a9e4:	69fa      	ldr	r2, [r7, #28]
 801a9e6:	69b9      	ldr	r1, [r7, #24]
 801a9e8:	68f8      	ldr	r0, [r7, #12]
 801a9ea:	f000 f89d 	bl	801ab28 <I2C_WaitOnTXISFlagUntilTimeout>
 801a9ee:	4603      	mov	r3, r0
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d001      	beq.n	801a9f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801a9f4:	2301      	movs	r3, #1
 801a9f6:	e02c      	b.n	801aa52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801a9f8:	88fb      	ldrh	r3, [r7, #6]
 801a9fa:	2b01      	cmp	r3, #1
 801a9fc:	d105      	bne.n	801aa0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a9fe:	893b      	ldrh	r3, [r7, #8]
 801aa00:	b2da      	uxtb	r2, r3
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	629a      	str	r2, [r3, #40]	; 0x28
 801aa08:	e015      	b.n	801aa36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801aa0a:	893b      	ldrh	r3, [r7, #8]
 801aa0c:	0a1b      	lsrs	r3, r3, #8
 801aa0e:	b29b      	uxth	r3, r3
 801aa10:	b2da      	uxtb	r2, r3
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801aa18:	69fa      	ldr	r2, [r7, #28]
 801aa1a:	69b9      	ldr	r1, [r7, #24]
 801aa1c:	68f8      	ldr	r0, [r7, #12]
 801aa1e:	f000 f883 	bl	801ab28 <I2C_WaitOnTXISFlagUntilTimeout>
 801aa22:	4603      	mov	r3, r0
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d001      	beq.n	801aa2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801aa28:	2301      	movs	r3, #1
 801aa2a:	e012      	b.n	801aa52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801aa2c:	893b      	ldrh	r3, [r7, #8]
 801aa2e:	b2da      	uxtb	r2, r3
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801aa36:	69fb      	ldr	r3, [r7, #28]
 801aa38:	9300      	str	r3, [sp, #0]
 801aa3a:	69bb      	ldr	r3, [r7, #24]
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	2140      	movs	r1, #64	; 0x40
 801aa40:	68f8      	ldr	r0, [r7, #12]
 801aa42:	f000 f831 	bl	801aaa8 <I2C_WaitOnFlagUntilTimeout>
 801aa46:	4603      	mov	r3, r0
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d001      	beq.n	801aa50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801aa4c:	2301      	movs	r3, #1
 801aa4e:	e000      	b.n	801aa52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801aa50:	2300      	movs	r3, #0
}
 801aa52:	4618      	mov	r0, r3
 801aa54:	3710      	adds	r7, #16
 801aa56:	46bd      	mov	sp, r7
 801aa58:	bd80      	pop	{r7, pc}
 801aa5a:	bf00      	nop
 801aa5c:	80002000 	.word	0x80002000

0801aa60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801aa60:	b480      	push	{r7}
 801aa62:	b083      	sub	sp, #12
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	699b      	ldr	r3, [r3, #24]
 801aa6e:	f003 0302 	and.w	r3, r3, #2
 801aa72:	2b02      	cmp	r3, #2
 801aa74:	d103      	bne.n	801aa7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	699b      	ldr	r3, [r3, #24]
 801aa84:	f003 0301 	and.w	r3, r3, #1
 801aa88:	2b01      	cmp	r3, #1
 801aa8a:	d007      	beq.n	801aa9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	699a      	ldr	r2, [r3, #24]
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f042 0201 	orr.w	r2, r2, #1
 801aa9a:	619a      	str	r2, [r3, #24]
  }
}
 801aa9c:	bf00      	nop
 801aa9e:	370c      	adds	r7, #12
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa6:	4770      	bx	lr

0801aaa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b084      	sub	sp, #16
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	60f8      	str	r0, [r7, #12]
 801aab0:	60b9      	str	r1, [r7, #8]
 801aab2:	603b      	str	r3, [r7, #0]
 801aab4:	4613      	mov	r3, r2
 801aab6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801aab8:	e022      	b.n	801ab00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801aaba:	683b      	ldr	r3, [r7, #0]
 801aabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aac0:	d01e      	beq.n	801ab00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801aac2:	f7fc ff3f 	bl	8017944 <HAL_GetTick>
 801aac6:	4602      	mov	r2, r0
 801aac8:	69bb      	ldr	r3, [r7, #24]
 801aaca:	1ad3      	subs	r3, r2, r3
 801aacc:	683a      	ldr	r2, [r7, #0]
 801aace:	429a      	cmp	r2, r3
 801aad0:	d302      	bcc.n	801aad8 <I2C_WaitOnFlagUntilTimeout+0x30>
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d113      	bne.n	801ab00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aadc:	f043 0220 	orr.w	r2, r3, #32
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	2220      	movs	r2, #32
 801aae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801aafc:	2301      	movs	r3, #1
 801aafe:	e00f      	b.n	801ab20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	699a      	ldr	r2, [r3, #24]
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	4013      	ands	r3, r2
 801ab0a:	68ba      	ldr	r2, [r7, #8]
 801ab0c:	429a      	cmp	r2, r3
 801ab0e:	bf0c      	ite	eq
 801ab10:	2301      	moveq	r3, #1
 801ab12:	2300      	movne	r3, #0
 801ab14:	b2db      	uxtb	r3, r3
 801ab16:	461a      	mov	r2, r3
 801ab18:	79fb      	ldrb	r3, [r7, #7]
 801ab1a:	429a      	cmp	r2, r3
 801ab1c:	d0cd      	beq.n	801aaba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801ab1e:	2300      	movs	r3, #0
}
 801ab20:	4618      	mov	r0, r3
 801ab22:	3710      	adds	r7, #16
 801ab24:	46bd      	mov	sp, r7
 801ab26:	bd80      	pop	{r7, pc}

0801ab28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b084      	sub	sp, #16
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	60f8      	str	r0, [r7, #12]
 801ab30:	60b9      	str	r1, [r7, #8]
 801ab32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801ab34:	e02c      	b.n	801ab90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801ab36:	687a      	ldr	r2, [r7, #4]
 801ab38:	68b9      	ldr	r1, [r7, #8]
 801ab3a:	68f8      	ldr	r0, [r7, #12]
 801ab3c:	f000 f870 	bl	801ac20 <I2C_IsErrorOccurred>
 801ab40:	4603      	mov	r3, r0
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d001      	beq.n	801ab4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801ab46:	2301      	movs	r3, #1
 801ab48:	e02a      	b.n	801aba0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ab4a:	68bb      	ldr	r3, [r7, #8]
 801ab4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab50:	d01e      	beq.n	801ab90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab52:	f7fc fef7 	bl	8017944 <HAL_GetTick>
 801ab56:	4602      	mov	r2, r0
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	1ad3      	subs	r3, r2, r3
 801ab5c:	68ba      	ldr	r2, [r7, #8]
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d302      	bcc.n	801ab68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d113      	bne.n	801ab90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab6c:	f043 0220 	orr.w	r2, r3, #32
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	2220      	movs	r2, #32
 801ab78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	2200      	movs	r2, #0
 801ab80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	2200      	movs	r2, #0
 801ab88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801ab8c:	2301      	movs	r3, #1
 801ab8e:	e007      	b.n	801aba0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	699b      	ldr	r3, [r3, #24]
 801ab96:	f003 0302 	and.w	r3, r3, #2
 801ab9a:	2b02      	cmp	r3, #2
 801ab9c:	d1cb      	bne.n	801ab36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801ab9e:	2300      	movs	r3, #0
}
 801aba0:	4618      	mov	r0, r3
 801aba2:	3710      	adds	r7, #16
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}

0801aba8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801aba8:	b580      	push	{r7, lr}
 801abaa:	b084      	sub	sp, #16
 801abac:	af00      	add	r7, sp, #0
 801abae:	60f8      	str	r0, [r7, #12]
 801abb0:	60b9      	str	r1, [r7, #8]
 801abb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801abb4:	e028      	b.n	801ac08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801abb6:	687a      	ldr	r2, [r7, #4]
 801abb8:	68b9      	ldr	r1, [r7, #8]
 801abba:	68f8      	ldr	r0, [r7, #12]
 801abbc:	f000 f830 	bl	801ac20 <I2C_IsErrorOccurred>
 801abc0:	4603      	mov	r3, r0
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d001      	beq.n	801abca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801abc6:	2301      	movs	r3, #1
 801abc8:	e026      	b.n	801ac18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801abca:	f7fc febb 	bl	8017944 <HAL_GetTick>
 801abce:	4602      	mov	r2, r0
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	1ad3      	subs	r3, r2, r3
 801abd4:	68ba      	ldr	r2, [r7, #8]
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d302      	bcc.n	801abe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801abda:	68bb      	ldr	r3, [r7, #8]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d113      	bne.n	801ac08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801abe4:	f043 0220 	orr.w	r2, r3, #32
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	2220      	movs	r2, #32
 801abf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	2200      	movs	r2, #0
 801abf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	2200      	movs	r2, #0
 801ac00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801ac04:	2301      	movs	r3, #1
 801ac06:	e007      	b.n	801ac18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	699b      	ldr	r3, [r3, #24]
 801ac0e:	f003 0320 	and.w	r3, r3, #32
 801ac12:	2b20      	cmp	r3, #32
 801ac14:	d1cf      	bne.n	801abb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801ac16:	2300      	movs	r3, #0
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3710      	adds	r7, #16
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b08a      	sub	sp, #40	; 0x28
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	60f8      	str	r0, [r7, #12]
 801ac28:	60b9      	str	r1, [r7, #8]
 801ac2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	699b      	ldr	r3, [r3, #24]
 801ac38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801ac42:	69bb      	ldr	r3, [r7, #24]
 801ac44:	f003 0310 	and.w	r3, r3, #16
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d068      	beq.n	801ad1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	2210      	movs	r2, #16
 801ac52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801ac54:	e049      	b.n	801acea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801ac56:	68bb      	ldr	r3, [r7, #8]
 801ac58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac5c:	d045      	beq.n	801acea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801ac5e:	f7fc fe71 	bl	8017944 <HAL_GetTick>
 801ac62:	4602      	mov	r2, r0
 801ac64:	69fb      	ldr	r3, [r7, #28]
 801ac66:	1ad3      	subs	r3, r2, r3
 801ac68:	68ba      	ldr	r2, [r7, #8]
 801ac6a:	429a      	cmp	r2, r3
 801ac6c:	d302      	bcc.n	801ac74 <I2C_IsErrorOccurred+0x54>
 801ac6e:	68bb      	ldr	r3, [r7, #8]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d13a      	bne.n	801acea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	685b      	ldr	r3, [r3, #4]
 801ac7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ac7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ac86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	699b      	ldr	r3, [r3, #24]
 801ac8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ac92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ac96:	d121      	bne.n	801acdc <I2C_IsErrorOccurred+0xbc>
 801ac98:	697b      	ldr	r3, [r7, #20]
 801ac9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ac9e:	d01d      	beq.n	801acdc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801aca0:	7cfb      	ldrb	r3, [r7, #19]
 801aca2:	2b20      	cmp	r3, #32
 801aca4:	d01a      	beq.n	801acdc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	685a      	ldr	r2, [r3, #4]
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801acb4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801acb6:	f7fc fe45 	bl	8017944 <HAL_GetTick>
 801acba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801acbc:	e00e      	b.n	801acdc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801acbe:	f7fc fe41 	bl	8017944 <HAL_GetTick>
 801acc2:	4602      	mov	r2, r0
 801acc4:	69fb      	ldr	r3, [r7, #28]
 801acc6:	1ad3      	subs	r3, r2, r3
 801acc8:	2b19      	cmp	r3, #25
 801acca:	d907      	bls.n	801acdc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 801accc:	6a3b      	ldr	r3, [r7, #32]
 801acce:	f043 0320 	orr.w	r3, r3, #32
 801acd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801acd4:	2301      	movs	r3, #1
 801acd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801acda:	e006      	b.n	801acea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	699b      	ldr	r3, [r3, #24]
 801ace2:	f003 0320 	and.w	r3, r3, #32
 801ace6:	2b20      	cmp	r3, #32
 801ace8:	d1e9      	bne.n	801acbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	699b      	ldr	r3, [r3, #24]
 801acf0:	f003 0320 	and.w	r3, r3, #32
 801acf4:	2b20      	cmp	r3, #32
 801acf6:	d003      	beq.n	801ad00 <I2C_IsErrorOccurred+0xe0>
 801acf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d0aa      	beq.n	801ac56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801ad00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d103      	bne.n	801ad10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	2220      	movs	r2, #32
 801ad0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801ad10:	6a3b      	ldr	r3, [r7, #32]
 801ad12:	f043 0304 	orr.w	r3, r3, #4
 801ad16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801ad18:	2301      	movs	r3, #1
 801ad1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	699b      	ldr	r3, [r3, #24]
 801ad24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801ad26:	69bb      	ldr	r3, [r7, #24]
 801ad28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d00b      	beq.n	801ad48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801ad30:	6a3b      	ldr	r3, [r7, #32]
 801ad32:	f043 0301 	orr.w	r3, r3, #1
 801ad36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ad40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ad42:	2301      	movs	r3, #1
 801ad44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801ad48:	69bb      	ldr	r3, [r7, #24]
 801ad4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d00b      	beq.n	801ad6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801ad52:	6a3b      	ldr	r3, [r7, #32]
 801ad54:	f043 0308 	orr.w	r3, r3, #8
 801ad58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ad62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ad64:	2301      	movs	r3, #1
 801ad66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801ad6a:	69bb      	ldr	r3, [r7, #24]
 801ad6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d00b      	beq.n	801ad8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801ad74:	6a3b      	ldr	r3, [r7, #32]
 801ad76:	f043 0302 	orr.w	r3, r3, #2
 801ad7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ad84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ad86:	2301      	movs	r3, #1
 801ad88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801ad8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d01c      	beq.n	801adce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801ad94:	68f8      	ldr	r0, [r7, #12]
 801ad96:	f7ff fe63 	bl	801aa60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	6859      	ldr	r1, [r3, #4]
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	681a      	ldr	r2, [r3, #0]
 801ada4:	4b0d      	ldr	r3, [pc, #52]	; (801addc <I2C_IsErrorOccurred+0x1bc>)
 801ada6:	400b      	ands	r3, r1
 801ada8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801adae:	6a3b      	ldr	r3, [r7, #32]
 801adb0:	431a      	orrs	r2, r3
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	2220      	movs	r2, #32
 801adba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	2200      	movs	r2, #0
 801adc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	2200      	movs	r2, #0
 801adca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801adce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801add2:	4618      	mov	r0, r3
 801add4:	3728      	adds	r7, #40	; 0x28
 801add6:	46bd      	mov	sp, r7
 801add8:	bd80      	pop	{r7, pc}
 801adda:	bf00      	nop
 801addc:	fe00e800 	.word	0xfe00e800

0801ade0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801ade0:	b480      	push	{r7}
 801ade2:	b087      	sub	sp, #28
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	60f8      	str	r0, [r7, #12]
 801ade8:	607b      	str	r3, [r7, #4]
 801adea:	460b      	mov	r3, r1
 801adec:	817b      	strh	r3, [r7, #10]
 801adee:	4613      	mov	r3, r2
 801adf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801adf2:	897b      	ldrh	r3, [r7, #10]
 801adf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801adf8:	7a7b      	ldrb	r3, [r7, #9]
 801adfa:	041b      	lsls	r3, r3, #16
 801adfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801ae00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801ae06:	6a3b      	ldr	r3, [r7, #32]
 801ae08:	4313      	orrs	r3, r2
 801ae0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ae0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	685a      	ldr	r2, [r3, #4]
 801ae16:	6a3b      	ldr	r3, [r7, #32]
 801ae18:	0d5b      	lsrs	r3, r3, #21
 801ae1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801ae1e:	4b08      	ldr	r3, [pc, #32]	; (801ae40 <I2C_TransferConfig+0x60>)
 801ae20:	430b      	orrs	r3, r1
 801ae22:	43db      	mvns	r3, r3
 801ae24:	ea02 0103 	and.w	r1, r2, r3
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	697a      	ldr	r2, [r7, #20]
 801ae2e:	430a      	orrs	r2, r1
 801ae30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801ae32:	bf00      	nop
 801ae34:	371c      	adds	r7, #28
 801ae36:	46bd      	mov	sp, r7
 801ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae3c:	4770      	bx	lr
 801ae3e:	bf00      	nop
 801ae40:	03ff63ff 	.word	0x03ff63ff

0801ae44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801ae44:	b480      	push	{r7}
 801ae46:	b083      	sub	sp, #12
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	6078      	str	r0, [r7, #4]
 801ae4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ae54:	b2db      	uxtb	r3, r3
 801ae56:	2b20      	cmp	r3, #32
 801ae58:	d138      	bne.n	801aecc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ae60:	2b01      	cmp	r3, #1
 801ae62:	d101      	bne.n	801ae68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801ae64:	2302      	movs	r3, #2
 801ae66:	e032      	b.n	801aece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	2201      	movs	r2, #1
 801ae6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	2224      	movs	r2, #36	; 0x24
 801ae74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	681a      	ldr	r2, [r3, #0]
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	f022 0201 	bic.w	r2, r2, #1
 801ae86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	681a      	ldr	r2, [r3, #0]
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ae96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	6819      	ldr	r1, [r3, #0]
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	683a      	ldr	r2, [r7, #0]
 801aea4:	430a      	orrs	r2, r1
 801aea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	681a      	ldr	r2, [r3, #0]
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	f042 0201 	orr.w	r2, r2, #1
 801aeb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	2220      	movs	r2, #32
 801aebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	2200      	movs	r2, #0
 801aec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801aec8:	2300      	movs	r3, #0
 801aeca:	e000      	b.n	801aece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801aecc:	2302      	movs	r3, #2
  }
}
 801aece:	4618      	mov	r0, r3
 801aed0:	370c      	adds	r7, #12
 801aed2:	46bd      	mov	sp, r7
 801aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed8:	4770      	bx	lr

0801aeda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801aeda:	b480      	push	{r7}
 801aedc:	b085      	sub	sp, #20
 801aede:	af00      	add	r7, sp, #0
 801aee0:	6078      	str	r0, [r7, #4]
 801aee2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aeea:	b2db      	uxtb	r3, r3
 801aeec:	2b20      	cmp	r3, #32
 801aeee:	d139      	bne.n	801af64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aef6:	2b01      	cmp	r3, #1
 801aef8:	d101      	bne.n	801aefe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801aefa:	2302      	movs	r3, #2
 801aefc:	e033      	b.n	801af66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	2201      	movs	r2, #1
 801af02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	2224      	movs	r2, #36	; 0x24
 801af0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	681a      	ldr	r2, [r3, #0]
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	f022 0201 	bic.w	r2, r2, #1
 801af1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801af26:	68fb      	ldr	r3, [r7, #12]
 801af28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801af2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801af2e:	683b      	ldr	r3, [r7, #0]
 801af30:	021b      	lsls	r3, r3, #8
 801af32:	68fa      	ldr	r2, [r7, #12]
 801af34:	4313      	orrs	r3, r2
 801af36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	68fa      	ldr	r2, [r7, #12]
 801af3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	681a      	ldr	r2, [r3, #0]
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	f042 0201 	orr.w	r2, r2, #1
 801af4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	2220      	movs	r2, #32
 801af54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	2200      	movs	r2, #0
 801af5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801af60:	2300      	movs	r3, #0
 801af62:	e000      	b.n	801af66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801af64:	2302      	movs	r3, #2
  }
}
 801af66:	4618      	mov	r0, r3
 801af68:	3714      	adds	r7, #20
 801af6a:	46bd      	mov	sp, r7
 801af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af70:	4770      	bx	lr

0801af72 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801af72:	b580      	push	{r7, lr}
 801af74:	b084      	sub	sp, #16
 801af76:	af00      	add	r7, sp, #0
 801af78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d101      	bne.n	801af84 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801af80:	2301      	movs	r3, #1
 801af82:	e041      	b.n	801b008 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801af8c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	f245 5255 	movw	r2, #21845	; 0x5555
 801af96:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	687a      	ldr	r2, [r7, #4]
 801af9e:	6852      	ldr	r2, [r2, #4]
 801afa0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	687a      	ldr	r2, [r7, #4]
 801afa8:	6892      	ldr	r2, [r2, #8]
 801afaa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801afac:	f7fc fcca 	bl	8017944 <HAL_GetTick>
 801afb0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801afb2:	e00f      	b.n	801afd4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801afb4:	f7fc fcc6 	bl	8017944 <HAL_GetTick>
 801afb8:	4602      	mov	r2, r0
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	1ad3      	subs	r3, r2, r3
 801afbe:	2b31      	cmp	r3, #49	; 0x31
 801afc0:	d908      	bls.n	801afd4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	68db      	ldr	r3, [r3, #12]
 801afc8:	f003 0307 	and.w	r3, r3, #7
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d001      	beq.n	801afd4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801afd0:	2303      	movs	r3, #3
 801afd2:	e019      	b.n	801b008 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	68db      	ldr	r3, [r3, #12]
 801afda:	f003 0307 	and.w	r3, r3, #7
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d1e8      	bne.n	801afb4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	691a      	ldr	r2, [r3, #16]
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	68db      	ldr	r3, [r3, #12]
 801afec:	429a      	cmp	r2, r3
 801afee:	d005      	beq.n	801affc <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	687a      	ldr	r2, [r7, #4]
 801aff6:	68d2      	ldr	r2, [r2, #12]
 801aff8:	611a      	str	r2, [r3, #16]
 801affa:	e004      	b.n	801b006 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801b004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b006:	2300      	movs	r3, #0
}
 801b008:	4618      	mov	r0, r3
 801b00a:	3710      	adds	r7, #16
 801b00c:	46bd      	mov	sp, r7
 801b00e:	bd80      	pop	{r7, pc}

0801b010 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801b010:	b480      	push	{r7}
 801b012:	b083      	sub	sp, #12
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801b020:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801b022:	2300      	movs	r3, #0
}
 801b024:	4618      	mov	r0, r3
 801b026:	370c      	adds	r7, #12
 801b028:	46bd      	mov	sp, r7
 801b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b02e:	4770      	bx	lr

0801b030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b086      	sub	sp, #24
 801b034:	af00      	add	r7, sp, #0
 801b036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801b038:	2300      	movs	r3, #0
 801b03a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d101      	bne.n	801b046 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801b042:	2301      	movs	r3, #1
 801b044:	e29b      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	f003 0301 	and.w	r3, r3, #1
 801b04e:	2b00      	cmp	r3, #0
 801b050:	f000 8087 	beq.w	801b162 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b054:	4b96      	ldr	r3, [pc, #600]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b056:	689b      	ldr	r3, [r3, #8]
 801b058:	f003 030c 	and.w	r3, r3, #12
 801b05c:	2b04      	cmp	r3, #4
 801b05e:	d00c      	beq.n	801b07a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801b060:	4b93      	ldr	r3, [pc, #588]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b062:	689b      	ldr	r3, [r3, #8]
 801b064:	f003 030c 	and.w	r3, r3, #12
 801b068:	2b08      	cmp	r3, #8
 801b06a:	d112      	bne.n	801b092 <HAL_RCC_OscConfig+0x62>
 801b06c:	4b90      	ldr	r3, [pc, #576]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b06e:	685b      	ldr	r3, [r3, #4]
 801b070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b078:	d10b      	bne.n	801b092 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b07a:	4b8d      	ldr	r3, [pc, #564]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b082:	2b00      	cmp	r3, #0
 801b084:	d06c      	beq.n	801b160 <HAL_RCC_OscConfig+0x130>
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	685b      	ldr	r3, [r3, #4]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d168      	bne.n	801b160 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801b08e:	2301      	movs	r3, #1
 801b090:	e275      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	685b      	ldr	r3, [r3, #4]
 801b096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b09a:	d106      	bne.n	801b0aa <HAL_RCC_OscConfig+0x7a>
 801b09c:	4b84      	ldr	r3, [pc, #528]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	4a83      	ldr	r2, [pc, #524]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b0a6:	6013      	str	r3, [r2, #0]
 801b0a8:	e02e      	b.n	801b108 <HAL_RCC_OscConfig+0xd8>
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d10c      	bne.n	801b0cc <HAL_RCC_OscConfig+0x9c>
 801b0b2:	4b7f      	ldr	r3, [pc, #508]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	4a7e      	ldr	r2, [pc, #504]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b0bc:	6013      	str	r3, [r2, #0]
 801b0be:	4b7c      	ldr	r3, [pc, #496]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	4a7b      	ldr	r2, [pc, #492]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b0c8:	6013      	str	r3, [r2, #0]
 801b0ca:	e01d      	b.n	801b108 <HAL_RCC_OscConfig+0xd8>
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	685b      	ldr	r3, [r3, #4]
 801b0d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b0d4:	d10c      	bne.n	801b0f0 <HAL_RCC_OscConfig+0xc0>
 801b0d6:	4b76      	ldr	r3, [pc, #472]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	4a75      	ldr	r2, [pc, #468]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b0e0:	6013      	str	r3, [r2, #0]
 801b0e2:	4b73      	ldr	r3, [pc, #460]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	4a72      	ldr	r2, [pc, #456]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b0ec:	6013      	str	r3, [r2, #0]
 801b0ee:	e00b      	b.n	801b108 <HAL_RCC_OscConfig+0xd8>
 801b0f0:	4b6f      	ldr	r3, [pc, #444]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	4a6e      	ldr	r2, [pc, #440]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b0fa:	6013      	str	r3, [r2, #0]
 801b0fc:	4b6c      	ldr	r3, [pc, #432]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	4a6b      	ldr	r2, [pc, #428]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	685b      	ldr	r3, [r3, #4]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d013      	beq.n	801b138 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b110:	f7fc fc18 	bl	8017944 <HAL_GetTick>
 801b114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b116:	e008      	b.n	801b12a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b118:	f7fc fc14 	bl	8017944 <HAL_GetTick>
 801b11c:	4602      	mov	r2, r0
 801b11e:	693b      	ldr	r3, [r7, #16]
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	2b64      	cmp	r3, #100	; 0x64
 801b124:	d901      	bls.n	801b12a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b126:	2303      	movs	r3, #3
 801b128:	e229      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b12a:	4b61      	ldr	r3, [pc, #388]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b132:	2b00      	cmp	r3, #0
 801b134:	d0f0      	beq.n	801b118 <HAL_RCC_OscConfig+0xe8>
 801b136:	e014      	b.n	801b162 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b138:	f7fc fc04 	bl	8017944 <HAL_GetTick>
 801b13c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b13e:	e008      	b.n	801b152 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b140:	f7fc fc00 	bl	8017944 <HAL_GetTick>
 801b144:	4602      	mov	r2, r0
 801b146:	693b      	ldr	r3, [r7, #16]
 801b148:	1ad3      	subs	r3, r2, r3
 801b14a:	2b64      	cmp	r3, #100	; 0x64
 801b14c:	d901      	bls.n	801b152 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801b14e:	2303      	movs	r3, #3
 801b150:	e215      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801b152:	4b57      	ldr	r3, [pc, #348]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d1f0      	bne.n	801b140 <HAL_RCC_OscConfig+0x110>
 801b15e:	e000      	b.n	801b162 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	f003 0302 	and.w	r3, r3, #2
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d069      	beq.n	801b242 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b16e:	4b50      	ldr	r3, [pc, #320]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b170:	689b      	ldr	r3, [r3, #8]
 801b172:	f003 030c 	and.w	r3, r3, #12
 801b176:	2b00      	cmp	r3, #0
 801b178:	d00b      	beq.n	801b192 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801b17a:	4b4d      	ldr	r3, [pc, #308]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b17c:	689b      	ldr	r3, [r3, #8]
 801b17e:	f003 030c 	and.w	r3, r3, #12
 801b182:	2b08      	cmp	r3, #8
 801b184:	d11c      	bne.n	801b1c0 <HAL_RCC_OscConfig+0x190>
 801b186:	4b4a      	ldr	r3, [pc, #296]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b188:	685b      	ldr	r3, [r3, #4]
 801b18a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d116      	bne.n	801b1c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b192:	4b47      	ldr	r3, [pc, #284]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	f003 0302 	and.w	r3, r3, #2
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d005      	beq.n	801b1aa <HAL_RCC_OscConfig+0x17a>
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	68db      	ldr	r3, [r3, #12]
 801b1a2:	2b01      	cmp	r3, #1
 801b1a4:	d001      	beq.n	801b1aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b1a6:	2301      	movs	r3, #1
 801b1a8:	e1e9      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b1aa:	4b41      	ldr	r3, [pc, #260]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	691b      	ldr	r3, [r3, #16]
 801b1b6:	00db      	lsls	r3, r3, #3
 801b1b8:	493d      	ldr	r1, [pc, #244]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b1ba:	4313      	orrs	r3, r2
 801b1bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801b1be:	e040      	b.n	801b242 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d023      	beq.n	801b210 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801b1c8:	4b39      	ldr	r3, [pc, #228]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	4a38      	ldr	r2, [pc, #224]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b1ce:	f043 0301 	orr.w	r3, r3, #1
 801b1d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b1d4:	f7fc fbb6 	bl	8017944 <HAL_GetTick>
 801b1d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b1da:	e008      	b.n	801b1ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b1dc:	f7fc fbb2 	bl	8017944 <HAL_GetTick>
 801b1e0:	4602      	mov	r2, r0
 801b1e2:	693b      	ldr	r3, [r7, #16]
 801b1e4:	1ad3      	subs	r3, r2, r3
 801b1e6:	2b02      	cmp	r3, #2
 801b1e8:	d901      	bls.n	801b1ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801b1ea:	2303      	movs	r3, #3
 801b1ec:	e1c7      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b1ee:	4b30      	ldr	r3, [pc, #192]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	f003 0302 	and.w	r3, r3, #2
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d0f0      	beq.n	801b1dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b1fa:	4b2d      	ldr	r3, [pc, #180]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	691b      	ldr	r3, [r3, #16]
 801b206:	00db      	lsls	r3, r3, #3
 801b208:	4929      	ldr	r1, [pc, #164]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b20a:	4313      	orrs	r3, r2
 801b20c:	600b      	str	r3, [r1, #0]
 801b20e:	e018      	b.n	801b242 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b210:	4b27      	ldr	r3, [pc, #156]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	4a26      	ldr	r2, [pc, #152]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b216:	f023 0301 	bic.w	r3, r3, #1
 801b21a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b21c:	f7fc fb92 	bl	8017944 <HAL_GetTick>
 801b220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b222:	e008      	b.n	801b236 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b224:	f7fc fb8e 	bl	8017944 <HAL_GetTick>
 801b228:	4602      	mov	r2, r0
 801b22a:	693b      	ldr	r3, [r7, #16]
 801b22c:	1ad3      	subs	r3, r2, r3
 801b22e:	2b02      	cmp	r3, #2
 801b230:	d901      	bls.n	801b236 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801b232:	2303      	movs	r3, #3
 801b234:	e1a3      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801b236:	4b1e      	ldr	r3, [pc, #120]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	f003 0302 	and.w	r3, r3, #2
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d1f0      	bne.n	801b224 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	f003 0308 	and.w	r3, r3, #8
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d038      	beq.n	801b2c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	695b      	ldr	r3, [r3, #20]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d019      	beq.n	801b28a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b256:	4b16      	ldr	r3, [pc, #88]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b25a:	4a15      	ldr	r2, [pc, #84]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b25c:	f043 0301 	orr.w	r3, r3, #1
 801b260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b262:	f7fc fb6f 	bl	8017944 <HAL_GetTick>
 801b266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b268:	e008      	b.n	801b27c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b26a:	f7fc fb6b 	bl	8017944 <HAL_GetTick>
 801b26e:	4602      	mov	r2, r0
 801b270:	693b      	ldr	r3, [r7, #16]
 801b272:	1ad3      	subs	r3, r2, r3
 801b274:	2b02      	cmp	r3, #2
 801b276:	d901      	bls.n	801b27c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801b278:	2303      	movs	r3, #3
 801b27a:	e180      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801b27c:	4b0c      	ldr	r3, [pc, #48]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b27e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b280:	f003 0302 	and.w	r3, r3, #2
 801b284:	2b00      	cmp	r3, #0
 801b286:	d0f0      	beq.n	801b26a <HAL_RCC_OscConfig+0x23a>
 801b288:	e01a      	b.n	801b2c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b28a:	4b09      	ldr	r3, [pc, #36]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b28e:	4a08      	ldr	r2, [pc, #32]	; (801b2b0 <HAL_RCC_OscConfig+0x280>)
 801b290:	f023 0301 	bic.w	r3, r3, #1
 801b294:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b296:	f7fc fb55 	bl	8017944 <HAL_GetTick>
 801b29a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b29c:	e00a      	b.n	801b2b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b29e:	f7fc fb51 	bl	8017944 <HAL_GetTick>
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	693b      	ldr	r3, [r7, #16]
 801b2a6:	1ad3      	subs	r3, r2, r3
 801b2a8:	2b02      	cmp	r3, #2
 801b2aa:	d903      	bls.n	801b2b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801b2ac:	2303      	movs	r3, #3
 801b2ae:	e166      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
 801b2b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801b2b4:	4b92      	ldr	r3, [pc, #584]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2b8:	f003 0302 	and.w	r3, r3, #2
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d1ee      	bne.n	801b29e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	f003 0304 	and.w	r3, r3, #4
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	f000 80a4 	beq.w	801b416 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b2ce:	4b8c      	ldr	r3, [pc, #560]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d10d      	bne.n	801b2f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801b2da:	4b89      	ldr	r3, [pc, #548]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2de:	4a88      	ldr	r2, [pc, #544]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b2e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b2e4:	6413      	str	r3, [r2, #64]	; 0x40
 801b2e6:	4b86      	ldr	r3, [pc, #536]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b2ee:	60bb      	str	r3, [r7, #8]
 801b2f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801b2f2:	2301      	movs	r3, #1
 801b2f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b2f6:	4b83      	ldr	r3, [pc, #524]	; (801b504 <HAL_RCC_OscConfig+0x4d4>)
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d118      	bne.n	801b334 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801b302:	4b80      	ldr	r3, [pc, #512]	; (801b504 <HAL_RCC_OscConfig+0x4d4>)
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	4a7f      	ldr	r2, [pc, #508]	; (801b504 <HAL_RCC_OscConfig+0x4d4>)
 801b308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b30c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b30e:	f7fc fb19 	bl	8017944 <HAL_GetTick>
 801b312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b314:	e008      	b.n	801b328 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b316:	f7fc fb15 	bl	8017944 <HAL_GetTick>
 801b31a:	4602      	mov	r2, r0
 801b31c:	693b      	ldr	r3, [r7, #16]
 801b31e:	1ad3      	subs	r3, r2, r3
 801b320:	2b64      	cmp	r3, #100	; 0x64
 801b322:	d901      	bls.n	801b328 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801b324:	2303      	movs	r3, #3
 801b326:	e12a      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b328:	4b76      	ldr	r3, [pc, #472]	; (801b504 <HAL_RCC_OscConfig+0x4d4>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b330:	2b00      	cmp	r3, #0
 801b332:	d0f0      	beq.n	801b316 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	689b      	ldr	r3, [r3, #8]
 801b338:	2b01      	cmp	r3, #1
 801b33a:	d106      	bne.n	801b34a <HAL_RCC_OscConfig+0x31a>
 801b33c:	4b70      	ldr	r3, [pc, #448]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b340:	4a6f      	ldr	r2, [pc, #444]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b342:	f043 0301 	orr.w	r3, r3, #1
 801b346:	6713      	str	r3, [r2, #112]	; 0x70
 801b348:	e02d      	b.n	801b3a6 <HAL_RCC_OscConfig+0x376>
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	689b      	ldr	r3, [r3, #8]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d10c      	bne.n	801b36c <HAL_RCC_OscConfig+0x33c>
 801b352:	4b6b      	ldr	r3, [pc, #428]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b356:	4a6a      	ldr	r2, [pc, #424]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b358:	f023 0301 	bic.w	r3, r3, #1
 801b35c:	6713      	str	r3, [r2, #112]	; 0x70
 801b35e:	4b68      	ldr	r3, [pc, #416]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b362:	4a67      	ldr	r2, [pc, #412]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b364:	f023 0304 	bic.w	r3, r3, #4
 801b368:	6713      	str	r3, [r2, #112]	; 0x70
 801b36a:	e01c      	b.n	801b3a6 <HAL_RCC_OscConfig+0x376>
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	689b      	ldr	r3, [r3, #8]
 801b370:	2b05      	cmp	r3, #5
 801b372:	d10c      	bne.n	801b38e <HAL_RCC_OscConfig+0x35e>
 801b374:	4b62      	ldr	r3, [pc, #392]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b378:	4a61      	ldr	r2, [pc, #388]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b37a:	f043 0304 	orr.w	r3, r3, #4
 801b37e:	6713      	str	r3, [r2, #112]	; 0x70
 801b380:	4b5f      	ldr	r3, [pc, #380]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b384:	4a5e      	ldr	r2, [pc, #376]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b386:	f043 0301 	orr.w	r3, r3, #1
 801b38a:	6713      	str	r3, [r2, #112]	; 0x70
 801b38c:	e00b      	b.n	801b3a6 <HAL_RCC_OscConfig+0x376>
 801b38e:	4b5c      	ldr	r3, [pc, #368]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b392:	4a5b      	ldr	r2, [pc, #364]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b394:	f023 0301 	bic.w	r3, r3, #1
 801b398:	6713      	str	r3, [r2, #112]	; 0x70
 801b39a:	4b59      	ldr	r3, [pc, #356]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b39e:	4a58      	ldr	r2, [pc, #352]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b3a0:	f023 0304 	bic.w	r3, r3, #4
 801b3a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	689b      	ldr	r3, [r3, #8]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d015      	beq.n	801b3da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b3ae:	f7fc fac9 	bl	8017944 <HAL_GetTick>
 801b3b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b3b4:	e00a      	b.n	801b3cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b3b6:	f7fc fac5 	bl	8017944 <HAL_GetTick>
 801b3ba:	4602      	mov	r2, r0
 801b3bc:	693b      	ldr	r3, [r7, #16]
 801b3be:	1ad3      	subs	r3, r2, r3
 801b3c0:	f241 3288 	movw	r2, #5000	; 0x1388
 801b3c4:	4293      	cmp	r3, r2
 801b3c6:	d901      	bls.n	801b3cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801b3c8:	2303      	movs	r3, #3
 801b3ca:	e0d8      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b3cc:	4b4c      	ldr	r3, [pc, #304]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3d0:	f003 0302 	and.w	r3, r3, #2
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d0ee      	beq.n	801b3b6 <HAL_RCC_OscConfig+0x386>
 801b3d8:	e014      	b.n	801b404 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b3da:	f7fc fab3 	bl	8017944 <HAL_GetTick>
 801b3de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801b3e0:	e00a      	b.n	801b3f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b3e2:	f7fc faaf 	bl	8017944 <HAL_GetTick>
 801b3e6:	4602      	mov	r2, r0
 801b3e8:	693b      	ldr	r3, [r7, #16]
 801b3ea:	1ad3      	subs	r3, r2, r3
 801b3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 801b3f0:	4293      	cmp	r3, r2
 801b3f2:	d901      	bls.n	801b3f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801b3f4:	2303      	movs	r3, #3
 801b3f6:	e0c2      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801b3f8:	4b41      	ldr	r3, [pc, #260]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3fc:	f003 0302 	and.w	r3, r3, #2
 801b400:	2b00      	cmp	r3, #0
 801b402:	d1ee      	bne.n	801b3e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b404:	7dfb      	ldrb	r3, [r7, #23]
 801b406:	2b01      	cmp	r3, #1
 801b408:	d105      	bne.n	801b416 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b40a:	4b3d      	ldr	r3, [pc, #244]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b40e:	4a3c      	ldr	r2, [pc, #240]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	699b      	ldr	r3, [r3, #24]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	f000 80ae 	beq.w	801b57c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b420:	4b37      	ldr	r3, [pc, #220]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b422:	689b      	ldr	r3, [r3, #8]
 801b424:	f003 030c 	and.w	r3, r3, #12
 801b428:	2b08      	cmp	r3, #8
 801b42a:	d06d      	beq.n	801b508 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	699b      	ldr	r3, [r3, #24]
 801b430:	2b02      	cmp	r3, #2
 801b432:	d14b      	bne.n	801b4cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b434:	4b32      	ldr	r3, [pc, #200]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	4a31      	ldr	r2, [pc, #196]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b43a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b43e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b440:	f7fc fa80 	bl	8017944 <HAL_GetTick>
 801b444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b446:	e008      	b.n	801b45a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b448:	f7fc fa7c 	bl	8017944 <HAL_GetTick>
 801b44c:	4602      	mov	r2, r0
 801b44e:	693b      	ldr	r3, [r7, #16]
 801b450:	1ad3      	subs	r3, r2, r3
 801b452:	2b02      	cmp	r3, #2
 801b454:	d901      	bls.n	801b45a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801b456:	2303      	movs	r3, #3
 801b458:	e091      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b45a:	4b29      	ldr	r3, [pc, #164]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b462:	2b00      	cmp	r3, #0
 801b464:	d1f0      	bne.n	801b448 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	69da      	ldr	r2, [r3, #28]
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6a1b      	ldr	r3, [r3, #32]
 801b46e:	431a      	orrs	r2, r3
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b474:	019b      	lsls	r3, r3, #6
 801b476:	431a      	orrs	r2, r3
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b47c:	085b      	lsrs	r3, r3, #1
 801b47e:	3b01      	subs	r3, #1
 801b480:	041b      	lsls	r3, r3, #16
 801b482:	431a      	orrs	r2, r3
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b488:	061b      	lsls	r3, r3, #24
 801b48a:	431a      	orrs	r2, r3
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b490:	071b      	lsls	r3, r3, #28
 801b492:	491b      	ldr	r1, [pc, #108]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b494:	4313      	orrs	r3, r2
 801b496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b498:	4b19      	ldr	r3, [pc, #100]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	4a18      	ldr	r2, [pc, #96]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b49e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b4a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4a4:	f7fc fa4e 	bl	8017944 <HAL_GetTick>
 801b4a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b4aa:	e008      	b.n	801b4be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b4ac:	f7fc fa4a 	bl	8017944 <HAL_GetTick>
 801b4b0:	4602      	mov	r2, r0
 801b4b2:	693b      	ldr	r3, [r7, #16]
 801b4b4:	1ad3      	subs	r3, r2, r3
 801b4b6:	2b02      	cmp	r3, #2
 801b4b8:	d901      	bls.n	801b4be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801b4ba:	2303      	movs	r3, #3
 801b4bc:	e05f      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b4be:	4b10      	ldr	r3, [pc, #64]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d0f0      	beq.n	801b4ac <HAL_RCC_OscConfig+0x47c>
 801b4ca:	e057      	b.n	801b57c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b4cc:	4b0c      	ldr	r3, [pc, #48]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	4a0b      	ldr	r2, [pc, #44]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b4d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b4d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4d8:	f7fc fa34 	bl	8017944 <HAL_GetTick>
 801b4dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b4de:	e008      	b.n	801b4f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b4e0:	f7fc fa30 	bl	8017944 <HAL_GetTick>
 801b4e4:	4602      	mov	r2, r0
 801b4e6:	693b      	ldr	r3, [r7, #16]
 801b4e8:	1ad3      	subs	r3, r2, r3
 801b4ea:	2b02      	cmp	r3, #2
 801b4ec:	d901      	bls.n	801b4f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801b4ee:	2303      	movs	r3, #3
 801b4f0:	e045      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801b4f2:	4b03      	ldr	r3, [pc, #12]	; (801b500 <HAL_RCC_OscConfig+0x4d0>)
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d1f0      	bne.n	801b4e0 <HAL_RCC_OscConfig+0x4b0>
 801b4fe:	e03d      	b.n	801b57c <HAL_RCC_OscConfig+0x54c>
 801b500:	40023800 	.word	0x40023800
 801b504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801b508:	4b1f      	ldr	r3, [pc, #124]	; (801b588 <HAL_RCC_OscConfig+0x558>)
 801b50a:	685b      	ldr	r3, [r3, #4]
 801b50c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	699b      	ldr	r3, [r3, #24]
 801b512:	2b01      	cmp	r3, #1
 801b514:	d030      	beq.n	801b578 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b520:	429a      	cmp	r2, r3
 801b522:	d129      	bne.n	801b578 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b52e:	429a      	cmp	r2, r3
 801b530:	d122      	bne.n	801b578 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801b532:	68fa      	ldr	r2, [r7, #12]
 801b534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801b538:	4013      	ands	r3, r2
 801b53a:	687a      	ldr	r2, [r7, #4]
 801b53c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b53e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801b540:	4293      	cmp	r3, r2
 801b542:	d119      	bne.n	801b578 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b54e:	085b      	lsrs	r3, r3, #1
 801b550:	3b01      	subs	r3, #1
 801b552:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801b554:	429a      	cmp	r2, r3
 801b556:	d10f      	bne.n	801b578 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b562:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801b564:	429a      	cmp	r2, r3
 801b566:	d107      	bne.n	801b578 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b572:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b574:	429a      	cmp	r2, r3
 801b576:	d001      	beq.n	801b57c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801b578:	2301      	movs	r3, #1
 801b57a:	e000      	b.n	801b57e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801b57c:	2300      	movs	r3, #0
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3718      	adds	r7, #24
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}
 801b586:	bf00      	nop
 801b588:	40023800 	.word	0x40023800

0801b58c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	b084      	sub	sp, #16
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
 801b594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801b596:	2300      	movs	r3, #0
 801b598:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d101      	bne.n	801b5a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801b5a0:	2301      	movs	r3, #1
 801b5a2:	e0d0      	b.n	801b746 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b5a4:	4b6a      	ldr	r3, [pc, #424]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	f003 030f 	and.w	r3, r3, #15
 801b5ac:	683a      	ldr	r2, [r7, #0]
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	d910      	bls.n	801b5d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b5b2:	4b67      	ldr	r3, [pc, #412]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	f023 020f 	bic.w	r2, r3, #15
 801b5ba:	4965      	ldr	r1, [pc, #404]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b5bc:	683b      	ldr	r3, [r7, #0]
 801b5be:	4313      	orrs	r3, r2
 801b5c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b5c2:	4b63      	ldr	r3, [pc, #396]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	f003 030f 	and.w	r3, r3, #15
 801b5ca:	683a      	ldr	r2, [r7, #0]
 801b5cc:	429a      	cmp	r2, r3
 801b5ce:	d001      	beq.n	801b5d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801b5d0:	2301      	movs	r3, #1
 801b5d2:	e0b8      	b.n	801b746 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	f003 0302 	and.w	r3, r3, #2
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d020      	beq.n	801b622 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	f003 0304 	and.w	r3, r3, #4
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d005      	beq.n	801b5f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b5ec:	4b59      	ldr	r3, [pc, #356]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b5ee:	689b      	ldr	r3, [r3, #8]
 801b5f0:	4a58      	ldr	r2, [pc, #352]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b5f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b5f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	f003 0308 	and.w	r3, r3, #8
 801b600:	2b00      	cmp	r3, #0
 801b602:	d005      	beq.n	801b610 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b604:	4b53      	ldr	r3, [pc, #332]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b606:	689b      	ldr	r3, [r3, #8]
 801b608:	4a52      	ldr	r2, [pc, #328]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b60a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b60e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b610:	4b50      	ldr	r3, [pc, #320]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b612:	689b      	ldr	r3, [r3, #8]
 801b614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	689b      	ldr	r3, [r3, #8]
 801b61c:	494d      	ldr	r1, [pc, #308]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b61e:	4313      	orrs	r3, r2
 801b620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	f003 0301 	and.w	r3, r3, #1
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d040      	beq.n	801b6b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	685b      	ldr	r3, [r3, #4]
 801b632:	2b01      	cmp	r3, #1
 801b634:	d107      	bne.n	801b646 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b636:	4b47      	ldr	r3, [pc, #284]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d115      	bne.n	801b66e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801b642:	2301      	movs	r3, #1
 801b644:	e07f      	b.n	801b746 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	685b      	ldr	r3, [r3, #4]
 801b64a:	2b02      	cmp	r3, #2
 801b64c:	d107      	bne.n	801b65e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b64e:	4b41      	ldr	r3, [pc, #260]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b656:	2b00      	cmp	r3, #0
 801b658:	d109      	bne.n	801b66e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801b65a:	2301      	movs	r3, #1
 801b65c:	e073      	b.n	801b746 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b65e:	4b3d      	ldr	r3, [pc, #244]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	f003 0302 	and.w	r3, r3, #2
 801b666:	2b00      	cmp	r3, #0
 801b668:	d101      	bne.n	801b66e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801b66a:	2301      	movs	r3, #1
 801b66c:	e06b      	b.n	801b746 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b66e:	4b39      	ldr	r3, [pc, #228]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b670:	689b      	ldr	r3, [r3, #8]
 801b672:	f023 0203 	bic.w	r2, r3, #3
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	685b      	ldr	r3, [r3, #4]
 801b67a:	4936      	ldr	r1, [pc, #216]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b67c:	4313      	orrs	r3, r2
 801b67e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b680:	f7fc f960 	bl	8017944 <HAL_GetTick>
 801b684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b686:	e00a      	b.n	801b69e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b688:	f7fc f95c 	bl	8017944 <HAL_GetTick>
 801b68c:	4602      	mov	r2, r0
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	1ad3      	subs	r3, r2, r3
 801b692:	f241 3288 	movw	r2, #5000	; 0x1388
 801b696:	4293      	cmp	r3, r2
 801b698:	d901      	bls.n	801b69e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801b69a:	2303      	movs	r3, #3
 801b69c:	e053      	b.n	801b746 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b69e:	4b2d      	ldr	r3, [pc, #180]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b6a0:	689b      	ldr	r3, [r3, #8]
 801b6a2:	f003 020c 	and.w	r2, r3, #12
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	685b      	ldr	r3, [r3, #4]
 801b6aa:	009b      	lsls	r3, r3, #2
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	d1eb      	bne.n	801b688 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b6b0:	4b27      	ldr	r3, [pc, #156]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	f003 030f 	and.w	r3, r3, #15
 801b6b8:	683a      	ldr	r2, [r7, #0]
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	d210      	bcs.n	801b6e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b6be:	4b24      	ldr	r3, [pc, #144]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	f023 020f 	bic.w	r2, r3, #15
 801b6c6:	4922      	ldr	r1, [pc, #136]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b6c8:	683b      	ldr	r3, [r7, #0]
 801b6ca:	4313      	orrs	r3, r2
 801b6cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b6ce:	4b20      	ldr	r3, [pc, #128]	; (801b750 <HAL_RCC_ClockConfig+0x1c4>)
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	f003 030f 	and.w	r3, r3, #15
 801b6d6:	683a      	ldr	r2, [r7, #0]
 801b6d8:	429a      	cmp	r2, r3
 801b6da:	d001      	beq.n	801b6e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801b6dc:	2301      	movs	r3, #1
 801b6de:	e032      	b.n	801b746 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	f003 0304 	and.w	r3, r3, #4
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d008      	beq.n	801b6fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b6ec:	4b19      	ldr	r3, [pc, #100]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b6ee:	689b      	ldr	r3, [r3, #8]
 801b6f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	68db      	ldr	r3, [r3, #12]
 801b6f8:	4916      	ldr	r1, [pc, #88]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b6fa:	4313      	orrs	r3, r2
 801b6fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	f003 0308 	and.w	r3, r3, #8
 801b706:	2b00      	cmp	r3, #0
 801b708:	d009      	beq.n	801b71e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801b70a:	4b12      	ldr	r3, [pc, #72]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b70c:	689b      	ldr	r3, [r3, #8]
 801b70e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	691b      	ldr	r3, [r3, #16]
 801b716:	00db      	lsls	r3, r3, #3
 801b718:	490e      	ldr	r1, [pc, #56]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b71a:	4313      	orrs	r3, r2
 801b71c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801b71e:	f000 f821 	bl	801b764 <HAL_RCC_GetSysClockFreq>
 801b722:	4602      	mov	r2, r0
 801b724:	4b0b      	ldr	r3, [pc, #44]	; (801b754 <HAL_RCC_ClockConfig+0x1c8>)
 801b726:	689b      	ldr	r3, [r3, #8]
 801b728:	091b      	lsrs	r3, r3, #4
 801b72a:	f003 030f 	and.w	r3, r3, #15
 801b72e:	490a      	ldr	r1, [pc, #40]	; (801b758 <HAL_RCC_ClockConfig+0x1cc>)
 801b730:	5ccb      	ldrb	r3, [r1, r3]
 801b732:	fa22 f303 	lsr.w	r3, r2, r3
 801b736:	4a09      	ldr	r2, [pc, #36]	; (801b75c <HAL_RCC_ClockConfig+0x1d0>)
 801b738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801b73a:	4b09      	ldr	r3, [pc, #36]	; (801b760 <HAL_RCC_ClockConfig+0x1d4>)
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	4618      	mov	r0, r3
 801b740:	f7fc f8bc 	bl	80178bc <HAL_InitTick>

  return HAL_OK;
 801b744:	2300      	movs	r3, #0
}
 801b746:	4618      	mov	r0, r3
 801b748:	3710      	adds	r7, #16
 801b74a:	46bd      	mov	sp, r7
 801b74c:	bd80      	pop	{r7, pc}
 801b74e:	bf00      	nop
 801b750:	40023c00 	.word	0x40023c00
 801b754:	40023800 	.word	0x40023800
 801b758:	0802b700 	.word	0x0802b700
 801b75c:	2000011c 	.word	0x2000011c
 801b760:	20000120 	.word	0x20000120

0801b764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b768:	b090      	sub	sp, #64	; 0x40
 801b76a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801b76c:	2300      	movs	r3, #0
 801b76e:	637b      	str	r3, [r7, #52]	; 0x34
 801b770:	2300      	movs	r3, #0
 801b772:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b774:	2300      	movs	r3, #0
 801b776:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801b778:	2300      	movs	r3, #0
 801b77a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b77c:	4b59      	ldr	r3, [pc, #356]	; (801b8e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801b77e:	689b      	ldr	r3, [r3, #8]
 801b780:	f003 030c 	and.w	r3, r3, #12
 801b784:	2b08      	cmp	r3, #8
 801b786:	d00d      	beq.n	801b7a4 <HAL_RCC_GetSysClockFreq+0x40>
 801b788:	2b08      	cmp	r3, #8
 801b78a:	f200 80a1 	bhi.w	801b8d0 <HAL_RCC_GetSysClockFreq+0x16c>
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d002      	beq.n	801b798 <HAL_RCC_GetSysClockFreq+0x34>
 801b792:	2b04      	cmp	r3, #4
 801b794:	d003      	beq.n	801b79e <HAL_RCC_GetSysClockFreq+0x3a>
 801b796:	e09b      	b.n	801b8d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b798:	4b53      	ldr	r3, [pc, #332]	; (801b8e8 <HAL_RCC_GetSysClockFreq+0x184>)
 801b79a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801b79c:	e09b      	b.n	801b8d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b79e:	4b53      	ldr	r3, [pc, #332]	; (801b8ec <HAL_RCC_GetSysClockFreq+0x188>)
 801b7a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801b7a2:	e098      	b.n	801b8d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b7a4:	4b4f      	ldr	r3, [pc, #316]	; (801b8e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801b7a6:	685b      	ldr	r3, [r3, #4]
 801b7a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b7ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801b7ae:	4b4d      	ldr	r3, [pc, #308]	; (801b8e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801b7b0:	685b      	ldr	r3, [r3, #4]
 801b7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d028      	beq.n	801b80c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b7ba:	4b4a      	ldr	r3, [pc, #296]	; (801b8e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801b7bc:	685b      	ldr	r3, [r3, #4]
 801b7be:	099b      	lsrs	r3, r3, #6
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	623b      	str	r3, [r7, #32]
 801b7c4:	627a      	str	r2, [r7, #36]	; 0x24
 801b7c6:	6a3b      	ldr	r3, [r7, #32]
 801b7c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801b7cc:	2100      	movs	r1, #0
 801b7ce:	4b47      	ldr	r3, [pc, #284]	; (801b8ec <HAL_RCC_GetSysClockFreq+0x188>)
 801b7d0:	fb03 f201 	mul.w	r2, r3, r1
 801b7d4:	2300      	movs	r3, #0
 801b7d6:	fb00 f303 	mul.w	r3, r0, r3
 801b7da:	4413      	add	r3, r2
 801b7dc:	4a43      	ldr	r2, [pc, #268]	; (801b8ec <HAL_RCC_GetSysClockFreq+0x188>)
 801b7de:	fba0 1202 	umull	r1, r2, r0, r2
 801b7e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b7e4:	460a      	mov	r2, r1
 801b7e6:	62ba      	str	r2, [r7, #40]	; 0x28
 801b7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b7ea:	4413      	add	r3, r2
 801b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	61bb      	str	r3, [r7, #24]
 801b7f4:	61fa      	str	r2, [r7, #28]
 801b7f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b7fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b7fe:	f7e4 fd87 	bl	8000310 <__aeabi_uldivmod>
 801b802:	4602      	mov	r2, r0
 801b804:	460b      	mov	r3, r1
 801b806:	4613      	mov	r3, r2
 801b808:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b80a:	e053      	b.n	801b8b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b80c:	4b35      	ldr	r3, [pc, #212]	; (801b8e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801b80e:	685b      	ldr	r3, [r3, #4]
 801b810:	099b      	lsrs	r3, r3, #6
 801b812:	2200      	movs	r2, #0
 801b814:	613b      	str	r3, [r7, #16]
 801b816:	617a      	str	r2, [r7, #20]
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801b81e:	f04f 0b00 	mov.w	fp, #0
 801b822:	4652      	mov	r2, sl
 801b824:	465b      	mov	r3, fp
 801b826:	f04f 0000 	mov.w	r0, #0
 801b82a:	f04f 0100 	mov.w	r1, #0
 801b82e:	0159      	lsls	r1, r3, #5
 801b830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801b834:	0150      	lsls	r0, r2, #5
 801b836:	4602      	mov	r2, r0
 801b838:	460b      	mov	r3, r1
 801b83a:	ebb2 080a 	subs.w	r8, r2, sl
 801b83e:	eb63 090b 	sbc.w	r9, r3, fp
 801b842:	f04f 0200 	mov.w	r2, #0
 801b846:	f04f 0300 	mov.w	r3, #0
 801b84a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801b84e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801b852:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801b856:	ebb2 0408 	subs.w	r4, r2, r8
 801b85a:	eb63 0509 	sbc.w	r5, r3, r9
 801b85e:	f04f 0200 	mov.w	r2, #0
 801b862:	f04f 0300 	mov.w	r3, #0
 801b866:	00eb      	lsls	r3, r5, #3
 801b868:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801b86c:	00e2      	lsls	r2, r4, #3
 801b86e:	4614      	mov	r4, r2
 801b870:	461d      	mov	r5, r3
 801b872:	eb14 030a 	adds.w	r3, r4, sl
 801b876:	603b      	str	r3, [r7, #0]
 801b878:	eb45 030b 	adc.w	r3, r5, fp
 801b87c:	607b      	str	r3, [r7, #4]
 801b87e:	f04f 0200 	mov.w	r2, #0
 801b882:	f04f 0300 	mov.w	r3, #0
 801b886:	e9d7 4500 	ldrd	r4, r5, [r7]
 801b88a:	4629      	mov	r1, r5
 801b88c:	028b      	lsls	r3, r1, #10
 801b88e:	4621      	mov	r1, r4
 801b890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801b894:	4621      	mov	r1, r4
 801b896:	028a      	lsls	r2, r1, #10
 801b898:	4610      	mov	r0, r2
 801b89a:	4619      	mov	r1, r3
 801b89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b89e:	2200      	movs	r2, #0
 801b8a0:	60bb      	str	r3, [r7, #8]
 801b8a2:	60fa      	str	r2, [r7, #12]
 801b8a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b8a8:	f7e4 fd32 	bl	8000310 <__aeabi_uldivmod>
 801b8ac:	4602      	mov	r2, r0
 801b8ae:	460b      	mov	r3, r1
 801b8b0:	4613      	mov	r3, r2
 801b8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801b8b4:	4b0b      	ldr	r3, [pc, #44]	; (801b8e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801b8b6:	685b      	ldr	r3, [r3, #4]
 801b8b8:	0c1b      	lsrs	r3, r3, #16
 801b8ba:	f003 0303 	and.w	r3, r3, #3
 801b8be:	3301      	adds	r3, #1
 801b8c0:	005b      	lsls	r3, r3, #1
 801b8c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801b8c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801b8ce:	e002      	b.n	801b8d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801b8d0:	4b05      	ldr	r3, [pc, #20]	; (801b8e8 <HAL_RCC_GetSysClockFreq+0x184>)
 801b8d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801b8d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 801b8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801b8d8:	4618      	mov	r0, r3
 801b8da:	3740      	adds	r7, #64	; 0x40
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b8e2:	bf00      	nop
 801b8e4:	40023800 	.word	0x40023800
 801b8e8:	00f42400 	.word	0x00f42400
 801b8ec:	00b71b00 	.word	0x00b71b00

0801b8f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b8f4:	4b03      	ldr	r3, [pc, #12]	; (801b904 <HAL_RCC_GetHCLKFreq+0x14>)
 801b8f6:	681b      	ldr	r3, [r3, #0]
}
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	46bd      	mov	sp, r7
 801b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b900:	4770      	bx	lr
 801b902:	bf00      	nop
 801b904:	2000011c 	.word	0x2000011c

0801b908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801b90c:	f7ff fff0 	bl	801b8f0 <HAL_RCC_GetHCLKFreq>
 801b910:	4602      	mov	r2, r0
 801b912:	4b05      	ldr	r3, [pc, #20]	; (801b928 <HAL_RCC_GetPCLK1Freq+0x20>)
 801b914:	689b      	ldr	r3, [r3, #8]
 801b916:	0a9b      	lsrs	r3, r3, #10
 801b918:	f003 0307 	and.w	r3, r3, #7
 801b91c:	4903      	ldr	r1, [pc, #12]	; (801b92c <HAL_RCC_GetPCLK1Freq+0x24>)
 801b91e:	5ccb      	ldrb	r3, [r1, r3]
 801b920:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b924:	4618      	mov	r0, r3
 801b926:	bd80      	pop	{r7, pc}
 801b928:	40023800 	.word	0x40023800
 801b92c:	0802b710 	.word	0x0802b710

0801b930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b930:	b580      	push	{r7, lr}
 801b932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801b934:	f7ff ffdc 	bl	801b8f0 <HAL_RCC_GetHCLKFreq>
 801b938:	4602      	mov	r2, r0
 801b93a:	4b05      	ldr	r3, [pc, #20]	; (801b950 <HAL_RCC_GetPCLK2Freq+0x20>)
 801b93c:	689b      	ldr	r3, [r3, #8]
 801b93e:	0b5b      	lsrs	r3, r3, #13
 801b940:	f003 0307 	and.w	r3, r3, #7
 801b944:	4903      	ldr	r1, [pc, #12]	; (801b954 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b946:	5ccb      	ldrb	r3, [r1, r3]
 801b948:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b94c:	4618      	mov	r0, r3
 801b94e:	bd80      	pop	{r7, pc}
 801b950:	40023800 	.word	0x40023800
 801b954:	0802b710 	.word	0x0802b710

0801b958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b088      	sub	sp, #32
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801b960:	2300      	movs	r3, #0
 801b962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801b964:	2300      	movs	r3, #0
 801b966:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801b968:	2300      	movs	r3, #0
 801b96a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801b96c:	2300      	movs	r3, #0
 801b96e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801b970:	2300      	movs	r3, #0
 801b972:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	f003 0301 	and.w	r3, r3, #1
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d012      	beq.n	801b9a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801b980:	4b69      	ldr	r3, [pc, #420]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b982:	689b      	ldr	r3, [r3, #8]
 801b984:	4a68      	ldr	r2, [pc, #416]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b986:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801b98a:	6093      	str	r3, [r2, #8]
 801b98c:	4b66      	ldr	r3, [pc, #408]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b98e:	689a      	ldr	r2, [r3, #8]
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b994:	4964      	ldr	r1, [pc, #400]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b996:	4313      	orrs	r3, r2
 801b998:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d101      	bne.n	801b9a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801b9a2:	2301      	movs	r3, #1
 801b9a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d017      	beq.n	801b9e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b9b2:	4b5d      	ldr	r3, [pc, #372]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b9b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b9c0:	4959      	ldr	r1, [pc, #356]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b9c2:	4313      	orrs	r3, r2
 801b9c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b9cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b9d0:	d101      	bne.n	801b9d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801b9d2:	2301      	movs	r3, #1
 801b9d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d101      	bne.n	801b9e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801b9de:	2301      	movs	r3, #1
 801b9e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d017      	beq.n	801ba1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b9ee:	4b4e      	ldr	r3, [pc, #312]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b9f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b9f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b9fc:	494a      	ldr	r1, [pc, #296]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801b9fe:	4313      	orrs	r3, r2
 801ba00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ba0c:	d101      	bne.n	801ba12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801ba0e:	2301      	movs	r3, #1
 801ba10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d101      	bne.n	801ba1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801ba1a:	2301      	movs	r3, #1
 801ba1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d001      	beq.n	801ba2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801ba2a:	2301      	movs	r3, #1
 801ba2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	f003 0320 	and.w	r3, r3, #32
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	f000 808b 	beq.w	801bb52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801ba3c:	4b3a      	ldr	r3, [pc, #232]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ba3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba40:	4a39      	ldr	r2, [pc, #228]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ba42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba46:	6413      	str	r3, [r2, #64]	; 0x40
 801ba48:	4b37      	ldr	r3, [pc, #220]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ba4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ba50:	60bb      	str	r3, [r7, #8]
 801ba52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801ba54:	4b35      	ldr	r3, [pc, #212]	; (801bb2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	4a34      	ldr	r2, [pc, #208]	; (801bb2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801ba5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ba5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ba60:	f7fb ff70 	bl	8017944 <HAL_GetTick>
 801ba64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801ba66:	e008      	b.n	801ba7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ba68:	f7fb ff6c 	bl	8017944 <HAL_GetTick>
 801ba6c:	4602      	mov	r2, r0
 801ba6e:	697b      	ldr	r3, [r7, #20]
 801ba70:	1ad3      	subs	r3, r2, r3
 801ba72:	2b64      	cmp	r3, #100	; 0x64
 801ba74:	d901      	bls.n	801ba7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801ba76:	2303      	movs	r3, #3
 801ba78:	e38f      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801ba7a:	4b2c      	ldr	r3, [pc, #176]	; (801bb2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d0f0      	beq.n	801ba68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801ba86:	4b28      	ldr	r3, [pc, #160]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ba88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ba8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801ba90:	693b      	ldr	r3, [r7, #16]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d035      	beq.n	801bb02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ba9e:	693a      	ldr	r2, [r7, #16]
 801baa0:	429a      	cmp	r2, r3
 801baa2:	d02e      	beq.n	801bb02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801baa4:	4b20      	ldr	r3, [pc, #128]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801baa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801baa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801baac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801baae:	4b1e      	ldr	r3, [pc, #120]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801bab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bab2:	4a1d      	ldr	r2, [pc, #116]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801bab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bab8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801baba:	4b1b      	ldr	r3, [pc, #108]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801babc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801babe:	4a1a      	ldr	r2, [pc, #104]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801bac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bac4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801bac6:	4a18      	ldr	r2, [pc, #96]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801bac8:	693b      	ldr	r3, [r7, #16]
 801baca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801bacc:	4b16      	ldr	r3, [pc, #88]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801bace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bad0:	f003 0301 	and.w	r3, r3, #1
 801bad4:	2b01      	cmp	r3, #1
 801bad6:	d114      	bne.n	801bb02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bad8:	f7fb ff34 	bl	8017944 <HAL_GetTick>
 801badc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bade:	e00a      	b.n	801baf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bae0:	f7fb ff30 	bl	8017944 <HAL_GetTick>
 801bae4:	4602      	mov	r2, r0
 801bae6:	697b      	ldr	r3, [r7, #20]
 801bae8:	1ad3      	subs	r3, r2, r3
 801baea:	f241 3288 	movw	r2, #5000	; 0x1388
 801baee:	4293      	cmp	r3, r2
 801baf0:	d901      	bls.n	801baf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801baf2:	2303      	movs	r3, #3
 801baf4:	e351      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801baf6:	4b0c      	ldr	r3, [pc, #48]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801baf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bafa:	f003 0302 	and.w	r3, r3, #2
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d0ee      	beq.n	801bae0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801bb0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bb0e:	d111      	bne.n	801bb34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801bb10:	4b05      	ldr	r3, [pc, #20]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801bb12:	689b      	ldr	r3, [r3, #8]
 801bb14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801bb1c:	4b04      	ldr	r3, [pc, #16]	; (801bb30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801bb1e:	400b      	ands	r3, r1
 801bb20:	4901      	ldr	r1, [pc, #4]	; (801bb28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801bb22:	4313      	orrs	r3, r2
 801bb24:	608b      	str	r3, [r1, #8]
 801bb26:	e00b      	b.n	801bb40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801bb28:	40023800 	.word	0x40023800
 801bb2c:	40007000 	.word	0x40007000
 801bb30:	0ffffcff 	.word	0x0ffffcff
 801bb34:	4bac      	ldr	r3, [pc, #688]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb36:	689b      	ldr	r3, [r3, #8]
 801bb38:	4aab      	ldr	r2, [pc, #684]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801bb3e:	6093      	str	r3, [r2, #8]
 801bb40:	4ba9      	ldr	r3, [pc, #676]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801bb4c:	49a6      	ldr	r1, [pc, #664]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb4e:	4313      	orrs	r3, r2
 801bb50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	f003 0310 	and.w	r3, r3, #16
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d010      	beq.n	801bb80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801bb5e:	4ba2      	ldr	r3, [pc, #648]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bb64:	4aa0      	ldr	r2, [pc, #640]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801bb6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801bb6e:	4b9e      	ldr	r3, [pc, #632]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb78:	499b      	ldr	r1, [pc, #620]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb7a:	4313      	orrs	r3, r2
 801bb7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d00a      	beq.n	801bba2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bb8c:	4b96      	ldr	r3, [pc, #600]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bb92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bb9a:	4993      	ldr	r1, [pc, #588]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bb9c:	4313      	orrs	r3, r2
 801bb9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d00a      	beq.n	801bbc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801bbae:	4b8e      	ldr	r3, [pc, #568]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bbb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bbb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801bbbc:	498a      	ldr	r1, [pc, #552]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bbbe:	4313      	orrs	r3, r2
 801bbc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d00a      	beq.n	801bbe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801bbd0:	4b85      	ldr	r3, [pc, #532]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bbd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bbd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbde:	4982      	ldr	r1, [pc, #520]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bbe0:	4313      	orrs	r3, r2
 801bbe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d00a      	beq.n	801bc08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801bbf2:	4b7d      	ldr	r3, [pc, #500]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bbf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc00:	4979      	ldr	r1, [pc, #484]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc02:	4313      	orrs	r3, r2
 801bc04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d00a      	beq.n	801bc2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bc14:	4b74      	ldr	r3, [pc, #464]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc1a:	f023 0203 	bic.w	r2, r3, #3
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc22:	4971      	ldr	r1, [pc, #452]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc24:	4313      	orrs	r3, r2
 801bc26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d00a      	beq.n	801bc4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bc36:	4b6c      	ldr	r3, [pc, #432]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc3c:	f023 020c 	bic.w	r2, r3, #12
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc44:	4968      	ldr	r1, [pc, #416]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc46:	4313      	orrs	r3, r2
 801bc48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d00a      	beq.n	801bc6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801bc58:	4b63      	ldr	r3, [pc, #396]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc66:	4960      	ldr	r1, [pc, #384]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc68:	4313      	orrs	r3, r2
 801bc6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d00a      	beq.n	801bc90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801bc7a:	4b5b      	ldr	r3, [pc, #364]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bc88:	4957      	ldr	r1, [pc, #348]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc8a:	4313      	orrs	r3, r2
 801bc8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d00a      	beq.n	801bcb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801bc9c:	4b52      	ldr	r3, [pc, #328]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bcaa:	494f      	ldr	r1, [pc, #316]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bcac:	4313      	orrs	r3, r2
 801bcae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d00a      	beq.n	801bcd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801bcbe:	4b4a      	ldr	r3, [pc, #296]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bcc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bccc:	4946      	ldr	r1, [pc, #280]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bcce:	4313      	orrs	r3, r2
 801bcd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d00a      	beq.n	801bcf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801bce0:	4b41      	ldr	r3, [pc, #260]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bce6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bcee:	493e      	ldr	r1, [pc, #248]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bcf0:	4313      	orrs	r3, r2
 801bcf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d00a      	beq.n	801bd18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801bd02:	4b39      	ldr	r3, [pc, #228]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bd08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd10:	4935      	ldr	r1, [pc, #212]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd12:	4313      	orrs	r3, r2
 801bd14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d00a      	beq.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801bd24:	4b30      	ldr	r3, [pc, #192]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bd2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bd32:	492d      	ldr	r1, [pc, #180]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd34:	4313      	orrs	r3, r2
 801bd36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d011      	beq.n	801bd6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801bd46:	4b28      	ldr	r3, [pc, #160]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bd4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bd54:	4924      	ldr	r1, [pc, #144]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd56:	4313      	orrs	r3, r2
 801bd58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bd60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bd64:	d101      	bne.n	801bd6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801bd66:	2301      	movs	r3, #1
 801bd68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	f003 0308 	and.w	r3, r3, #8
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d001      	beq.n	801bd7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801bd76:	2301      	movs	r3, #1
 801bd78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d00a      	beq.n	801bd9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801bd86:	4b18      	ldr	r3, [pc, #96]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bd8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd94:	4914      	ldr	r1, [pc, #80]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bd96:	4313      	orrs	r3, r2
 801bd98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d00b      	beq.n	801bdc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801bda8:	4b0f      	ldr	r3, [pc, #60]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bdaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bdae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bdb8:	490b      	ldr	r1, [pc, #44]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bdba:	4313      	orrs	r3, r2
 801bdbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d00f      	beq.n	801bdec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801bdcc:	4b06      	ldr	r3, [pc, #24]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bdce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bdd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bddc:	4902      	ldr	r1, [pc, #8]	; (801bde8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801bdde:	4313      	orrs	r3, r2
 801bde0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801bde4:	e002      	b.n	801bdec <HAL_RCCEx_PeriphCLKConfig+0x494>
 801bde6:	bf00      	nop
 801bde8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d00b      	beq.n	801be10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801bdf8:	4b8a      	ldr	r3, [pc, #552]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bdfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bdfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be08:	4986      	ldr	r1, [pc, #536]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be0a:	4313      	orrs	r3, r2
 801be0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d00b      	beq.n	801be34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801be1c:	4b81      	ldr	r3, [pc, #516]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801be22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801be2c:	497d      	ldr	r1, [pc, #500]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be2e:	4313      	orrs	r3, r2
 801be30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801be34:	69fb      	ldr	r3, [r7, #28]
 801be36:	2b01      	cmp	r3, #1
 801be38:	d006      	beq.n	801be48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801be42:	2b00      	cmp	r3, #0
 801be44:	f000 80d6 	beq.w	801bff4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801be48:	4b76      	ldr	r3, [pc, #472]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	4a75      	ldr	r2, [pc, #468]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801be52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801be54:	f7fb fd76 	bl	8017944 <HAL_GetTick>
 801be58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801be5a:	e008      	b.n	801be6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801be5c:	f7fb fd72 	bl	8017944 <HAL_GetTick>
 801be60:	4602      	mov	r2, r0
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	1ad3      	subs	r3, r2, r3
 801be66:	2b64      	cmp	r3, #100	; 0x64
 801be68:	d901      	bls.n	801be6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801be6a:	2303      	movs	r3, #3
 801be6c:	e195      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801be6e:	4b6d      	ldr	r3, [pc, #436]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801be76:	2b00      	cmp	r3, #0
 801be78:	d1f0      	bne.n	801be5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	f003 0301 	and.w	r3, r3, #1
 801be82:	2b00      	cmp	r3, #0
 801be84:	d021      	beq.n	801beca <HAL_RCCEx_PeriphCLKConfig+0x572>
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d11d      	bne.n	801beca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801be8e:	4b65      	ldr	r3, [pc, #404]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801be94:	0c1b      	lsrs	r3, r3, #16
 801be96:	f003 0303 	and.w	r3, r3, #3
 801be9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801be9c:	4b61      	ldr	r3, [pc, #388]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801be9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bea2:	0e1b      	lsrs	r3, r3, #24
 801bea4:	f003 030f 	and.w	r3, r3, #15
 801bea8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	019a      	lsls	r2, r3, #6
 801beb0:	693b      	ldr	r3, [r7, #16]
 801beb2:	041b      	lsls	r3, r3, #16
 801beb4:	431a      	orrs	r2, r3
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	061b      	lsls	r3, r3, #24
 801beba:	431a      	orrs	r2, r3
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	689b      	ldr	r3, [r3, #8]
 801bec0:	071b      	lsls	r3, r3, #28
 801bec2:	4958      	ldr	r1, [pc, #352]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bec4:	4313      	orrs	r3, r2
 801bec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d004      	beq.n	801bee0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801beda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bede:	d00a      	beq.n	801bef6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d02e      	beq.n	801bf4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bef4:	d129      	bne.n	801bf4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801bef6:	4b4b      	ldr	r3, [pc, #300]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801befc:	0c1b      	lsrs	r3, r3, #16
 801befe:	f003 0303 	and.w	r3, r3, #3
 801bf02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801bf04:	4b47      	ldr	r3, [pc, #284]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bf06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bf0a:	0f1b      	lsrs	r3, r3, #28
 801bf0c:	f003 0307 	and.w	r3, r3, #7
 801bf10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	685b      	ldr	r3, [r3, #4]
 801bf16:	019a      	lsls	r2, r3, #6
 801bf18:	693b      	ldr	r3, [r7, #16]
 801bf1a:	041b      	lsls	r3, r3, #16
 801bf1c:	431a      	orrs	r2, r3
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	68db      	ldr	r3, [r3, #12]
 801bf22:	061b      	lsls	r3, r3, #24
 801bf24:	431a      	orrs	r2, r3
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	071b      	lsls	r3, r3, #28
 801bf2a:	493e      	ldr	r1, [pc, #248]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bf2c:	4313      	orrs	r3, r2
 801bf2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801bf32:	4b3c      	ldr	r3, [pc, #240]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bf34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bf38:	f023 021f 	bic.w	r2, r3, #31
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf40:	3b01      	subs	r3, #1
 801bf42:	4938      	ldr	r1, [pc, #224]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bf44:	4313      	orrs	r3, r2
 801bf46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d01d      	beq.n	801bf92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801bf56:	4b33      	ldr	r3, [pc, #204]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bf58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bf5c:	0e1b      	lsrs	r3, r3, #24
 801bf5e:	f003 030f 	and.w	r3, r3, #15
 801bf62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801bf64:	4b2f      	ldr	r3, [pc, #188]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bf66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bf6a:	0f1b      	lsrs	r3, r3, #28
 801bf6c:	f003 0307 	and.w	r3, r3, #7
 801bf70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	685b      	ldr	r3, [r3, #4]
 801bf76:	019a      	lsls	r2, r3, #6
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	691b      	ldr	r3, [r3, #16]
 801bf7c:	041b      	lsls	r3, r3, #16
 801bf7e:	431a      	orrs	r2, r3
 801bf80:	693b      	ldr	r3, [r7, #16]
 801bf82:	061b      	lsls	r3, r3, #24
 801bf84:	431a      	orrs	r2, r3
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	071b      	lsls	r3, r3, #28
 801bf8a:	4926      	ldr	r1, [pc, #152]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bf8c:	4313      	orrs	r3, r2
 801bf8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d011      	beq.n	801bfc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	685b      	ldr	r3, [r3, #4]
 801bfa2:	019a      	lsls	r2, r3, #6
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	691b      	ldr	r3, [r3, #16]
 801bfa8:	041b      	lsls	r3, r3, #16
 801bfaa:	431a      	orrs	r2, r3
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	68db      	ldr	r3, [r3, #12]
 801bfb0:	061b      	lsls	r3, r3, #24
 801bfb2:	431a      	orrs	r2, r3
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	689b      	ldr	r3, [r3, #8]
 801bfb8:	071b      	lsls	r3, r3, #28
 801bfba:	491a      	ldr	r1, [pc, #104]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bfbc:	4313      	orrs	r3, r2
 801bfbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801bfc2:	4b18      	ldr	r3, [pc, #96]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	4a17      	ldr	r2, [pc, #92]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bfc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801bfcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bfce:	f7fb fcb9 	bl	8017944 <HAL_GetTick>
 801bfd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801bfd4:	e008      	b.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801bfd6:	f7fb fcb5 	bl	8017944 <HAL_GetTick>
 801bfda:	4602      	mov	r2, r0
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	1ad3      	subs	r3, r2, r3
 801bfe0:	2b64      	cmp	r3, #100	; 0x64
 801bfe2:	d901      	bls.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801bfe4:	2303      	movs	r3, #3
 801bfe6:	e0d8      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801bfe8:	4b0e      	ldr	r3, [pc, #56]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d0f0      	beq.n	801bfd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801bff4:	69bb      	ldr	r3, [r7, #24]
 801bff6:	2b01      	cmp	r3, #1
 801bff8:	f040 80ce 	bne.w	801c198 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801bffc:	4b09      	ldr	r3, [pc, #36]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	4a08      	ldr	r2, [pc, #32]	; (801c024 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c008:	f7fb fc9c 	bl	8017944 <HAL_GetTick>
 801c00c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801c00e:	e00b      	b.n	801c028 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801c010:	f7fb fc98 	bl	8017944 <HAL_GetTick>
 801c014:	4602      	mov	r2, r0
 801c016:	697b      	ldr	r3, [r7, #20]
 801c018:	1ad3      	subs	r3, r2, r3
 801c01a:	2b64      	cmp	r3, #100	; 0x64
 801c01c:	d904      	bls.n	801c028 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c01e:	2303      	movs	r3, #3
 801c020:	e0bb      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x842>
 801c022:	bf00      	nop
 801c024:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801c028:	4b5e      	ldr	r3, [pc, #376]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801c030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c034:	d0ec      	beq.n	801c010 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d003      	beq.n	801c04a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c046:	2b00      	cmp	r3, #0
 801c048:	d009      	beq.n	801c05e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801c052:	2b00      	cmp	r3, #0
 801c054:	d02e      	beq.n	801c0b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d12a      	bne.n	801c0b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801c05e:	4b51      	ldr	r3, [pc, #324]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c064:	0c1b      	lsrs	r3, r3, #16
 801c066:	f003 0303 	and.w	r3, r3, #3
 801c06a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801c06c:	4b4d      	ldr	r3, [pc, #308]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c072:	0f1b      	lsrs	r3, r3, #28
 801c074:	f003 0307 	and.w	r3, r3, #7
 801c078:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	695b      	ldr	r3, [r3, #20]
 801c07e:	019a      	lsls	r2, r3, #6
 801c080:	693b      	ldr	r3, [r7, #16]
 801c082:	041b      	lsls	r3, r3, #16
 801c084:	431a      	orrs	r2, r3
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	699b      	ldr	r3, [r3, #24]
 801c08a:	061b      	lsls	r3, r3, #24
 801c08c:	431a      	orrs	r2, r3
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	071b      	lsls	r3, r3, #28
 801c092:	4944      	ldr	r1, [pc, #272]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c094:	4313      	orrs	r3, r2
 801c096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801c09a:	4b42      	ldr	r3, [pc, #264]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c09c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c0a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	021b      	lsls	r3, r3, #8
 801c0ac:	493d      	ldr	r1, [pc, #244]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c0ae:	4313      	orrs	r3, r2
 801c0b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d022      	beq.n	801c106 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c0c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801c0c8:	d11d      	bne.n	801c106 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801c0ca:	4b36      	ldr	r3, [pc, #216]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0d0:	0e1b      	lsrs	r3, r3, #24
 801c0d2:	f003 030f 	and.w	r3, r3, #15
 801c0d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801c0d8:	4b32      	ldr	r3, [pc, #200]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0de:	0f1b      	lsrs	r3, r3, #28
 801c0e0:	f003 0307 	and.w	r3, r3, #7
 801c0e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	695b      	ldr	r3, [r3, #20]
 801c0ea:	019a      	lsls	r2, r3, #6
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	6a1b      	ldr	r3, [r3, #32]
 801c0f0:	041b      	lsls	r3, r3, #16
 801c0f2:	431a      	orrs	r2, r3
 801c0f4:	693b      	ldr	r3, [r7, #16]
 801c0f6:	061b      	lsls	r3, r3, #24
 801c0f8:	431a      	orrs	r2, r3
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	071b      	lsls	r3, r3, #28
 801c0fe:	4929      	ldr	r1, [pc, #164]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c100:	4313      	orrs	r3, r2
 801c102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	f003 0308 	and.w	r3, r3, #8
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d028      	beq.n	801c164 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801c112:	4b24      	ldr	r3, [pc, #144]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c118:	0e1b      	lsrs	r3, r3, #24
 801c11a:	f003 030f 	and.w	r3, r3, #15
 801c11e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801c120:	4b20      	ldr	r3, [pc, #128]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c126:	0c1b      	lsrs	r3, r3, #16
 801c128:	f003 0303 	and.w	r3, r3, #3
 801c12c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	695b      	ldr	r3, [r3, #20]
 801c132:	019a      	lsls	r2, r3, #6
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	041b      	lsls	r3, r3, #16
 801c138:	431a      	orrs	r2, r3
 801c13a:	693b      	ldr	r3, [r7, #16]
 801c13c:	061b      	lsls	r3, r3, #24
 801c13e:	431a      	orrs	r2, r3
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	69db      	ldr	r3, [r3, #28]
 801c144:	071b      	lsls	r3, r3, #28
 801c146:	4917      	ldr	r1, [pc, #92]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c148:	4313      	orrs	r3, r2
 801c14a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801c14e:	4b15      	ldr	r3, [pc, #84]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c15c:	4911      	ldr	r1, [pc, #68]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c15e:	4313      	orrs	r3, r2
 801c160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801c164:	4b0f      	ldr	r3, [pc, #60]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	4a0e      	ldr	r2, [pc, #56]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c16a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c16e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c170:	f7fb fbe8 	bl	8017944 <HAL_GetTick>
 801c174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801c176:	e008      	b.n	801c18a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801c178:	f7fb fbe4 	bl	8017944 <HAL_GetTick>
 801c17c:	4602      	mov	r2, r0
 801c17e:	697b      	ldr	r3, [r7, #20]
 801c180:	1ad3      	subs	r3, r2, r3
 801c182:	2b64      	cmp	r3, #100	; 0x64
 801c184:	d901      	bls.n	801c18a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c186:	2303      	movs	r3, #3
 801c188:	e007      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801c18a:	4b06      	ldr	r3, [pc, #24]	; (801c1a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801c192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c196:	d1ef      	bne.n	801c178 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801c198:	2300      	movs	r3, #0
}
 801c19a:	4618      	mov	r0, r3
 801c19c:	3720      	adds	r7, #32
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	bd80      	pop	{r7, pc}
 801c1a2:	bf00      	nop
 801c1a4:	40023800 	.word	0x40023800

0801c1a8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b082      	sub	sp, #8
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d101      	bne.n	801c1ba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801c1b6:	2301      	movs	r3, #1
 801c1b8:	e01c      	b.n	801c1f4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	795b      	ldrb	r3, [r3, #5]
 801c1be:	b2db      	uxtb	r3, r3
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d105      	bne.n	801c1d0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	2200      	movs	r2, #0
 801c1c8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801c1ca:	6878      	ldr	r0, [r7, #4]
 801c1cc:	f7f9 fe36 	bl	8015e3c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	2202      	movs	r2, #2
 801c1d4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	681a      	ldr	r2, [r3, #0]
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	f042 0204 	orr.w	r2, r2, #4
 801c1e4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	2201      	movs	r2, #1
 801c1ea:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801c1f2:	2300      	movs	r3, #0
}
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	3708      	adds	r7, #8
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	bd80      	pop	{r7, pc}

0801c1fc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b084      	sub	sp, #16
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
 801c204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c206:	2300      	movs	r3, #0
 801c208:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	791b      	ldrb	r3, [r3, #4]
 801c20e:	2b01      	cmp	r3, #1
 801c210:	d101      	bne.n	801c216 <HAL_RNG_GenerateRandomNumber+0x1a>
 801c212:	2302      	movs	r3, #2
 801c214:	e044      	b.n	801c2a0 <HAL_RNG_GenerateRandomNumber+0xa4>
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	2201      	movs	r2, #1
 801c21a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	795b      	ldrb	r3, [r3, #5]
 801c220:	b2db      	uxtb	r3, r3
 801c222:	2b01      	cmp	r3, #1
 801c224:	d133      	bne.n	801c28e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	2202      	movs	r2, #2
 801c22a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c22c:	f7fb fb8a 	bl	8017944 <HAL_GetTick>
 801c230:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801c232:	e018      	b.n	801c266 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801c234:	f7fb fb86 	bl	8017944 <HAL_GetTick>
 801c238:	4602      	mov	r2, r0
 801c23a:	68bb      	ldr	r3, [r7, #8]
 801c23c:	1ad3      	subs	r3, r2, r3
 801c23e:	2b02      	cmp	r3, #2
 801c240:	d911      	bls.n	801c266 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	685b      	ldr	r3, [r3, #4]
 801c248:	f003 0301 	and.w	r3, r3, #1
 801c24c:	2b01      	cmp	r3, #1
 801c24e:	d00a      	beq.n	801c266 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	2201      	movs	r2, #1
 801c254:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	2202      	movs	r2, #2
 801c25a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	2200      	movs	r2, #0
 801c260:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801c262:	2301      	movs	r3, #1
 801c264:	e01c      	b.n	801c2a0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	685b      	ldr	r3, [r3, #4]
 801c26c:	f003 0301 	and.w	r3, r3, #1
 801c270:	2b01      	cmp	r3, #1
 801c272:	d1df      	bne.n	801c234 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	689a      	ldr	r2, [r3, #8]
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	68da      	ldr	r2, [r3, #12]
 801c282:	683b      	ldr	r3, [r7, #0]
 801c284:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	2201      	movs	r2, #1
 801c28a:	715a      	strb	r2, [r3, #5]
 801c28c:	e004      	b.n	801c298 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	2204      	movs	r2, #4
 801c292:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801c294:	2301      	movs	r3, #1
 801c296:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	2200      	movs	r2, #0
 801c29c:	711a      	strb	r2, [r3, #4]

  return status;
 801c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	3710      	adds	r7, #16
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	bd80      	pop	{r7, pc}

0801c2a8 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b082      	sub	sp, #8
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	330c      	adds	r3, #12
 801c2b4:	4619      	mov	r1, r3
 801c2b6:	6878      	ldr	r0, [r7, #4]
 801c2b8:	f7ff ffa0 	bl	801c1fc <HAL_RNG_GenerateRandomNumber>
 801c2bc:	4603      	mov	r3, r0
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d102      	bne.n	801c2c8 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	68db      	ldr	r3, [r3, #12]
 801c2c6:	e000      	b.n	801c2ca <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801c2c8:	2300      	movs	r3, #0
  }
}
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	3708      	adds	r7, #8
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bd80      	pop	{r7, pc}

0801c2d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c2d2:	b580      	push	{r7, lr}
 801c2d4:	b084      	sub	sp, #16
 801c2d6:	af00      	add	r7, sp, #0
 801c2d8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d101      	bne.n	801c2e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c2e0:	2301      	movs	r3, #1
 801c2e2:	e09d      	b.n	801c420 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d108      	bne.n	801c2fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	685b      	ldr	r3, [r3, #4]
 801c2f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c2f4:	d009      	beq.n	801c30a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	61da      	str	r2, [r3, #28]
 801c2fc:	e005      	b.n	801c30a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	2200      	movs	r2, #0
 801c302:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	2200      	movs	r2, #0
 801c308:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	2200      	movs	r2, #0
 801c30e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c316:	b2db      	uxtb	r3, r3
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d106      	bne.n	801c32a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	2200      	movs	r2, #0
 801c320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c324:	6878      	ldr	r0, [r7, #4]
 801c326:	f7f9 fe11 	bl	8015f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	2202      	movs	r2, #2
 801c32e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	681a      	ldr	r2, [r3, #0]
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c340:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	68db      	ldr	r3, [r3, #12]
 801c346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c34a:	d902      	bls.n	801c352 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801c34c:	2300      	movs	r3, #0
 801c34e:	60fb      	str	r3, [r7, #12]
 801c350:	e002      	b.n	801c358 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801c352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801c356:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	68db      	ldr	r3, [r3, #12]
 801c35c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801c360:	d007      	beq.n	801c372 <HAL_SPI_Init+0xa0>
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	68db      	ldr	r3, [r3, #12]
 801c366:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c36a:	d002      	beq.n	801c372 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	2200      	movs	r2, #0
 801c370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	685b      	ldr	r3, [r3, #4]
 801c376:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	689b      	ldr	r3, [r3, #8]
 801c37e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c382:	431a      	orrs	r2, r3
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	691b      	ldr	r3, [r3, #16]
 801c388:	f003 0302 	and.w	r3, r3, #2
 801c38c:	431a      	orrs	r2, r3
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	695b      	ldr	r3, [r3, #20]
 801c392:	f003 0301 	and.w	r3, r3, #1
 801c396:	431a      	orrs	r2, r3
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	699b      	ldr	r3, [r3, #24]
 801c39c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c3a0:	431a      	orrs	r2, r3
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	69db      	ldr	r3, [r3, #28]
 801c3a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c3aa:	431a      	orrs	r2, r3
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	6a1b      	ldr	r3, [r3, #32]
 801c3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c3b4:	ea42 0103 	orr.w	r1, r2, r3
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	430a      	orrs	r2, r1
 801c3c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	699b      	ldr	r3, [r3, #24]
 801c3cc:	0c1b      	lsrs	r3, r3, #16
 801c3ce:	f003 0204 	and.w	r2, r3, #4
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3d6:	f003 0310 	and.w	r3, r3, #16
 801c3da:	431a      	orrs	r2, r3
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c3e0:	f003 0308 	and.w	r3, r3, #8
 801c3e4:	431a      	orrs	r2, r3
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	68db      	ldr	r3, [r3, #12]
 801c3ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c3ee:	ea42 0103 	orr.w	r1, r2, r3
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	430a      	orrs	r2, r1
 801c3fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	69da      	ldr	r2, [r3, #28]
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c40e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	2200      	movs	r2, #0
 801c414:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	2201      	movs	r2, #1
 801c41a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801c41e:	2300      	movs	r3, #0
}
 801c420:	4618      	mov	r0, r3
 801c422:	3710      	adds	r7, #16
 801c424:	46bd      	mov	sp, r7
 801c426:	bd80      	pop	{r7, pc}

0801c428 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b088      	sub	sp, #32
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	60f8      	str	r0, [r7, #12]
 801c430:	60b9      	str	r1, [r7, #8]
 801c432:	603b      	str	r3, [r7, #0]
 801c434:	4613      	mov	r3, r2
 801c436:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c438:	2300      	movs	r3, #0
 801c43a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c442:	2b01      	cmp	r3, #1
 801c444:	d101      	bne.n	801c44a <HAL_SPI_Transmit+0x22>
 801c446:	2302      	movs	r3, #2
 801c448:	e158      	b.n	801c6fc <HAL_SPI_Transmit+0x2d4>
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	2201      	movs	r2, #1
 801c44e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c452:	f7fb fa77 	bl	8017944 <HAL_GetTick>
 801c456:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c458:	88fb      	ldrh	r3, [r7, #6]
 801c45a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c462:	b2db      	uxtb	r3, r3
 801c464:	2b01      	cmp	r3, #1
 801c466:	d002      	beq.n	801c46e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c468:	2302      	movs	r3, #2
 801c46a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c46c:	e13d      	b.n	801c6ea <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801c46e:	68bb      	ldr	r3, [r7, #8]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d002      	beq.n	801c47a <HAL_SPI_Transmit+0x52>
 801c474:	88fb      	ldrh	r3, [r7, #6]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d102      	bne.n	801c480 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c47a:	2301      	movs	r3, #1
 801c47c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c47e:	e134      	b.n	801c6ea <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	2203      	movs	r2, #3
 801c484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	2200      	movs	r2, #0
 801c48c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	68ba      	ldr	r2, [r7, #8]
 801c492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	88fa      	ldrh	r2, [r7, #6]
 801c498:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	88fa      	ldrh	r2, [r7, #6]
 801c49e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	2200      	movs	r2, #0
 801c4a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	2200      	movs	r2, #0
 801c4b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	2200      	movs	r2, #0
 801c4ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	2200      	movs	r2, #0
 801c4c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	689b      	ldr	r3, [r3, #8]
 801c4c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c4ca:	d10f      	bne.n	801c4ec <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	681a      	ldr	r2, [r3, #0]
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c4da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	681a      	ldr	r2, [r3, #0]
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c4ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c4f6:	2b40      	cmp	r3, #64	; 0x40
 801c4f8:	d007      	beq.n	801c50a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	681a      	ldr	r2, [r3, #0]
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	68db      	ldr	r3, [r3, #12]
 801c50e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c512:	d94b      	bls.n	801c5ac <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	685b      	ldr	r3, [r3, #4]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d002      	beq.n	801c522 <HAL_SPI_Transmit+0xfa>
 801c51c:	8afb      	ldrh	r3, [r7, #22]
 801c51e:	2b01      	cmp	r3, #1
 801c520:	d13e      	bne.n	801c5a0 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c526:	881a      	ldrh	r2, [r3, #0]
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c532:	1c9a      	adds	r2, r3, #2
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c53c:	b29b      	uxth	r3, r3
 801c53e:	3b01      	subs	r3, #1
 801c540:	b29a      	uxth	r2, r3
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c546:	e02b      	b.n	801c5a0 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	689b      	ldr	r3, [r3, #8]
 801c54e:	f003 0302 	and.w	r3, r3, #2
 801c552:	2b02      	cmp	r3, #2
 801c554:	d112      	bne.n	801c57c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c55a:	881a      	ldrh	r2, [r3, #0]
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c566:	1c9a      	adds	r2, r3, #2
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c570:	b29b      	uxth	r3, r3
 801c572:	3b01      	subs	r3, #1
 801c574:	b29a      	uxth	r2, r3
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c57a:	e011      	b.n	801c5a0 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c57c:	f7fb f9e2 	bl	8017944 <HAL_GetTick>
 801c580:	4602      	mov	r2, r0
 801c582:	69bb      	ldr	r3, [r7, #24]
 801c584:	1ad3      	subs	r3, r2, r3
 801c586:	683a      	ldr	r2, [r7, #0]
 801c588:	429a      	cmp	r2, r3
 801c58a:	d803      	bhi.n	801c594 <HAL_SPI_Transmit+0x16c>
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c592:	d102      	bne.n	801c59a <HAL_SPI_Transmit+0x172>
 801c594:	683b      	ldr	r3, [r7, #0]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d102      	bne.n	801c5a0 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801c59a:	2303      	movs	r3, #3
 801c59c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c59e:	e0a4      	b.n	801c6ea <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5a4:	b29b      	uxth	r3, r3
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d1ce      	bne.n	801c548 <HAL_SPI_Transmit+0x120>
 801c5aa:	e07c      	b.n	801c6a6 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	685b      	ldr	r3, [r3, #4]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d002      	beq.n	801c5ba <HAL_SPI_Transmit+0x192>
 801c5b4:	8afb      	ldrh	r3, [r7, #22]
 801c5b6:	2b01      	cmp	r3, #1
 801c5b8:	d170      	bne.n	801c69c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5be:	b29b      	uxth	r3, r3
 801c5c0:	2b01      	cmp	r3, #1
 801c5c2:	d912      	bls.n	801c5ea <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5c8:	881a      	ldrh	r2, [r3, #0]
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5d4:	1c9a      	adds	r2, r3, #2
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	3b02      	subs	r3, #2
 801c5e2:	b29a      	uxth	r2, r3
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c5e8:	e058      	b.n	801c69c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	330c      	adds	r3, #12
 801c5f4:	7812      	ldrb	r2, [r2, #0]
 801c5f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5fc:	1c5a      	adds	r2, r3, #1
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c606:	b29b      	uxth	r3, r3
 801c608:	3b01      	subs	r3, #1
 801c60a:	b29a      	uxth	r2, r3
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801c610:	e044      	b.n	801c69c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	689b      	ldr	r3, [r3, #8]
 801c618:	f003 0302 	and.w	r3, r3, #2
 801c61c:	2b02      	cmp	r3, #2
 801c61e:	d12b      	bne.n	801c678 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c624:	b29b      	uxth	r3, r3
 801c626:	2b01      	cmp	r3, #1
 801c628:	d912      	bls.n	801c650 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c62e:	881a      	ldrh	r2, [r3, #0]
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c63a:	1c9a      	adds	r2, r3, #2
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c644:	b29b      	uxth	r3, r3
 801c646:	3b02      	subs	r3, #2
 801c648:	b29a      	uxth	r2, r3
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c64e:	e025      	b.n	801c69c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	330c      	adds	r3, #12
 801c65a:	7812      	ldrb	r2, [r2, #0]
 801c65c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c662:	1c5a      	adds	r2, r3, #1
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c66c:	b29b      	uxth	r3, r3
 801c66e:	3b01      	subs	r3, #1
 801c670:	b29a      	uxth	r2, r3
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c676:	e011      	b.n	801c69c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c678:	f7fb f964 	bl	8017944 <HAL_GetTick>
 801c67c:	4602      	mov	r2, r0
 801c67e:	69bb      	ldr	r3, [r7, #24]
 801c680:	1ad3      	subs	r3, r2, r3
 801c682:	683a      	ldr	r2, [r7, #0]
 801c684:	429a      	cmp	r2, r3
 801c686:	d803      	bhi.n	801c690 <HAL_SPI_Transmit+0x268>
 801c688:	683b      	ldr	r3, [r7, #0]
 801c68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c68e:	d102      	bne.n	801c696 <HAL_SPI_Transmit+0x26e>
 801c690:	683b      	ldr	r3, [r7, #0]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d102      	bne.n	801c69c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801c696:	2303      	movs	r3, #3
 801c698:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c69a:	e026      	b.n	801c6ea <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c6a0:	b29b      	uxth	r3, r3
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d1b5      	bne.n	801c612 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c6a6:	69ba      	ldr	r2, [r7, #24]
 801c6a8:	6839      	ldr	r1, [r7, #0]
 801c6aa:	68f8      	ldr	r0, [r7, #12]
 801c6ac:	f000 fd08 	bl	801d0c0 <SPI_EndRxTxTransaction>
 801c6b0:	4603      	mov	r3, r0
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d002      	beq.n	801c6bc <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	2220      	movs	r2, #32
 801c6ba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	689b      	ldr	r3, [r3, #8]
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d10a      	bne.n	801c6da <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	613b      	str	r3, [r7, #16]
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	68db      	ldr	r3, [r3, #12]
 801c6ce:	613b      	str	r3, [r7, #16]
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	689b      	ldr	r3, [r3, #8]
 801c6d6:	613b      	str	r3, [r7, #16]
 801c6d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d002      	beq.n	801c6e8 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801c6e2:	2301      	movs	r3, #1
 801c6e4:	77fb      	strb	r3, [r7, #31]
 801c6e6:	e000      	b.n	801c6ea <HAL_SPI_Transmit+0x2c2>
  }

error:
 801c6e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	2201      	movs	r2, #1
 801c6ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c6fa:	7ffb      	ldrb	r3, [r7, #31]
}
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	3720      	adds	r7, #32
 801c700:	46bd      	mov	sp, r7
 801c702:	bd80      	pop	{r7, pc}

0801c704 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b088      	sub	sp, #32
 801c708:	af02      	add	r7, sp, #8
 801c70a:	60f8      	str	r0, [r7, #12]
 801c70c:	60b9      	str	r1, [r7, #8]
 801c70e:	603b      	str	r3, [r7, #0]
 801c710:	4613      	mov	r3, r2
 801c712:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c714:	2300      	movs	r3, #0
 801c716:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	685b      	ldr	r3, [r3, #4]
 801c71c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c720:	d112      	bne.n	801c748 <HAL_SPI_Receive+0x44>
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	689b      	ldr	r3, [r3, #8]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d10e      	bne.n	801c748 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	2204      	movs	r2, #4
 801c72e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c732:	88fa      	ldrh	r2, [r7, #6]
 801c734:	683b      	ldr	r3, [r7, #0]
 801c736:	9300      	str	r3, [sp, #0]
 801c738:	4613      	mov	r3, r2
 801c73a:	68ba      	ldr	r2, [r7, #8]
 801c73c:	68b9      	ldr	r1, [r7, #8]
 801c73e:	68f8      	ldr	r0, [r7, #12]
 801c740:	f000 f910 	bl	801c964 <HAL_SPI_TransmitReceive>
 801c744:	4603      	mov	r3, r0
 801c746:	e109      	b.n	801c95c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c74e:	2b01      	cmp	r3, #1
 801c750:	d101      	bne.n	801c756 <HAL_SPI_Receive+0x52>
 801c752:	2302      	movs	r3, #2
 801c754:	e102      	b.n	801c95c <HAL_SPI_Receive+0x258>
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	2201      	movs	r2, #1
 801c75a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c75e:	f7fb f8f1 	bl	8017944 <HAL_GetTick>
 801c762:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c76a:	b2db      	uxtb	r3, r3
 801c76c:	2b01      	cmp	r3, #1
 801c76e:	d002      	beq.n	801c776 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c770:	2302      	movs	r3, #2
 801c772:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c774:	e0e9      	b.n	801c94a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801c776:	68bb      	ldr	r3, [r7, #8]
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d002      	beq.n	801c782 <HAL_SPI_Receive+0x7e>
 801c77c:	88fb      	ldrh	r3, [r7, #6]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d102      	bne.n	801c788 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c782:	2301      	movs	r3, #1
 801c784:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c786:	e0e0      	b.n	801c94a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2204      	movs	r2, #4
 801c78c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	2200      	movs	r2, #0
 801c794:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	68ba      	ldr	r2, [r7, #8]
 801c79a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	88fa      	ldrh	r2, [r7, #6]
 801c7a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	88fa      	ldrh	r2, [r7, #6]
 801c7a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	2200      	movs	r2, #0
 801c7b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	2200      	movs	r2, #0
 801c7bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	68db      	ldr	r3, [r3, #12]
 801c7ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c7d2:	d908      	bls.n	801c7e6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	685a      	ldr	r2, [r3, #4]
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c7e2:	605a      	str	r2, [r3, #4]
 801c7e4:	e007      	b.n	801c7f6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	685a      	ldr	r2, [r3, #4]
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c7f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	689b      	ldr	r3, [r3, #8]
 801c7fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c7fe:	d10f      	bne.n	801c820 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	681a      	ldr	r2, [r3, #0]
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c80e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	681a      	ldr	r2, [r3, #0]
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c81e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c82a:	2b40      	cmp	r3, #64	; 0x40
 801c82c:	d007      	beq.n	801c83e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	681a      	ldr	r2, [r3, #0]
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c83c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	68db      	ldr	r3, [r3, #12]
 801c842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c846:	d867      	bhi.n	801c918 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c848:	e030      	b.n	801c8ac <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	689b      	ldr	r3, [r3, #8]
 801c850:	f003 0301 	and.w	r3, r3, #1
 801c854:	2b01      	cmp	r3, #1
 801c856:	d117      	bne.n	801c888 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	f103 020c 	add.w	r2, r3, #12
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c864:	7812      	ldrb	r2, [r2, #0]
 801c866:	b2d2      	uxtb	r2, r2
 801c868:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c86e:	1c5a      	adds	r2, r3, #1
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c87a:	b29b      	uxth	r3, r3
 801c87c:	3b01      	subs	r3, #1
 801c87e:	b29a      	uxth	r2, r3
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c886:	e011      	b.n	801c8ac <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c888:	f7fb f85c 	bl	8017944 <HAL_GetTick>
 801c88c:	4602      	mov	r2, r0
 801c88e:	693b      	ldr	r3, [r7, #16]
 801c890:	1ad3      	subs	r3, r2, r3
 801c892:	683a      	ldr	r2, [r7, #0]
 801c894:	429a      	cmp	r2, r3
 801c896:	d803      	bhi.n	801c8a0 <HAL_SPI_Receive+0x19c>
 801c898:	683b      	ldr	r3, [r7, #0]
 801c89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c89e:	d102      	bne.n	801c8a6 <HAL_SPI_Receive+0x1a2>
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d102      	bne.n	801c8ac <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801c8a6:	2303      	movs	r3, #3
 801c8a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c8aa:	e04e      	b.n	801c94a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d1c8      	bne.n	801c84a <HAL_SPI_Receive+0x146>
 801c8b8:	e034      	b.n	801c924 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	689b      	ldr	r3, [r3, #8]
 801c8c0:	f003 0301 	and.w	r3, r3, #1
 801c8c4:	2b01      	cmp	r3, #1
 801c8c6:	d115      	bne.n	801c8f4 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	68da      	ldr	r2, [r3, #12]
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8d2:	b292      	uxth	r2, r2
 801c8d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8da:	1c9a      	adds	r2, r3, #2
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c8e6:	b29b      	uxth	r3, r3
 801c8e8:	3b01      	subs	r3, #1
 801c8ea:	b29a      	uxth	r2, r3
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c8f2:	e011      	b.n	801c918 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c8f4:	f7fb f826 	bl	8017944 <HAL_GetTick>
 801c8f8:	4602      	mov	r2, r0
 801c8fa:	693b      	ldr	r3, [r7, #16]
 801c8fc:	1ad3      	subs	r3, r2, r3
 801c8fe:	683a      	ldr	r2, [r7, #0]
 801c900:	429a      	cmp	r2, r3
 801c902:	d803      	bhi.n	801c90c <HAL_SPI_Receive+0x208>
 801c904:	683b      	ldr	r3, [r7, #0]
 801c906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c90a:	d102      	bne.n	801c912 <HAL_SPI_Receive+0x20e>
 801c90c:	683b      	ldr	r3, [r7, #0]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d102      	bne.n	801c918 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801c912:	2303      	movs	r3, #3
 801c914:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c916:	e018      	b.n	801c94a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c91e:	b29b      	uxth	r3, r3
 801c920:	2b00      	cmp	r3, #0
 801c922:	d1ca      	bne.n	801c8ba <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c924:	693a      	ldr	r2, [r7, #16]
 801c926:	6839      	ldr	r1, [r7, #0]
 801c928:	68f8      	ldr	r0, [r7, #12]
 801c92a:	f000 fb4d 	bl	801cfc8 <SPI_EndRxTransaction>
 801c92e:	4603      	mov	r3, r0
 801c930:	2b00      	cmp	r3, #0
 801c932:	d002      	beq.n	801c93a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	2220      	movs	r2, #32
 801c938:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d002      	beq.n	801c948 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801c942:	2301      	movs	r3, #1
 801c944:	75fb      	strb	r3, [r7, #23]
 801c946:	e000      	b.n	801c94a <HAL_SPI_Receive+0x246>
  }

error :
 801c948:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	2201      	movs	r2, #1
 801c94e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	2200      	movs	r2, #0
 801c956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c95a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c95c:	4618      	mov	r0, r3
 801c95e:	3718      	adds	r7, #24
 801c960:	46bd      	mov	sp, r7
 801c962:	bd80      	pop	{r7, pc}

0801c964 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c964:	b580      	push	{r7, lr}
 801c966:	b08a      	sub	sp, #40	; 0x28
 801c968:	af00      	add	r7, sp, #0
 801c96a:	60f8      	str	r0, [r7, #12]
 801c96c:	60b9      	str	r1, [r7, #8]
 801c96e:	607a      	str	r2, [r7, #4]
 801c970:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c972:	2301      	movs	r3, #1
 801c974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c976:	2300      	movs	r3, #0
 801c978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c982:	2b01      	cmp	r3, #1
 801c984:	d101      	bne.n	801c98a <HAL_SPI_TransmitReceive+0x26>
 801c986:	2302      	movs	r3, #2
 801c988:	e1fb      	b.n	801cd82 <HAL_SPI_TransmitReceive+0x41e>
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	2201      	movs	r2, #1
 801c98e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c992:	f7fa ffd7 	bl	8017944 <HAL_GetTick>
 801c996:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c99e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	685b      	ldr	r3, [r3, #4]
 801c9a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801c9a6:	887b      	ldrh	r3, [r7, #2]
 801c9a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801c9aa:	887b      	ldrh	r3, [r7, #2]
 801c9ac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c9ae:	7efb      	ldrb	r3, [r7, #27]
 801c9b0:	2b01      	cmp	r3, #1
 801c9b2:	d00e      	beq.n	801c9d2 <HAL_SPI_TransmitReceive+0x6e>
 801c9b4:	697b      	ldr	r3, [r7, #20]
 801c9b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c9ba:	d106      	bne.n	801c9ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	689b      	ldr	r3, [r3, #8]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d102      	bne.n	801c9ca <HAL_SPI_TransmitReceive+0x66>
 801c9c4:	7efb      	ldrb	r3, [r7, #27]
 801c9c6:	2b04      	cmp	r3, #4
 801c9c8:	d003      	beq.n	801c9d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801c9ca:	2302      	movs	r3, #2
 801c9cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c9d0:	e1cd      	b.n	801cd6e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c9d2:	68bb      	ldr	r3, [r7, #8]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d005      	beq.n	801c9e4 <HAL_SPI_TransmitReceive+0x80>
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d002      	beq.n	801c9e4 <HAL_SPI_TransmitReceive+0x80>
 801c9de:	887b      	ldrh	r3, [r7, #2]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d103      	bne.n	801c9ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801c9e4:	2301      	movs	r3, #1
 801c9e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c9ea:	e1c0      	b.n	801cd6e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c9f2:	b2db      	uxtb	r3, r3
 801c9f4:	2b04      	cmp	r3, #4
 801c9f6:	d003      	beq.n	801ca00 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	2205      	movs	r2, #5
 801c9fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	2200      	movs	r2, #0
 801ca04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	687a      	ldr	r2, [r7, #4]
 801ca0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	887a      	ldrh	r2, [r7, #2]
 801ca10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	887a      	ldrh	r2, [r7, #2]
 801ca18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	68ba      	ldr	r2, [r7, #8]
 801ca20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	887a      	ldrh	r2, [r7, #2]
 801ca26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	887a      	ldrh	r2, [r7, #2]
 801ca2c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	2200      	movs	r2, #0
 801ca32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	2200      	movs	r2, #0
 801ca38:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	68db      	ldr	r3, [r3, #12]
 801ca3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ca42:	d802      	bhi.n	801ca4a <HAL_SPI_TransmitReceive+0xe6>
 801ca44:	8a3b      	ldrh	r3, [r7, #16]
 801ca46:	2b01      	cmp	r3, #1
 801ca48:	d908      	bls.n	801ca5c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	685a      	ldr	r2, [r3, #4]
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ca58:	605a      	str	r2, [r3, #4]
 801ca5a:	e007      	b.n	801ca6c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	685a      	ldr	r2, [r3, #4]
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ca6a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ca76:	2b40      	cmp	r3, #64	; 0x40
 801ca78:	d007      	beq.n	801ca8a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	681a      	ldr	r2, [r3, #0]
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ca88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	68db      	ldr	r3, [r3, #12]
 801ca8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ca92:	d97c      	bls.n	801cb8e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	685b      	ldr	r3, [r3, #4]
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d002      	beq.n	801caa2 <HAL_SPI_TransmitReceive+0x13e>
 801ca9c:	8a7b      	ldrh	r3, [r7, #18]
 801ca9e:	2b01      	cmp	r3, #1
 801caa0:	d169      	bne.n	801cb76 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801caa6:	881a      	ldrh	r2, [r3, #0]
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cab2:	1c9a      	adds	r2, r3, #2
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cabc:	b29b      	uxth	r3, r3
 801cabe:	3b01      	subs	r3, #1
 801cac0:	b29a      	uxth	r2, r3
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cac6:	e056      	b.n	801cb76 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	689b      	ldr	r3, [r3, #8]
 801cace:	f003 0302 	and.w	r3, r3, #2
 801cad2:	2b02      	cmp	r3, #2
 801cad4:	d11b      	bne.n	801cb0e <HAL_SPI_TransmitReceive+0x1aa>
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cada:	b29b      	uxth	r3, r3
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d016      	beq.n	801cb0e <HAL_SPI_TransmitReceive+0x1aa>
 801cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cae2:	2b01      	cmp	r3, #1
 801cae4:	d113      	bne.n	801cb0e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801caea:	881a      	ldrh	r2, [r3, #0]
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801caf6:	1c9a      	adds	r2, r3, #2
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801cafc:	68fb      	ldr	r3, [r7, #12]
 801cafe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb00:	b29b      	uxth	r3, r3
 801cb02:	3b01      	subs	r3, #1
 801cb04:	b29a      	uxth	r2, r3
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	689b      	ldr	r3, [r3, #8]
 801cb14:	f003 0301 	and.w	r3, r3, #1
 801cb18:	2b01      	cmp	r3, #1
 801cb1a:	d11c      	bne.n	801cb56 <HAL_SPI_TransmitReceive+0x1f2>
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801cb22:	b29b      	uxth	r3, r3
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d016      	beq.n	801cb56 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	68da      	ldr	r2, [r3, #12]
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb32:	b292      	uxth	r2, r2
 801cb34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb3a:	1c9a      	adds	r2, r3, #2
 801cb3c:	68fb      	ldr	r3, [r7, #12]
 801cb3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801cb46:	b29b      	uxth	r3, r3
 801cb48:	3b01      	subs	r3, #1
 801cb4a:	b29a      	uxth	r2, r3
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cb52:	2301      	movs	r3, #1
 801cb54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801cb56:	f7fa fef5 	bl	8017944 <HAL_GetTick>
 801cb5a:	4602      	mov	r2, r0
 801cb5c:	69fb      	ldr	r3, [r7, #28]
 801cb5e:	1ad3      	subs	r3, r2, r3
 801cb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cb62:	429a      	cmp	r2, r3
 801cb64:	d807      	bhi.n	801cb76 <HAL_SPI_TransmitReceive+0x212>
 801cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb6c:	d003      	beq.n	801cb76 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801cb6e:	2303      	movs	r3, #3
 801cb70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801cb74:	e0fb      	b.n	801cd6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb7a:	b29b      	uxth	r3, r3
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d1a3      	bne.n	801cac8 <HAL_SPI_TransmitReceive+0x164>
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d19d      	bne.n	801cac8 <HAL_SPI_TransmitReceive+0x164>
 801cb8c:	e0df      	b.n	801cd4e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	685b      	ldr	r3, [r3, #4]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d003      	beq.n	801cb9e <HAL_SPI_TransmitReceive+0x23a>
 801cb96:	8a7b      	ldrh	r3, [r7, #18]
 801cb98:	2b01      	cmp	r3, #1
 801cb9a:	f040 80cb 	bne.w	801cd34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cba2:	b29b      	uxth	r3, r3
 801cba4:	2b01      	cmp	r3, #1
 801cba6:	d912      	bls.n	801cbce <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbac:	881a      	ldrh	r2, [r3, #0]
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbb8:	1c9a      	adds	r2, r3, #2
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cbc2:	b29b      	uxth	r3, r3
 801cbc4:	3b02      	subs	r3, #2
 801cbc6:	b29a      	uxth	r2, r3
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cbcc:	e0b2      	b.n	801cd34 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	330c      	adds	r3, #12
 801cbd8:	7812      	ldrb	r2, [r2, #0]
 801cbda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbe0:	1c5a      	adds	r2, r3, #1
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cbea:	b29b      	uxth	r3, r3
 801cbec:	3b01      	subs	r3, #1
 801cbee:	b29a      	uxth	r2, r3
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cbf4:	e09e      	b.n	801cd34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	689b      	ldr	r3, [r3, #8]
 801cbfc:	f003 0302 	and.w	r3, r3, #2
 801cc00:	2b02      	cmp	r3, #2
 801cc02:	d134      	bne.n	801cc6e <HAL_SPI_TransmitReceive+0x30a>
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc08:	b29b      	uxth	r3, r3
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d02f      	beq.n	801cc6e <HAL_SPI_TransmitReceive+0x30a>
 801cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc10:	2b01      	cmp	r3, #1
 801cc12:	d12c      	bne.n	801cc6e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc18:	b29b      	uxth	r3, r3
 801cc1a:	2b01      	cmp	r3, #1
 801cc1c:	d912      	bls.n	801cc44 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc22:	881a      	ldrh	r2, [r3, #0]
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc2e:	1c9a      	adds	r2, r3, #2
 801cc30:	68fb      	ldr	r3, [r7, #12]
 801cc32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc38:	b29b      	uxth	r3, r3
 801cc3a:	3b02      	subs	r3, #2
 801cc3c:	b29a      	uxth	r2, r3
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cc42:	e012      	b.n	801cc6a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	330c      	adds	r3, #12
 801cc4e:	7812      	ldrb	r2, [r2, #0]
 801cc50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc56:	1c5a      	adds	r2, r3, #1
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cc60:	b29b      	uxth	r3, r3
 801cc62:	3b01      	subs	r3, #1
 801cc64:	b29a      	uxth	r2, r3
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	689b      	ldr	r3, [r3, #8]
 801cc74:	f003 0301 	and.w	r3, r3, #1
 801cc78:	2b01      	cmp	r3, #1
 801cc7a:	d148      	bne.n	801cd0e <HAL_SPI_TransmitReceive+0x3aa>
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801cc82:	b29b      	uxth	r3, r3
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d042      	beq.n	801cd0e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801cc8e:	b29b      	uxth	r3, r3
 801cc90:	2b01      	cmp	r3, #1
 801cc92:	d923      	bls.n	801ccdc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	68da      	ldr	r2, [r3, #12]
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc9e:	b292      	uxth	r2, r2
 801cca0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cca6:	1c9a      	adds	r2, r3, #2
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801ccac:	68fb      	ldr	r3, [r7, #12]
 801ccae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ccb2:	b29b      	uxth	r3, r3
 801ccb4:	3b02      	subs	r3, #2
 801ccb6:	b29a      	uxth	r2, r3
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ccc4:	b29b      	uxth	r3, r3
 801ccc6:	2b01      	cmp	r3, #1
 801ccc8:	d81f      	bhi.n	801cd0a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	685a      	ldr	r2, [r3, #4]
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ccd8:	605a      	str	r2, [r3, #4]
 801ccda:	e016      	b.n	801cd0a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	f103 020c 	add.w	r2, r3, #12
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cce8:	7812      	ldrb	r2, [r2, #0]
 801ccea:	b2d2      	uxtb	r2, r2
 801ccec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ccf2:	1c5a      	adds	r2, r3, #1
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ccfe:	b29b      	uxth	r3, r3
 801cd00:	3b01      	subs	r3, #1
 801cd02:	b29a      	uxth	r2, r3
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cd0a:	2301      	movs	r3, #1
 801cd0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801cd0e:	f7fa fe19 	bl	8017944 <HAL_GetTick>
 801cd12:	4602      	mov	r2, r0
 801cd14:	69fb      	ldr	r3, [r7, #28]
 801cd16:	1ad3      	subs	r3, r2, r3
 801cd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d803      	bhi.n	801cd26 <HAL_SPI_TransmitReceive+0x3c2>
 801cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd24:	d102      	bne.n	801cd2c <HAL_SPI_TransmitReceive+0x3c8>
 801cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d103      	bne.n	801cd34 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801cd2c:	2303      	movs	r3, #3
 801cd2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801cd32:	e01c      	b.n	801cd6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cd38:	b29b      	uxth	r3, r3
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	f47f af5b 	bne.w	801cbf6 <HAL_SPI_TransmitReceive+0x292>
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801cd46:	b29b      	uxth	r3, r3
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	f47f af54 	bne.w	801cbf6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801cd4e:	69fa      	ldr	r2, [r7, #28]
 801cd50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cd52:	68f8      	ldr	r0, [r7, #12]
 801cd54:	f000 f9b4 	bl	801d0c0 <SPI_EndRxTxTransaction>
 801cd58:	4603      	mov	r3, r0
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d006      	beq.n	801cd6c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801cd5e:	2301      	movs	r3, #1
 801cd60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801cd64:	68fb      	ldr	r3, [r7, #12]
 801cd66:	2220      	movs	r2, #32
 801cd68:	661a      	str	r2, [r3, #96]	; 0x60
 801cd6a:	e000      	b.n	801cd6e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801cd6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	2201      	movs	r2, #1
 801cd72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	2200      	movs	r2, #0
 801cd7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801cd7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801cd82:	4618      	mov	r0, r3
 801cd84:	3728      	adds	r7, #40	; 0x28
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bd80      	pop	{r7, pc}
	...

0801cd8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b088      	sub	sp, #32
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	60f8      	str	r0, [r7, #12]
 801cd94:	60b9      	str	r1, [r7, #8]
 801cd96:	603b      	str	r3, [r7, #0]
 801cd98:	4613      	mov	r3, r2
 801cd9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cd9c:	f7fa fdd2 	bl	8017944 <HAL_GetTick>
 801cda0:	4602      	mov	r2, r0
 801cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cda4:	1a9b      	subs	r3, r3, r2
 801cda6:	683a      	ldr	r2, [r7, #0]
 801cda8:	4413      	add	r3, r2
 801cdaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cdac:	f7fa fdca 	bl	8017944 <HAL_GetTick>
 801cdb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cdb2:	4b39      	ldr	r3, [pc, #228]	; (801ce98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	015b      	lsls	r3, r3, #5
 801cdb8:	0d1b      	lsrs	r3, r3, #20
 801cdba:	69fa      	ldr	r2, [r7, #28]
 801cdbc:	fb02 f303 	mul.w	r3, r2, r3
 801cdc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cdc2:	e054      	b.n	801ce6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cdc4:	683b      	ldr	r3, [r7, #0]
 801cdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cdca:	d050      	beq.n	801ce6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cdcc:	f7fa fdba 	bl	8017944 <HAL_GetTick>
 801cdd0:	4602      	mov	r2, r0
 801cdd2:	69bb      	ldr	r3, [r7, #24]
 801cdd4:	1ad3      	subs	r3, r2, r3
 801cdd6:	69fa      	ldr	r2, [r7, #28]
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	d902      	bls.n	801cde2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801cddc:	69fb      	ldr	r3, [r7, #28]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d13d      	bne.n	801ce5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cde2:	68fb      	ldr	r3, [r7, #12]
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	685a      	ldr	r2, [r3, #4]
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cdf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cdf2:	68fb      	ldr	r3, [r7, #12]
 801cdf4:	685b      	ldr	r3, [r3, #4]
 801cdf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cdfa:	d111      	bne.n	801ce20 <SPI_WaitFlagStateUntilTimeout+0x94>
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	689b      	ldr	r3, [r3, #8]
 801ce00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ce04:	d004      	beq.n	801ce10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	689b      	ldr	r3, [r3, #8]
 801ce0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ce0e:	d107      	bne.n	801ce20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	681a      	ldr	r2, [r3, #0]
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ce1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ce28:	d10f      	bne.n	801ce4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	681a      	ldr	r2, [r3, #0]
 801ce30:	68fb      	ldr	r3, [r7, #12]
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ce38:	601a      	str	r2, [r3, #0]
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	681a      	ldr	r2, [r3, #0]
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ce48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	2201      	movs	r2, #1
 801ce4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	2200      	movs	r2, #0
 801ce56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ce5a:	2303      	movs	r3, #3
 801ce5c:	e017      	b.n	801ce8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ce5e:	697b      	ldr	r3, [r7, #20]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d101      	bne.n	801ce68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801ce64:	2300      	movs	r3, #0
 801ce66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801ce68:	697b      	ldr	r3, [r7, #20]
 801ce6a:	3b01      	subs	r3, #1
 801ce6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	689a      	ldr	r2, [r3, #8]
 801ce74:	68bb      	ldr	r3, [r7, #8]
 801ce76:	4013      	ands	r3, r2
 801ce78:	68ba      	ldr	r2, [r7, #8]
 801ce7a:	429a      	cmp	r2, r3
 801ce7c:	bf0c      	ite	eq
 801ce7e:	2301      	moveq	r3, #1
 801ce80:	2300      	movne	r3, #0
 801ce82:	b2db      	uxtb	r3, r3
 801ce84:	461a      	mov	r2, r3
 801ce86:	79fb      	ldrb	r3, [r7, #7]
 801ce88:	429a      	cmp	r2, r3
 801ce8a:	d19b      	bne.n	801cdc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801ce8c:	2300      	movs	r3, #0
}
 801ce8e:	4618      	mov	r0, r3
 801ce90:	3720      	adds	r7, #32
 801ce92:	46bd      	mov	sp, r7
 801ce94:	bd80      	pop	{r7, pc}
 801ce96:	bf00      	nop
 801ce98:	2000011c 	.word	0x2000011c

0801ce9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b08a      	sub	sp, #40	; 0x28
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	60f8      	str	r0, [r7, #12]
 801cea4:	60b9      	str	r1, [r7, #8]
 801cea6:	607a      	str	r2, [r7, #4]
 801cea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801ceaa:	2300      	movs	r3, #0
 801ceac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801ceae:	f7fa fd49 	bl	8017944 <HAL_GetTick>
 801ceb2:	4602      	mov	r2, r0
 801ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ceb6:	1a9b      	subs	r3, r3, r2
 801ceb8:	683a      	ldr	r2, [r7, #0]
 801ceba:	4413      	add	r3, r2
 801cebc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801cebe:	f7fa fd41 	bl	8017944 <HAL_GetTick>
 801cec2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	330c      	adds	r3, #12
 801ceca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801cecc:	4b3d      	ldr	r3, [pc, #244]	; (801cfc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801cece:	681a      	ldr	r2, [r3, #0]
 801ced0:	4613      	mov	r3, r2
 801ced2:	009b      	lsls	r3, r3, #2
 801ced4:	4413      	add	r3, r2
 801ced6:	00da      	lsls	r2, r3, #3
 801ced8:	1ad3      	subs	r3, r2, r3
 801ceda:	0d1b      	lsrs	r3, r3, #20
 801cedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cede:	fb02 f303 	mul.w	r3, r2, r3
 801cee2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801cee4:	e060      	b.n	801cfa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801cee6:	68bb      	ldr	r3, [r7, #8]
 801cee8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801ceec:	d107      	bne.n	801cefe <SPI_WaitFifoStateUntilTimeout+0x62>
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d104      	bne.n	801cefe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	781b      	ldrb	r3, [r3, #0]
 801cef8:	b2db      	uxtb	r3, r3
 801cefa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801cefc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801cefe:	683b      	ldr	r3, [r7, #0]
 801cf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf04:	d050      	beq.n	801cfa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cf06:	f7fa fd1d 	bl	8017944 <HAL_GetTick>
 801cf0a:	4602      	mov	r2, r0
 801cf0c:	6a3b      	ldr	r3, [r7, #32]
 801cf0e:	1ad3      	subs	r3, r2, r3
 801cf10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf12:	429a      	cmp	r2, r3
 801cf14:	d902      	bls.n	801cf1c <SPI_WaitFifoStateUntilTimeout+0x80>
 801cf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d13d      	bne.n	801cf98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	685a      	ldr	r2, [r3, #4]
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cf2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	685b      	ldr	r3, [r3, #4]
 801cf30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cf34:	d111      	bne.n	801cf5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	689b      	ldr	r3, [r3, #8]
 801cf3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cf3e:	d004      	beq.n	801cf4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	689b      	ldr	r3, [r3, #8]
 801cf44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cf48:	d107      	bne.n	801cf5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	681a      	ldr	r2, [r3, #0]
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cf58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cf62:	d10f      	bne.n	801cf84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	681a      	ldr	r2, [r3, #0]
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cf72:	601a      	str	r2, [r3, #0]
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	681a      	ldr	r2, [r3, #0]
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cf82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	2201      	movs	r2, #1
 801cf88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	2200      	movs	r2, #0
 801cf90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801cf94:	2303      	movs	r3, #3
 801cf96:	e010      	b.n	801cfba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cf98:	69bb      	ldr	r3, [r7, #24]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d101      	bne.n	801cfa2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801cfa2:	69bb      	ldr	r3, [r7, #24]
 801cfa4:	3b01      	subs	r3, #1
 801cfa6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	689a      	ldr	r2, [r3, #8]
 801cfae:	68bb      	ldr	r3, [r7, #8]
 801cfb0:	4013      	ands	r3, r2
 801cfb2:	687a      	ldr	r2, [r7, #4]
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	d196      	bne.n	801cee6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801cfb8:	2300      	movs	r3, #0
}
 801cfba:	4618      	mov	r0, r3
 801cfbc:	3728      	adds	r7, #40	; 0x28
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	bd80      	pop	{r7, pc}
 801cfc2:	bf00      	nop
 801cfc4:	2000011c 	.word	0x2000011c

0801cfc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cfc8:	b580      	push	{r7, lr}
 801cfca:	b088      	sub	sp, #32
 801cfcc:	af02      	add	r7, sp, #8
 801cfce:	60f8      	str	r0, [r7, #12]
 801cfd0:	60b9      	str	r1, [r7, #8]
 801cfd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	685b      	ldr	r3, [r3, #4]
 801cfd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cfdc:	d111      	bne.n	801d002 <SPI_EndRxTransaction+0x3a>
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	689b      	ldr	r3, [r3, #8]
 801cfe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cfe6:	d004      	beq.n	801cff2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	689b      	ldr	r3, [r3, #8]
 801cfec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cff0:	d107      	bne.n	801d002 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	681a      	ldr	r2, [r3, #0]
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d000:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	685b      	ldr	r3, [r3, #4]
 801d006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d00a:	d112      	bne.n	801d032 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	9300      	str	r3, [sp, #0]
 801d010:	68bb      	ldr	r3, [r7, #8]
 801d012:	2200      	movs	r2, #0
 801d014:	2180      	movs	r1, #128	; 0x80
 801d016:	68f8      	ldr	r0, [r7, #12]
 801d018:	f7ff feb8 	bl	801cd8c <SPI_WaitFlagStateUntilTimeout>
 801d01c:	4603      	mov	r3, r0
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d021      	beq.n	801d066 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d026:	f043 0220 	orr.w	r2, r3, #32
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801d02e:	2303      	movs	r3, #3
 801d030:	e03d      	b.n	801d0ae <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801d032:	4b21      	ldr	r3, [pc, #132]	; (801d0b8 <SPI_EndRxTransaction+0xf0>)
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	4a21      	ldr	r2, [pc, #132]	; (801d0bc <SPI_EndRxTransaction+0xf4>)
 801d038:	fba2 2303 	umull	r2, r3, r2, r3
 801d03c:	0d5b      	lsrs	r3, r3, #21
 801d03e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d042:	fb02 f303 	mul.w	r3, r2, r3
 801d046:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801d048:	697b      	ldr	r3, [r7, #20]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d00a      	beq.n	801d064 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801d04e:	697b      	ldr	r3, [r7, #20]
 801d050:	3b01      	subs	r3, #1
 801d052:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	689b      	ldr	r3, [r3, #8]
 801d05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d05e:	2b80      	cmp	r3, #128	; 0x80
 801d060:	d0f2      	beq.n	801d048 <SPI_EndRxTransaction+0x80>
 801d062:	e000      	b.n	801d066 <SPI_EndRxTransaction+0x9e>
        break;
 801d064:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	685b      	ldr	r3, [r3, #4]
 801d06a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d06e:	d11d      	bne.n	801d0ac <SPI_EndRxTransaction+0xe4>
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	689b      	ldr	r3, [r3, #8]
 801d074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d078:	d004      	beq.n	801d084 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	689b      	ldr	r3, [r3, #8]
 801d07e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d082:	d113      	bne.n	801d0ac <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	9300      	str	r3, [sp, #0]
 801d088:	68bb      	ldr	r3, [r7, #8]
 801d08a:	2200      	movs	r2, #0
 801d08c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801d090:	68f8      	ldr	r0, [r7, #12]
 801d092:	f7ff ff03 	bl	801ce9c <SPI_WaitFifoStateUntilTimeout>
 801d096:	4603      	mov	r3, r0
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d007      	beq.n	801d0ac <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d0a0:	f043 0220 	orr.w	r2, r3, #32
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801d0a8:	2303      	movs	r3, #3
 801d0aa:	e000      	b.n	801d0ae <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801d0ac:	2300      	movs	r3, #0
}
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	3718      	adds	r7, #24
 801d0b2:	46bd      	mov	sp, r7
 801d0b4:	bd80      	pop	{r7, pc}
 801d0b6:	bf00      	nop
 801d0b8:	2000011c 	.word	0x2000011c
 801d0bc:	165e9f81 	.word	0x165e9f81

0801d0c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b088      	sub	sp, #32
 801d0c4:	af02      	add	r7, sp, #8
 801d0c6:	60f8      	str	r0, [r7, #12]
 801d0c8:	60b9      	str	r1, [r7, #8]
 801d0ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	9300      	str	r3, [sp, #0]
 801d0d0:	68bb      	ldr	r3, [r7, #8]
 801d0d2:	2200      	movs	r2, #0
 801d0d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801d0d8:	68f8      	ldr	r0, [r7, #12]
 801d0da:	f7ff fedf 	bl	801ce9c <SPI_WaitFifoStateUntilTimeout>
 801d0de:	4603      	mov	r3, r0
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d007      	beq.n	801d0f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d0e4:	68fb      	ldr	r3, [r7, #12]
 801d0e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d0e8:	f043 0220 	orr.w	r2, r3, #32
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801d0f0:	2303      	movs	r3, #3
 801d0f2:	e046      	b.n	801d182 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801d0f4:	4b25      	ldr	r3, [pc, #148]	; (801d18c <SPI_EndRxTxTransaction+0xcc>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	4a25      	ldr	r2, [pc, #148]	; (801d190 <SPI_EndRxTxTransaction+0xd0>)
 801d0fa:	fba2 2303 	umull	r2, r3, r2, r3
 801d0fe:	0d5b      	lsrs	r3, r3, #21
 801d100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d104:	fb02 f303 	mul.w	r3, r2, r3
 801d108:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	685b      	ldr	r3, [r3, #4]
 801d10e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d112:	d112      	bne.n	801d13a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	9300      	str	r3, [sp, #0]
 801d118:	68bb      	ldr	r3, [r7, #8]
 801d11a:	2200      	movs	r2, #0
 801d11c:	2180      	movs	r1, #128	; 0x80
 801d11e:	68f8      	ldr	r0, [r7, #12]
 801d120:	f7ff fe34 	bl	801cd8c <SPI_WaitFlagStateUntilTimeout>
 801d124:	4603      	mov	r3, r0
 801d126:	2b00      	cmp	r3, #0
 801d128:	d016      	beq.n	801d158 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d12e:	f043 0220 	orr.w	r2, r3, #32
 801d132:	68fb      	ldr	r3, [r7, #12]
 801d134:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801d136:	2303      	movs	r3, #3
 801d138:	e023      	b.n	801d182 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801d13a:	697b      	ldr	r3, [r7, #20]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d00a      	beq.n	801d156 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801d140:	697b      	ldr	r3, [r7, #20]
 801d142:	3b01      	subs	r3, #1
 801d144:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	689b      	ldr	r3, [r3, #8]
 801d14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d150:	2b80      	cmp	r3, #128	; 0x80
 801d152:	d0f2      	beq.n	801d13a <SPI_EndRxTxTransaction+0x7a>
 801d154:	e000      	b.n	801d158 <SPI_EndRxTxTransaction+0x98>
        break;
 801d156:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	9300      	str	r3, [sp, #0]
 801d15c:	68bb      	ldr	r3, [r7, #8]
 801d15e:	2200      	movs	r2, #0
 801d160:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801d164:	68f8      	ldr	r0, [r7, #12]
 801d166:	f7ff fe99 	bl	801ce9c <SPI_WaitFifoStateUntilTimeout>
 801d16a:	4603      	mov	r3, r0
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d007      	beq.n	801d180 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d174:	f043 0220 	orr.w	r2, r3, #32
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801d17c:	2303      	movs	r3, #3
 801d17e:	e000      	b.n	801d182 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801d180:	2300      	movs	r3, #0
}
 801d182:	4618      	mov	r0, r3
 801d184:	3718      	adds	r7, #24
 801d186:	46bd      	mov	sp, r7
 801d188:	bd80      	pop	{r7, pc}
 801d18a:	bf00      	nop
 801d18c:	2000011c 	.word	0x2000011c
 801d190:	165e9f81 	.word	0x165e9f81

0801d194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b082      	sub	sp, #8
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	691b      	ldr	r3, [r3, #16]
 801d1a2:	f003 0302 	and.w	r3, r3, #2
 801d1a6:	2b02      	cmp	r3, #2
 801d1a8:	d128      	bne.n	801d1fc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	68db      	ldr	r3, [r3, #12]
 801d1b0:	f003 0302 	and.w	r3, r3, #2
 801d1b4:	2b02      	cmp	r3, #2
 801d1b6:	d121      	bne.n	801d1fc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	f06f 0202 	mvn.w	r2, #2
 801d1c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	2201      	movs	r2, #1
 801d1c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	699b      	ldr	r3, [r3, #24]
 801d1ce:	f003 0303 	and.w	r3, r3, #3
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d005      	beq.n	801d1e2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d1dc:	6878      	ldr	r0, [r7, #4]
 801d1de:	4798      	blx	r3
 801d1e0:	e009      	b.n	801d1f6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d1e8:	6878      	ldr	r0, [r7, #4]
 801d1ea:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d1f2:	6878      	ldr	r0, [r7, #4]
 801d1f4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	2200      	movs	r2, #0
 801d1fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	691b      	ldr	r3, [r3, #16]
 801d202:	f003 0304 	and.w	r3, r3, #4
 801d206:	2b04      	cmp	r3, #4
 801d208:	d128      	bne.n	801d25c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	68db      	ldr	r3, [r3, #12]
 801d210:	f003 0304 	and.w	r3, r3, #4
 801d214:	2b04      	cmp	r3, #4
 801d216:	d121      	bne.n	801d25c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	f06f 0204 	mvn.w	r2, #4
 801d220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	2202      	movs	r2, #2
 801d226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	699b      	ldr	r3, [r3, #24]
 801d22e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d232:	2b00      	cmp	r3, #0
 801d234:	d005      	beq.n	801d242 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d23c:	6878      	ldr	r0, [r7, #4]
 801d23e:	4798      	blx	r3
 801d240:	e009      	b.n	801d256 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d248:	6878      	ldr	r0, [r7, #4]
 801d24a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d252:	6878      	ldr	r0, [r7, #4]
 801d254:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	2200      	movs	r2, #0
 801d25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	691b      	ldr	r3, [r3, #16]
 801d262:	f003 0308 	and.w	r3, r3, #8
 801d266:	2b08      	cmp	r3, #8
 801d268:	d128      	bne.n	801d2bc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	68db      	ldr	r3, [r3, #12]
 801d270:	f003 0308 	and.w	r3, r3, #8
 801d274:	2b08      	cmp	r3, #8
 801d276:	d121      	bne.n	801d2bc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	f06f 0208 	mvn.w	r2, #8
 801d280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	2204      	movs	r2, #4
 801d286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	69db      	ldr	r3, [r3, #28]
 801d28e:	f003 0303 	and.w	r3, r3, #3
 801d292:	2b00      	cmp	r3, #0
 801d294:	d005      	beq.n	801d2a2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d29c:	6878      	ldr	r0, [r7, #4]
 801d29e:	4798      	blx	r3
 801d2a0:	e009      	b.n	801d2b6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d2a8:	6878      	ldr	r0, [r7, #4]
 801d2aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d2b2:	6878      	ldr	r0, [r7, #4]
 801d2b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	691b      	ldr	r3, [r3, #16]
 801d2c2:	f003 0310 	and.w	r3, r3, #16
 801d2c6:	2b10      	cmp	r3, #16
 801d2c8:	d128      	bne.n	801d31c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	68db      	ldr	r3, [r3, #12]
 801d2d0:	f003 0310 	and.w	r3, r3, #16
 801d2d4:	2b10      	cmp	r3, #16
 801d2d6:	d121      	bne.n	801d31c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	f06f 0210 	mvn.w	r2, #16
 801d2e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	2208      	movs	r2, #8
 801d2e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	69db      	ldr	r3, [r3, #28]
 801d2ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d005      	beq.n	801d302 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d2fc:	6878      	ldr	r0, [r7, #4]
 801d2fe:	4798      	blx	r3
 801d300:	e009      	b.n	801d316 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d308:	6878      	ldr	r0, [r7, #4]
 801d30a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d312:	6878      	ldr	r0, [r7, #4]
 801d314:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	2200      	movs	r2, #0
 801d31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	691b      	ldr	r3, [r3, #16]
 801d322:	f003 0301 	and.w	r3, r3, #1
 801d326:	2b01      	cmp	r3, #1
 801d328:	d110      	bne.n	801d34c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	68db      	ldr	r3, [r3, #12]
 801d330:	f003 0301 	and.w	r3, r3, #1
 801d334:	2b01      	cmp	r3, #1
 801d336:	d109      	bne.n	801d34c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	f06f 0201 	mvn.w	r2, #1
 801d340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d348:	6878      	ldr	r0, [r7, #4]
 801d34a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	691b      	ldr	r3, [r3, #16]
 801d352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d356:	2b80      	cmp	r3, #128	; 0x80
 801d358:	d110      	bne.n	801d37c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	68db      	ldr	r3, [r3, #12]
 801d360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d364:	2b80      	cmp	r3, #128	; 0x80
 801d366:	d109      	bne.n	801d37c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801d378:	6878      	ldr	r0, [r7, #4]
 801d37a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	691b      	ldr	r3, [r3, #16]
 801d382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d38a:	d110      	bne.n	801d3ae <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	68db      	ldr	r3, [r3, #12]
 801d392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d396:	2b80      	cmp	r3, #128	; 0x80
 801d398:	d109      	bne.n	801d3ae <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d3a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801d3aa:	6878      	ldr	r0, [r7, #4]
 801d3ac:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	691b      	ldr	r3, [r3, #16]
 801d3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3b8:	2b40      	cmp	r3, #64	; 0x40
 801d3ba:	d110      	bne.n	801d3de <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	68db      	ldr	r3, [r3, #12]
 801d3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3c6:	2b40      	cmp	r3, #64	; 0x40
 801d3c8:	d109      	bne.n	801d3de <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d3da:	6878      	ldr	r0, [r7, #4]
 801d3dc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	691b      	ldr	r3, [r3, #16]
 801d3e4:	f003 0320 	and.w	r3, r3, #32
 801d3e8:	2b20      	cmp	r3, #32
 801d3ea:	d110      	bne.n	801d40e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	68db      	ldr	r3, [r3, #12]
 801d3f2:	f003 0320 	and.w	r3, r3, #32
 801d3f6:	2b20      	cmp	r3, #32
 801d3f8:	d109      	bne.n	801d40e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	f06f 0220 	mvn.w	r2, #32
 801d402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d40e:	bf00      	nop
 801d410:	3708      	adds	r7, #8
 801d412:	46bd      	mov	sp, r7
 801d414:	bd80      	pop	{r7, pc}
	...

0801d418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d418:	b580      	push	{r7, lr}
 801d41a:	b082      	sub	sp, #8
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d101      	bne.n	801d42a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d426:	2301      	movs	r3, #1
 801d428:	e04e      	b.n	801d4c8 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d114      	bne.n	801d45c <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	2200      	movs	r2, #0
 801d436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d43a:	6878      	ldr	r0, [r7, #4]
 801d43c:	f000 fc1c 	bl	801dc78 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801d446:	2b00      	cmp	r3, #0
 801d448:	d103      	bne.n	801d452 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	4a20      	ldr	r2, [pc, #128]	; (801d4d0 <HAL_UART_Init+0xb8>)
 801d44e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801d458:	6878      	ldr	r0, [r7, #4]
 801d45a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	2224      	movs	r2, #36	; 0x24
 801d460:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	681a      	ldr	r2, [r3, #0]
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	f022 0201 	bic.w	r2, r2, #1
 801d470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d472:	6878      	ldr	r0, [r7, #4]
 801d474:	f000 fc46 	bl	801dd04 <UART_SetConfig>
 801d478:	4603      	mov	r3, r0
 801d47a:	2b01      	cmp	r3, #1
 801d47c:	d101      	bne.n	801d482 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801d47e:	2301      	movs	r3, #1
 801d480:	e022      	b.n	801d4c8 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d486:	2b00      	cmp	r3, #0
 801d488:	d002      	beq.n	801d490 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801d48a:	6878      	ldr	r0, [r7, #4]
 801d48c:	f000 fe9e 	bl	801e1cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	685a      	ldr	r2, [r3, #4]
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801d49e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	689a      	ldr	r2, [r3, #8]
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	681b      	ldr	r3, [r3, #0]
 801d4aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801d4ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	681a      	ldr	r2, [r3, #0]
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	f042 0201 	orr.w	r2, r2, #1
 801d4be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d4c0:	6878      	ldr	r0, [r7, #4]
 801d4c2:	f000 ff25 	bl	801e310 <UART_CheckIdleState>
 801d4c6:	4603      	mov	r3, r0
}
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	3708      	adds	r7, #8
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	bd80      	pop	{r7, pc}
 801d4d0:	08016d19 	.word	0x08016d19

0801d4d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d4d4:	b580      	push	{r7, lr}
 801d4d6:	b08a      	sub	sp, #40	; 0x28
 801d4d8:	af02      	add	r7, sp, #8
 801d4da:	60f8      	str	r0, [r7, #12]
 801d4dc:	60b9      	str	r1, [r7, #8]
 801d4de:	603b      	str	r3, [r7, #0]
 801d4e0:	4613      	mov	r3, r2
 801d4e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d4e8:	2b20      	cmp	r3, #32
 801d4ea:	d171      	bne.n	801d5d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801d4ec:	68bb      	ldr	r3, [r7, #8]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d002      	beq.n	801d4f8 <HAL_UART_Transmit+0x24>
 801d4f2:	88fb      	ldrh	r3, [r7, #6]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d101      	bne.n	801d4fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801d4f8:	2301      	movs	r3, #1
 801d4fa:	e06a      	b.n	801d5d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	2200      	movs	r2, #0
 801d500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	2221      	movs	r2, #33	; 0x21
 801d508:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d50a:	f7fa fa1b 	bl	8017944 <HAL_GetTick>
 801d50e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	88fa      	ldrh	r2, [r7, #6]
 801d514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	88fa      	ldrh	r2, [r7, #6]
 801d51c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	689b      	ldr	r3, [r3, #8]
 801d524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d528:	d108      	bne.n	801d53c <HAL_UART_Transmit+0x68>
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	691b      	ldr	r3, [r3, #16]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d104      	bne.n	801d53c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801d532:	2300      	movs	r3, #0
 801d534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d536:	68bb      	ldr	r3, [r7, #8]
 801d538:	61bb      	str	r3, [r7, #24]
 801d53a:	e003      	b.n	801d544 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801d53c:	68bb      	ldr	r3, [r7, #8]
 801d53e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d540:	2300      	movs	r3, #0
 801d542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d544:	e02c      	b.n	801d5a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d546:	683b      	ldr	r3, [r7, #0]
 801d548:	9300      	str	r3, [sp, #0]
 801d54a:	697b      	ldr	r3, [r7, #20]
 801d54c:	2200      	movs	r2, #0
 801d54e:	2180      	movs	r1, #128	; 0x80
 801d550:	68f8      	ldr	r0, [r7, #12]
 801d552:	f000 ff2a 	bl	801e3aa <UART_WaitOnFlagUntilTimeout>
 801d556:	4603      	mov	r3, r0
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d001      	beq.n	801d560 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801d55c:	2303      	movs	r3, #3
 801d55e:	e038      	b.n	801d5d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801d560:	69fb      	ldr	r3, [r7, #28]
 801d562:	2b00      	cmp	r3, #0
 801d564:	d10b      	bne.n	801d57e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d566:	69bb      	ldr	r3, [r7, #24]
 801d568:	881b      	ldrh	r3, [r3, #0]
 801d56a:	461a      	mov	r2, r3
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801d574:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801d576:	69bb      	ldr	r3, [r7, #24]
 801d578:	3302      	adds	r3, #2
 801d57a:	61bb      	str	r3, [r7, #24]
 801d57c:	e007      	b.n	801d58e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d57e:	69fb      	ldr	r3, [r7, #28]
 801d580:	781a      	ldrb	r2, [r3, #0]
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801d588:	69fb      	ldr	r3, [r7, #28]
 801d58a:	3301      	adds	r3, #1
 801d58c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801d594:	b29b      	uxth	r3, r3
 801d596:	3b01      	subs	r3, #1
 801d598:	b29a      	uxth	r2, r3
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801d5a6:	b29b      	uxth	r3, r3
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d1cc      	bne.n	801d546 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d5ac:	683b      	ldr	r3, [r7, #0]
 801d5ae:	9300      	str	r3, [sp, #0]
 801d5b0:	697b      	ldr	r3, [r7, #20]
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	2140      	movs	r1, #64	; 0x40
 801d5b6:	68f8      	ldr	r0, [r7, #12]
 801d5b8:	f000 fef7 	bl	801e3aa <UART_WaitOnFlagUntilTimeout>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d001      	beq.n	801d5c6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801d5c2:	2303      	movs	r3, #3
 801d5c4:	e005      	b.n	801d5d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	2220      	movs	r2, #32
 801d5ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801d5cc:	2300      	movs	r3, #0
 801d5ce:	e000      	b.n	801d5d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801d5d0:	2302      	movs	r3, #2
  }
}
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	3720      	adds	r7, #32
 801d5d6:	46bd      	mov	sp, r7
 801d5d8:	bd80      	pop	{r7, pc}
	...

0801d5dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d5dc:	b580      	push	{r7, lr}
 801d5de:	b0ba      	sub	sp, #232	; 0xe8
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	69db      	ldr	r3, [r3, #28]
 801d5ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	689b      	ldr	r3, [r3, #8]
 801d5fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d602:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801d606:	f640 030f 	movw	r3, #2063	; 0x80f
 801d60a:	4013      	ands	r3, r2
 801d60c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801d610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801d614:	2b00      	cmp	r3, #0
 801d616:	d115      	bne.n	801d644 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d61c:	f003 0320 	and.w	r3, r3, #32
 801d620:	2b00      	cmp	r3, #0
 801d622:	d00f      	beq.n	801d644 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d628:	f003 0320 	and.w	r3, r3, #32
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d009      	beq.n	801d644 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d634:	2b00      	cmp	r3, #0
 801d636:	f000 82b8 	beq.w	801dbaa <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d63e:	6878      	ldr	r0, [r7, #4]
 801d640:	4798      	blx	r3
      }
      return;
 801d642:	e2b2      	b.n	801dbaa <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801d644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801d648:	2b00      	cmp	r3, #0
 801d64a:	f000 811d 	beq.w	801d888 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d652:	f003 0301 	and.w	r3, r3, #1
 801d656:	2b00      	cmp	r3, #0
 801d658:	d106      	bne.n	801d668 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d65a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801d65e:	4b88      	ldr	r3, [pc, #544]	; (801d880 <HAL_UART_IRQHandler+0x2a4>)
 801d660:	4013      	ands	r3, r2
 801d662:	2b00      	cmp	r3, #0
 801d664:	f000 8110 	beq.w	801d888 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d66c:	f003 0301 	and.w	r3, r3, #1
 801d670:	2b00      	cmp	r3, #0
 801d672:	d011      	beq.n	801d698 <HAL_UART_IRQHandler+0xbc>
 801d674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d00b      	beq.n	801d698 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	2201      	movs	r2, #1
 801d686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d68e:	f043 0201 	orr.w	r2, r3, #1
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d69c:	f003 0302 	and.w	r3, r3, #2
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d011      	beq.n	801d6c8 <HAL_UART_IRQHandler+0xec>
 801d6a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d6a8:	f003 0301 	and.w	r3, r3, #1
 801d6ac:	2b00      	cmp	r3, #0
 801d6ae:	d00b      	beq.n	801d6c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	2202      	movs	r2, #2
 801d6b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d6be:	f043 0204 	orr.w	r2, r3, #4
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d6cc:	f003 0304 	and.w	r3, r3, #4
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d011      	beq.n	801d6f8 <HAL_UART_IRQHandler+0x11c>
 801d6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d6d8:	f003 0301 	and.w	r3, r3, #1
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d00b      	beq.n	801d6f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	2204      	movs	r2, #4
 801d6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d6ee:	f043 0202 	orr.w	r2, r3, #2
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d6fc:	f003 0308 	and.w	r3, r3, #8
 801d700:	2b00      	cmp	r3, #0
 801d702:	d017      	beq.n	801d734 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d708:	f003 0320 	and.w	r3, r3, #32
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d105      	bne.n	801d71c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d714:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d00b      	beq.n	801d734 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	2208      	movs	r2, #8
 801d722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d72a:	f043 0208 	orr.w	r2, r3, #8
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d012      	beq.n	801d766 <HAL_UART_IRQHandler+0x18a>
 801d740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d00c      	beq.n	801d766 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d75c:	f043 0220 	orr.w	r2, r3, #32
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	f000 821e 	beq.w	801dbae <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801d772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d776:	f003 0320 	and.w	r3, r3, #32
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d00d      	beq.n	801d79a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d782:	f003 0320 	and.w	r3, r3, #32
 801d786:	2b00      	cmp	r3, #0
 801d788:	d007      	beq.n	801d79a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d003      	beq.n	801d79a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d796:	6878      	ldr	r0, [r7, #4]
 801d798:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d7a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	689b      	ldr	r3, [r3, #8]
 801d7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d7ae:	2b40      	cmp	r3, #64	; 0x40
 801d7b0:	d005      	beq.n	801d7be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801d7b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801d7b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	d053      	beq.n	801d866 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801d7be:	6878      	ldr	r0, [r7, #4]
 801d7c0:	f000 ff80 	bl	801e6c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	689b      	ldr	r3, [r3, #8]
 801d7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d7ce:	2b40      	cmp	r3, #64	; 0x40
 801d7d0:	d143      	bne.n	801d85a <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	3308      	adds	r3, #8
 801d7d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d7dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d7e0:	e853 3f00 	ldrex	r3, [r3]
 801d7e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801d7e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d7ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d7f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	3308      	adds	r3, #8
 801d7fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801d7fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801d802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801d80a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801d80e:	e841 2300 	strex	r3, r2, [r1]
 801d812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801d816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d1d9      	bne.n	801d7d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d822:	2b00      	cmp	r3, #0
 801d824:	d013      	beq.n	801d84e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d82a:	4a16      	ldr	r2, [pc, #88]	; (801d884 <HAL_UART_IRQHandler+0x2a8>)
 801d82c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d832:	4618      	mov	r0, r3
 801d834:	f7fb f98a 	bl	8018b4c <HAL_DMA_Abort_IT>
 801d838:	4603      	mov	r3, r0
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d01d      	beq.n	801d87a <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d844:	687a      	ldr	r2, [r7, #4]
 801d846:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801d848:	4610      	mov	r0, r2
 801d84a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d84c:	e015      	b.n	801d87a <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d854:	6878      	ldr	r0, [r7, #4]
 801d856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d858:	e00f      	b.n	801d87a <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d860:	6878      	ldr	r0, [r7, #4]
 801d862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d864:	e009      	b.n	801d87a <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d86c:	6878      	ldr	r0, [r7, #4]
 801d86e:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	2200      	movs	r2, #0
 801d874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801d878:	e199      	b.n	801dbae <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d87a:	bf00      	nop
    return;
 801d87c:	e197      	b.n	801dbae <HAL_UART_IRQHandler+0x5d2>
 801d87e:	bf00      	nop
 801d880:	04000120 	.word	0x04000120
 801d884:	0801e78d 	.word	0x0801e78d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d88c:	2b01      	cmp	r3, #1
 801d88e:	f040 8150 	bne.w	801db32 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801d892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d896:	f003 0310 	and.w	r3, r3, #16
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	f000 8149 	beq.w	801db32 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801d8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d8a4:	f003 0310 	and.w	r3, r3, #16
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	f000 8142 	beq.w	801db32 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	2210      	movs	r2, #16
 801d8b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	689b      	ldr	r3, [r3, #8]
 801d8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d8c0:	2b40      	cmp	r3, #64	; 0x40
 801d8c2:	f040 80b8 	bne.w	801da36 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d8ca:	681b      	ldr	r3, [r3, #0]
 801d8cc:	685b      	ldr	r3, [r3, #4]
 801d8ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801d8d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	f000 816b 	beq.w	801dbb2 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801d8e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801d8e6:	429a      	cmp	r2, r3
 801d8e8:	f080 8163 	bcs.w	801dbb2 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801d8f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d8fa:	69db      	ldr	r3, [r3, #28]
 801d8fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d900:	f000 8086 	beq.w	801da10 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d90c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d910:	e853 3f00 	ldrex	r3, [r3]
 801d914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801d918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d91c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	461a      	mov	r2, r3
 801d92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801d92e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801d932:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801d93a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801d93e:	e841 2300 	strex	r3, r2, [r1]
 801d942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801d946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d1da      	bne.n	801d904 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	3308      	adds	r3, #8
 801d954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d958:	e853 3f00 	ldrex	r3, [r3]
 801d95c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801d95e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d960:	f023 0301 	bic.w	r3, r3, #1
 801d964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	3308      	adds	r3, #8
 801d96e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801d976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801d97a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d97e:	e841 2300 	strex	r3, r2, [r1]
 801d982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801d984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d986:	2b00      	cmp	r3, #0
 801d988:	d1e1      	bne.n	801d94e <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	3308      	adds	r3, #8
 801d990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d994:	e853 3f00 	ldrex	r3, [r3]
 801d998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801d99a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d99c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d9a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	3308      	adds	r3, #8
 801d9aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801d9ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d9b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d9b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d9b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d9b6:	e841 2300 	strex	r3, r2, [r1]
 801d9ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801d9bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d1e3      	bne.n	801d98a <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	2220      	movs	r2, #32
 801d9c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	2200      	movs	r2, #0
 801d9ce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9d8:	e853 3f00 	ldrex	r3, [r3]
 801d9dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801d9de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9e0:	f023 0310 	bic.w	r3, r3, #16
 801d9e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	461a      	mov	r2, r3
 801d9ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d9f2:	65bb      	str	r3, [r7, #88]	; 0x58
 801d9f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d9f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d9f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d9fa:	e841 2300 	strex	r3, r2, [r1]
 801d9fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801da00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da02:	2b00      	cmp	r3, #0
 801da04:	d1e4      	bne.n	801d9d0 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801da0a:	4618      	mov	r0, r3
 801da0c:	f7fb f82e 	bl	8018a6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	2202      	movs	r2, #2
 801da14:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801da1c:	687a      	ldr	r2, [r7, #4]
 801da1e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801da22:	687a      	ldr	r2, [r7, #4]
 801da24:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801da28:	b292      	uxth	r2, r2
 801da2a:	1a8a      	subs	r2, r1, r2
 801da2c:	b292      	uxth	r2, r2
 801da2e:	4611      	mov	r1, r2
 801da30:	6878      	ldr	r0, [r7, #4]
 801da32:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801da34:	e0bd      	b.n	801dbb2 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801da42:	b29b      	uxth	r3, r3
 801da44:	1ad3      	subs	r3, r2, r3
 801da46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801da50:	b29b      	uxth	r3, r3
 801da52:	2b00      	cmp	r3, #0
 801da54:	f000 80af 	beq.w	801dbb6 <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801da58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	f000 80aa 	beq.w	801dbb6 <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da6a:	e853 3f00 	ldrex	r3, [r3]
 801da6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801da70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801da76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	461a      	mov	r2, r3
 801da80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801da84:	647b      	str	r3, [r7, #68]	; 0x44
 801da86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801da88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801da8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801da8c:	e841 2300 	strex	r3, r2, [r1]
 801da90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801da94:	2b00      	cmp	r3, #0
 801da96:	d1e4      	bne.n	801da62 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	3308      	adds	r3, #8
 801da9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daa2:	e853 3f00 	ldrex	r3, [r3]
 801daa6:	623b      	str	r3, [r7, #32]
   return(result);
 801daa8:	6a3b      	ldr	r3, [r7, #32]
 801daaa:	f023 0301 	bic.w	r3, r3, #1
 801daae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	3308      	adds	r3, #8
 801dab8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801dabc:	633a      	str	r2, [r7, #48]	; 0x30
 801dabe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dac4:	e841 2300 	strex	r3, r2, [r1]
 801dac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801daca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d1e3      	bne.n	801da98 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	2220      	movs	r2, #32
 801dad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	2200      	movs	r2, #0
 801dadc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	2200      	movs	r2, #0
 801dae2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	681b      	ldr	r3, [r3, #0]
 801dae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801daea:	693b      	ldr	r3, [r7, #16]
 801daec:	e853 3f00 	ldrex	r3, [r3]
 801daf0:	60fb      	str	r3, [r7, #12]
   return(result);
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	f023 0310 	bic.w	r3, r3, #16
 801daf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	461a      	mov	r2, r3
 801db02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801db06:	61fb      	str	r3, [r7, #28]
 801db08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db0a:	69b9      	ldr	r1, [r7, #24]
 801db0c:	69fa      	ldr	r2, [r7, #28]
 801db0e:	e841 2300 	strex	r3, r2, [r1]
 801db12:	617b      	str	r3, [r7, #20]
   return(result);
 801db14:	697b      	ldr	r3, [r7, #20]
 801db16:	2b00      	cmp	r3, #0
 801db18:	d1e4      	bne.n	801dae4 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	2202      	movs	r2, #2
 801db1e:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801db26:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801db2a:	4611      	mov	r1, r2
 801db2c:	6878      	ldr	r0, [r7, #4]
 801db2e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801db30:	e041      	b.n	801dbb6 <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801db32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801db36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d010      	beq.n	801db60 <HAL_UART_IRQHandler+0x584>
 801db3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801db42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801db46:	2b00      	cmp	r3, #0
 801db48:	d00a      	beq.n	801db60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801db52:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801db5a:	6878      	ldr	r0, [r7, #4]
 801db5c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801db5e:	e02d      	b.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801db60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801db64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d00e      	beq.n	801db8a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801db6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801db70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db74:	2b00      	cmp	r3, #0
 801db76:	d008      	beq.n	801db8a <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d01c      	beq.n	801dbba <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db84:	6878      	ldr	r0, [r7, #4]
 801db86:	4798      	blx	r3
    }
    return;
 801db88:	e017      	b.n	801dbba <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801db8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801db8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db92:	2b00      	cmp	r3, #0
 801db94:	d012      	beq.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
 801db96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801db9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d00c      	beq.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801dba2:	6878      	ldr	r0, [r7, #4]
 801dba4:	f000 fe0a 	bl	801e7bc <UART_EndTransmit_IT>
    return;
 801dba8:	e008      	b.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
      return;
 801dbaa:	bf00      	nop
 801dbac:	e006      	b.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
    return;
 801dbae:	bf00      	nop
 801dbb0:	e004      	b.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
      return;
 801dbb2:	bf00      	nop
 801dbb4:	e002      	b.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
      return;
 801dbb6:	bf00      	nop
 801dbb8:	e000      	b.n	801dbbc <HAL_UART_IRQHandler+0x5e0>
    return;
 801dbba:	bf00      	nop
  }

}
 801dbbc:	37e8      	adds	r7, #232	; 0xe8
 801dbbe:	46bd      	mov	sp, r7
 801dbc0:	bd80      	pop	{r7, pc}
 801dbc2:	bf00      	nop

0801dbc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dbc4:	b480      	push	{r7}
 801dbc6:	b083      	sub	sp, #12
 801dbc8:	af00      	add	r7, sp, #0
 801dbca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801dbcc:	bf00      	nop
 801dbce:	370c      	adds	r7, #12
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd6:	4770      	bx	lr

0801dbd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dbd8:	b480      	push	{r7}
 801dbda:	b083      	sub	sp, #12
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801dbe0:	bf00      	nop
 801dbe2:	370c      	adds	r7, #12
 801dbe4:	46bd      	mov	sp, r7
 801dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbea:	4770      	bx	lr

0801dbec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801dbec:	b480      	push	{r7}
 801dbee:	b083      	sub	sp, #12
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801dbf4:	bf00      	nop
 801dbf6:	370c      	adds	r7, #12
 801dbf8:	46bd      	mov	sp, r7
 801dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbfe:	4770      	bx	lr

0801dc00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dc00:	b480      	push	{r7}
 801dc02:	b083      	sub	sp, #12
 801dc04:	af00      	add	r7, sp, #0
 801dc06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801dc08:	bf00      	nop
 801dc0a:	370c      	adds	r7, #12
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc12:	4770      	bx	lr

0801dc14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801dc14:	b480      	push	{r7}
 801dc16:	b083      	sub	sp, #12
 801dc18:	af00      	add	r7, sp, #0
 801dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801dc1c:	bf00      	nop
 801dc1e:	370c      	adds	r7, #12
 801dc20:	46bd      	mov	sp, r7
 801dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc26:	4770      	bx	lr

0801dc28 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801dc28:	b480      	push	{r7}
 801dc2a:	b083      	sub	sp, #12
 801dc2c:	af00      	add	r7, sp, #0
 801dc2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801dc30:	bf00      	nop
 801dc32:	370c      	adds	r7, #12
 801dc34:	46bd      	mov	sp, r7
 801dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc3a:	4770      	bx	lr

0801dc3c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801dc3c:	b480      	push	{r7}
 801dc3e:	b083      	sub	sp, #12
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801dc44:	bf00      	nop
 801dc46:	370c      	adds	r7, #12
 801dc48:	46bd      	mov	sp, r7
 801dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc4e:	4770      	bx	lr

0801dc50 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801dc50:	b480      	push	{r7}
 801dc52:	b083      	sub	sp, #12
 801dc54:	af00      	add	r7, sp, #0
 801dc56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801dc58:	bf00      	nop
 801dc5a:	370c      	adds	r7, #12
 801dc5c:	46bd      	mov	sp, r7
 801dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc62:	4770      	bx	lr

0801dc64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801dc64:	b480      	push	{r7}
 801dc66:	b083      	sub	sp, #12
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801dc6c:	bf00      	nop
 801dc6e:	370c      	adds	r7, #12
 801dc70:	46bd      	mov	sp, r7
 801dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc76:	4770      	bx	lr

0801dc78 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801dc78:	b480      	push	{r7}
 801dc7a:	b083      	sub	sp, #12
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	4a16      	ldr	r2, [pc, #88]	; (801dcdc <UART_InitCallbacksToDefault+0x64>)
 801dc84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	4a15      	ldr	r2, [pc, #84]	; (801dce0 <UART_InitCallbacksToDefault+0x68>)
 801dc8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	4a14      	ldr	r2, [pc, #80]	; (801dce4 <UART_InitCallbacksToDefault+0x6c>)
 801dc94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	4a13      	ldr	r2, [pc, #76]	; (801dce8 <UART_InitCallbacksToDefault+0x70>)
 801dc9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	4a12      	ldr	r2, [pc, #72]	; (801dcec <UART_InitCallbacksToDefault+0x74>)
 801dca4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	4a11      	ldr	r2, [pc, #68]	; (801dcf0 <UART_InitCallbacksToDefault+0x78>)
 801dcac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	4a10      	ldr	r2, [pc, #64]	; (801dcf4 <UART_InitCallbacksToDefault+0x7c>)
 801dcb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	4a0f      	ldr	r2, [pc, #60]	; (801dcf8 <UART_InitCallbacksToDefault+0x80>)
 801dcbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	4a0e      	ldr	r2, [pc, #56]	; (801dcfc <UART_InitCallbacksToDefault+0x84>)
 801dcc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	4a0d      	ldr	r2, [pc, #52]	; (801dd00 <UART_InitCallbacksToDefault+0x88>)
 801dccc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801dcd0:	bf00      	nop
 801dcd2:	370c      	adds	r7, #12
 801dcd4:	46bd      	mov	sp, r7
 801dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcda:	4770      	bx	lr
 801dcdc:	0801dbd9 	.word	0x0801dbd9
 801dce0:	0801dbc5 	.word	0x0801dbc5
 801dce4:	0801dc01 	.word	0x0801dc01
 801dce8:	0801dbed 	.word	0x0801dbed
 801dcec:	0801dc15 	.word	0x0801dc15
 801dcf0:	0801dc29 	.word	0x0801dc29
 801dcf4:	0801dc3d 	.word	0x0801dc3d
 801dcf8:	0801dc51 	.word	0x0801dc51
 801dcfc:	0801dc65 	.word	0x0801dc65
 801dd00:	0801707d 	.word	0x0801707d

0801dd04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801dd04:	b580      	push	{r7, lr}
 801dd06:	b088      	sub	sp, #32
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801dd0c:	2300      	movs	r3, #0
 801dd0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	689a      	ldr	r2, [r3, #8]
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	691b      	ldr	r3, [r3, #16]
 801dd18:	431a      	orrs	r2, r3
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	695b      	ldr	r3, [r3, #20]
 801dd1e:	431a      	orrs	r2, r3
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	69db      	ldr	r3, [r3, #28]
 801dd24:	4313      	orrs	r3, r2
 801dd26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	681a      	ldr	r2, [r3, #0]
 801dd2e:	4ba6      	ldr	r3, [pc, #664]	; (801dfc8 <UART_SetConfig+0x2c4>)
 801dd30:	4013      	ands	r3, r2
 801dd32:	687a      	ldr	r2, [r7, #4]
 801dd34:	6812      	ldr	r2, [r2, #0]
 801dd36:	6979      	ldr	r1, [r7, #20]
 801dd38:	430b      	orrs	r3, r1
 801dd3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	685b      	ldr	r3, [r3, #4]
 801dd42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	68da      	ldr	r2, [r3, #12]
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	430a      	orrs	r2, r1
 801dd50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	699b      	ldr	r3, [r3, #24]
 801dd56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	6a1b      	ldr	r3, [r3, #32]
 801dd5c:	697a      	ldr	r2, [r7, #20]
 801dd5e:	4313      	orrs	r3, r2
 801dd60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801dd62:	687b      	ldr	r3, [r7, #4]
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	689b      	ldr	r3, [r3, #8]
 801dd68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	697a      	ldr	r2, [r7, #20]
 801dd72:	430a      	orrs	r2, r1
 801dd74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	4a94      	ldr	r2, [pc, #592]	; (801dfcc <UART_SetConfig+0x2c8>)
 801dd7c:	4293      	cmp	r3, r2
 801dd7e:	d120      	bne.n	801ddc2 <UART_SetConfig+0xbe>
 801dd80:	4b93      	ldr	r3, [pc, #588]	; (801dfd0 <UART_SetConfig+0x2cc>)
 801dd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dd86:	f003 0303 	and.w	r3, r3, #3
 801dd8a:	2b03      	cmp	r3, #3
 801dd8c:	d816      	bhi.n	801ddbc <UART_SetConfig+0xb8>
 801dd8e:	a201      	add	r2, pc, #4	; (adr r2, 801dd94 <UART_SetConfig+0x90>)
 801dd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd94:	0801dda5 	.word	0x0801dda5
 801dd98:	0801ddb1 	.word	0x0801ddb1
 801dd9c:	0801ddab 	.word	0x0801ddab
 801dda0:	0801ddb7 	.word	0x0801ddb7
 801dda4:	2301      	movs	r3, #1
 801dda6:	77fb      	strb	r3, [r7, #31]
 801dda8:	e150      	b.n	801e04c <UART_SetConfig+0x348>
 801ddaa:	2302      	movs	r3, #2
 801ddac:	77fb      	strb	r3, [r7, #31]
 801ddae:	e14d      	b.n	801e04c <UART_SetConfig+0x348>
 801ddb0:	2304      	movs	r3, #4
 801ddb2:	77fb      	strb	r3, [r7, #31]
 801ddb4:	e14a      	b.n	801e04c <UART_SetConfig+0x348>
 801ddb6:	2308      	movs	r3, #8
 801ddb8:	77fb      	strb	r3, [r7, #31]
 801ddba:	e147      	b.n	801e04c <UART_SetConfig+0x348>
 801ddbc:	2310      	movs	r3, #16
 801ddbe:	77fb      	strb	r3, [r7, #31]
 801ddc0:	e144      	b.n	801e04c <UART_SetConfig+0x348>
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	4a83      	ldr	r2, [pc, #524]	; (801dfd4 <UART_SetConfig+0x2d0>)
 801ddc8:	4293      	cmp	r3, r2
 801ddca:	d132      	bne.n	801de32 <UART_SetConfig+0x12e>
 801ddcc:	4b80      	ldr	r3, [pc, #512]	; (801dfd0 <UART_SetConfig+0x2cc>)
 801ddce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ddd2:	f003 030c 	and.w	r3, r3, #12
 801ddd6:	2b0c      	cmp	r3, #12
 801ddd8:	d828      	bhi.n	801de2c <UART_SetConfig+0x128>
 801ddda:	a201      	add	r2, pc, #4	; (adr r2, 801dde0 <UART_SetConfig+0xdc>)
 801dddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dde0:	0801de15 	.word	0x0801de15
 801dde4:	0801de2d 	.word	0x0801de2d
 801dde8:	0801de2d 	.word	0x0801de2d
 801ddec:	0801de2d 	.word	0x0801de2d
 801ddf0:	0801de21 	.word	0x0801de21
 801ddf4:	0801de2d 	.word	0x0801de2d
 801ddf8:	0801de2d 	.word	0x0801de2d
 801ddfc:	0801de2d 	.word	0x0801de2d
 801de00:	0801de1b 	.word	0x0801de1b
 801de04:	0801de2d 	.word	0x0801de2d
 801de08:	0801de2d 	.word	0x0801de2d
 801de0c:	0801de2d 	.word	0x0801de2d
 801de10:	0801de27 	.word	0x0801de27
 801de14:	2300      	movs	r3, #0
 801de16:	77fb      	strb	r3, [r7, #31]
 801de18:	e118      	b.n	801e04c <UART_SetConfig+0x348>
 801de1a:	2302      	movs	r3, #2
 801de1c:	77fb      	strb	r3, [r7, #31]
 801de1e:	e115      	b.n	801e04c <UART_SetConfig+0x348>
 801de20:	2304      	movs	r3, #4
 801de22:	77fb      	strb	r3, [r7, #31]
 801de24:	e112      	b.n	801e04c <UART_SetConfig+0x348>
 801de26:	2308      	movs	r3, #8
 801de28:	77fb      	strb	r3, [r7, #31]
 801de2a:	e10f      	b.n	801e04c <UART_SetConfig+0x348>
 801de2c:	2310      	movs	r3, #16
 801de2e:	77fb      	strb	r3, [r7, #31]
 801de30:	e10c      	b.n	801e04c <UART_SetConfig+0x348>
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	4a68      	ldr	r2, [pc, #416]	; (801dfd8 <UART_SetConfig+0x2d4>)
 801de38:	4293      	cmp	r3, r2
 801de3a:	d120      	bne.n	801de7e <UART_SetConfig+0x17a>
 801de3c:	4b64      	ldr	r3, [pc, #400]	; (801dfd0 <UART_SetConfig+0x2cc>)
 801de3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801de46:	2b30      	cmp	r3, #48	; 0x30
 801de48:	d013      	beq.n	801de72 <UART_SetConfig+0x16e>
 801de4a:	2b30      	cmp	r3, #48	; 0x30
 801de4c:	d814      	bhi.n	801de78 <UART_SetConfig+0x174>
 801de4e:	2b20      	cmp	r3, #32
 801de50:	d009      	beq.n	801de66 <UART_SetConfig+0x162>
 801de52:	2b20      	cmp	r3, #32
 801de54:	d810      	bhi.n	801de78 <UART_SetConfig+0x174>
 801de56:	2b00      	cmp	r3, #0
 801de58:	d002      	beq.n	801de60 <UART_SetConfig+0x15c>
 801de5a:	2b10      	cmp	r3, #16
 801de5c:	d006      	beq.n	801de6c <UART_SetConfig+0x168>
 801de5e:	e00b      	b.n	801de78 <UART_SetConfig+0x174>
 801de60:	2300      	movs	r3, #0
 801de62:	77fb      	strb	r3, [r7, #31]
 801de64:	e0f2      	b.n	801e04c <UART_SetConfig+0x348>
 801de66:	2302      	movs	r3, #2
 801de68:	77fb      	strb	r3, [r7, #31]
 801de6a:	e0ef      	b.n	801e04c <UART_SetConfig+0x348>
 801de6c:	2304      	movs	r3, #4
 801de6e:	77fb      	strb	r3, [r7, #31]
 801de70:	e0ec      	b.n	801e04c <UART_SetConfig+0x348>
 801de72:	2308      	movs	r3, #8
 801de74:	77fb      	strb	r3, [r7, #31]
 801de76:	e0e9      	b.n	801e04c <UART_SetConfig+0x348>
 801de78:	2310      	movs	r3, #16
 801de7a:	77fb      	strb	r3, [r7, #31]
 801de7c:	e0e6      	b.n	801e04c <UART_SetConfig+0x348>
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	4a56      	ldr	r2, [pc, #344]	; (801dfdc <UART_SetConfig+0x2d8>)
 801de84:	4293      	cmp	r3, r2
 801de86:	d120      	bne.n	801deca <UART_SetConfig+0x1c6>
 801de88:	4b51      	ldr	r3, [pc, #324]	; (801dfd0 <UART_SetConfig+0x2cc>)
 801de8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801de92:	2bc0      	cmp	r3, #192	; 0xc0
 801de94:	d013      	beq.n	801debe <UART_SetConfig+0x1ba>
 801de96:	2bc0      	cmp	r3, #192	; 0xc0
 801de98:	d814      	bhi.n	801dec4 <UART_SetConfig+0x1c0>
 801de9a:	2b80      	cmp	r3, #128	; 0x80
 801de9c:	d009      	beq.n	801deb2 <UART_SetConfig+0x1ae>
 801de9e:	2b80      	cmp	r3, #128	; 0x80
 801dea0:	d810      	bhi.n	801dec4 <UART_SetConfig+0x1c0>
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d002      	beq.n	801deac <UART_SetConfig+0x1a8>
 801dea6:	2b40      	cmp	r3, #64	; 0x40
 801dea8:	d006      	beq.n	801deb8 <UART_SetConfig+0x1b4>
 801deaa:	e00b      	b.n	801dec4 <UART_SetConfig+0x1c0>
 801deac:	2300      	movs	r3, #0
 801deae:	77fb      	strb	r3, [r7, #31]
 801deb0:	e0cc      	b.n	801e04c <UART_SetConfig+0x348>
 801deb2:	2302      	movs	r3, #2
 801deb4:	77fb      	strb	r3, [r7, #31]
 801deb6:	e0c9      	b.n	801e04c <UART_SetConfig+0x348>
 801deb8:	2304      	movs	r3, #4
 801deba:	77fb      	strb	r3, [r7, #31]
 801debc:	e0c6      	b.n	801e04c <UART_SetConfig+0x348>
 801debe:	2308      	movs	r3, #8
 801dec0:	77fb      	strb	r3, [r7, #31]
 801dec2:	e0c3      	b.n	801e04c <UART_SetConfig+0x348>
 801dec4:	2310      	movs	r3, #16
 801dec6:	77fb      	strb	r3, [r7, #31]
 801dec8:	e0c0      	b.n	801e04c <UART_SetConfig+0x348>
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	4a44      	ldr	r2, [pc, #272]	; (801dfe0 <UART_SetConfig+0x2dc>)
 801ded0:	4293      	cmp	r3, r2
 801ded2:	d125      	bne.n	801df20 <UART_SetConfig+0x21c>
 801ded4:	4b3e      	ldr	r3, [pc, #248]	; (801dfd0 <UART_SetConfig+0x2cc>)
 801ded6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801deda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801dede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dee2:	d017      	beq.n	801df14 <UART_SetConfig+0x210>
 801dee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dee8:	d817      	bhi.n	801df1a <UART_SetConfig+0x216>
 801deea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801deee:	d00b      	beq.n	801df08 <UART_SetConfig+0x204>
 801def0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801def4:	d811      	bhi.n	801df1a <UART_SetConfig+0x216>
 801def6:	2b00      	cmp	r3, #0
 801def8:	d003      	beq.n	801df02 <UART_SetConfig+0x1fe>
 801defa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801defe:	d006      	beq.n	801df0e <UART_SetConfig+0x20a>
 801df00:	e00b      	b.n	801df1a <UART_SetConfig+0x216>
 801df02:	2300      	movs	r3, #0
 801df04:	77fb      	strb	r3, [r7, #31]
 801df06:	e0a1      	b.n	801e04c <UART_SetConfig+0x348>
 801df08:	2302      	movs	r3, #2
 801df0a:	77fb      	strb	r3, [r7, #31]
 801df0c:	e09e      	b.n	801e04c <UART_SetConfig+0x348>
 801df0e:	2304      	movs	r3, #4
 801df10:	77fb      	strb	r3, [r7, #31]
 801df12:	e09b      	b.n	801e04c <UART_SetConfig+0x348>
 801df14:	2308      	movs	r3, #8
 801df16:	77fb      	strb	r3, [r7, #31]
 801df18:	e098      	b.n	801e04c <UART_SetConfig+0x348>
 801df1a:	2310      	movs	r3, #16
 801df1c:	77fb      	strb	r3, [r7, #31]
 801df1e:	e095      	b.n	801e04c <UART_SetConfig+0x348>
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	681b      	ldr	r3, [r3, #0]
 801df24:	4a2f      	ldr	r2, [pc, #188]	; (801dfe4 <UART_SetConfig+0x2e0>)
 801df26:	4293      	cmp	r3, r2
 801df28:	d125      	bne.n	801df76 <UART_SetConfig+0x272>
 801df2a:	4b29      	ldr	r3, [pc, #164]	; (801dfd0 <UART_SetConfig+0x2cc>)
 801df2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801df34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801df38:	d017      	beq.n	801df6a <UART_SetConfig+0x266>
 801df3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801df3e:	d817      	bhi.n	801df70 <UART_SetConfig+0x26c>
 801df40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801df44:	d00b      	beq.n	801df5e <UART_SetConfig+0x25a>
 801df46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801df4a:	d811      	bhi.n	801df70 <UART_SetConfig+0x26c>
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d003      	beq.n	801df58 <UART_SetConfig+0x254>
 801df50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801df54:	d006      	beq.n	801df64 <UART_SetConfig+0x260>
 801df56:	e00b      	b.n	801df70 <UART_SetConfig+0x26c>
 801df58:	2301      	movs	r3, #1
 801df5a:	77fb      	strb	r3, [r7, #31]
 801df5c:	e076      	b.n	801e04c <UART_SetConfig+0x348>
 801df5e:	2302      	movs	r3, #2
 801df60:	77fb      	strb	r3, [r7, #31]
 801df62:	e073      	b.n	801e04c <UART_SetConfig+0x348>
 801df64:	2304      	movs	r3, #4
 801df66:	77fb      	strb	r3, [r7, #31]
 801df68:	e070      	b.n	801e04c <UART_SetConfig+0x348>
 801df6a:	2308      	movs	r3, #8
 801df6c:	77fb      	strb	r3, [r7, #31]
 801df6e:	e06d      	b.n	801e04c <UART_SetConfig+0x348>
 801df70:	2310      	movs	r3, #16
 801df72:	77fb      	strb	r3, [r7, #31]
 801df74:	e06a      	b.n	801e04c <UART_SetConfig+0x348>
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	4a1b      	ldr	r2, [pc, #108]	; (801dfe8 <UART_SetConfig+0x2e4>)
 801df7c:	4293      	cmp	r3, r2
 801df7e:	d138      	bne.n	801dff2 <UART_SetConfig+0x2ee>
 801df80:	4b13      	ldr	r3, [pc, #76]	; (801dfd0 <UART_SetConfig+0x2cc>)
 801df82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801df8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801df8e:	d017      	beq.n	801dfc0 <UART_SetConfig+0x2bc>
 801df90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801df94:	d82a      	bhi.n	801dfec <UART_SetConfig+0x2e8>
 801df96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801df9a:	d00b      	beq.n	801dfb4 <UART_SetConfig+0x2b0>
 801df9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dfa0:	d824      	bhi.n	801dfec <UART_SetConfig+0x2e8>
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d003      	beq.n	801dfae <UART_SetConfig+0x2aa>
 801dfa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801dfaa:	d006      	beq.n	801dfba <UART_SetConfig+0x2b6>
 801dfac:	e01e      	b.n	801dfec <UART_SetConfig+0x2e8>
 801dfae:	2300      	movs	r3, #0
 801dfb0:	77fb      	strb	r3, [r7, #31]
 801dfb2:	e04b      	b.n	801e04c <UART_SetConfig+0x348>
 801dfb4:	2302      	movs	r3, #2
 801dfb6:	77fb      	strb	r3, [r7, #31]
 801dfb8:	e048      	b.n	801e04c <UART_SetConfig+0x348>
 801dfba:	2304      	movs	r3, #4
 801dfbc:	77fb      	strb	r3, [r7, #31]
 801dfbe:	e045      	b.n	801e04c <UART_SetConfig+0x348>
 801dfc0:	2308      	movs	r3, #8
 801dfc2:	77fb      	strb	r3, [r7, #31]
 801dfc4:	e042      	b.n	801e04c <UART_SetConfig+0x348>
 801dfc6:	bf00      	nop
 801dfc8:	efff69f3 	.word	0xefff69f3
 801dfcc:	40011000 	.word	0x40011000
 801dfd0:	40023800 	.word	0x40023800
 801dfd4:	40004400 	.word	0x40004400
 801dfd8:	40004800 	.word	0x40004800
 801dfdc:	40004c00 	.word	0x40004c00
 801dfe0:	40005000 	.word	0x40005000
 801dfe4:	40011400 	.word	0x40011400
 801dfe8:	40007800 	.word	0x40007800
 801dfec:	2310      	movs	r3, #16
 801dfee:	77fb      	strb	r3, [r7, #31]
 801dff0:	e02c      	b.n	801e04c <UART_SetConfig+0x348>
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	4a72      	ldr	r2, [pc, #456]	; (801e1c0 <UART_SetConfig+0x4bc>)
 801dff8:	4293      	cmp	r3, r2
 801dffa:	d125      	bne.n	801e048 <UART_SetConfig+0x344>
 801dffc:	4b71      	ldr	r3, [pc, #452]	; (801e1c4 <UART_SetConfig+0x4c0>)
 801dffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e002:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801e006:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801e00a:	d017      	beq.n	801e03c <UART_SetConfig+0x338>
 801e00c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801e010:	d817      	bhi.n	801e042 <UART_SetConfig+0x33e>
 801e012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e016:	d00b      	beq.n	801e030 <UART_SetConfig+0x32c>
 801e018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e01c:	d811      	bhi.n	801e042 <UART_SetConfig+0x33e>
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d003      	beq.n	801e02a <UART_SetConfig+0x326>
 801e022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e026:	d006      	beq.n	801e036 <UART_SetConfig+0x332>
 801e028:	e00b      	b.n	801e042 <UART_SetConfig+0x33e>
 801e02a:	2300      	movs	r3, #0
 801e02c:	77fb      	strb	r3, [r7, #31]
 801e02e:	e00d      	b.n	801e04c <UART_SetConfig+0x348>
 801e030:	2302      	movs	r3, #2
 801e032:	77fb      	strb	r3, [r7, #31]
 801e034:	e00a      	b.n	801e04c <UART_SetConfig+0x348>
 801e036:	2304      	movs	r3, #4
 801e038:	77fb      	strb	r3, [r7, #31]
 801e03a:	e007      	b.n	801e04c <UART_SetConfig+0x348>
 801e03c:	2308      	movs	r3, #8
 801e03e:	77fb      	strb	r3, [r7, #31]
 801e040:	e004      	b.n	801e04c <UART_SetConfig+0x348>
 801e042:	2310      	movs	r3, #16
 801e044:	77fb      	strb	r3, [r7, #31]
 801e046:	e001      	b.n	801e04c <UART_SetConfig+0x348>
 801e048:	2310      	movs	r3, #16
 801e04a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	69db      	ldr	r3, [r3, #28]
 801e050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e054:	d15b      	bne.n	801e10e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801e056:	7ffb      	ldrb	r3, [r7, #31]
 801e058:	2b08      	cmp	r3, #8
 801e05a:	d828      	bhi.n	801e0ae <UART_SetConfig+0x3aa>
 801e05c:	a201      	add	r2, pc, #4	; (adr r2, 801e064 <UART_SetConfig+0x360>)
 801e05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e062:	bf00      	nop
 801e064:	0801e089 	.word	0x0801e089
 801e068:	0801e091 	.word	0x0801e091
 801e06c:	0801e099 	.word	0x0801e099
 801e070:	0801e0af 	.word	0x0801e0af
 801e074:	0801e09f 	.word	0x0801e09f
 801e078:	0801e0af 	.word	0x0801e0af
 801e07c:	0801e0af 	.word	0x0801e0af
 801e080:	0801e0af 	.word	0x0801e0af
 801e084:	0801e0a7 	.word	0x0801e0a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e088:	f7fd fc3e 	bl	801b908 <HAL_RCC_GetPCLK1Freq>
 801e08c:	61b8      	str	r0, [r7, #24]
        break;
 801e08e:	e013      	b.n	801e0b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e090:	f7fd fc4e 	bl	801b930 <HAL_RCC_GetPCLK2Freq>
 801e094:	61b8      	str	r0, [r7, #24]
        break;
 801e096:	e00f      	b.n	801e0b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e098:	4b4b      	ldr	r3, [pc, #300]	; (801e1c8 <UART_SetConfig+0x4c4>)
 801e09a:	61bb      	str	r3, [r7, #24]
        break;
 801e09c:	e00c      	b.n	801e0b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e09e:	f7fd fb61 	bl	801b764 <HAL_RCC_GetSysClockFreq>
 801e0a2:	61b8      	str	r0, [r7, #24]
        break;
 801e0a4:	e008      	b.n	801e0b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e0aa:	61bb      	str	r3, [r7, #24]
        break;
 801e0ac:	e004      	b.n	801e0b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801e0b2:	2301      	movs	r3, #1
 801e0b4:	77bb      	strb	r3, [r7, #30]
        break;
 801e0b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e0b8:	69bb      	ldr	r3, [r7, #24]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d074      	beq.n	801e1a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e0be:	69bb      	ldr	r3, [r7, #24]
 801e0c0:	005a      	lsls	r2, r3, #1
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	685b      	ldr	r3, [r3, #4]
 801e0c6:	085b      	lsrs	r3, r3, #1
 801e0c8:	441a      	add	r2, r3
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	685b      	ldr	r3, [r3, #4]
 801e0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801e0d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e0d4:	693b      	ldr	r3, [r7, #16]
 801e0d6:	2b0f      	cmp	r3, #15
 801e0d8:	d916      	bls.n	801e108 <UART_SetConfig+0x404>
 801e0da:	693b      	ldr	r3, [r7, #16]
 801e0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e0e0:	d212      	bcs.n	801e108 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e0e2:	693b      	ldr	r3, [r7, #16]
 801e0e4:	b29b      	uxth	r3, r3
 801e0e6:	f023 030f 	bic.w	r3, r3, #15
 801e0ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e0ec:	693b      	ldr	r3, [r7, #16]
 801e0ee:	085b      	lsrs	r3, r3, #1
 801e0f0:	b29b      	uxth	r3, r3
 801e0f2:	f003 0307 	and.w	r3, r3, #7
 801e0f6:	b29a      	uxth	r2, r3
 801e0f8:	89fb      	ldrh	r3, [r7, #14]
 801e0fa:	4313      	orrs	r3, r2
 801e0fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	89fa      	ldrh	r2, [r7, #14]
 801e104:	60da      	str	r2, [r3, #12]
 801e106:	e04f      	b.n	801e1a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801e108:	2301      	movs	r3, #1
 801e10a:	77bb      	strb	r3, [r7, #30]
 801e10c:	e04c      	b.n	801e1a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e10e:	7ffb      	ldrb	r3, [r7, #31]
 801e110:	2b08      	cmp	r3, #8
 801e112:	d828      	bhi.n	801e166 <UART_SetConfig+0x462>
 801e114:	a201      	add	r2, pc, #4	; (adr r2, 801e11c <UART_SetConfig+0x418>)
 801e116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e11a:	bf00      	nop
 801e11c:	0801e141 	.word	0x0801e141
 801e120:	0801e149 	.word	0x0801e149
 801e124:	0801e151 	.word	0x0801e151
 801e128:	0801e167 	.word	0x0801e167
 801e12c:	0801e157 	.word	0x0801e157
 801e130:	0801e167 	.word	0x0801e167
 801e134:	0801e167 	.word	0x0801e167
 801e138:	0801e167 	.word	0x0801e167
 801e13c:	0801e15f 	.word	0x0801e15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e140:	f7fd fbe2 	bl	801b908 <HAL_RCC_GetPCLK1Freq>
 801e144:	61b8      	str	r0, [r7, #24]
        break;
 801e146:	e013      	b.n	801e170 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e148:	f7fd fbf2 	bl	801b930 <HAL_RCC_GetPCLK2Freq>
 801e14c:	61b8      	str	r0, [r7, #24]
        break;
 801e14e:	e00f      	b.n	801e170 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e150:	4b1d      	ldr	r3, [pc, #116]	; (801e1c8 <UART_SetConfig+0x4c4>)
 801e152:	61bb      	str	r3, [r7, #24]
        break;
 801e154:	e00c      	b.n	801e170 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e156:	f7fd fb05 	bl	801b764 <HAL_RCC_GetSysClockFreq>
 801e15a:	61b8      	str	r0, [r7, #24]
        break;
 801e15c:	e008      	b.n	801e170 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e162:	61bb      	str	r3, [r7, #24]
        break;
 801e164:	e004      	b.n	801e170 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801e166:	2300      	movs	r3, #0
 801e168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801e16a:	2301      	movs	r3, #1
 801e16c:	77bb      	strb	r3, [r7, #30]
        break;
 801e16e:	bf00      	nop
    }

    if (pclk != 0U)
 801e170:	69bb      	ldr	r3, [r7, #24]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d018      	beq.n	801e1a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	685b      	ldr	r3, [r3, #4]
 801e17a:	085a      	lsrs	r2, r3, #1
 801e17c:	69bb      	ldr	r3, [r7, #24]
 801e17e:	441a      	add	r2, r3
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	685b      	ldr	r3, [r3, #4]
 801e184:	fbb2 f3f3 	udiv	r3, r2, r3
 801e188:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e18a:	693b      	ldr	r3, [r7, #16]
 801e18c:	2b0f      	cmp	r3, #15
 801e18e:	d909      	bls.n	801e1a4 <UART_SetConfig+0x4a0>
 801e190:	693b      	ldr	r3, [r7, #16]
 801e192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e196:	d205      	bcs.n	801e1a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e198:	693b      	ldr	r3, [r7, #16]
 801e19a:	b29a      	uxth	r2, r3
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	60da      	str	r2, [r3, #12]
 801e1a2:	e001      	b.n	801e1a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801e1a4:	2301      	movs	r3, #1
 801e1a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	2200      	movs	r2, #0
 801e1ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801e1b4:	7fbb      	ldrb	r3, [r7, #30]
}
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	3720      	adds	r7, #32
 801e1ba:	46bd      	mov	sp, r7
 801e1bc:	bd80      	pop	{r7, pc}
 801e1be:	bf00      	nop
 801e1c0:	40007c00 	.word	0x40007c00
 801e1c4:	40023800 	.word	0x40023800
 801e1c8:	00f42400 	.word	0x00f42400

0801e1cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e1cc:	b480      	push	{r7}
 801e1ce:	b083      	sub	sp, #12
 801e1d0:	af00      	add	r7, sp, #0
 801e1d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1d8:	f003 0301 	and.w	r3, r3, #1
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d00a      	beq.n	801e1f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	685b      	ldr	r3, [r3, #4]
 801e1e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	430a      	orrs	r2, r1
 801e1f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1fa:	f003 0302 	and.w	r3, r3, #2
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d00a      	beq.n	801e218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	685b      	ldr	r3, [r3, #4]
 801e208:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	430a      	orrs	r2, r1
 801e216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e21c:	f003 0304 	and.w	r3, r3, #4
 801e220:	2b00      	cmp	r3, #0
 801e222:	d00a      	beq.n	801e23a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	681b      	ldr	r3, [r3, #0]
 801e228:	685b      	ldr	r3, [r3, #4]
 801e22a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	430a      	orrs	r2, r1
 801e238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e23e:	f003 0308 	and.w	r3, r3, #8
 801e242:	2b00      	cmp	r3, #0
 801e244:	d00a      	beq.n	801e25c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	685b      	ldr	r3, [r3, #4]
 801e24c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	430a      	orrs	r2, r1
 801e25a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e260:	f003 0310 	and.w	r3, r3, #16
 801e264:	2b00      	cmp	r3, #0
 801e266:	d00a      	beq.n	801e27e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	689b      	ldr	r3, [r3, #8]
 801e26e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	430a      	orrs	r2, r1
 801e27c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e282:	f003 0320 	and.w	r3, r3, #32
 801e286:	2b00      	cmp	r3, #0
 801e288:	d00a      	beq.n	801e2a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	689b      	ldr	r3, [r3, #8]
 801e290:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	430a      	orrs	r2, r1
 801e29e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d01a      	beq.n	801e2e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	685b      	ldr	r3, [r3, #4]
 801e2b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	430a      	orrs	r2, r1
 801e2c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e2ca:	d10a      	bne.n	801e2e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	685b      	ldr	r3, [r3, #4]
 801e2d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	430a      	orrs	r2, r1
 801e2e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	d00a      	beq.n	801e304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	685b      	ldr	r3, [r3, #4]
 801e2f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	430a      	orrs	r2, r1
 801e302:	605a      	str	r2, [r3, #4]
  }
}
 801e304:	bf00      	nop
 801e306:	370c      	adds	r7, #12
 801e308:	46bd      	mov	sp, r7
 801e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e30e:	4770      	bx	lr

0801e310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e310:	b580      	push	{r7, lr}
 801e312:	b086      	sub	sp, #24
 801e314:	af02      	add	r7, sp, #8
 801e316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	2200      	movs	r2, #0
 801e31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e320:	f7f9 fb10 	bl	8017944 <HAL_GetTick>
 801e324:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	f003 0308 	and.w	r3, r3, #8
 801e330:	2b08      	cmp	r3, #8
 801e332:	d10e      	bne.n	801e352 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e338:	9300      	str	r3, [sp, #0]
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	2200      	movs	r2, #0
 801e33e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e342:	6878      	ldr	r0, [r7, #4]
 801e344:	f000 f831 	bl	801e3aa <UART_WaitOnFlagUntilTimeout>
 801e348:	4603      	mov	r3, r0
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d001      	beq.n	801e352 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e34e:	2303      	movs	r3, #3
 801e350:	e027      	b.n	801e3a2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	f003 0304 	and.w	r3, r3, #4
 801e35c:	2b04      	cmp	r3, #4
 801e35e:	d10e      	bne.n	801e37e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e364:	9300      	str	r3, [sp, #0]
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	2200      	movs	r2, #0
 801e36a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801e36e:	6878      	ldr	r0, [r7, #4]
 801e370:	f000 f81b 	bl	801e3aa <UART_WaitOnFlagUntilTimeout>
 801e374:	4603      	mov	r3, r0
 801e376:	2b00      	cmp	r3, #0
 801e378:	d001      	beq.n	801e37e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e37a:	2303      	movs	r3, #3
 801e37c:	e011      	b.n	801e3a2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	2220      	movs	r2, #32
 801e382:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	2220      	movs	r2, #32
 801e388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	2200      	movs	r2, #0
 801e390:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	2200      	movs	r2, #0
 801e396:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	2200      	movs	r2, #0
 801e39c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801e3a0:	2300      	movs	r3, #0
}
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	3710      	adds	r7, #16
 801e3a6:	46bd      	mov	sp, r7
 801e3a8:	bd80      	pop	{r7, pc}

0801e3aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e3aa:	b580      	push	{r7, lr}
 801e3ac:	b09c      	sub	sp, #112	; 0x70
 801e3ae:	af00      	add	r7, sp, #0
 801e3b0:	60f8      	str	r0, [r7, #12]
 801e3b2:	60b9      	str	r1, [r7, #8]
 801e3b4:	603b      	str	r3, [r7, #0]
 801e3b6:	4613      	mov	r3, r2
 801e3b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e3ba:	e0a7      	b.n	801e50c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e3c2:	f000 80a3 	beq.w	801e50c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e3c6:	f7f9 fabd 	bl	8017944 <HAL_GetTick>
 801e3ca:	4602      	mov	r2, r0
 801e3cc:	683b      	ldr	r3, [r7, #0]
 801e3ce:	1ad3      	subs	r3, r2, r3
 801e3d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801e3d2:	429a      	cmp	r2, r3
 801e3d4:	d302      	bcc.n	801e3dc <UART_WaitOnFlagUntilTimeout+0x32>
 801e3d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d13f      	bne.n	801e45c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3e4:	e853 3f00 	ldrex	r3, [r3]
 801e3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801e3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e3ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801e3f0:	667b      	str	r3, [r7, #100]	; 0x64
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	461a      	mov	r2, r3
 801e3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e3fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e3fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e3fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801e400:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e402:	e841 2300 	strex	r3, r2, [r1]
 801e406:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801e408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d1e6      	bne.n	801e3dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	3308      	adds	r3, #8
 801e414:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e418:	e853 3f00 	ldrex	r3, [r3]
 801e41c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801e41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e420:	f023 0301 	bic.w	r3, r3, #1
 801e424:	663b      	str	r3, [r7, #96]	; 0x60
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	3308      	adds	r3, #8
 801e42c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e42e:	64ba      	str	r2, [r7, #72]	; 0x48
 801e430:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e436:	e841 2300 	strex	r3, r2, [r1]
 801e43a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801e43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d1e5      	bne.n	801e40e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	2220      	movs	r2, #32
 801e446:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	2220      	movs	r2, #32
 801e44c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	2200      	movs	r2, #0
 801e454:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801e458:	2303      	movs	r3, #3
 801e45a:	e068      	b.n	801e52e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	f003 0304 	and.w	r3, r3, #4
 801e466:	2b00      	cmp	r3, #0
 801e468:	d050      	beq.n	801e50c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	69db      	ldr	r3, [r3, #28]
 801e470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e478:	d148      	bne.n	801e50c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e482:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e48c:	e853 3f00 	ldrex	r3, [r3]
 801e490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801e498:	66fb      	str	r3, [r7, #108]	; 0x6c
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	461a      	mov	r2, r3
 801e4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4a2:	637b      	str	r3, [r7, #52]	; 0x34
 801e4a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e4a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e4aa:	e841 2300 	strex	r3, r2, [r1]
 801e4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801e4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d1e6      	bne.n	801e484 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	3308      	adds	r3, #8
 801e4bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e4be:	697b      	ldr	r3, [r7, #20]
 801e4c0:	e853 3f00 	ldrex	r3, [r3]
 801e4c4:	613b      	str	r3, [r7, #16]
   return(result);
 801e4c6:	693b      	ldr	r3, [r7, #16]
 801e4c8:	f023 0301 	bic.w	r3, r3, #1
 801e4cc:	66bb      	str	r3, [r7, #104]	; 0x68
 801e4ce:	68fb      	ldr	r3, [r7, #12]
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	3308      	adds	r3, #8
 801e4d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e4d6:	623a      	str	r2, [r7, #32]
 801e4d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e4da:	69f9      	ldr	r1, [r7, #28]
 801e4dc:	6a3a      	ldr	r2, [r7, #32]
 801e4de:	e841 2300 	strex	r3, r2, [r1]
 801e4e2:	61bb      	str	r3, [r7, #24]
   return(result);
 801e4e4:	69bb      	ldr	r3, [r7, #24]
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	d1e5      	bne.n	801e4b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	2220      	movs	r2, #32
 801e4ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801e4f0:	68fb      	ldr	r3, [r7, #12]
 801e4f2:	2220      	movs	r2, #32
 801e4f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	2220      	movs	r2, #32
 801e4fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	2200      	movs	r2, #0
 801e504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801e508:	2303      	movs	r3, #3
 801e50a:	e010      	b.n	801e52e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	69da      	ldr	r2, [r3, #28]
 801e512:	68bb      	ldr	r3, [r7, #8]
 801e514:	4013      	ands	r3, r2
 801e516:	68ba      	ldr	r2, [r7, #8]
 801e518:	429a      	cmp	r2, r3
 801e51a:	bf0c      	ite	eq
 801e51c:	2301      	moveq	r3, #1
 801e51e:	2300      	movne	r3, #0
 801e520:	b2db      	uxtb	r3, r3
 801e522:	461a      	mov	r2, r3
 801e524:	79fb      	ldrb	r3, [r7, #7]
 801e526:	429a      	cmp	r2, r3
 801e528:	f43f af48 	beq.w	801e3bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e52c:	2300      	movs	r3, #0
}
 801e52e:	4618      	mov	r0, r3
 801e530:	3770      	adds	r7, #112	; 0x70
 801e532:	46bd      	mov	sp, r7
 801e534:	bd80      	pop	{r7, pc}
	...

0801e538 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e538:	b480      	push	{r7}
 801e53a:	b097      	sub	sp, #92	; 0x5c
 801e53c:	af00      	add	r7, sp, #0
 801e53e:	60f8      	str	r0, [r7, #12]
 801e540:	60b9      	str	r1, [r7, #8]
 801e542:	4613      	mov	r3, r2
 801e544:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	68ba      	ldr	r2, [r7, #8]
 801e54a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801e54c:	68fb      	ldr	r3, [r7, #12]
 801e54e:	88fa      	ldrh	r2, [r7, #6]
 801e550:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801e554:	68fb      	ldr	r3, [r7, #12]
 801e556:	88fa      	ldrh	r2, [r7, #6]
 801e558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	2200      	movs	r2, #0
 801e560:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	689b      	ldr	r3, [r3, #8]
 801e566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e56a:	d10e      	bne.n	801e58a <UART_Start_Receive_IT+0x52>
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	691b      	ldr	r3, [r3, #16]
 801e570:	2b00      	cmp	r3, #0
 801e572:	d105      	bne.n	801e580 <UART_Start_Receive_IT+0x48>
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	f240 12ff 	movw	r2, #511	; 0x1ff
 801e57a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e57e:	e02d      	b.n	801e5dc <UART_Start_Receive_IT+0xa4>
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	22ff      	movs	r2, #255	; 0xff
 801e584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e588:	e028      	b.n	801e5dc <UART_Start_Receive_IT+0xa4>
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	689b      	ldr	r3, [r3, #8]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d10d      	bne.n	801e5ae <UART_Start_Receive_IT+0x76>
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	691b      	ldr	r3, [r3, #16]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d104      	bne.n	801e5a4 <UART_Start_Receive_IT+0x6c>
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	22ff      	movs	r2, #255	; 0xff
 801e59e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e5a2:	e01b      	b.n	801e5dc <UART_Start_Receive_IT+0xa4>
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	227f      	movs	r2, #127	; 0x7f
 801e5a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e5ac:	e016      	b.n	801e5dc <UART_Start_Receive_IT+0xa4>
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	689b      	ldr	r3, [r3, #8]
 801e5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e5b6:	d10d      	bne.n	801e5d4 <UART_Start_Receive_IT+0x9c>
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	691b      	ldr	r3, [r3, #16]
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d104      	bne.n	801e5ca <UART_Start_Receive_IT+0x92>
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	227f      	movs	r2, #127	; 0x7f
 801e5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e5c8:	e008      	b.n	801e5dc <UART_Start_Receive_IT+0xa4>
 801e5ca:	68fb      	ldr	r3, [r7, #12]
 801e5cc:	223f      	movs	r2, #63	; 0x3f
 801e5ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e5d2:	e003      	b.n	801e5dc <UART_Start_Receive_IT+0xa4>
 801e5d4:	68fb      	ldr	r3, [r7, #12]
 801e5d6:	2200      	movs	r2, #0
 801e5d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	2200      	movs	r2, #0
 801e5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	2222      	movs	r2, #34	; 0x22
 801e5e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	3308      	adds	r3, #8
 801e5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5f6:	e853 3f00 	ldrex	r3, [r3]
 801e5fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5fe:	f043 0301 	orr.w	r3, r3, #1
 801e602:	657b      	str	r3, [r7, #84]	; 0x54
 801e604:	68fb      	ldr	r3, [r7, #12]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	3308      	adds	r3, #8
 801e60a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e60c:	64ba      	str	r2, [r7, #72]	; 0x48
 801e60e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e610:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e614:	e841 2300 	strex	r3, r2, [r1]
 801e618:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801e61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d1e5      	bne.n	801e5ec <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e620:	68fb      	ldr	r3, [r7, #12]
 801e622:	689b      	ldr	r3, [r3, #8]
 801e624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e628:	d107      	bne.n	801e63a <UART_Start_Receive_IT+0x102>
 801e62a:	68fb      	ldr	r3, [r7, #12]
 801e62c:	691b      	ldr	r3, [r3, #16]
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d103      	bne.n	801e63a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	4a21      	ldr	r2, [pc, #132]	; (801e6bc <UART_Start_Receive_IT+0x184>)
 801e636:	669a      	str	r2, [r3, #104]	; 0x68
 801e638:	e002      	b.n	801e640 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	4a20      	ldr	r2, [pc, #128]	; (801e6c0 <UART_Start_Receive_IT+0x188>)
 801e63e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	691b      	ldr	r3, [r3, #16]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d019      	beq.n	801e67c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e650:	e853 3f00 	ldrex	r3, [r3]
 801e654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e658:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801e65c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	461a      	mov	r2, r3
 801e664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e666:	637b      	str	r3, [r7, #52]	; 0x34
 801e668:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e66a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e66c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e66e:	e841 2300 	strex	r3, r2, [r1]
 801e672:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e676:	2b00      	cmp	r3, #0
 801e678:	d1e6      	bne.n	801e648 <UART_Start_Receive_IT+0x110>
 801e67a:	e018      	b.n	801e6ae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e682:	697b      	ldr	r3, [r7, #20]
 801e684:	e853 3f00 	ldrex	r3, [r3]
 801e688:	613b      	str	r3, [r7, #16]
   return(result);
 801e68a:	693b      	ldr	r3, [r7, #16]
 801e68c:	f043 0320 	orr.w	r3, r3, #32
 801e690:	653b      	str	r3, [r7, #80]	; 0x50
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	461a      	mov	r2, r3
 801e698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e69a:	623b      	str	r3, [r7, #32]
 801e69c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e69e:	69f9      	ldr	r1, [r7, #28]
 801e6a0:	6a3a      	ldr	r2, [r7, #32]
 801e6a2:	e841 2300 	strex	r3, r2, [r1]
 801e6a6:	61bb      	str	r3, [r7, #24]
   return(result);
 801e6a8:	69bb      	ldr	r3, [r7, #24]
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d1e6      	bne.n	801e67c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801e6ae:	2300      	movs	r3, #0
}
 801e6b0:	4618      	mov	r0, r3
 801e6b2:	375c      	adds	r7, #92	; 0x5c
 801e6b4:	46bd      	mov	sp, r7
 801e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ba:	4770      	bx	lr
 801e6bc:	0801e983 	.word	0x0801e983
 801e6c0:	0801e815 	.word	0x0801e815

0801e6c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801e6c4:	b480      	push	{r7}
 801e6c6:	b095      	sub	sp, #84	; 0x54
 801e6c8:	af00      	add	r7, sp, #0
 801e6ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6d4:	e853 3f00 	ldrex	r3, [r3]
 801e6d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801e6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	461a      	mov	r2, r3
 801e6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e6ea:	643b      	str	r3, [r7, #64]	; 0x40
 801e6ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e6ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e6f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e6f2:	e841 2300 	strex	r3, r2, [r1]
 801e6f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d1e6      	bne.n	801e6cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	3308      	adds	r3, #8
 801e704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e706:	6a3b      	ldr	r3, [r7, #32]
 801e708:	e853 3f00 	ldrex	r3, [r3]
 801e70c:	61fb      	str	r3, [r7, #28]
   return(result);
 801e70e:	69fb      	ldr	r3, [r7, #28]
 801e710:	f023 0301 	bic.w	r3, r3, #1
 801e714:	64bb      	str	r3, [r7, #72]	; 0x48
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	3308      	adds	r3, #8
 801e71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e71e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e726:	e841 2300 	strex	r3, r2, [r1]
 801e72a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d1e5      	bne.n	801e6fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e736:	2b01      	cmp	r3, #1
 801e738:	d118      	bne.n	801e76c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	e853 3f00 	ldrex	r3, [r3]
 801e746:	60bb      	str	r3, [r7, #8]
   return(result);
 801e748:	68bb      	ldr	r3, [r7, #8]
 801e74a:	f023 0310 	bic.w	r3, r3, #16
 801e74e:	647b      	str	r3, [r7, #68]	; 0x44
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	461a      	mov	r2, r3
 801e756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e758:	61bb      	str	r3, [r7, #24]
 801e75a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e75c:	6979      	ldr	r1, [r7, #20]
 801e75e:	69ba      	ldr	r2, [r7, #24]
 801e760:	e841 2300 	strex	r3, r2, [r1]
 801e764:	613b      	str	r3, [r7, #16]
   return(result);
 801e766:	693b      	ldr	r3, [r7, #16]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d1e6      	bne.n	801e73a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	2220      	movs	r2, #32
 801e770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	2200      	movs	r2, #0
 801e778:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	2200      	movs	r2, #0
 801e77e:	669a      	str	r2, [r3, #104]	; 0x68
}
 801e780:	bf00      	nop
 801e782:	3754      	adds	r7, #84	; 0x54
 801e784:	46bd      	mov	sp, r7
 801e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e78a:	4770      	bx	lr

0801e78c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e78c:	b580      	push	{r7, lr}
 801e78e:	b084      	sub	sp, #16
 801e790:	af00      	add	r7, sp, #0
 801e792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e79a:	68fb      	ldr	r3, [r7, #12]
 801e79c:	2200      	movs	r2, #0
 801e79e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	2200      	movs	r2, #0
 801e7a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e7b0:	68f8      	ldr	r0, [r7, #12]
 801e7b2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e7b4:	bf00      	nop
 801e7b6:	3710      	adds	r7, #16
 801e7b8:	46bd      	mov	sp, r7
 801e7ba:	bd80      	pop	{r7, pc}

0801e7bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e7bc:	b580      	push	{r7, lr}
 801e7be:	b088      	sub	sp, #32
 801e7c0:	af00      	add	r7, sp, #0
 801e7c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	e853 3f00 	ldrex	r3, [r3]
 801e7d0:	60bb      	str	r3, [r7, #8]
   return(result);
 801e7d2:	68bb      	ldr	r3, [r7, #8]
 801e7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e7d8:	61fb      	str	r3, [r7, #28]
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	461a      	mov	r2, r3
 801e7e0:	69fb      	ldr	r3, [r7, #28]
 801e7e2:	61bb      	str	r3, [r7, #24]
 801e7e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e7e6:	6979      	ldr	r1, [r7, #20]
 801e7e8:	69ba      	ldr	r2, [r7, #24]
 801e7ea:	e841 2300 	strex	r3, r2, [r1]
 801e7ee:	613b      	str	r3, [r7, #16]
   return(result);
 801e7f0:	693b      	ldr	r3, [r7, #16]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d1e6      	bne.n	801e7c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	2220      	movs	r2, #32
 801e7fa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	2200      	movs	r2, #0
 801e800:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e808:	6878      	ldr	r0, [r7, #4]
 801e80a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e80c:	bf00      	nop
 801e80e:	3720      	adds	r7, #32
 801e810:	46bd      	mov	sp, r7
 801e812:	bd80      	pop	{r7, pc}

0801e814 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b096      	sub	sp, #88	; 0x58
 801e818:	af00      	add	r7, sp, #0
 801e81a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e822:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e82c:	2b22      	cmp	r3, #34	; 0x22
 801e82e:	f040 809c 	bne.w	801e96a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	681b      	ldr	r3, [r3, #0]
 801e836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e838:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e83c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801e840:	b2d9      	uxtb	r1, r3
 801e842:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801e846:	b2da      	uxtb	r2, r3
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e84c:	400a      	ands	r2, r1
 801e84e:	b2d2      	uxtb	r2, r2
 801e850:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e856:	1c5a      	adds	r2, r3, #1
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e862:	b29b      	uxth	r3, r3
 801e864:	3b01      	subs	r3, #1
 801e866:	b29a      	uxth	r2, r3
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e874:	b29b      	uxth	r3, r3
 801e876:	2b00      	cmp	r3, #0
 801e878:	d17f      	bne.n	801e97a <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e882:	e853 3f00 	ldrex	r3, [r3]
 801e886:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801e888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e88a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801e88e:	653b      	str	r3, [r7, #80]	; 0x50
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	461a      	mov	r2, r3
 801e896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e898:	647b      	str	r3, [r7, #68]	; 0x44
 801e89a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e89c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e89e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e8a0:	e841 2300 	strex	r3, r2, [r1]
 801e8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801e8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d1e6      	bne.n	801e87a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	681b      	ldr	r3, [r3, #0]
 801e8b0:	3308      	adds	r3, #8
 801e8b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8b6:	e853 3f00 	ldrex	r3, [r3]
 801e8ba:	623b      	str	r3, [r7, #32]
   return(result);
 801e8bc:	6a3b      	ldr	r3, [r7, #32]
 801e8be:	f023 0301 	bic.w	r3, r3, #1
 801e8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	3308      	adds	r3, #8
 801e8ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e8cc:	633a      	str	r2, [r7, #48]	; 0x30
 801e8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e8d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e8d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e8d4:	e841 2300 	strex	r3, r2, [r1]
 801e8d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d1e5      	bne.n	801e8ac <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	2220      	movs	r2, #32
 801e8e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	2200      	movs	r2, #0
 801e8ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	2200      	movs	r2, #0
 801e8f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e8f8:	2b01      	cmp	r3, #1
 801e8fa:	d130      	bne.n	801e95e <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	2200      	movs	r2, #0
 801e900:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e908:	693b      	ldr	r3, [r7, #16]
 801e90a:	e853 3f00 	ldrex	r3, [r3]
 801e90e:	60fb      	str	r3, [r7, #12]
   return(result);
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	f023 0310 	bic.w	r3, r3, #16
 801e916:	64bb      	str	r3, [r7, #72]	; 0x48
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	461a      	mov	r2, r3
 801e91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e920:	61fb      	str	r3, [r7, #28]
 801e922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e924:	69b9      	ldr	r1, [r7, #24]
 801e926:	69fa      	ldr	r2, [r7, #28]
 801e928:	e841 2300 	strex	r3, r2, [r1]
 801e92c:	617b      	str	r3, [r7, #20]
   return(result);
 801e92e:	697b      	ldr	r3, [r7, #20]
 801e930:	2b00      	cmp	r3, #0
 801e932:	d1e6      	bne.n	801e902 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	681b      	ldr	r3, [r3, #0]
 801e938:	69db      	ldr	r3, [r3, #28]
 801e93a:	f003 0310 	and.w	r3, r3, #16
 801e93e:	2b10      	cmp	r3, #16
 801e940:	d103      	bne.n	801e94a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	2210      	movs	r2, #16
 801e948:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801e950:	687a      	ldr	r2, [r7, #4]
 801e952:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801e956:	4611      	mov	r1, r2
 801e958:	6878      	ldr	r0, [r7, #4]
 801e95a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e95c:	e00d      	b.n	801e97a <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	4798      	blx	r3
}
 801e968:	e007      	b.n	801e97a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	699a      	ldr	r2, [r3, #24]
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	f042 0208 	orr.w	r2, r2, #8
 801e978:	619a      	str	r2, [r3, #24]
}
 801e97a:	bf00      	nop
 801e97c:	3758      	adds	r7, #88	; 0x58
 801e97e:	46bd      	mov	sp, r7
 801e980:	bd80      	pop	{r7, pc}

0801e982 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e982:	b580      	push	{r7, lr}
 801e984:	b096      	sub	sp, #88	; 0x58
 801e986:	af00      	add	r7, sp, #0
 801e988:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e990:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e99a:	2b22      	cmp	r3, #34	; 0x22
 801e99c:	f040 809c 	bne.w	801ead8 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e9ae:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801e9b0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801e9b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801e9b8:	4013      	ands	r3, r2
 801e9ba:	b29a      	uxth	r2, r3
 801e9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e9be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e9c4:	1c9a      	adds	r2, r3, #2
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e9d0:	b29b      	uxth	r3, r3
 801e9d2:	3b01      	subs	r3, #1
 801e9d4:	b29a      	uxth	r2, r3
 801e9d6:	687b      	ldr	r3, [r7, #4]
 801e9d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e9e2:	b29b      	uxth	r3, r3
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d17f      	bne.n	801eae8 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e9f0:	e853 3f00 	ldrex	r3, [r3]
 801e9f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801e9fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	461a      	mov	r2, r3
 801ea04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea06:	643b      	str	r3, [r7, #64]	; 0x40
 801ea08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ea0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ea0e:	e841 2300 	strex	r3, r2, [r1]
 801ea12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d1e6      	bne.n	801e9e8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	3308      	adds	r3, #8
 801ea20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea22:	6a3b      	ldr	r3, [r7, #32]
 801ea24:	e853 3f00 	ldrex	r3, [r3]
 801ea28:	61fb      	str	r3, [r7, #28]
   return(result);
 801ea2a:	69fb      	ldr	r3, [r7, #28]
 801ea2c:	f023 0301 	bic.w	r3, r3, #1
 801ea30:	64bb      	str	r3, [r7, #72]	; 0x48
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	3308      	adds	r3, #8
 801ea38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ea3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ea3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ea40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ea42:	e841 2300 	strex	r3, r2, [r1]
 801ea46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d1e5      	bne.n	801ea1a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	2220      	movs	r2, #32
 801ea52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	2200      	movs	r2, #0
 801ea5a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	2200      	movs	r2, #0
 801ea60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ea66:	2b01      	cmp	r3, #1
 801ea68:	d130      	bne.n	801eacc <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	e853 3f00 	ldrex	r3, [r3]
 801ea7c:	60bb      	str	r3, [r7, #8]
   return(result);
 801ea7e:	68bb      	ldr	r3, [r7, #8]
 801ea80:	f023 0310 	bic.w	r3, r3, #16
 801ea84:	647b      	str	r3, [r7, #68]	; 0x44
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	681b      	ldr	r3, [r3, #0]
 801ea8a:	461a      	mov	r2, r3
 801ea8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea8e:	61bb      	str	r3, [r7, #24]
 801ea90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea92:	6979      	ldr	r1, [r7, #20]
 801ea94:	69ba      	ldr	r2, [r7, #24]
 801ea96:	e841 2300 	strex	r3, r2, [r1]
 801ea9a:	613b      	str	r3, [r7, #16]
   return(result);
 801ea9c:	693b      	ldr	r3, [r7, #16]
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	d1e6      	bne.n	801ea70 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	69db      	ldr	r3, [r3, #28]
 801eaa8:	f003 0310 	and.w	r3, r3, #16
 801eaac:	2b10      	cmp	r3, #16
 801eaae:	d103      	bne.n	801eab8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	2210      	movs	r2, #16
 801eab6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801eabe:	687a      	ldr	r2, [r7, #4]
 801eac0:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801eac4:	4611      	mov	r1, r2
 801eac6:	6878      	ldr	r0, [r7, #4]
 801eac8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801eaca:	e00d      	b.n	801eae8 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ead2:	6878      	ldr	r0, [r7, #4]
 801ead4:	4798      	blx	r3
}
 801ead6:	e007      	b.n	801eae8 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	699a      	ldr	r2, [r3, #24]
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	681b      	ldr	r3, [r3, #0]
 801eae2:	f042 0208 	orr.w	r2, r2, #8
 801eae6:	619a      	str	r2, [r3, #24]
}
 801eae8:	bf00      	nop
 801eaea:	3758      	adds	r7, #88	; 0x58
 801eaec:	46bd      	mov	sp, r7
 801eaee:	bd80      	pop	{r7, pc}

0801eaf0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801eaf0:	b580      	push	{r7, lr}
 801eaf2:	b08c      	sub	sp, #48	; 0x30
 801eaf4:	af00      	add	r7, sp, #0
 801eaf6:	60f8      	str	r0, [r7, #12]
 801eaf8:	60b9      	str	r1, [r7, #8]
 801eafa:	4613      	mov	r3, r2
 801eafc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801eafe:	68fb      	ldr	r3, [r7, #12]
 801eb00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801eb04:	2b20      	cmp	r3, #32
 801eb06:	d142      	bne.n	801eb8e <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801eb08:	68bb      	ldr	r3, [r7, #8]
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d002      	beq.n	801eb14 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801eb0e:	88fb      	ldrh	r3, [r7, #6]
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d101      	bne.n	801eb18 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801eb14:	2301      	movs	r3, #1
 801eb16:	e03b      	b.n	801eb90 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	2201      	movs	r2, #1
 801eb1c:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801eb1e:	68fb      	ldr	r3, [r7, #12]
 801eb20:	2200      	movs	r2, #0
 801eb22:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801eb24:	88fb      	ldrh	r3, [r7, #6]
 801eb26:	461a      	mov	r2, r3
 801eb28:	68b9      	ldr	r1, [r7, #8]
 801eb2a:	68f8      	ldr	r0, [r7, #12]
 801eb2c:	f7ff fd04 	bl	801e538 <UART_Start_Receive_IT>
 801eb30:	4603      	mov	r3, r0
 801eb32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801eb36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d124      	bne.n	801eb88 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801eb3e:	68fb      	ldr	r3, [r7, #12]
 801eb40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801eb42:	2b01      	cmp	r3, #1
 801eb44:	d11d      	bne.n	801eb82 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	2210      	movs	r2, #16
 801eb4c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eb54:	69bb      	ldr	r3, [r7, #24]
 801eb56:	e853 3f00 	ldrex	r3, [r3]
 801eb5a:	617b      	str	r3, [r7, #20]
   return(result);
 801eb5c:	697b      	ldr	r3, [r7, #20]
 801eb5e:	f043 0310 	orr.w	r3, r3, #16
 801eb62:	62bb      	str	r3, [r7, #40]	; 0x28
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	461a      	mov	r2, r3
 801eb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb6c:	627b      	str	r3, [r7, #36]	; 0x24
 801eb6e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eb70:	6a39      	ldr	r1, [r7, #32]
 801eb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb74:	e841 2300 	strex	r3, r2, [r1]
 801eb78:	61fb      	str	r3, [r7, #28]
   return(result);
 801eb7a:	69fb      	ldr	r3, [r7, #28]
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d1e6      	bne.n	801eb4e <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801eb80:	e002      	b.n	801eb88 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801eb82:	2301      	movs	r3, #1
 801eb84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801eb88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801eb8c:	e000      	b.n	801eb90 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801eb8e:	2302      	movs	r3, #2
  }
}
 801eb90:	4618      	mov	r0, r3
 801eb92:	3730      	adds	r7, #48	; 0x30
 801eb94:	46bd      	mov	sp, r7
 801eb96:	bd80      	pop	{r7, pc}

0801eb98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801eb98:	b580      	push	{r7, lr}
 801eb9a:	b084      	sub	sp, #16
 801eb9c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801eb9e:	4b2f      	ldr	r3, [pc, #188]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801eba0:	22c0      	movs	r2, #192	; 0xc0
 801eba2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801eba4:	4b2d      	ldr	r3, [pc, #180]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801eba6:	22a8      	movs	r2, #168	; 0xa8
 801eba8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801ebaa:	4b2c      	ldr	r3, [pc, #176]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801ebac:	220c      	movs	r2, #12
 801ebae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801ebb0:	4b2a      	ldr	r3, [pc, #168]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801ebb2:	2264      	movs	r2, #100	; 0x64
 801ebb4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801ebb6:	4b2a      	ldr	r3, [pc, #168]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ebb8:	22ff      	movs	r2, #255	; 0xff
 801ebba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801ebbc:	4b28      	ldr	r3, [pc, #160]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ebbe:	22ff      	movs	r2, #255	; 0xff
 801ebc0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801ebc2:	4b27      	ldr	r3, [pc, #156]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ebc4:	22ff      	movs	r2, #255	; 0xff
 801ebc6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801ebc8:	4b25      	ldr	r3, [pc, #148]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ebca:	2200      	movs	r2, #0
 801ebcc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801ebce:	4b25      	ldr	r3, [pc, #148]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ebd0:	22c0      	movs	r2, #192	; 0xc0
 801ebd2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801ebd4:	4b23      	ldr	r3, [pc, #140]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ebd6:	22a8      	movs	r2, #168	; 0xa8
 801ebd8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801ebda:	4b22      	ldr	r3, [pc, #136]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ebdc:	220c      	movs	r2, #12
 801ebde:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801ebe0:	4b20      	ldr	r3, [pc, #128]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ebe2:	2201      	movs	r2, #1
 801ebe4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801ebe6:	4b20      	ldr	r3, [pc, #128]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ebe8:	781b      	ldrb	r3, [r3, #0]
 801ebea:	2b01      	cmp	r3, #1
 801ebec:	d002      	beq.n	801ebf4 <MX_LWIP_Init+0x5c>
 801ebee:	2b02      	cmp	r3, #2
 801ebf0:	d03c      	beq.n	801ec6c <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801ebf2:	e162      	b.n	801eeba <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801ebf4:	4b1c      	ldr	r3, [pc, #112]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ebf6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801ebfa:	4b18      	ldr	r3, [pc, #96]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801ebfc:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801ebfe:	4b1a      	ldr	r3, [pc, #104]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ec00:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801ec04:	4b15      	ldr	r3, [pc, #84]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801ec06:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801ec08:	4b17      	ldr	r3, [pc, #92]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ec0a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801ec0e:	4b13      	ldr	r3, [pc, #76]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801ec10:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801ec12:	4b15      	ldr	r3, [pc, #84]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ec14:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 801ec18:	4b10      	ldr	r3, [pc, #64]	; (801ec5c <MX_LWIP_Init+0xc4>)
 801ec1a:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801ec1c:	4b10      	ldr	r3, [pc, #64]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ec1e:	22ff      	movs	r2, #255	; 0xff
 801ec20:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801ec22:	4b0f      	ldr	r3, [pc, #60]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ec24:	22ff      	movs	r2, #255	; 0xff
 801ec26:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801ec28:	4b0d      	ldr	r3, [pc, #52]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ec2a:	22ff      	movs	r2, #255	; 0xff
 801ec2c:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801ec2e:	4b0c      	ldr	r3, [pc, #48]	; (801ec60 <MX_LWIP_Init+0xc8>)
 801ec30:	2200      	movs	r2, #0
 801ec32:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801ec34:	4b0c      	ldr	r3, [pc, #48]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ec36:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801ec3a:	4b0a      	ldr	r3, [pc, #40]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ec3c:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801ec3e:	4b0a      	ldr	r3, [pc, #40]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ec40:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801ec44:	4b07      	ldr	r3, [pc, #28]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ec46:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801ec48:	4b07      	ldr	r3, [pc, #28]	; (801ec68 <MX_LWIP_Init+0xd0>)
 801ec4a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801ec4e:	4b05      	ldr	r3, [pc, #20]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ec50:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801ec52:	4b04      	ldr	r3, [pc, #16]	; (801ec64 <MX_LWIP_Init+0xcc>)
 801ec54:	2201      	movs	r2, #1
 801ec56:	70da      	strb	r2, [r3, #3]
		break;
 801ec58:	e03b      	b.n	801ecd2 <MX_LWIP_Init+0x13a>
 801ec5a:	bf00      	nop
 801ec5c:	2001149c 	.word	0x2001149c
 801ec60:	200114a0 	.word	0x200114a0
 801ec64:	200114a4 	.word	0x200114a4
 801ec68:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801ec6c:	4b94      	ldr	r3, [pc, #592]	; (801eec0 <MX_LWIP_Init+0x328>)
 801ec6e:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801ec72:	4b94      	ldr	r3, [pc, #592]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ec74:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801ec76:	4b92      	ldr	r3, [pc, #584]	; (801eec0 <MX_LWIP_Init+0x328>)
 801ec78:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801ec7c:	4b91      	ldr	r3, [pc, #580]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ec7e:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801ec80:	4b8f      	ldr	r3, [pc, #572]	; (801eec0 <MX_LWIP_Init+0x328>)
 801ec82:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801ec86:	4b8f      	ldr	r3, [pc, #572]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ec88:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801ec8a:	4b8d      	ldr	r3, [pc, #564]	; (801eec0 <MX_LWIP_Init+0x328>)
 801ec8c:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 801ec90:	4b8c      	ldr	r3, [pc, #560]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ec92:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801ec94:	4b8c      	ldr	r3, [pc, #560]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ec96:	22ff      	movs	r2, #255	; 0xff
 801ec98:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801ec9a:	4b8b      	ldr	r3, [pc, #556]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ec9c:	22ff      	movs	r2, #255	; 0xff
 801ec9e:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801eca0:	4b89      	ldr	r3, [pc, #548]	; (801eec8 <MX_LWIP_Init+0x330>)
 801eca2:	22ff      	movs	r2, #255	; 0xff
 801eca4:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801eca6:	4b88      	ldr	r3, [pc, #544]	; (801eec8 <MX_LWIP_Init+0x330>)
 801eca8:	2200      	movs	r2, #0
 801ecaa:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801ecac:	4b84      	ldr	r3, [pc, #528]	; (801eec0 <MX_LWIP_Init+0x328>)
 801ecae:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801ecb2:	4b86      	ldr	r3, [pc, #536]	; (801eecc <MX_LWIP_Init+0x334>)
 801ecb4:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801ecb6:	4b82      	ldr	r3, [pc, #520]	; (801eec0 <MX_LWIP_Init+0x328>)
 801ecb8:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801ecbc:	4b83      	ldr	r3, [pc, #524]	; (801eecc <MX_LWIP_Init+0x334>)
 801ecbe:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801ecc0:	4b7f      	ldr	r3, [pc, #508]	; (801eec0 <MX_LWIP_Init+0x328>)
 801ecc2:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801ecc6:	4b81      	ldr	r3, [pc, #516]	; (801eecc <MX_LWIP_Init+0x334>)
 801ecc8:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801ecca:	4b80      	ldr	r3, [pc, #512]	; (801eecc <MX_LWIP_Init+0x334>)
 801eccc:	2201      	movs	r2, #1
 801ecce:	70da      	strb	r2, [r3, #3]
		break;
 801ecd0:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801ecd2:	f000 fd42 	bl	801f75a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801ecd6:	4b7b      	ldr	r3, [pc, #492]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ecd8:	781b      	ldrb	r3, [r3, #0]
 801ecda:	061a      	lsls	r2, r3, #24
 801ecdc:	4b79      	ldr	r3, [pc, #484]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ecde:	785b      	ldrb	r3, [r3, #1]
 801ece0:	041b      	lsls	r3, r3, #16
 801ece2:	431a      	orrs	r2, r3
 801ece4:	4b77      	ldr	r3, [pc, #476]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ece6:	789b      	ldrb	r3, [r3, #2]
 801ece8:	021b      	lsls	r3, r3, #8
 801ecea:	4313      	orrs	r3, r2
 801ecec:	4a75      	ldr	r2, [pc, #468]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ecee:	78d2      	ldrb	r2, [r2, #3]
 801ecf0:	4313      	orrs	r3, r2
 801ecf2:	061a      	lsls	r2, r3, #24
 801ecf4:	4b73      	ldr	r3, [pc, #460]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ecf6:	781b      	ldrb	r3, [r3, #0]
 801ecf8:	0619      	lsls	r1, r3, #24
 801ecfa:	4b72      	ldr	r3, [pc, #456]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ecfc:	785b      	ldrb	r3, [r3, #1]
 801ecfe:	041b      	lsls	r3, r3, #16
 801ed00:	4319      	orrs	r1, r3
 801ed02:	4b70      	ldr	r3, [pc, #448]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed04:	789b      	ldrb	r3, [r3, #2]
 801ed06:	021b      	lsls	r3, r3, #8
 801ed08:	430b      	orrs	r3, r1
 801ed0a:	496e      	ldr	r1, [pc, #440]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed0c:	78c9      	ldrb	r1, [r1, #3]
 801ed0e:	430b      	orrs	r3, r1
 801ed10:	021b      	lsls	r3, r3, #8
 801ed12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ed16:	431a      	orrs	r2, r3
 801ed18:	4b6a      	ldr	r3, [pc, #424]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed1a:	781b      	ldrb	r3, [r3, #0]
 801ed1c:	0619      	lsls	r1, r3, #24
 801ed1e:	4b69      	ldr	r3, [pc, #420]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed20:	785b      	ldrb	r3, [r3, #1]
 801ed22:	041b      	lsls	r3, r3, #16
 801ed24:	4319      	orrs	r1, r3
 801ed26:	4b67      	ldr	r3, [pc, #412]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed28:	789b      	ldrb	r3, [r3, #2]
 801ed2a:	021b      	lsls	r3, r3, #8
 801ed2c:	430b      	orrs	r3, r1
 801ed2e:	4965      	ldr	r1, [pc, #404]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed30:	78c9      	ldrb	r1, [r1, #3]
 801ed32:	430b      	orrs	r3, r1
 801ed34:	0a1b      	lsrs	r3, r3, #8
 801ed36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed3a:	431a      	orrs	r2, r3
 801ed3c:	4b61      	ldr	r3, [pc, #388]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed3e:	781b      	ldrb	r3, [r3, #0]
 801ed40:	0619      	lsls	r1, r3, #24
 801ed42:	4b60      	ldr	r3, [pc, #384]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed44:	785b      	ldrb	r3, [r3, #1]
 801ed46:	041b      	lsls	r3, r3, #16
 801ed48:	4319      	orrs	r1, r3
 801ed4a:	4b5e      	ldr	r3, [pc, #376]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed4c:	789b      	ldrb	r3, [r3, #2]
 801ed4e:	021b      	lsls	r3, r3, #8
 801ed50:	430b      	orrs	r3, r1
 801ed52:	495c      	ldr	r1, [pc, #368]	; (801eec4 <MX_LWIP_Init+0x32c>)
 801ed54:	78c9      	ldrb	r1, [r1, #3]
 801ed56:	430b      	orrs	r3, r1
 801ed58:	0e1b      	lsrs	r3, r3, #24
 801ed5a:	4313      	orrs	r3, r2
 801ed5c:	4a5c      	ldr	r2, [pc, #368]	; (801eed0 <MX_LWIP_Init+0x338>)
 801ed5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801ed60:	4b59      	ldr	r3, [pc, #356]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed62:	781b      	ldrb	r3, [r3, #0]
 801ed64:	061a      	lsls	r2, r3, #24
 801ed66:	4b58      	ldr	r3, [pc, #352]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed68:	785b      	ldrb	r3, [r3, #1]
 801ed6a:	041b      	lsls	r3, r3, #16
 801ed6c:	431a      	orrs	r2, r3
 801ed6e:	4b56      	ldr	r3, [pc, #344]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed70:	789b      	ldrb	r3, [r3, #2]
 801ed72:	021b      	lsls	r3, r3, #8
 801ed74:	4313      	orrs	r3, r2
 801ed76:	4a54      	ldr	r2, [pc, #336]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed78:	78d2      	ldrb	r2, [r2, #3]
 801ed7a:	4313      	orrs	r3, r2
 801ed7c:	061a      	lsls	r2, r3, #24
 801ed7e:	4b52      	ldr	r3, [pc, #328]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed80:	781b      	ldrb	r3, [r3, #0]
 801ed82:	0619      	lsls	r1, r3, #24
 801ed84:	4b50      	ldr	r3, [pc, #320]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed86:	785b      	ldrb	r3, [r3, #1]
 801ed88:	041b      	lsls	r3, r3, #16
 801ed8a:	4319      	orrs	r1, r3
 801ed8c:	4b4e      	ldr	r3, [pc, #312]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed8e:	789b      	ldrb	r3, [r3, #2]
 801ed90:	021b      	lsls	r3, r3, #8
 801ed92:	430b      	orrs	r3, r1
 801ed94:	494c      	ldr	r1, [pc, #304]	; (801eec8 <MX_LWIP_Init+0x330>)
 801ed96:	78c9      	ldrb	r1, [r1, #3]
 801ed98:	430b      	orrs	r3, r1
 801ed9a:	021b      	lsls	r3, r3, #8
 801ed9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801eda0:	431a      	orrs	r2, r3
 801eda2:	4b49      	ldr	r3, [pc, #292]	; (801eec8 <MX_LWIP_Init+0x330>)
 801eda4:	781b      	ldrb	r3, [r3, #0]
 801eda6:	0619      	lsls	r1, r3, #24
 801eda8:	4b47      	ldr	r3, [pc, #284]	; (801eec8 <MX_LWIP_Init+0x330>)
 801edaa:	785b      	ldrb	r3, [r3, #1]
 801edac:	041b      	lsls	r3, r3, #16
 801edae:	4319      	orrs	r1, r3
 801edb0:	4b45      	ldr	r3, [pc, #276]	; (801eec8 <MX_LWIP_Init+0x330>)
 801edb2:	789b      	ldrb	r3, [r3, #2]
 801edb4:	021b      	lsls	r3, r3, #8
 801edb6:	430b      	orrs	r3, r1
 801edb8:	4943      	ldr	r1, [pc, #268]	; (801eec8 <MX_LWIP_Init+0x330>)
 801edba:	78c9      	ldrb	r1, [r1, #3]
 801edbc:	430b      	orrs	r3, r1
 801edbe:	0a1b      	lsrs	r3, r3, #8
 801edc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801edc4:	431a      	orrs	r2, r3
 801edc6:	4b40      	ldr	r3, [pc, #256]	; (801eec8 <MX_LWIP_Init+0x330>)
 801edc8:	781b      	ldrb	r3, [r3, #0]
 801edca:	0619      	lsls	r1, r3, #24
 801edcc:	4b3e      	ldr	r3, [pc, #248]	; (801eec8 <MX_LWIP_Init+0x330>)
 801edce:	785b      	ldrb	r3, [r3, #1]
 801edd0:	041b      	lsls	r3, r3, #16
 801edd2:	4319      	orrs	r1, r3
 801edd4:	4b3c      	ldr	r3, [pc, #240]	; (801eec8 <MX_LWIP_Init+0x330>)
 801edd6:	789b      	ldrb	r3, [r3, #2]
 801edd8:	021b      	lsls	r3, r3, #8
 801edda:	430b      	orrs	r3, r1
 801eddc:	493a      	ldr	r1, [pc, #232]	; (801eec8 <MX_LWIP_Init+0x330>)
 801edde:	78c9      	ldrb	r1, [r1, #3]
 801ede0:	430b      	orrs	r3, r1
 801ede2:	0e1b      	lsrs	r3, r3, #24
 801ede4:	4313      	orrs	r3, r2
 801ede6:	4a3b      	ldr	r2, [pc, #236]	; (801eed4 <MX_LWIP_Init+0x33c>)
 801ede8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801edea:	4b38      	ldr	r3, [pc, #224]	; (801eecc <MX_LWIP_Init+0x334>)
 801edec:	781b      	ldrb	r3, [r3, #0]
 801edee:	061a      	lsls	r2, r3, #24
 801edf0:	4b36      	ldr	r3, [pc, #216]	; (801eecc <MX_LWIP_Init+0x334>)
 801edf2:	785b      	ldrb	r3, [r3, #1]
 801edf4:	041b      	lsls	r3, r3, #16
 801edf6:	431a      	orrs	r2, r3
 801edf8:	4b34      	ldr	r3, [pc, #208]	; (801eecc <MX_LWIP_Init+0x334>)
 801edfa:	789b      	ldrb	r3, [r3, #2]
 801edfc:	021b      	lsls	r3, r3, #8
 801edfe:	4313      	orrs	r3, r2
 801ee00:	4a32      	ldr	r2, [pc, #200]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee02:	78d2      	ldrb	r2, [r2, #3]
 801ee04:	4313      	orrs	r3, r2
 801ee06:	061a      	lsls	r2, r3, #24
 801ee08:	4b30      	ldr	r3, [pc, #192]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee0a:	781b      	ldrb	r3, [r3, #0]
 801ee0c:	0619      	lsls	r1, r3, #24
 801ee0e:	4b2f      	ldr	r3, [pc, #188]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee10:	785b      	ldrb	r3, [r3, #1]
 801ee12:	041b      	lsls	r3, r3, #16
 801ee14:	4319      	orrs	r1, r3
 801ee16:	4b2d      	ldr	r3, [pc, #180]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee18:	789b      	ldrb	r3, [r3, #2]
 801ee1a:	021b      	lsls	r3, r3, #8
 801ee1c:	430b      	orrs	r3, r1
 801ee1e:	492b      	ldr	r1, [pc, #172]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee20:	78c9      	ldrb	r1, [r1, #3]
 801ee22:	430b      	orrs	r3, r1
 801ee24:	021b      	lsls	r3, r3, #8
 801ee26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ee2a:	431a      	orrs	r2, r3
 801ee2c:	4b27      	ldr	r3, [pc, #156]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee2e:	781b      	ldrb	r3, [r3, #0]
 801ee30:	0619      	lsls	r1, r3, #24
 801ee32:	4b26      	ldr	r3, [pc, #152]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee34:	785b      	ldrb	r3, [r3, #1]
 801ee36:	041b      	lsls	r3, r3, #16
 801ee38:	4319      	orrs	r1, r3
 801ee3a:	4b24      	ldr	r3, [pc, #144]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee3c:	789b      	ldrb	r3, [r3, #2]
 801ee3e:	021b      	lsls	r3, r3, #8
 801ee40:	430b      	orrs	r3, r1
 801ee42:	4922      	ldr	r1, [pc, #136]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee44:	78c9      	ldrb	r1, [r1, #3]
 801ee46:	430b      	orrs	r3, r1
 801ee48:	0a1b      	lsrs	r3, r3, #8
 801ee4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee4e:	431a      	orrs	r2, r3
 801ee50:	4b1e      	ldr	r3, [pc, #120]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee52:	781b      	ldrb	r3, [r3, #0]
 801ee54:	0619      	lsls	r1, r3, #24
 801ee56:	4b1d      	ldr	r3, [pc, #116]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee58:	785b      	ldrb	r3, [r3, #1]
 801ee5a:	041b      	lsls	r3, r3, #16
 801ee5c:	4319      	orrs	r1, r3
 801ee5e:	4b1b      	ldr	r3, [pc, #108]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee60:	789b      	ldrb	r3, [r3, #2]
 801ee62:	021b      	lsls	r3, r3, #8
 801ee64:	430b      	orrs	r3, r1
 801ee66:	4919      	ldr	r1, [pc, #100]	; (801eecc <MX_LWIP_Init+0x334>)
 801ee68:	78c9      	ldrb	r1, [r1, #3]
 801ee6a:	430b      	orrs	r3, r1
 801ee6c:	0e1b      	lsrs	r3, r3, #24
 801ee6e:	4313      	orrs	r3, r2
 801ee70:	4a19      	ldr	r2, [pc, #100]	; (801eed8 <MX_LWIP_Init+0x340>)
 801ee72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801ee74:	4b19      	ldr	r3, [pc, #100]	; (801eedc <MX_LWIP_Init+0x344>)
 801ee76:	9302      	str	r3, [sp, #8]
 801ee78:	4b19      	ldr	r3, [pc, #100]	; (801eee0 <MX_LWIP_Init+0x348>)
 801ee7a:	9301      	str	r3, [sp, #4]
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	9300      	str	r3, [sp, #0]
 801ee80:	4b15      	ldr	r3, [pc, #84]	; (801eed8 <MX_LWIP_Init+0x340>)
 801ee82:	4a14      	ldr	r2, [pc, #80]	; (801eed4 <MX_LWIP_Init+0x33c>)
 801ee84:	4912      	ldr	r1, [pc, #72]	; (801eed0 <MX_LWIP_Init+0x338>)
 801ee86:	4817      	ldr	r0, [pc, #92]	; (801eee4 <MX_LWIP_Init+0x34c>)
 801ee88:	f001 f998 	bl	80201bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801ee8c:	4815      	ldr	r0, [pc, #84]	; (801eee4 <MX_LWIP_Init+0x34c>)
 801ee8e:	f001 fb49 	bl	8020524 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801ee92:	4b14      	ldr	r3, [pc, #80]	; (801eee4 <MX_LWIP_Init+0x34c>)
 801ee94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ee98:	089b      	lsrs	r3, r3, #2
 801ee9a:	f003 0301 	and.w	r3, r3, #1
 801ee9e:	b2db      	uxtb	r3, r3
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d003      	beq.n	801eeac <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801eea4:	480f      	ldr	r0, [pc, #60]	; (801eee4 <MX_LWIP_Init+0x34c>)
 801eea6:	f001 fb4d 	bl	8020544 <netif_set_up>
 801eeaa:	e002      	b.n	801eeb2 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801eeac:	480d      	ldr	r0, [pc, #52]	; (801eee4 <MX_LWIP_Init+0x34c>)
 801eeae:	f001 fbb5 	bl	802061c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801eeb2:	490d      	ldr	r1, [pc, #52]	; (801eee8 <MX_LWIP_Init+0x350>)
 801eeb4:	480b      	ldr	r0, [pc, #44]	; (801eee4 <MX_LWIP_Init+0x34c>)
 801eeb6:	f001 fc47 	bl	8020748 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801eeba:	46bd      	mov	sp, r7
 801eebc:	bd80      	pop	{r7, pc}
 801eebe:	bf00      	nop
 801eec0:	20000304 	.word	0x20000304
 801eec4:	2001149c 	.word	0x2001149c
 801eec8:	200114a0 	.word	0x200114a0
 801eecc:	200114a4 	.word	0x200114a4
 801eed0:	20011490 	.word	0x20011490
 801eed4:	20011494 	.word	0x20011494
 801eed8:	20011498 	.word	0x20011498
 801eedc:	08024505 	.word	0x08024505
 801eee0:	0801f279 	.word	0x0801f279
 801eee4:	20011450 	.word	0x20011450
 801eee8:	0801ef3d 	.word	0x0801ef3d

0801eeec <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801eeec:	b580      	push	{r7, lr}
 801eeee:	b082      	sub	sp, #8
 801eef0:	af00      	add	r7, sp, #0
 801eef2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801eef4:	f7f8 fd26 	bl	8017944 <HAL_GetTick>
 801eef8:	4602      	mov	r2, r0
 801eefa:	4b08      	ldr	r3, [pc, #32]	; (801ef1c <Ethernet_Link_Periodic_Handle+0x30>)
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	1ad3      	subs	r3, r2, r3
 801ef00:	2b63      	cmp	r3, #99	; 0x63
 801ef02:	d907      	bls.n	801ef14 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801ef04:	f7f8 fd1e 	bl	8017944 <HAL_GetTick>
 801ef08:	4603      	mov	r3, r0
 801ef0a:	4a04      	ldr	r2, [pc, #16]	; (801ef1c <Ethernet_Link_Periodic_Handle+0x30>)
 801ef0c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801ef0e:	6878      	ldr	r0, [r7, #4]
 801ef10:	f000 fb10 	bl	801f534 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801ef14:	bf00      	nop
 801ef16:	3708      	adds	r7, #8
 801ef18:	46bd      	mov	sp, r7
 801ef1a:	bd80      	pop	{r7, pc}
 801ef1c:	2001144c 	.word	0x2001144c

0801ef20 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801ef20:	b580      	push	{r7, lr}
 801ef22:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801ef24:	4804      	ldr	r0, [pc, #16]	; (801ef38 <MX_LWIP_Process+0x18>)
 801ef26:	f000 f987 	bl	801f238 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801ef2a:	f002 fb83 	bl	8021634 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801ef2e:	4802      	ldr	r0, [pc, #8]	; (801ef38 <MX_LWIP_Process+0x18>)
 801ef30:	f7ff ffdc 	bl	801eeec <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801ef34:	bf00      	nop
 801ef36:	bd80      	pop	{r7, pc}
 801ef38:	20011450 	.word	0x20011450

0801ef3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801ef3c:	b480      	push	{r7}
 801ef3e:	b083      	sub	sp, #12
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801ef44:	bf00      	nop
 801ef46:	370c      	adds	r7, #12
 801ef48:	46bd      	mov	sp, r7
 801ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef4e:	4770      	bx	lr

0801ef50 <SCB_InvalidateDCache_by_Addr>:
{
 801ef50:	b480      	push	{r7}
 801ef52:	b087      	sub	sp, #28
 801ef54:	af00      	add	r7, sp, #0
 801ef56:	6078      	str	r0, [r7, #4]
 801ef58:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801ef5a:	683b      	ldr	r3, [r7, #0]
 801ef5c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801ef62:	2320      	movs	r3, #32
 801ef64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801ef66:	f3bf 8f4f 	dsb	sy
}
 801ef6a:	bf00      	nop
    while (op_size > 0) {
 801ef6c:	e00b      	b.n	801ef86 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801ef6e:	4a0d      	ldr	r2, [pc, #52]	; (801efa4 <SCB_InvalidateDCache_by_Addr+0x54>)
 801ef70:	693b      	ldr	r3, [r7, #16]
 801ef72:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801ef76:	68fb      	ldr	r3, [r7, #12]
 801ef78:	693a      	ldr	r2, [r7, #16]
 801ef7a:	4413      	add	r3, r2
 801ef7c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801ef7e:	697a      	ldr	r2, [r7, #20]
 801ef80:	68fb      	ldr	r3, [r7, #12]
 801ef82:	1ad3      	subs	r3, r2, r3
 801ef84:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801ef86:	697b      	ldr	r3, [r7, #20]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	dcf0      	bgt.n	801ef6e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801ef8c:	f3bf 8f4f 	dsb	sy
}
 801ef90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801ef92:	f3bf 8f6f 	isb	sy
}
 801ef96:	bf00      	nop
}
 801ef98:	bf00      	nop
 801ef9a:	371c      	adds	r7, #28
 801ef9c:	46bd      	mov	sp, r7
 801ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efa2:	4770      	bx	lr
 801efa4:	e000ed00 	.word	0xe000ed00

0801efa8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801efa8:	b580      	push	{r7, lr}
 801efaa:	b084      	sub	sp, #16
 801efac:	af00      	add	r7, sp, #0
 801efae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801efb0:	2300      	movs	r3, #0
 801efb2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801efb4:	4b47      	ldr	r3, [pc, #284]	; (801f0d4 <low_level_init+0x12c>)
 801efb6:	4a48      	ldr	r2, [pc, #288]	; (801f0d8 <low_level_init+0x130>)
 801efb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801efba:	2300      	movs	r3, #0
 801efbc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801efbe:	2380      	movs	r3, #128	; 0x80
 801efc0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801efc2:	23e1      	movs	r3, #225	; 0xe1
 801efc4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801efc6:	2300      	movs	r3, #0
 801efc8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801efca:	2300      	movs	r3, #0
 801efcc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801efce:	2300      	movs	r3, #0
 801efd0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801efd2:	4a40      	ldr	r2, [pc, #256]	; (801f0d4 <low_level_init+0x12c>)
 801efd4:	f107 0308 	add.w	r3, r7, #8
 801efd8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801efda:	4b3e      	ldr	r3, [pc, #248]	; (801f0d4 <low_level_init+0x12c>)
 801efdc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801efe0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801efe2:	4b3c      	ldr	r3, [pc, #240]	; (801f0d4 <low_level_init+0x12c>)
 801efe4:	4a3d      	ldr	r2, [pc, #244]	; (801f0dc <low_level_init+0x134>)
 801efe6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801efe8:	4b3a      	ldr	r3, [pc, #232]	; (801f0d4 <low_level_init+0x12c>)
 801efea:	4a3d      	ldr	r2, [pc, #244]	; (801f0e0 <low_level_init+0x138>)
 801efec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801efee:	4b39      	ldr	r3, [pc, #228]	; (801f0d4 <low_level_init+0x12c>)
 801eff0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801eff4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801eff6:	4b3b      	ldr	r3, [pc, #236]	; (801f0e4 <low_level_init+0x13c>)
 801eff8:	781b      	ldrb	r3, [r3, #0]
 801effa:	2b01      	cmp	r3, #1
 801effc:	d002      	beq.n	801f004 <low_level_init+0x5c>
 801effe:	2b02      	cmp	r3, #2
 801f000:	d004      	beq.n	801f00c <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801f002:	e063      	b.n	801f0cc <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801f004:	4b33      	ldr	r3, [pc, #204]	; (801f0d4 <low_level_init+0x12c>)
 801f006:	4a38      	ldr	r2, [pc, #224]	; (801f0e8 <low_level_init+0x140>)
 801f008:	605a      	str	r2, [r3, #4]
		break;
 801f00a:	e003      	b.n	801f014 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801f00c:	4b31      	ldr	r3, [pc, #196]	; (801f0d4 <low_level_init+0x12c>)
 801f00e:	4a37      	ldr	r2, [pc, #220]	; (801f0ec <low_level_init+0x144>)
 801f010:	605a      	str	r2, [r3, #4]
		break;
 801f012:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801f014:	482f      	ldr	r0, [pc, #188]	; (801f0d4 <low_level_init+0x12c>)
 801f016:	f7f9 fdbb 	bl	8018b90 <HAL_ETH_Init>
 801f01a:	4603      	mov	r3, r0
 801f01c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801f01e:	2238      	movs	r2, #56	; 0x38
 801f020:	2100      	movs	r1, #0
 801f022:	4833      	ldr	r0, [pc, #204]	; (801f0f0 <low_level_init+0x148>)
 801f024:	f005 fbb0 	bl	8024788 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801f028:	4b31      	ldr	r3, [pc, #196]	; (801f0f0 <low_level_init+0x148>)
 801f02a:	2221      	movs	r2, #33	; 0x21
 801f02c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801f02e:	4b30      	ldr	r3, [pc, #192]	; (801f0f0 <low_level_init+0x148>)
 801f030:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801f034:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801f036:	4b2e      	ldr	r3, [pc, #184]	; (801f0f0 <low_level_init+0x148>)
 801f038:	2200      	movs	r2, #0
 801f03a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801f03c:	482d      	ldr	r0, [pc, #180]	; (801f0f4 <low_level_init+0x14c>)
 801f03e:	f000 ff3d 	bl	801febc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	2206      	movs	r2, #6
 801f046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801f04a:	4b22      	ldr	r3, [pc, #136]	; (801f0d4 <low_level_init+0x12c>)
 801f04c:	685b      	ldr	r3, [r3, #4]
 801f04e:	781a      	ldrb	r2, [r3, #0]
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801f056:	4b1f      	ldr	r3, [pc, #124]	; (801f0d4 <low_level_init+0x12c>)
 801f058:	685b      	ldr	r3, [r3, #4]
 801f05a:	785a      	ldrb	r2, [r3, #1]
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801f062:	4b1c      	ldr	r3, [pc, #112]	; (801f0d4 <low_level_init+0x12c>)
 801f064:	685b      	ldr	r3, [r3, #4]
 801f066:	789a      	ldrb	r2, [r3, #2]
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801f06e:	4b19      	ldr	r3, [pc, #100]	; (801f0d4 <low_level_init+0x12c>)
 801f070:	685b      	ldr	r3, [r3, #4]
 801f072:	78da      	ldrb	r2, [r3, #3]
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801f07a:	4b16      	ldr	r3, [pc, #88]	; (801f0d4 <low_level_init+0x12c>)
 801f07c:	685b      	ldr	r3, [r3, #4]
 801f07e:	791a      	ldrb	r2, [r3, #4]
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801f086:	4b13      	ldr	r3, [pc, #76]	; (801f0d4 <low_level_init+0x12c>)
 801f088:	685b      	ldr	r3, [r3, #4]
 801f08a:	795a      	ldrb	r2, [r3, #5]
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801f098:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f0a0:	f043 030a 	orr.w	r3, r3, #10
 801f0a4:	b2da      	uxtb	r2, r3
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801f0ac:	4912      	ldr	r1, [pc, #72]	; (801f0f8 <low_level_init+0x150>)
 801f0ae:	4813      	ldr	r0, [pc, #76]	; (801f0fc <low_level_init+0x154>)
 801f0b0:	f7f8 fa87 	bl	80175c2 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801f0b4:	4811      	ldr	r0, [pc, #68]	; (801f0fc <low_level_init+0x154>)
 801f0b6:	f7f8 fab6 	bl	8017626 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801f0ba:	7bfb      	ldrb	r3, [r7, #15]
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d103      	bne.n	801f0c8 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801f0c0:	6878      	ldr	r0, [r7, #4]
 801f0c2:	f000 fa37 	bl	801f534 <ethernet_link_check_state>
 801f0c6:	e001      	b.n	801f0cc <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801f0c8:	f7f6 fe9e 	bl	8015e08 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801f0cc:	3710      	adds	r7, #16
 801f0ce:	46bd      	mov	sp, r7
 801f0d0:	bd80      	pop	{r7, pc}
 801f0d2:	bf00      	nop
 801f0d4:	20015da4 	.word	0x20015da4
 801f0d8:	40028000 	.word	0x40028000
 801f0dc:	20000244 	.word	0x20000244
 801f0e0:	200001a4 	.word	0x200001a4
 801f0e4:	20000304 	.word	0x20000304
 801f0e8:	20000343 	.word	0x20000343
 801f0ec:	200005b1 	.word	0x200005b1
 801f0f0:	20015e54 	.word	0x20015e54
 801f0f4:	0802b718 	.word	0x0802b718
 801f0f8:	20000128 	.word	0x20000128
 801f0fc:	20015e8c 	.word	0x20015e8c

0801f100 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801f100:	b580      	push	{r7, lr}
 801f102:	b092      	sub	sp, #72	; 0x48
 801f104:	af00      	add	r7, sp, #0
 801f106:	6078      	str	r0, [r7, #4]
 801f108:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801f10a:	2300      	movs	r3, #0
 801f10c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801f10e:	2300      	movs	r3, #0
 801f110:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801f112:	2300      	movs	r3, #0
 801f114:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801f118:	f107 030c 	add.w	r3, r7, #12
 801f11c:	2230      	movs	r2, #48	; 0x30
 801f11e:	2100      	movs	r1, #0
 801f120:	4618      	mov	r0, r3
 801f122:	f005 fb31 	bl	8024788 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801f126:	f107 030c 	add.w	r3, r7, #12
 801f12a:	2230      	movs	r2, #48	; 0x30
 801f12c:	2100      	movs	r1, #0
 801f12e:	4618      	mov	r0, r3
 801f130:	f005 fb2a 	bl	8024788 <memset>

  for(q = p; q != NULL; q = q->next)
 801f134:	683b      	ldr	r3, [r7, #0]
 801f136:	643b      	str	r3, [r7, #64]	; 0x40
 801f138:	e045      	b.n	801f1c6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801f13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f13c:	2b03      	cmp	r3, #3
 801f13e:	d902      	bls.n	801f146 <low_level_output+0x46>
      return ERR_IF;
 801f140:	f06f 030b 	mvn.w	r3, #11
 801f144:	e055      	b.n	801f1f2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801f146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f148:	6859      	ldr	r1, [r3, #4]
 801f14a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f14c:	4613      	mov	r3, r2
 801f14e:	005b      	lsls	r3, r3, #1
 801f150:	4413      	add	r3, r2
 801f152:	009b      	lsls	r3, r3, #2
 801f154:	3348      	adds	r3, #72	; 0x48
 801f156:	443b      	add	r3, r7
 801f158:	3b3c      	subs	r3, #60	; 0x3c
 801f15a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801f15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f15e:	895b      	ldrh	r3, [r3, #10]
 801f160:	4619      	mov	r1, r3
 801f162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f164:	4613      	mov	r3, r2
 801f166:	005b      	lsls	r3, r3, #1
 801f168:	4413      	add	r3, r2
 801f16a:	009b      	lsls	r3, r3, #2
 801f16c:	3348      	adds	r3, #72	; 0x48
 801f16e:	443b      	add	r3, r7
 801f170:	3b38      	subs	r3, #56	; 0x38
 801f172:	6019      	str	r1, [r3, #0]

    if(i>0)
 801f174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f176:	2b00      	cmp	r3, #0
 801f178:	d011      	beq.n	801f19e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801f17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f17c:	1e5a      	subs	r2, r3, #1
 801f17e:	f107 000c 	add.w	r0, r7, #12
 801f182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801f184:	460b      	mov	r3, r1
 801f186:	005b      	lsls	r3, r3, #1
 801f188:	440b      	add	r3, r1
 801f18a:	009b      	lsls	r3, r3, #2
 801f18c:	18c1      	adds	r1, r0, r3
 801f18e:	4613      	mov	r3, r2
 801f190:	005b      	lsls	r3, r3, #1
 801f192:	4413      	add	r3, r2
 801f194:	009b      	lsls	r3, r3, #2
 801f196:	3348      	adds	r3, #72	; 0x48
 801f198:	443b      	add	r3, r7
 801f19a:	3b34      	subs	r3, #52	; 0x34
 801f19c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801f19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1a0:	681b      	ldr	r3, [r3, #0]
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d109      	bne.n	801f1ba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801f1a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f1a8:	4613      	mov	r3, r2
 801f1aa:	005b      	lsls	r3, r3, #1
 801f1ac:	4413      	add	r3, r2
 801f1ae:	009b      	lsls	r3, r3, #2
 801f1b0:	3348      	adds	r3, #72	; 0x48
 801f1b2:	443b      	add	r3, r7
 801f1b4:	3b34      	subs	r3, #52	; 0x34
 801f1b6:	2200      	movs	r2, #0
 801f1b8:	601a      	str	r2, [r3, #0]
    }

    i++;
 801f1ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f1bc:	3301      	adds	r3, #1
 801f1be:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801f1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	643b      	str	r3, [r7, #64]	; 0x40
 801f1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d1b6      	bne.n	801f13a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801f1cc:	683b      	ldr	r3, [r7, #0]
 801f1ce:	891b      	ldrh	r3, [r3, #8]
 801f1d0:	461a      	mov	r2, r3
 801f1d2:	4b0a      	ldr	r3, [pc, #40]	; (801f1fc <low_level_output+0xfc>)
 801f1d4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801f1d6:	4a09      	ldr	r2, [pc, #36]	; (801f1fc <low_level_output+0xfc>)
 801f1d8:	f107 030c 	add.w	r3, r7, #12
 801f1dc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801f1de:	4a07      	ldr	r2, [pc, #28]	; (801f1fc <low_level_output+0xfc>)
 801f1e0:	683b      	ldr	r3, [r7, #0]
 801f1e2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801f1e4:	2214      	movs	r2, #20
 801f1e6:	4905      	ldr	r1, [pc, #20]	; (801f1fc <low_level_output+0xfc>)
 801f1e8:	4805      	ldr	r0, [pc, #20]	; (801f200 <low_level_output+0x100>)
 801f1ea:	f7f9 fe05 	bl	8018df8 <HAL_ETH_Transmit>

  return errval;
 801f1ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801f1f2:	4618      	mov	r0, r3
 801f1f4:	3748      	adds	r7, #72	; 0x48
 801f1f6:	46bd      	mov	sp, r7
 801f1f8:	bd80      	pop	{r7, pc}
 801f1fa:	bf00      	nop
 801f1fc:	20015e54 	.word	0x20015e54
 801f200:	20015da4 	.word	0x20015da4

0801f204 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801f204:	b580      	push	{r7, lr}
 801f206:	b084      	sub	sp, #16
 801f208:	af00      	add	r7, sp, #0
 801f20a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801f20c:	2300      	movs	r3, #0
 801f20e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801f210:	4b07      	ldr	r3, [pc, #28]	; (801f230 <low_level_input+0x2c>)
 801f212:	781b      	ldrb	r3, [r3, #0]
 801f214:	2b00      	cmp	r3, #0
 801f216:	d105      	bne.n	801f224 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801f218:	f107 030c 	add.w	r3, r7, #12
 801f21c:	4619      	mov	r1, r3
 801f21e:	4805      	ldr	r0, [pc, #20]	; (801f234 <low_level_input+0x30>)
 801f220:	f7f9 fe7e 	bl	8018f20 <HAL_ETH_ReadData>
  }

  return p;
 801f224:	68fb      	ldr	r3, [r7, #12]
}
 801f226:	4618      	mov	r0, r3
 801f228:	3710      	adds	r7, #16
 801f22a:	46bd      	mov	sp, r7
 801f22c:	bd80      	pop	{r7, pc}
 801f22e:	bf00      	nop
 801f230:	20015da0 	.word	0x20015da0
 801f234:	20015da4 	.word	0x20015da4

0801f238 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801f238:	b580      	push	{r7, lr}
 801f23a:	b084      	sub	sp, #16
 801f23c:	af00      	add	r7, sp, #0
 801f23e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801f240:	2300      	movs	r3, #0
 801f242:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801f244:	6878      	ldr	r0, [r7, #4]
 801f246:	f7ff ffdd 	bl	801f204 <low_level_input>
 801f24a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	2b00      	cmp	r3, #0
 801f250:	d00a      	beq.n	801f268 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	691b      	ldr	r3, [r3, #16]
 801f256:	6879      	ldr	r1, [r7, #4]
 801f258:	68f8      	ldr	r0, [r7, #12]
 801f25a:	4798      	blx	r3
 801f25c:	4603      	mov	r3, r0
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d002      	beq.n	801f268 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801f262:	68f8      	ldr	r0, [r7, #12]
 801f264:	f001 fe40 	bl	8020ee8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 801f268:	68fb      	ldr	r3, [r7, #12]
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d1ea      	bne.n	801f244 <ethernetif_input+0xc>
}
 801f26e:	bf00      	nop
 801f270:	bf00      	nop
 801f272:	3710      	adds	r7, #16
 801f274:	46bd      	mov	sp, r7
 801f276:	bd80      	pop	{r7, pc}

0801f278 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801f278:	b580      	push	{r7, lr}
 801f27a:	b082      	sub	sp, #8
 801f27c:	af00      	add	r7, sp, #0
 801f27e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	2b00      	cmp	r3, #0
 801f284:	d106      	bne.n	801f294 <ethernetif_init+0x1c>
 801f286:	4b0e      	ldr	r3, [pc, #56]	; (801f2c0 <ethernetif_init+0x48>)
 801f288:	f240 1287 	movw	r2, #391	; 0x187
 801f28c:	490d      	ldr	r1, [pc, #52]	; (801f2c4 <ethernetif_init+0x4c>)
 801f28e:	480e      	ldr	r0, [pc, #56]	; (801f2c8 <ethernetif_init+0x50>)
 801f290:	f005 fb62 	bl	8024958 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	2273      	movs	r2, #115	; 0x73
 801f298:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	2274      	movs	r2, #116	; 0x74
 801f2a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	4a09      	ldr	r2, [pc, #36]	; (801f2cc <ethernetif_init+0x54>)
 801f2a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	4a08      	ldr	r2, [pc, #32]	; (801f2d0 <ethernetif_init+0x58>)
 801f2ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801f2b0:	6878      	ldr	r0, [r7, #4]
 801f2b2:	f7ff fe79 	bl	801efa8 <low_level_init>

  return ERR_OK;
 801f2b6:	2300      	movs	r3, #0
}
 801f2b8:	4618      	mov	r0, r3
 801f2ba:	3708      	adds	r7, #8
 801f2bc:	46bd      	mov	sp, r7
 801f2be:	bd80      	pop	{r7, pc}
 801f2c0:	08029c70 	.word	0x08029c70
 801f2c4:	08029c8c 	.word	0x08029c8c
 801f2c8:	08029c9c 	.word	0x08029c9c
 801f2cc:	08022895 	.word	0x08022895
 801f2d0:	0801f101 	.word	0x0801f101

0801f2d4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801f2d4:	b580      	push	{r7, lr}
 801f2d6:	b084      	sub	sp, #16
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801f2e0:	68f9      	ldr	r1, [r7, #12]
 801f2e2:	4807      	ldr	r0, [pc, #28]	; (801f300 <pbuf_free_custom+0x2c>)
 801f2e4:	f000 fecc 	bl	8020080 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801f2e8:	4b06      	ldr	r3, [pc, #24]	; (801f304 <pbuf_free_custom+0x30>)
 801f2ea:	781b      	ldrb	r3, [r3, #0]
 801f2ec:	2b01      	cmp	r3, #1
 801f2ee:	d102      	bne.n	801f2f6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801f2f0:	4b04      	ldr	r3, [pc, #16]	; (801f304 <pbuf_free_custom+0x30>)
 801f2f2:	2200      	movs	r2, #0
 801f2f4:	701a      	strb	r2, [r3, #0]
  }
}
 801f2f6:	bf00      	nop
 801f2f8:	3710      	adds	r7, #16
 801f2fa:	46bd      	mov	sp, r7
 801f2fc:	bd80      	pop	{r7, pc}
 801f2fe:	bf00      	nop
 801f300:	0802b718 	.word	0x0802b718
 801f304:	20015da0 	.word	0x20015da0

0801f308 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801f30c:	f7f8 fb1a 	bl	8017944 <HAL_GetTick>
 801f310:	4603      	mov	r3, r0
}
 801f312:	4618      	mov	r0, r3
 801f314:	bd80      	pop	{r7, pc}
	...

0801f318 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801f318:	b580      	push	{r7, lr}
 801f31a:	b08e      	sub	sp, #56	; 0x38
 801f31c:	af00      	add	r7, sp, #0
 801f31e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f324:	2200      	movs	r2, #0
 801f326:	601a      	str	r2, [r3, #0]
 801f328:	605a      	str	r2, [r3, #4]
 801f32a:	609a      	str	r2, [r3, #8]
 801f32c:	60da      	str	r2, [r3, #12]
 801f32e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	4a52      	ldr	r2, [pc, #328]	; (801f480 <HAL_ETH_MspInit+0x168>)
 801f336:	4293      	cmp	r3, r2
 801f338:	f040 809e 	bne.w	801f478 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801f33c:	4b51      	ldr	r3, [pc, #324]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f340:	4a50      	ldr	r2, [pc, #320]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801f346:	6313      	str	r3, [r2, #48]	; 0x30
 801f348:	4b4e      	ldr	r3, [pc, #312]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f34c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f350:	623b      	str	r3, [r7, #32]
 801f352:	6a3b      	ldr	r3, [r7, #32]
 801f354:	4b4b      	ldr	r3, [pc, #300]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f358:	4a4a      	ldr	r2, [pc, #296]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f35a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801f35e:	6313      	str	r3, [r2, #48]	; 0x30
 801f360:	4b48      	ldr	r3, [pc, #288]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801f368:	61fb      	str	r3, [r7, #28]
 801f36a:	69fb      	ldr	r3, [r7, #28]
 801f36c:	4b45      	ldr	r3, [pc, #276]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f370:	4a44      	ldr	r2, [pc, #272]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801f376:	6313      	str	r3, [r2, #48]	; 0x30
 801f378:	4b42      	ldr	r3, [pc, #264]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f37c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801f380:	61bb      	str	r3, [r7, #24]
 801f382:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801f384:	4b3f      	ldr	r3, [pc, #252]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f388:	4a3e      	ldr	r2, [pc, #248]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f38a:	f043 0304 	orr.w	r3, r3, #4
 801f38e:	6313      	str	r3, [r2, #48]	; 0x30
 801f390:	4b3c      	ldr	r3, [pc, #240]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f394:	f003 0304 	and.w	r3, r3, #4
 801f398:	617b      	str	r3, [r7, #20]
 801f39a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f39c:	4b39      	ldr	r3, [pc, #228]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3a0:	4a38      	ldr	r2, [pc, #224]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3a2:	f043 0301 	orr.w	r3, r3, #1
 801f3a6:	6313      	str	r3, [r2, #48]	; 0x30
 801f3a8:	4b36      	ldr	r3, [pc, #216]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3ac:	f003 0301 	and.w	r3, r3, #1
 801f3b0:	613b      	str	r3, [r7, #16]
 801f3b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801f3b4:	4b33      	ldr	r3, [pc, #204]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3b8:	4a32      	ldr	r2, [pc, #200]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3ba:	f043 0302 	orr.w	r3, r3, #2
 801f3be:	6313      	str	r3, [r2, #48]	; 0x30
 801f3c0:	4b30      	ldr	r3, [pc, #192]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3c4:	f003 0302 	and.w	r3, r3, #2
 801f3c8:	60fb      	str	r3, [r7, #12]
 801f3ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801f3cc:	4b2d      	ldr	r3, [pc, #180]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3d0:	4a2c      	ldr	r2, [pc, #176]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f3d6:	6313      	str	r3, [r2, #48]	; 0x30
 801f3d8:	4b2a      	ldr	r3, [pc, #168]	; (801f484 <HAL_ETH_MspInit+0x16c>)
 801f3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f3e0:	60bb      	str	r3, [r7, #8]
 801f3e2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801f3e4:	2332      	movs	r3, #50	; 0x32
 801f3e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f3e8:	2302      	movs	r3, #2
 801f3ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f3ec:	2300      	movs	r3, #0
 801f3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f3f0:	2303      	movs	r3, #3
 801f3f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801f3f4:	230b      	movs	r3, #11
 801f3f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f3f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f3fc:	4619      	mov	r1, r3
 801f3fe:	4822      	ldr	r0, [pc, #136]	; (801f488 <HAL_ETH_MspInit+0x170>)
 801f400:	f7fa fdac 	bl	8019f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801f404:	2386      	movs	r3, #134	; 0x86
 801f406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f408:	2302      	movs	r3, #2
 801f40a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f40c:	2300      	movs	r3, #0
 801f40e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f410:	2303      	movs	r3, #3
 801f412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801f414:	230b      	movs	r3, #11
 801f416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f41c:	4619      	mov	r1, r3
 801f41e:	481b      	ldr	r0, [pc, #108]	; (801f48c <HAL_ETH_MspInit+0x174>)
 801f420:	f7fa fd9c 	bl	8019f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801f424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f42a:	2302      	movs	r3, #2
 801f42c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f42e:	2300      	movs	r3, #0
 801f430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f432:	2303      	movs	r3, #3
 801f434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801f436:	230b      	movs	r3, #11
 801f438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801f43a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f43e:	4619      	mov	r1, r3
 801f440:	4813      	ldr	r0, [pc, #76]	; (801f490 <HAL_ETH_MspInit+0x178>)
 801f442:	f7fa fd8b 	bl	8019f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801f446:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801f44a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f44c:	2302      	movs	r3, #2
 801f44e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f450:	2300      	movs	r3, #0
 801f452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f454:	2303      	movs	r3, #3
 801f456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801f458:	230b      	movs	r3, #11
 801f45a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f45c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f460:	4619      	mov	r1, r3
 801f462:	480c      	ldr	r0, [pc, #48]	; (801f494 <HAL_ETH_MspInit+0x17c>)
 801f464:	f7fa fd7a 	bl	8019f5c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801f468:	2200      	movs	r2, #0
 801f46a:	2101      	movs	r1, #1
 801f46c:	203d      	movs	r0, #61	; 0x3d
 801f46e:	f7f9 fa4a 	bl	8018906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801f472:	203d      	movs	r0, #61	; 0x3d
 801f474:	f7f9 fa63 	bl	801893e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801f478:	bf00      	nop
 801f47a:	3738      	adds	r7, #56	; 0x38
 801f47c:	46bd      	mov	sp, r7
 801f47e:	bd80      	pop	{r7, pc}
 801f480:	40028000 	.word	0x40028000
 801f484:	40023800 	.word	0x40023800
 801f488:	40020800 	.word	0x40020800
 801f48c:	40020000 	.word	0x40020000
 801f490:	40020400 	.word	0x40020400
 801f494:	40021800 	.word	0x40021800

0801f498 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801f498:	b580      	push	{r7, lr}
 801f49a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801f49c:	4802      	ldr	r0, [pc, #8]	; (801f4a8 <ETH_PHY_IO_Init+0x10>)
 801f49e:	f7fa f903 	bl	80196a8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801f4a2:	2300      	movs	r3, #0
}
 801f4a4:	4618      	mov	r0, r3
 801f4a6:	bd80      	pop	{r7, pc}
 801f4a8:	20015da4 	.word	0x20015da4

0801f4ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801f4ac:	b480      	push	{r7}
 801f4ae:	af00      	add	r7, sp, #0
  return 0;
 801f4b0:	2300      	movs	r3, #0
}
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	46bd      	mov	sp, r7
 801f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ba:	4770      	bx	lr

0801f4bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	b084      	sub	sp, #16
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	60f8      	str	r0, [r7, #12]
 801f4c4:	60b9      	str	r1, [r7, #8]
 801f4c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	68ba      	ldr	r2, [r7, #8]
 801f4cc:	68f9      	ldr	r1, [r7, #12]
 801f4ce:	4807      	ldr	r0, [pc, #28]	; (801f4ec <ETH_PHY_IO_ReadReg+0x30>)
 801f4d0:	f7f9 ff52 	bl	8019378 <HAL_ETH_ReadPHYRegister>
 801f4d4:	4603      	mov	r3, r0
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d002      	beq.n	801f4e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801f4da:	f04f 33ff 	mov.w	r3, #4294967295
 801f4de:	e000      	b.n	801f4e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801f4e0:	2300      	movs	r3, #0
}
 801f4e2:	4618      	mov	r0, r3
 801f4e4:	3710      	adds	r7, #16
 801f4e6:	46bd      	mov	sp, r7
 801f4e8:	bd80      	pop	{r7, pc}
 801f4ea:	bf00      	nop
 801f4ec:	20015da4 	.word	0x20015da4

0801f4f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801f4f0:	b580      	push	{r7, lr}
 801f4f2:	b084      	sub	sp, #16
 801f4f4:	af00      	add	r7, sp, #0
 801f4f6:	60f8      	str	r0, [r7, #12]
 801f4f8:	60b9      	str	r1, [r7, #8]
 801f4fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	68ba      	ldr	r2, [r7, #8]
 801f500:	68f9      	ldr	r1, [r7, #12]
 801f502:	4807      	ldr	r0, [pc, #28]	; (801f520 <ETH_PHY_IO_WriteReg+0x30>)
 801f504:	f7f9 ff83 	bl	801940e <HAL_ETH_WritePHYRegister>
 801f508:	4603      	mov	r3, r0
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d002      	beq.n	801f514 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801f50e:	f04f 33ff 	mov.w	r3, #4294967295
 801f512:	e000      	b.n	801f516 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801f514:	2300      	movs	r3, #0
}
 801f516:	4618      	mov	r0, r3
 801f518:	3710      	adds	r7, #16
 801f51a:	46bd      	mov	sp, r7
 801f51c:	bd80      	pop	{r7, pc}
 801f51e:	bf00      	nop
 801f520:	20015da4 	.word	0x20015da4

0801f524 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801f524:	b580      	push	{r7, lr}
 801f526:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801f528:	f7f8 fa0c 	bl	8017944 <HAL_GetTick>
 801f52c:	4603      	mov	r3, r0
}
 801f52e:	4618      	mov	r0, r3
 801f530:	bd80      	pop	{r7, pc}
	...

0801f534 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801f534:	b580      	push	{r7, lr}
 801f536:	b0a0      	sub	sp, #128	; 0x80
 801f538:	af00      	add	r7, sp, #0
 801f53a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801f53c:	f107 030c 	add.w	r3, r7, #12
 801f540:	2264      	movs	r2, #100	; 0x64
 801f542:	2100      	movs	r1, #0
 801f544:	4618      	mov	r0, r3
 801f546:	f005 f91f 	bl	8024788 <memset>
  int32_t PHYLinkState = 0;
 801f54a:	2300      	movs	r3, #0
 801f54c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801f54e:	2300      	movs	r3, #0
 801f550:	67fb      	str	r3, [r7, #124]	; 0x7c
 801f552:	2300      	movs	r3, #0
 801f554:	67bb      	str	r3, [r7, #120]	; 0x78
 801f556:	2300      	movs	r3, #0
 801f558:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801f55a:	483a      	ldr	r0, [pc, #232]	; (801f644 <ethernet_link_check_state+0x110>)
 801f55c:	f7f8 f90b 	bl	8017776 <DP83848_GetLinkState>
 801f560:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f568:	089b      	lsrs	r3, r3, #2
 801f56a:	f003 0301 	and.w	r3, r3, #1
 801f56e:	b2db      	uxtb	r3, r3
 801f570:	2b00      	cmp	r3, #0
 801f572:	d00c      	beq.n	801f58e <ethernet_link_check_state+0x5a>
 801f574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f576:	2b01      	cmp	r3, #1
 801f578:	dc09      	bgt.n	801f58e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801f57a:	4833      	ldr	r0, [pc, #204]	; (801f648 <ethernet_link_check_state+0x114>)
 801f57c:	f7f9 fbe3 	bl	8018d46 <HAL_ETH_Stop>
    netif_set_down(netif);
 801f580:	6878      	ldr	r0, [r7, #4]
 801f582:	f001 f84b 	bl	802061c <netif_set_down>
    netif_set_link_down(netif);
 801f586:	6878      	ldr	r0, [r7, #4]
 801f588:	f001 f8ae 	bl	80206e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801f58c:	e055      	b.n	801f63a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f594:	f003 0304 	and.w	r3, r3, #4
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d14e      	bne.n	801f63a <ethernet_link_check_state+0x106>
 801f59c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f59e:	2b01      	cmp	r3, #1
 801f5a0:	dd4b      	ble.n	801f63a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801f5a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f5a4:	3b02      	subs	r3, #2
 801f5a6:	2b03      	cmp	r3, #3
 801f5a8:	d82a      	bhi.n	801f600 <ethernet_link_check_state+0xcc>
 801f5aa:	a201      	add	r2, pc, #4	; (adr r2, 801f5b0 <ethernet_link_check_state+0x7c>)
 801f5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f5b0:	0801f5c1 	.word	0x0801f5c1
 801f5b4:	0801f5d3 	.word	0x0801f5d3
 801f5b8:	0801f5e3 	.word	0x0801f5e3
 801f5bc:	0801f5f3 	.word	0x0801f5f3
      duplex = ETH_FULLDUPLEX_MODE;
 801f5c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f5c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801f5c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801f5ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801f5cc:	2301      	movs	r3, #1
 801f5ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801f5d0:	e017      	b.n	801f602 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801f5d2:	2300      	movs	r3, #0
 801f5d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801f5d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801f5da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801f5dc:	2301      	movs	r3, #1
 801f5de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801f5e0:	e00f      	b.n	801f602 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801f5e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f5e6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801f5e8:	2300      	movs	r3, #0
 801f5ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801f5ec:	2301      	movs	r3, #1
 801f5ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801f5f0:	e007      	b.n	801f602 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801f5f2:	2300      	movs	r3, #0
 801f5f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801f5f6:	2300      	movs	r3, #0
 801f5f8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801f5fa:	2301      	movs	r3, #1
 801f5fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801f5fe:	e000      	b.n	801f602 <ethernet_link_check_state+0xce>
      break;
 801f600:	bf00      	nop
    if(linkchanged)
 801f602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f604:	2b00      	cmp	r3, #0
 801f606:	d018      	beq.n	801f63a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801f608:	f107 030c 	add.w	r3, r7, #12
 801f60c:	4619      	mov	r1, r3
 801f60e:	480e      	ldr	r0, [pc, #56]	; (801f648 <ethernet_link_check_state+0x114>)
 801f610:	f7f9 ff46 	bl	80194a0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801f614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f616:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801f618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f61a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801f61c:	f107 030c 	add.w	r3, r7, #12
 801f620:	4619      	mov	r1, r3
 801f622:	4809      	ldr	r0, [pc, #36]	; (801f648 <ethernet_link_check_state+0x114>)
 801f624:	f7fa f826 	bl	8019674 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801f628:	4807      	ldr	r0, [pc, #28]	; (801f648 <ethernet_link_check_state+0x114>)
 801f62a:	f7f9 fb2d 	bl	8018c88 <HAL_ETH_Start>
      netif_set_up(netif);
 801f62e:	6878      	ldr	r0, [r7, #4]
 801f630:	f000 ff88 	bl	8020544 <netif_set_up>
      netif_set_link_up(netif);
 801f634:	6878      	ldr	r0, [r7, #4]
 801f636:	f001 f823 	bl	8020680 <netif_set_link_up>
}
 801f63a:	bf00      	nop
 801f63c:	3780      	adds	r7, #128	; 0x80
 801f63e:	46bd      	mov	sp, r7
 801f640:	bd80      	pop	{r7, pc}
 801f642:	bf00      	nop
 801f644:	20015e8c 	.word	0x20015e8c
 801f648:	20015da4 	.word	0x20015da4

0801f64c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801f64c:	b580      	push	{r7, lr}
 801f64e:	b086      	sub	sp, #24
 801f650:	af02      	add	r7, sp, #8
 801f652:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801f654:	4812      	ldr	r0, [pc, #72]	; (801f6a0 <HAL_ETH_RxAllocateCallback+0x54>)
 801f656:	f000 fca5 	bl	801ffa4 <memp_malloc_pool>
 801f65a:	60f8      	str	r0, [r7, #12]
	if (p)
 801f65c:	68fb      	ldr	r3, [r7, #12]
 801f65e:	2b00      	cmp	r3, #0
 801f660:	d014      	beq.n	801f68c <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	f103 0214 	add.w	r2, r3, #20
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	4a0d      	ldr	r2, [pc, #52]	; (801f6a4 <HAL_ETH_RxAllocateCallback+0x58>)
 801f670:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801f67a:	9201      	str	r2, [sp, #4]
 801f67c:	9300      	str	r3, [sp, #0]
 801f67e:	68fb      	ldr	r3, [r7, #12]
 801f680:	2241      	movs	r2, #65	; 0x41
 801f682:	2100      	movs	r1, #0
 801f684:	2000      	movs	r0, #0
 801f686:	f001 fa75 	bl	8020b74 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801f68a:	e005      	b.n	801f698 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801f68c:	4b06      	ldr	r3, [pc, #24]	; (801f6a8 <HAL_ETH_RxAllocateCallback+0x5c>)
 801f68e:	2201      	movs	r2, #1
 801f690:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	2200      	movs	r2, #0
 801f696:	601a      	str	r2, [r3, #0]
}
 801f698:	bf00      	nop
 801f69a:	3710      	adds	r7, #16
 801f69c:	46bd      	mov	sp, r7
 801f69e:	bd80      	pop	{r7, pc}
 801f6a0:	0802b718 	.word	0x0802b718
 801f6a4:	0801f2d5 	.word	0x0801f2d5
 801f6a8:	20015da0 	.word	0x20015da0

0801f6ac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b088      	sub	sp, #32
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	60f8      	str	r0, [r7, #12]
 801f6b4:	60b9      	str	r1, [r7, #8]
 801f6b6:	607a      	str	r2, [r7, #4]
 801f6b8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801f6ba:	68fb      	ldr	r3, [r7, #12]
 801f6bc:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801f6be:	68bb      	ldr	r3, [r7, #8]
 801f6c0:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801f6c2:	2300      	movs	r3, #0
 801f6c4:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	3b14      	subs	r3, #20
 801f6ca:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801f6cc:	69fb      	ldr	r3, [r7, #28]
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801f6d2:	69fb      	ldr	r3, [r7, #28]
 801f6d4:	2200      	movs	r2, #0
 801f6d6:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801f6d8:	69fb      	ldr	r3, [r7, #28]
 801f6da:	887a      	ldrh	r2, [r7, #2]
 801f6dc:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801f6de:	69bb      	ldr	r3, [r7, #24]
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d103      	bne.n	801f6ee <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801f6e6:	69bb      	ldr	r3, [r7, #24]
 801f6e8:	69fa      	ldr	r2, [r7, #28]
 801f6ea:	601a      	str	r2, [r3, #0]
 801f6ec:	e003      	b.n	801f6f6 <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801f6ee:	697b      	ldr	r3, [r7, #20]
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	69fa      	ldr	r2, [r7, #28]
 801f6f4:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801f6f6:	697b      	ldr	r3, [r7, #20]
 801f6f8:	69fa      	ldr	r2, [r7, #28]
 801f6fa:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801f6fc:	69bb      	ldr	r3, [r7, #24]
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	61fb      	str	r3, [r7, #28]
 801f702:	e009      	b.n	801f718 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801f704:	69fb      	ldr	r3, [r7, #28]
 801f706:	891a      	ldrh	r2, [r3, #8]
 801f708:	887b      	ldrh	r3, [r7, #2]
 801f70a:	4413      	add	r3, r2
 801f70c:	b29a      	uxth	r2, r3
 801f70e:	69fb      	ldr	r3, [r7, #28]
 801f710:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801f712:	69fb      	ldr	r3, [r7, #28]
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	61fb      	str	r3, [r7, #28]
 801f718:	69fb      	ldr	r3, [r7, #28]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d1f2      	bne.n	801f704 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801f71e:	887b      	ldrh	r3, [r7, #2]
 801f720:	4619      	mov	r1, r3
 801f722:	6878      	ldr	r0, [r7, #4]
 801f724:	f7ff fc14 	bl	801ef50 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801f728:	bf00      	nop
 801f72a:	3720      	adds	r7, #32
 801f72c:	46bd      	mov	sp, r7
 801f72e:	bd80      	pop	{r7, pc}

0801f730 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801f730:	b480      	push	{r7}
 801f732:	b083      	sub	sp, #12
 801f734:	af00      	add	r7, sp, #0
 801f736:	4603      	mov	r3, r0
 801f738:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801f73a:	88fb      	ldrh	r3, [r7, #6]
 801f73c:	021b      	lsls	r3, r3, #8
 801f73e:	b21a      	sxth	r2, r3
 801f740:	88fb      	ldrh	r3, [r7, #6]
 801f742:	0a1b      	lsrs	r3, r3, #8
 801f744:	b29b      	uxth	r3, r3
 801f746:	b21b      	sxth	r3, r3
 801f748:	4313      	orrs	r3, r2
 801f74a:	b21b      	sxth	r3, r3
 801f74c:	b29b      	uxth	r3, r3
}
 801f74e:	4618      	mov	r0, r3
 801f750:	370c      	adds	r7, #12
 801f752:	46bd      	mov	sp, r7
 801f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f758:	4770      	bx	lr

0801f75a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801f75a:	b580      	push	{r7, lr}
 801f75c:	b082      	sub	sp, #8
 801f75e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801f760:	2300      	movs	r3, #0
 801f762:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801f764:	f000 f8d2 	bl	801f90c <mem_init>
  memp_init();
 801f768:	f000 fbd8 	bl	801ff1c <memp_init>
  pbuf_init();
  netif_init();
 801f76c:	f000 fcfc 	bl	8020168 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801f770:	f001 ff9a 	bl	80216a8 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801f774:	f001 ff16 	bl	80215a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801f778:	bf00      	nop
 801f77a:	3708      	adds	r7, #8
 801f77c:	46bd      	mov	sp, r7
 801f77e:	bd80      	pop	{r7, pc}

0801f780 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801f780:	b480      	push	{r7}
 801f782:	b083      	sub	sp, #12
 801f784:	af00      	add	r7, sp, #0
 801f786:	4603      	mov	r3, r0
 801f788:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801f78a:	4b05      	ldr	r3, [pc, #20]	; (801f7a0 <ptr_to_mem+0x20>)
 801f78c:	681a      	ldr	r2, [r3, #0]
 801f78e:	88fb      	ldrh	r3, [r7, #6]
 801f790:	4413      	add	r3, r2
}
 801f792:	4618      	mov	r0, r3
 801f794:	370c      	adds	r7, #12
 801f796:	46bd      	mov	sp, r7
 801f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f79c:	4770      	bx	lr
 801f79e:	bf00      	nop
 801f7a0:	20016518 	.word	0x20016518

0801f7a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801f7a4:	b480      	push	{r7}
 801f7a6:	b083      	sub	sp, #12
 801f7a8:	af00      	add	r7, sp, #0
 801f7aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801f7ac:	4b05      	ldr	r3, [pc, #20]	; (801f7c4 <mem_to_ptr+0x20>)
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	687a      	ldr	r2, [r7, #4]
 801f7b2:	1ad3      	subs	r3, r2, r3
 801f7b4:	b29b      	uxth	r3, r3
}
 801f7b6:	4618      	mov	r0, r3
 801f7b8:	370c      	adds	r7, #12
 801f7ba:	46bd      	mov	sp, r7
 801f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7c0:	4770      	bx	lr
 801f7c2:	bf00      	nop
 801f7c4:	20016518 	.word	0x20016518

0801f7c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801f7c8:	b590      	push	{r4, r7, lr}
 801f7ca:	b085      	sub	sp, #20
 801f7cc:	af00      	add	r7, sp, #0
 801f7ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801f7d0:	4b45      	ldr	r3, [pc, #276]	; (801f8e8 <plug_holes+0x120>)
 801f7d2:	681b      	ldr	r3, [r3, #0]
 801f7d4:	687a      	ldr	r2, [r7, #4]
 801f7d6:	429a      	cmp	r2, r3
 801f7d8:	d206      	bcs.n	801f7e8 <plug_holes+0x20>
 801f7da:	4b44      	ldr	r3, [pc, #272]	; (801f8ec <plug_holes+0x124>)
 801f7dc:	f240 12df 	movw	r2, #479	; 0x1df
 801f7e0:	4943      	ldr	r1, [pc, #268]	; (801f8f0 <plug_holes+0x128>)
 801f7e2:	4844      	ldr	r0, [pc, #272]	; (801f8f4 <plug_holes+0x12c>)
 801f7e4:	f005 f8b8 	bl	8024958 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801f7e8:	4b43      	ldr	r3, [pc, #268]	; (801f8f8 <plug_holes+0x130>)
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	687a      	ldr	r2, [r7, #4]
 801f7ee:	429a      	cmp	r2, r3
 801f7f0:	d306      	bcc.n	801f800 <plug_holes+0x38>
 801f7f2:	4b3e      	ldr	r3, [pc, #248]	; (801f8ec <plug_holes+0x124>)
 801f7f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801f7f8:	4940      	ldr	r1, [pc, #256]	; (801f8fc <plug_holes+0x134>)
 801f7fa:	483e      	ldr	r0, [pc, #248]	; (801f8f4 <plug_holes+0x12c>)
 801f7fc:	f005 f8ac 	bl	8024958 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	791b      	ldrb	r3, [r3, #4]
 801f804:	2b00      	cmp	r3, #0
 801f806:	d006      	beq.n	801f816 <plug_holes+0x4e>
 801f808:	4b38      	ldr	r3, [pc, #224]	; (801f8ec <plug_holes+0x124>)
 801f80a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801f80e:	493c      	ldr	r1, [pc, #240]	; (801f900 <plug_holes+0x138>)
 801f810:	4838      	ldr	r0, [pc, #224]	; (801f8f4 <plug_holes+0x12c>)
 801f812:	f005 f8a1 	bl	8024958 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	881b      	ldrh	r3, [r3, #0]
 801f81a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801f81e:	d906      	bls.n	801f82e <plug_holes+0x66>
 801f820:	4b32      	ldr	r3, [pc, #200]	; (801f8ec <plug_holes+0x124>)
 801f822:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801f826:	4937      	ldr	r1, [pc, #220]	; (801f904 <plug_holes+0x13c>)
 801f828:	4832      	ldr	r0, [pc, #200]	; (801f8f4 <plug_holes+0x12c>)
 801f82a:	f005 f895 	bl	8024958 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	881b      	ldrh	r3, [r3, #0]
 801f832:	4618      	mov	r0, r3
 801f834:	f7ff ffa4 	bl	801f780 <ptr_to_mem>
 801f838:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801f83a:	687a      	ldr	r2, [r7, #4]
 801f83c:	68fb      	ldr	r3, [r7, #12]
 801f83e:	429a      	cmp	r2, r3
 801f840:	d024      	beq.n	801f88c <plug_holes+0xc4>
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	791b      	ldrb	r3, [r3, #4]
 801f846:	2b00      	cmp	r3, #0
 801f848:	d120      	bne.n	801f88c <plug_holes+0xc4>
 801f84a:	4b2b      	ldr	r3, [pc, #172]	; (801f8f8 <plug_holes+0x130>)
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	68fa      	ldr	r2, [r7, #12]
 801f850:	429a      	cmp	r2, r3
 801f852:	d01b      	beq.n	801f88c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801f854:	4b2c      	ldr	r3, [pc, #176]	; (801f908 <plug_holes+0x140>)
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	68fa      	ldr	r2, [r7, #12]
 801f85a:	429a      	cmp	r2, r3
 801f85c:	d102      	bne.n	801f864 <plug_holes+0x9c>
      lfree = mem;
 801f85e:	4a2a      	ldr	r2, [pc, #168]	; (801f908 <plug_holes+0x140>)
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801f864:	68fb      	ldr	r3, [r7, #12]
 801f866:	881a      	ldrh	r2, [r3, #0]
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801f86c:	68fb      	ldr	r3, [r7, #12]
 801f86e:	881b      	ldrh	r3, [r3, #0]
 801f870:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801f874:	d00a      	beq.n	801f88c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	881b      	ldrh	r3, [r3, #0]
 801f87a:	4618      	mov	r0, r3
 801f87c:	f7ff ff80 	bl	801f780 <ptr_to_mem>
 801f880:	4604      	mov	r4, r0
 801f882:	6878      	ldr	r0, [r7, #4]
 801f884:	f7ff ff8e 	bl	801f7a4 <mem_to_ptr>
 801f888:	4603      	mov	r3, r0
 801f88a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	885b      	ldrh	r3, [r3, #2]
 801f890:	4618      	mov	r0, r3
 801f892:	f7ff ff75 	bl	801f780 <ptr_to_mem>
 801f896:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801f898:	68ba      	ldr	r2, [r7, #8]
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	429a      	cmp	r2, r3
 801f89e:	d01f      	beq.n	801f8e0 <plug_holes+0x118>
 801f8a0:	68bb      	ldr	r3, [r7, #8]
 801f8a2:	791b      	ldrb	r3, [r3, #4]
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d11b      	bne.n	801f8e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801f8a8:	4b17      	ldr	r3, [pc, #92]	; (801f908 <plug_holes+0x140>)
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	687a      	ldr	r2, [r7, #4]
 801f8ae:	429a      	cmp	r2, r3
 801f8b0:	d102      	bne.n	801f8b8 <plug_holes+0xf0>
      lfree = pmem;
 801f8b2:	4a15      	ldr	r2, [pc, #84]	; (801f908 <plug_holes+0x140>)
 801f8b4:	68bb      	ldr	r3, [r7, #8]
 801f8b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	881a      	ldrh	r2, [r3, #0]
 801f8bc:	68bb      	ldr	r3, [r7, #8]
 801f8be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801f8c0:	687b      	ldr	r3, [r7, #4]
 801f8c2:	881b      	ldrh	r3, [r3, #0]
 801f8c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801f8c8:	d00a      	beq.n	801f8e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	881b      	ldrh	r3, [r3, #0]
 801f8ce:	4618      	mov	r0, r3
 801f8d0:	f7ff ff56 	bl	801f780 <ptr_to_mem>
 801f8d4:	4604      	mov	r4, r0
 801f8d6:	68b8      	ldr	r0, [r7, #8]
 801f8d8:	f7ff ff64 	bl	801f7a4 <mem_to_ptr>
 801f8dc:	4603      	mov	r3, r0
 801f8de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801f8e0:	bf00      	nop
 801f8e2:	3714      	adds	r7, #20
 801f8e4:	46bd      	mov	sp, r7
 801f8e6:	bd90      	pop	{r4, r7, pc}
 801f8e8:	20016518 	.word	0x20016518
 801f8ec:	08029cc4 	.word	0x08029cc4
 801f8f0:	08029cf4 	.word	0x08029cf4
 801f8f4:	08029d0c 	.word	0x08029d0c
 801f8f8:	2001651c 	.word	0x2001651c
 801f8fc:	08029d34 	.word	0x08029d34
 801f900:	08029d50 	.word	0x08029d50
 801f904:	08029d6c 	.word	0x08029d6c
 801f908:	20016520 	.word	0x20016520

0801f90c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801f90c:	b580      	push	{r7, lr}
 801f90e:	b082      	sub	sp, #8
 801f910:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801f912:	4b18      	ldr	r3, [pc, #96]	; (801f974 <mem_init+0x68>)
 801f914:	3303      	adds	r3, #3
 801f916:	f023 0303 	bic.w	r3, r3, #3
 801f91a:	461a      	mov	r2, r3
 801f91c:	4b16      	ldr	r3, [pc, #88]	; (801f978 <mem_init+0x6c>)
 801f91e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801f920:	4b15      	ldr	r3, [pc, #84]	; (801f978 <mem_init+0x6c>)
 801f922:	681b      	ldr	r3, [r3, #0]
 801f924:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801f92c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	2200      	movs	r2, #0
 801f932:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	2200      	movs	r2, #0
 801f938:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801f93a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801f93e:	f7ff ff1f 	bl	801f780 <ptr_to_mem>
 801f942:	4603      	mov	r3, r0
 801f944:	4a0d      	ldr	r2, [pc, #52]	; (801f97c <mem_init+0x70>)
 801f946:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801f948:	4b0c      	ldr	r3, [pc, #48]	; (801f97c <mem_init+0x70>)
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	2201      	movs	r2, #1
 801f94e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801f950:	4b0a      	ldr	r3, [pc, #40]	; (801f97c <mem_init+0x70>)
 801f952:	681b      	ldr	r3, [r3, #0]
 801f954:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801f958:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801f95a:	4b08      	ldr	r3, [pc, #32]	; (801f97c <mem_init+0x70>)
 801f95c:	681b      	ldr	r3, [r3, #0]
 801f95e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801f962:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801f964:	4b04      	ldr	r3, [pc, #16]	; (801f978 <mem_init+0x6c>)
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	4a05      	ldr	r2, [pc, #20]	; (801f980 <mem_init+0x74>)
 801f96a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801f96c:	bf00      	nop
 801f96e:	3708      	adds	r7, #8
 801f970:	46bd      	mov	sp, r7
 801f972:	bd80      	pop	{r7, pc}
 801f974:	20015ec4 	.word	0x20015ec4
 801f978:	20016518 	.word	0x20016518
 801f97c:	2001651c 	.word	0x2001651c
 801f980:	20016520 	.word	0x20016520

0801f984 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801f984:	b580      	push	{r7, lr}
 801f986:	b086      	sub	sp, #24
 801f988:	af00      	add	r7, sp, #0
 801f98a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801f98c:	6878      	ldr	r0, [r7, #4]
 801f98e:	f7ff ff09 	bl	801f7a4 <mem_to_ptr>
 801f992:	4603      	mov	r3, r0
 801f994:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	881b      	ldrh	r3, [r3, #0]
 801f99a:	4618      	mov	r0, r3
 801f99c:	f7ff fef0 	bl	801f780 <ptr_to_mem>
 801f9a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	885b      	ldrh	r3, [r3, #2]
 801f9a6:	4618      	mov	r0, r3
 801f9a8:	f7ff feea 	bl	801f780 <ptr_to_mem>
 801f9ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	881b      	ldrh	r3, [r3, #0]
 801f9b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801f9b6:	d818      	bhi.n	801f9ea <mem_link_valid+0x66>
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	885b      	ldrh	r3, [r3, #2]
 801f9bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801f9c0:	d813      	bhi.n	801f9ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801f9c6:	8afa      	ldrh	r2, [r7, #22]
 801f9c8:	429a      	cmp	r2, r3
 801f9ca:	d004      	beq.n	801f9d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801f9cc:	68fb      	ldr	r3, [r7, #12]
 801f9ce:	881b      	ldrh	r3, [r3, #0]
 801f9d0:	8afa      	ldrh	r2, [r7, #22]
 801f9d2:	429a      	cmp	r2, r3
 801f9d4:	d109      	bne.n	801f9ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801f9d6:	4b08      	ldr	r3, [pc, #32]	; (801f9f8 <mem_link_valid+0x74>)
 801f9d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801f9da:	693a      	ldr	r2, [r7, #16]
 801f9dc:	429a      	cmp	r2, r3
 801f9de:	d006      	beq.n	801f9ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801f9e0:	693b      	ldr	r3, [r7, #16]
 801f9e2:	885b      	ldrh	r3, [r3, #2]
 801f9e4:	8afa      	ldrh	r2, [r7, #22]
 801f9e6:	429a      	cmp	r2, r3
 801f9e8:	d001      	beq.n	801f9ee <mem_link_valid+0x6a>
    return 0;
 801f9ea:	2300      	movs	r3, #0
 801f9ec:	e000      	b.n	801f9f0 <mem_link_valid+0x6c>
  }
  return 1;
 801f9ee:	2301      	movs	r3, #1
}
 801f9f0:	4618      	mov	r0, r3
 801f9f2:	3718      	adds	r7, #24
 801f9f4:	46bd      	mov	sp, r7
 801f9f6:	bd80      	pop	{r7, pc}
 801f9f8:	2001651c 	.word	0x2001651c

0801f9fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801f9fc:	b580      	push	{r7, lr}
 801f9fe:	b084      	sub	sp, #16
 801fa00:	af00      	add	r7, sp, #0
 801fa02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	d04c      	beq.n	801faa4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	f003 0303 	and.w	r3, r3, #3
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d007      	beq.n	801fa24 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801fa14:	4b25      	ldr	r3, [pc, #148]	; (801faac <mem_free+0xb0>)
 801fa16:	f240 2273 	movw	r2, #627	; 0x273
 801fa1a:	4925      	ldr	r1, [pc, #148]	; (801fab0 <mem_free+0xb4>)
 801fa1c:	4825      	ldr	r0, [pc, #148]	; (801fab4 <mem_free+0xb8>)
 801fa1e:	f004 ff9b 	bl	8024958 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801fa22:	e040      	b.n	801faa6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	3b08      	subs	r3, #8
 801fa28:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801fa2a:	4b23      	ldr	r3, [pc, #140]	; (801fab8 <mem_free+0xbc>)
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	68fa      	ldr	r2, [r7, #12]
 801fa30:	429a      	cmp	r2, r3
 801fa32:	d306      	bcc.n	801fa42 <mem_free+0x46>
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	f103 020c 	add.w	r2, r3, #12
 801fa3a:	4b20      	ldr	r3, [pc, #128]	; (801fabc <mem_free+0xc0>)
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	429a      	cmp	r2, r3
 801fa40:	d907      	bls.n	801fa52 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801fa42:	4b1a      	ldr	r3, [pc, #104]	; (801faac <mem_free+0xb0>)
 801fa44:	f240 227f 	movw	r2, #639	; 0x27f
 801fa48:	491d      	ldr	r1, [pc, #116]	; (801fac0 <mem_free+0xc4>)
 801fa4a:	481a      	ldr	r0, [pc, #104]	; (801fab4 <mem_free+0xb8>)
 801fa4c:	f004 ff84 	bl	8024958 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801fa50:	e029      	b.n	801faa6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	791b      	ldrb	r3, [r3, #4]
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	d107      	bne.n	801fa6a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801fa5a:	4b14      	ldr	r3, [pc, #80]	; (801faac <mem_free+0xb0>)
 801fa5c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801fa60:	4918      	ldr	r1, [pc, #96]	; (801fac4 <mem_free+0xc8>)
 801fa62:	4814      	ldr	r0, [pc, #80]	; (801fab4 <mem_free+0xb8>)
 801fa64:	f004 ff78 	bl	8024958 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801fa68:	e01d      	b.n	801faa6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801fa6a:	68f8      	ldr	r0, [r7, #12]
 801fa6c:	f7ff ff8a 	bl	801f984 <mem_link_valid>
 801fa70:	4603      	mov	r3, r0
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d107      	bne.n	801fa86 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801fa76:	4b0d      	ldr	r3, [pc, #52]	; (801faac <mem_free+0xb0>)
 801fa78:	f240 2295 	movw	r2, #661	; 0x295
 801fa7c:	4912      	ldr	r1, [pc, #72]	; (801fac8 <mem_free+0xcc>)
 801fa7e:	480d      	ldr	r0, [pc, #52]	; (801fab4 <mem_free+0xb8>)
 801fa80:	f004 ff6a 	bl	8024958 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801fa84:	e00f      	b.n	801faa6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	2200      	movs	r2, #0
 801fa8a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801fa8c:	4b0f      	ldr	r3, [pc, #60]	; (801facc <mem_free+0xd0>)
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	68fa      	ldr	r2, [r7, #12]
 801fa92:	429a      	cmp	r2, r3
 801fa94:	d202      	bcs.n	801fa9c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801fa96:	4a0d      	ldr	r2, [pc, #52]	; (801facc <mem_free+0xd0>)
 801fa98:	68fb      	ldr	r3, [r7, #12]
 801fa9a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801fa9c:	68f8      	ldr	r0, [r7, #12]
 801fa9e:	f7ff fe93 	bl	801f7c8 <plug_holes>
 801faa2:	e000      	b.n	801faa6 <mem_free+0xaa>
    return;
 801faa4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801faa6:	3710      	adds	r7, #16
 801faa8:	46bd      	mov	sp, r7
 801faaa:	bd80      	pop	{r7, pc}
 801faac:	08029cc4 	.word	0x08029cc4
 801fab0:	08029d98 	.word	0x08029d98
 801fab4:	08029d0c 	.word	0x08029d0c
 801fab8:	20016518 	.word	0x20016518
 801fabc:	2001651c 	.word	0x2001651c
 801fac0:	08029dbc 	.word	0x08029dbc
 801fac4:	08029dd8 	.word	0x08029dd8
 801fac8:	08029e00 	.word	0x08029e00
 801facc:	20016520 	.word	0x20016520

0801fad0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801fad0:	b580      	push	{r7, lr}
 801fad2:	b088      	sub	sp, #32
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	6078      	str	r0, [r7, #4]
 801fad8:	460b      	mov	r3, r1
 801fada:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801fadc:	887b      	ldrh	r3, [r7, #2]
 801fade:	3303      	adds	r3, #3
 801fae0:	b29b      	uxth	r3, r3
 801fae2:	f023 0303 	bic.w	r3, r3, #3
 801fae6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801fae8:	8bfb      	ldrh	r3, [r7, #30]
 801faea:	2b0b      	cmp	r3, #11
 801faec:	d801      	bhi.n	801faf2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801faee:	230c      	movs	r3, #12
 801faf0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801faf2:	8bfb      	ldrh	r3, [r7, #30]
 801faf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801faf8:	d803      	bhi.n	801fb02 <mem_trim+0x32>
 801fafa:	8bfa      	ldrh	r2, [r7, #30]
 801fafc:	887b      	ldrh	r3, [r7, #2]
 801fafe:	429a      	cmp	r2, r3
 801fb00:	d201      	bcs.n	801fb06 <mem_trim+0x36>
    return NULL;
 801fb02:	2300      	movs	r3, #0
 801fb04:	e0cc      	b.n	801fca0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801fb06:	4b68      	ldr	r3, [pc, #416]	; (801fca8 <mem_trim+0x1d8>)
 801fb08:	681b      	ldr	r3, [r3, #0]
 801fb0a:	687a      	ldr	r2, [r7, #4]
 801fb0c:	429a      	cmp	r2, r3
 801fb0e:	d304      	bcc.n	801fb1a <mem_trim+0x4a>
 801fb10:	4b66      	ldr	r3, [pc, #408]	; (801fcac <mem_trim+0x1dc>)
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	687a      	ldr	r2, [r7, #4]
 801fb16:	429a      	cmp	r2, r3
 801fb18:	d306      	bcc.n	801fb28 <mem_trim+0x58>
 801fb1a:	4b65      	ldr	r3, [pc, #404]	; (801fcb0 <mem_trim+0x1e0>)
 801fb1c:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fb20:	4964      	ldr	r1, [pc, #400]	; (801fcb4 <mem_trim+0x1e4>)
 801fb22:	4865      	ldr	r0, [pc, #404]	; (801fcb8 <mem_trim+0x1e8>)
 801fb24:	f004 ff18 	bl	8024958 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801fb28:	4b5f      	ldr	r3, [pc, #380]	; (801fca8 <mem_trim+0x1d8>)
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	687a      	ldr	r2, [r7, #4]
 801fb2e:	429a      	cmp	r2, r3
 801fb30:	d304      	bcc.n	801fb3c <mem_trim+0x6c>
 801fb32:	4b5e      	ldr	r3, [pc, #376]	; (801fcac <mem_trim+0x1dc>)
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	687a      	ldr	r2, [r7, #4]
 801fb38:	429a      	cmp	r2, r3
 801fb3a:	d301      	bcc.n	801fb40 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	e0af      	b.n	801fca0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	3b08      	subs	r3, #8
 801fb44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801fb46:	69b8      	ldr	r0, [r7, #24]
 801fb48:	f7ff fe2c 	bl	801f7a4 <mem_to_ptr>
 801fb4c:	4603      	mov	r3, r0
 801fb4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801fb50:	69bb      	ldr	r3, [r7, #24]
 801fb52:	881a      	ldrh	r2, [r3, #0]
 801fb54:	8afb      	ldrh	r3, [r7, #22]
 801fb56:	1ad3      	subs	r3, r2, r3
 801fb58:	b29b      	uxth	r3, r3
 801fb5a:	3b08      	subs	r3, #8
 801fb5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801fb5e:	8bfa      	ldrh	r2, [r7, #30]
 801fb60:	8abb      	ldrh	r3, [r7, #20]
 801fb62:	429a      	cmp	r2, r3
 801fb64:	d906      	bls.n	801fb74 <mem_trim+0xa4>
 801fb66:	4b52      	ldr	r3, [pc, #328]	; (801fcb0 <mem_trim+0x1e0>)
 801fb68:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801fb6c:	4953      	ldr	r1, [pc, #332]	; (801fcbc <mem_trim+0x1ec>)
 801fb6e:	4852      	ldr	r0, [pc, #328]	; (801fcb8 <mem_trim+0x1e8>)
 801fb70:	f004 fef2 	bl	8024958 <iprintf>
  if (newsize > size) {
 801fb74:	8bfa      	ldrh	r2, [r7, #30]
 801fb76:	8abb      	ldrh	r3, [r7, #20]
 801fb78:	429a      	cmp	r2, r3
 801fb7a:	d901      	bls.n	801fb80 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801fb7c:	2300      	movs	r3, #0
 801fb7e:	e08f      	b.n	801fca0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801fb80:	8bfa      	ldrh	r2, [r7, #30]
 801fb82:	8abb      	ldrh	r3, [r7, #20]
 801fb84:	429a      	cmp	r2, r3
 801fb86:	d101      	bne.n	801fb8c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	e089      	b.n	801fca0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801fb8c:	69bb      	ldr	r3, [r7, #24]
 801fb8e:	881b      	ldrh	r3, [r3, #0]
 801fb90:	4618      	mov	r0, r3
 801fb92:	f7ff fdf5 	bl	801f780 <ptr_to_mem>
 801fb96:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801fb98:	693b      	ldr	r3, [r7, #16]
 801fb9a:	791b      	ldrb	r3, [r3, #4]
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d13f      	bne.n	801fc20 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801fba0:	69bb      	ldr	r3, [r7, #24]
 801fba2:	881b      	ldrh	r3, [r3, #0]
 801fba4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801fba8:	d106      	bne.n	801fbb8 <mem_trim+0xe8>
 801fbaa:	4b41      	ldr	r3, [pc, #260]	; (801fcb0 <mem_trim+0x1e0>)
 801fbac:	f240 22f5 	movw	r2, #757	; 0x2f5
 801fbb0:	4943      	ldr	r1, [pc, #268]	; (801fcc0 <mem_trim+0x1f0>)
 801fbb2:	4841      	ldr	r0, [pc, #260]	; (801fcb8 <mem_trim+0x1e8>)
 801fbb4:	f004 fed0 	bl	8024958 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801fbb8:	693b      	ldr	r3, [r7, #16]
 801fbba:	881b      	ldrh	r3, [r3, #0]
 801fbbc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801fbbe:	8afa      	ldrh	r2, [r7, #22]
 801fbc0:	8bfb      	ldrh	r3, [r7, #30]
 801fbc2:	4413      	add	r3, r2
 801fbc4:	b29b      	uxth	r3, r3
 801fbc6:	3308      	adds	r3, #8
 801fbc8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801fbca:	4b3e      	ldr	r3, [pc, #248]	; (801fcc4 <mem_trim+0x1f4>)
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	693a      	ldr	r2, [r7, #16]
 801fbd0:	429a      	cmp	r2, r3
 801fbd2:	d106      	bne.n	801fbe2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801fbd4:	89fb      	ldrh	r3, [r7, #14]
 801fbd6:	4618      	mov	r0, r3
 801fbd8:	f7ff fdd2 	bl	801f780 <ptr_to_mem>
 801fbdc:	4603      	mov	r3, r0
 801fbde:	4a39      	ldr	r2, [pc, #228]	; (801fcc4 <mem_trim+0x1f4>)
 801fbe0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801fbe2:	89fb      	ldrh	r3, [r7, #14]
 801fbe4:	4618      	mov	r0, r3
 801fbe6:	f7ff fdcb 	bl	801f780 <ptr_to_mem>
 801fbea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801fbec:	693b      	ldr	r3, [r7, #16]
 801fbee:	2200      	movs	r2, #0
 801fbf0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801fbf2:	693b      	ldr	r3, [r7, #16]
 801fbf4:	89ba      	ldrh	r2, [r7, #12]
 801fbf6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801fbf8:	693b      	ldr	r3, [r7, #16]
 801fbfa:	8afa      	ldrh	r2, [r7, #22]
 801fbfc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801fbfe:	69bb      	ldr	r3, [r7, #24]
 801fc00:	89fa      	ldrh	r2, [r7, #14]
 801fc02:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801fc04:	693b      	ldr	r3, [r7, #16]
 801fc06:	881b      	ldrh	r3, [r3, #0]
 801fc08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801fc0c:	d047      	beq.n	801fc9e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801fc0e:	693b      	ldr	r3, [r7, #16]
 801fc10:	881b      	ldrh	r3, [r3, #0]
 801fc12:	4618      	mov	r0, r3
 801fc14:	f7ff fdb4 	bl	801f780 <ptr_to_mem>
 801fc18:	4602      	mov	r2, r0
 801fc1a:	89fb      	ldrh	r3, [r7, #14]
 801fc1c:	8053      	strh	r3, [r2, #2]
 801fc1e:	e03e      	b.n	801fc9e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801fc20:	8bfb      	ldrh	r3, [r7, #30]
 801fc22:	f103 0214 	add.w	r2, r3, #20
 801fc26:	8abb      	ldrh	r3, [r7, #20]
 801fc28:	429a      	cmp	r2, r3
 801fc2a:	d838      	bhi.n	801fc9e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801fc2c:	8afa      	ldrh	r2, [r7, #22]
 801fc2e:	8bfb      	ldrh	r3, [r7, #30]
 801fc30:	4413      	add	r3, r2
 801fc32:	b29b      	uxth	r3, r3
 801fc34:	3308      	adds	r3, #8
 801fc36:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801fc38:	69bb      	ldr	r3, [r7, #24]
 801fc3a:	881b      	ldrh	r3, [r3, #0]
 801fc3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801fc40:	d106      	bne.n	801fc50 <mem_trim+0x180>
 801fc42:	4b1b      	ldr	r3, [pc, #108]	; (801fcb0 <mem_trim+0x1e0>)
 801fc44:	f240 3216 	movw	r2, #790	; 0x316
 801fc48:	491d      	ldr	r1, [pc, #116]	; (801fcc0 <mem_trim+0x1f0>)
 801fc4a:	481b      	ldr	r0, [pc, #108]	; (801fcb8 <mem_trim+0x1e8>)
 801fc4c:	f004 fe84 	bl	8024958 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801fc50:	89fb      	ldrh	r3, [r7, #14]
 801fc52:	4618      	mov	r0, r3
 801fc54:	f7ff fd94 	bl	801f780 <ptr_to_mem>
 801fc58:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801fc5a:	4b1a      	ldr	r3, [pc, #104]	; (801fcc4 <mem_trim+0x1f4>)
 801fc5c:	681b      	ldr	r3, [r3, #0]
 801fc5e:	693a      	ldr	r2, [r7, #16]
 801fc60:	429a      	cmp	r2, r3
 801fc62:	d202      	bcs.n	801fc6a <mem_trim+0x19a>
      lfree = mem2;
 801fc64:	4a17      	ldr	r2, [pc, #92]	; (801fcc4 <mem_trim+0x1f4>)
 801fc66:	693b      	ldr	r3, [r7, #16]
 801fc68:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801fc6a:	693b      	ldr	r3, [r7, #16]
 801fc6c:	2200      	movs	r2, #0
 801fc6e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801fc70:	69bb      	ldr	r3, [r7, #24]
 801fc72:	881a      	ldrh	r2, [r3, #0]
 801fc74:	693b      	ldr	r3, [r7, #16]
 801fc76:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801fc78:	693b      	ldr	r3, [r7, #16]
 801fc7a:	8afa      	ldrh	r2, [r7, #22]
 801fc7c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801fc7e:	69bb      	ldr	r3, [r7, #24]
 801fc80:	89fa      	ldrh	r2, [r7, #14]
 801fc82:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801fc84:	693b      	ldr	r3, [r7, #16]
 801fc86:	881b      	ldrh	r3, [r3, #0]
 801fc88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801fc8c:	d007      	beq.n	801fc9e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801fc8e:	693b      	ldr	r3, [r7, #16]
 801fc90:	881b      	ldrh	r3, [r3, #0]
 801fc92:	4618      	mov	r0, r3
 801fc94:	f7ff fd74 	bl	801f780 <ptr_to_mem>
 801fc98:	4602      	mov	r2, r0
 801fc9a:	89fb      	ldrh	r3, [r7, #14]
 801fc9c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801fc9e:	687b      	ldr	r3, [r7, #4]
}
 801fca0:	4618      	mov	r0, r3
 801fca2:	3720      	adds	r7, #32
 801fca4:	46bd      	mov	sp, r7
 801fca6:	bd80      	pop	{r7, pc}
 801fca8:	20016518 	.word	0x20016518
 801fcac:	2001651c 	.word	0x2001651c
 801fcb0:	08029cc4 	.word	0x08029cc4
 801fcb4:	08029e34 	.word	0x08029e34
 801fcb8:	08029d0c 	.word	0x08029d0c
 801fcbc:	08029e4c 	.word	0x08029e4c
 801fcc0:	08029e6c 	.word	0x08029e6c
 801fcc4:	20016520 	.word	0x20016520

0801fcc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801fcc8:	b580      	push	{r7, lr}
 801fcca:	b088      	sub	sp, #32
 801fccc:	af00      	add	r7, sp, #0
 801fcce:	4603      	mov	r3, r0
 801fcd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801fcd2:	88fb      	ldrh	r3, [r7, #6]
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d101      	bne.n	801fcdc <mem_malloc+0x14>
    return NULL;
 801fcd8:	2300      	movs	r3, #0
 801fcda:	e0d9      	b.n	801fe90 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801fcdc:	88fb      	ldrh	r3, [r7, #6]
 801fcde:	3303      	adds	r3, #3
 801fce0:	b29b      	uxth	r3, r3
 801fce2:	f023 0303 	bic.w	r3, r3, #3
 801fce6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801fce8:	8bbb      	ldrh	r3, [r7, #28]
 801fcea:	2b0b      	cmp	r3, #11
 801fcec:	d801      	bhi.n	801fcf2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801fcee:	230c      	movs	r3, #12
 801fcf0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801fcf2:	8bbb      	ldrh	r3, [r7, #28]
 801fcf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801fcf8:	d803      	bhi.n	801fd02 <mem_malloc+0x3a>
 801fcfa:	8bba      	ldrh	r2, [r7, #28]
 801fcfc:	88fb      	ldrh	r3, [r7, #6]
 801fcfe:	429a      	cmp	r2, r3
 801fd00:	d201      	bcs.n	801fd06 <mem_malloc+0x3e>
    return NULL;
 801fd02:	2300      	movs	r3, #0
 801fd04:	e0c4      	b.n	801fe90 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801fd06:	4b64      	ldr	r3, [pc, #400]	; (801fe98 <mem_malloc+0x1d0>)
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	4618      	mov	r0, r3
 801fd0c:	f7ff fd4a 	bl	801f7a4 <mem_to_ptr>
 801fd10:	4603      	mov	r3, r0
 801fd12:	83fb      	strh	r3, [r7, #30]
 801fd14:	e0b4      	b.n	801fe80 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801fd16:	8bfb      	ldrh	r3, [r7, #30]
 801fd18:	4618      	mov	r0, r3
 801fd1a:	f7ff fd31 	bl	801f780 <ptr_to_mem>
 801fd1e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801fd20:	697b      	ldr	r3, [r7, #20]
 801fd22:	791b      	ldrb	r3, [r3, #4]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	f040 80a4 	bne.w	801fe72 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801fd2a:	697b      	ldr	r3, [r7, #20]
 801fd2c:	881b      	ldrh	r3, [r3, #0]
 801fd2e:	461a      	mov	r2, r3
 801fd30:	8bfb      	ldrh	r3, [r7, #30]
 801fd32:	1ad3      	subs	r3, r2, r3
 801fd34:	f1a3 0208 	sub.w	r2, r3, #8
 801fd38:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801fd3a:	429a      	cmp	r2, r3
 801fd3c:	f0c0 8099 	bcc.w	801fe72 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801fd40:	697b      	ldr	r3, [r7, #20]
 801fd42:	881b      	ldrh	r3, [r3, #0]
 801fd44:	461a      	mov	r2, r3
 801fd46:	8bfb      	ldrh	r3, [r7, #30]
 801fd48:	1ad3      	subs	r3, r2, r3
 801fd4a:	f1a3 0208 	sub.w	r2, r3, #8
 801fd4e:	8bbb      	ldrh	r3, [r7, #28]
 801fd50:	3314      	adds	r3, #20
 801fd52:	429a      	cmp	r2, r3
 801fd54:	d333      	bcc.n	801fdbe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801fd56:	8bfa      	ldrh	r2, [r7, #30]
 801fd58:	8bbb      	ldrh	r3, [r7, #28]
 801fd5a:	4413      	add	r3, r2
 801fd5c:	b29b      	uxth	r3, r3
 801fd5e:	3308      	adds	r3, #8
 801fd60:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801fd62:	8a7b      	ldrh	r3, [r7, #18]
 801fd64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801fd68:	d106      	bne.n	801fd78 <mem_malloc+0xb0>
 801fd6a:	4b4c      	ldr	r3, [pc, #304]	; (801fe9c <mem_malloc+0x1d4>)
 801fd6c:	f240 3287 	movw	r2, #903	; 0x387
 801fd70:	494b      	ldr	r1, [pc, #300]	; (801fea0 <mem_malloc+0x1d8>)
 801fd72:	484c      	ldr	r0, [pc, #304]	; (801fea4 <mem_malloc+0x1dc>)
 801fd74:	f004 fdf0 	bl	8024958 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801fd78:	8a7b      	ldrh	r3, [r7, #18]
 801fd7a:	4618      	mov	r0, r3
 801fd7c:	f7ff fd00 	bl	801f780 <ptr_to_mem>
 801fd80:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801fd82:	68fb      	ldr	r3, [r7, #12]
 801fd84:	2200      	movs	r2, #0
 801fd86:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801fd88:	697b      	ldr	r3, [r7, #20]
 801fd8a:	881a      	ldrh	r2, [r3, #0]
 801fd8c:	68fb      	ldr	r3, [r7, #12]
 801fd8e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	8bfa      	ldrh	r2, [r7, #30]
 801fd94:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801fd96:	697b      	ldr	r3, [r7, #20]
 801fd98:	8a7a      	ldrh	r2, [r7, #18]
 801fd9a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801fd9c:	697b      	ldr	r3, [r7, #20]
 801fd9e:	2201      	movs	r2, #1
 801fda0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	881b      	ldrh	r3, [r3, #0]
 801fda6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801fdaa:	d00b      	beq.n	801fdc4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801fdac:	68fb      	ldr	r3, [r7, #12]
 801fdae:	881b      	ldrh	r3, [r3, #0]
 801fdb0:	4618      	mov	r0, r3
 801fdb2:	f7ff fce5 	bl	801f780 <ptr_to_mem>
 801fdb6:	4602      	mov	r2, r0
 801fdb8:	8a7b      	ldrh	r3, [r7, #18]
 801fdba:	8053      	strh	r3, [r2, #2]
 801fdbc:	e002      	b.n	801fdc4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801fdbe:	697b      	ldr	r3, [r7, #20]
 801fdc0:	2201      	movs	r2, #1
 801fdc2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801fdc4:	4b34      	ldr	r3, [pc, #208]	; (801fe98 <mem_malloc+0x1d0>)
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	697a      	ldr	r2, [r7, #20]
 801fdca:	429a      	cmp	r2, r3
 801fdcc:	d127      	bne.n	801fe1e <mem_malloc+0x156>
          struct mem *cur = lfree;
 801fdce:	4b32      	ldr	r3, [pc, #200]	; (801fe98 <mem_malloc+0x1d0>)
 801fdd0:	681b      	ldr	r3, [r3, #0]
 801fdd2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801fdd4:	e005      	b.n	801fde2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801fdd6:	69bb      	ldr	r3, [r7, #24]
 801fdd8:	881b      	ldrh	r3, [r3, #0]
 801fdda:	4618      	mov	r0, r3
 801fddc:	f7ff fcd0 	bl	801f780 <ptr_to_mem>
 801fde0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801fde2:	69bb      	ldr	r3, [r7, #24]
 801fde4:	791b      	ldrb	r3, [r3, #4]
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	d004      	beq.n	801fdf4 <mem_malloc+0x12c>
 801fdea:	4b2f      	ldr	r3, [pc, #188]	; (801fea8 <mem_malloc+0x1e0>)
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	69ba      	ldr	r2, [r7, #24]
 801fdf0:	429a      	cmp	r2, r3
 801fdf2:	d1f0      	bne.n	801fdd6 <mem_malloc+0x10e>
          }
          lfree = cur;
 801fdf4:	4a28      	ldr	r2, [pc, #160]	; (801fe98 <mem_malloc+0x1d0>)
 801fdf6:	69bb      	ldr	r3, [r7, #24]
 801fdf8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801fdfa:	4b27      	ldr	r3, [pc, #156]	; (801fe98 <mem_malloc+0x1d0>)
 801fdfc:	681a      	ldr	r2, [r3, #0]
 801fdfe:	4b2a      	ldr	r3, [pc, #168]	; (801fea8 <mem_malloc+0x1e0>)
 801fe00:	681b      	ldr	r3, [r3, #0]
 801fe02:	429a      	cmp	r2, r3
 801fe04:	d00b      	beq.n	801fe1e <mem_malloc+0x156>
 801fe06:	4b24      	ldr	r3, [pc, #144]	; (801fe98 <mem_malloc+0x1d0>)
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	791b      	ldrb	r3, [r3, #4]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d006      	beq.n	801fe1e <mem_malloc+0x156>
 801fe10:	4b22      	ldr	r3, [pc, #136]	; (801fe9c <mem_malloc+0x1d4>)
 801fe12:	f240 32b5 	movw	r2, #949	; 0x3b5
 801fe16:	4925      	ldr	r1, [pc, #148]	; (801feac <mem_malloc+0x1e4>)
 801fe18:	4822      	ldr	r0, [pc, #136]	; (801fea4 <mem_malloc+0x1dc>)
 801fe1a:	f004 fd9d 	bl	8024958 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801fe1e:	8bba      	ldrh	r2, [r7, #28]
 801fe20:	697b      	ldr	r3, [r7, #20]
 801fe22:	4413      	add	r3, r2
 801fe24:	3308      	adds	r3, #8
 801fe26:	4a20      	ldr	r2, [pc, #128]	; (801fea8 <mem_malloc+0x1e0>)
 801fe28:	6812      	ldr	r2, [r2, #0]
 801fe2a:	4293      	cmp	r3, r2
 801fe2c:	d906      	bls.n	801fe3c <mem_malloc+0x174>
 801fe2e:	4b1b      	ldr	r3, [pc, #108]	; (801fe9c <mem_malloc+0x1d4>)
 801fe30:	f240 32b9 	movw	r2, #953	; 0x3b9
 801fe34:	491e      	ldr	r1, [pc, #120]	; (801feb0 <mem_malloc+0x1e8>)
 801fe36:	481b      	ldr	r0, [pc, #108]	; (801fea4 <mem_malloc+0x1dc>)
 801fe38:	f004 fd8e 	bl	8024958 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801fe3c:	697b      	ldr	r3, [r7, #20]
 801fe3e:	f003 0303 	and.w	r3, r3, #3
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	d006      	beq.n	801fe54 <mem_malloc+0x18c>
 801fe46:	4b15      	ldr	r3, [pc, #84]	; (801fe9c <mem_malloc+0x1d4>)
 801fe48:	f240 32bb 	movw	r2, #955	; 0x3bb
 801fe4c:	4919      	ldr	r1, [pc, #100]	; (801feb4 <mem_malloc+0x1ec>)
 801fe4e:	4815      	ldr	r0, [pc, #84]	; (801fea4 <mem_malloc+0x1dc>)
 801fe50:	f004 fd82 	bl	8024958 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801fe54:	697b      	ldr	r3, [r7, #20]
 801fe56:	f003 0303 	and.w	r3, r3, #3
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	d006      	beq.n	801fe6c <mem_malloc+0x1a4>
 801fe5e:	4b0f      	ldr	r3, [pc, #60]	; (801fe9c <mem_malloc+0x1d4>)
 801fe60:	f240 32bd 	movw	r2, #957	; 0x3bd
 801fe64:	4914      	ldr	r1, [pc, #80]	; (801feb8 <mem_malloc+0x1f0>)
 801fe66:	480f      	ldr	r0, [pc, #60]	; (801fea4 <mem_malloc+0x1dc>)
 801fe68:	f004 fd76 	bl	8024958 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801fe6c:	697b      	ldr	r3, [r7, #20]
 801fe6e:	3308      	adds	r3, #8
 801fe70:	e00e      	b.n	801fe90 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801fe72:	8bfb      	ldrh	r3, [r7, #30]
 801fe74:	4618      	mov	r0, r3
 801fe76:	f7ff fc83 	bl	801f780 <ptr_to_mem>
 801fe7a:	4603      	mov	r3, r0
 801fe7c:	881b      	ldrh	r3, [r3, #0]
 801fe7e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801fe80:	8bfa      	ldrh	r2, [r7, #30]
 801fe82:	8bbb      	ldrh	r3, [r7, #28]
 801fe84:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801fe88:	429a      	cmp	r2, r3
 801fe8a:	f4ff af44 	bcc.w	801fd16 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801fe8e:	2300      	movs	r3, #0
}
 801fe90:	4618      	mov	r0, r3
 801fe92:	3720      	adds	r7, #32
 801fe94:	46bd      	mov	sp, r7
 801fe96:	bd80      	pop	{r7, pc}
 801fe98:	20016520 	.word	0x20016520
 801fe9c:	08029cc4 	.word	0x08029cc4
 801fea0:	08029e6c 	.word	0x08029e6c
 801fea4:	08029d0c 	.word	0x08029d0c
 801fea8:	2001651c 	.word	0x2001651c
 801feac:	08029e80 	.word	0x08029e80
 801feb0:	08029e9c 	.word	0x08029e9c
 801feb4:	08029ecc 	.word	0x08029ecc
 801feb8:	08029efc 	.word	0x08029efc

0801febc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801febc:	b480      	push	{r7}
 801febe:	b085      	sub	sp, #20
 801fec0:	af00      	add	r7, sp, #0
 801fec2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	689b      	ldr	r3, [r3, #8]
 801fec8:	2200      	movs	r2, #0
 801feca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	685b      	ldr	r3, [r3, #4]
 801fed0:	3303      	adds	r3, #3
 801fed2:	f023 0303 	bic.w	r3, r3, #3
 801fed6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801fed8:	2300      	movs	r3, #0
 801feda:	60fb      	str	r3, [r7, #12]
 801fedc:	e011      	b.n	801ff02 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801fede:	687b      	ldr	r3, [r7, #4]
 801fee0:	689b      	ldr	r3, [r3, #8]
 801fee2:	681a      	ldr	r2, [r3, #0]
 801fee4:	68bb      	ldr	r3, [r7, #8]
 801fee6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	689b      	ldr	r3, [r3, #8]
 801feec:	68ba      	ldr	r2, [r7, #8]
 801feee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	881b      	ldrh	r3, [r3, #0]
 801fef4:	461a      	mov	r2, r3
 801fef6:	68bb      	ldr	r3, [r7, #8]
 801fef8:	4413      	add	r3, r2
 801fefa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801fefc:	68fb      	ldr	r3, [r7, #12]
 801fefe:	3301      	adds	r3, #1
 801ff00:	60fb      	str	r3, [r7, #12]
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	885b      	ldrh	r3, [r3, #2]
 801ff06:	461a      	mov	r2, r3
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	4293      	cmp	r3, r2
 801ff0c:	dbe7      	blt.n	801fede <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801ff0e:	bf00      	nop
 801ff10:	bf00      	nop
 801ff12:	3714      	adds	r7, #20
 801ff14:	46bd      	mov	sp, r7
 801ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff1a:	4770      	bx	lr

0801ff1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801ff1c:	b580      	push	{r7, lr}
 801ff1e:	b082      	sub	sp, #8
 801ff20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801ff22:	2300      	movs	r3, #0
 801ff24:	80fb      	strh	r3, [r7, #6]
 801ff26:	e009      	b.n	801ff3c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801ff28:	88fb      	ldrh	r3, [r7, #6]
 801ff2a:	4a08      	ldr	r2, [pc, #32]	; (801ff4c <memp_init+0x30>)
 801ff2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ff30:	4618      	mov	r0, r3
 801ff32:	f7ff ffc3 	bl	801febc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801ff36:	88fb      	ldrh	r3, [r7, #6]
 801ff38:	3301      	adds	r3, #1
 801ff3a:	80fb      	strh	r3, [r7, #6]
 801ff3c:	88fb      	ldrh	r3, [r7, #6]
 801ff3e:	2b05      	cmp	r3, #5
 801ff40:	d9f2      	bls.n	801ff28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801ff42:	bf00      	nop
 801ff44:	bf00      	nop
 801ff46:	3708      	adds	r7, #8
 801ff48:	46bd      	mov	sp, r7
 801ff4a:	bd80      	pop	{r7, pc}
 801ff4c:	0802b76c 	.word	0x0802b76c

0801ff50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801ff50:	b580      	push	{r7, lr}
 801ff52:	b084      	sub	sp, #16
 801ff54:	af00      	add	r7, sp, #0
 801ff56:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	689b      	ldr	r3, [r3, #8]
 801ff5c:	681b      	ldr	r3, [r3, #0]
 801ff5e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801ff60:	68fb      	ldr	r3, [r7, #12]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d012      	beq.n	801ff8c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801ff66:	687b      	ldr	r3, [r7, #4]
 801ff68:	689b      	ldr	r3, [r3, #8]
 801ff6a:	68fa      	ldr	r2, [r7, #12]
 801ff6c:	6812      	ldr	r2, [r2, #0]
 801ff6e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801ff70:	68fb      	ldr	r3, [r7, #12]
 801ff72:	f003 0303 	and.w	r3, r3, #3
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d006      	beq.n	801ff88 <do_memp_malloc_pool+0x38>
 801ff7a:	4b07      	ldr	r3, [pc, #28]	; (801ff98 <do_memp_malloc_pool+0x48>)
 801ff7c:	f44f 728c 	mov.w	r2, #280	; 0x118
 801ff80:	4906      	ldr	r1, [pc, #24]	; (801ff9c <do_memp_malloc_pool+0x4c>)
 801ff82:	4807      	ldr	r0, [pc, #28]	; (801ffa0 <do_memp_malloc_pool+0x50>)
 801ff84:	f004 fce8 	bl	8024958 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801ff88:	68fb      	ldr	r3, [r7, #12]
 801ff8a:	e000      	b.n	801ff8e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801ff8c:	2300      	movs	r3, #0
}
 801ff8e:	4618      	mov	r0, r3
 801ff90:	3710      	adds	r7, #16
 801ff92:	46bd      	mov	sp, r7
 801ff94:	bd80      	pop	{r7, pc}
 801ff96:	bf00      	nop
 801ff98:	08029f20 	.word	0x08029f20
 801ff9c:	08029f50 	.word	0x08029f50
 801ffa0:	08029f74 	.word	0x08029f74

0801ffa4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801ffa4:	b580      	push	{r7, lr}
 801ffa6:	b082      	sub	sp, #8
 801ffa8:	af00      	add	r7, sp, #0
 801ffaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	2b00      	cmp	r3, #0
 801ffb0:	d106      	bne.n	801ffc0 <memp_malloc_pool+0x1c>
 801ffb2:	4b0a      	ldr	r3, [pc, #40]	; (801ffdc <memp_malloc_pool+0x38>)
 801ffb4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801ffb8:	4909      	ldr	r1, [pc, #36]	; (801ffe0 <memp_malloc_pool+0x3c>)
 801ffba:	480a      	ldr	r0, [pc, #40]	; (801ffe4 <memp_malloc_pool+0x40>)
 801ffbc:	f004 fccc 	bl	8024958 <iprintf>
  if (desc == NULL) {
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d101      	bne.n	801ffca <memp_malloc_pool+0x26>
    return NULL;
 801ffc6:	2300      	movs	r3, #0
 801ffc8:	e003      	b.n	801ffd2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801ffca:	6878      	ldr	r0, [r7, #4]
 801ffcc:	f7ff ffc0 	bl	801ff50 <do_memp_malloc_pool>
 801ffd0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	3708      	adds	r7, #8
 801ffd6:	46bd      	mov	sp, r7
 801ffd8:	bd80      	pop	{r7, pc}
 801ffda:	bf00      	nop
 801ffdc:	08029f20 	.word	0x08029f20
 801ffe0:	08029f9c 	.word	0x08029f9c
 801ffe4:	08029f74 	.word	0x08029f74

0801ffe8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801ffe8:	b580      	push	{r7, lr}
 801ffea:	b084      	sub	sp, #16
 801ffec:	af00      	add	r7, sp, #0
 801ffee:	4603      	mov	r3, r0
 801fff0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801fff2:	79fb      	ldrb	r3, [r7, #7]
 801fff4:	2b05      	cmp	r3, #5
 801fff6:	d908      	bls.n	802000a <memp_malloc+0x22>
 801fff8:	4b0a      	ldr	r3, [pc, #40]	; (8020024 <memp_malloc+0x3c>)
 801fffa:	f240 1257 	movw	r2, #343	; 0x157
 801fffe:	490a      	ldr	r1, [pc, #40]	; (8020028 <memp_malloc+0x40>)
 8020000:	480a      	ldr	r0, [pc, #40]	; (802002c <memp_malloc+0x44>)
 8020002:	f004 fca9 	bl	8024958 <iprintf>
 8020006:	2300      	movs	r3, #0
 8020008:	e008      	b.n	802001c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 802000a:	79fb      	ldrb	r3, [r7, #7]
 802000c:	4a08      	ldr	r2, [pc, #32]	; (8020030 <memp_malloc+0x48>)
 802000e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020012:	4618      	mov	r0, r3
 8020014:	f7ff ff9c 	bl	801ff50 <do_memp_malloc_pool>
 8020018:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 802001a:	68fb      	ldr	r3, [r7, #12]
}
 802001c:	4618      	mov	r0, r3
 802001e:	3710      	adds	r7, #16
 8020020:	46bd      	mov	sp, r7
 8020022:	bd80      	pop	{r7, pc}
 8020024:	08029f20 	.word	0x08029f20
 8020028:	08029fb0 	.word	0x08029fb0
 802002c:	08029f74 	.word	0x08029f74
 8020030:	0802b76c 	.word	0x0802b76c

08020034 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8020034:	b580      	push	{r7, lr}
 8020036:	b084      	sub	sp, #16
 8020038:	af00      	add	r7, sp, #0
 802003a:	6078      	str	r0, [r7, #4]
 802003c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 802003e:	683b      	ldr	r3, [r7, #0]
 8020040:	f003 0303 	and.w	r3, r3, #3
 8020044:	2b00      	cmp	r3, #0
 8020046:	d006      	beq.n	8020056 <do_memp_free_pool+0x22>
 8020048:	4b0a      	ldr	r3, [pc, #40]	; (8020074 <do_memp_free_pool+0x40>)
 802004a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 802004e:	490a      	ldr	r1, [pc, #40]	; (8020078 <do_memp_free_pool+0x44>)
 8020050:	480a      	ldr	r0, [pc, #40]	; (802007c <do_memp_free_pool+0x48>)
 8020052:	f004 fc81 	bl	8024958 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8020056:	683b      	ldr	r3, [r7, #0]
 8020058:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	689b      	ldr	r3, [r3, #8]
 802005e:	681a      	ldr	r2, [r3, #0]
 8020060:	68fb      	ldr	r3, [r7, #12]
 8020062:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8020064:	687b      	ldr	r3, [r7, #4]
 8020066:	689b      	ldr	r3, [r3, #8]
 8020068:	68fa      	ldr	r2, [r7, #12]
 802006a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 802006c:	bf00      	nop
 802006e:	3710      	adds	r7, #16
 8020070:	46bd      	mov	sp, r7
 8020072:	bd80      	pop	{r7, pc}
 8020074:	08029f20 	.word	0x08029f20
 8020078:	08029fd0 	.word	0x08029fd0
 802007c:	08029f74 	.word	0x08029f74

08020080 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8020080:	b580      	push	{r7, lr}
 8020082:	b082      	sub	sp, #8
 8020084:	af00      	add	r7, sp, #0
 8020086:	6078      	str	r0, [r7, #4]
 8020088:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	2b00      	cmp	r3, #0
 802008e:	d106      	bne.n	802009e <memp_free_pool+0x1e>
 8020090:	4b0a      	ldr	r3, [pc, #40]	; (80200bc <memp_free_pool+0x3c>)
 8020092:	f240 1295 	movw	r2, #405	; 0x195
 8020096:	490a      	ldr	r1, [pc, #40]	; (80200c0 <memp_free_pool+0x40>)
 8020098:	480a      	ldr	r0, [pc, #40]	; (80200c4 <memp_free_pool+0x44>)
 802009a:	f004 fc5d 	bl	8024958 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	d007      	beq.n	80200b4 <memp_free_pool+0x34>
 80200a4:	683b      	ldr	r3, [r7, #0]
 80200a6:	2b00      	cmp	r3, #0
 80200a8:	d004      	beq.n	80200b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80200aa:	6839      	ldr	r1, [r7, #0]
 80200ac:	6878      	ldr	r0, [r7, #4]
 80200ae:	f7ff ffc1 	bl	8020034 <do_memp_free_pool>
 80200b2:	e000      	b.n	80200b6 <memp_free_pool+0x36>
    return;
 80200b4:	bf00      	nop
}
 80200b6:	3708      	adds	r7, #8
 80200b8:	46bd      	mov	sp, r7
 80200ba:	bd80      	pop	{r7, pc}
 80200bc:	08029f20 	.word	0x08029f20
 80200c0:	08029f9c 	.word	0x08029f9c
 80200c4:	08029f74 	.word	0x08029f74

080200c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80200c8:	b580      	push	{r7, lr}
 80200ca:	b082      	sub	sp, #8
 80200cc:	af00      	add	r7, sp, #0
 80200ce:	4603      	mov	r3, r0
 80200d0:	6039      	str	r1, [r7, #0]
 80200d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80200d4:	79fb      	ldrb	r3, [r7, #7]
 80200d6:	2b05      	cmp	r3, #5
 80200d8:	d907      	bls.n	80200ea <memp_free+0x22>
 80200da:	4b0c      	ldr	r3, [pc, #48]	; (802010c <memp_free+0x44>)
 80200dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80200e0:	490b      	ldr	r1, [pc, #44]	; (8020110 <memp_free+0x48>)
 80200e2:	480c      	ldr	r0, [pc, #48]	; (8020114 <memp_free+0x4c>)
 80200e4:	f004 fc38 	bl	8024958 <iprintf>
 80200e8:	e00c      	b.n	8020104 <memp_free+0x3c>

  if (mem == NULL) {
 80200ea:	683b      	ldr	r3, [r7, #0]
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d008      	beq.n	8020102 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80200f0:	79fb      	ldrb	r3, [r7, #7]
 80200f2:	4a09      	ldr	r2, [pc, #36]	; (8020118 <memp_free+0x50>)
 80200f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80200f8:	6839      	ldr	r1, [r7, #0]
 80200fa:	4618      	mov	r0, r3
 80200fc:	f7ff ff9a 	bl	8020034 <do_memp_free_pool>
 8020100:	e000      	b.n	8020104 <memp_free+0x3c>
    return;
 8020102:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8020104:	3708      	adds	r7, #8
 8020106:	46bd      	mov	sp, r7
 8020108:	bd80      	pop	{r7, pc}
 802010a:	bf00      	nop
 802010c:	08029f20 	.word	0x08029f20
 8020110:	08029ff0 	.word	0x08029ff0
 8020114:	08029f74 	.word	0x08029f74
 8020118:	0802b76c 	.word	0x0802b76c

0802011c <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 802011c:	b580      	push	{r7, lr}
 802011e:	b082      	sub	sp, #8
 8020120:	af00      	add	r7, sp, #0
 8020122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	2b00      	cmp	r3, #0
 8020128:	d105      	bne.n	8020136 <netif_loopif_init+0x1a>
 802012a:	4b0b      	ldr	r3, [pc, #44]	; (8020158 <netif_loopif_init+0x3c>)
 802012c:	2299      	movs	r2, #153	; 0x99
 802012e:	490b      	ldr	r1, [pc, #44]	; (802015c <netif_loopif_init+0x40>)
 8020130:	480b      	ldr	r0, [pc, #44]	; (8020160 <netif_loopif_init+0x44>)
 8020132:	f004 fc11 	bl	8024958 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 8020136:	687b      	ldr	r3, [r7, #4]
 8020138:	226c      	movs	r2, #108	; 0x6c
 802013a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	226f      	movs	r2, #111	; 0x6f
 8020142:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	4a06      	ldr	r2, [pc, #24]	; (8020164 <netif_loopif_init+0x48>)
 802014a:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 802014c:	2300      	movs	r3, #0
}
 802014e:	4618      	mov	r0, r3
 8020150:	3708      	adds	r7, #8
 8020152:	46bd      	mov	sp, r7
 8020154:	bd80      	pop	{r7, pc}
 8020156:	bf00      	nop
 8020158:	0802a00c 	.word	0x0802a00c
 802015c:	0802a040 	.word	0x0802a040
 8020160:	0802a064 	.word	0x0802a064
 8020164:	08020849 	.word	0x08020849

08020168 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8020168:	b580      	push	{r7, lr}
 802016a:	b088      	sub	sp, #32
 802016c:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 802016e:	4b0f      	ldr	r3, [pc, #60]	; (80201ac <netif_init+0x44>)
 8020170:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 8020172:	4b0e      	ldr	r3, [pc, #56]	; (80201ac <netif_init+0x44>)
 8020174:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 8020176:	23ff      	movs	r3, #255	; 0xff
 8020178:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 802017a:	1d3b      	adds	r3, r7, #4
 802017c:	f107 0208 	add.w	r2, r7, #8
 8020180:	f107 010c 	add.w	r1, r7, #12
 8020184:	480a      	ldr	r0, [pc, #40]	; (80201b0 <netif_init+0x48>)
 8020186:	9002      	str	r0, [sp, #8]
 8020188:	480a      	ldr	r0, [pc, #40]	; (80201b4 <netif_init+0x4c>)
 802018a:	9001      	str	r0, [sp, #4]
 802018c:	2000      	movs	r0, #0
 802018e:	9000      	str	r0, [sp, #0]
 8020190:	4809      	ldr	r0, [pc, #36]	; (80201b8 <netif_init+0x50>)
 8020192:	f000 f813 	bl	80201bc <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 8020196:	4808      	ldr	r0, [pc, #32]	; (80201b8 <netif_init+0x50>)
 8020198:	f000 fa72 	bl	8020680 <netif_set_link_up>
  netif_set_up(&loop_netif);
 802019c:	4806      	ldr	r0, [pc, #24]	; (80201b8 <netif_init+0x50>)
 802019e:	f000 f9d1 	bl	8020544 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 80201a2:	bf00      	nop
 80201a4:	3710      	adds	r7, #16
 80201a6:	46bd      	mov	sp, r7
 80201a8:	bd80      	pop	{r7, pc}
 80201aa:	bf00      	nop
 80201ac:	0100007f 	.word	0x0100007f
 80201b0:	080232e5 	.word	0x080232e5
 80201b4:	0802011d 	.word	0x0802011d
 80201b8:	200194c8 	.word	0x200194c8

080201bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80201bc:	b580      	push	{r7, lr}
 80201be:	b086      	sub	sp, #24
 80201c0:	af00      	add	r7, sp, #0
 80201c2:	60f8      	str	r0, [r7, #12]
 80201c4:	60b9      	str	r1, [r7, #8]
 80201c6:	607a      	str	r2, [r7, #4]
 80201c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80201ca:	68fb      	ldr	r3, [r7, #12]
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	d108      	bne.n	80201e2 <netif_add+0x26>
 80201d0:	4b5a      	ldr	r3, [pc, #360]	; (802033c <netif_add+0x180>)
 80201d2:	f240 1227 	movw	r2, #295	; 0x127
 80201d6:	495a      	ldr	r1, [pc, #360]	; (8020340 <netif_add+0x184>)
 80201d8:	485a      	ldr	r0, [pc, #360]	; (8020344 <netif_add+0x188>)
 80201da:	f004 fbbd 	bl	8024958 <iprintf>
 80201de:	2300      	movs	r3, #0
 80201e0:	e0a8      	b.n	8020334 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80201e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d108      	bne.n	80201fa <netif_add+0x3e>
 80201e8:	4b54      	ldr	r3, [pc, #336]	; (802033c <netif_add+0x180>)
 80201ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 80201ee:	4956      	ldr	r1, [pc, #344]	; (8020348 <netif_add+0x18c>)
 80201f0:	4854      	ldr	r0, [pc, #336]	; (8020344 <netif_add+0x188>)
 80201f2:	f004 fbb1 	bl	8024958 <iprintf>
 80201f6:	2300      	movs	r3, #0
 80201f8:	e09c      	b.n	8020334 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80201fa:	68bb      	ldr	r3, [r7, #8]
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d101      	bne.n	8020204 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8020200:	4b52      	ldr	r3, [pc, #328]	; (802034c <netif_add+0x190>)
 8020202:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	2b00      	cmp	r3, #0
 8020208:	d101      	bne.n	802020e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 802020a:	4b50      	ldr	r3, [pc, #320]	; (802034c <netif_add+0x190>)
 802020c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 802020e:	683b      	ldr	r3, [r7, #0]
 8020210:	2b00      	cmp	r3, #0
 8020212:	d101      	bne.n	8020218 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8020214:	4b4d      	ldr	r3, [pc, #308]	; (802034c <netif_add+0x190>)
 8020216:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8020218:	68fb      	ldr	r3, [r7, #12]
 802021a:	2200      	movs	r2, #0
 802021c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	2200      	movs	r2, #0
 8020222:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8020224:	68fb      	ldr	r3, [r7, #12]
 8020226:	2200      	movs	r2, #0
 8020228:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 802022a:	68fb      	ldr	r3, [r7, #12]
 802022c:	4a48      	ldr	r2, [pc, #288]	; (8020350 <netif_add+0x194>)
 802022e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8020230:	68fb      	ldr	r3, [r7, #12]
 8020232:	2200      	movs	r2, #0
 8020234:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8020236:	68fb      	ldr	r3, [r7, #12]
 8020238:	2200      	movs	r2, #0
 802023a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 802023e:	68fb      	ldr	r3, [r7, #12]
 8020240:	2200      	movs	r2, #0
 8020242:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 8020244:	68fb      	ldr	r3, [r7, #12]
 8020246:	2200      	movs	r2, #0
 8020248:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 802024a:	68fb      	ldr	r3, [r7, #12]
 802024c:	2200      	movs	r2, #0
 802024e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8020250:	68fb      	ldr	r3, [r7, #12]
 8020252:	6a3a      	ldr	r2, [r7, #32]
 8020254:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8020256:	4b3f      	ldr	r3, [pc, #252]	; (8020354 <netif_add+0x198>)
 8020258:	781a      	ldrb	r2, [r3, #0]
 802025a:	68fb      	ldr	r3, [r7, #12]
 802025c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8020260:	68fb      	ldr	r3, [r7, #12]
 8020262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020264:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8020266:	683b      	ldr	r3, [r7, #0]
 8020268:	687a      	ldr	r2, [r7, #4]
 802026a:	68b9      	ldr	r1, [r7, #8]
 802026c:	68f8      	ldr	r0, [r7, #12]
 802026e:	f000 f90f 	bl	8020490 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8020272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020274:	68f8      	ldr	r0, [r7, #12]
 8020276:	4798      	blx	r3
 8020278:	4603      	mov	r3, r0
 802027a:	2b00      	cmp	r3, #0
 802027c:	d001      	beq.n	8020282 <netif_add+0xc6>
    return NULL;
 802027e:	2300      	movs	r3, #0
 8020280:	e058      	b.n	8020334 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8020282:	68fb      	ldr	r3, [r7, #12]
 8020284:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020288:	2bff      	cmp	r3, #255	; 0xff
 802028a:	d103      	bne.n	8020294 <netif_add+0xd8>
        netif->num = 0;
 802028c:	68fb      	ldr	r3, [r7, #12]
 802028e:	2200      	movs	r2, #0
 8020290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8020294:	2300      	movs	r3, #0
 8020296:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8020298:	4b2f      	ldr	r3, [pc, #188]	; (8020358 <netif_add+0x19c>)
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	617b      	str	r3, [r7, #20]
 802029e:	e02b      	b.n	80202f8 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80202a0:	697a      	ldr	r2, [r7, #20]
 80202a2:	68fb      	ldr	r3, [r7, #12]
 80202a4:	429a      	cmp	r2, r3
 80202a6:	d106      	bne.n	80202b6 <netif_add+0xfa>
 80202a8:	4b24      	ldr	r3, [pc, #144]	; (802033c <netif_add+0x180>)
 80202aa:	f240 128b 	movw	r2, #395	; 0x18b
 80202ae:	492b      	ldr	r1, [pc, #172]	; (802035c <netif_add+0x1a0>)
 80202b0:	4824      	ldr	r0, [pc, #144]	; (8020344 <netif_add+0x188>)
 80202b2:	f004 fb51 	bl	8024958 <iprintf>
        num_netifs++;
 80202b6:	693b      	ldr	r3, [r7, #16]
 80202b8:	3301      	adds	r3, #1
 80202ba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80202bc:	693b      	ldr	r3, [r7, #16]
 80202be:	2bff      	cmp	r3, #255	; 0xff
 80202c0:	dd06      	ble.n	80202d0 <netif_add+0x114>
 80202c2:	4b1e      	ldr	r3, [pc, #120]	; (802033c <netif_add+0x180>)
 80202c4:	f240 128d 	movw	r2, #397	; 0x18d
 80202c8:	4925      	ldr	r1, [pc, #148]	; (8020360 <netif_add+0x1a4>)
 80202ca:	481e      	ldr	r0, [pc, #120]	; (8020344 <netif_add+0x188>)
 80202cc:	f004 fb44 	bl	8024958 <iprintf>
        if (netif2->num == netif->num) {
 80202d0:	697b      	ldr	r3, [r7, #20]
 80202d2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80202d6:	68fb      	ldr	r3, [r7, #12]
 80202d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80202dc:	429a      	cmp	r2, r3
 80202de:	d108      	bne.n	80202f2 <netif_add+0x136>
          netif->num++;
 80202e0:	68fb      	ldr	r3, [r7, #12]
 80202e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80202e6:	3301      	adds	r3, #1
 80202e8:	b2da      	uxtb	r2, r3
 80202ea:	68fb      	ldr	r3, [r7, #12]
 80202ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80202f0:	e005      	b.n	80202fe <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80202f2:	697b      	ldr	r3, [r7, #20]
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	617b      	str	r3, [r7, #20]
 80202f8:	697b      	ldr	r3, [r7, #20]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d1d0      	bne.n	80202a0 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 80202fe:	697b      	ldr	r3, [r7, #20]
 8020300:	2b00      	cmp	r3, #0
 8020302:	d1be      	bne.n	8020282 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 8020304:	68fb      	ldr	r3, [r7, #12]
 8020306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802030a:	2bfe      	cmp	r3, #254	; 0xfe
 802030c:	d103      	bne.n	8020316 <netif_add+0x15a>
    netif_num = 0;
 802030e:	4b11      	ldr	r3, [pc, #68]	; (8020354 <netif_add+0x198>)
 8020310:	2200      	movs	r2, #0
 8020312:	701a      	strb	r2, [r3, #0]
 8020314:	e006      	b.n	8020324 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802031c:	3301      	adds	r3, #1
 802031e:	b2da      	uxtb	r2, r3
 8020320:	4b0c      	ldr	r3, [pc, #48]	; (8020354 <netif_add+0x198>)
 8020322:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8020324:	4b0c      	ldr	r3, [pc, #48]	; (8020358 <netif_add+0x19c>)
 8020326:	681a      	ldr	r2, [r3, #0]
 8020328:	68fb      	ldr	r3, [r7, #12]
 802032a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 802032c:	4a0a      	ldr	r2, [pc, #40]	; (8020358 <netif_add+0x19c>)
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8020332:	68fb      	ldr	r3, [r7, #12]
}
 8020334:	4618      	mov	r0, r3
 8020336:	3718      	adds	r7, #24
 8020338:	46bd      	mov	sp, r7
 802033a:	bd80      	pop	{r7, pc}
 802033c:	0802a00c 	.word	0x0802a00c
 8020340:	0802a0c4 	.word	0x0802a0c4
 8020344:	0802a064 	.word	0x0802a064
 8020348:	0802a0e0 	.word	0x0802a0e0
 802034c:	0802b794 	.word	0x0802b794
 8020350:	08020867 	.word	0x08020867
 8020354:	200194c4 	.word	0x200194c4
 8020358:	200194bc 	.word	0x200194bc
 802035c:	0802a104 	.word	0x0802a104
 8020360:	0802a118 	.word	0x0802a118

08020364 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8020364:	b580      	push	{r7, lr}
 8020366:	b082      	sub	sp, #8
 8020368:	af00      	add	r7, sp, #0
 802036a:	6078      	str	r0, [r7, #4]
 802036c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 802036e:	6839      	ldr	r1, [r7, #0]
 8020370:	6878      	ldr	r0, [r7, #4]
 8020372:	f001 fe13 	bl	8021f9c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8020376:	bf00      	nop
 8020378:	3708      	adds	r7, #8
 802037a:	46bd      	mov	sp, r7
 802037c:	bd80      	pop	{r7, pc}
	...

08020380 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8020380:	b580      	push	{r7, lr}
 8020382:	b086      	sub	sp, #24
 8020384:	af00      	add	r7, sp, #0
 8020386:	60f8      	str	r0, [r7, #12]
 8020388:	60b9      	str	r1, [r7, #8]
 802038a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 802038c:	68bb      	ldr	r3, [r7, #8]
 802038e:	2b00      	cmp	r3, #0
 8020390:	d106      	bne.n	80203a0 <netif_do_set_ipaddr+0x20>
 8020392:	4b1d      	ldr	r3, [pc, #116]	; (8020408 <netif_do_set_ipaddr+0x88>)
 8020394:	f240 12cb 	movw	r2, #459	; 0x1cb
 8020398:	491c      	ldr	r1, [pc, #112]	; (802040c <netif_do_set_ipaddr+0x8c>)
 802039a:	481d      	ldr	r0, [pc, #116]	; (8020410 <netif_do_set_ipaddr+0x90>)
 802039c:	f004 fadc 	bl	8024958 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d106      	bne.n	80203b4 <netif_do_set_ipaddr+0x34>
 80203a6:	4b18      	ldr	r3, [pc, #96]	; (8020408 <netif_do_set_ipaddr+0x88>)
 80203a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80203ac:	4917      	ldr	r1, [pc, #92]	; (802040c <netif_do_set_ipaddr+0x8c>)
 80203ae:	4818      	ldr	r0, [pc, #96]	; (8020410 <netif_do_set_ipaddr+0x90>)
 80203b0:	f004 fad2 	bl	8024958 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80203b4:	68bb      	ldr	r3, [r7, #8]
 80203b6:	681a      	ldr	r2, [r3, #0]
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	3304      	adds	r3, #4
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	429a      	cmp	r2, r3
 80203c0:	d01c      	beq.n	80203fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80203c2:	68bb      	ldr	r3, [r7, #8]
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80203c8:	68fb      	ldr	r3, [r7, #12]
 80203ca:	3304      	adds	r3, #4
 80203cc:	681a      	ldr	r2, [r3, #0]
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80203d2:	f107 0314 	add.w	r3, r7, #20
 80203d6:	4619      	mov	r1, r3
 80203d8:	6878      	ldr	r0, [r7, #4]
 80203da:	f7ff ffc3 	bl	8020364 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80203de:	68bb      	ldr	r3, [r7, #8]
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	d002      	beq.n	80203ea <netif_do_set_ipaddr+0x6a>
 80203e4:	68bb      	ldr	r3, [r7, #8]
 80203e6:	681b      	ldr	r3, [r3, #0]
 80203e8:	e000      	b.n	80203ec <netif_do_set_ipaddr+0x6c>
 80203ea:	2300      	movs	r3, #0
 80203ec:	68fa      	ldr	r2, [r7, #12]
 80203ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80203f0:	2101      	movs	r1, #1
 80203f2:	68f8      	ldr	r0, [r7, #12]
 80203f4:	f000 f8d2 	bl	802059c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80203f8:	2301      	movs	r3, #1
 80203fa:	e000      	b.n	80203fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80203fc:	2300      	movs	r3, #0
}
 80203fe:	4618      	mov	r0, r3
 8020400:	3718      	adds	r7, #24
 8020402:	46bd      	mov	sp, r7
 8020404:	bd80      	pop	{r7, pc}
 8020406:	bf00      	nop
 8020408:	0802a00c 	.word	0x0802a00c
 802040c:	0802a148 	.word	0x0802a148
 8020410:	0802a064 	.word	0x0802a064

08020414 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8020414:	b480      	push	{r7}
 8020416:	b085      	sub	sp, #20
 8020418:	af00      	add	r7, sp, #0
 802041a:	60f8      	str	r0, [r7, #12]
 802041c:	60b9      	str	r1, [r7, #8]
 802041e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8020420:	68bb      	ldr	r3, [r7, #8]
 8020422:	681a      	ldr	r2, [r3, #0]
 8020424:	68fb      	ldr	r3, [r7, #12]
 8020426:	3308      	adds	r3, #8
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	429a      	cmp	r2, r3
 802042c:	d00a      	beq.n	8020444 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 802042e:	68bb      	ldr	r3, [r7, #8]
 8020430:	2b00      	cmp	r3, #0
 8020432:	d002      	beq.n	802043a <netif_do_set_netmask+0x26>
 8020434:	68bb      	ldr	r3, [r7, #8]
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	e000      	b.n	802043c <netif_do_set_netmask+0x28>
 802043a:	2300      	movs	r3, #0
 802043c:	68fa      	ldr	r2, [r7, #12]
 802043e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8020440:	2301      	movs	r3, #1
 8020442:	e000      	b.n	8020446 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8020444:	2300      	movs	r3, #0
}
 8020446:	4618      	mov	r0, r3
 8020448:	3714      	adds	r7, #20
 802044a:	46bd      	mov	sp, r7
 802044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020450:	4770      	bx	lr

08020452 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8020452:	b480      	push	{r7}
 8020454:	b085      	sub	sp, #20
 8020456:	af00      	add	r7, sp, #0
 8020458:	60f8      	str	r0, [r7, #12]
 802045a:	60b9      	str	r1, [r7, #8]
 802045c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 802045e:	68bb      	ldr	r3, [r7, #8]
 8020460:	681a      	ldr	r2, [r3, #0]
 8020462:	68fb      	ldr	r3, [r7, #12]
 8020464:	330c      	adds	r3, #12
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	429a      	cmp	r2, r3
 802046a:	d00a      	beq.n	8020482 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 802046c:	68bb      	ldr	r3, [r7, #8]
 802046e:	2b00      	cmp	r3, #0
 8020470:	d002      	beq.n	8020478 <netif_do_set_gw+0x26>
 8020472:	68bb      	ldr	r3, [r7, #8]
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	e000      	b.n	802047a <netif_do_set_gw+0x28>
 8020478:	2300      	movs	r3, #0
 802047a:	68fa      	ldr	r2, [r7, #12]
 802047c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 802047e:	2301      	movs	r3, #1
 8020480:	e000      	b.n	8020484 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8020482:	2300      	movs	r3, #0
}
 8020484:	4618      	mov	r0, r3
 8020486:	3714      	adds	r7, #20
 8020488:	46bd      	mov	sp, r7
 802048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802048e:	4770      	bx	lr

08020490 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8020490:	b580      	push	{r7, lr}
 8020492:	b088      	sub	sp, #32
 8020494:	af00      	add	r7, sp, #0
 8020496:	60f8      	str	r0, [r7, #12]
 8020498:	60b9      	str	r1, [r7, #8]
 802049a:	607a      	str	r2, [r7, #4]
 802049c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 802049e:	2300      	movs	r3, #0
 80204a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80204a2:	2300      	movs	r3, #0
 80204a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80204a6:	68bb      	ldr	r3, [r7, #8]
 80204a8:	2b00      	cmp	r3, #0
 80204aa:	d101      	bne.n	80204b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80204ac:	4b1c      	ldr	r3, [pc, #112]	; (8020520 <netif_set_addr+0x90>)
 80204ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d101      	bne.n	80204ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80204b6:	4b1a      	ldr	r3, [pc, #104]	; (8020520 <netif_set_addr+0x90>)
 80204b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80204ba:	683b      	ldr	r3, [r7, #0]
 80204bc:	2b00      	cmp	r3, #0
 80204be:	d101      	bne.n	80204c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80204c0:	4b17      	ldr	r3, [pc, #92]	; (8020520 <netif_set_addr+0x90>)
 80204c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80204c4:	68bb      	ldr	r3, [r7, #8]
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d003      	beq.n	80204d2 <netif_set_addr+0x42>
 80204ca:	68bb      	ldr	r3, [r7, #8]
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d101      	bne.n	80204d6 <netif_set_addr+0x46>
 80204d2:	2301      	movs	r3, #1
 80204d4:	e000      	b.n	80204d8 <netif_set_addr+0x48>
 80204d6:	2300      	movs	r3, #0
 80204d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80204da:	697b      	ldr	r3, [r7, #20]
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d006      	beq.n	80204ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80204e0:	f107 0310 	add.w	r3, r7, #16
 80204e4:	461a      	mov	r2, r3
 80204e6:	68b9      	ldr	r1, [r7, #8]
 80204e8:	68f8      	ldr	r0, [r7, #12]
 80204ea:	f7ff ff49 	bl	8020380 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80204ee:	69fa      	ldr	r2, [r7, #28]
 80204f0:	6879      	ldr	r1, [r7, #4]
 80204f2:	68f8      	ldr	r0, [r7, #12]
 80204f4:	f7ff ff8e 	bl	8020414 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80204f8:	69ba      	ldr	r2, [r7, #24]
 80204fa:	6839      	ldr	r1, [r7, #0]
 80204fc:	68f8      	ldr	r0, [r7, #12]
 80204fe:	f7ff ffa8 	bl	8020452 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8020502:	697b      	ldr	r3, [r7, #20]
 8020504:	2b00      	cmp	r3, #0
 8020506:	d106      	bne.n	8020516 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8020508:	f107 0310 	add.w	r3, r7, #16
 802050c:	461a      	mov	r2, r3
 802050e:	68b9      	ldr	r1, [r7, #8]
 8020510:	68f8      	ldr	r0, [r7, #12]
 8020512:	f7ff ff35 	bl	8020380 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8020516:	bf00      	nop
 8020518:	3720      	adds	r7, #32
 802051a:	46bd      	mov	sp, r7
 802051c:	bd80      	pop	{r7, pc}
 802051e:	bf00      	nop
 8020520:	0802b794 	.word	0x0802b794

08020524 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8020524:	b480      	push	{r7}
 8020526:	b083      	sub	sp, #12
 8020528:	af00      	add	r7, sp, #0
 802052a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 802052c:	4a04      	ldr	r2, [pc, #16]	; (8020540 <netif_set_default+0x1c>)
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8020532:	bf00      	nop
 8020534:	370c      	adds	r7, #12
 8020536:	46bd      	mov	sp, r7
 8020538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802053c:	4770      	bx	lr
 802053e:	bf00      	nop
 8020540:	200194c0 	.word	0x200194c0

08020544 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8020544:	b580      	push	{r7, lr}
 8020546:	b082      	sub	sp, #8
 8020548:	af00      	add	r7, sp, #0
 802054a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d107      	bne.n	8020562 <netif_set_up+0x1e>
 8020552:	4b0f      	ldr	r3, [pc, #60]	; (8020590 <netif_set_up+0x4c>)
 8020554:	f44f 7254 	mov.w	r2, #848	; 0x350
 8020558:	490e      	ldr	r1, [pc, #56]	; (8020594 <netif_set_up+0x50>)
 802055a:	480f      	ldr	r0, [pc, #60]	; (8020598 <netif_set_up+0x54>)
 802055c:	f004 f9fc 	bl	8024958 <iprintf>
 8020560:	e013      	b.n	802058a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8020562:	687b      	ldr	r3, [r7, #4]
 8020564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020568:	f003 0301 	and.w	r3, r3, #1
 802056c:	2b00      	cmp	r3, #0
 802056e:	d10c      	bne.n	802058a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020576:	f043 0301 	orr.w	r3, r3, #1
 802057a:	b2da      	uxtb	r2, r3
 802057c:	687b      	ldr	r3, [r7, #4]
 802057e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8020582:	2103      	movs	r1, #3
 8020584:	6878      	ldr	r0, [r7, #4]
 8020586:	f000 f809 	bl	802059c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 802058a:	3708      	adds	r7, #8
 802058c:	46bd      	mov	sp, r7
 802058e:	bd80      	pop	{r7, pc}
 8020590:	0802a00c 	.word	0x0802a00c
 8020594:	0802a1b8 	.word	0x0802a1b8
 8020598:	0802a064 	.word	0x0802a064

0802059c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 802059c:	b580      	push	{r7, lr}
 802059e:	b082      	sub	sp, #8
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	6078      	str	r0, [r7, #4]
 80205a4:	460b      	mov	r3, r1
 80205a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d106      	bne.n	80205bc <netif_issue_reports+0x20>
 80205ae:	4b18      	ldr	r3, [pc, #96]	; (8020610 <netif_issue_reports+0x74>)
 80205b0:	f240 326d 	movw	r2, #877	; 0x36d
 80205b4:	4917      	ldr	r1, [pc, #92]	; (8020614 <netif_issue_reports+0x78>)
 80205b6:	4818      	ldr	r0, [pc, #96]	; (8020618 <netif_issue_reports+0x7c>)
 80205b8:	f004 f9ce 	bl	8024958 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80205c2:	f003 0304 	and.w	r3, r3, #4
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d01e      	beq.n	8020608 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80205d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d017      	beq.n	8020608 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80205d8:	78fb      	ldrb	r3, [r7, #3]
 80205da:	f003 0301 	and.w	r3, r3, #1
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d013      	beq.n	802060a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80205e2:	687b      	ldr	r3, [r7, #4]
 80205e4:	3304      	adds	r3, #4
 80205e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	d00e      	beq.n	802060a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80205f2:	f003 0308 	and.w	r3, r3, #8
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	d007      	beq.n	802060a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80205fa:	687b      	ldr	r3, [r7, #4]
 80205fc:	3304      	adds	r3, #4
 80205fe:	4619      	mov	r1, r3
 8020600:	6878      	ldr	r0, [r7, #4]
 8020602:	f002 fc35 	bl	8022e70 <etharp_request>
 8020606:	e000      	b.n	802060a <netif_issue_reports+0x6e>
    return;
 8020608:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 802060a:	3708      	adds	r7, #8
 802060c:	46bd      	mov	sp, r7
 802060e:	bd80      	pop	{r7, pc}
 8020610:	0802a00c 	.word	0x0802a00c
 8020614:	0802a1d4 	.word	0x0802a1d4
 8020618:	0802a064 	.word	0x0802a064

0802061c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 802061c:	b580      	push	{r7, lr}
 802061e:	b082      	sub	sp, #8
 8020620:	af00      	add	r7, sp, #0
 8020622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	2b00      	cmp	r3, #0
 8020628:	d107      	bne.n	802063a <netif_set_down+0x1e>
 802062a:	4b12      	ldr	r3, [pc, #72]	; (8020674 <netif_set_down+0x58>)
 802062c:	f240 329b 	movw	r2, #923	; 0x39b
 8020630:	4911      	ldr	r1, [pc, #68]	; (8020678 <netif_set_down+0x5c>)
 8020632:	4812      	ldr	r0, [pc, #72]	; (802067c <netif_set_down+0x60>)
 8020634:	f004 f990 	bl	8024958 <iprintf>
 8020638:	e019      	b.n	802066e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020640:	f003 0301 	and.w	r3, r3, #1
 8020644:	2b00      	cmp	r3, #0
 8020646:	d012      	beq.n	802066e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802064e:	f023 0301 	bic.w	r3, r3, #1
 8020652:	b2da      	uxtb	r2, r3
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 802065a:	687b      	ldr	r3, [r7, #4]
 802065c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020660:	f003 0308 	and.w	r3, r3, #8
 8020664:	2b00      	cmp	r3, #0
 8020666:	d002      	beq.n	802066e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8020668:	6878      	ldr	r0, [r7, #4]
 802066a:	f001 ffbf 	bl	80225ec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 802066e:	3708      	adds	r7, #8
 8020670:	46bd      	mov	sp, r7
 8020672:	bd80      	pop	{r7, pc}
 8020674:	0802a00c 	.word	0x0802a00c
 8020678:	0802a1f8 	.word	0x0802a1f8
 802067c:	0802a064 	.word	0x0802a064

08020680 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8020680:	b580      	push	{r7, lr}
 8020682:	b082      	sub	sp, #8
 8020684:	af00      	add	r7, sp, #0
 8020686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	2b00      	cmp	r3, #0
 802068c:	d107      	bne.n	802069e <netif_set_link_up+0x1e>
 802068e:	4b13      	ldr	r3, [pc, #76]	; (80206dc <netif_set_link_up+0x5c>)
 8020690:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8020694:	4912      	ldr	r1, [pc, #72]	; (80206e0 <netif_set_link_up+0x60>)
 8020696:	4813      	ldr	r0, [pc, #76]	; (80206e4 <netif_set_link_up+0x64>)
 8020698:	f004 f95e 	bl	8024958 <iprintf>
 802069c:	e01b      	b.n	80206d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 802069e:	687b      	ldr	r3, [r7, #4]
 80206a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80206a4:	f003 0304 	and.w	r3, r3, #4
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d114      	bne.n	80206d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80206b2:	f043 0304 	orr.w	r3, r3, #4
 80206b6:	b2da      	uxtb	r2, r3
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80206be:	2103      	movs	r1, #3
 80206c0:	6878      	ldr	r0, [r7, #4]
 80206c2:	f7ff ff6b 	bl	802059c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	69db      	ldr	r3, [r3, #28]
 80206ca:	2b00      	cmp	r3, #0
 80206cc:	d003      	beq.n	80206d6 <netif_set_link_up+0x56>
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	69db      	ldr	r3, [r3, #28]
 80206d2:	6878      	ldr	r0, [r7, #4]
 80206d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80206d6:	3708      	adds	r7, #8
 80206d8:	46bd      	mov	sp, r7
 80206da:	bd80      	pop	{r7, pc}
 80206dc:	0802a00c 	.word	0x0802a00c
 80206e0:	0802a218 	.word	0x0802a218
 80206e4:	0802a064 	.word	0x0802a064

080206e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80206e8:	b580      	push	{r7, lr}
 80206ea:	b082      	sub	sp, #8
 80206ec:	af00      	add	r7, sp, #0
 80206ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d107      	bne.n	8020706 <netif_set_link_down+0x1e>
 80206f6:	4b11      	ldr	r3, [pc, #68]	; (802073c <netif_set_link_down+0x54>)
 80206f8:	f240 4206 	movw	r2, #1030	; 0x406
 80206fc:	4910      	ldr	r1, [pc, #64]	; (8020740 <netif_set_link_down+0x58>)
 80206fe:	4811      	ldr	r0, [pc, #68]	; (8020744 <netif_set_link_down+0x5c>)
 8020700:	f004 f92a 	bl	8024958 <iprintf>
 8020704:	e017      	b.n	8020736 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8020706:	687b      	ldr	r3, [r7, #4]
 8020708:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802070c:	f003 0304 	and.w	r3, r3, #4
 8020710:	2b00      	cmp	r3, #0
 8020712:	d010      	beq.n	8020736 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802071a:	f023 0304 	bic.w	r3, r3, #4
 802071e:	b2da      	uxtb	r2, r3
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	69db      	ldr	r3, [r3, #28]
 802072a:	2b00      	cmp	r3, #0
 802072c:	d003      	beq.n	8020736 <netif_set_link_down+0x4e>
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	69db      	ldr	r3, [r3, #28]
 8020732:	6878      	ldr	r0, [r7, #4]
 8020734:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8020736:	3708      	adds	r7, #8
 8020738:	46bd      	mov	sp, r7
 802073a:	bd80      	pop	{r7, pc}
 802073c:	0802a00c 	.word	0x0802a00c
 8020740:	0802a23c 	.word	0x0802a23c
 8020744:	0802a064 	.word	0x0802a064

08020748 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8020748:	b480      	push	{r7}
 802074a:	b083      	sub	sp, #12
 802074c:	af00      	add	r7, sp, #0
 802074e:	6078      	str	r0, [r7, #4]
 8020750:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	2b00      	cmp	r3, #0
 8020756:	d002      	beq.n	802075e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	683a      	ldr	r2, [r7, #0]
 802075c:	61da      	str	r2, [r3, #28]
  }
}
 802075e:	bf00      	nop
 8020760:	370c      	adds	r7, #12
 8020762:	46bd      	mov	sp, r7
 8020764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020768:	4770      	bx	lr
	...

0802076c <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 802076c:	b580      	push	{r7, lr}
 802076e:	b086      	sub	sp, #24
 8020770:	af00      	add	r7, sp, #0
 8020772:	6078      	str	r0, [r7, #4]
 8020774:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	2b00      	cmp	r3, #0
 802077a:	d106      	bne.n	802078a <netif_loop_output+0x1e>
 802077c:	4b2d      	ldr	r3, [pc, #180]	; (8020834 <netif_loop_output+0xc8>)
 802077e:	f240 424b 	movw	r2, #1099	; 0x44b
 8020782:	492d      	ldr	r1, [pc, #180]	; (8020838 <netif_loop_output+0xcc>)
 8020784:	482d      	ldr	r0, [pc, #180]	; (802083c <netif_loop_output+0xd0>)
 8020786:	f004 f8e7 	bl	8024958 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 802078a:	683b      	ldr	r3, [r7, #0]
 802078c:	2b00      	cmp	r3, #0
 802078e:	d106      	bne.n	802079e <netif_loop_output+0x32>
 8020790:	4b28      	ldr	r3, [pc, #160]	; (8020834 <netif_loop_output+0xc8>)
 8020792:	f240 424c 	movw	r2, #1100	; 0x44c
 8020796:	492a      	ldr	r1, [pc, #168]	; (8020840 <netif_loop_output+0xd4>)
 8020798:	4828      	ldr	r0, [pc, #160]	; (802083c <netif_loop_output+0xd0>)
 802079a:	f004 f8dd 	bl	8024958 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 802079e:	683b      	ldr	r3, [r7, #0]
 80207a0:	891b      	ldrh	r3, [r3, #8]
 80207a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80207a6:	4619      	mov	r1, r3
 80207a8:	200e      	movs	r0, #14
 80207aa:	f000 f8bb 	bl	8020924 <pbuf_alloc>
 80207ae:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 80207b0:	693b      	ldr	r3, [r7, #16]
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	d102      	bne.n	80207bc <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 80207b6:	f04f 33ff 	mov.w	r3, #4294967295
 80207ba:	e037      	b.n	802082c <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 80207bc:	6839      	ldr	r1, [r7, #0]
 80207be:	6938      	ldr	r0, [r7, #16]
 80207c0:	f000 fcba 	bl	8021138 <pbuf_copy>
 80207c4:	4603      	mov	r3, r0
 80207c6:	73fb      	strb	r3, [r7, #15]
 80207c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	d005      	beq.n	80207dc <netif_loop_output+0x70>
    pbuf_free(r);
 80207d0:	6938      	ldr	r0, [r7, #16]
 80207d2:	f000 fb89 	bl	8020ee8 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 80207d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80207da:	e027      	b.n	802082c <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 80207dc:	693b      	ldr	r3, [r7, #16]
 80207de:	617b      	str	r3, [r7, #20]
 80207e0:	e002      	b.n	80207e8 <netif_loop_output+0x7c>
 80207e2:	697b      	ldr	r3, [r7, #20]
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	617b      	str	r3, [r7, #20]
 80207e8:	697b      	ldr	r3, [r7, #20]
 80207ea:	681b      	ldr	r3, [r3, #0]
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	d1f8      	bne.n	80207e2 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d012      	beq.n	802081e <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 80207f8:	687b      	ldr	r3, [r7, #4]
 80207fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d106      	bne.n	802080e <netif_loop_output+0xa2>
 8020800:	4b0c      	ldr	r3, [pc, #48]	; (8020834 <netif_loop_output+0xc8>)
 8020802:	f240 4277 	movw	r2, #1143	; 0x477
 8020806:	490f      	ldr	r1, [pc, #60]	; (8020844 <netif_loop_output+0xd8>)
 8020808:	480c      	ldr	r0, [pc, #48]	; (802083c <netif_loop_output+0xd0>)
 802080a:	f004 f8a5 	bl	8024958 <iprintf>
    netif->loop_last->next = r;
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020812:	693a      	ldr	r2, [r7, #16]
 8020814:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	697a      	ldr	r2, [r7, #20]
 802081a:	63da      	str	r2, [r3, #60]	; 0x3c
 802081c:	e005      	b.n	802082a <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	693a      	ldr	r2, [r7, #16]
 8020822:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 8020824:	687b      	ldr	r3, [r7, #4]
 8020826:	697a      	ldr	r2, [r7, #20]
 8020828:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 802082a:	2300      	movs	r3, #0
}
 802082c:	4618      	mov	r0, r3
 802082e:	3718      	adds	r7, #24
 8020830:	46bd      	mov	sp, r7
 8020832:	bd80      	pop	{r7, pc}
 8020834:	0802a00c 	.word	0x0802a00c
 8020838:	0802a260 	.word	0x0802a260
 802083c:	0802a064 	.word	0x0802a064
 8020840:	0802a284 	.word	0x0802a284
 8020844:	0802a2a4 	.word	0x0802a2a4

08020848 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8020848:	b580      	push	{r7, lr}
 802084a:	b084      	sub	sp, #16
 802084c:	af00      	add	r7, sp, #0
 802084e:	60f8      	str	r0, [r7, #12]
 8020850:	60b9      	str	r1, [r7, #8]
 8020852:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8020854:	68b9      	ldr	r1, [r7, #8]
 8020856:	68f8      	ldr	r0, [r7, #12]
 8020858:	f7ff ff88 	bl	802076c <netif_loop_output>
 802085c:	4603      	mov	r3, r0
}
 802085e:	4618      	mov	r0, r3
 8020860:	3710      	adds	r7, #16
 8020862:	46bd      	mov	sp, r7
 8020864:	bd80      	pop	{r7, pc}

08020866 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8020866:	b480      	push	{r7}
 8020868:	b085      	sub	sp, #20
 802086a:	af00      	add	r7, sp, #0
 802086c:	60f8      	str	r0, [r7, #12]
 802086e:	60b9      	str	r1, [r7, #8]
 8020870:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8020872:	f06f 030b 	mvn.w	r3, #11
}
 8020876:	4618      	mov	r0, r3
 8020878:	3714      	adds	r7, #20
 802087a:	46bd      	mov	sp, r7
 802087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020880:	4770      	bx	lr
	...

08020884 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8020884:	b480      	push	{r7}
 8020886:	b085      	sub	sp, #20
 8020888:	af00      	add	r7, sp, #0
 802088a:	4603      	mov	r3, r0
 802088c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 802088e:	79fb      	ldrb	r3, [r7, #7]
 8020890:	2b00      	cmp	r3, #0
 8020892:	d013      	beq.n	80208bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8020894:	4b0d      	ldr	r3, [pc, #52]	; (80208cc <netif_get_by_index+0x48>)
 8020896:	681b      	ldr	r3, [r3, #0]
 8020898:	60fb      	str	r3, [r7, #12]
 802089a:	e00c      	b.n	80208b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 802089c:	68fb      	ldr	r3, [r7, #12]
 802089e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80208a2:	3301      	adds	r3, #1
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	79fa      	ldrb	r2, [r7, #7]
 80208a8:	429a      	cmp	r2, r3
 80208aa:	d101      	bne.n	80208b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80208ac:	68fb      	ldr	r3, [r7, #12]
 80208ae:	e006      	b.n	80208be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80208b0:	68fb      	ldr	r3, [r7, #12]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	60fb      	str	r3, [r7, #12]
 80208b6:	68fb      	ldr	r3, [r7, #12]
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	d1ef      	bne.n	802089c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80208bc:	2300      	movs	r3, #0
}
 80208be:	4618      	mov	r0, r3
 80208c0:	3714      	adds	r7, #20
 80208c2:	46bd      	mov	sp, r7
 80208c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c8:	4770      	bx	lr
 80208ca:	bf00      	nop
 80208cc:	200194bc 	.word	0x200194bc

080208d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80208d0:	b480      	push	{r7}
 80208d2:	b085      	sub	sp, #20
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	60f8      	str	r0, [r7, #12]
 80208d8:	60b9      	str	r1, [r7, #8]
 80208da:	4611      	mov	r1, r2
 80208dc:	461a      	mov	r2, r3
 80208de:	460b      	mov	r3, r1
 80208e0:	80fb      	strh	r3, [r7, #6]
 80208e2:	4613      	mov	r3, r2
 80208e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80208e6:	68fb      	ldr	r3, [r7, #12]
 80208e8:	2200      	movs	r2, #0
 80208ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	68ba      	ldr	r2, [r7, #8]
 80208f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80208f2:	68fb      	ldr	r3, [r7, #12]
 80208f4:	88fa      	ldrh	r2, [r7, #6]
 80208f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80208f8:	68fb      	ldr	r3, [r7, #12]
 80208fa:	88ba      	ldrh	r2, [r7, #4]
 80208fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80208fe:	8b3b      	ldrh	r3, [r7, #24]
 8020900:	b2da      	uxtb	r2, r3
 8020902:	68fb      	ldr	r3, [r7, #12]
 8020904:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	7f3a      	ldrb	r2, [r7, #28]
 802090a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 802090c:	68fb      	ldr	r3, [r7, #12]
 802090e:	2201      	movs	r2, #1
 8020910:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	2200      	movs	r2, #0
 8020916:	73da      	strb	r2, [r3, #15]
}
 8020918:	bf00      	nop
 802091a:	3714      	adds	r7, #20
 802091c:	46bd      	mov	sp, r7
 802091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020922:	4770      	bx	lr

08020924 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8020924:	b580      	push	{r7, lr}
 8020926:	b08c      	sub	sp, #48	; 0x30
 8020928:	af02      	add	r7, sp, #8
 802092a:	4603      	mov	r3, r0
 802092c:	71fb      	strb	r3, [r7, #7]
 802092e:	460b      	mov	r3, r1
 8020930:	80bb      	strh	r3, [r7, #4]
 8020932:	4613      	mov	r3, r2
 8020934:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8020936:	79fb      	ldrb	r3, [r7, #7]
 8020938:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 802093a:	887b      	ldrh	r3, [r7, #2]
 802093c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8020940:	d07d      	beq.n	8020a3e <pbuf_alloc+0x11a>
 8020942:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8020946:	f300 80c6 	bgt.w	8020ad6 <pbuf_alloc+0x1b2>
 802094a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 802094e:	d010      	beq.n	8020972 <pbuf_alloc+0x4e>
 8020950:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8020954:	f300 80bf 	bgt.w	8020ad6 <pbuf_alloc+0x1b2>
 8020958:	2b01      	cmp	r3, #1
 802095a:	d002      	beq.n	8020962 <pbuf_alloc+0x3e>
 802095c:	2b41      	cmp	r3, #65	; 0x41
 802095e:	f040 80ba 	bne.w	8020ad6 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8020962:	887a      	ldrh	r2, [r7, #2]
 8020964:	88bb      	ldrh	r3, [r7, #4]
 8020966:	4619      	mov	r1, r3
 8020968:	2000      	movs	r0, #0
 802096a:	f000 f8cf 	bl	8020b0c <pbuf_alloc_reference>
 802096e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8020970:	e0bb      	b.n	8020aea <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8020972:	2300      	movs	r3, #0
 8020974:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8020976:	2300      	movs	r3, #0
 8020978:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 802097a:	88bb      	ldrh	r3, [r7, #4]
 802097c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 802097e:	2005      	movs	r0, #5
 8020980:	f7ff fb32 	bl	801ffe8 <memp_malloc>
 8020984:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8020986:	693b      	ldr	r3, [r7, #16]
 8020988:	2b00      	cmp	r3, #0
 802098a:	d107      	bne.n	802099c <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 802098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802098e:	2b00      	cmp	r3, #0
 8020990:	d002      	beq.n	8020998 <pbuf_alloc+0x74>
            pbuf_free(p);
 8020992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020994:	f000 faa8 	bl	8020ee8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8020998:	2300      	movs	r3, #0
 802099a:	e0a7      	b.n	8020aec <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 802099c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802099e:	3303      	adds	r3, #3
 80209a0:	b29b      	uxth	r3, r3
 80209a2:	f023 0303 	bic.w	r3, r3, #3
 80209a6:	b29b      	uxth	r3, r3
 80209a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80209ac:	b29b      	uxth	r3, r3
 80209ae:	8b7a      	ldrh	r2, [r7, #26]
 80209b0:	4293      	cmp	r3, r2
 80209b2:	bf28      	it	cs
 80209b4:	4613      	movcs	r3, r2
 80209b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80209b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80209ba:	3310      	adds	r3, #16
 80209bc:	693a      	ldr	r2, [r7, #16]
 80209be:	4413      	add	r3, r2
 80209c0:	3303      	adds	r3, #3
 80209c2:	f023 0303 	bic.w	r3, r3, #3
 80209c6:	4618      	mov	r0, r3
 80209c8:	89f9      	ldrh	r1, [r7, #14]
 80209ca:	8b7a      	ldrh	r2, [r7, #26]
 80209cc:	2300      	movs	r3, #0
 80209ce:	9301      	str	r3, [sp, #4]
 80209d0:	887b      	ldrh	r3, [r7, #2]
 80209d2:	9300      	str	r3, [sp, #0]
 80209d4:	460b      	mov	r3, r1
 80209d6:	4601      	mov	r1, r0
 80209d8:	6938      	ldr	r0, [r7, #16]
 80209da:	f7ff ff79 	bl	80208d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80209de:	693b      	ldr	r3, [r7, #16]
 80209e0:	685b      	ldr	r3, [r3, #4]
 80209e2:	f003 0303 	and.w	r3, r3, #3
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	d006      	beq.n	80209f8 <pbuf_alloc+0xd4>
 80209ea:	4b42      	ldr	r3, [pc, #264]	; (8020af4 <pbuf_alloc+0x1d0>)
 80209ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80209f0:	4941      	ldr	r1, [pc, #260]	; (8020af8 <pbuf_alloc+0x1d4>)
 80209f2:	4842      	ldr	r0, [pc, #264]	; (8020afc <pbuf_alloc+0x1d8>)
 80209f4:	f003 ffb0 	bl	8024958 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80209f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80209fa:	3303      	adds	r3, #3
 80209fc:	f023 0303 	bic.w	r3, r3, #3
 8020a00:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8020a04:	d106      	bne.n	8020a14 <pbuf_alloc+0xf0>
 8020a06:	4b3b      	ldr	r3, [pc, #236]	; (8020af4 <pbuf_alloc+0x1d0>)
 8020a08:	f44f 7281 	mov.w	r2, #258	; 0x102
 8020a0c:	493c      	ldr	r1, [pc, #240]	; (8020b00 <pbuf_alloc+0x1dc>)
 8020a0e:	483b      	ldr	r0, [pc, #236]	; (8020afc <pbuf_alloc+0x1d8>)
 8020a10:	f003 ffa2 	bl	8024958 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8020a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d102      	bne.n	8020a20 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8020a1a:	693b      	ldr	r3, [r7, #16]
 8020a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8020a1e:	e002      	b.n	8020a26 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8020a20:	69fb      	ldr	r3, [r7, #28]
 8020a22:	693a      	ldr	r2, [r7, #16]
 8020a24:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8020a26:	693b      	ldr	r3, [r7, #16]
 8020a28:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8020a2a:	8b7a      	ldrh	r2, [r7, #26]
 8020a2c:	89fb      	ldrh	r3, [r7, #14]
 8020a2e:	1ad3      	subs	r3, r2, r3
 8020a30:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8020a32:	2300      	movs	r3, #0
 8020a34:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8020a36:	8b7b      	ldrh	r3, [r7, #26]
 8020a38:	2b00      	cmp	r3, #0
 8020a3a:	d1a0      	bne.n	802097e <pbuf_alloc+0x5a>
      break;
 8020a3c:	e055      	b.n	8020aea <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8020a3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020a40:	3303      	adds	r3, #3
 8020a42:	b29b      	uxth	r3, r3
 8020a44:	f023 0303 	bic.w	r3, r3, #3
 8020a48:	b29a      	uxth	r2, r3
 8020a4a:	88bb      	ldrh	r3, [r7, #4]
 8020a4c:	3303      	adds	r3, #3
 8020a4e:	b29b      	uxth	r3, r3
 8020a50:	f023 0303 	bic.w	r3, r3, #3
 8020a54:	b29b      	uxth	r3, r3
 8020a56:	4413      	add	r3, r2
 8020a58:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8020a5a:	8b3b      	ldrh	r3, [r7, #24]
 8020a5c:	3310      	adds	r3, #16
 8020a5e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8020a60:	8b3a      	ldrh	r2, [r7, #24]
 8020a62:	88bb      	ldrh	r3, [r7, #4]
 8020a64:	3303      	adds	r3, #3
 8020a66:	f023 0303 	bic.w	r3, r3, #3
 8020a6a:	429a      	cmp	r2, r3
 8020a6c:	d306      	bcc.n	8020a7c <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8020a6e:	8afa      	ldrh	r2, [r7, #22]
 8020a70:	88bb      	ldrh	r3, [r7, #4]
 8020a72:	3303      	adds	r3, #3
 8020a74:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8020a78:	429a      	cmp	r2, r3
 8020a7a:	d201      	bcs.n	8020a80 <pbuf_alloc+0x15c>
        return NULL;
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	e035      	b.n	8020aec <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8020a80:	8afb      	ldrh	r3, [r7, #22]
 8020a82:	4618      	mov	r0, r3
 8020a84:	f7ff f920 	bl	801fcc8 <mem_malloc>
 8020a88:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8020a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d101      	bne.n	8020a94 <pbuf_alloc+0x170>
        return NULL;
 8020a90:	2300      	movs	r3, #0
 8020a92:	e02b      	b.n	8020aec <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8020a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020a96:	3310      	adds	r3, #16
 8020a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020a9a:	4413      	add	r3, r2
 8020a9c:	3303      	adds	r3, #3
 8020a9e:	f023 0303 	bic.w	r3, r3, #3
 8020aa2:	4618      	mov	r0, r3
 8020aa4:	88b9      	ldrh	r1, [r7, #4]
 8020aa6:	88ba      	ldrh	r2, [r7, #4]
 8020aa8:	2300      	movs	r3, #0
 8020aaa:	9301      	str	r3, [sp, #4]
 8020aac:	887b      	ldrh	r3, [r7, #2]
 8020aae:	9300      	str	r3, [sp, #0]
 8020ab0:	460b      	mov	r3, r1
 8020ab2:	4601      	mov	r1, r0
 8020ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020ab6:	f7ff ff0b 	bl	80208d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8020aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020abc:	685b      	ldr	r3, [r3, #4]
 8020abe:	f003 0303 	and.w	r3, r3, #3
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	d010      	beq.n	8020ae8 <pbuf_alloc+0x1c4>
 8020ac6:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <pbuf_alloc+0x1d0>)
 8020ac8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8020acc:	490d      	ldr	r1, [pc, #52]	; (8020b04 <pbuf_alloc+0x1e0>)
 8020ace:	480b      	ldr	r0, [pc, #44]	; (8020afc <pbuf_alloc+0x1d8>)
 8020ad0:	f003 ff42 	bl	8024958 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8020ad4:	e008      	b.n	8020ae8 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8020ad6:	4b07      	ldr	r3, [pc, #28]	; (8020af4 <pbuf_alloc+0x1d0>)
 8020ad8:	f240 1227 	movw	r2, #295	; 0x127
 8020adc:	490a      	ldr	r1, [pc, #40]	; (8020b08 <pbuf_alloc+0x1e4>)
 8020ade:	4807      	ldr	r0, [pc, #28]	; (8020afc <pbuf_alloc+0x1d8>)
 8020ae0:	f003 ff3a 	bl	8024958 <iprintf>
      return NULL;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	e001      	b.n	8020aec <pbuf_alloc+0x1c8>
      break;
 8020ae8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8020aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020aec:	4618      	mov	r0, r3
 8020aee:	3728      	adds	r7, #40	; 0x28
 8020af0:	46bd      	mov	sp, r7
 8020af2:	bd80      	pop	{r7, pc}
 8020af4:	0802a344 	.word	0x0802a344
 8020af8:	0802a374 	.word	0x0802a374
 8020afc:	0802a3a4 	.word	0x0802a3a4
 8020b00:	0802a3cc 	.word	0x0802a3cc
 8020b04:	0802a400 	.word	0x0802a400
 8020b08:	0802a42c 	.word	0x0802a42c

08020b0c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8020b0c:	b580      	push	{r7, lr}
 8020b0e:	b086      	sub	sp, #24
 8020b10:	af02      	add	r7, sp, #8
 8020b12:	6078      	str	r0, [r7, #4]
 8020b14:	460b      	mov	r3, r1
 8020b16:	807b      	strh	r3, [r7, #2]
 8020b18:	4613      	mov	r3, r2
 8020b1a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8020b1c:	883b      	ldrh	r3, [r7, #0]
 8020b1e:	2b41      	cmp	r3, #65	; 0x41
 8020b20:	d009      	beq.n	8020b36 <pbuf_alloc_reference+0x2a>
 8020b22:	883b      	ldrh	r3, [r7, #0]
 8020b24:	2b01      	cmp	r3, #1
 8020b26:	d006      	beq.n	8020b36 <pbuf_alloc_reference+0x2a>
 8020b28:	4b0f      	ldr	r3, [pc, #60]	; (8020b68 <pbuf_alloc_reference+0x5c>)
 8020b2a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8020b2e:	490f      	ldr	r1, [pc, #60]	; (8020b6c <pbuf_alloc_reference+0x60>)
 8020b30:	480f      	ldr	r0, [pc, #60]	; (8020b70 <pbuf_alloc_reference+0x64>)
 8020b32:	f003 ff11 	bl	8024958 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8020b36:	2004      	movs	r0, #4
 8020b38:	f7ff fa56 	bl	801ffe8 <memp_malloc>
 8020b3c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8020b3e:	68fb      	ldr	r3, [r7, #12]
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d101      	bne.n	8020b48 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8020b44:	2300      	movs	r3, #0
 8020b46:	e00b      	b.n	8020b60 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8020b48:	8879      	ldrh	r1, [r7, #2]
 8020b4a:	887a      	ldrh	r2, [r7, #2]
 8020b4c:	2300      	movs	r3, #0
 8020b4e:	9301      	str	r3, [sp, #4]
 8020b50:	883b      	ldrh	r3, [r7, #0]
 8020b52:	9300      	str	r3, [sp, #0]
 8020b54:	460b      	mov	r3, r1
 8020b56:	6879      	ldr	r1, [r7, #4]
 8020b58:	68f8      	ldr	r0, [r7, #12]
 8020b5a:	f7ff feb9 	bl	80208d0 <pbuf_init_alloced_pbuf>
  return p;
 8020b5e:	68fb      	ldr	r3, [r7, #12]
}
 8020b60:	4618      	mov	r0, r3
 8020b62:	3710      	adds	r7, #16
 8020b64:	46bd      	mov	sp, r7
 8020b66:	bd80      	pop	{r7, pc}
 8020b68:	0802a344 	.word	0x0802a344
 8020b6c:	0802a448 	.word	0x0802a448
 8020b70:	0802a3a4 	.word	0x0802a3a4

08020b74 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b088      	sub	sp, #32
 8020b78:	af02      	add	r7, sp, #8
 8020b7a:	607b      	str	r3, [r7, #4]
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	73fb      	strb	r3, [r7, #15]
 8020b80:	460b      	mov	r3, r1
 8020b82:	81bb      	strh	r3, [r7, #12]
 8020b84:	4613      	mov	r3, r2
 8020b86:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8020b88:	7bfb      	ldrb	r3, [r7, #15]
 8020b8a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8020b8c:	8a7b      	ldrh	r3, [r7, #18]
 8020b8e:	3303      	adds	r3, #3
 8020b90:	f023 0203 	bic.w	r2, r3, #3
 8020b94:	89bb      	ldrh	r3, [r7, #12]
 8020b96:	441a      	add	r2, r3
 8020b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020b9a:	429a      	cmp	r2, r3
 8020b9c:	d901      	bls.n	8020ba2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8020b9e:	2300      	movs	r3, #0
 8020ba0:	e018      	b.n	8020bd4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8020ba2:	6a3b      	ldr	r3, [r7, #32]
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	d007      	beq.n	8020bb8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8020ba8:	8a7b      	ldrh	r3, [r7, #18]
 8020baa:	3303      	adds	r3, #3
 8020bac:	f023 0303 	bic.w	r3, r3, #3
 8020bb0:	6a3a      	ldr	r2, [r7, #32]
 8020bb2:	4413      	add	r3, r2
 8020bb4:	617b      	str	r3, [r7, #20]
 8020bb6:	e001      	b.n	8020bbc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8020bb8:	2300      	movs	r3, #0
 8020bba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8020bbc:	6878      	ldr	r0, [r7, #4]
 8020bbe:	89b9      	ldrh	r1, [r7, #12]
 8020bc0:	89ba      	ldrh	r2, [r7, #12]
 8020bc2:	2302      	movs	r3, #2
 8020bc4:	9301      	str	r3, [sp, #4]
 8020bc6:	897b      	ldrh	r3, [r7, #10]
 8020bc8:	9300      	str	r3, [sp, #0]
 8020bca:	460b      	mov	r3, r1
 8020bcc:	6979      	ldr	r1, [r7, #20]
 8020bce:	f7ff fe7f 	bl	80208d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8020bd2:	687b      	ldr	r3, [r7, #4]
}
 8020bd4:	4618      	mov	r0, r3
 8020bd6:	3718      	adds	r7, #24
 8020bd8:	46bd      	mov	sp, r7
 8020bda:	bd80      	pop	{r7, pc}

08020bdc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8020bdc:	b580      	push	{r7, lr}
 8020bde:	b084      	sub	sp, #16
 8020be0:	af00      	add	r7, sp, #0
 8020be2:	6078      	str	r0, [r7, #4]
 8020be4:	460b      	mov	r3, r1
 8020be6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8020be8:	687b      	ldr	r3, [r7, #4]
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d106      	bne.n	8020bfc <pbuf_realloc+0x20>
 8020bee:	4b3a      	ldr	r3, [pc, #232]	; (8020cd8 <pbuf_realloc+0xfc>)
 8020bf0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8020bf4:	4939      	ldr	r1, [pc, #228]	; (8020cdc <pbuf_realloc+0x100>)
 8020bf6:	483a      	ldr	r0, [pc, #232]	; (8020ce0 <pbuf_realloc+0x104>)
 8020bf8:	f003 feae 	bl	8024958 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	891b      	ldrh	r3, [r3, #8]
 8020c00:	887a      	ldrh	r2, [r7, #2]
 8020c02:	429a      	cmp	r2, r3
 8020c04:	d263      	bcs.n	8020cce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	891a      	ldrh	r2, [r3, #8]
 8020c0a:	887b      	ldrh	r3, [r7, #2]
 8020c0c:	1ad3      	subs	r3, r2, r3
 8020c0e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8020c10:	887b      	ldrh	r3, [r7, #2]
 8020c12:	817b      	strh	r3, [r7, #10]
  q = p;
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8020c18:	e018      	b.n	8020c4c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8020c1a:	68fb      	ldr	r3, [r7, #12]
 8020c1c:	895b      	ldrh	r3, [r3, #10]
 8020c1e:	897a      	ldrh	r2, [r7, #10]
 8020c20:	1ad3      	subs	r3, r2, r3
 8020c22:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8020c24:	68fb      	ldr	r3, [r7, #12]
 8020c26:	891a      	ldrh	r2, [r3, #8]
 8020c28:	893b      	ldrh	r3, [r7, #8]
 8020c2a:	1ad3      	subs	r3, r2, r3
 8020c2c:	b29a      	uxth	r2, r3
 8020c2e:	68fb      	ldr	r3, [r7, #12]
 8020c30:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8020c32:	68fb      	ldr	r3, [r7, #12]
 8020c34:	681b      	ldr	r3, [r3, #0]
 8020c36:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8020c38:	68fb      	ldr	r3, [r7, #12]
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	d106      	bne.n	8020c4c <pbuf_realloc+0x70>
 8020c3e:	4b26      	ldr	r3, [pc, #152]	; (8020cd8 <pbuf_realloc+0xfc>)
 8020c40:	f240 12af 	movw	r2, #431	; 0x1af
 8020c44:	4927      	ldr	r1, [pc, #156]	; (8020ce4 <pbuf_realloc+0x108>)
 8020c46:	4826      	ldr	r0, [pc, #152]	; (8020ce0 <pbuf_realloc+0x104>)
 8020c48:	f003 fe86 	bl	8024958 <iprintf>
  while (rem_len > q->len) {
 8020c4c:	68fb      	ldr	r3, [r7, #12]
 8020c4e:	895b      	ldrh	r3, [r3, #10]
 8020c50:	897a      	ldrh	r2, [r7, #10]
 8020c52:	429a      	cmp	r2, r3
 8020c54:	d8e1      	bhi.n	8020c1a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8020c56:	68fb      	ldr	r3, [r7, #12]
 8020c58:	7b1b      	ldrb	r3, [r3, #12]
 8020c5a:	f003 030f 	and.w	r3, r3, #15
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	d121      	bne.n	8020ca6 <pbuf_realloc+0xca>
 8020c62:	68fb      	ldr	r3, [r7, #12]
 8020c64:	895b      	ldrh	r3, [r3, #10]
 8020c66:	897a      	ldrh	r2, [r7, #10]
 8020c68:	429a      	cmp	r2, r3
 8020c6a:	d01c      	beq.n	8020ca6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	7b5b      	ldrb	r3, [r3, #13]
 8020c70:	f003 0302 	and.w	r3, r3, #2
 8020c74:	2b00      	cmp	r3, #0
 8020c76:	d116      	bne.n	8020ca6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8020c78:	68fb      	ldr	r3, [r7, #12]
 8020c7a:	685a      	ldr	r2, [r3, #4]
 8020c7c:	68fb      	ldr	r3, [r7, #12]
 8020c7e:	1ad3      	subs	r3, r2, r3
 8020c80:	b29a      	uxth	r2, r3
 8020c82:	897b      	ldrh	r3, [r7, #10]
 8020c84:	4413      	add	r3, r2
 8020c86:	b29b      	uxth	r3, r3
 8020c88:	4619      	mov	r1, r3
 8020c8a:	68f8      	ldr	r0, [r7, #12]
 8020c8c:	f7fe ff20 	bl	801fad0 <mem_trim>
 8020c90:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8020c92:	68fb      	ldr	r3, [r7, #12]
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d106      	bne.n	8020ca6 <pbuf_realloc+0xca>
 8020c98:	4b0f      	ldr	r3, [pc, #60]	; (8020cd8 <pbuf_realloc+0xfc>)
 8020c9a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8020c9e:	4912      	ldr	r1, [pc, #72]	; (8020ce8 <pbuf_realloc+0x10c>)
 8020ca0:	480f      	ldr	r0, [pc, #60]	; (8020ce0 <pbuf_realloc+0x104>)
 8020ca2:	f003 fe59 	bl	8024958 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8020ca6:	68fb      	ldr	r3, [r7, #12]
 8020ca8:	897a      	ldrh	r2, [r7, #10]
 8020caa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	895a      	ldrh	r2, [r3, #10]
 8020cb0:	68fb      	ldr	r3, [r7, #12]
 8020cb2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8020cb4:	68fb      	ldr	r3, [r7, #12]
 8020cb6:	681b      	ldr	r3, [r3, #0]
 8020cb8:	2b00      	cmp	r3, #0
 8020cba:	d004      	beq.n	8020cc6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8020cbc:	68fb      	ldr	r3, [r7, #12]
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	4618      	mov	r0, r3
 8020cc2:	f000 f911 	bl	8020ee8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8020cc6:	68fb      	ldr	r3, [r7, #12]
 8020cc8:	2200      	movs	r2, #0
 8020cca:	601a      	str	r2, [r3, #0]
 8020ccc:	e000      	b.n	8020cd0 <pbuf_realloc+0xf4>
    return;
 8020cce:	bf00      	nop

}
 8020cd0:	3710      	adds	r7, #16
 8020cd2:	46bd      	mov	sp, r7
 8020cd4:	bd80      	pop	{r7, pc}
 8020cd6:	bf00      	nop
 8020cd8:	0802a344 	.word	0x0802a344
 8020cdc:	0802a45c 	.word	0x0802a45c
 8020ce0:	0802a3a4 	.word	0x0802a3a4
 8020ce4:	0802a474 	.word	0x0802a474
 8020ce8:	0802a48c 	.word	0x0802a48c

08020cec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8020cec:	b580      	push	{r7, lr}
 8020cee:	b086      	sub	sp, #24
 8020cf0:	af00      	add	r7, sp, #0
 8020cf2:	60f8      	str	r0, [r7, #12]
 8020cf4:	60b9      	str	r1, [r7, #8]
 8020cf6:	4613      	mov	r3, r2
 8020cf8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8020cfa:	68fb      	ldr	r3, [r7, #12]
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	d106      	bne.n	8020d0e <pbuf_add_header_impl+0x22>
 8020d00:	4b2b      	ldr	r3, [pc, #172]	; (8020db0 <pbuf_add_header_impl+0xc4>)
 8020d02:	f240 12df 	movw	r2, #479	; 0x1df
 8020d06:	492b      	ldr	r1, [pc, #172]	; (8020db4 <pbuf_add_header_impl+0xc8>)
 8020d08:	482b      	ldr	r0, [pc, #172]	; (8020db8 <pbuf_add_header_impl+0xcc>)
 8020d0a:	f003 fe25 	bl	8024958 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8020d0e:	68fb      	ldr	r3, [r7, #12]
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	d003      	beq.n	8020d1c <pbuf_add_header_impl+0x30>
 8020d14:	68bb      	ldr	r3, [r7, #8]
 8020d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020d1a:	d301      	bcc.n	8020d20 <pbuf_add_header_impl+0x34>
    return 1;
 8020d1c:	2301      	movs	r3, #1
 8020d1e:	e043      	b.n	8020da8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8020d20:	68bb      	ldr	r3, [r7, #8]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d101      	bne.n	8020d2a <pbuf_add_header_impl+0x3e>
    return 0;
 8020d26:	2300      	movs	r3, #0
 8020d28:	e03e      	b.n	8020da8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8020d2a:	68bb      	ldr	r3, [r7, #8]
 8020d2c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8020d2e:	68fb      	ldr	r3, [r7, #12]
 8020d30:	891a      	ldrh	r2, [r3, #8]
 8020d32:	8a7b      	ldrh	r3, [r7, #18]
 8020d34:	4413      	add	r3, r2
 8020d36:	b29b      	uxth	r3, r3
 8020d38:	8a7a      	ldrh	r2, [r7, #18]
 8020d3a:	429a      	cmp	r2, r3
 8020d3c:	d901      	bls.n	8020d42 <pbuf_add_header_impl+0x56>
    return 1;
 8020d3e:	2301      	movs	r3, #1
 8020d40:	e032      	b.n	8020da8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8020d42:	68fb      	ldr	r3, [r7, #12]
 8020d44:	7b1b      	ldrb	r3, [r3, #12]
 8020d46:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8020d48:	8a3b      	ldrh	r3, [r7, #16]
 8020d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d00c      	beq.n	8020d6c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8020d52:	68fb      	ldr	r3, [r7, #12]
 8020d54:	685a      	ldr	r2, [r3, #4]
 8020d56:	68bb      	ldr	r3, [r7, #8]
 8020d58:	425b      	negs	r3, r3
 8020d5a:	4413      	add	r3, r2
 8020d5c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8020d5e:	68fb      	ldr	r3, [r7, #12]
 8020d60:	3310      	adds	r3, #16
 8020d62:	697a      	ldr	r2, [r7, #20]
 8020d64:	429a      	cmp	r2, r3
 8020d66:	d20d      	bcs.n	8020d84 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8020d68:	2301      	movs	r3, #1
 8020d6a:	e01d      	b.n	8020da8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8020d6c:	79fb      	ldrb	r3, [r7, #7]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d006      	beq.n	8020d80 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	685a      	ldr	r2, [r3, #4]
 8020d76:	68bb      	ldr	r3, [r7, #8]
 8020d78:	425b      	negs	r3, r3
 8020d7a:	4413      	add	r3, r2
 8020d7c:	617b      	str	r3, [r7, #20]
 8020d7e:	e001      	b.n	8020d84 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8020d80:	2301      	movs	r3, #1
 8020d82:	e011      	b.n	8020da8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8020d84:	68fb      	ldr	r3, [r7, #12]
 8020d86:	697a      	ldr	r2, [r7, #20]
 8020d88:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8020d8a:	68fb      	ldr	r3, [r7, #12]
 8020d8c:	895a      	ldrh	r2, [r3, #10]
 8020d8e:	8a7b      	ldrh	r3, [r7, #18]
 8020d90:	4413      	add	r3, r2
 8020d92:	b29a      	uxth	r2, r3
 8020d94:	68fb      	ldr	r3, [r7, #12]
 8020d96:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8020d98:	68fb      	ldr	r3, [r7, #12]
 8020d9a:	891a      	ldrh	r2, [r3, #8]
 8020d9c:	8a7b      	ldrh	r3, [r7, #18]
 8020d9e:	4413      	add	r3, r2
 8020da0:	b29a      	uxth	r2, r3
 8020da2:	68fb      	ldr	r3, [r7, #12]
 8020da4:	811a      	strh	r2, [r3, #8]


  return 0;
 8020da6:	2300      	movs	r3, #0
}
 8020da8:	4618      	mov	r0, r3
 8020daa:	3718      	adds	r7, #24
 8020dac:	46bd      	mov	sp, r7
 8020dae:	bd80      	pop	{r7, pc}
 8020db0:	0802a344 	.word	0x0802a344
 8020db4:	0802a4a8 	.word	0x0802a4a8
 8020db8:	0802a3a4 	.word	0x0802a3a4

08020dbc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8020dbc:	b580      	push	{r7, lr}
 8020dbe:	b082      	sub	sp, #8
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	6078      	str	r0, [r7, #4]
 8020dc4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8020dc6:	2200      	movs	r2, #0
 8020dc8:	6839      	ldr	r1, [r7, #0]
 8020dca:	6878      	ldr	r0, [r7, #4]
 8020dcc:	f7ff ff8e 	bl	8020cec <pbuf_add_header_impl>
 8020dd0:	4603      	mov	r3, r0
}
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	3708      	adds	r7, #8
 8020dd6:	46bd      	mov	sp, r7
 8020dd8:	bd80      	pop	{r7, pc}
	...

08020ddc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8020ddc:	b580      	push	{r7, lr}
 8020dde:	b084      	sub	sp, #16
 8020de0:	af00      	add	r7, sp, #0
 8020de2:	6078      	str	r0, [r7, #4]
 8020de4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	d106      	bne.n	8020dfa <pbuf_remove_header+0x1e>
 8020dec:	4b20      	ldr	r3, [pc, #128]	; (8020e70 <pbuf_remove_header+0x94>)
 8020dee:	f240 224b 	movw	r2, #587	; 0x24b
 8020df2:	4920      	ldr	r1, [pc, #128]	; (8020e74 <pbuf_remove_header+0x98>)
 8020df4:	4820      	ldr	r0, [pc, #128]	; (8020e78 <pbuf_remove_header+0x9c>)
 8020df6:	f003 fdaf 	bl	8024958 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	d003      	beq.n	8020e08 <pbuf_remove_header+0x2c>
 8020e00:	683b      	ldr	r3, [r7, #0]
 8020e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020e06:	d301      	bcc.n	8020e0c <pbuf_remove_header+0x30>
    return 1;
 8020e08:	2301      	movs	r3, #1
 8020e0a:	e02c      	b.n	8020e66 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8020e0c:	683b      	ldr	r3, [r7, #0]
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d101      	bne.n	8020e16 <pbuf_remove_header+0x3a>
    return 0;
 8020e12:	2300      	movs	r3, #0
 8020e14:	e027      	b.n	8020e66 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8020e16:	683b      	ldr	r3, [r7, #0]
 8020e18:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	895b      	ldrh	r3, [r3, #10]
 8020e1e:	89fa      	ldrh	r2, [r7, #14]
 8020e20:	429a      	cmp	r2, r3
 8020e22:	d908      	bls.n	8020e36 <pbuf_remove_header+0x5a>
 8020e24:	4b12      	ldr	r3, [pc, #72]	; (8020e70 <pbuf_remove_header+0x94>)
 8020e26:	f240 2255 	movw	r2, #597	; 0x255
 8020e2a:	4914      	ldr	r1, [pc, #80]	; (8020e7c <pbuf_remove_header+0xa0>)
 8020e2c:	4812      	ldr	r0, [pc, #72]	; (8020e78 <pbuf_remove_header+0x9c>)
 8020e2e:	f003 fd93 	bl	8024958 <iprintf>
 8020e32:	2301      	movs	r3, #1
 8020e34:	e017      	b.n	8020e66 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	685b      	ldr	r3, [r3, #4]
 8020e3a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	685a      	ldr	r2, [r3, #4]
 8020e40:	683b      	ldr	r3, [r7, #0]
 8020e42:	441a      	add	r2, r3
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	895a      	ldrh	r2, [r3, #10]
 8020e4c:	89fb      	ldrh	r3, [r7, #14]
 8020e4e:	1ad3      	subs	r3, r2, r3
 8020e50:	b29a      	uxth	r2, r3
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	891a      	ldrh	r2, [r3, #8]
 8020e5a:	89fb      	ldrh	r3, [r7, #14]
 8020e5c:	1ad3      	subs	r3, r2, r3
 8020e5e:	b29a      	uxth	r2, r3
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8020e64:	2300      	movs	r3, #0
}
 8020e66:	4618      	mov	r0, r3
 8020e68:	3710      	adds	r7, #16
 8020e6a:	46bd      	mov	sp, r7
 8020e6c:	bd80      	pop	{r7, pc}
 8020e6e:	bf00      	nop
 8020e70:	0802a344 	.word	0x0802a344
 8020e74:	0802a4a8 	.word	0x0802a4a8
 8020e78:	0802a3a4 	.word	0x0802a3a4
 8020e7c:	0802a4b4 	.word	0x0802a4b4

08020e80 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8020e80:	b580      	push	{r7, lr}
 8020e82:	b082      	sub	sp, #8
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	6078      	str	r0, [r7, #4]
 8020e88:	460b      	mov	r3, r1
 8020e8a:	807b      	strh	r3, [r7, #2]
 8020e8c:	4613      	mov	r3, r2
 8020e8e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8020e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	da08      	bge.n	8020eaa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8020e98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8020e9c:	425b      	negs	r3, r3
 8020e9e:	4619      	mov	r1, r3
 8020ea0:	6878      	ldr	r0, [r7, #4]
 8020ea2:	f7ff ff9b 	bl	8020ddc <pbuf_remove_header>
 8020ea6:	4603      	mov	r3, r0
 8020ea8:	e007      	b.n	8020eba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8020eaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8020eae:	787a      	ldrb	r2, [r7, #1]
 8020eb0:	4619      	mov	r1, r3
 8020eb2:	6878      	ldr	r0, [r7, #4]
 8020eb4:	f7ff ff1a 	bl	8020cec <pbuf_add_header_impl>
 8020eb8:	4603      	mov	r3, r0
  }
}
 8020eba:	4618      	mov	r0, r3
 8020ebc:	3708      	adds	r7, #8
 8020ebe:	46bd      	mov	sp, r7
 8020ec0:	bd80      	pop	{r7, pc}

08020ec2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8020ec2:	b580      	push	{r7, lr}
 8020ec4:	b082      	sub	sp, #8
 8020ec6:	af00      	add	r7, sp, #0
 8020ec8:	6078      	str	r0, [r7, #4]
 8020eca:	460b      	mov	r3, r1
 8020ecc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8020ece:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8020ed2:	2201      	movs	r2, #1
 8020ed4:	4619      	mov	r1, r3
 8020ed6:	6878      	ldr	r0, [r7, #4]
 8020ed8:	f7ff ffd2 	bl	8020e80 <pbuf_header_impl>
 8020edc:	4603      	mov	r3, r0
}
 8020ede:	4618      	mov	r0, r3
 8020ee0:	3708      	adds	r7, #8
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	bd80      	pop	{r7, pc}
	...

08020ee8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8020ee8:	b580      	push	{r7, lr}
 8020eea:	b086      	sub	sp, #24
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d10b      	bne.n	8020f0e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d106      	bne.n	8020f0a <pbuf_free+0x22>
 8020efc:	4b38      	ldr	r3, [pc, #224]	; (8020fe0 <pbuf_free+0xf8>)
 8020efe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8020f02:	4938      	ldr	r1, [pc, #224]	; (8020fe4 <pbuf_free+0xfc>)
 8020f04:	4838      	ldr	r0, [pc, #224]	; (8020fe8 <pbuf_free+0x100>)
 8020f06:	f003 fd27 	bl	8024958 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	e063      	b.n	8020fd6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8020f0e:	2300      	movs	r3, #0
 8020f10:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8020f12:	e05c      	b.n	8020fce <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	7b9b      	ldrb	r3, [r3, #14]
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d106      	bne.n	8020f2a <pbuf_free+0x42>
 8020f1c:	4b30      	ldr	r3, [pc, #192]	; (8020fe0 <pbuf_free+0xf8>)
 8020f1e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8020f22:	4932      	ldr	r1, [pc, #200]	; (8020fec <pbuf_free+0x104>)
 8020f24:	4830      	ldr	r0, [pc, #192]	; (8020fe8 <pbuf_free+0x100>)
 8020f26:	f003 fd17 	bl	8024958 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	7b9b      	ldrb	r3, [r3, #14]
 8020f2e:	3b01      	subs	r3, #1
 8020f30:	b2da      	uxtb	r2, r3
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	739a      	strb	r2, [r3, #14]
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	7b9b      	ldrb	r3, [r3, #14]
 8020f3a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8020f3c:	7dbb      	ldrb	r3, [r7, #22]
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	d143      	bne.n	8020fca <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	7b1b      	ldrb	r3, [r3, #12]
 8020f4c:	f003 030f 	and.w	r3, r3, #15
 8020f50:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	7b5b      	ldrb	r3, [r3, #13]
 8020f56:	f003 0302 	and.w	r3, r3, #2
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d011      	beq.n	8020f82 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8020f5e:	687b      	ldr	r3, [r7, #4]
 8020f60:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8020f62:	68bb      	ldr	r3, [r7, #8]
 8020f64:	691b      	ldr	r3, [r3, #16]
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	d106      	bne.n	8020f78 <pbuf_free+0x90>
 8020f6a:	4b1d      	ldr	r3, [pc, #116]	; (8020fe0 <pbuf_free+0xf8>)
 8020f6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8020f70:	491f      	ldr	r1, [pc, #124]	; (8020ff0 <pbuf_free+0x108>)
 8020f72:	481d      	ldr	r0, [pc, #116]	; (8020fe8 <pbuf_free+0x100>)
 8020f74:	f003 fcf0 	bl	8024958 <iprintf>
        pc->custom_free_function(p);
 8020f78:	68bb      	ldr	r3, [r7, #8]
 8020f7a:	691b      	ldr	r3, [r3, #16]
 8020f7c:	6878      	ldr	r0, [r7, #4]
 8020f7e:	4798      	blx	r3
 8020f80:	e01d      	b.n	8020fbe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8020f82:	7bfb      	ldrb	r3, [r7, #15]
 8020f84:	2b02      	cmp	r3, #2
 8020f86:	d104      	bne.n	8020f92 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8020f88:	6879      	ldr	r1, [r7, #4]
 8020f8a:	2005      	movs	r0, #5
 8020f8c:	f7ff f89c 	bl	80200c8 <memp_free>
 8020f90:	e015      	b.n	8020fbe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8020f92:	7bfb      	ldrb	r3, [r7, #15]
 8020f94:	2b01      	cmp	r3, #1
 8020f96:	d104      	bne.n	8020fa2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8020f98:	6879      	ldr	r1, [r7, #4]
 8020f9a:	2004      	movs	r0, #4
 8020f9c:	f7ff f894 	bl	80200c8 <memp_free>
 8020fa0:	e00d      	b.n	8020fbe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8020fa2:	7bfb      	ldrb	r3, [r7, #15]
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d103      	bne.n	8020fb0 <pbuf_free+0xc8>
          mem_free(p);
 8020fa8:	6878      	ldr	r0, [r7, #4]
 8020faa:	f7fe fd27 	bl	801f9fc <mem_free>
 8020fae:	e006      	b.n	8020fbe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8020fb0:	4b0b      	ldr	r3, [pc, #44]	; (8020fe0 <pbuf_free+0xf8>)
 8020fb2:	f240 320f 	movw	r2, #783	; 0x30f
 8020fb6:	490f      	ldr	r1, [pc, #60]	; (8020ff4 <pbuf_free+0x10c>)
 8020fb8:	480b      	ldr	r0, [pc, #44]	; (8020fe8 <pbuf_free+0x100>)
 8020fba:	f003 fccd 	bl	8024958 <iprintf>
        }
      }
      count++;
 8020fbe:	7dfb      	ldrb	r3, [r7, #23]
 8020fc0:	3301      	adds	r3, #1
 8020fc2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8020fc4:	693b      	ldr	r3, [r7, #16]
 8020fc6:	607b      	str	r3, [r7, #4]
 8020fc8:	e001      	b.n	8020fce <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8020fca:	2300      	movs	r3, #0
 8020fcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8020fce:	687b      	ldr	r3, [r7, #4]
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	d19f      	bne.n	8020f14 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8020fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	3718      	adds	r7, #24
 8020fda:	46bd      	mov	sp, r7
 8020fdc:	bd80      	pop	{r7, pc}
 8020fde:	bf00      	nop
 8020fe0:	0802a344 	.word	0x0802a344
 8020fe4:	0802a4a8 	.word	0x0802a4a8
 8020fe8:	0802a3a4 	.word	0x0802a3a4
 8020fec:	0802a4d4 	.word	0x0802a4d4
 8020ff0:	0802a4ec 	.word	0x0802a4ec
 8020ff4:	0802a510 	.word	0x0802a510

08020ff8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8020ff8:	b480      	push	{r7}
 8020ffa:	b085      	sub	sp, #20
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8021000:	2300      	movs	r3, #0
 8021002:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8021004:	e005      	b.n	8021012 <pbuf_clen+0x1a>
    ++len;
 8021006:	89fb      	ldrh	r3, [r7, #14]
 8021008:	3301      	adds	r3, #1
 802100a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	681b      	ldr	r3, [r3, #0]
 8021010:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8021012:	687b      	ldr	r3, [r7, #4]
 8021014:	2b00      	cmp	r3, #0
 8021016:	d1f6      	bne.n	8021006 <pbuf_clen+0xe>
  }
  return len;
 8021018:	89fb      	ldrh	r3, [r7, #14]
}
 802101a:	4618      	mov	r0, r3
 802101c:	3714      	adds	r7, #20
 802101e:	46bd      	mov	sp, r7
 8021020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021024:	4770      	bx	lr
	...

08021028 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8021028:	b580      	push	{r7, lr}
 802102a:	b082      	sub	sp, #8
 802102c:	af00      	add	r7, sp, #0
 802102e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	2b00      	cmp	r3, #0
 8021034:	d010      	beq.n	8021058 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	7b9b      	ldrb	r3, [r3, #14]
 802103a:	3301      	adds	r3, #1
 802103c:	b2da      	uxtb	r2, r3
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	7b9b      	ldrb	r3, [r3, #14]
 8021046:	2b00      	cmp	r3, #0
 8021048:	d106      	bne.n	8021058 <pbuf_ref+0x30>
 802104a:	4b05      	ldr	r3, [pc, #20]	; (8021060 <pbuf_ref+0x38>)
 802104c:	f240 3242 	movw	r2, #834	; 0x342
 8021050:	4904      	ldr	r1, [pc, #16]	; (8021064 <pbuf_ref+0x3c>)
 8021052:	4805      	ldr	r0, [pc, #20]	; (8021068 <pbuf_ref+0x40>)
 8021054:	f003 fc80 	bl	8024958 <iprintf>
  }
}
 8021058:	bf00      	nop
 802105a:	3708      	adds	r7, #8
 802105c:	46bd      	mov	sp, r7
 802105e:	bd80      	pop	{r7, pc}
 8021060:	0802a344 	.word	0x0802a344
 8021064:	0802a524 	.word	0x0802a524
 8021068:	0802a3a4 	.word	0x0802a3a4

0802106c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 802106c:	b580      	push	{r7, lr}
 802106e:	b084      	sub	sp, #16
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
 8021074:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8021076:	687b      	ldr	r3, [r7, #4]
 8021078:	2b00      	cmp	r3, #0
 802107a:	d002      	beq.n	8021082 <pbuf_cat+0x16>
 802107c:	683b      	ldr	r3, [r7, #0]
 802107e:	2b00      	cmp	r3, #0
 8021080:	d107      	bne.n	8021092 <pbuf_cat+0x26>
 8021082:	4b20      	ldr	r3, [pc, #128]	; (8021104 <pbuf_cat+0x98>)
 8021084:	f240 3259 	movw	r2, #857	; 0x359
 8021088:	491f      	ldr	r1, [pc, #124]	; (8021108 <pbuf_cat+0x9c>)
 802108a:	4820      	ldr	r0, [pc, #128]	; (802110c <pbuf_cat+0xa0>)
 802108c:	f003 fc64 	bl	8024958 <iprintf>
 8021090:	e034      	b.n	80210fc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	60fb      	str	r3, [r7, #12]
 8021096:	e00a      	b.n	80210ae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8021098:	68fb      	ldr	r3, [r7, #12]
 802109a:	891a      	ldrh	r2, [r3, #8]
 802109c:	683b      	ldr	r3, [r7, #0]
 802109e:	891b      	ldrh	r3, [r3, #8]
 80210a0:	4413      	add	r3, r2
 80210a2:	b29a      	uxth	r2, r3
 80210a4:	68fb      	ldr	r3, [r7, #12]
 80210a6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80210a8:	68fb      	ldr	r3, [r7, #12]
 80210aa:	681b      	ldr	r3, [r3, #0]
 80210ac:	60fb      	str	r3, [r7, #12]
 80210ae:	68fb      	ldr	r3, [r7, #12]
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d1f0      	bne.n	8021098 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80210b6:	68fb      	ldr	r3, [r7, #12]
 80210b8:	891a      	ldrh	r2, [r3, #8]
 80210ba:	68fb      	ldr	r3, [r7, #12]
 80210bc:	895b      	ldrh	r3, [r3, #10]
 80210be:	429a      	cmp	r2, r3
 80210c0:	d006      	beq.n	80210d0 <pbuf_cat+0x64>
 80210c2:	4b10      	ldr	r3, [pc, #64]	; (8021104 <pbuf_cat+0x98>)
 80210c4:	f240 3262 	movw	r2, #866	; 0x362
 80210c8:	4911      	ldr	r1, [pc, #68]	; (8021110 <pbuf_cat+0xa4>)
 80210ca:	4810      	ldr	r0, [pc, #64]	; (802110c <pbuf_cat+0xa0>)
 80210cc:	f003 fc44 	bl	8024958 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	681b      	ldr	r3, [r3, #0]
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d006      	beq.n	80210e6 <pbuf_cat+0x7a>
 80210d8:	4b0a      	ldr	r3, [pc, #40]	; (8021104 <pbuf_cat+0x98>)
 80210da:	f240 3263 	movw	r2, #867	; 0x363
 80210de:	490d      	ldr	r1, [pc, #52]	; (8021114 <pbuf_cat+0xa8>)
 80210e0:	480a      	ldr	r0, [pc, #40]	; (802110c <pbuf_cat+0xa0>)
 80210e2:	f003 fc39 	bl	8024958 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80210e6:	68fb      	ldr	r3, [r7, #12]
 80210e8:	891a      	ldrh	r2, [r3, #8]
 80210ea:	683b      	ldr	r3, [r7, #0]
 80210ec:	891b      	ldrh	r3, [r3, #8]
 80210ee:	4413      	add	r3, r2
 80210f0:	b29a      	uxth	r2, r3
 80210f2:	68fb      	ldr	r3, [r7, #12]
 80210f4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80210f6:	68fb      	ldr	r3, [r7, #12]
 80210f8:	683a      	ldr	r2, [r7, #0]
 80210fa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80210fc:	3710      	adds	r7, #16
 80210fe:	46bd      	mov	sp, r7
 8021100:	bd80      	pop	{r7, pc}
 8021102:	bf00      	nop
 8021104:	0802a344 	.word	0x0802a344
 8021108:	0802a538 	.word	0x0802a538
 802110c:	0802a3a4 	.word	0x0802a3a4
 8021110:	0802a570 	.word	0x0802a570
 8021114:	0802a5a0 	.word	0x0802a5a0

08021118 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8021118:	b580      	push	{r7, lr}
 802111a:	b082      	sub	sp, #8
 802111c:	af00      	add	r7, sp, #0
 802111e:	6078      	str	r0, [r7, #4]
 8021120:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8021122:	6839      	ldr	r1, [r7, #0]
 8021124:	6878      	ldr	r0, [r7, #4]
 8021126:	f7ff ffa1 	bl	802106c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 802112a:	6838      	ldr	r0, [r7, #0]
 802112c:	f7ff ff7c 	bl	8021028 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8021130:	bf00      	nop
 8021132:	3708      	adds	r7, #8
 8021134:	46bd      	mov	sp, r7
 8021136:	bd80      	pop	{r7, pc}

08021138 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8021138:	b580      	push	{r7, lr}
 802113a:	b086      	sub	sp, #24
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8021142:	2300      	movs	r3, #0
 8021144:	617b      	str	r3, [r7, #20]
 8021146:	2300      	movs	r3, #0
 8021148:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 802114a:	687b      	ldr	r3, [r7, #4]
 802114c:	2b00      	cmp	r3, #0
 802114e:	d008      	beq.n	8021162 <pbuf_copy+0x2a>
 8021150:	683b      	ldr	r3, [r7, #0]
 8021152:	2b00      	cmp	r3, #0
 8021154:	d005      	beq.n	8021162 <pbuf_copy+0x2a>
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	891a      	ldrh	r2, [r3, #8]
 802115a:	683b      	ldr	r3, [r7, #0]
 802115c:	891b      	ldrh	r3, [r3, #8]
 802115e:	429a      	cmp	r2, r3
 8021160:	d209      	bcs.n	8021176 <pbuf_copy+0x3e>
 8021162:	4b57      	ldr	r3, [pc, #348]	; (80212c0 <pbuf_copy+0x188>)
 8021164:	f240 32c9 	movw	r2, #969	; 0x3c9
 8021168:	4956      	ldr	r1, [pc, #344]	; (80212c4 <pbuf_copy+0x18c>)
 802116a:	4857      	ldr	r0, [pc, #348]	; (80212c8 <pbuf_copy+0x190>)
 802116c:	f003 fbf4 	bl	8024958 <iprintf>
 8021170:	f06f 030f 	mvn.w	r3, #15
 8021174:	e09f      	b.n	80212b6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	895b      	ldrh	r3, [r3, #10]
 802117a:	461a      	mov	r2, r3
 802117c:	697b      	ldr	r3, [r7, #20]
 802117e:	1ad2      	subs	r2, r2, r3
 8021180:	683b      	ldr	r3, [r7, #0]
 8021182:	895b      	ldrh	r3, [r3, #10]
 8021184:	4619      	mov	r1, r3
 8021186:	693b      	ldr	r3, [r7, #16]
 8021188:	1acb      	subs	r3, r1, r3
 802118a:	429a      	cmp	r2, r3
 802118c:	d306      	bcc.n	802119c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 802118e:	683b      	ldr	r3, [r7, #0]
 8021190:	895b      	ldrh	r3, [r3, #10]
 8021192:	461a      	mov	r2, r3
 8021194:	693b      	ldr	r3, [r7, #16]
 8021196:	1ad3      	subs	r3, r2, r3
 8021198:	60fb      	str	r3, [r7, #12]
 802119a:	e005      	b.n	80211a8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	895b      	ldrh	r3, [r3, #10]
 80211a0:	461a      	mov	r2, r3
 80211a2:	697b      	ldr	r3, [r7, #20]
 80211a4:	1ad3      	subs	r3, r2, r3
 80211a6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	685a      	ldr	r2, [r3, #4]
 80211ac:	697b      	ldr	r3, [r7, #20]
 80211ae:	18d0      	adds	r0, r2, r3
 80211b0:	683b      	ldr	r3, [r7, #0]
 80211b2:	685a      	ldr	r2, [r3, #4]
 80211b4:	693b      	ldr	r3, [r7, #16]
 80211b6:	4413      	add	r3, r2
 80211b8:	68fa      	ldr	r2, [r7, #12]
 80211ba:	4619      	mov	r1, r3
 80211bc:	f003 fabc 	bl	8024738 <memcpy>
    offset_to += len;
 80211c0:	697a      	ldr	r2, [r7, #20]
 80211c2:	68fb      	ldr	r3, [r7, #12]
 80211c4:	4413      	add	r3, r2
 80211c6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80211c8:	693a      	ldr	r2, [r7, #16]
 80211ca:	68fb      	ldr	r3, [r7, #12]
 80211cc:	4413      	add	r3, r2
 80211ce:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	895b      	ldrh	r3, [r3, #10]
 80211d4:	461a      	mov	r2, r3
 80211d6:	697b      	ldr	r3, [r7, #20]
 80211d8:	4293      	cmp	r3, r2
 80211da:	d906      	bls.n	80211ea <pbuf_copy+0xb2>
 80211dc:	4b38      	ldr	r3, [pc, #224]	; (80212c0 <pbuf_copy+0x188>)
 80211de:	f240 32d9 	movw	r2, #985	; 0x3d9
 80211e2:	493a      	ldr	r1, [pc, #232]	; (80212cc <pbuf_copy+0x194>)
 80211e4:	4838      	ldr	r0, [pc, #224]	; (80212c8 <pbuf_copy+0x190>)
 80211e6:	f003 fbb7 	bl	8024958 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80211ea:	683b      	ldr	r3, [r7, #0]
 80211ec:	895b      	ldrh	r3, [r3, #10]
 80211ee:	461a      	mov	r2, r3
 80211f0:	693b      	ldr	r3, [r7, #16]
 80211f2:	4293      	cmp	r3, r2
 80211f4:	d906      	bls.n	8021204 <pbuf_copy+0xcc>
 80211f6:	4b32      	ldr	r3, [pc, #200]	; (80212c0 <pbuf_copy+0x188>)
 80211f8:	f240 32da 	movw	r2, #986	; 0x3da
 80211fc:	4934      	ldr	r1, [pc, #208]	; (80212d0 <pbuf_copy+0x198>)
 80211fe:	4832      	ldr	r0, [pc, #200]	; (80212c8 <pbuf_copy+0x190>)
 8021200:	f003 fbaa 	bl	8024958 <iprintf>
    if (offset_from >= p_from->len) {
 8021204:	683b      	ldr	r3, [r7, #0]
 8021206:	895b      	ldrh	r3, [r3, #10]
 8021208:	461a      	mov	r2, r3
 802120a:	693b      	ldr	r3, [r7, #16]
 802120c:	4293      	cmp	r3, r2
 802120e:	d304      	bcc.n	802121a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8021210:	2300      	movs	r3, #0
 8021212:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8021214:	683b      	ldr	r3, [r7, #0]
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	895b      	ldrh	r3, [r3, #10]
 802121e:	461a      	mov	r2, r3
 8021220:	697b      	ldr	r3, [r7, #20]
 8021222:	4293      	cmp	r3, r2
 8021224:	d114      	bne.n	8021250 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8021226:	2300      	movs	r3, #0
 8021228:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	681b      	ldr	r3, [r3, #0]
 802122e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	2b00      	cmp	r3, #0
 8021234:	d10c      	bne.n	8021250 <pbuf_copy+0x118>
 8021236:	683b      	ldr	r3, [r7, #0]
 8021238:	2b00      	cmp	r3, #0
 802123a:	d009      	beq.n	8021250 <pbuf_copy+0x118>
 802123c:	4b20      	ldr	r3, [pc, #128]	; (80212c0 <pbuf_copy+0x188>)
 802123e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8021242:	4924      	ldr	r1, [pc, #144]	; (80212d4 <pbuf_copy+0x19c>)
 8021244:	4820      	ldr	r0, [pc, #128]	; (80212c8 <pbuf_copy+0x190>)
 8021246:	f003 fb87 	bl	8024958 <iprintf>
 802124a:	f06f 030f 	mvn.w	r3, #15
 802124e:	e032      	b.n	80212b6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8021250:	683b      	ldr	r3, [r7, #0]
 8021252:	2b00      	cmp	r3, #0
 8021254:	d013      	beq.n	802127e <pbuf_copy+0x146>
 8021256:	683b      	ldr	r3, [r7, #0]
 8021258:	895a      	ldrh	r2, [r3, #10]
 802125a:	683b      	ldr	r3, [r7, #0]
 802125c:	891b      	ldrh	r3, [r3, #8]
 802125e:	429a      	cmp	r2, r3
 8021260:	d10d      	bne.n	802127e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8021262:	683b      	ldr	r3, [r7, #0]
 8021264:	681b      	ldr	r3, [r3, #0]
 8021266:	2b00      	cmp	r3, #0
 8021268:	d009      	beq.n	802127e <pbuf_copy+0x146>
 802126a:	4b15      	ldr	r3, [pc, #84]	; (80212c0 <pbuf_copy+0x188>)
 802126c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8021270:	4919      	ldr	r1, [pc, #100]	; (80212d8 <pbuf_copy+0x1a0>)
 8021272:	4815      	ldr	r0, [pc, #84]	; (80212c8 <pbuf_copy+0x190>)
 8021274:	f003 fb70 	bl	8024958 <iprintf>
 8021278:	f06f 0305 	mvn.w	r3, #5
 802127c:	e01b      	b.n	80212b6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	2b00      	cmp	r3, #0
 8021282:	d013      	beq.n	80212ac <pbuf_copy+0x174>
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	895a      	ldrh	r2, [r3, #10]
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	891b      	ldrh	r3, [r3, #8]
 802128c:	429a      	cmp	r2, r3
 802128e:	d10d      	bne.n	80212ac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	2b00      	cmp	r3, #0
 8021296:	d009      	beq.n	80212ac <pbuf_copy+0x174>
 8021298:	4b09      	ldr	r3, [pc, #36]	; (80212c0 <pbuf_copy+0x188>)
 802129a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 802129e:	490e      	ldr	r1, [pc, #56]	; (80212d8 <pbuf_copy+0x1a0>)
 80212a0:	4809      	ldr	r0, [pc, #36]	; (80212c8 <pbuf_copy+0x190>)
 80212a2:	f003 fb59 	bl	8024958 <iprintf>
 80212a6:	f06f 0305 	mvn.w	r3, #5
 80212aa:	e004      	b.n	80212b6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80212ac:	683b      	ldr	r3, [r7, #0]
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	f47f af61 	bne.w	8021176 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80212b4:	2300      	movs	r3, #0
}
 80212b6:	4618      	mov	r0, r3
 80212b8:	3718      	adds	r7, #24
 80212ba:	46bd      	mov	sp, r7
 80212bc:	bd80      	pop	{r7, pc}
 80212be:	bf00      	nop
 80212c0:	0802a344 	.word	0x0802a344
 80212c4:	0802a5ec 	.word	0x0802a5ec
 80212c8:	0802a3a4 	.word	0x0802a3a4
 80212cc:	0802a61c 	.word	0x0802a61c
 80212d0:	0802a634 	.word	0x0802a634
 80212d4:	0802a650 	.word	0x0802a650
 80212d8:	0802a660 	.word	0x0802a660

080212dc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80212dc:	b580      	push	{r7, lr}
 80212de:	b088      	sub	sp, #32
 80212e0:	af00      	add	r7, sp, #0
 80212e2:	60f8      	str	r0, [r7, #12]
 80212e4:	60b9      	str	r1, [r7, #8]
 80212e6:	4613      	mov	r3, r2
 80212e8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80212ea:	88fb      	ldrh	r3, [r7, #6]
 80212ec:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80212ee:	2300      	movs	r3, #0
 80212f0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80212f2:	68fb      	ldr	r3, [r7, #12]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d109      	bne.n	802130c <pbuf_take+0x30>
 80212f8:	4b3a      	ldr	r3, [pc, #232]	; (80213e4 <pbuf_take+0x108>)
 80212fa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80212fe:	493a      	ldr	r1, [pc, #232]	; (80213e8 <pbuf_take+0x10c>)
 8021300:	483a      	ldr	r0, [pc, #232]	; (80213ec <pbuf_take+0x110>)
 8021302:	f003 fb29 	bl	8024958 <iprintf>
 8021306:	f06f 030f 	mvn.w	r3, #15
 802130a:	e067      	b.n	80213dc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 802130c:	68bb      	ldr	r3, [r7, #8]
 802130e:	2b00      	cmp	r3, #0
 8021310:	d109      	bne.n	8021326 <pbuf_take+0x4a>
 8021312:	4b34      	ldr	r3, [pc, #208]	; (80213e4 <pbuf_take+0x108>)
 8021314:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8021318:	4935      	ldr	r1, [pc, #212]	; (80213f0 <pbuf_take+0x114>)
 802131a:	4834      	ldr	r0, [pc, #208]	; (80213ec <pbuf_take+0x110>)
 802131c:	f003 fb1c 	bl	8024958 <iprintf>
 8021320:	f06f 030f 	mvn.w	r3, #15
 8021324:	e05a      	b.n	80213dc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8021326:	68fb      	ldr	r3, [r7, #12]
 8021328:	891b      	ldrh	r3, [r3, #8]
 802132a:	88fa      	ldrh	r2, [r7, #6]
 802132c:	429a      	cmp	r2, r3
 802132e:	d909      	bls.n	8021344 <pbuf_take+0x68>
 8021330:	4b2c      	ldr	r3, [pc, #176]	; (80213e4 <pbuf_take+0x108>)
 8021332:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8021336:	492f      	ldr	r1, [pc, #188]	; (80213f4 <pbuf_take+0x118>)
 8021338:	482c      	ldr	r0, [pc, #176]	; (80213ec <pbuf_take+0x110>)
 802133a:	f003 fb0d 	bl	8024958 <iprintf>
 802133e:	f04f 33ff 	mov.w	r3, #4294967295
 8021342:	e04b      	b.n	80213dc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	2b00      	cmp	r3, #0
 8021348:	d007      	beq.n	802135a <pbuf_take+0x7e>
 802134a:	68bb      	ldr	r3, [r7, #8]
 802134c:	2b00      	cmp	r3, #0
 802134e:	d004      	beq.n	802135a <pbuf_take+0x7e>
 8021350:	68fb      	ldr	r3, [r7, #12]
 8021352:	891b      	ldrh	r3, [r3, #8]
 8021354:	88fa      	ldrh	r2, [r7, #6]
 8021356:	429a      	cmp	r2, r3
 8021358:	d902      	bls.n	8021360 <pbuf_take+0x84>
    return ERR_ARG;
 802135a:	f06f 030f 	mvn.w	r3, #15
 802135e:	e03d      	b.n	80213dc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	61fb      	str	r3, [r7, #28]
 8021364:	e028      	b.n	80213b8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8021366:	69fb      	ldr	r3, [r7, #28]
 8021368:	2b00      	cmp	r3, #0
 802136a:	d106      	bne.n	802137a <pbuf_take+0x9e>
 802136c:	4b1d      	ldr	r3, [pc, #116]	; (80213e4 <pbuf_take+0x108>)
 802136e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8021372:	4921      	ldr	r1, [pc, #132]	; (80213f8 <pbuf_take+0x11c>)
 8021374:	481d      	ldr	r0, [pc, #116]	; (80213ec <pbuf_take+0x110>)
 8021376:	f003 faef 	bl	8024958 <iprintf>
    buf_copy_len = total_copy_len;
 802137a:	697b      	ldr	r3, [r7, #20]
 802137c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 802137e:	69fb      	ldr	r3, [r7, #28]
 8021380:	895b      	ldrh	r3, [r3, #10]
 8021382:	461a      	mov	r2, r3
 8021384:	69bb      	ldr	r3, [r7, #24]
 8021386:	4293      	cmp	r3, r2
 8021388:	d902      	bls.n	8021390 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 802138a:	69fb      	ldr	r3, [r7, #28]
 802138c:	895b      	ldrh	r3, [r3, #10]
 802138e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8021390:	69fb      	ldr	r3, [r7, #28]
 8021392:	6858      	ldr	r0, [r3, #4]
 8021394:	68ba      	ldr	r2, [r7, #8]
 8021396:	693b      	ldr	r3, [r7, #16]
 8021398:	4413      	add	r3, r2
 802139a:	69ba      	ldr	r2, [r7, #24]
 802139c:	4619      	mov	r1, r3
 802139e:	f003 f9cb 	bl	8024738 <memcpy>
    total_copy_len -= buf_copy_len;
 80213a2:	697a      	ldr	r2, [r7, #20]
 80213a4:	69bb      	ldr	r3, [r7, #24]
 80213a6:	1ad3      	subs	r3, r2, r3
 80213a8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80213aa:	693a      	ldr	r2, [r7, #16]
 80213ac:	69bb      	ldr	r3, [r7, #24]
 80213ae:	4413      	add	r3, r2
 80213b0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80213b2:	69fb      	ldr	r3, [r7, #28]
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	61fb      	str	r3, [r7, #28]
 80213b8:	697b      	ldr	r3, [r7, #20]
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	d1d3      	bne.n	8021366 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80213be:	697b      	ldr	r3, [r7, #20]
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	d103      	bne.n	80213cc <pbuf_take+0xf0>
 80213c4:	88fb      	ldrh	r3, [r7, #6]
 80213c6:	693a      	ldr	r2, [r7, #16]
 80213c8:	429a      	cmp	r2, r3
 80213ca:	d006      	beq.n	80213da <pbuf_take+0xfe>
 80213cc:	4b05      	ldr	r3, [pc, #20]	; (80213e4 <pbuf_take+0x108>)
 80213ce:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80213d2:	490a      	ldr	r1, [pc, #40]	; (80213fc <pbuf_take+0x120>)
 80213d4:	4805      	ldr	r0, [pc, #20]	; (80213ec <pbuf_take+0x110>)
 80213d6:	f003 fabf 	bl	8024958 <iprintf>
  return ERR_OK;
 80213da:	2300      	movs	r3, #0
}
 80213dc:	4618      	mov	r0, r3
 80213de:	3720      	adds	r7, #32
 80213e0:	46bd      	mov	sp, r7
 80213e2:	bd80      	pop	{r7, pc}
 80213e4:	0802a344 	.word	0x0802a344
 80213e8:	0802a71c 	.word	0x0802a71c
 80213ec:	0802a3a4 	.word	0x0802a3a4
 80213f0:	0802a734 	.word	0x0802a734
 80213f4:	0802a750 	.word	0x0802a750
 80213f8:	0802a770 	.word	0x0802a770
 80213fc:	0802a788 	.word	0x0802a788

08021400 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8021400:	b580      	push	{r7, lr}
 8021402:	b084      	sub	sp, #16
 8021404:	af00      	add	r7, sp, #0
 8021406:	4603      	mov	r3, r0
 8021408:	603a      	str	r2, [r7, #0]
 802140a:	71fb      	strb	r3, [r7, #7]
 802140c:	460b      	mov	r3, r1
 802140e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8021410:	683b      	ldr	r3, [r7, #0]
 8021412:	8919      	ldrh	r1, [r3, #8]
 8021414:	88ba      	ldrh	r2, [r7, #4]
 8021416:	79fb      	ldrb	r3, [r7, #7]
 8021418:	4618      	mov	r0, r3
 802141a:	f7ff fa83 	bl	8020924 <pbuf_alloc>
 802141e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	2b00      	cmp	r3, #0
 8021424:	d101      	bne.n	802142a <pbuf_clone+0x2a>
    return NULL;
 8021426:	2300      	movs	r3, #0
 8021428:	e011      	b.n	802144e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 802142a:	6839      	ldr	r1, [r7, #0]
 802142c:	68f8      	ldr	r0, [r7, #12]
 802142e:	f7ff fe83 	bl	8021138 <pbuf_copy>
 8021432:	4603      	mov	r3, r0
 8021434:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8021436:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802143a:	2b00      	cmp	r3, #0
 802143c:	d006      	beq.n	802144c <pbuf_clone+0x4c>
 802143e:	4b06      	ldr	r3, [pc, #24]	; (8021458 <pbuf_clone+0x58>)
 8021440:	f240 5224 	movw	r2, #1316	; 0x524
 8021444:	4905      	ldr	r1, [pc, #20]	; (802145c <pbuf_clone+0x5c>)
 8021446:	4806      	ldr	r0, [pc, #24]	; (8021460 <pbuf_clone+0x60>)
 8021448:	f003 fa86 	bl	8024958 <iprintf>
  return q;
 802144c:	68fb      	ldr	r3, [r7, #12]
}
 802144e:	4618      	mov	r0, r3
 8021450:	3710      	adds	r7, #16
 8021452:	46bd      	mov	sp, r7
 8021454:	bd80      	pop	{r7, pc}
 8021456:	bf00      	nop
 8021458:	0802a344 	.word	0x0802a344
 802145c:	0802a7b8 	.word	0x0802a7b8
 8021460:	0802a3a4 	.word	0x0802a3a4

08021464 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8021464:	b580      	push	{r7, lr}
 8021466:	b086      	sub	sp, #24
 8021468:	af00      	add	r7, sp, #0
 802146a:	60f8      	str	r0, [r7, #12]
 802146c:	60b9      	str	r1, [r7, #8]
 802146e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8021470:	2003      	movs	r0, #3
 8021472:	f7fe fdb9 	bl	801ffe8 <memp_malloc>
 8021476:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8021478:	693b      	ldr	r3, [r7, #16]
 802147a:	2b00      	cmp	r3, #0
 802147c:	d109      	bne.n	8021492 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 802147e:	693b      	ldr	r3, [r7, #16]
 8021480:	2b00      	cmp	r3, #0
 8021482:	d151      	bne.n	8021528 <sys_timeout_abs+0xc4>
 8021484:	4b2a      	ldr	r3, [pc, #168]	; (8021530 <sys_timeout_abs+0xcc>)
 8021486:	22be      	movs	r2, #190	; 0xbe
 8021488:	492a      	ldr	r1, [pc, #168]	; (8021534 <sys_timeout_abs+0xd0>)
 802148a:	482b      	ldr	r0, [pc, #172]	; (8021538 <sys_timeout_abs+0xd4>)
 802148c:	f003 fa64 	bl	8024958 <iprintf>
    return;
 8021490:	e04a      	b.n	8021528 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8021492:	693b      	ldr	r3, [r7, #16]
 8021494:	2200      	movs	r2, #0
 8021496:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8021498:	693b      	ldr	r3, [r7, #16]
 802149a:	68ba      	ldr	r2, [r7, #8]
 802149c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 802149e:	693b      	ldr	r3, [r7, #16]
 80214a0:	687a      	ldr	r2, [r7, #4]
 80214a2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80214a4:	693b      	ldr	r3, [r7, #16]
 80214a6:	68fa      	ldr	r2, [r7, #12]
 80214a8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80214aa:	4b24      	ldr	r3, [pc, #144]	; (802153c <sys_timeout_abs+0xd8>)
 80214ac:	681b      	ldr	r3, [r3, #0]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d103      	bne.n	80214ba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80214b2:	4a22      	ldr	r2, [pc, #136]	; (802153c <sys_timeout_abs+0xd8>)
 80214b4:	693b      	ldr	r3, [r7, #16]
 80214b6:	6013      	str	r3, [r2, #0]
    return;
 80214b8:	e037      	b.n	802152a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80214ba:	693b      	ldr	r3, [r7, #16]
 80214bc:	685a      	ldr	r2, [r3, #4]
 80214be:	4b1f      	ldr	r3, [pc, #124]	; (802153c <sys_timeout_abs+0xd8>)
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	685b      	ldr	r3, [r3, #4]
 80214c4:	1ad3      	subs	r3, r2, r3
 80214c6:	0fdb      	lsrs	r3, r3, #31
 80214c8:	f003 0301 	and.w	r3, r3, #1
 80214cc:	b2db      	uxtb	r3, r3
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	d007      	beq.n	80214e2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80214d2:	4b1a      	ldr	r3, [pc, #104]	; (802153c <sys_timeout_abs+0xd8>)
 80214d4:	681a      	ldr	r2, [r3, #0]
 80214d6:	693b      	ldr	r3, [r7, #16]
 80214d8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80214da:	4a18      	ldr	r2, [pc, #96]	; (802153c <sys_timeout_abs+0xd8>)
 80214dc:	693b      	ldr	r3, [r7, #16]
 80214de:	6013      	str	r3, [r2, #0]
 80214e0:	e023      	b.n	802152a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80214e2:	4b16      	ldr	r3, [pc, #88]	; (802153c <sys_timeout_abs+0xd8>)
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	617b      	str	r3, [r7, #20]
 80214e8:	e01a      	b.n	8021520 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80214ea:	697b      	ldr	r3, [r7, #20]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d00b      	beq.n	802150a <sys_timeout_abs+0xa6>
 80214f2:	693b      	ldr	r3, [r7, #16]
 80214f4:	685a      	ldr	r2, [r3, #4]
 80214f6:	697b      	ldr	r3, [r7, #20]
 80214f8:	681b      	ldr	r3, [r3, #0]
 80214fa:	685b      	ldr	r3, [r3, #4]
 80214fc:	1ad3      	subs	r3, r2, r3
 80214fe:	0fdb      	lsrs	r3, r3, #31
 8021500:	f003 0301 	and.w	r3, r3, #1
 8021504:	b2db      	uxtb	r3, r3
 8021506:	2b00      	cmp	r3, #0
 8021508:	d007      	beq.n	802151a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 802150a:	697b      	ldr	r3, [r7, #20]
 802150c:	681a      	ldr	r2, [r3, #0]
 802150e:	693b      	ldr	r3, [r7, #16]
 8021510:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8021512:	697b      	ldr	r3, [r7, #20]
 8021514:	693a      	ldr	r2, [r7, #16]
 8021516:	601a      	str	r2, [r3, #0]
        break;
 8021518:	e007      	b.n	802152a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 802151a:	697b      	ldr	r3, [r7, #20]
 802151c:	681b      	ldr	r3, [r3, #0]
 802151e:	617b      	str	r3, [r7, #20]
 8021520:	697b      	ldr	r3, [r7, #20]
 8021522:	2b00      	cmp	r3, #0
 8021524:	d1e1      	bne.n	80214ea <sys_timeout_abs+0x86>
 8021526:	e000      	b.n	802152a <sys_timeout_abs+0xc6>
    return;
 8021528:	bf00      	nop
      }
    }
  }
}
 802152a:	3718      	adds	r7, #24
 802152c:	46bd      	mov	sp, r7
 802152e:	bd80      	pop	{r7, pc}
 8021530:	0802a7cc 	.word	0x0802a7cc
 8021534:	0802a800 	.word	0x0802a800
 8021538:	0802a840 	.word	0x0802a840
 802153c:	20019508 	.word	0x20019508

08021540 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8021540:	b580      	push	{r7, lr}
 8021542:	b086      	sub	sp, #24
 8021544:	af00      	add	r7, sp, #0
 8021546:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 802154c:	697b      	ldr	r3, [r7, #20]
 802154e:	685b      	ldr	r3, [r3, #4]
 8021550:	4798      	blx	r3

  now = sys_now();
 8021552:	f7fd fed9 	bl	801f308 <sys_now>
 8021556:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8021558:	697b      	ldr	r3, [r7, #20]
 802155a:	681a      	ldr	r2, [r3, #0]
 802155c:	4b0f      	ldr	r3, [pc, #60]	; (802159c <lwip_cyclic_timer+0x5c>)
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	4413      	add	r3, r2
 8021562:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8021564:	68fa      	ldr	r2, [r7, #12]
 8021566:	693b      	ldr	r3, [r7, #16]
 8021568:	1ad3      	subs	r3, r2, r3
 802156a:	0fdb      	lsrs	r3, r3, #31
 802156c:	f003 0301 	and.w	r3, r3, #1
 8021570:	b2db      	uxtb	r3, r3
 8021572:	2b00      	cmp	r3, #0
 8021574:	d009      	beq.n	802158a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8021576:	697b      	ldr	r3, [r7, #20]
 8021578:	681a      	ldr	r2, [r3, #0]
 802157a:	693b      	ldr	r3, [r7, #16]
 802157c:	4413      	add	r3, r2
 802157e:	687a      	ldr	r2, [r7, #4]
 8021580:	4907      	ldr	r1, [pc, #28]	; (80215a0 <lwip_cyclic_timer+0x60>)
 8021582:	4618      	mov	r0, r3
 8021584:	f7ff ff6e 	bl	8021464 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8021588:	e004      	b.n	8021594 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 802158a:	687a      	ldr	r2, [r7, #4]
 802158c:	4904      	ldr	r1, [pc, #16]	; (80215a0 <lwip_cyclic_timer+0x60>)
 802158e:	68f8      	ldr	r0, [r7, #12]
 8021590:	f7ff ff68 	bl	8021464 <sys_timeout_abs>
}
 8021594:	bf00      	nop
 8021596:	3718      	adds	r7, #24
 8021598:	46bd      	mov	sp, r7
 802159a:	bd80      	pop	{r7, pc}
 802159c:	2001950c 	.word	0x2001950c
 80215a0:	08021541 	.word	0x08021541

080215a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80215a4:	b580      	push	{r7, lr}
 80215a6:	b082      	sub	sp, #8
 80215a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80215aa:	2300      	movs	r3, #0
 80215ac:	607b      	str	r3, [r7, #4]
 80215ae:	e00e      	b.n	80215ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80215b0:	4a0b      	ldr	r2, [pc, #44]	; (80215e0 <sys_timeouts_init+0x3c>)
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	00db      	lsls	r3, r3, #3
 80215bc:	4a08      	ldr	r2, [pc, #32]	; (80215e0 <sys_timeouts_init+0x3c>)
 80215be:	4413      	add	r3, r2
 80215c0:	461a      	mov	r2, r3
 80215c2:	4908      	ldr	r1, [pc, #32]	; (80215e4 <sys_timeouts_init+0x40>)
 80215c4:	f000 f810 	bl	80215e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	3301      	adds	r3, #1
 80215cc:	607b      	str	r3, [r7, #4]
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	2b01      	cmp	r3, #1
 80215d2:	d9ed      	bls.n	80215b0 <sys_timeouts_init+0xc>
  }
}
 80215d4:	bf00      	nop
 80215d6:	bf00      	nop
 80215d8:	3708      	adds	r7, #8
 80215da:	46bd      	mov	sp, r7
 80215dc:	bd80      	pop	{r7, pc}
 80215de:	bf00      	nop
 80215e0:	0802b784 	.word	0x0802b784
 80215e4:	08021541 	.word	0x08021541

080215e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80215e8:	b580      	push	{r7, lr}
 80215ea:	b086      	sub	sp, #24
 80215ec:	af00      	add	r7, sp, #0
 80215ee:	60f8      	str	r0, [r7, #12]
 80215f0:	60b9      	str	r1, [r7, #8]
 80215f2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80215f4:	68fb      	ldr	r3, [r7, #12]
 80215f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80215fa:	d306      	bcc.n	802160a <sys_timeout+0x22>
 80215fc:	4b0a      	ldr	r3, [pc, #40]	; (8021628 <sys_timeout+0x40>)
 80215fe:	f240 1229 	movw	r2, #297	; 0x129
 8021602:	490a      	ldr	r1, [pc, #40]	; (802162c <sys_timeout+0x44>)
 8021604:	480a      	ldr	r0, [pc, #40]	; (8021630 <sys_timeout+0x48>)
 8021606:	f003 f9a7 	bl	8024958 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 802160a:	f7fd fe7d 	bl	801f308 <sys_now>
 802160e:	4602      	mov	r2, r0
 8021610:	68fb      	ldr	r3, [r7, #12]
 8021612:	4413      	add	r3, r2
 8021614:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8021616:	687a      	ldr	r2, [r7, #4]
 8021618:	68b9      	ldr	r1, [r7, #8]
 802161a:	6978      	ldr	r0, [r7, #20]
 802161c:	f7ff ff22 	bl	8021464 <sys_timeout_abs>
#endif
}
 8021620:	bf00      	nop
 8021622:	3718      	adds	r7, #24
 8021624:	46bd      	mov	sp, r7
 8021626:	bd80      	pop	{r7, pc}
 8021628:	0802a7cc 	.word	0x0802a7cc
 802162c:	0802a868 	.word	0x0802a868
 8021630:	0802a840 	.word	0x0802a840

08021634 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8021634:	b580      	push	{r7, lr}
 8021636:	b084      	sub	sp, #16
 8021638:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802163a:	f7fd fe65 	bl	801f308 <sys_now>
 802163e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8021640:	4b17      	ldr	r3, [pc, #92]	; (80216a0 <sys_check_timeouts+0x6c>)
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8021646:	68bb      	ldr	r3, [r7, #8]
 8021648:	2b00      	cmp	r3, #0
 802164a:	d022      	beq.n	8021692 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 802164c:	68bb      	ldr	r3, [r7, #8]
 802164e:	685b      	ldr	r3, [r3, #4]
 8021650:	68fa      	ldr	r2, [r7, #12]
 8021652:	1ad3      	subs	r3, r2, r3
 8021654:	0fdb      	lsrs	r3, r3, #31
 8021656:	f003 0301 	and.w	r3, r3, #1
 802165a:	b2db      	uxtb	r3, r3
 802165c:	2b00      	cmp	r3, #0
 802165e:	d11a      	bne.n	8021696 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8021660:	68bb      	ldr	r3, [r7, #8]
 8021662:	681b      	ldr	r3, [r3, #0]
 8021664:	4a0e      	ldr	r2, [pc, #56]	; (80216a0 <sys_check_timeouts+0x6c>)
 8021666:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8021668:	68bb      	ldr	r3, [r7, #8]
 802166a:	689b      	ldr	r3, [r3, #8]
 802166c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 802166e:	68bb      	ldr	r3, [r7, #8]
 8021670:	68db      	ldr	r3, [r3, #12]
 8021672:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8021674:	68bb      	ldr	r3, [r7, #8]
 8021676:	685b      	ldr	r3, [r3, #4]
 8021678:	4a0a      	ldr	r2, [pc, #40]	; (80216a4 <sys_check_timeouts+0x70>)
 802167a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 802167c:	68b9      	ldr	r1, [r7, #8]
 802167e:	2003      	movs	r0, #3
 8021680:	f7fe fd22 	bl	80200c8 <memp_free>
    if (handler != NULL) {
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	2b00      	cmp	r3, #0
 8021688:	d0da      	beq.n	8021640 <sys_check_timeouts+0xc>
      handler(arg);
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	6838      	ldr	r0, [r7, #0]
 802168e:	4798      	blx	r3
  do {
 8021690:	e7d6      	b.n	8021640 <sys_check_timeouts+0xc>
      return;
 8021692:	bf00      	nop
 8021694:	e000      	b.n	8021698 <sys_check_timeouts+0x64>
      return;
 8021696:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8021698:	3710      	adds	r7, #16
 802169a:	46bd      	mov	sp, r7
 802169c:	bd80      	pop	{r7, pc}
 802169e:	bf00      	nop
 80216a0:	20019508 	.word	0x20019508
 80216a4:	2001950c 	.word	0x2001950c

080216a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80216a8:	b580      	push	{r7, lr}
 80216aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80216ac:	f003 f9f8 	bl	8024aa0 <rand>
 80216b0:	4603      	mov	r3, r0
 80216b2:	b29b      	uxth	r3, r3
 80216b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80216b8:	b29b      	uxth	r3, r3
 80216ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80216be:	b29a      	uxth	r2, r3
 80216c0:	4b01      	ldr	r3, [pc, #4]	; (80216c8 <udp_init+0x20>)
 80216c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80216c4:	bf00      	nop
 80216c6:	bd80      	pop	{r7, pc}
 80216c8:	2000013c 	.word	0x2000013c

080216cc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80216cc:	b480      	push	{r7}
 80216ce:	b083      	sub	sp, #12
 80216d0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80216d2:	2300      	movs	r3, #0
 80216d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80216d6:	4b17      	ldr	r3, [pc, #92]	; (8021734 <udp_new_port+0x68>)
 80216d8:	881b      	ldrh	r3, [r3, #0]
 80216da:	1c5a      	adds	r2, r3, #1
 80216dc:	b291      	uxth	r1, r2
 80216de:	4a15      	ldr	r2, [pc, #84]	; (8021734 <udp_new_port+0x68>)
 80216e0:	8011      	strh	r1, [r2, #0]
 80216e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80216e6:	4293      	cmp	r3, r2
 80216e8:	d103      	bne.n	80216f2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80216ea:	4b12      	ldr	r3, [pc, #72]	; (8021734 <udp_new_port+0x68>)
 80216ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80216f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80216f2:	4b11      	ldr	r3, [pc, #68]	; (8021738 <udp_new_port+0x6c>)
 80216f4:	681b      	ldr	r3, [r3, #0]
 80216f6:	603b      	str	r3, [r7, #0]
 80216f8:	e011      	b.n	802171e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80216fa:	683b      	ldr	r3, [r7, #0]
 80216fc:	8a5a      	ldrh	r2, [r3, #18]
 80216fe:	4b0d      	ldr	r3, [pc, #52]	; (8021734 <udp_new_port+0x68>)
 8021700:	881b      	ldrh	r3, [r3, #0]
 8021702:	429a      	cmp	r2, r3
 8021704:	d108      	bne.n	8021718 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8021706:	88fb      	ldrh	r3, [r7, #6]
 8021708:	3301      	adds	r3, #1
 802170a:	80fb      	strh	r3, [r7, #6]
 802170c:	88fb      	ldrh	r3, [r7, #6]
 802170e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8021712:	d3e0      	bcc.n	80216d6 <udp_new_port+0xa>
        return 0;
 8021714:	2300      	movs	r3, #0
 8021716:	e007      	b.n	8021728 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021718:	683b      	ldr	r3, [r7, #0]
 802171a:	68db      	ldr	r3, [r3, #12]
 802171c:	603b      	str	r3, [r7, #0]
 802171e:	683b      	ldr	r3, [r7, #0]
 8021720:	2b00      	cmp	r3, #0
 8021722:	d1ea      	bne.n	80216fa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8021724:	4b03      	ldr	r3, [pc, #12]	; (8021734 <udp_new_port+0x68>)
 8021726:	881b      	ldrh	r3, [r3, #0]
}
 8021728:	4618      	mov	r0, r3
 802172a:	370c      	adds	r7, #12
 802172c:	46bd      	mov	sp, r7
 802172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021732:	4770      	bx	lr
 8021734:	2000013c 	.word	0x2000013c
 8021738:	20019510 	.word	0x20019510

0802173c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 802173c:	b580      	push	{r7, lr}
 802173e:	b084      	sub	sp, #16
 8021740:	af00      	add	r7, sp, #0
 8021742:	60f8      	str	r0, [r7, #12]
 8021744:	60b9      	str	r1, [r7, #8]
 8021746:	4613      	mov	r3, r2
 8021748:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 802174a:	68fb      	ldr	r3, [r7, #12]
 802174c:	2b00      	cmp	r3, #0
 802174e:	d105      	bne.n	802175c <udp_input_local_match+0x20>
 8021750:	4b27      	ldr	r3, [pc, #156]	; (80217f0 <udp_input_local_match+0xb4>)
 8021752:	2287      	movs	r2, #135	; 0x87
 8021754:	4927      	ldr	r1, [pc, #156]	; (80217f4 <udp_input_local_match+0xb8>)
 8021756:	4828      	ldr	r0, [pc, #160]	; (80217f8 <udp_input_local_match+0xbc>)
 8021758:	f003 f8fe 	bl	8024958 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 802175c:	68bb      	ldr	r3, [r7, #8]
 802175e:	2b00      	cmp	r3, #0
 8021760:	d105      	bne.n	802176e <udp_input_local_match+0x32>
 8021762:	4b23      	ldr	r3, [pc, #140]	; (80217f0 <udp_input_local_match+0xb4>)
 8021764:	2288      	movs	r2, #136	; 0x88
 8021766:	4925      	ldr	r1, [pc, #148]	; (80217fc <udp_input_local_match+0xc0>)
 8021768:	4823      	ldr	r0, [pc, #140]	; (80217f8 <udp_input_local_match+0xbc>)
 802176a:	f003 f8f5 	bl	8024958 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802176e:	68fb      	ldr	r3, [r7, #12]
 8021770:	7a1b      	ldrb	r3, [r3, #8]
 8021772:	2b00      	cmp	r3, #0
 8021774:	d00b      	beq.n	802178e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8021776:	68fb      	ldr	r3, [r7, #12]
 8021778:	7a1a      	ldrb	r2, [r3, #8]
 802177a:	4b21      	ldr	r3, [pc, #132]	; (8021800 <udp_input_local_match+0xc4>)
 802177c:	685b      	ldr	r3, [r3, #4]
 802177e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021782:	3301      	adds	r3, #1
 8021784:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021786:	429a      	cmp	r2, r3
 8021788:	d001      	beq.n	802178e <udp_input_local_match+0x52>
    return 0;
 802178a:	2300      	movs	r3, #0
 802178c:	e02b      	b.n	80217e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802178e:	79fb      	ldrb	r3, [r7, #7]
 8021790:	2b00      	cmp	r3, #0
 8021792:	d018      	beq.n	80217c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021794:	68fb      	ldr	r3, [r7, #12]
 8021796:	2b00      	cmp	r3, #0
 8021798:	d013      	beq.n	80217c2 <udp_input_local_match+0x86>
 802179a:	68fb      	ldr	r3, [r7, #12]
 802179c:	681b      	ldr	r3, [r3, #0]
 802179e:	2b00      	cmp	r3, #0
 80217a0:	d00f      	beq.n	80217c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80217a2:	4b17      	ldr	r3, [pc, #92]	; (8021800 <udp_input_local_match+0xc4>)
 80217a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80217a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80217aa:	d00a      	beq.n	80217c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80217ac:	68fb      	ldr	r3, [r7, #12]
 80217ae:	681a      	ldr	r2, [r3, #0]
 80217b0:	4b13      	ldr	r3, [pc, #76]	; (8021800 <udp_input_local_match+0xc4>)
 80217b2:	695b      	ldr	r3, [r3, #20]
 80217b4:	405a      	eors	r2, r3
 80217b6:	68bb      	ldr	r3, [r7, #8]
 80217b8:	3308      	adds	r3, #8
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80217be:	2b00      	cmp	r3, #0
 80217c0:	d110      	bne.n	80217e4 <udp_input_local_match+0xa8>
          return 1;
 80217c2:	2301      	movs	r3, #1
 80217c4:	e00f      	b.n	80217e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80217c6:	68fb      	ldr	r3, [r7, #12]
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	d009      	beq.n	80217e0 <udp_input_local_match+0xa4>
 80217cc:	68fb      	ldr	r3, [r7, #12]
 80217ce:	681b      	ldr	r3, [r3, #0]
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	d005      	beq.n	80217e0 <udp_input_local_match+0xa4>
 80217d4:	68fb      	ldr	r3, [r7, #12]
 80217d6:	681a      	ldr	r2, [r3, #0]
 80217d8:	4b09      	ldr	r3, [pc, #36]	; (8021800 <udp_input_local_match+0xc4>)
 80217da:	695b      	ldr	r3, [r3, #20]
 80217dc:	429a      	cmp	r2, r3
 80217de:	d101      	bne.n	80217e4 <udp_input_local_match+0xa8>
        return 1;
 80217e0:	2301      	movs	r3, #1
 80217e2:	e000      	b.n	80217e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80217e4:	2300      	movs	r3, #0
}
 80217e6:	4618      	mov	r0, r3
 80217e8:	3710      	adds	r7, #16
 80217ea:	46bd      	mov	sp, r7
 80217ec:	bd80      	pop	{r7, pc}
 80217ee:	bf00      	nop
 80217f0:	0802a8b4 	.word	0x0802a8b4
 80217f4:	0802a8e4 	.word	0x0802a8e4
 80217f8:	0802a908 	.word	0x0802a908
 80217fc:	0802a930 	.word	0x0802a930
 8021800:	20015eac 	.word	0x20015eac

08021804 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8021804:	b590      	push	{r4, r7, lr}
 8021806:	b08d      	sub	sp, #52	; 0x34
 8021808:	af02      	add	r7, sp, #8
 802180a:	6078      	str	r0, [r7, #4]
 802180c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 802180e:	2300      	movs	r3, #0
 8021810:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	2b00      	cmp	r3, #0
 8021816:	d105      	bne.n	8021824 <udp_input+0x20>
 8021818:	4b7c      	ldr	r3, [pc, #496]	; (8021a0c <udp_input+0x208>)
 802181a:	22cf      	movs	r2, #207	; 0xcf
 802181c:	497c      	ldr	r1, [pc, #496]	; (8021a10 <udp_input+0x20c>)
 802181e:	487d      	ldr	r0, [pc, #500]	; (8021a14 <udp_input+0x210>)
 8021820:	f003 f89a 	bl	8024958 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8021824:	683b      	ldr	r3, [r7, #0]
 8021826:	2b00      	cmp	r3, #0
 8021828:	d105      	bne.n	8021836 <udp_input+0x32>
 802182a:	4b78      	ldr	r3, [pc, #480]	; (8021a0c <udp_input+0x208>)
 802182c:	22d0      	movs	r2, #208	; 0xd0
 802182e:	497a      	ldr	r1, [pc, #488]	; (8021a18 <udp_input+0x214>)
 8021830:	4878      	ldr	r0, [pc, #480]	; (8021a14 <udp_input+0x210>)
 8021832:	f003 f891 	bl	8024958 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	895b      	ldrh	r3, [r3, #10]
 802183a:	2b07      	cmp	r3, #7
 802183c:	d803      	bhi.n	8021846 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 802183e:	6878      	ldr	r0, [r7, #4]
 8021840:	f7ff fb52 	bl	8020ee8 <pbuf_free>
    goto end;
 8021844:	e0de      	b.n	8021a04 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	685b      	ldr	r3, [r3, #4]
 802184a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 802184c:	4b73      	ldr	r3, [pc, #460]	; (8021a1c <udp_input+0x218>)
 802184e:	695b      	ldr	r3, [r3, #20]
 8021850:	4a72      	ldr	r2, [pc, #456]	; (8021a1c <udp_input+0x218>)
 8021852:	6812      	ldr	r2, [r2, #0]
 8021854:	4611      	mov	r1, r2
 8021856:	4618      	mov	r0, r3
 8021858:	f001 ff44 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 802185c:	4603      	mov	r3, r0
 802185e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8021860:	697b      	ldr	r3, [r7, #20]
 8021862:	881b      	ldrh	r3, [r3, #0]
 8021864:	b29b      	uxth	r3, r3
 8021866:	4618      	mov	r0, r3
 8021868:	f7fd ff62 	bl	801f730 <lwip_htons>
 802186c:	4603      	mov	r3, r0
 802186e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8021870:	697b      	ldr	r3, [r7, #20]
 8021872:	885b      	ldrh	r3, [r3, #2]
 8021874:	b29b      	uxth	r3, r3
 8021876:	4618      	mov	r0, r3
 8021878:	f7fd ff5a 	bl	801f730 <lwip_htons>
 802187c:	4603      	mov	r3, r0
 802187e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8021880:	2300      	movs	r3, #0
 8021882:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8021884:	2300      	movs	r3, #0
 8021886:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8021888:	2300      	movs	r3, #0
 802188a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802188c:	4b64      	ldr	r3, [pc, #400]	; (8021a20 <udp_input+0x21c>)
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	627b      	str	r3, [r7, #36]	; 0x24
 8021892:	e054      	b.n	802193e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8021894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021896:	8a5b      	ldrh	r3, [r3, #18]
 8021898:	89fa      	ldrh	r2, [r7, #14]
 802189a:	429a      	cmp	r2, r3
 802189c:	d14a      	bne.n	8021934 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 802189e:	7cfb      	ldrb	r3, [r7, #19]
 80218a0:	461a      	mov	r2, r3
 80218a2:	6839      	ldr	r1, [r7, #0]
 80218a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80218a6:	f7ff ff49 	bl	802173c <udp_input_local_match>
 80218aa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d041      	beq.n	8021934 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80218b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218b2:	7c1b      	ldrb	r3, [r3, #16]
 80218b4:	f003 0304 	and.w	r3, r3, #4
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d11d      	bne.n	80218f8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80218bc:	69fb      	ldr	r3, [r7, #28]
 80218be:	2b00      	cmp	r3, #0
 80218c0:	d102      	bne.n	80218c8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80218c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c4:	61fb      	str	r3, [r7, #28]
 80218c6:	e017      	b.n	80218f8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80218c8:	7cfb      	ldrb	r3, [r7, #19]
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d014      	beq.n	80218f8 <udp_input+0xf4>
 80218ce:	4b53      	ldr	r3, [pc, #332]	; (8021a1c <udp_input+0x218>)
 80218d0:	695b      	ldr	r3, [r3, #20]
 80218d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218d6:	d10f      	bne.n	80218f8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80218d8:	69fb      	ldr	r3, [r7, #28]
 80218da:	681a      	ldr	r2, [r3, #0]
 80218dc:	683b      	ldr	r3, [r7, #0]
 80218de:	3304      	adds	r3, #4
 80218e0:	681b      	ldr	r3, [r3, #0]
 80218e2:	429a      	cmp	r2, r3
 80218e4:	d008      	beq.n	80218f8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80218e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218e8:	681a      	ldr	r2, [r3, #0]
 80218ea:	683b      	ldr	r3, [r7, #0]
 80218ec:	3304      	adds	r3, #4
 80218ee:	681b      	ldr	r3, [r3, #0]
 80218f0:	429a      	cmp	r2, r3
 80218f2:	d101      	bne.n	80218f8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80218f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218f6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80218f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218fa:	8a9b      	ldrh	r3, [r3, #20]
 80218fc:	8a3a      	ldrh	r2, [r7, #16]
 80218fe:	429a      	cmp	r2, r3
 8021900:	d118      	bne.n	8021934 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021904:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8021906:	2b00      	cmp	r3, #0
 8021908:	d005      	beq.n	8021916 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 802190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802190c:	685a      	ldr	r2, [r3, #4]
 802190e:	4b43      	ldr	r3, [pc, #268]	; (8021a1c <udp_input+0x218>)
 8021910:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021912:	429a      	cmp	r2, r3
 8021914:	d10e      	bne.n	8021934 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8021916:	6a3b      	ldr	r3, [r7, #32]
 8021918:	2b00      	cmp	r3, #0
 802191a:	d014      	beq.n	8021946 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 802191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802191e:	68da      	ldr	r2, [r3, #12]
 8021920:	6a3b      	ldr	r3, [r7, #32]
 8021922:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8021924:	4b3e      	ldr	r3, [pc, #248]	; (8021a20 <udp_input+0x21c>)
 8021926:	681a      	ldr	r2, [r3, #0]
 8021928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802192a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 802192c:	4a3c      	ldr	r2, [pc, #240]	; (8021a20 <udp_input+0x21c>)
 802192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021930:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8021932:	e008      	b.n	8021946 <udp_input+0x142>
      }
    }

    prev = pcb;
 8021934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021936:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802193a:	68db      	ldr	r3, [r3, #12]
 802193c:	627b      	str	r3, [r7, #36]	; 0x24
 802193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021940:	2b00      	cmp	r3, #0
 8021942:	d1a7      	bne.n	8021894 <udp_input+0x90>
 8021944:	e000      	b.n	8021948 <udp_input+0x144>
        break;
 8021946:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8021948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802194a:	2b00      	cmp	r3, #0
 802194c:	d101      	bne.n	8021952 <udp_input+0x14e>
    pcb = uncon_pcb;
 802194e:	69fb      	ldr	r3, [r7, #28]
 8021950:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8021952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021954:	2b00      	cmp	r3, #0
 8021956:	d002      	beq.n	802195e <udp_input+0x15a>
    for_us = 1;
 8021958:	2301      	movs	r3, #1
 802195a:	76fb      	strb	r3, [r7, #27]
 802195c:	e00a      	b.n	8021974 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802195e:	683b      	ldr	r3, [r7, #0]
 8021960:	3304      	adds	r3, #4
 8021962:	681a      	ldr	r2, [r3, #0]
 8021964:	4b2d      	ldr	r3, [pc, #180]	; (8021a1c <udp_input+0x218>)
 8021966:	695b      	ldr	r3, [r3, #20]
 8021968:	429a      	cmp	r2, r3
 802196a:	bf0c      	ite	eq
 802196c:	2301      	moveq	r3, #1
 802196e:	2300      	movne	r3, #0
 8021970:	b2db      	uxtb	r3, r3
 8021972:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8021974:	7efb      	ldrb	r3, [r7, #27]
 8021976:	2b00      	cmp	r3, #0
 8021978:	d041      	beq.n	80219fe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 802197a:	2108      	movs	r1, #8
 802197c:	6878      	ldr	r0, [r7, #4]
 802197e:	f7ff fa2d 	bl	8020ddc <pbuf_remove_header>
 8021982:	4603      	mov	r3, r0
 8021984:	2b00      	cmp	r3, #0
 8021986:	d00a      	beq.n	802199e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8021988:	4b20      	ldr	r3, [pc, #128]	; (8021a0c <udp_input+0x208>)
 802198a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 802198e:	4925      	ldr	r1, [pc, #148]	; (8021a24 <udp_input+0x220>)
 8021990:	4820      	ldr	r0, [pc, #128]	; (8021a14 <udp_input+0x210>)
 8021992:	f002 ffe1 	bl	8024958 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8021996:	6878      	ldr	r0, [r7, #4]
 8021998:	f7ff faa6 	bl	8020ee8 <pbuf_free>
      goto end;
 802199c:	e032      	b.n	8021a04 <udp_input+0x200>
    }

    if (pcb != NULL) {
 802199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	d012      	beq.n	80219ca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80219a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219a6:	699b      	ldr	r3, [r3, #24]
 80219a8:	2b00      	cmp	r3, #0
 80219aa:	d00a      	beq.n	80219c2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80219ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219ae:	699c      	ldr	r4, [r3, #24]
 80219b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219b2:	69d8      	ldr	r0, [r3, #28]
 80219b4:	8a3b      	ldrh	r3, [r7, #16]
 80219b6:	9300      	str	r3, [sp, #0]
 80219b8:	4b1b      	ldr	r3, [pc, #108]	; (8021a28 <udp_input+0x224>)
 80219ba:	687a      	ldr	r2, [r7, #4]
 80219bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80219be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80219c0:	e021      	b.n	8021a06 <udp_input+0x202>
        pbuf_free(p);
 80219c2:	6878      	ldr	r0, [r7, #4]
 80219c4:	f7ff fa90 	bl	8020ee8 <pbuf_free>
        goto end;
 80219c8:	e01c      	b.n	8021a04 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80219ca:	7cfb      	ldrb	r3, [r7, #19]
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	d112      	bne.n	80219f6 <udp_input+0x1f2>
 80219d0:	4b12      	ldr	r3, [pc, #72]	; (8021a1c <udp_input+0x218>)
 80219d2:	695b      	ldr	r3, [r3, #20]
 80219d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80219d8:	2be0      	cmp	r3, #224	; 0xe0
 80219da:	d00c      	beq.n	80219f6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80219dc:	4b0f      	ldr	r3, [pc, #60]	; (8021a1c <udp_input+0x218>)
 80219de:	899b      	ldrh	r3, [r3, #12]
 80219e0:	3308      	adds	r3, #8
 80219e2:	b29b      	uxth	r3, r3
 80219e4:	b21b      	sxth	r3, r3
 80219e6:	4619      	mov	r1, r3
 80219e8:	6878      	ldr	r0, [r7, #4]
 80219ea:	f7ff fa6a 	bl	8020ec2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80219ee:	2103      	movs	r1, #3
 80219f0:	6878      	ldr	r0, [r7, #4]
 80219f2:	f001 fb53 	bl	802309c <icmp_dest_unreach>
      pbuf_free(p);
 80219f6:	6878      	ldr	r0, [r7, #4]
 80219f8:	f7ff fa76 	bl	8020ee8 <pbuf_free>
  return;
 80219fc:	e003      	b.n	8021a06 <udp_input+0x202>
    pbuf_free(p);
 80219fe:	6878      	ldr	r0, [r7, #4]
 8021a00:	f7ff fa72 	bl	8020ee8 <pbuf_free>
  return;
 8021a04:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8021a06:	372c      	adds	r7, #44	; 0x2c
 8021a08:	46bd      	mov	sp, r7
 8021a0a:	bd90      	pop	{r4, r7, pc}
 8021a0c:	0802a8b4 	.word	0x0802a8b4
 8021a10:	0802a958 	.word	0x0802a958
 8021a14:	0802a908 	.word	0x0802a908
 8021a18:	0802a970 	.word	0x0802a970
 8021a1c:	20015eac 	.word	0x20015eac
 8021a20:	20019510 	.word	0x20019510
 8021a24:	0802a98c 	.word	0x0802a98c
 8021a28:	20015ebc 	.word	0x20015ebc

08021a2c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8021a2c:	b580      	push	{r7, lr}
 8021a2e:	b088      	sub	sp, #32
 8021a30:	af02      	add	r7, sp, #8
 8021a32:	60f8      	str	r0, [r7, #12]
 8021a34:	60b9      	str	r1, [r7, #8]
 8021a36:	607a      	str	r2, [r7, #4]
 8021a38:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8021a3a:	68fb      	ldr	r3, [r7, #12]
 8021a3c:	2b00      	cmp	r3, #0
 8021a3e:	d109      	bne.n	8021a54 <udp_sendto+0x28>
 8021a40:	4b23      	ldr	r3, [pc, #140]	; (8021ad0 <udp_sendto+0xa4>)
 8021a42:	f44f 7206 	mov.w	r2, #536	; 0x218
 8021a46:	4923      	ldr	r1, [pc, #140]	; (8021ad4 <udp_sendto+0xa8>)
 8021a48:	4823      	ldr	r0, [pc, #140]	; (8021ad8 <udp_sendto+0xac>)
 8021a4a:	f002 ff85 	bl	8024958 <iprintf>
 8021a4e:	f06f 030f 	mvn.w	r3, #15
 8021a52:	e038      	b.n	8021ac6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021a54:	68bb      	ldr	r3, [r7, #8]
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d109      	bne.n	8021a6e <udp_sendto+0x42>
 8021a5a:	4b1d      	ldr	r3, [pc, #116]	; (8021ad0 <udp_sendto+0xa4>)
 8021a5c:	f240 2219 	movw	r2, #537	; 0x219
 8021a60:	491e      	ldr	r1, [pc, #120]	; (8021adc <udp_sendto+0xb0>)
 8021a62:	481d      	ldr	r0, [pc, #116]	; (8021ad8 <udp_sendto+0xac>)
 8021a64:	f002 ff78 	bl	8024958 <iprintf>
 8021a68:	f06f 030f 	mvn.w	r3, #15
 8021a6c:	e02b      	b.n	8021ac6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d109      	bne.n	8021a88 <udp_sendto+0x5c>
 8021a74:	4b16      	ldr	r3, [pc, #88]	; (8021ad0 <udp_sendto+0xa4>)
 8021a76:	f240 221a 	movw	r2, #538	; 0x21a
 8021a7a:	4919      	ldr	r1, [pc, #100]	; (8021ae0 <udp_sendto+0xb4>)
 8021a7c:	4816      	ldr	r0, [pc, #88]	; (8021ad8 <udp_sendto+0xac>)
 8021a7e:	f002 ff6b 	bl	8024958 <iprintf>
 8021a82:	f06f 030f 	mvn.w	r3, #15
 8021a86:	e01e      	b.n	8021ac6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8021a88:	68fb      	ldr	r3, [r7, #12]
 8021a8a:	7a1b      	ldrb	r3, [r3, #8]
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d006      	beq.n	8021a9e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8021a90:	68fb      	ldr	r3, [r7, #12]
 8021a92:	7a1b      	ldrb	r3, [r3, #8]
 8021a94:	4618      	mov	r0, r3
 8021a96:	f7fe fef5 	bl	8020884 <netif_get_by_index>
 8021a9a:	6178      	str	r0, [r7, #20]
 8021a9c:	e003      	b.n	8021aa6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8021a9e:	6878      	ldr	r0, [r7, #4]
 8021aa0:	f001 fb86 	bl	80231b0 <ip4_route>
 8021aa4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8021aa6:	697b      	ldr	r3, [r7, #20]
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d102      	bne.n	8021ab2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8021aac:	f06f 0303 	mvn.w	r3, #3
 8021ab0:	e009      	b.n	8021ac6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021ab2:	887a      	ldrh	r2, [r7, #2]
 8021ab4:	697b      	ldr	r3, [r7, #20]
 8021ab6:	9300      	str	r3, [sp, #0]
 8021ab8:	4613      	mov	r3, r2
 8021aba:	687a      	ldr	r2, [r7, #4]
 8021abc:	68b9      	ldr	r1, [r7, #8]
 8021abe:	68f8      	ldr	r0, [r7, #12]
 8021ac0:	f000 f810 	bl	8021ae4 <udp_sendto_if>
 8021ac4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021ac6:	4618      	mov	r0, r3
 8021ac8:	3718      	adds	r7, #24
 8021aca:	46bd      	mov	sp, r7
 8021acc:	bd80      	pop	{r7, pc}
 8021ace:	bf00      	nop
 8021ad0:	0802a8b4 	.word	0x0802a8b4
 8021ad4:	0802a9d8 	.word	0x0802a9d8
 8021ad8:	0802a908 	.word	0x0802a908
 8021adc:	0802a9f0 	.word	0x0802a9f0
 8021ae0:	0802aa0c 	.word	0x0802aa0c

08021ae4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8021ae4:	b580      	push	{r7, lr}
 8021ae6:	b088      	sub	sp, #32
 8021ae8:	af02      	add	r7, sp, #8
 8021aea:	60f8      	str	r0, [r7, #12]
 8021aec:	60b9      	str	r1, [r7, #8]
 8021aee:	607a      	str	r2, [r7, #4]
 8021af0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8021af2:	68fb      	ldr	r3, [r7, #12]
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d109      	bne.n	8021b0c <udp_sendto_if+0x28>
 8021af8:	4b2e      	ldr	r3, [pc, #184]	; (8021bb4 <udp_sendto_if+0xd0>)
 8021afa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021afe:	492e      	ldr	r1, [pc, #184]	; (8021bb8 <udp_sendto_if+0xd4>)
 8021b00:	482e      	ldr	r0, [pc, #184]	; (8021bbc <udp_sendto_if+0xd8>)
 8021b02:	f002 ff29 	bl	8024958 <iprintf>
 8021b06:	f06f 030f 	mvn.w	r3, #15
 8021b0a:	e04f      	b.n	8021bac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8021b0c:	68bb      	ldr	r3, [r7, #8]
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d109      	bne.n	8021b26 <udp_sendto_if+0x42>
 8021b12:	4b28      	ldr	r3, [pc, #160]	; (8021bb4 <udp_sendto_if+0xd0>)
 8021b14:	f240 2281 	movw	r2, #641	; 0x281
 8021b18:	4929      	ldr	r1, [pc, #164]	; (8021bc0 <udp_sendto_if+0xdc>)
 8021b1a:	4828      	ldr	r0, [pc, #160]	; (8021bbc <udp_sendto_if+0xd8>)
 8021b1c:	f002 ff1c 	bl	8024958 <iprintf>
 8021b20:	f06f 030f 	mvn.w	r3, #15
 8021b24:	e042      	b.n	8021bac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	d109      	bne.n	8021b40 <udp_sendto_if+0x5c>
 8021b2c:	4b21      	ldr	r3, [pc, #132]	; (8021bb4 <udp_sendto_if+0xd0>)
 8021b2e:	f240 2282 	movw	r2, #642	; 0x282
 8021b32:	4924      	ldr	r1, [pc, #144]	; (8021bc4 <udp_sendto_if+0xe0>)
 8021b34:	4821      	ldr	r0, [pc, #132]	; (8021bbc <udp_sendto_if+0xd8>)
 8021b36:	f002 ff0f 	bl	8024958 <iprintf>
 8021b3a:	f06f 030f 	mvn.w	r3, #15
 8021b3e:	e035      	b.n	8021bac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021b40:	6a3b      	ldr	r3, [r7, #32]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d109      	bne.n	8021b5a <udp_sendto_if+0x76>
 8021b46:	4b1b      	ldr	r3, [pc, #108]	; (8021bb4 <udp_sendto_if+0xd0>)
 8021b48:	f240 2283 	movw	r2, #643	; 0x283
 8021b4c:	491e      	ldr	r1, [pc, #120]	; (8021bc8 <udp_sendto_if+0xe4>)
 8021b4e:	481b      	ldr	r0, [pc, #108]	; (8021bbc <udp_sendto_if+0xd8>)
 8021b50:	f002 ff02 	bl	8024958 <iprintf>
 8021b54:	f06f 030f 	mvn.w	r3, #15
 8021b58:	e028      	b.n	8021bac <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021b5a:	68fb      	ldr	r3, [r7, #12]
 8021b5c:	2b00      	cmp	r3, #0
 8021b5e:	d009      	beq.n	8021b74 <udp_sendto_if+0x90>
 8021b60:	68fb      	ldr	r3, [r7, #12]
 8021b62:	681b      	ldr	r3, [r3, #0]
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	d005      	beq.n	8021b74 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8021b68:	68fb      	ldr	r3, [r7, #12]
 8021b6a:	681b      	ldr	r3, [r3, #0]
 8021b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021b70:	2be0      	cmp	r3, #224	; 0xe0
 8021b72:	d103      	bne.n	8021b7c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8021b74:	6a3b      	ldr	r3, [r7, #32]
 8021b76:	3304      	adds	r3, #4
 8021b78:	617b      	str	r3, [r7, #20]
 8021b7a:	e00b      	b.n	8021b94 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8021b7c:	68fb      	ldr	r3, [r7, #12]
 8021b7e:	681a      	ldr	r2, [r3, #0]
 8021b80:	6a3b      	ldr	r3, [r7, #32]
 8021b82:	3304      	adds	r3, #4
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	429a      	cmp	r2, r3
 8021b88:	d002      	beq.n	8021b90 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8021b8a:	f06f 0303 	mvn.w	r3, #3
 8021b8e:	e00d      	b.n	8021bac <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8021b90:	68fb      	ldr	r3, [r7, #12]
 8021b92:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8021b94:	887a      	ldrh	r2, [r7, #2]
 8021b96:	697b      	ldr	r3, [r7, #20]
 8021b98:	9301      	str	r3, [sp, #4]
 8021b9a:	6a3b      	ldr	r3, [r7, #32]
 8021b9c:	9300      	str	r3, [sp, #0]
 8021b9e:	4613      	mov	r3, r2
 8021ba0:	687a      	ldr	r2, [r7, #4]
 8021ba2:	68b9      	ldr	r1, [r7, #8]
 8021ba4:	68f8      	ldr	r0, [r7, #12]
 8021ba6:	f000 f811 	bl	8021bcc <udp_sendto_if_src>
 8021baa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021bac:	4618      	mov	r0, r3
 8021bae:	3718      	adds	r7, #24
 8021bb0:	46bd      	mov	sp, r7
 8021bb2:	bd80      	pop	{r7, pc}
 8021bb4:	0802a8b4 	.word	0x0802a8b4
 8021bb8:	0802aa28 	.word	0x0802aa28
 8021bbc:	0802a908 	.word	0x0802a908
 8021bc0:	0802aa44 	.word	0x0802aa44
 8021bc4:	0802aa60 	.word	0x0802aa60
 8021bc8:	0802aa80 	.word	0x0802aa80

08021bcc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8021bcc:	b580      	push	{r7, lr}
 8021bce:	b08c      	sub	sp, #48	; 0x30
 8021bd0:	af04      	add	r7, sp, #16
 8021bd2:	60f8      	str	r0, [r7, #12]
 8021bd4:	60b9      	str	r1, [r7, #8]
 8021bd6:	607a      	str	r2, [r7, #4]
 8021bd8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8021bda:	68fb      	ldr	r3, [r7, #12]
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d109      	bne.n	8021bf4 <udp_sendto_if_src+0x28>
 8021be0:	4b65      	ldr	r3, [pc, #404]	; (8021d78 <udp_sendto_if_src+0x1ac>)
 8021be2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021be6:	4965      	ldr	r1, [pc, #404]	; (8021d7c <udp_sendto_if_src+0x1b0>)
 8021be8:	4865      	ldr	r0, [pc, #404]	; (8021d80 <udp_sendto_if_src+0x1b4>)
 8021bea:	f002 feb5 	bl	8024958 <iprintf>
 8021bee:	f06f 030f 	mvn.w	r3, #15
 8021bf2:	e0bc      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021bf4:	68bb      	ldr	r3, [r7, #8]
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d109      	bne.n	8021c0e <udp_sendto_if_src+0x42>
 8021bfa:	4b5f      	ldr	r3, [pc, #380]	; (8021d78 <udp_sendto_if_src+0x1ac>)
 8021bfc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8021c00:	4960      	ldr	r1, [pc, #384]	; (8021d84 <udp_sendto_if_src+0x1b8>)
 8021c02:	485f      	ldr	r0, [pc, #380]	; (8021d80 <udp_sendto_if_src+0x1b4>)
 8021c04:	f002 fea8 	bl	8024958 <iprintf>
 8021c08:	f06f 030f 	mvn.w	r3, #15
 8021c0c:	e0af      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	d109      	bne.n	8021c28 <udp_sendto_if_src+0x5c>
 8021c14:	4b58      	ldr	r3, [pc, #352]	; (8021d78 <udp_sendto_if_src+0x1ac>)
 8021c16:	f240 22d3 	movw	r2, #723	; 0x2d3
 8021c1a:	495b      	ldr	r1, [pc, #364]	; (8021d88 <udp_sendto_if_src+0x1bc>)
 8021c1c:	4858      	ldr	r0, [pc, #352]	; (8021d80 <udp_sendto_if_src+0x1b4>)
 8021c1e:	f002 fe9b 	bl	8024958 <iprintf>
 8021c22:	f06f 030f 	mvn.w	r3, #15
 8021c26:	e0a2      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	d109      	bne.n	8021c42 <udp_sendto_if_src+0x76>
 8021c2e:	4b52      	ldr	r3, [pc, #328]	; (8021d78 <udp_sendto_if_src+0x1ac>)
 8021c30:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8021c34:	4955      	ldr	r1, [pc, #340]	; (8021d8c <udp_sendto_if_src+0x1c0>)
 8021c36:	4852      	ldr	r0, [pc, #328]	; (8021d80 <udp_sendto_if_src+0x1b4>)
 8021c38:	f002 fe8e 	bl	8024958 <iprintf>
 8021c3c:	f06f 030f 	mvn.w	r3, #15
 8021c40:	e095      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c44:	2b00      	cmp	r3, #0
 8021c46:	d109      	bne.n	8021c5c <udp_sendto_if_src+0x90>
 8021c48:	4b4b      	ldr	r3, [pc, #300]	; (8021d78 <udp_sendto_if_src+0x1ac>)
 8021c4a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8021c4e:	4950      	ldr	r1, [pc, #320]	; (8021d90 <udp_sendto_if_src+0x1c4>)
 8021c50:	484b      	ldr	r0, [pc, #300]	; (8021d80 <udp_sendto_if_src+0x1b4>)
 8021c52:	f002 fe81 	bl	8024958 <iprintf>
 8021c56:	f06f 030f 	mvn.w	r3, #15
 8021c5a:	e088      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8021c5c:	68fb      	ldr	r3, [r7, #12]
 8021c5e:	8a5b      	ldrh	r3, [r3, #18]
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	d10f      	bne.n	8021c84 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021c64:	68f9      	ldr	r1, [r7, #12]
 8021c66:	68fb      	ldr	r3, [r7, #12]
 8021c68:	8a5b      	ldrh	r3, [r3, #18]
 8021c6a:	461a      	mov	r2, r3
 8021c6c:	68f8      	ldr	r0, [r7, #12]
 8021c6e:	f000 f893 	bl	8021d98 <udp_bind>
 8021c72:	4603      	mov	r3, r0
 8021c74:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8021c76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	d002      	beq.n	8021c84 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8021c7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021c82:	e074      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8021c84:	68bb      	ldr	r3, [r7, #8]
 8021c86:	891b      	ldrh	r3, [r3, #8]
 8021c88:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8021c8c:	4293      	cmp	r3, r2
 8021c8e:	d902      	bls.n	8021c96 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8021c90:	f04f 33ff 	mov.w	r3, #4294967295
 8021c94:	e06b      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021c96:	2108      	movs	r1, #8
 8021c98:	68b8      	ldr	r0, [r7, #8]
 8021c9a:	f7ff f88f 	bl	8020dbc <pbuf_add_header>
 8021c9e:	4603      	mov	r3, r0
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d015      	beq.n	8021cd0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8021ca4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021ca8:	2108      	movs	r1, #8
 8021caa:	2022      	movs	r0, #34	; 0x22
 8021cac:	f7fe fe3a 	bl	8020924 <pbuf_alloc>
 8021cb0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021cb2:	69fb      	ldr	r3, [r7, #28]
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d102      	bne.n	8021cbe <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8021cbc:	e057      	b.n	8021d6e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8021cbe:	68bb      	ldr	r3, [r7, #8]
 8021cc0:	891b      	ldrh	r3, [r3, #8]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d006      	beq.n	8021cd4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021cc6:	68b9      	ldr	r1, [r7, #8]
 8021cc8:	69f8      	ldr	r0, [r7, #28]
 8021cca:	f7ff fa25 	bl	8021118 <pbuf_chain>
 8021cce:	e001      	b.n	8021cd4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021cd0:	68bb      	ldr	r3, [r7, #8]
 8021cd2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021cd4:	69fb      	ldr	r3, [r7, #28]
 8021cd6:	895b      	ldrh	r3, [r3, #10]
 8021cd8:	2b07      	cmp	r3, #7
 8021cda:	d806      	bhi.n	8021cea <udp_sendto_if_src+0x11e>
 8021cdc:	4b26      	ldr	r3, [pc, #152]	; (8021d78 <udp_sendto_if_src+0x1ac>)
 8021cde:	f240 320d 	movw	r2, #781	; 0x30d
 8021ce2:	492c      	ldr	r1, [pc, #176]	; (8021d94 <udp_sendto_if_src+0x1c8>)
 8021ce4:	4826      	ldr	r0, [pc, #152]	; (8021d80 <udp_sendto_if_src+0x1b4>)
 8021ce6:	f002 fe37 	bl	8024958 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8021cea:	69fb      	ldr	r3, [r7, #28]
 8021cec:	685b      	ldr	r3, [r3, #4]
 8021cee:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021cf0:	68fb      	ldr	r3, [r7, #12]
 8021cf2:	8a5b      	ldrh	r3, [r3, #18]
 8021cf4:	4618      	mov	r0, r3
 8021cf6:	f7fd fd1b 	bl	801f730 <lwip_htons>
 8021cfa:	4603      	mov	r3, r0
 8021cfc:	461a      	mov	r2, r3
 8021cfe:	697b      	ldr	r3, [r7, #20]
 8021d00:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021d02:	887b      	ldrh	r3, [r7, #2]
 8021d04:	4618      	mov	r0, r3
 8021d06:	f7fd fd13 	bl	801f730 <lwip_htons>
 8021d0a:	4603      	mov	r3, r0
 8021d0c:	461a      	mov	r2, r3
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021d12:	697b      	ldr	r3, [r7, #20]
 8021d14:	2200      	movs	r2, #0
 8021d16:	719a      	strb	r2, [r3, #6]
 8021d18:	2200      	movs	r2, #0
 8021d1a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8021d1c:	69fb      	ldr	r3, [r7, #28]
 8021d1e:	891b      	ldrh	r3, [r3, #8]
 8021d20:	4618      	mov	r0, r3
 8021d22:	f7fd fd05 	bl	801f730 <lwip_htons>
 8021d26:	4603      	mov	r3, r0
 8021d28:	461a      	mov	r2, r3
 8021d2a:	697b      	ldr	r3, [r7, #20]
 8021d2c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8021d2e:	2311      	movs	r3, #17
 8021d30:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8021d32:	68fb      	ldr	r3, [r7, #12]
 8021d34:	7adb      	ldrb	r3, [r3, #11]
 8021d36:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021d38:	68fb      	ldr	r3, [r7, #12]
 8021d3a:	7a9b      	ldrb	r3, [r3, #10]
 8021d3c:	7cb9      	ldrb	r1, [r7, #18]
 8021d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021d40:	9202      	str	r2, [sp, #8]
 8021d42:	7cfa      	ldrb	r2, [r7, #19]
 8021d44:	9201      	str	r2, [sp, #4]
 8021d46:	9300      	str	r3, [sp, #0]
 8021d48:	460b      	mov	r3, r1
 8021d4a:	687a      	ldr	r2, [r7, #4]
 8021d4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021d4e:	69f8      	ldr	r0, [r7, #28]
 8021d50:	f001 fc0c 	bl	802356c <ip4_output_if_src>
 8021d54:	4603      	mov	r3, r0
 8021d56:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8021d58:	69fa      	ldr	r2, [r7, #28]
 8021d5a:	68bb      	ldr	r3, [r7, #8]
 8021d5c:	429a      	cmp	r2, r3
 8021d5e:	d004      	beq.n	8021d6a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8021d60:	69f8      	ldr	r0, [r7, #28]
 8021d62:	f7ff f8c1 	bl	8020ee8 <pbuf_free>
    q = NULL;
 8021d66:	2300      	movs	r3, #0
 8021d68:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8021d6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8021d6e:	4618      	mov	r0, r3
 8021d70:	3720      	adds	r7, #32
 8021d72:	46bd      	mov	sp, r7
 8021d74:	bd80      	pop	{r7, pc}
 8021d76:	bf00      	nop
 8021d78:	0802a8b4 	.word	0x0802a8b4
 8021d7c:	0802aaa0 	.word	0x0802aaa0
 8021d80:	0802a908 	.word	0x0802a908
 8021d84:	0802aac0 	.word	0x0802aac0
 8021d88:	0802aae0 	.word	0x0802aae0
 8021d8c:	0802ab04 	.word	0x0802ab04
 8021d90:	0802ab28 	.word	0x0802ab28
 8021d94:	0802ab4c 	.word	0x0802ab4c

08021d98 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021d98:	b580      	push	{r7, lr}
 8021d9a:	b086      	sub	sp, #24
 8021d9c:	af00      	add	r7, sp, #0
 8021d9e:	60f8      	str	r0, [r7, #12]
 8021da0:	60b9      	str	r1, [r7, #8]
 8021da2:	4613      	mov	r3, r2
 8021da4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021da6:	68bb      	ldr	r3, [r7, #8]
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d101      	bne.n	8021db0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8021dac:	4b39      	ldr	r3, [pc, #228]	; (8021e94 <udp_bind+0xfc>)
 8021dae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021db0:	68fb      	ldr	r3, [r7, #12]
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	d109      	bne.n	8021dca <udp_bind+0x32>
 8021db6:	4b38      	ldr	r3, [pc, #224]	; (8021e98 <udp_bind+0x100>)
 8021db8:	f240 32b7 	movw	r2, #951	; 0x3b7
 8021dbc:	4937      	ldr	r1, [pc, #220]	; (8021e9c <udp_bind+0x104>)
 8021dbe:	4838      	ldr	r0, [pc, #224]	; (8021ea0 <udp_bind+0x108>)
 8021dc0:	f002 fdca 	bl	8024958 <iprintf>
 8021dc4:	f06f 030f 	mvn.w	r3, #15
 8021dc8:	e060      	b.n	8021e8c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8021dca:	2300      	movs	r3, #0
 8021dcc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021dce:	4b35      	ldr	r3, [pc, #212]	; (8021ea4 <udp_bind+0x10c>)
 8021dd0:	681b      	ldr	r3, [r3, #0]
 8021dd2:	617b      	str	r3, [r7, #20]
 8021dd4:	e009      	b.n	8021dea <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021dd6:	68fa      	ldr	r2, [r7, #12]
 8021dd8:	697b      	ldr	r3, [r7, #20]
 8021dda:	429a      	cmp	r2, r3
 8021ddc:	d102      	bne.n	8021de4 <udp_bind+0x4c>
      rebind = 1;
 8021dde:	2301      	movs	r3, #1
 8021de0:	74fb      	strb	r3, [r7, #19]
      break;
 8021de2:	e005      	b.n	8021df0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021de4:	697b      	ldr	r3, [r7, #20]
 8021de6:	68db      	ldr	r3, [r3, #12]
 8021de8:	617b      	str	r3, [r7, #20]
 8021dea:	697b      	ldr	r3, [r7, #20]
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	d1f2      	bne.n	8021dd6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021df0:	88fb      	ldrh	r3, [r7, #6]
 8021df2:	2b00      	cmp	r3, #0
 8021df4:	d109      	bne.n	8021e0a <udp_bind+0x72>
    port = udp_new_port();
 8021df6:	f7ff fc69 	bl	80216cc <udp_new_port>
 8021dfa:	4603      	mov	r3, r0
 8021dfc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8021dfe:	88fb      	ldrh	r3, [r7, #6]
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	d12c      	bne.n	8021e5e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8021e04:	f06f 0307 	mvn.w	r3, #7
 8021e08:	e040      	b.n	8021e8c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e0a:	4b26      	ldr	r3, [pc, #152]	; (8021ea4 <udp_bind+0x10c>)
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	617b      	str	r3, [r7, #20]
 8021e10:	e022      	b.n	8021e58 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8021e12:	68fa      	ldr	r2, [r7, #12]
 8021e14:	697b      	ldr	r3, [r7, #20]
 8021e16:	429a      	cmp	r2, r3
 8021e18:	d01b      	beq.n	8021e52 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8021e1a:	697b      	ldr	r3, [r7, #20]
 8021e1c:	8a5b      	ldrh	r3, [r3, #18]
 8021e1e:	88fa      	ldrh	r2, [r7, #6]
 8021e20:	429a      	cmp	r2, r3
 8021e22:	d116      	bne.n	8021e52 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e24:	697b      	ldr	r3, [r7, #20]
 8021e26:	681a      	ldr	r2, [r3, #0]
 8021e28:	68bb      	ldr	r3, [r7, #8]
 8021e2a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8021e2c:	429a      	cmp	r2, r3
 8021e2e:	d00d      	beq.n	8021e4c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e30:	68bb      	ldr	r3, [r7, #8]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	d00a      	beq.n	8021e4c <udp_bind+0xb4>
 8021e36:	68bb      	ldr	r3, [r7, #8]
 8021e38:	681b      	ldr	r3, [r3, #0]
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	d006      	beq.n	8021e4c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021e3e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d003      	beq.n	8021e4c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021e44:	697b      	ldr	r3, [r7, #20]
 8021e46:	681b      	ldr	r3, [r3, #0]
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d102      	bne.n	8021e52 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8021e4c:	f06f 0307 	mvn.w	r3, #7
 8021e50:	e01c      	b.n	8021e8c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021e52:	697b      	ldr	r3, [r7, #20]
 8021e54:	68db      	ldr	r3, [r3, #12]
 8021e56:	617b      	str	r3, [r7, #20]
 8021e58:	697b      	ldr	r3, [r7, #20]
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d1d9      	bne.n	8021e12 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021e5e:	68bb      	ldr	r3, [r7, #8]
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d002      	beq.n	8021e6a <udp_bind+0xd2>
 8021e64:	68bb      	ldr	r3, [r7, #8]
 8021e66:	681b      	ldr	r3, [r3, #0]
 8021e68:	e000      	b.n	8021e6c <udp_bind+0xd4>
 8021e6a:	2300      	movs	r3, #0
 8021e6c:	68fa      	ldr	r2, [r7, #12]
 8021e6e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8021e70:	68fb      	ldr	r3, [r7, #12]
 8021e72:	88fa      	ldrh	r2, [r7, #6]
 8021e74:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8021e76:	7cfb      	ldrb	r3, [r7, #19]
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d106      	bne.n	8021e8a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8021e7c:	4b09      	ldr	r3, [pc, #36]	; (8021ea4 <udp_bind+0x10c>)
 8021e7e:	681a      	ldr	r2, [r3, #0]
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8021e84:	4a07      	ldr	r2, [pc, #28]	; (8021ea4 <udp_bind+0x10c>)
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8021e8a:	2300      	movs	r3, #0
}
 8021e8c:	4618      	mov	r0, r3
 8021e8e:	3718      	adds	r7, #24
 8021e90:	46bd      	mov	sp, r7
 8021e92:	bd80      	pop	{r7, pc}
 8021e94:	0802b794 	.word	0x0802b794
 8021e98:	0802a8b4 	.word	0x0802a8b4
 8021e9c:	0802ab7c 	.word	0x0802ab7c
 8021ea0:	0802a908 	.word	0x0802a908
 8021ea4:	20019510 	.word	0x20019510

08021ea8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8021ea8:	b580      	push	{r7, lr}
 8021eaa:	b084      	sub	sp, #16
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	60f8      	str	r0, [r7, #12]
 8021eb0:	60b9      	str	r1, [r7, #8]
 8021eb2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021eb4:	68fb      	ldr	r3, [r7, #12]
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d107      	bne.n	8021eca <udp_recv+0x22>
 8021eba:	4b08      	ldr	r3, [pc, #32]	; (8021edc <udp_recv+0x34>)
 8021ebc:	f240 428a 	movw	r2, #1162	; 0x48a
 8021ec0:	4907      	ldr	r1, [pc, #28]	; (8021ee0 <udp_recv+0x38>)
 8021ec2:	4808      	ldr	r0, [pc, #32]	; (8021ee4 <udp_recv+0x3c>)
 8021ec4:	f002 fd48 	bl	8024958 <iprintf>
 8021ec8:	e005      	b.n	8021ed6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8021eca:	68fb      	ldr	r3, [r7, #12]
 8021ecc:	68ba      	ldr	r2, [r7, #8]
 8021ece:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8021ed0:	68fb      	ldr	r3, [r7, #12]
 8021ed2:	687a      	ldr	r2, [r7, #4]
 8021ed4:	61da      	str	r2, [r3, #28]
}
 8021ed6:	3710      	adds	r7, #16
 8021ed8:	46bd      	mov	sp, r7
 8021eda:	bd80      	pop	{r7, pc}
 8021edc:	0802a8b4 	.word	0x0802a8b4
 8021ee0:	0802abe8 	.word	0x0802abe8
 8021ee4:	0802a908 	.word	0x0802a908

08021ee8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8021ee8:	b580      	push	{r7, lr}
 8021eea:	b084      	sub	sp, #16
 8021eec:	af00      	add	r7, sp, #0
 8021eee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d107      	bne.n	8021f06 <udp_remove+0x1e>
 8021ef6:	4b19      	ldr	r3, [pc, #100]	; (8021f5c <udp_remove+0x74>)
 8021ef8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8021efc:	4918      	ldr	r1, [pc, #96]	; (8021f60 <udp_remove+0x78>)
 8021efe:	4819      	ldr	r0, [pc, #100]	; (8021f64 <udp_remove+0x7c>)
 8021f00:	f002 fd2a 	bl	8024958 <iprintf>
 8021f04:	e026      	b.n	8021f54 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021f06:	4b18      	ldr	r3, [pc, #96]	; (8021f68 <udp_remove+0x80>)
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	687a      	ldr	r2, [r7, #4]
 8021f0c:	429a      	cmp	r2, r3
 8021f0e:	d105      	bne.n	8021f1c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8021f10:	4b15      	ldr	r3, [pc, #84]	; (8021f68 <udp_remove+0x80>)
 8021f12:	681b      	ldr	r3, [r3, #0]
 8021f14:	68db      	ldr	r3, [r3, #12]
 8021f16:	4a14      	ldr	r2, [pc, #80]	; (8021f68 <udp_remove+0x80>)
 8021f18:	6013      	str	r3, [r2, #0]
 8021f1a:	e017      	b.n	8021f4c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021f1c:	4b12      	ldr	r3, [pc, #72]	; (8021f68 <udp_remove+0x80>)
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	60fb      	str	r3, [r7, #12]
 8021f22:	e010      	b.n	8021f46 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8021f24:	68fb      	ldr	r3, [r7, #12]
 8021f26:	68db      	ldr	r3, [r3, #12]
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	d009      	beq.n	8021f40 <udp_remove+0x58>
 8021f2c:	68fb      	ldr	r3, [r7, #12]
 8021f2e:	68db      	ldr	r3, [r3, #12]
 8021f30:	687a      	ldr	r2, [r7, #4]
 8021f32:	429a      	cmp	r2, r3
 8021f34:	d104      	bne.n	8021f40 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	68da      	ldr	r2, [r3, #12]
 8021f3a:	68fb      	ldr	r3, [r7, #12]
 8021f3c:	60da      	str	r2, [r3, #12]
        break;
 8021f3e:	e005      	b.n	8021f4c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021f40:	68fb      	ldr	r3, [r7, #12]
 8021f42:	68db      	ldr	r3, [r3, #12]
 8021f44:	60fb      	str	r3, [r7, #12]
 8021f46:	68fb      	ldr	r3, [r7, #12]
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	d1eb      	bne.n	8021f24 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8021f4c:	6879      	ldr	r1, [r7, #4]
 8021f4e:	2000      	movs	r0, #0
 8021f50:	f7fe f8ba 	bl	80200c8 <memp_free>
}
 8021f54:	3710      	adds	r7, #16
 8021f56:	46bd      	mov	sp, r7
 8021f58:	bd80      	pop	{r7, pc}
 8021f5a:	bf00      	nop
 8021f5c:	0802a8b4 	.word	0x0802a8b4
 8021f60:	0802ac00 	.word	0x0802ac00
 8021f64:	0802a908 	.word	0x0802a908
 8021f68:	20019510 	.word	0x20019510

08021f6c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8021f6c:	b580      	push	{r7, lr}
 8021f6e:	b082      	sub	sp, #8
 8021f70:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8021f72:	2000      	movs	r0, #0
 8021f74:	f7fe f838 	bl	801ffe8 <memp_malloc>
 8021f78:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d007      	beq.n	8021f90 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8021f80:	2220      	movs	r2, #32
 8021f82:	2100      	movs	r1, #0
 8021f84:	6878      	ldr	r0, [r7, #4]
 8021f86:	f002 fbff 	bl	8024788 <memset>
    pcb->ttl = UDP_TTL;
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	22ff      	movs	r2, #255	; 0xff
 8021f8e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8021f90:	687b      	ldr	r3, [r7, #4]
}
 8021f92:	4618      	mov	r0, r3
 8021f94:	3708      	adds	r7, #8
 8021f96:	46bd      	mov	sp, r7
 8021f98:	bd80      	pop	{r7, pc}
	...

08021f9c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021f9c:	b480      	push	{r7}
 8021f9e:	b085      	sub	sp, #20
 8021fa0:	af00      	add	r7, sp, #0
 8021fa2:	6078      	str	r0, [r7, #4]
 8021fa4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	2b00      	cmp	r3, #0
 8021faa:	d01e      	beq.n	8021fea <udp_netif_ip_addr_changed+0x4e>
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	681b      	ldr	r3, [r3, #0]
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	d01a      	beq.n	8021fea <udp_netif_ip_addr_changed+0x4e>
 8021fb4:	683b      	ldr	r3, [r7, #0]
 8021fb6:	2b00      	cmp	r3, #0
 8021fb8:	d017      	beq.n	8021fea <udp_netif_ip_addr_changed+0x4e>
 8021fba:	683b      	ldr	r3, [r7, #0]
 8021fbc:	681b      	ldr	r3, [r3, #0]
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d013      	beq.n	8021fea <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021fc2:	4b0d      	ldr	r3, [pc, #52]	; (8021ff8 <udp_netif_ip_addr_changed+0x5c>)
 8021fc4:	681b      	ldr	r3, [r3, #0]
 8021fc6:	60fb      	str	r3, [r7, #12]
 8021fc8:	e00c      	b.n	8021fe4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8021fca:	68fb      	ldr	r3, [r7, #12]
 8021fcc:	681a      	ldr	r2, [r3, #0]
 8021fce:	687b      	ldr	r3, [r7, #4]
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	429a      	cmp	r2, r3
 8021fd4:	d103      	bne.n	8021fde <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8021fd6:	683b      	ldr	r3, [r7, #0]
 8021fd8:	681a      	ldr	r2, [r3, #0]
 8021fda:	68fb      	ldr	r3, [r7, #12]
 8021fdc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021fde:	68fb      	ldr	r3, [r7, #12]
 8021fe0:	68db      	ldr	r3, [r3, #12]
 8021fe2:	60fb      	str	r3, [r7, #12]
 8021fe4:	68fb      	ldr	r3, [r7, #12]
 8021fe6:	2b00      	cmp	r3, #0
 8021fe8:	d1ef      	bne.n	8021fca <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8021fea:	bf00      	nop
 8021fec:	3714      	adds	r7, #20
 8021fee:	46bd      	mov	sp, r7
 8021ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff4:	4770      	bx	lr
 8021ff6:	bf00      	nop
 8021ff8:	20019510 	.word	0x20019510

08021ffc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b082      	sub	sp, #8
 8022000:	af00      	add	r7, sp, #0
 8022002:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8022004:	4915      	ldr	r1, [pc, #84]	; (802205c <etharp_free_entry+0x60>)
 8022006:	687a      	ldr	r2, [r7, #4]
 8022008:	4613      	mov	r3, r2
 802200a:	005b      	lsls	r3, r3, #1
 802200c:	4413      	add	r3, r2
 802200e:	00db      	lsls	r3, r3, #3
 8022010:	440b      	add	r3, r1
 8022012:	681b      	ldr	r3, [r3, #0]
 8022014:	2b00      	cmp	r3, #0
 8022016:	d013      	beq.n	8022040 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8022018:	4910      	ldr	r1, [pc, #64]	; (802205c <etharp_free_entry+0x60>)
 802201a:	687a      	ldr	r2, [r7, #4]
 802201c:	4613      	mov	r3, r2
 802201e:	005b      	lsls	r3, r3, #1
 8022020:	4413      	add	r3, r2
 8022022:	00db      	lsls	r3, r3, #3
 8022024:	440b      	add	r3, r1
 8022026:	681b      	ldr	r3, [r3, #0]
 8022028:	4618      	mov	r0, r3
 802202a:	f7fe ff5d 	bl	8020ee8 <pbuf_free>
    arp_table[i].q = NULL;
 802202e:	490b      	ldr	r1, [pc, #44]	; (802205c <etharp_free_entry+0x60>)
 8022030:	687a      	ldr	r2, [r7, #4]
 8022032:	4613      	mov	r3, r2
 8022034:	005b      	lsls	r3, r3, #1
 8022036:	4413      	add	r3, r2
 8022038:	00db      	lsls	r3, r3, #3
 802203a:	440b      	add	r3, r1
 802203c:	2200      	movs	r2, #0
 802203e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8022040:	4906      	ldr	r1, [pc, #24]	; (802205c <etharp_free_entry+0x60>)
 8022042:	687a      	ldr	r2, [r7, #4]
 8022044:	4613      	mov	r3, r2
 8022046:	005b      	lsls	r3, r3, #1
 8022048:	4413      	add	r3, r2
 802204a:	00db      	lsls	r3, r3, #3
 802204c:	440b      	add	r3, r1
 802204e:	3314      	adds	r3, #20
 8022050:	2200      	movs	r2, #0
 8022052:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8022054:	bf00      	nop
 8022056:	3708      	adds	r7, #8
 8022058:	46bd      	mov	sp, r7
 802205a:	bd80      	pop	{r7, pc}
 802205c:	20019514 	.word	0x20019514

08022060 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8022060:	b580      	push	{r7, lr}
 8022062:	b082      	sub	sp, #8
 8022064:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022066:	2300      	movs	r3, #0
 8022068:	607b      	str	r3, [r7, #4]
 802206a:	e096      	b.n	802219a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 802206c:	494f      	ldr	r1, [pc, #316]	; (80221ac <etharp_tmr+0x14c>)
 802206e:	687a      	ldr	r2, [r7, #4]
 8022070:	4613      	mov	r3, r2
 8022072:	005b      	lsls	r3, r3, #1
 8022074:	4413      	add	r3, r2
 8022076:	00db      	lsls	r3, r3, #3
 8022078:	440b      	add	r3, r1
 802207a:	3314      	adds	r3, #20
 802207c:	781b      	ldrb	r3, [r3, #0]
 802207e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8022080:	78fb      	ldrb	r3, [r7, #3]
 8022082:	2b00      	cmp	r3, #0
 8022084:	f000 8086 	beq.w	8022194 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8022088:	4948      	ldr	r1, [pc, #288]	; (80221ac <etharp_tmr+0x14c>)
 802208a:	687a      	ldr	r2, [r7, #4]
 802208c:	4613      	mov	r3, r2
 802208e:	005b      	lsls	r3, r3, #1
 8022090:	4413      	add	r3, r2
 8022092:	00db      	lsls	r3, r3, #3
 8022094:	440b      	add	r3, r1
 8022096:	3312      	adds	r3, #18
 8022098:	881b      	ldrh	r3, [r3, #0]
 802209a:	3301      	adds	r3, #1
 802209c:	b298      	uxth	r0, r3
 802209e:	4943      	ldr	r1, [pc, #268]	; (80221ac <etharp_tmr+0x14c>)
 80220a0:	687a      	ldr	r2, [r7, #4]
 80220a2:	4613      	mov	r3, r2
 80220a4:	005b      	lsls	r3, r3, #1
 80220a6:	4413      	add	r3, r2
 80220a8:	00db      	lsls	r3, r3, #3
 80220aa:	440b      	add	r3, r1
 80220ac:	3312      	adds	r3, #18
 80220ae:	4602      	mov	r2, r0
 80220b0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80220b2:	493e      	ldr	r1, [pc, #248]	; (80221ac <etharp_tmr+0x14c>)
 80220b4:	687a      	ldr	r2, [r7, #4]
 80220b6:	4613      	mov	r3, r2
 80220b8:	005b      	lsls	r3, r3, #1
 80220ba:	4413      	add	r3, r2
 80220bc:	00db      	lsls	r3, r3, #3
 80220be:	440b      	add	r3, r1
 80220c0:	3312      	adds	r3, #18
 80220c2:	881b      	ldrh	r3, [r3, #0]
 80220c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80220c8:	d215      	bcs.n	80220f6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80220ca:	4938      	ldr	r1, [pc, #224]	; (80221ac <etharp_tmr+0x14c>)
 80220cc:	687a      	ldr	r2, [r7, #4]
 80220ce:	4613      	mov	r3, r2
 80220d0:	005b      	lsls	r3, r3, #1
 80220d2:	4413      	add	r3, r2
 80220d4:	00db      	lsls	r3, r3, #3
 80220d6:	440b      	add	r3, r1
 80220d8:	3314      	adds	r3, #20
 80220da:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80220dc:	2b01      	cmp	r3, #1
 80220de:	d10e      	bne.n	80220fe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80220e0:	4932      	ldr	r1, [pc, #200]	; (80221ac <etharp_tmr+0x14c>)
 80220e2:	687a      	ldr	r2, [r7, #4]
 80220e4:	4613      	mov	r3, r2
 80220e6:	005b      	lsls	r3, r3, #1
 80220e8:	4413      	add	r3, r2
 80220ea:	00db      	lsls	r3, r3, #3
 80220ec:	440b      	add	r3, r1
 80220ee:	3312      	adds	r3, #18
 80220f0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80220f2:	2b04      	cmp	r3, #4
 80220f4:	d903      	bls.n	80220fe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80220f6:	6878      	ldr	r0, [r7, #4]
 80220f8:	f7ff ff80 	bl	8021ffc <etharp_free_entry>
 80220fc:	e04a      	b.n	8022194 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80220fe:	492b      	ldr	r1, [pc, #172]	; (80221ac <etharp_tmr+0x14c>)
 8022100:	687a      	ldr	r2, [r7, #4]
 8022102:	4613      	mov	r3, r2
 8022104:	005b      	lsls	r3, r3, #1
 8022106:	4413      	add	r3, r2
 8022108:	00db      	lsls	r3, r3, #3
 802210a:	440b      	add	r3, r1
 802210c:	3314      	adds	r3, #20
 802210e:	781b      	ldrb	r3, [r3, #0]
 8022110:	2b03      	cmp	r3, #3
 8022112:	d10a      	bne.n	802212a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8022114:	4925      	ldr	r1, [pc, #148]	; (80221ac <etharp_tmr+0x14c>)
 8022116:	687a      	ldr	r2, [r7, #4]
 8022118:	4613      	mov	r3, r2
 802211a:	005b      	lsls	r3, r3, #1
 802211c:	4413      	add	r3, r2
 802211e:	00db      	lsls	r3, r3, #3
 8022120:	440b      	add	r3, r1
 8022122:	3314      	adds	r3, #20
 8022124:	2204      	movs	r2, #4
 8022126:	701a      	strb	r2, [r3, #0]
 8022128:	e034      	b.n	8022194 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802212a:	4920      	ldr	r1, [pc, #128]	; (80221ac <etharp_tmr+0x14c>)
 802212c:	687a      	ldr	r2, [r7, #4]
 802212e:	4613      	mov	r3, r2
 8022130:	005b      	lsls	r3, r3, #1
 8022132:	4413      	add	r3, r2
 8022134:	00db      	lsls	r3, r3, #3
 8022136:	440b      	add	r3, r1
 8022138:	3314      	adds	r3, #20
 802213a:	781b      	ldrb	r3, [r3, #0]
 802213c:	2b04      	cmp	r3, #4
 802213e:	d10a      	bne.n	8022156 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8022140:	491a      	ldr	r1, [pc, #104]	; (80221ac <etharp_tmr+0x14c>)
 8022142:	687a      	ldr	r2, [r7, #4]
 8022144:	4613      	mov	r3, r2
 8022146:	005b      	lsls	r3, r3, #1
 8022148:	4413      	add	r3, r2
 802214a:	00db      	lsls	r3, r3, #3
 802214c:	440b      	add	r3, r1
 802214e:	3314      	adds	r3, #20
 8022150:	2202      	movs	r2, #2
 8022152:	701a      	strb	r2, [r3, #0]
 8022154:	e01e      	b.n	8022194 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022156:	4915      	ldr	r1, [pc, #84]	; (80221ac <etharp_tmr+0x14c>)
 8022158:	687a      	ldr	r2, [r7, #4]
 802215a:	4613      	mov	r3, r2
 802215c:	005b      	lsls	r3, r3, #1
 802215e:	4413      	add	r3, r2
 8022160:	00db      	lsls	r3, r3, #3
 8022162:	440b      	add	r3, r1
 8022164:	3314      	adds	r3, #20
 8022166:	781b      	ldrb	r3, [r3, #0]
 8022168:	2b01      	cmp	r3, #1
 802216a:	d113      	bne.n	8022194 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802216c:	490f      	ldr	r1, [pc, #60]	; (80221ac <etharp_tmr+0x14c>)
 802216e:	687a      	ldr	r2, [r7, #4]
 8022170:	4613      	mov	r3, r2
 8022172:	005b      	lsls	r3, r3, #1
 8022174:	4413      	add	r3, r2
 8022176:	00db      	lsls	r3, r3, #3
 8022178:	440b      	add	r3, r1
 802217a:	3308      	adds	r3, #8
 802217c:	6818      	ldr	r0, [r3, #0]
 802217e:	687a      	ldr	r2, [r7, #4]
 8022180:	4613      	mov	r3, r2
 8022182:	005b      	lsls	r3, r3, #1
 8022184:	4413      	add	r3, r2
 8022186:	00db      	lsls	r3, r3, #3
 8022188:	4a08      	ldr	r2, [pc, #32]	; (80221ac <etharp_tmr+0x14c>)
 802218a:	4413      	add	r3, r2
 802218c:	3304      	adds	r3, #4
 802218e:	4619      	mov	r1, r3
 8022190:	f000 fe6e 	bl	8022e70 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	3301      	adds	r3, #1
 8022198:	607b      	str	r3, [r7, #4]
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	2b31      	cmp	r3, #49	; 0x31
 802219e:	f77f af65 	ble.w	802206c <etharp_tmr+0xc>
      }
    }
  }
}
 80221a2:	bf00      	nop
 80221a4:	bf00      	nop
 80221a6:	3708      	adds	r7, #8
 80221a8:	46bd      	mov	sp, r7
 80221aa:	bd80      	pop	{r7, pc}
 80221ac:	20019514 	.word	0x20019514

080221b0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b08a      	sub	sp, #40	; 0x28
 80221b4:	af00      	add	r7, sp, #0
 80221b6:	60f8      	str	r0, [r7, #12]
 80221b8:	460b      	mov	r3, r1
 80221ba:	607a      	str	r2, [r7, #4]
 80221bc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80221be:	2332      	movs	r3, #50	; 0x32
 80221c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80221c2:	2332      	movs	r3, #50	; 0x32
 80221c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80221c6:	2332      	movs	r3, #50	; 0x32
 80221c8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80221ca:	2300      	movs	r3, #0
 80221cc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80221ce:	2332      	movs	r3, #50	; 0x32
 80221d0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80221d2:	2300      	movs	r3, #0
 80221d4:	83bb      	strh	r3, [r7, #28]
 80221d6:	2300      	movs	r3, #0
 80221d8:	837b      	strh	r3, [r7, #26]
 80221da:	2300      	movs	r3, #0
 80221dc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80221de:	2300      	movs	r3, #0
 80221e0:	843b      	strh	r3, [r7, #32]
 80221e2:	e0ae      	b.n	8022342 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80221e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80221e8:	49a6      	ldr	r1, [pc, #664]	; (8022484 <etharp_find_entry+0x2d4>)
 80221ea:	4613      	mov	r3, r2
 80221ec:	005b      	lsls	r3, r3, #1
 80221ee:	4413      	add	r3, r2
 80221f0:	00db      	lsls	r3, r3, #3
 80221f2:	440b      	add	r3, r1
 80221f4:	3314      	adds	r3, #20
 80221f6:	781b      	ldrb	r3, [r3, #0]
 80221f8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80221fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80221fe:	2b32      	cmp	r3, #50	; 0x32
 8022200:	d105      	bne.n	802220e <etharp_find_entry+0x5e>
 8022202:	7dfb      	ldrb	r3, [r7, #23]
 8022204:	2b00      	cmp	r3, #0
 8022206:	d102      	bne.n	802220e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8022208:	8c3b      	ldrh	r3, [r7, #32]
 802220a:	847b      	strh	r3, [r7, #34]	; 0x22
 802220c:	e095      	b.n	802233a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 802220e:	7dfb      	ldrb	r3, [r7, #23]
 8022210:	2b00      	cmp	r3, #0
 8022212:	f000 8092 	beq.w	802233a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8022216:	7dfb      	ldrb	r3, [r7, #23]
 8022218:	2b01      	cmp	r3, #1
 802221a:	d009      	beq.n	8022230 <etharp_find_entry+0x80>
 802221c:	7dfb      	ldrb	r3, [r7, #23]
 802221e:	2b01      	cmp	r3, #1
 8022220:	d806      	bhi.n	8022230 <etharp_find_entry+0x80>
 8022222:	4b99      	ldr	r3, [pc, #612]	; (8022488 <etharp_find_entry+0x2d8>)
 8022224:	f240 1223 	movw	r2, #291	; 0x123
 8022228:	4998      	ldr	r1, [pc, #608]	; (802248c <etharp_find_entry+0x2dc>)
 802222a:	4899      	ldr	r0, [pc, #612]	; (8022490 <etharp_find_entry+0x2e0>)
 802222c:	f002 fb94 	bl	8024958 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8022230:	68fb      	ldr	r3, [r7, #12]
 8022232:	2b00      	cmp	r3, #0
 8022234:	d020      	beq.n	8022278 <etharp_find_entry+0xc8>
 8022236:	68fb      	ldr	r3, [r7, #12]
 8022238:	6819      	ldr	r1, [r3, #0]
 802223a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802223e:	4891      	ldr	r0, [pc, #580]	; (8022484 <etharp_find_entry+0x2d4>)
 8022240:	4613      	mov	r3, r2
 8022242:	005b      	lsls	r3, r3, #1
 8022244:	4413      	add	r3, r2
 8022246:	00db      	lsls	r3, r3, #3
 8022248:	4403      	add	r3, r0
 802224a:	3304      	adds	r3, #4
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	4299      	cmp	r1, r3
 8022250:	d112      	bne.n	8022278 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	2b00      	cmp	r3, #0
 8022256:	d00c      	beq.n	8022272 <etharp_find_entry+0xc2>
 8022258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802225c:	4989      	ldr	r1, [pc, #548]	; (8022484 <etharp_find_entry+0x2d4>)
 802225e:	4613      	mov	r3, r2
 8022260:	005b      	lsls	r3, r3, #1
 8022262:	4413      	add	r3, r2
 8022264:	00db      	lsls	r3, r3, #3
 8022266:	440b      	add	r3, r1
 8022268:	3308      	adds	r3, #8
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	687a      	ldr	r2, [r7, #4]
 802226e:	429a      	cmp	r2, r3
 8022270:	d102      	bne.n	8022278 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8022272:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022276:	e100      	b.n	802247a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8022278:	7dfb      	ldrb	r3, [r7, #23]
 802227a:	2b01      	cmp	r3, #1
 802227c:	d140      	bne.n	8022300 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802227e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022282:	4980      	ldr	r1, [pc, #512]	; (8022484 <etharp_find_entry+0x2d4>)
 8022284:	4613      	mov	r3, r2
 8022286:	005b      	lsls	r3, r3, #1
 8022288:	4413      	add	r3, r2
 802228a:	00db      	lsls	r3, r3, #3
 802228c:	440b      	add	r3, r1
 802228e:	681b      	ldr	r3, [r3, #0]
 8022290:	2b00      	cmp	r3, #0
 8022292:	d01a      	beq.n	80222ca <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8022294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022298:	497a      	ldr	r1, [pc, #488]	; (8022484 <etharp_find_entry+0x2d4>)
 802229a:	4613      	mov	r3, r2
 802229c:	005b      	lsls	r3, r3, #1
 802229e:	4413      	add	r3, r2
 80222a0:	00db      	lsls	r3, r3, #3
 80222a2:	440b      	add	r3, r1
 80222a4:	3312      	adds	r3, #18
 80222a6:	881b      	ldrh	r3, [r3, #0]
 80222a8:	8bba      	ldrh	r2, [r7, #28]
 80222aa:	429a      	cmp	r2, r3
 80222ac:	d845      	bhi.n	802233a <etharp_find_entry+0x18a>
            old_queue = i;
 80222ae:	8c3b      	ldrh	r3, [r7, #32]
 80222b0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80222b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80222b6:	4973      	ldr	r1, [pc, #460]	; (8022484 <etharp_find_entry+0x2d4>)
 80222b8:	4613      	mov	r3, r2
 80222ba:	005b      	lsls	r3, r3, #1
 80222bc:	4413      	add	r3, r2
 80222be:	00db      	lsls	r3, r3, #3
 80222c0:	440b      	add	r3, r1
 80222c2:	3312      	adds	r3, #18
 80222c4:	881b      	ldrh	r3, [r3, #0]
 80222c6:	83bb      	strh	r3, [r7, #28]
 80222c8:	e037      	b.n	802233a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80222ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80222ce:	496d      	ldr	r1, [pc, #436]	; (8022484 <etharp_find_entry+0x2d4>)
 80222d0:	4613      	mov	r3, r2
 80222d2:	005b      	lsls	r3, r3, #1
 80222d4:	4413      	add	r3, r2
 80222d6:	00db      	lsls	r3, r3, #3
 80222d8:	440b      	add	r3, r1
 80222da:	3312      	adds	r3, #18
 80222dc:	881b      	ldrh	r3, [r3, #0]
 80222de:	8b7a      	ldrh	r2, [r7, #26]
 80222e0:	429a      	cmp	r2, r3
 80222e2:	d82a      	bhi.n	802233a <etharp_find_entry+0x18a>
            old_pending = i;
 80222e4:	8c3b      	ldrh	r3, [r7, #32]
 80222e6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80222e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80222ec:	4965      	ldr	r1, [pc, #404]	; (8022484 <etharp_find_entry+0x2d4>)
 80222ee:	4613      	mov	r3, r2
 80222f0:	005b      	lsls	r3, r3, #1
 80222f2:	4413      	add	r3, r2
 80222f4:	00db      	lsls	r3, r3, #3
 80222f6:	440b      	add	r3, r1
 80222f8:	3312      	adds	r3, #18
 80222fa:	881b      	ldrh	r3, [r3, #0]
 80222fc:	837b      	strh	r3, [r7, #26]
 80222fe:	e01c      	b.n	802233a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8022300:	7dfb      	ldrb	r3, [r7, #23]
 8022302:	2b01      	cmp	r3, #1
 8022304:	d919      	bls.n	802233a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8022306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802230a:	495e      	ldr	r1, [pc, #376]	; (8022484 <etharp_find_entry+0x2d4>)
 802230c:	4613      	mov	r3, r2
 802230e:	005b      	lsls	r3, r3, #1
 8022310:	4413      	add	r3, r2
 8022312:	00db      	lsls	r3, r3, #3
 8022314:	440b      	add	r3, r1
 8022316:	3312      	adds	r3, #18
 8022318:	881b      	ldrh	r3, [r3, #0]
 802231a:	8b3a      	ldrh	r2, [r7, #24]
 802231c:	429a      	cmp	r2, r3
 802231e:	d80c      	bhi.n	802233a <etharp_find_entry+0x18a>
            old_stable = i;
 8022320:	8c3b      	ldrh	r3, [r7, #32]
 8022322:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8022324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022328:	4956      	ldr	r1, [pc, #344]	; (8022484 <etharp_find_entry+0x2d4>)
 802232a:	4613      	mov	r3, r2
 802232c:	005b      	lsls	r3, r3, #1
 802232e:	4413      	add	r3, r2
 8022330:	00db      	lsls	r3, r3, #3
 8022332:	440b      	add	r3, r1
 8022334:	3312      	adds	r3, #18
 8022336:	881b      	ldrh	r3, [r3, #0]
 8022338:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802233a:	8c3b      	ldrh	r3, [r7, #32]
 802233c:	3301      	adds	r3, #1
 802233e:	b29b      	uxth	r3, r3
 8022340:	843b      	strh	r3, [r7, #32]
 8022342:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022346:	2b31      	cmp	r3, #49	; 0x31
 8022348:	f77f af4c 	ble.w	80221e4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 802234c:	7afb      	ldrb	r3, [r7, #11]
 802234e:	f003 0302 	and.w	r3, r3, #2
 8022352:	2b00      	cmp	r3, #0
 8022354:	d108      	bne.n	8022368 <etharp_find_entry+0x1b8>
 8022356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802235a:	2b32      	cmp	r3, #50	; 0x32
 802235c:	d107      	bne.n	802236e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802235e:	7afb      	ldrb	r3, [r7, #11]
 8022360:	f003 0301 	and.w	r3, r3, #1
 8022364:	2b00      	cmp	r3, #0
 8022366:	d102      	bne.n	802236e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8022368:	f04f 33ff 	mov.w	r3, #4294967295
 802236c:	e085      	b.n	802247a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802236e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022372:	2b31      	cmp	r3, #49	; 0x31
 8022374:	dc02      	bgt.n	802237c <etharp_find_entry+0x1cc>
    i = empty;
 8022376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022378:	843b      	strh	r3, [r7, #32]
 802237a:	e039      	b.n	80223f0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 802237c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8022380:	2b31      	cmp	r3, #49	; 0x31
 8022382:	dc14      	bgt.n	80223ae <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8022384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022386:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8022388:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802238c:	493d      	ldr	r1, [pc, #244]	; (8022484 <etharp_find_entry+0x2d4>)
 802238e:	4613      	mov	r3, r2
 8022390:	005b      	lsls	r3, r3, #1
 8022392:	4413      	add	r3, r2
 8022394:	00db      	lsls	r3, r3, #3
 8022396:	440b      	add	r3, r1
 8022398:	681b      	ldr	r3, [r3, #0]
 802239a:	2b00      	cmp	r3, #0
 802239c:	d018      	beq.n	80223d0 <etharp_find_entry+0x220>
 802239e:	4b3a      	ldr	r3, [pc, #232]	; (8022488 <etharp_find_entry+0x2d8>)
 80223a0:	f240 126d 	movw	r2, #365	; 0x16d
 80223a4:	493b      	ldr	r1, [pc, #236]	; (8022494 <etharp_find_entry+0x2e4>)
 80223a6:	483a      	ldr	r0, [pc, #232]	; (8022490 <etharp_find_entry+0x2e0>)
 80223a8:	f002 fad6 	bl	8024958 <iprintf>
 80223ac:	e010      	b.n	80223d0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80223ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80223b2:	2b31      	cmp	r3, #49	; 0x31
 80223b4:	dc02      	bgt.n	80223bc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80223b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80223b8:	843b      	strh	r3, [r7, #32]
 80223ba:	e009      	b.n	80223d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80223bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80223c0:	2b31      	cmp	r3, #49	; 0x31
 80223c2:	dc02      	bgt.n	80223ca <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80223c4:	8bfb      	ldrh	r3, [r7, #30]
 80223c6:	843b      	strh	r3, [r7, #32]
 80223c8:	e002      	b.n	80223d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80223ca:	f04f 33ff 	mov.w	r3, #4294967295
 80223ce:	e054      	b.n	802247a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80223d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80223d4:	2b31      	cmp	r3, #49	; 0x31
 80223d6:	dd06      	ble.n	80223e6 <etharp_find_entry+0x236>
 80223d8:	4b2b      	ldr	r3, [pc, #172]	; (8022488 <etharp_find_entry+0x2d8>)
 80223da:	f240 127f 	movw	r2, #383	; 0x17f
 80223de:	492e      	ldr	r1, [pc, #184]	; (8022498 <etharp_find_entry+0x2e8>)
 80223e0:	482b      	ldr	r0, [pc, #172]	; (8022490 <etharp_find_entry+0x2e0>)
 80223e2:	f002 fab9 	bl	8024958 <iprintf>
    etharp_free_entry(i);
 80223e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80223ea:	4618      	mov	r0, r3
 80223ec:	f7ff fe06 	bl	8021ffc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80223f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80223f4:	2b31      	cmp	r3, #49	; 0x31
 80223f6:	dd06      	ble.n	8022406 <etharp_find_entry+0x256>
 80223f8:	4b23      	ldr	r3, [pc, #140]	; (8022488 <etharp_find_entry+0x2d8>)
 80223fa:	f240 1283 	movw	r2, #387	; 0x183
 80223fe:	4926      	ldr	r1, [pc, #152]	; (8022498 <etharp_find_entry+0x2e8>)
 8022400:	4823      	ldr	r0, [pc, #140]	; (8022490 <etharp_find_entry+0x2e0>)
 8022402:	f002 faa9 	bl	8024958 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8022406:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802240a:	491e      	ldr	r1, [pc, #120]	; (8022484 <etharp_find_entry+0x2d4>)
 802240c:	4613      	mov	r3, r2
 802240e:	005b      	lsls	r3, r3, #1
 8022410:	4413      	add	r3, r2
 8022412:	00db      	lsls	r3, r3, #3
 8022414:	440b      	add	r3, r1
 8022416:	3314      	adds	r3, #20
 8022418:	781b      	ldrb	r3, [r3, #0]
 802241a:	2b00      	cmp	r3, #0
 802241c:	d006      	beq.n	802242c <etharp_find_entry+0x27c>
 802241e:	4b1a      	ldr	r3, [pc, #104]	; (8022488 <etharp_find_entry+0x2d8>)
 8022420:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8022424:	491d      	ldr	r1, [pc, #116]	; (802249c <etharp_find_entry+0x2ec>)
 8022426:	481a      	ldr	r0, [pc, #104]	; (8022490 <etharp_find_entry+0x2e0>)
 8022428:	f002 fa96 	bl	8024958 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 802242c:	68fb      	ldr	r3, [r7, #12]
 802242e:	2b00      	cmp	r3, #0
 8022430:	d00b      	beq.n	802244a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8022432:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022436:	68fb      	ldr	r3, [r7, #12]
 8022438:	6819      	ldr	r1, [r3, #0]
 802243a:	4812      	ldr	r0, [pc, #72]	; (8022484 <etharp_find_entry+0x2d4>)
 802243c:	4613      	mov	r3, r2
 802243e:	005b      	lsls	r3, r3, #1
 8022440:	4413      	add	r3, r2
 8022442:	00db      	lsls	r3, r3, #3
 8022444:	4403      	add	r3, r0
 8022446:	3304      	adds	r3, #4
 8022448:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802244a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802244e:	490d      	ldr	r1, [pc, #52]	; (8022484 <etharp_find_entry+0x2d4>)
 8022450:	4613      	mov	r3, r2
 8022452:	005b      	lsls	r3, r3, #1
 8022454:	4413      	add	r3, r2
 8022456:	00db      	lsls	r3, r3, #3
 8022458:	440b      	add	r3, r1
 802245a:	3312      	adds	r3, #18
 802245c:	2200      	movs	r2, #0
 802245e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8022460:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022464:	4907      	ldr	r1, [pc, #28]	; (8022484 <etharp_find_entry+0x2d4>)
 8022466:	4613      	mov	r3, r2
 8022468:	005b      	lsls	r3, r3, #1
 802246a:	4413      	add	r3, r2
 802246c:	00db      	lsls	r3, r3, #3
 802246e:	440b      	add	r3, r1
 8022470:	3308      	adds	r3, #8
 8022472:	687a      	ldr	r2, [r7, #4]
 8022474:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8022476:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802247a:	4618      	mov	r0, r3
 802247c:	3728      	adds	r7, #40	; 0x28
 802247e:	46bd      	mov	sp, r7
 8022480:	bd80      	pop	{r7, pc}
 8022482:	bf00      	nop
 8022484:	20019514 	.word	0x20019514
 8022488:	0802ac18 	.word	0x0802ac18
 802248c:	0802ac50 	.word	0x0802ac50
 8022490:	0802ac90 	.word	0x0802ac90
 8022494:	0802acb8 	.word	0x0802acb8
 8022498:	0802acd0 	.word	0x0802acd0
 802249c:	0802ace4 	.word	0x0802ace4

080224a0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80224a0:	b580      	push	{r7, lr}
 80224a2:	b088      	sub	sp, #32
 80224a4:	af02      	add	r7, sp, #8
 80224a6:	60f8      	str	r0, [r7, #12]
 80224a8:	60b9      	str	r1, [r7, #8]
 80224aa:	607a      	str	r2, [r7, #4]
 80224ac:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80224ae:	68fb      	ldr	r3, [r7, #12]
 80224b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80224b4:	2b06      	cmp	r3, #6
 80224b6:	d006      	beq.n	80224c6 <etharp_update_arp_entry+0x26>
 80224b8:	4b48      	ldr	r3, [pc, #288]	; (80225dc <etharp_update_arp_entry+0x13c>)
 80224ba:	f240 12a9 	movw	r2, #425	; 0x1a9
 80224be:	4948      	ldr	r1, [pc, #288]	; (80225e0 <etharp_update_arp_entry+0x140>)
 80224c0:	4848      	ldr	r0, [pc, #288]	; (80225e4 <etharp_update_arp_entry+0x144>)
 80224c2:	f002 fa49 	bl	8024958 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80224c6:	68bb      	ldr	r3, [r7, #8]
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d012      	beq.n	80224f2 <etharp_update_arp_entry+0x52>
 80224cc:	68bb      	ldr	r3, [r7, #8]
 80224ce:	681b      	ldr	r3, [r3, #0]
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d00e      	beq.n	80224f2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80224d4:	68bb      	ldr	r3, [r7, #8]
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	68f9      	ldr	r1, [r7, #12]
 80224da:	4618      	mov	r0, r3
 80224dc:	f001 f902 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 80224e0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d105      	bne.n	80224f2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80224e6:	68bb      	ldr	r3, [r7, #8]
 80224e8:	681b      	ldr	r3, [r3, #0]
 80224ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80224ee:	2be0      	cmp	r3, #224	; 0xe0
 80224f0:	d102      	bne.n	80224f8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80224f2:	f06f 030f 	mvn.w	r3, #15
 80224f6:	e06c      	b.n	80225d2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80224f8:	78fb      	ldrb	r3, [r7, #3]
 80224fa:	68fa      	ldr	r2, [r7, #12]
 80224fc:	4619      	mov	r1, r3
 80224fe:	68b8      	ldr	r0, [r7, #8]
 8022500:	f7ff fe56 	bl	80221b0 <etharp_find_entry>
 8022504:	4603      	mov	r3, r0
 8022506:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8022508:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802250c:	2b00      	cmp	r3, #0
 802250e:	da02      	bge.n	8022516 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8022510:	8afb      	ldrh	r3, [r7, #22]
 8022512:	b25b      	sxtb	r3, r3
 8022514:	e05d      	b.n	80225d2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8022516:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802251a:	4933      	ldr	r1, [pc, #204]	; (80225e8 <etharp_update_arp_entry+0x148>)
 802251c:	4613      	mov	r3, r2
 802251e:	005b      	lsls	r3, r3, #1
 8022520:	4413      	add	r3, r2
 8022522:	00db      	lsls	r3, r3, #3
 8022524:	440b      	add	r3, r1
 8022526:	3314      	adds	r3, #20
 8022528:	2202      	movs	r2, #2
 802252a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802252c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022530:	492d      	ldr	r1, [pc, #180]	; (80225e8 <etharp_update_arp_entry+0x148>)
 8022532:	4613      	mov	r3, r2
 8022534:	005b      	lsls	r3, r3, #1
 8022536:	4413      	add	r3, r2
 8022538:	00db      	lsls	r3, r3, #3
 802253a:	440b      	add	r3, r1
 802253c:	3308      	adds	r3, #8
 802253e:	68fa      	ldr	r2, [r7, #12]
 8022540:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022542:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022546:	4613      	mov	r3, r2
 8022548:	005b      	lsls	r3, r3, #1
 802254a:	4413      	add	r3, r2
 802254c:	00db      	lsls	r3, r3, #3
 802254e:	3308      	adds	r3, #8
 8022550:	4a25      	ldr	r2, [pc, #148]	; (80225e8 <etharp_update_arp_entry+0x148>)
 8022552:	4413      	add	r3, r2
 8022554:	3304      	adds	r3, #4
 8022556:	2206      	movs	r2, #6
 8022558:	6879      	ldr	r1, [r7, #4]
 802255a:	4618      	mov	r0, r3
 802255c:	f002 f8ec 	bl	8024738 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8022560:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022564:	4920      	ldr	r1, [pc, #128]	; (80225e8 <etharp_update_arp_entry+0x148>)
 8022566:	4613      	mov	r3, r2
 8022568:	005b      	lsls	r3, r3, #1
 802256a:	4413      	add	r3, r2
 802256c:	00db      	lsls	r3, r3, #3
 802256e:	440b      	add	r3, r1
 8022570:	3312      	adds	r3, #18
 8022572:	2200      	movs	r2, #0
 8022574:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8022576:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802257a:	491b      	ldr	r1, [pc, #108]	; (80225e8 <etharp_update_arp_entry+0x148>)
 802257c:	4613      	mov	r3, r2
 802257e:	005b      	lsls	r3, r3, #1
 8022580:	4413      	add	r3, r2
 8022582:	00db      	lsls	r3, r3, #3
 8022584:	440b      	add	r3, r1
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	2b00      	cmp	r3, #0
 802258a:	d021      	beq.n	80225d0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 802258c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022590:	4915      	ldr	r1, [pc, #84]	; (80225e8 <etharp_update_arp_entry+0x148>)
 8022592:	4613      	mov	r3, r2
 8022594:	005b      	lsls	r3, r3, #1
 8022596:	4413      	add	r3, r2
 8022598:	00db      	lsls	r3, r3, #3
 802259a:	440b      	add	r3, r1
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80225a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80225a4:	4910      	ldr	r1, [pc, #64]	; (80225e8 <etharp_update_arp_entry+0x148>)
 80225a6:	4613      	mov	r3, r2
 80225a8:	005b      	lsls	r3, r3, #1
 80225aa:	4413      	add	r3, r2
 80225ac:	00db      	lsls	r3, r3, #3
 80225ae:	440b      	add	r3, r1
 80225b0:	2200      	movs	r2, #0
 80225b2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80225b4:	68fb      	ldr	r3, [r7, #12]
 80225b6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80225ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80225be:	9300      	str	r3, [sp, #0]
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	6939      	ldr	r1, [r7, #16]
 80225c4:	68f8      	ldr	r0, [r7, #12]
 80225c6:	f002 f82b 	bl	8024620 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80225ca:	6938      	ldr	r0, [r7, #16]
 80225cc:	f7fe fc8c 	bl	8020ee8 <pbuf_free>
  }
  return ERR_OK;
 80225d0:	2300      	movs	r3, #0
}
 80225d2:	4618      	mov	r0, r3
 80225d4:	3718      	adds	r7, #24
 80225d6:	46bd      	mov	sp, r7
 80225d8:	bd80      	pop	{r7, pc}
 80225da:	bf00      	nop
 80225dc:	0802ac18 	.word	0x0802ac18
 80225e0:	0802ad10 	.word	0x0802ad10
 80225e4:	0802ac90 	.word	0x0802ac90
 80225e8:	20019514 	.word	0x20019514

080225ec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80225ec:	b580      	push	{r7, lr}
 80225ee:	b084      	sub	sp, #16
 80225f0:	af00      	add	r7, sp, #0
 80225f2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80225f4:	2300      	movs	r3, #0
 80225f6:	60fb      	str	r3, [r7, #12]
 80225f8:	e01e      	b.n	8022638 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80225fa:	4913      	ldr	r1, [pc, #76]	; (8022648 <etharp_cleanup_netif+0x5c>)
 80225fc:	68fa      	ldr	r2, [r7, #12]
 80225fe:	4613      	mov	r3, r2
 8022600:	005b      	lsls	r3, r3, #1
 8022602:	4413      	add	r3, r2
 8022604:	00db      	lsls	r3, r3, #3
 8022606:	440b      	add	r3, r1
 8022608:	3314      	adds	r3, #20
 802260a:	781b      	ldrb	r3, [r3, #0]
 802260c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802260e:	7afb      	ldrb	r3, [r7, #11]
 8022610:	2b00      	cmp	r3, #0
 8022612:	d00e      	beq.n	8022632 <etharp_cleanup_netif+0x46>
 8022614:	490c      	ldr	r1, [pc, #48]	; (8022648 <etharp_cleanup_netif+0x5c>)
 8022616:	68fa      	ldr	r2, [r7, #12]
 8022618:	4613      	mov	r3, r2
 802261a:	005b      	lsls	r3, r3, #1
 802261c:	4413      	add	r3, r2
 802261e:	00db      	lsls	r3, r3, #3
 8022620:	440b      	add	r3, r1
 8022622:	3308      	adds	r3, #8
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	687a      	ldr	r2, [r7, #4]
 8022628:	429a      	cmp	r2, r3
 802262a:	d102      	bne.n	8022632 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 802262c:	68f8      	ldr	r0, [r7, #12]
 802262e:	f7ff fce5 	bl	8021ffc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022632:	68fb      	ldr	r3, [r7, #12]
 8022634:	3301      	adds	r3, #1
 8022636:	60fb      	str	r3, [r7, #12]
 8022638:	68fb      	ldr	r3, [r7, #12]
 802263a:	2b31      	cmp	r3, #49	; 0x31
 802263c:	dddd      	ble.n	80225fa <etharp_cleanup_netif+0xe>
    }
  }
}
 802263e:	bf00      	nop
 8022640:	bf00      	nop
 8022642:	3710      	adds	r7, #16
 8022644:	46bd      	mov	sp, r7
 8022646:	bd80      	pop	{r7, pc}
 8022648:	20019514 	.word	0x20019514

0802264c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802264c:	b5b0      	push	{r4, r5, r7, lr}
 802264e:	b08a      	sub	sp, #40	; 0x28
 8022650:	af04      	add	r7, sp, #16
 8022652:	6078      	str	r0, [r7, #4]
 8022654:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022656:	683b      	ldr	r3, [r7, #0]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d107      	bne.n	802266c <etharp_input+0x20>
 802265c:	4b3d      	ldr	r3, [pc, #244]	; (8022754 <etharp_input+0x108>)
 802265e:	f240 228a 	movw	r2, #650	; 0x28a
 8022662:	493d      	ldr	r1, [pc, #244]	; (8022758 <etharp_input+0x10c>)
 8022664:	483d      	ldr	r0, [pc, #244]	; (802275c <etharp_input+0x110>)
 8022666:	f002 f977 	bl	8024958 <iprintf>
 802266a:	e06f      	b.n	802274c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	685b      	ldr	r3, [r3, #4]
 8022670:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022672:	693b      	ldr	r3, [r7, #16]
 8022674:	881b      	ldrh	r3, [r3, #0]
 8022676:	b29b      	uxth	r3, r3
 8022678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802267c:	d10c      	bne.n	8022698 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802267e:	693b      	ldr	r3, [r7, #16]
 8022680:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022682:	2b06      	cmp	r3, #6
 8022684:	d108      	bne.n	8022698 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022686:	693b      	ldr	r3, [r7, #16]
 8022688:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802268a:	2b04      	cmp	r3, #4
 802268c:	d104      	bne.n	8022698 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802268e:	693b      	ldr	r3, [r7, #16]
 8022690:	885b      	ldrh	r3, [r3, #2]
 8022692:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022694:	2b08      	cmp	r3, #8
 8022696:	d003      	beq.n	80226a0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8022698:	6878      	ldr	r0, [r7, #4]
 802269a:	f7fe fc25 	bl	8020ee8 <pbuf_free>
    return;
 802269e:	e055      	b.n	802274c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80226a0:	693b      	ldr	r3, [r7, #16]
 80226a2:	330e      	adds	r3, #14
 80226a4:	681b      	ldr	r3, [r3, #0]
 80226a6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80226a8:	693b      	ldr	r3, [r7, #16]
 80226aa:	3318      	adds	r3, #24
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80226b0:	683b      	ldr	r3, [r7, #0]
 80226b2:	3304      	adds	r3, #4
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	d102      	bne.n	80226c0 <etharp_input+0x74>
    for_us = 0;
 80226ba:	2300      	movs	r3, #0
 80226bc:	75fb      	strb	r3, [r7, #23]
 80226be:	e009      	b.n	80226d4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80226c0:	68ba      	ldr	r2, [r7, #8]
 80226c2:	683b      	ldr	r3, [r7, #0]
 80226c4:	3304      	adds	r3, #4
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	429a      	cmp	r2, r3
 80226ca:	bf0c      	ite	eq
 80226cc:	2301      	moveq	r3, #1
 80226ce:	2300      	movne	r3, #0
 80226d0:	b2db      	uxtb	r3, r3
 80226d2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80226d4:	693b      	ldr	r3, [r7, #16]
 80226d6:	f103 0208 	add.w	r2, r3, #8
 80226da:	7dfb      	ldrb	r3, [r7, #23]
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d001      	beq.n	80226e4 <etharp_input+0x98>
 80226e0:	2301      	movs	r3, #1
 80226e2:	e000      	b.n	80226e6 <etharp_input+0x9a>
 80226e4:	2302      	movs	r3, #2
 80226e6:	f107 010c 	add.w	r1, r7, #12
 80226ea:	6838      	ldr	r0, [r7, #0]
 80226ec:	f7ff fed8 	bl	80224a0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80226f0:	693b      	ldr	r3, [r7, #16]
 80226f2:	88db      	ldrh	r3, [r3, #6]
 80226f4:	b29b      	uxth	r3, r3
 80226f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80226fa:	d003      	beq.n	8022704 <etharp_input+0xb8>
 80226fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022700:	d01e      	beq.n	8022740 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8022702:	e020      	b.n	8022746 <etharp_input+0xfa>
      if (for_us) {
 8022704:	7dfb      	ldrb	r3, [r7, #23]
 8022706:	2b00      	cmp	r3, #0
 8022708:	d01c      	beq.n	8022744 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802270a:	683b      	ldr	r3, [r7, #0]
 802270c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8022710:	693b      	ldr	r3, [r7, #16]
 8022712:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8022716:	683b      	ldr	r3, [r7, #0]
 8022718:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 802271c:	683b      	ldr	r3, [r7, #0]
 802271e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8022720:	693a      	ldr	r2, [r7, #16]
 8022722:	3208      	adds	r2, #8
        etharp_raw(netif,
 8022724:	2102      	movs	r1, #2
 8022726:	9103      	str	r1, [sp, #12]
 8022728:	f107 010c 	add.w	r1, r7, #12
 802272c:	9102      	str	r1, [sp, #8]
 802272e:	9201      	str	r2, [sp, #4]
 8022730:	9300      	str	r3, [sp, #0]
 8022732:	462b      	mov	r3, r5
 8022734:	4622      	mov	r2, r4
 8022736:	4601      	mov	r1, r0
 8022738:	6838      	ldr	r0, [r7, #0]
 802273a:	f000 faeb 	bl	8022d14 <etharp_raw>
      break;
 802273e:	e001      	b.n	8022744 <etharp_input+0xf8>
      break;
 8022740:	bf00      	nop
 8022742:	e000      	b.n	8022746 <etharp_input+0xfa>
      break;
 8022744:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8022746:	6878      	ldr	r0, [r7, #4]
 8022748:	f7fe fbce 	bl	8020ee8 <pbuf_free>
}
 802274c:	3718      	adds	r7, #24
 802274e:	46bd      	mov	sp, r7
 8022750:	bdb0      	pop	{r4, r5, r7, pc}
 8022752:	bf00      	nop
 8022754:	0802ac18 	.word	0x0802ac18
 8022758:	0802ad68 	.word	0x0802ad68
 802275c:	0802ac90 	.word	0x0802ac90

08022760 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8022760:	b580      	push	{r7, lr}
 8022762:	b086      	sub	sp, #24
 8022764:	af02      	add	r7, sp, #8
 8022766:	60f8      	str	r0, [r7, #12]
 8022768:	60b9      	str	r1, [r7, #8]
 802276a:	4613      	mov	r3, r2
 802276c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802276e:	79fa      	ldrb	r2, [r7, #7]
 8022770:	4944      	ldr	r1, [pc, #272]	; (8022884 <etharp_output_to_arp_index+0x124>)
 8022772:	4613      	mov	r3, r2
 8022774:	005b      	lsls	r3, r3, #1
 8022776:	4413      	add	r3, r2
 8022778:	00db      	lsls	r3, r3, #3
 802277a:	440b      	add	r3, r1
 802277c:	3314      	adds	r3, #20
 802277e:	781b      	ldrb	r3, [r3, #0]
 8022780:	2b01      	cmp	r3, #1
 8022782:	d806      	bhi.n	8022792 <etharp_output_to_arp_index+0x32>
 8022784:	4b40      	ldr	r3, [pc, #256]	; (8022888 <etharp_output_to_arp_index+0x128>)
 8022786:	f240 22ee 	movw	r2, #750	; 0x2ee
 802278a:	4940      	ldr	r1, [pc, #256]	; (802288c <etharp_output_to_arp_index+0x12c>)
 802278c:	4840      	ldr	r0, [pc, #256]	; (8022890 <etharp_output_to_arp_index+0x130>)
 802278e:	f002 f8e3 	bl	8024958 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8022792:	79fa      	ldrb	r2, [r7, #7]
 8022794:	493b      	ldr	r1, [pc, #236]	; (8022884 <etharp_output_to_arp_index+0x124>)
 8022796:	4613      	mov	r3, r2
 8022798:	005b      	lsls	r3, r3, #1
 802279a:	4413      	add	r3, r2
 802279c:	00db      	lsls	r3, r3, #3
 802279e:	440b      	add	r3, r1
 80227a0:	3314      	adds	r3, #20
 80227a2:	781b      	ldrb	r3, [r3, #0]
 80227a4:	2b02      	cmp	r3, #2
 80227a6:	d153      	bne.n	8022850 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80227a8:	79fa      	ldrb	r2, [r7, #7]
 80227aa:	4936      	ldr	r1, [pc, #216]	; (8022884 <etharp_output_to_arp_index+0x124>)
 80227ac:	4613      	mov	r3, r2
 80227ae:	005b      	lsls	r3, r3, #1
 80227b0:	4413      	add	r3, r2
 80227b2:	00db      	lsls	r3, r3, #3
 80227b4:	440b      	add	r3, r1
 80227b6:	3312      	adds	r3, #18
 80227b8:	881b      	ldrh	r3, [r3, #0]
 80227ba:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80227be:	d919      	bls.n	80227f4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80227c0:	79fa      	ldrb	r2, [r7, #7]
 80227c2:	4613      	mov	r3, r2
 80227c4:	005b      	lsls	r3, r3, #1
 80227c6:	4413      	add	r3, r2
 80227c8:	00db      	lsls	r3, r3, #3
 80227ca:	4a2e      	ldr	r2, [pc, #184]	; (8022884 <etharp_output_to_arp_index+0x124>)
 80227cc:	4413      	add	r3, r2
 80227ce:	3304      	adds	r3, #4
 80227d0:	4619      	mov	r1, r3
 80227d2:	68f8      	ldr	r0, [r7, #12]
 80227d4:	f000 fb4c 	bl	8022e70 <etharp_request>
 80227d8:	4603      	mov	r3, r0
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d138      	bne.n	8022850 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80227de:	79fa      	ldrb	r2, [r7, #7]
 80227e0:	4928      	ldr	r1, [pc, #160]	; (8022884 <etharp_output_to_arp_index+0x124>)
 80227e2:	4613      	mov	r3, r2
 80227e4:	005b      	lsls	r3, r3, #1
 80227e6:	4413      	add	r3, r2
 80227e8:	00db      	lsls	r3, r3, #3
 80227ea:	440b      	add	r3, r1
 80227ec:	3314      	adds	r3, #20
 80227ee:	2203      	movs	r2, #3
 80227f0:	701a      	strb	r2, [r3, #0]
 80227f2:	e02d      	b.n	8022850 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80227f4:	79fa      	ldrb	r2, [r7, #7]
 80227f6:	4923      	ldr	r1, [pc, #140]	; (8022884 <etharp_output_to_arp_index+0x124>)
 80227f8:	4613      	mov	r3, r2
 80227fa:	005b      	lsls	r3, r3, #1
 80227fc:	4413      	add	r3, r2
 80227fe:	00db      	lsls	r3, r3, #3
 8022800:	440b      	add	r3, r1
 8022802:	3312      	adds	r3, #18
 8022804:	881b      	ldrh	r3, [r3, #0]
 8022806:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802280a:	d321      	bcc.n	8022850 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802280c:	79fa      	ldrb	r2, [r7, #7]
 802280e:	4613      	mov	r3, r2
 8022810:	005b      	lsls	r3, r3, #1
 8022812:	4413      	add	r3, r2
 8022814:	00db      	lsls	r3, r3, #3
 8022816:	4a1b      	ldr	r2, [pc, #108]	; (8022884 <etharp_output_to_arp_index+0x124>)
 8022818:	4413      	add	r3, r2
 802281a:	1d19      	adds	r1, r3, #4
 802281c:	79fa      	ldrb	r2, [r7, #7]
 802281e:	4613      	mov	r3, r2
 8022820:	005b      	lsls	r3, r3, #1
 8022822:	4413      	add	r3, r2
 8022824:	00db      	lsls	r3, r3, #3
 8022826:	3308      	adds	r3, #8
 8022828:	4a16      	ldr	r2, [pc, #88]	; (8022884 <etharp_output_to_arp_index+0x124>)
 802282a:	4413      	add	r3, r2
 802282c:	3304      	adds	r3, #4
 802282e:	461a      	mov	r2, r3
 8022830:	68f8      	ldr	r0, [r7, #12]
 8022832:	f000 fafb 	bl	8022e2c <etharp_request_dst>
 8022836:	4603      	mov	r3, r0
 8022838:	2b00      	cmp	r3, #0
 802283a:	d109      	bne.n	8022850 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802283c:	79fa      	ldrb	r2, [r7, #7]
 802283e:	4911      	ldr	r1, [pc, #68]	; (8022884 <etharp_output_to_arp_index+0x124>)
 8022840:	4613      	mov	r3, r2
 8022842:	005b      	lsls	r3, r3, #1
 8022844:	4413      	add	r3, r2
 8022846:	00db      	lsls	r3, r3, #3
 8022848:	440b      	add	r3, r1
 802284a:	3314      	adds	r3, #20
 802284c:	2203      	movs	r2, #3
 802284e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8022850:	68fb      	ldr	r3, [r7, #12]
 8022852:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8022856:	79fa      	ldrb	r2, [r7, #7]
 8022858:	4613      	mov	r3, r2
 802285a:	005b      	lsls	r3, r3, #1
 802285c:	4413      	add	r3, r2
 802285e:	00db      	lsls	r3, r3, #3
 8022860:	3308      	adds	r3, #8
 8022862:	4a08      	ldr	r2, [pc, #32]	; (8022884 <etharp_output_to_arp_index+0x124>)
 8022864:	4413      	add	r3, r2
 8022866:	3304      	adds	r3, #4
 8022868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802286c:	9200      	str	r2, [sp, #0]
 802286e:	460a      	mov	r2, r1
 8022870:	68b9      	ldr	r1, [r7, #8]
 8022872:	68f8      	ldr	r0, [r7, #12]
 8022874:	f001 fed4 	bl	8024620 <ethernet_output>
 8022878:	4603      	mov	r3, r0
}
 802287a:	4618      	mov	r0, r3
 802287c:	3710      	adds	r7, #16
 802287e:	46bd      	mov	sp, r7
 8022880:	bd80      	pop	{r7, pc}
 8022882:	bf00      	nop
 8022884:	20019514 	.word	0x20019514
 8022888:	0802ac18 	.word	0x0802ac18
 802288c:	0802ad88 	.word	0x0802ad88
 8022890:	0802ac90 	.word	0x0802ac90

08022894 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8022894:	b580      	push	{r7, lr}
 8022896:	b08a      	sub	sp, #40	; 0x28
 8022898:	af02      	add	r7, sp, #8
 802289a:	60f8      	str	r0, [r7, #12]
 802289c:	60b9      	str	r1, [r7, #8]
 802289e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80228a4:	68fb      	ldr	r3, [r7, #12]
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d106      	bne.n	80228b8 <etharp_output+0x24>
 80228aa:	4b73      	ldr	r3, [pc, #460]	; (8022a78 <etharp_output+0x1e4>)
 80228ac:	f240 321e 	movw	r2, #798	; 0x31e
 80228b0:	4972      	ldr	r1, [pc, #456]	; (8022a7c <etharp_output+0x1e8>)
 80228b2:	4873      	ldr	r0, [pc, #460]	; (8022a80 <etharp_output+0x1ec>)
 80228b4:	f002 f850 	bl	8024958 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80228b8:	68bb      	ldr	r3, [r7, #8]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d106      	bne.n	80228cc <etharp_output+0x38>
 80228be:	4b6e      	ldr	r3, [pc, #440]	; (8022a78 <etharp_output+0x1e4>)
 80228c0:	f240 321f 	movw	r2, #799	; 0x31f
 80228c4:	496f      	ldr	r1, [pc, #444]	; (8022a84 <etharp_output+0x1f0>)
 80228c6:	486e      	ldr	r0, [pc, #440]	; (8022a80 <etharp_output+0x1ec>)
 80228c8:	f002 f846 	bl	8024958 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80228cc:	687b      	ldr	r3, [r7, #4]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d106      	bne.n	80228e0 <etharp_output+0x4c>
 80228d2:	4b69      	ldr	r3, [pc, #420]	; (8022a78 <etharp_output+0x1e4>)
 80228d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80228d8:	496b      	ldr	r1, [pc, #428]	; (8022a88 <etharp_output+0x1f4>)
 80228da:	4869      	ldr	r0, [pc, #420]	; (8022a80 <etharp_output+0x1ec>)
 80228dc:	f002 f83c 	bl	8024958 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	681b      	ldr	r3, [r3, #0]
 80228e4:	68f9      	ldr	r1, [r7, #12]
 80228e6:	4618      	mov	r0, r3
 80228e8:	f000 fefc 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 80228ec:	4603      	mov	r3, r0
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d002      	beq.n	80228f8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80228f2:	4b66      	ldr	r3, [pc, #408]	; (8022a8c <etharp_output+0x1f8>)
 80228f4:	61fb      	str	r3, [r7, #28]
 80228f6:	e0af      	b.n	8022a58 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022900:	2be0      	cmp	r3, #224	; 0xe0
 8022902:	d118      	bne.n	8022936 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8022904:	2301      	movs	r3, #1
 8022906:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8022908:	2300      	movs	r3, #0
 802290a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802290c:	235e      	movs	r3, #94	; 0x5e
 802290e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	3301      	adds	r3, #1
 8022914:	781b      	ldrb	r3, [r3, #0]
 8022916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802291a:	b2db      	uxtb	r3, r3
 802291c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	3302      	adds	r3, #2
 8022922:	781b      	ldrb	r3, [r3, #0]
 8022924:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	3303      	adds	r3, #3
 802292a:	781b      	ldrb	r3, [r3, #0]
 802292c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802292e:	f107 0310 	add.w	r3, r7, #16
 8022932:	61fb      	str	r3, [r7, #28]
 8022934:	e090      	b.n	8022a58 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022936:	687b      	ldr	r3, [r7, #4]
 8022938:	681a      	ldr	r2, [r3, #0]
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	3304      	adds	r3, #4
 802293e:	681b      	ldr	r3, [r3, #0]
 8022940:	405a      	eors	r2, r3
 8022942:	68fb      	ldr	r3, [r7, #12]
 8022944:	3308      	adds	r3, #8
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	4013      	ands	r3, r2
 802294a:	2b00      	cmp	r3, #0
 802294c:	d012      	beq.n	8022974 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	681b      	ldr	r3, [r3, #0]
 8022952:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022954:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8022958:	4293      	cmp	r3, r2
 802295a:	d00b      	beq.n	8022974 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 802295c:	68fb      	ldr	r3, [r7, #12]
 802295e:	330c      	adds	r3, #12
 8022960:	681b      	ldr	r3, [r3, #0]
 8022962:	2b00      	cmp	r3, #0
 8022964:	d003      	beq.n	802296e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8022966:	68fb      	ldr	r3, [r7, #12]
 8022968:	330c      	adds	r3, #12
 802296a:	61bb      	str	r3, [r7, #24]
 802296c:	e002      	b.n	8022974 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 802296e:	f06f 0303 	mvn.w	r3, #3
 8022972:	e07d      	b.n	8022a70 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8022974:	4b46      	ldr	r3, [pc, #280]	; (8022a90 <etharp_output+0x1fc>)
 8022976:	781b      	ldrb	r3, [r3, #0]
 8022978:	4619      	mov	r1, r3
 802297a:	4a46      	ldr	r2, [pc, #280]	; (8022a94 <etharp_output+0x200>)
 802297c:	460b      	mov	r3, r1
 802297e:	005b      	lsls	r3, r3, #1
 8022980:	440b      	add	r3, r1
 8022982:	00db      	lsls	r3, r3, #3
 8022984:	4413      	add	r3, r2
 8022986:	3314      	adds	r3, #20
 8022988:	781b      	ldrb	r3, [r3, #0]
 802298a:	2b01      	cmp	r3, #1
 802298c:	d925      	bls.n	80229da <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 802298e:	4b40      	ldr	r3, [pc, #256]	; (8022a90 <etharp_output+0x1fc>)
 8022990:	781b      	ldrb	r3, [r3, #0]
 8022992:	4619      	mov	r1, r3
 8022994:	4a3f      	ldr	r2, [pc, #252]	; (8022a94 <etharp_output+0x200>)
 8022996:	460b      	mov	r3, r1
 8022998:	005b      	lsls	r3, r3, #1
 802299a:	440b      	add	r3, r1
 802299c:	00db      	lsls	r3, r3, #3
 802299e:	4413      	add	r3, r2
 80229a0:	3308      	adds	r3, #8
 80229a2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80229a4:	68fa      	ldr	r2, [r7, #12]
 80229a6:	429a      	cmp	r2, r3
 80229a8:	d117      	bne.n	80229da <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80229aa:	69bb      	ldr	r3, [r7, #24]
 80229ac:	681a      	ldr	r2, [r3, #0]
 80229ae:	4b38      	ldr	r3, [pc, #224]	; (8022a90 <etharp_output+0x1fc>)
 80229b0:	781b      	ldrb	r3, [r3, #0]
 80229b2:	4618      	mov	r0, r3
 80229b4:	4937      	ldr	r1, [pc, #220]	; (8022a94 <etharp_output+0x200>)
 80229b6:	4603      	mov	r3, r0
 80229b8:	005b      	lsls	r3, r3, #1
 80229ba:	4403      	add	r3, r0
 80229bc:	00db      	lsls	r3, r3, #3
 80229be:	440b      	add	r3, r1
 80229c0:	3304      	adds	r3, #4
 80229c2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80229c4:	429a      	cmp	r2, r3
 80229c6:	d108      	bne.n	80229da <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80229c8:	4b31      	ldr	r3, [pc, #196]	; (8022a90 <etharp_output+0x1fc>)
 80229ca:	781b      	ldrb	r3, [r3, #0]
 80229cc:	461a      	mov	r2, r3
 80229ce:	68b9      	ldr	r1, [r7, #8]
 80229d0:	68f8      	ldr	r0, [r7, #12]
 80229d2:	f7ff fec5 	bl	8022760 <etharp_output_to_arp_index>
 80229d6:	4603      	mov	r3, r0
 80229d8:	e04a      	b.n	8022a70 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80229da:	2300      	movs	r3, #0
 80229dc:	75fb      	strb	r3, [r7, #23]
 80229de:	e031      	b.n	8022a44 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80229e0:	7dfa      	ldrb	r2, [r7, #23]
 80229e2:	492c      	ldr	r1, [pc, #176]	; (8022a94 <etharp_output+0x200>)
 80229e4:	4613      	mov	r3, r2
 80229e6:	005b      	lsls	r3, r3, #1
 80229e8:	4413      	add	r3, r2
 80229ea:	00db      	lsls	r3, r3, #3
 80229ec:	440b      	add	r3, r1
 80229ee:	3314      	adds	r3, #20
 80229f0:	781b      	ldrb	r3, [r3, #0]
 80229f2:	2b01      	cmp	r3, #1
 80229f4:	d923      	bls.n	8022a3e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80229f6:	7dfa      	ldrb	r2, [r7, #23]
 80229f8:	4926      	ldr	r1, [pc, #152]	; (8022a94 <etharp_output+0x200>)
 80229fa:	4613      	mov	r3, r2
 80229fc:	005b      	lsls	r3, r3, #1
 80229fe:	4413      	add	r3, r2
 8022a00:	00db      	lsls	r3, r3, #3
 8022a02:	440b      	add	r3, r1
 8022a04:	3308      	adds	r3, #8
 8022a06:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022a08:	68fa      	ldr	r2, [r7, #12]
 8022a0a:	429a      	cmp	r2, r3
 8022a0c:	d117      	bne.n	8022a3e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8022a0e:	69bb      	ldr	r3, [r7, #24]
 8022a10:	6819      	ldr	r1, [r3, #0]
 8022a12:	7dfa      	ldrb	r2, [r7, #23]
 8022a14:	481f      	ldr	r0, [pc, #124]	; (8022a94 <etharp_output+0x200>)
 8022a16:	4613      	mov	r3, r2
 8022a18:	005b      	lsls	r3, r3, #1
 8022a1a:	4413      	add	r3, r2
 8022a1c:	00db      	lsls	r3, r3, #3
 8022a1e:	4403      	add	r3, r0
 8022a20:	3304      	adds	r3, #4
 8022a22:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8022a24:	4299      	cmp	r1, r3
 8022a26:	d10a      	bne.n	8022a3e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8022a28:	4a19      	ldr	r2, [pc, #100]	; (8022a90 <etharp_output+0x1fc>)
 8022a2a:	7dfb      	ldrb	r3, [r7, #23]
 8022a2c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8022a2e:	7dfb      	ldrb	r3, [r7, #23]
 8022a30:	461a      	mov	r2, r3
 8022a32:	68b9      	ldr	r1, [r7, #8]
 8022a34:	68f8      	ldr	r0, [r7, #12]
 8022a36:	f7ff fe93 	bl	8022760 <etharp_output_to_arp_index>
 8022a3a:	4603      	mov	r3, r0
 8022a3c:	e018      	b.n	8022a70 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022a3e:	7dfb      	ldrb	r3, [r7, #23]
 8022a40:	3301      	adds	r3, #1
 8022a42:	75fb      	strb	r3, [r7, #23]
 8022a44:	7dfb      	ldrb	r3, [r7, #23]
 8022a46:	2b31      	cmp	r3, #49	; 0x31
 8022a48:	d9ca      	bls.n	80229e0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8022a4a:	68ba      	ldr	r2, [r7, #8]
 8022a4c:	69b9      	ldr	r1, [r7, #24]
 8022a4e:	68f8      	ldr	r0, [r7, #12]
 8022a50:	f000 f822 	bl	8022a98 <etharp_query>
 8022a54:	4603      	mov	r3, r0
 8022a56:	e00b      	b.n	8022a70 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8022a58:	68fb      	ldr	r3, [r7, #12]
 8022a5a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8022a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022a62:	9300      	str	r3, [sp, #0]
 8022a64:	69fb      	ldr	r3, [r7, #28]
 8022a66:	68b9      	ldr	r1, [r7, #8]
 8022a68:	68f8      	ldr	r0, [r7, #12]
 8022a6a:	f001 fdd9 	bl	8024620 <ethernet_output>
 8022a6e:	4603      	mov	r3, r0
}
 8022a70:	4618      	mov	r0, r3
 8022a72:	3720      	adds	r7, #32
 8022a74:	46bd      	mov	sp, r7
 8022a76:	bd80      	pop	{r7, pc}
 8022a78:	0802ac18 	.word	0x0802ac18
 8022a7c:	0802ad68 	.word	0x0802ad68
 8022a80:	0802ac90 	.word	0x0802ac90
 8022a84:	0802adb8 	.word	0x0802adb8
 8022a88:	0802ad58 	.word	0x0802ad58
 8022a8c:	0802b798 	.word	0x0802b798
 8022a90:	200199c4 	.word	0x200199c4
 8022a94:	20019514 	.word	0x20019514

08022a98 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8022a98:	b580      	push	{r7, lr}
 8022a9a:	b08c      	sub	sp, #48	; 0x30
 8022a9c:	af02      	add	r7, sp, #8
 8022a9e:	60f8      	str	r0, [r7, #12]
 8022aa0:	60b9      	str	r1, [r7, #8]
 8022aa2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8022aa4:	68fb      	ldr	r3, [r7, #12]
 8022aa6:	332a      	adds	r3, #42	; 0x2a
 8022aa8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8022aaa:	23ff      	movs	r3, #255	; 0xff
 8022aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022ab4:	68bb      	ldr	r3, [r7, #8]
 8022ab6:	681b      	ldr	r3, [r3, #0]
 8022ab8:	68f9      	ldr	r1, [r7, #12]
 8022aba:	4618      	mov	r0, r3
 8022abc:	f000 fe12 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 8022ac0:	4603      	mov	r3, r0
 8022ac2:	2b00      	cmp	r3, #0
 8022ac4:	d10c      	bne.n	8022ae0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8022ac6:	68bb      	ldr	r3, [r7, #8]
 8022ac8:	681b      	ldr	r3, [r3, #0]
 8022aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022ace:	2be0      	cmp	r3, #224	; 0xe0
 8022ad0:	d006      	beq.n	8022ae0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8022ad2:	68bb      	ldr	r3, [r7, #8]
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	d003      	beq.n	8022ae0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8022ad8:	68bb      	ldr	r3, [r7, #8]
 8022ada:	681b      	ldr	r3, [r3, #0]
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d102      	bne.n	8022ae6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022ae0:	f06f 030f 	mvn.w	r3, #15
 8022ae4:	e101      	b.n	8022cea <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8022ae6:	68fa      	ldr	r2, [r7, #12]
 8022ae8:	2101      	movs	r1, #1
 8022aea:	68b8      	ldr	r0, [r7, #8]
 8022aec:	f7ff fb60 	bl	80221b0 <etharp_find_entry>
 8022af0:	4603      	mov	r3, r0
 8022af2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8022af4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8022af8:	2b00      	cmp	r3, #0
 8022afa:	da02      	bge.n	8022b02 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8022afc:	8a7b      	ldrh	r3, [r7, #18]
 8022afe:	b25b      	sxtb	r3, r3
 8022b00:	e0f3      	b.n	8022cea <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8022b02:	8a7b      	ldrh	r3, [r7, #18]
 8022b04:	2b7e      	cmp	r3, #126	; 0x7e
 8022b06:	d906      	bls.n	8022b16 <etharp_query+0x7e>
 8022b08:	4b7a      	ldr	r3, [pc, #488]	; (8022cf4 <etharp_query+0x25c>)
 8022b0a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8022b0e:	497a      	ldr	r1, [pc, #488]	; (8022cf8 <etharp_query+0x260>)
 8022b10:	487a      	ldr	r0, [pc, #488]	; (8022cfc <etharp_query+0x264>)
 8022b12:	f001 ff21 	bl	8024958 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8022b16:	8a7b      	ldrh	r3, [r7, #18]
 8022b18:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8022b1a:	7c7a      	ldrb	r2, [r7, #17]
 8022b1c:	4978      	ldr	r1, [pc, #480]	; (8022d00 <etharp_query+0x268>)
 8022b1e:	4613      	mov	r3, r2
 8022b20:	005b      	lsls	r3, r3, #1
 8022b22:	4413      	add	r3, r2
 8022b24:	00db      	lsls	r3, r3, #3
 8022b26:	440b      	add	r3, r1
 8022b28:	3314      	adds	r3, #20
 8022b2a:	781b      	ldrb	r3, [r3, #0]
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	d115      	bne.n	8022b5c <etharp_query+0xc4>
    is_new_entry = 1;
 8022b30:	2301      	movs	r3, #1
 8022b32:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8022b34:	7c7a      	ldrb	r2, [r7, #17]
 8022b36:	4972      	ldr	r1, [pc, #456]	; (8022d00 <etharp_query+0x268>)
 8022b38:	4613      	mov	r3, r2
 8022b3a:	005b      	lsls	r3, r3, #1
 8022b3c:	4413      	add	r3, r2
 8022b3e:	00db      	lsls	r3, r3, #3
 8022b40:	440b      	add	r3, r1
 8022b42:	3314      	adds	r3, #20
 8022b44:	2201      	movs	r2, #1
 8022b46:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8022b48:	7c7a      	ldrb	r2, [r7, #17]
 8022b4a:	496d      	ldr	r1, [pc, #436]	; (8022d00 <etharp_query+0x268>)
 8022b4c:	4613      	mov	r3, r2
 8022b4e:	005b      	lsls	r3, r3, #1
 8022b50:	4413      	add	r3, r2
 8022b52:	00db      	lsls	r3, r3, #3
 8022b54:	440b      	add	r3, r1
 8022b56:	3308      	adds	r3, #8
 8022b58:	68fa      	ldr	r2, [r7, #12]
 8022b5a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8022b5c:	7c7a      	ldrb	r2, [r7, #17]
 8022b5e:	4968      	ldr	r1, [pc, #416]	; (8022d00 <etharp_query+0x268>)
 8022b60:	4613      	mov	r3, r2
 8022b62:	005b      	lsls	r3, r3, #1
 8022b64:	4413      	add	r3, r2
 8022b66:	00db      	lsls	r3, r3, #3
 8022b68:	440b      	add	r3, r1
 8022b6a:	3314      	adds	r3, #20
 8022b6c:	781b      	ldrb	r3, [r3, #0]
 8022b6e:	2b01      	cmp	r3, #1
 8022b70:	d011      	beq.n	8022b96 <etharp_query+0xfe>
 8022b72:	7c7a      	ldrb	r2, [r7, #17]
 8022b74:	4962      	ldr	r1, [pc, #392]	; (8022d00 <etharp_query+0x268>)
 8022b76:	4613      	mov	r3, r2
 8022b78:	005b      	lsls	r3, r3, #1
 8022b7a:	4413      	add	r3, r2
 8022b7c:	00db      	lsls	r3, r3, #3
 8022b7e:	440b      	add	r3, r1
 8022b80:	3314      	adds	r3, #20
 8022b82:	781b      	ldrb	r3, [r3, #0]
 8022b84:	2b01      	cmp	r3, #1
 8022b86:	d806      	bhi.n	8022b96 <etharp_query+0xfe>
 8022b88:	4b5a      	ldr	r3, [pc, #360]	; (8022cf4 <etharp_query+0x25c>)
 8022b8a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8022b8e:	495d      	ldr	r1, [pc, #372]	; (8022d04 <etharp_query+0x26c>)
 8022b90:	485a      	ldr	r0, [pc, #360]	; (8022cfc <etharp_query+0x264>)
 8022b92:	f001 fee1 	bl	8024958 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8022b96:	6a3b      	ldr	r3, [r7, #32]
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	d102      	bne.n	8022ba2 <etharp_query+0x10a>
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	d10c      	bne.n	8022bbc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8022ba2:	68b9      	ldr	r1, [r7, #8]
 8022ba4:	68f8      	ldr	r0, [r7, #12]
 8022ba6:	f000 f963 	bl	8022e70 <etharp_request>
 8022baa:	4603      	mov	r3, r0
 8022bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	d102      	bne.n	8022bbc <etharp_query+0x124>
      return result;
 8022bb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8022bba:	e096      	b.n	8022cea <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d106      	bne.n	8022bd0 <etharp_query+0x138>
 8022bc2:	4b4c      	ldr	r3, [pc, #304]	; (8022cf4 <etharp_query+0x25c>)
 8022bc4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8022bc8:	494f      	ldr	r1, [pc, #316]	; (8022d08 <etharp_query+0x270>)
 8022bca:	484c      	ldr	r0, [pc, #304]	; (8022cfc <etharp_query+0x264>)
 8022bcc:	f001 fec4 	bl	8024958 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8022bd0:	7c7a      	ldrb	r2, [r7, #17]
 8022bd2:	494b      	ldr	r1, [pc, #300]	; (8022d00 <etharp_query+0x268>)
 8022bd4:	4613      	mov	r3, r2
 8022bd6:	005b      	lsls	r3, r3, #1
 8022bd8:	4413      	add	r3, r2
 8022bda:	00db      	lsls	r3, r3, #3
 8022bdc:	440b      	add	r3, r1
 8022bde:	3314      	adds	r3, #20
 8022be0:	781b      	ldrb	r3, [r3, #0]
 8022be2:	2b01      	cmp	r3, #1
 8022be4:	d917      	bls.n	8022c16 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8022be6:	4a49      	ldr	r2, [pc, #292]	; (8022d0c <etharp_query+0x274>)
 8022be8:	7c7b      	ldrb	r3, [r7, #17]
 8022bea:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022bec:	7c7a      	ldrb	r2, [r7, #17]
 8022bee:	4613      	mov	r3, r2
 8022bf0:	005b      	lsls	r3, r3, #1
 8022bf2:	4413      	add	r3, r2
 8022bf4:	00db      	lsls	r3, r3, #3
 8022bf6:	3308      	adds	r3, #8
 8022bf8:	4a41      	ldr	r2, [pc, #260]	; (8022d00 <etharp_query+0x268>)
 8022bfa:	4413      	add	r3, r2
 8022bfc:	3304      	adds	r3, #4
 8022bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022c02:	9200      	str	r2, [sp, #0]
 8022c04:	697a      	ldr	r2, [r7, #20]
 8022c06:	6879      	ldr	r1, [r7, #4]
 8022c08:	68f8      	ldr	r0, [r7, #12]
 8022c0a:	f001 fd09 	bl	8024620 <ethernet_output>
 8022c0e:	4603      	mov	r3, r0
 8022c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022c14:	e067      	b.n	8022ce6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022c16:	7c7a      	ldrb	r2, [r7, #17]
 8022c18:	4939      	ldr	r1, [pc, #228]	; (8022d00 <etharp_query+0x268>)
 8022c1a:	4613      	mov	r3, r2
 8022c1c:	005b      	lsls	r3, r3, #1
 8022c1e:	4413      	add	r3, r2
 8022c20:	00db      	lsls	r3, r3, #3
 8022c22:	440b      	add	r3, r1
 8022c24:	3314      	adds	r3, #20
 8022c26:	781b      	ldrb	r3, [r3, #0]
 8022c28:	2b01      	cmp	r3, #1
 8022c2a:	d15c      	bne.n	8022ce6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8022c2c:	2300      	movs	r3, #0
 8022c2e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8022c34:	e01c      	b.n	8022c70 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8022c36:	69fb      	ldr	r3, [r7, #28]
 8022c38:	895a      	ldrh	r2, [r3, #10]
 8022c3a:	69fb      	ldr	r3, [r7, #28]
 8022c3c:	891b      	ldrh	r3, [r3, #8]
 8022c3e:	429a      	cmp	r2, r3
 8022c40:	d10a      	bne.n	8022c58 <etharp_query+0x1c0>
 8022c42:	69fb      	ldr	r3, [r7, #28]
 8022c44:	681b      	ldr	r3, [r3, #0]
 8022c46:	2b00      	cmp	r3, #0
 8022c48:	d006      	beq.n	8022c58 <etharp_query+0x1c0>
 8022c4a:	4b2a      	ldr	r3, [pc, #168]	; (8022cf4 <etharp_query+0x25c>)
 8022c4c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8022c50:	492f      	ldr	r1, [pc, #188]	; (8022d10 <etharp_query+0x278>)
 8022c52:	482a      	ldr	r0, [pc, #168]	; (8022cfc <etharp_query+0x264>)
 8022c54:	f001 fe80 	bl	8024958 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8022c58:	69fb      	ldr	r3, [r7, #28]
 8022c5a:	7b1b      	ldrb	r3, [r3, #12]
 8022c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d002      	beq.n	8022c6a <etharp_query+0x1d2>
        copy_needed = 1;
 8022c64:	2301      	movs	r3, #1
 8022c66:	61bb      	str	r3, [r7, #24]
        break;
 8022c68:	e005      	b.n	8022c76 <etharp_query+0x1de>
      }
      p = p->next;
 8022c6a:	69fb      	ldr	r3, [r7, #28]
 8022c6c:	681b      	ldr	r3, [r3, #0]
 8022c6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8022c70:	69fb      	ldr	r3, [r7, #28]
 8022c72:	2b00      	cmp	r3, #0
 8022c74:	d1df      	bne.n	8022c36 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8022c76:	69bb      	ldr	r3, [r7, #24]
 8022c78:	2b00      	cmp	r3, #0
 8022c7a:	d007      	beq.n	8022c8c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8022c7c:	687a      	ldr	r2, [r7, #4]
 8022c7e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8022c82:	200e      	movs	r0, #14
 8022c84:	f7fe fbbc 	bl	8021400 <pbuf_clone>
 8022c88:	61f8      	str	r0, [r7, #28]
 8022c8a:	e004      	b.n	8022c96 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8022c90:	69f8      	ldr	r0, [r7, #28]
 8022c92:	f7fe f9c9 	bl	8021028 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8022c96:	69fb      	ldr	r3, [r7, #28]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d021      	beq.n	8022ce0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8022c9c:	7c7a      	ldrb	r2, [r7, #17]
 8022c9e:	4918      	ldr	r1, [pc, #96]	; (8022d00 <etharp_query+0x268>)
 8022ca0:	4613      	mov	r3, r2
 8022ca2:	005b      	lsls	r3, r3, #1
 8022ca4:	4413      	add	r3, r2
 8022ca6:	00db      	lsls	r3, r3, #3
 8022ca8:	440b      	add	r3, r1
 8022caa:	681b      	ldr	r3, [r3, #0]
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	d00a      	beq.n	8022cc6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8022cb0:	7c7a      	ldrb	r2, [r7, #17]
 8022cb2:	4913      	ldr	r1, [pc, #76]	; (8022d00 <etharp_query+0x268>)
 8022cb4:	4613      	mov	r3, r2
 8022cb6:	005b      	lsls	r3, r3, #1
 8022cb8:	4413      	add	r3, r2
 8022cba:	00db      	lsls	r3, r3, #3
 8022cbc:	440b      	add	r3, r1
 8022cbe:	681b      	ldr	r3, [r3, #0]
 8022cc0:	4618      	mov	r0, r3
 8022cc2:	f7fe f911 	bl	8020ee8 <pbuf_free>
      }
      arp_table[i].q = p;
 8022cc6:	7c7a      	ldrb	r2, [r7, #17]
 8022cc8:	490d      	ldr	r1, [pc, #52]	; (8022d00 <etharp_query+0x268>)
 8022cca:	4613      	mov	r3, r2
 8022ccc:	005b      	lsls	r3, r3, #1
 8022cce:	4413      	add	r3, r2
 8022cd0:	00db      	lsls	r3, r3, #3
 8022cd2:	440b      	add	r3, r1
 8022cd4:	69fa      	ldr	r2, [r7, #28]
 8022cd6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8022cd8:	2300      	movs	r3, #0
 8022cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022cde:	e002      	b.n	8022ce6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8022ce0:	23ff      	movs	r3, #255	; 0xff
 8022ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8022ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8022cea:	4618      	mov	r0, r3
 8022cec:	3728      	adds	r7, #40	; 0x28
 8022cee:	46bd      	mov	sp, r7
 8022cf0:	bd80      	pop	{r7, pc}
 8022cf2:	bf00      	nop
 8022cf4:	0802ac18 	.word	0x0802ac18
 8022cf8:	0802adc4 	.word	0x0802adc4
 8022cfc:	0802ac90 	.word	0x0802ac90
 8022d00:	20019514 	.word	0x20019514
 8022d04:	0802add4 	.word	0x0802add4
 8022d08:	0802adb8 	.word	0x0802adb8
 8022d0c:	200199c4 	.word	0x200199c4
 8022d10:	0802adfc 	.word	0x0802adfc

08022d14 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8022d14:	b580      	push	{r7, lr}
 8022d16:	b08a      	sub	sp, #40	; 0x28
 8022d18:	af02      	add	r7, sp, #8
 8022d1a:	60f8      	str	r0, [r7, #12]
 8022d1c:	60b9      	str	r1, [r7, #8]
 8022d1e:	607a      	str	r2, [r7, #4]
 8022d20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8022d22:	2300      	movs	r3, #0
 8022d24:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022d26:	68fb      	ldr	r3, [r7, #12]
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	d106      	bne.n	8022d3a <etharp_raw+0x26>
 8022d2c:	4b3a      	ldr	r3, [pc, #232]	; (8022e18 <etharp_raw+0x104>)
 8022d2e:	f240 4257 	movw	r2, #1111	; 0x457
 8022d32:	493a      	ldr	r1, [pc, #232]	; (8022e1c <etharp_raw+0x108>)
 8022d34:	483a      	ldr	r0, [pc, #232]	; (8022e20 <etharp_raw+0x10c>)
 8022d36:	f001 fe0f 	bl	8024958 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8022d3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022d3e:	211c      	movs	r1, #28
 8022d40:	200e      	movs	r0, #14
 8022d42:	f7fd fdef 	bl	8020924 <pbuf_alloc>
 8022d46:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8022d48:	69bb      	ldr	r3, [r7, #24]
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d102      	bne.n	8022d54 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8022d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8022d52:	e05d      	b.n	8022e10 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8022d54:	69bb      	ldr	r3, [r7, #24]
 8022d56:	895b      	ldrh	r3, [r3, #10]
 8022d58:	2b1b      	cmp	r3, #27
 8022d5a:	d806      	bhi.n	8022d6a <etharp_raw+0x56>
 8022d5c:	4b2e      	ldr	r3, [pc, #184]	; (8022e18 <etharp_raw+0x104>)
 8022d5e:	f240 4262 	movw	r2, #1122	; 0x462
 8022d62:	4930      	ldr	r1, [pc, #192]	; (8022e24 <etharp_raw+0x110>)
 8022d64:	482e      	ldr	r0, [pc, #184]	; (8022e20 <etharp_raw+0x10c>)
 8022d66:	f001 fdf7 	bl	8024958 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8022d6a:	69bb      	ldr	r3, [r7, #24]
 8022d6c:	685b      	ldr	r3, [r3, #4]
 8022d6e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8022d70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8022d72:	4618      	mov	r0, r3
 8022d74:	f7fc fcdc 	bl	801f730 <lwip_htons>
 8022d78:	4603      	mov	r3, r0
 8022d7a:	461a      	mov	r2, r3
 8022d7c:	697b      	ldr	r3, [r7, #20]
 8022d7e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8022d80:	68fb      	ldr	r3, [r7, #12]
 8022d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022d86:	2b06      	cmp	r3, #6
 8022d88:	d006      	beq.n	8022d98 <etharp_raw+0x84>
 8022d8a:	4b23      	ldr	r3, [pc, #140]	; (8022e18 <etharp_raw+0x104>)
 8022d8c:	f240 4269 	movw	r2, #1129	; 0x469
 8022d90:	4925      	ldr	r1, [pc, #148]	; (8022e28 <etharp_raw+0x114>)
 8022d92:	4823      	ldr	r0, [pc, #140]	; (8022e20 <etharp_raw+0x10c>)
 8022d94:	f001 fde0 	bl	8024958 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8022d98:	697b      	ldr	r3, [r7, #20]
 8022d9a:	3308      	adds	r3, #8
 8022d9c:	2206      	movs	r2, #6
 8022d9e:	6839      	ldr	r1, [r7, #0]
 8022da0:	4618      	mov	r0, r3
 8022da2:	f001 fcc9 	bl	8024738 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8022da6:	697b      	ldr	r3, [r7, #20]
 8022da8:	3312      	adds	r3, #18
 8022daa:	2206      	movs	r2, #6
 8022dac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022dae:	4618      	mov	r0, r3
 8022db0:	f001 fcc2 	bl	8024738 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8022db4:	697b      	ldr	r3, [r7, #20]
 8022db6:	330e      	adds	r3, #14
 8022db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022dba:	6812      	ldr	r2, [r2, #0]
 8022dbc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8022dbe:	697b      	ldr	r3, [r7, #20]
 8022dc0:	3318      	adds	r3, #24
 8022dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022dc4:	6812      	ldr	r2, [r2, #0]
 8022dc6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8022dc8:	697b      	ldr	r3, [r7, #20]
 8022dca:	2200      	movs	r2, #0
 8022dcc:	701a      	strb	r2, [r3, #0]
 8022dce:	2200      	movs	r2, #0
 8022dd0:	f042 0201 	orr.w	r2, r2, #1
 8022dd4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8022dd6:	697b      	ldr	r3, [r7, #20]
 8022dd8:	2200      	movs	r2, #0
 8022dda:	f042 0208 	orr.w	r2, r2, #8
 8022dde:	709a      	strb	r2, [r3, #2]
 8022de0:	2200      	movs	r2, #0
 8022de2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8022de4:	697b      	ldr	r3, [r7, #20]
 8022de6:	2206      	movs	r2, #6
 8022de8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8022dea:	697b      	ldr	r3, [r7, #20]
 8022dec:	2204      	movs	r2, #4
 8022dee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8022df0:	f640 0306 	movw	r3, #2054	; 0x806
 8022df4:	9300      	str	r3, [sp, #0]
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	68ba      	ldr	r2, [r7, #8]
 8022dfa:	69b9      	ldr	r1, [r7, #24]
 8022dfc:	68f8      	ldr	r0, [r7, #12]
 8022dfe:	f001 fc0f 	bl	8024620 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8022e02:	69b8      	ldr	r0, [r7, #24]
 8022e04:	f7fe f870 	bl	8020ee8 <pbuf_free>
  p = NULL;
 8022e08:	2300      	movs	r3, #0
 8022e0a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8022e0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022e10:	4618      	mov	r0, r3
 8022e12:	3720      	adds	r7, #32
 8022e14:	46bd      	mov	sp, r7
 8022e16:	bd80      	pop	{r7, pc}
 8022e18:	0802ac18 	.word	0x0802ac18
 8022e1c:	0802ad68 	.word	0x0802ad68
 8022e20:	0802ac90 	.word	0x0802ac90
 8022e24:	0802ae18 	.word	0x0802ae18
 8022e28:	0802ae4c 	.word	0x0802ae4c

08022e2c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8022e2c:	b580      	push	{r7, lr}
 8022e2e:	b088      	sub	sp, #32
 8022e30:	af04      	add	r7, sp, #16
 8022e32:	60f8      	str	r0, [r7, #12]
 8022e34:	60b9      	str	r1, [r7, #8]
 8022e36:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022e38:	68fb      	ldr	r3, [r7, #12]
 8022e3a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8022e44:	68fb      	ldr	r3, [r7, #12]
 8022e46:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022e48:	2201      	movs	r2, #1
 8022e4a:	9203      	str	r2, [sp, #12]
 8022e4c:	68ba      	ldr	r2, [r7, #8]
 8022e4e:	9202      	str	r2, [sp, #8]
 8022e50:	4a06      	ldr	r2, [pc, #24]	; (8022e6c <etharp_request_dst+0x40>)
 8022e52:	9201      	str	r2, [sp, #4]
 8022e54:	9300      	str	r3, [sp, #0]
 8022e56:	4603      	mov	r3, r0
 8022e58:	687a      	ldr	r2, [r7, #4]
 8022e5a:	68f8      	ldr	r0, [r7, #12]
 8022e5c:	f7ff ff5a 	bl	8022d14 <etharp_raw>
 8022e60:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8022e62:	4618      	mov	r0, r3
 8022e64:	3710      	adds	r7, #16
 8022e66:	46bd      	mov	sp, r7
 8022e68:	bd80      	pop	{r7, pc}
 8022e6a:	bf00      	nop
 8022e6c:	0802b7a0 	.word	0x0802b7a0

08022e70 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8022e70:	b580      	push	{r7, lr}
 8022e72:	b082      	sub	sp, #8
 8022e74:	af00      	add	r7, sp, #0
 8022e76:	6078      	str	r0, [r7, #4]
 8022e78:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8022e7a:	4a05      	ldr	r2, [pc, #20]	; (8022e90 <etharp_request+0x20>)
 8022e7c:	6839      	ldr	r1, [r7, #0]
 8022e7e:	6878      	ldr	r0, [r7, #4]
 8022e80:	f7ff ffd4 	bl	8022e2c <etharp_request_dst>
 8022e84:	4603      	mov	r3, r0
}
 8022e86:	4618      	mov	r0, r3
 8022e88:	3708      	adds	r7, #8
 8022e8a:	46bd      	mov	sp, r7
 8022e8c:	bd80      	pop	{r7, pc}
 8022e8e:	bf00      	nop
 8022e90:	0802b798 	.word	0x0802b798

08022e94 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8022e94:	b580      	push	{r7, lr}
 8022e96:	b08e      	sub	sp, #56	; 0x38
 8022e98:	af04      	add	r7, sp, #16
 8022e9a:	6078      	str	r0, [r7, #4]
 8022e9c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8022e9e:	4b79      	ldr	r3, [pc, #484]	; (8023084 <icmp_input+0x1f0>)
 8022ea0:	689b      	ldr	r3, [r3, #8]
 8022ea2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8022ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ea6:	781b      	ldrb	r3, [r3, #0]
 8022ea8:	f003 030f 	and.w	r3, r3, #15
 8022eac:	b2db      	uxtb	r3, r3
 8022eae:	009b      	lsls	r3, r3, #2
 8022eb0:	b2db      	uxtb	r3, r3
 8022eb2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8022eb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022eb6:	2b13      	cmp	r3, #19
 8022eb8:	f240 80cd 	bls.w	8023056 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	895b      	ldrh	r3, [r3, #10]
 8022ec0:	2b03      	cmp	r3, #3
 8022ec2:	f240 80ca 	bls.w	802305a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	685b      	ldr	r3, [r3, #4]
 8022eca:	781b      	ldrb	r3, [r3, #0]
 8022ecc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8022ed0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	f000 80b7 	beq.w	8023048 <icmp_input+0x1b4>
 8022eda:	2b08      	cmp	r3, #8
 8022edc:	f040 80b7 	bne.w	802304e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8022ee0:	4b69      	ldr	r3, [pc, #420]	; (8023088 <icmp_input+0x1f4>)
 8022ee2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022ee4:	4b67      	ldr	r3, [pc, #412]	; (8023084 <icmp_input+0x1f0>)
 8022ee6:	695b      	ldr	r3, [r3, #20]
 8022ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022eec:	2be0      	cmp	r3, #224	; 0xe0
 8022eee:	f000 80bb 	beq.w	8023068 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8022ef2:	4b64      	ldr	r3, [pc, #400]	; (8023084 <icmp_input+0x1f0>)
 8022ef4:	695b      	ldr	r3, [r3, #20]
 8022ef6:	4a63      	ldr	r2, [pc, #396]	; (8023084 <icmp_input+0x1f0>)
 8022ef8:	6812      	ldr	r2, [r2, #0]
 8022efa:	4611      	mov	r1, r2
 8022efc:	4618      	mov	r0, r3
 8022efe:	f000 fbf1 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 8022f02:	4603      	mov	r3, r0
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	f040 80b1 	bne.w	802306c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	891b      	ldrh	r3, [r3, #8]
 8022f0e:	2b07      	cmp	r3, #7
 8022f10:	f240 80a5 	bls.w	802305e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022f16:	330e      	adds	r3, #14
 8022f18:	4619      	mov	r1, r3
 8022f1a:	6878      	ldr	r0, [r7, #4]
 8022f1c:	f7fd ff4e 	bl	8020dbc <pbuf_add_header>
 8022f20:	4603      	mov	r3, r0
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	d04b      	beq.n	8022fbe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	891a      	ldrh	r2, [r3, #8]
 8022f2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022f2c:	4413      	add	r3, r2
 8022f2e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	891b      	ldrh	r3, [r3, #8]
 8022f34:	8b7a      	ldrh	r2, [r7, #26]
 8022f36:	429a      	cmp	r2, r3
 8022f38:	f0c0 809a 	bcc.w	8023070 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8022f3c:	8b7b      	ldrh	r3, [r7, #26]
 8022f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022f42:	4619      	mov	r1, r3
 8022f44:	200e      	movs	r0, #14
 8022f46:	f7fd fced 	bl	8020924 <pbuf_alloc>
 8022f4a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8022f4c:	697b      	ldr	r3, [r7, #20]
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	f000 8090 	beq.w	8023074 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8022f54:	697b      	ldr	r3, [r7, #20]
 8022f56:	895b      	ldrh	r3, [r3, #10]
 8022f58:	461a      	mov	r2, r3
 8022f5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022f5c:	3308      	adds	r3, #8
 8022f5e:	429a      	cmp	r2, r3
 8022f60:	d203      	bcs.n	8022f6a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8022f62:	6978      	ldr	r0, [r7, #20]
 8022f64:	f7fd ffc0 	bl	8020ee8 <pbuf_free>
          goto icmperr;
 8022f68:	e085      	b.n	8023076 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8022f6a:	697b      	ldr	r3, [r7, #20]
 8022f6c:	685b      	ldr	r3, [r3, #4]
 8022f6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8022f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022f72:	4618      	mov	r0, r3
 8022f74:	f001 fbe0 	bl	8024738 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8022f78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022f7a:	4619      	mov	r1, r3
 8022f7c:	6978      	ldr	r0, [r7, #20]
 8022f7e:	f7fd ff2d 	bl	8020ddc <pbuf_remove_header>
 8022f82:	4603      	mov	r3, r0
 8022f84:	2b00      	cmp	r3, #0
 8022f86:	d009      	beq.n	8022f9c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8022f88:	4b40      	ldr	r3, [pc, #256]	; (802308c <icmp_input+0x1f8>)
 8022f8a:	22b6      	movs	r2, #182	; 0xb6
 8022f8c:	4940      	ldr	r1, [pc, #256]	; (8023090 <icmp_input+0x1fc>)
 8022f8e:	4841      	ldr	r0, [pc, #260]	; (8023094 <icmp_input+0x200>)
 8022f90:	f001 fce2 	bl	8024958 <iprintf>
          pbuf_free(r);
 8022f94:	6978      	ldr	r0, [r7, #20]
 8022f96:	f7fd ffa7 	bl	8020ee8 <pbuf_free>
          goto icmperr;
 8022f9a:	e06c      	b.n	8023076 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8022f9c:	6879      	ldr	r1, [r7, #4]
 8022f9e:	6978      	ldr	r0, [r7, #20]
 8022fa0:	f7fe f8ca 	bl	8021138 <pbuf_copy>
 8022fa4:	4603      	mov	r3, r0
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	d003      	beq.n	8022fb2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8022faa:	6978      	ldr	r0, [r7, #20]
 8022fac:	f7fd ff9c 	bl	8020ee8 <pbuf_free>
          goto icmperr;
 8022fb0:	e061      	b.n	8023076 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8022fb2:	6878      	ldr	r0, [r7, #4]
 8022fb4:	f7fd ff98 	bl	8020ee8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8022fb8:	697b      	ldr	r3, [r7, #20]
 8022fba:	607b      	str	r3, [r7, #4]
 8022fbc:	e00f      	b.n	8022fde <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022fc0:	330e      	adds	r3, #14
 8022fc2:	4619      	mov	r1, r3
 8022fc4:	6878      	ldr	r0, [r7, #4]
 8022fc6:	f7fd ff09 	bl	8020ddc <pbuf_remove_header>
 8022fca:	4603      	mov	r3, r0
 8022fcc:	2b00      	cmp	r3, #0
 8022fce:	d006      	beq.n	8022fde <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8022fd0:	4b2e      	ldr	r3, [pc, #184]	; (802308c <icmp_input+0x1f8>)
 8022fd2:	22c7      	movs	r2, #199	; 0xc7
 8022fd4:	4930      	ldr	r1, [pc, #192]	; (8023098 <icmp_input+0x204>)
 8022fd6:	482f      	ldr	r0, [pc, #188]	; (8023094 <icmp_input+0x200>)
 8022fd8:	f001 fcbe 	bl	8024958 <iprintf>
          goto icmperr;
 8022fdc:	e04b      	b.n	8023076 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	685b      	ldr	r3, [r3, #4]
 8022fe2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8022fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022fe6:	4619      	mov	r1, r3
 8022fe8:	6878      	ldr	r0, [r7, #4]
 8022fea:	f7fd fee7 	bl	8020dbc <pbuf_add_header>
 8022fee:	4603      	mov	r3, r0
 8022ff0:	2b00      	cmp	r3, #0
 8022ff2:	d12b      	bne.n	802304c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	685b      	ldr	r3, [r3, #4]
 8022ff8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8022ffa:	69fb      	ldr	r3, [r7, #28]
 8022ffc:	681a      	ldr	r2, [r3, #0]
 8022ffe:	68fb      	ldr	r3, [r7, #12]
 8023000:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023002:	4b20      	ldr	r3, [pc, #128]	; (8023084 <icmp_input+0x1f0>)
 8023004:	691a      	ldr	r2, [r3, #16]
 8023006:	68fb      	ldr	r3, [r7, #12]
 8023008:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802300a:	693b      	ldr	r3, [r7, #16]
 802300c:	2200      	movs	r2, #0
 802300e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8023010:	693b      	ldr	r3, [r7, #16]
 8023012:	2200      	movs	r2, #0
 8023014:	709a      	strb	r2, [r3, #2]
 8023016:	2200      	movs	r2, #0
 8023018:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802301a:	68fb      	ldr	r3, [r7, #12]
 802301c:	22ff      	movs	r2, #255	; 0xff
 802301e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8023020:	68fb      	ldr	r3, [r7, #12]
 8023022:	2200      	movs	r2, #0
 8023024:	729a      	strb	r2, [r3, #10]
 8023026:	2200      	movs	r2, #0
 8023028:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 802302a:	683b      	ldr	r3, [r7, #0]
 802302c:	9302      	str	r3, [sp, #8]
 802302e:	2301      	movs	r3, #1
 8023030:	9301      	str	r3, [sp, #4]
 8023032:	2300      	movs	r3, #0
 8023034:	9300      	str	r3, [sp, #0]
 8023036:	23ff      	movs	r3, #255	; 0xff
 8023038:	2200      	movs	r2, #0
 802303a:	69f9      	ldr	r1, [r7, #28]
 802303c:	6878      	ldr	r0, [r7, #4]
 802303e:	f000 fa6b 	bl	8023518 <ip4_output_if>
 8023042:	4603      	mov	r3, r0
 8023044:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8023046:	e001      	b.n	802304c <icmp_input+0x1b8>
      break;
 8023048:	bf00      	nop
 802304a:	e000      	b.n	802304e <icmp_input+0x1ba>
      break;
 802304c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 802304e:	6878      	ldr	r0, [r7, #4]
 8023050:	f7fd ff4a 	bl	8020ee8 <pbuf_free>
  return;
 8023054:	e013      	b.n	802307e <icmp_input+0x1ea>
    goto lenerr;
 8023056:	bf00      	nop
 8023058:	e002      	b.n	8023060 <icmp_input+0x1cc>
    goto lenerr;
 802305a:	bf00      	nop
 802305c:	e000      	b.n	8023060 <icmp_input+0x1cc>
        goto lenerr;
 802305e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8023060:	6878      	ldr	r0, [r7, #4]
 8023062:	f7fd ff41 	bl	8020ee8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8023066:	e00a      	b.n	802307e <icmp_input+0x1ea>
        goto icmperr;
 8023068:	bf00      	nop
 802306a:	e004      	b.n	8023076 <icmp_input+0x1e2>
        goto icmperr;
 802306c:	bf00      	nop
 802306e:	e002      	b.n	8023076 <icmp_input+0x1e2>
          goto icmperr;
 8023070:	bf00      	nop
 8023072:	e000      	b.n	8023076 <icmp_input+0x1e2>
          goto icmperr;
 8023074:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8023076:	6878      	ldr	r0, [r7, #4]
 8023078:	f7fd ff36 	bl	8020ee8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802307c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802307e:	3728      	adds	r7, #40	; 0x28
 8023080:	46bd      	mov	sp, r7
 8023082:	bd80      	pop	{r7, pc}
 8023084:	20015eac 	.word	0x20015eac
 8023088:	20015ec0 	.word	0x20015ec0
 802308c:	0802ae90 	.word	0x0802ae90
 8023090:	0802aec8 	.word	0x0802aec8
 8023094:	0802af00 	.word	0x0802af00
 8023098:	0802af28 	.word	0x0802af28

0802309c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 802309c:	b580      	push	{r7, lr}
 802309e:	b082      	sub	sp, #8
 80230a0:	af00      	add	r7, sp, #0
 80230a2:	6078      	str	r0, [r7, #4]
 80230a4:	460b      	mov	r3, r1
 80230a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80230a8:	78fb      	ldrb	r3, [r7, #3]
 80230aa:	461a      	mov	r2, r3
 80230ac:	2103      	movs	r1, #3
 80230ae:	6878      	ldr	r0, [r7, #4]
 80230b0:	f000 f814 	bl	80230dc <icmp_send_response>
}
 80230b4:	bf00      	nop
 80230b6:	3708      	adds	r7, #8
 80230b8:	46bd      	mov	sp, r7
 80230ba:	bd80      	pop	{r7, pc}

080230bc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80230bc:	b580      	push	{r7, lr}
 80230be:	b082      	sub	sp, #8
 80230c0:	af00      	add	r7, sp, #0
 80230c2:	6078      	str	r0, [r7, #4]
 80230c4:	460b      	mov	r3, r1
 80230c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80230c8:	78fb      	ldrb	r3, [r7, #3]
 80230ca:	461a      	mov	r2, r3
 80230cc:	210b      	movs	r1, #11
 80230ce:	6878      	ldr	r0, [r7, #4]
 80230d0:	f000 f804 	bl	80230dc <icmp_send_response>
}
 80230d4:	bf00      	nop
 80230d6:	3708      	adds	r7, #8
 80230d8:	46bd      	mov	sp, r7
 80230da:	bd80      	pop	{r7, pc}

080230dc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80230dc:	b580      	push	{r7, lr}
 80230de:	b08c      	sub	sp, #48	; 0x30
 80230e0:	af04      	add	r7, sp, #16
 80230e2:	6078      	str	r0, [r7, #4]
 80230e4:	460b      	mov	r3, r1
 80230e6:	70fb      	strb	r3, [r7, #3]
 80230e8:	4613      	mov	r3, r2
 80230ea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80230ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80230f0:	2124      	movs	r1, #36	; 0x24
 80230f2:	2022      	movs	r0, #34	; 0x22
 80230f4:	f7fd fc16 	bl	8020924 <pbuf_alloc>
 80230f8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80230fa:	69fb      	ldr	r3, [r7, #28]
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	d04c      	beq.n	802319a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023100:	69fb      	ldr	r3, [r7, #28]
 8023102:	895b      	ldrh	r3, [r3, #10]
 8023104:	2b23      	cmp	r3, #35	; 0x23
 8023106:	d806      	bhi.n	8023116 <icmp_send_response+0x3a>
 8023108:	4b26      	ldr	r3, [pc, #152]	; (80231a4 <icmp_send_response+0xc8>)
 802310a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802310e:	4926      	ldr	r1, [pc, #152]	; (80231a8 <icmp_send_response+0xcc>)
 8023110:	4826      	ldr	r0, [pc, #152]	; (80231ac <icmp_send_response+0xd0>)
 8023112:	f001 fc21 	bl	8024958 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	685b      	ldr	r3, [r3, #4]
 802311a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 802311c:	69fb      	ldr	r3, [r7, #28]
 802311e:	685b      	ldr	r3, [r3, #4]
 8023120:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8023122:	697b      	ldr	r3, [r7, #20]
 8023124:	78fa      	ldrb	r2, [r7, #3]
 8023126:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8023128:	697b      	ldr	r3, [r7, #20]
 802312a:	78ba      	ldrb	r2, [r7, #2]
 802312c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 802312e:	697b      	ldr	r3, [r7, #20]
 8023130:	2200      	movs	r2, #0
 8023132:	711a      	strb	r2, [r3, #4]
 8023134:	2200      	movs	r2, #0
 8023136:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8023138:	697b      	ldr	r3, [r7, #20]
 802313a:	2200      	movs	r2, #0
 802313c:	719a      	strb	r2, [r3, #6]
 802313e:	2200      	movs	r2, #0
 8023140:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023142:	69fb      	ldr	r3, [r7, #28]
 8023144:	685b      	ldr	r3, [r3, #4]
 8023146:	f103 0008 	add.w	r0, r3, #8
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	685b      	ldr	r3, [r3, #4]
 802314e:	221c      	movs	r2, #28
 8023150:	4619      	mov	r1, r3
 8023152:	f001 faf1 	bl	8024738 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8023156:	69bb      	ldr	r3, [r7, #24]
 8023158:	68db      	ldr	r3, [r3, #12]
 802315a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802315c:	f107 030c 	add.w	r3, r7, #12
 8023160:	4618      	mov	r0, r3
 8023162:	f000 f825 	bl	80231b0 <ip4_route>
 8023166:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8023168:	693b      	ldr	r3, [r7, #16]
 802316a:	2b00      	cmp	r3, #0
 802316c:	d011      	beq.n	8023192 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 802316e:	697b      	ldr	r3, [r7, #20]
 8023170:	2200      	movs	r2, #0
 8023172:	709a      	strb	r2, [r3, #2]
 8023174:	2200      	movs	r2, #0
 8023176:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023178:	f107 020c 	add.w	r2, r7, #12
 802317c:	693b      	ldr	r3, [r7, #16]
 802317e:	9302      	str	r3, [sp, #8]
 8023180:	2301      	movs	r3, #1
 8023182:	9301      	str	r3, [sp, #4]
 8023184:	2300      	movs	r3, #0
 8023186:	9300      	str	r3, [sp, #0]
 8023188:	23ff      	movs	r3, #255	; 0xff
 802318a:	2100      	movs	r1, #0
 802318c:	69f8      	ldr	r0, [r7, #28]
 802318e:	f000 f9c3 	bl	8023518 <ip4_output_if>
  }
  pbuf_free(q);
 8023192:	69f8      	ldr	r0, [r7, #28]
 8023194:	f7fd fea8 	bl	8020ee8 <pbuf_free>
 8023198:	e000      	b.n	802319c <icmp_send_response+0xc0>
    return;
 802319a:	bf00      	nop
}
 802319c:	3720      	adds	r7, #32
 802319e:	46bd      	mov	sp, r7
 80231a0:	bd80      	pop	{r7, pc}
 80231a2:	bf00      	nop
 80231a4:	0802ae90 	.word	0x0802ae90
 80231a8:	0802af5c 	.word	0x0802af5c
 80231ac:	0802af00 	.word	0x0802af00

080231b0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80231b0:	b480      	push	{r7}
 80231b2:	b085      	sub	sp, #20
 80231b4:	af00      	add	r7, sp, #0
 80231b6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80231b8:	4b33      	ldr	r3, [pc, #204]	; (8023288 <ip4_route+0xd8>)
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	60fb      	str	r3, [r7, #12]
 80231be:	e036      	b.n	802322e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80231c0:	68fb      	ldr	r3, [r7, #12]
 80231c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80231c6:	f003 0301 	and.w	r3, r3, #1
 80231ca:	b2db      	uxtb	r3, r3
 80231cc:	2b00      	cmp	r3, #0
 80231ce:	d02b      	beq.n	8023228 <ip4_route+0x78>
 80231d0:	68fb      	ldr	r3, [r7, #12]
 80231d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80231d6:	089b      	lsrs	r3, r3, #2
 80231d8:	f003 0301 	and.w	r3, r3, #1
 80231dc:	b2db      	uxtb	r3, r3
 80231de:	2b00      	cmp	r3, #0
 80231e0:	d022      	beq.n	8023228 <ip4_route+0x78>
 80231e2:	68fb      	ldr	r3, [r7, #12]
 80231e4:	3304      	adds	r3, #4
 80231e6:	681b      	ldr	r3, [r3, #0]
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d01d      	beq.n	8023228 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80231ec:	687b      	ldr	r3, [r7, #4]
 80231ee:	681a      	ldr	r2, [r3, #0]
 80231f0:	68fb      	ldr	r3, [r7, #12]
 80231f2:	3304      	adds	r3, #4
 80231f4:	681b      	ldr	r3, [r3, #0]
 80231f6:	405a      	eors	r2, r3
 80231f8:	68fb      	ldr	r3, [r7, #12]
 80231fa:	3308      	adds	r3, #8
 80231fc:	681b      	ldr	r3, [r3, #0]
 80231fe:	4013      	ands	r3, r2
 8023200:	2b00      	cmp	r3, #0
 8023202:	d101      	bne.n	8023208 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8023204:	68fb      	ldr	r3, [r7, #12]
 8023206:	e038      	b.n	802327a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8023208:	68fb      	ldr	r3, [r7, #12]
 802320a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802320e:	f003 0302 	and.w	r3, r3, #2
 8023212:	2b00      	cmp	r3, #0
 8023214:	d108      	bne.n	8023228 <ip4_route+0x78>
 8023216:	687b      	ldr	r3, [r7, #4]
 8023218:	681a      	ldr	r2, [r3, #0]
 802321a:	68fb      	ldr	r3, [r7, #12]
 802321c:	330c      	adds	r3, #12
 802321e:	681b      	ldr	r3, [r3, #0]
 8023220:	429a      	cmp	r2, r3
 8023222:	d101      	bne.n	8023228 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8023224:	68fb      	ldr	r3, [r7, #12]
 8023226:	e028      	b.n	802327a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8023228:	68fb      	ldr	r3, [r7, #12]
 802322a:	681b      	ldr	r3, [r3, #0]
 802322c:	60fb      	str	r3, [r7, #12]
 802322e:	68fb      	ldr	r3, [r7, #12]
 8023230:	2b00      	cmp	r3, #0
 8023232:	d1c5      	bne.n	80231c0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8023234:	4b15      	ldr	r3, [pc, #84]	; (802328c <ip4_route+0xdc>)
 8023236:	681b      	ldr	r3, [r3, #0]
 8023238:	2b00      	cmp	r3, #0
 802323a:	d01a      	beq.n	8023272 <ip4_route+0xc2>
 802323c:	4b13      	ldr	r3, [pc, #76]	; (802328c <ip4_route+0xdc>)
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023244:	f003 0301 	and.w	r3, r3, #1
 8023248:	2b00      	cmp	r3, #0
 802324a:	d012      	beq.n	8023272 <ip4_route+0xc2>
 802324c:	4b0f      	ldr	r3, [pc, #60]	; (802328c <ip4_route+0xdc>)
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023254:	f003 0304 	and.w	r3, r3, #4
 8023258:	2b00      	cmp	r3, #0
 802325a:	d00a      	beq.n	8023272 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802325c:	4b0b      	ldr	r3, [pc, #44]	; (802328c <ip4_route+0xdc>)
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	3304      	adds	r3, #4
 8023262:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8023264:	2b00      	cmp	r3, #0
 8023266:	d004      	beq.n	8023272 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	681b      	ldr	r3, [r3, #0]
 802326c:	b2db      	uxtb	r3, r3
 802326e:	2b7f      	cmp	r3, #127	; 0x7f
 8023270:	d101      	bne.n	8023276 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8023272:	2300      	movs	r3, #0
 8023274:	e001      	b.n	802327a <ip4_route+0xca>
  }

  return netif_default;
 8023276:	4b05      	ldr	r3, [pc, #20]	; (802328c <ip4_route+0xdc>)
 8023278:	681b      	ldr	r3, [r3, #0]
}
 802327a:	4618      	mov	r0, r3
 802327c:	3714      	adds	r7, #20
 802327e:	46bd      	mov	sp, r7
 8023280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023284:	4770      	bx	lr
 8023286:	bf00      	nop
 8023288:	200194bc 	.word	0x200194bc
 802328c:	200194c0 	.word	0x200194c0

08023290 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8023290:	b580      	push	{r7, lr}
 8023292:	b082      	sub	sp, #8
 8023294:	af00      	add	r7, sp, #0
 8023296:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802329e:	f003 0301 	and.w	r3, r3, #1
 80232a2:	b2db      	uxtb	r3, r3
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d016      	beq.n	80232d6 <ip4_input_accept+0x46>
 80232a8:	687b      	ldr	r3, [r7, #4]
 80232aa:	3304      	adds	r3, #4
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	d011      	beq.n	80232d6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80232b2:	4b0b      	ldr	r3, [pc, #44]	; (80232e0 <ip4_input_accept+0x50>)
 80232b4:	695a      	ldr	r2, [r3, #20]
 80232b6:	687b      	ldr	r3, [r7, #4]
 80232b8:	3304      	adds	r3, #4
 80232ba:	681b      	ldr	r3, [r3, #0]
 80232bc:	429a      	cmp	r2, r3
 80232be:	d008      	beq.n	80232d2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80232c0:	4b07      	ldr	r3, [pc, #28]	; (80232e0 <ip4_input_accept+0x50>)
 80232c2:	695b      	ldr	r3, [r3, #20]
 80232c4:	6879      	ldr	r1, [r7, #4]
 80232c6:	4618      	mov	r0, r3
 80232c8:	f000 fa0c 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 80232cc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d001      	beq.n	80232d6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80232d2:	2301      	movs	r3, #1
 80232d4:	e000      	b.n	80232d8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80232d6:	2300      	movs	r3, #0
}
 80232d8:	4618      	mov	r0, r3
 80232da:	3708      	adds	r7, #8
 80232dc:	46bd      	mov	sp, r7
 80232de:	bd80      	pop	{r7, pc}
 80232e0:	20015eac 	.word	0x20015eac

080232e4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80232e4:	b580      	push	{r7, lr}
 80232e6:	b086      	sub	sp, #24
 80232e8:	af00      	add	r7, sp, #0
 80232ea:	6078      	str	r0, [r7, #4]
 80232ec:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	685b      	ldr	r3, [r3, #4]
 80232f2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80232f4:	697b      	ldr	r3, [r7, #20]
 80232f6:	781b      	ldrb	r3, [r3, #0]
 80232f8:	091b      	lsrs	r3, r3, #4
 80232fa:	b2db      	uxtb	r3, r3
 80232fc:	2b04      	cmp	r3, #4
 80232fe:	d004      	beq.n	802330a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8023300:	6878      	ldr	r0, [r7, #4]
 8023302:	f7fd fdf1 	bl	8020ee8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8023306:	2300      	movs	r3, #0
 8023308:	e0fd      	b.n	8023506 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802330a:	697b      	ldr	r3, [r7, #20]
 802330c:	781b      	ldrb	r3, [r3, #0]
 802330e:	f003 030f 	and.w	r3, r3, #15
 8023312:	b2db      	uxtb	r3, r3
 8023314:	009b      	lsls	r3, r3, #2
 8023316:	b2db      	uxtb	r3, r3
 8023318:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802331a:	697b      	ldr	r3, [r7, #20]
 802331c:	885b      	ldrh	r3, [r3, #2]
 802331e:	b29b      	uxth	r3, r3
 8023320:	4618      	mov	r0, r3
 8023322:	f7fc fa05 	bl	801f730 <lwip_htons>
 8023326:	4603      	mov	r3, r0
 8023328:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802332a:	687b      	ldr	r3, [r7, #4]
 802332c:	891b      	ldrh	r3, [r3, #8]
 802332e:	89ba      	ldrh	r2, [r7, #12]
 8023330:	429a      	cmp	r2, r3
 8023332:	d204      	bcs.n	802333e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8023334:	89bb      	ldrh	r3, [r7, #12]
 8023336:	4619      	mov	r1, r3
 8023338:	6878      	ldr	r0, [r7, #4]
 802333a:	f7fd fc4f 	bl	8020bdc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802333e:	687b      	ldr	r3, [r7, #4]
 8023340:	895b      	ldrh	r3, [r3, #10]
 8023342:	89fa      	ldrh	r2, [r7, #14]
 8023344:	429a      	cmp	r2, r3
 8023346:	d807      	bhi.n	8023358 <ip4_input+0x74>
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	891b      	ldrh	r3, [r3, #8]
 802334c:	89ba      	ldrh	r2, [r7, #12]
 802334e:	429a      	cmp	r2, r3
 8023350:	d802      	bhi.n	8023358 <ip4_input+0x74>
 8023352:	89fb      	ldrh	r3, [r7, #14]
 8023354:	2b13      	cmp	r3, #19
 8023356:	d804      	bhi.n	8023362 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8023358:	6878      	ldr	r0, [r7, #4]
 802335a:	f7fd fdc5 	bl	8020ee8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802335e:	2300      	movs	r3, #0
 8023360:	e0d1      	b.n	8023506 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023362:	697b      	ldr	r3, [r7, #20]
 8023364:	691b      	ldr	r3, [r3, #16]
 8023366:	4a6a      	ldr	r2, [pc, #424]	; (8023510 <ip4_input+0x22c>)
 8023368:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802336a:	697b      	ldr	r3, [r7, #20]
 802336c:	68db      	ldr	r3, [r3, #12]
 802336e:	4a68      	ldr	r2, [pc, #416]	; (8023510 <ip4_input+0x22c>)
 8023370:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023372:	4b67      	ldr	r3, [pc, #412]	; (8023510 <ip4_input+0x22c>)
 8023374:	695b      	ldr	r3, [r3, #20]
 8023376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802337a:	2be0      	cmp	r3, #224	; 0xe0
 802337c:	d112      	bne.n	80233a4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802337e:	683b      	ldr	r3, [r7, #0]
 8023380:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023384:	f003 0301 	and.w	r3, r3, #1
 8023388:	b2db      	uxtb	r3, r3
 802338a:	2b00      	cmp	r3, #0
 802338c:	d007      	beq.n	802339e <ip4_input+0xba>
 802338e:	683b      	ldr	r3, [r7, #0]
 8023390:	3304      	adds	r3, #4
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	2b00      	cmp	r3, #0
 8023396:	d002      	beq.n	802339e <ip4_input+0xba>
      netif = inp;
 8023398:	683b      	ldr	r3, [r7, #0]
 802339a:	613b      	str	r3, [r7, #16]
 802339c:	e02a      	b.n	80233f4 <ip4_input+0x110>
    } else {
      netif = NULL;
 802339e:	2300      	movs	r3, #0
 80233a0:	613b      	str	r3, [r7, #16]
 80233a2:	e027      	b.n	80233f4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80233a4:	6838      	ldr	r0, [r7, #0]
 80233a6:	f7ff ff73 	bl	8023290 <ip4_input_accept>
 80233aa:	4603      	mov	r3, r0
 80233ac:	2b00      	cmp	r3, #0
 80233ae:	d002      	beq.n	80233b6 <ip4_input+0xd2>
      netif = inp;
 80233b0:	683b      	ldr	r3, [r7, #0]
 80233b2:	613b      	str	r3, [r7, #16]
 80233b4:	e01e      	b.n	80233f4 <ip4_input+0x110>
    } else {
      netif = NULL;
 80233b6:	2300      	movs	r3, #0
 80233b8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80233ba:	4b55      	ldr	r3, [pc, #340]	; (8023510 <ip4_input+0x22c>)
 80233bc:	695b      	ldr	r3, [r3, #20]
 80233be:	b2db      	uxtb	r3, r3
 80233c0:	2b7f      	cmp	r3, #127	; 0x7f
 80233c2:	d017      	beq.n	80233f4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80233c4:	4b53      	ldr	r3, [pc, #332]	; (8023514 <ip4_input+0x230>)
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	613b      	str	r3, [r7, #16]
 80233ca:	e00e      	b.n	80233ea <ip4_input+0x106>
          if (netif == inp) {
 80233cc:	693a      	ldr	r2, [r7, #16]
 80233ce:	683b      	ldr	r3, [r7, #0]
 80233d0:	429a      	cmp	r2, r3
 80233d2:	d006      	beq.n	80233e2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80233d4:	6938      	ldr	r0, [r7, #16]
 80233d6:	f7ff ff5b 	bl	8023290 <ip4_input_accept>
 80233da:	4603      	mov	r3, r0
 80233dc:	2b00      	cmp	r3, #0
 80233de:	d108      	bne.n	80233f2 <ip4_input+0x10e>
 80233e0:	e000      	b.n	80233e4 <ip4_input+0x100>
            continue;
 80233e2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80233e4:	693b      	ldr	r3, [r7, #16]
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	613b      	str	r3, [r7, #16]
 80233ea:	693b      	ldr	r3, [r7, #16]
 80233ec:	2b00      	cmp	r3, #0
 80233ee:	d1ed      	bne.n	80233cc <ip4_input+0xe8>
 80233f0:	e000      	b.n	80233f4 <ip4_input+0x110>
            break;
 80233f2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80233f4:	4b46      	ldr	r3, [pc, #280]	; (8023510 <ip4_input+0x22c>)
 80233f6:	691b      	ldr	r3, [r3, #16]
 80233f8:	6839      	ldr	r1, [r7, #0]
 80233fa:	4618      	mov	r0, r3
 80233fc:	f000 f972 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 8023400:	4603      	mov	r3, r0
 8023402:	2b00      	cmp	r3, #0
 8023404:	d105      	bne.n	8023412 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8023406:	4b42      	ldr	r3, [pc, #264]	; (8023510 <ip4_input+0x22c>)
 8023408:	691b      	ldr	r3, [r3, #16]
 802340a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802340e:	2be0      	cmp	r3, #224	; 0xe0
 8023410:	d104      	bne.n	802341c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8023412:	6878      	ldr	r0, [r7, #4]
 8023414:	f7fd fd68 	bl	8020ee8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8023418:	2300      	movs	r3, #0
 802341a:	e074      	b.n	8023506 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 802341c:	693b      	ldr	r3, [r7, #16]
 802341e:	2b00      	cmp	r3, #0
 8023420:	d104      	bne.n	802342c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8023422:	6878      	ldr	r0, [r7, #4]
 8023424:	f7fd fd60 	bl	8020ee8 <pbuf_free>
    return ERR_OK;
 8023428:	2300      	movs	r3, #0
 802342a:	e06c      	b.n	8023506 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 802342c:	697b      	ldr	r3, [r7, #20]
 802342e:	88db      	ldrh	r3, [r3, #6]
 8023430:	b29b      	uxth	r3, r3
 8023432:	461a      	mov	r2, r3
 8023434:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8023438:	4013      	ands	r3, r2
 802343a:	2b00      	cmp	r3, #0
 802343c:	d00b      	beq.n	8023456 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802343e:	6878      	ldr	r0, [r7, #4]
 8023440:	f000 fd26 	bl	8023e90 <ip4_reass>
 8023444:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8023446:	687b      	ldr	r3, [r7, #4]
 8023448:	2b00      	cmp	r3, #0
 802344a:	d101      	bne.n	8023450 <ip4_input+0x16c>
      return ERR_OK;
 802344c:	2300      	movs	r3, #0
 802344e:	e05a      	b.n	8023506 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	685b      	ldr	r3, [r3, #4]
 8023454:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8023456:	4a2e      	ldr	r2, [pc, #184]	; (8023510 <ip4_input+0x22c>)
 8023458:	693b      	ldr	r3, [r7, #16]
 802345a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 802345c:	4a2c      	ldr	r2, [pc, #176]	; (8023510 <ip4_input+0x22c>)
 802345e:	683b      	ldr	r3, [r7, #0]
 8023460:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8023462:	4a2b      	ldr	r2, [pc, #172]	; (8023510 <ip4_input+0x22c>)
 8023464:	697b      	ldr	r3, [r7, #20]
 8023466:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023468:	697b      	ldr	r3, [r7, #20]
 802346a:	781b      	ldrb	r3, [r3, #0]
 802346c:	f003 030f 	and.w	r3, r3, #15
 8023470:	b2db      	uxtb	r3, r3
 8023472:	009b      	lsls	r3, r3, #2
 8023474:	b2db      	uxtb	r3, r3
 8023476:	b29a      	uxth	r2, r3
 8023478:	4b25      	ldr	r3, [pc, #148]	; (8023510 <ip4_input+0x22c>)
 802347a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 802347c:	89fb      	ldrh	r3, [r7, #14]
 802347e:	4619      	mov	r1, r3
 8023480:	6878      	ldr	r0, [r7, #4]
 8023482:	f7fd fcab 	bl	8020ddc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023486:	697b      	ldr	r3, [r7, #20]
 8023488:	7a5b      	ldrb	r3, [r3, #9]
 802348a:	2b01      	cmp	r3, #1
 802348c:	d006      	beq.n	802349c <ip4_input+0x1b8>
 802348e:	2b11      	cmp	r3, #17
 8023490:	d109      	bne.n	80234a6 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8023492:	6839      	ldr	r1, [r7, #0]
 8023494:	6878      	ldr	r0, [r7, #4]
 8023496:	f7fe f9b5 	bl	8021804 <udp_input>
        break;
 802349a:	e021      	b.n	80234e0 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 802349c:	6839      	ldr	r1, [r7, #0]
 802349e:	6878      	ldr	r0, [r7, #4]
 80234a0:	f7ff fcf8 	bl	8022e94 <icmp_input>
        break;
 80234a4:	e01c      	b.n	80234e0 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80234a6:	4b1a      	ldr	r3, [pc, #104]	; (8023510 <ip4_input+0x22c>)
 80234a8:	695b      	ldr	r3, [r3, #20]
 80234aa:	6939      	ldr	r1, [r7, #16]
 80234ac:	4618      	mov	r0, r3
 80234ae:	f000 f919 	bl	80236e4 <ip4_addr_isbroadcast_u32>
 80234b2:	4603      	mov	r3, r0
 80234b4:	2b00      	cmp	r3, #0
 80234b6:	d10f      	bne.n	80234d8 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80234b8:	4b15      	ldr	r3, [pc, #84]	; (8023510 <ip4_input+0x22c>)
 80234ba:	695b      	ldr	r3, [r3, #20]
 80234bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80234c0:	2be0      	cmp	r3, #224	; 0xe0
 80234c2:	d009      	beq.n	80234d8 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80234c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80234c8:	4619      	mov	r1, r3
 80234ca:	6878      	ldr	r0, [r7, #4]
 80234cc:	f7fd fcf9 	bl	8020ec2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80234d0:	2102      	movs	r1, #2
 80234d2:	6878      	ldr	r0, [r7, #4]
 80234d4:	f7ff fde2 	bl	802309c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80234d8:	6878      	ldr	r0, [r7, #4]
 80234da:	f7fd fd05 	bl	8020ee8 <pbuf_free>
        break;
 80234de:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80234e0:	4b0b      	ldr	r3, [pc, #44]	; (8023510 <ip4_input+0x22c>)
 80234e2:	2200      	movs	r2, #0
 80234e4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80234e6:	4b0a      	ldr	r3, [pc, #40]	; (8023510 <ip4_input+0x22c>)
 80234e8:	2200      	movs	r2, #0
 80234ea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80234ec:	4b08      	ldr	r3, [pc, #32]	; (8023510 <ip4_input+0x22c>)
 80234ee:	2200      	movs	r2, #0
 80234f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80234f2:	4b07      	ldr	r3, [pc, #28]	; (8023510 <ip4_input+0x22c>)
 80234f4:	2200      	movs	r2, #0
 80234f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80234f8:	4b05      	ldr	r3, [pc, #20]	; (8023510 <ip4_input+0x22c>)
 80234fa:	2200      	movs	r2, #0
 80234fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80234fe:	4b04      	ldr	r3, [pc, #16]	; (8023510 <ip4_input+0x22c>)
 8023500:	2200      	movs	r2, #0
 8023502:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8023504:	2300      	movs	r3, #0
}
 8023506:	4618      	mov	r0, r3
 8023508:	3718      	adds	r7, #24
 802350a:	46bd      	mov	sp, r7
 802350c:	bd80      	pop	{r7, pc}
 802350e:	bf00      	nop
 8023510:	20015eac 	.word	0x20015eac
 8023514:	200194bc 	.word	0x200194bc

08023518 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8023518:	b580      	push	{r7, lr}
 802351a:	b08a      	sub	sp, #40	; 0x28
 802351c:	af04      	add	r7, sp, #16
 802351e:	60f8      	str	r0, [r7, #12]
 8023520:	60b9      	str	r1, [r7, #8]
 8023522:	607a      	str	r2, [r7, #4]
 8023524:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8023526:	68bb      	ldr	r3, [r7, #8]
 8023528:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802352a:	687b      	ldr	r3, [r7, #4]
 802352c:	2b00      	cmp	r3, #0
 802352e:	d009      	beq.n	8023544 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8023530:	68bb      	ldr	r3, [r7, #8]
 8023532:	2b00      	cmp	r3, #0
 8023534:	d003      	beq.n	802353e <ip4_output_if+0x26>
 8023536:	68bb      	ldr	r3, [r7, #8]
 8023538:	681b      	ldr	r3, [r3, #0]
 802353a:	2b00      	cmp	r3, #0
 802353c:	d102      	bne.n	8023544 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023540:	3304      	adds	r3, #4
 8023542:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8023544:	78fa      	ldrb	r2, [r7, #3]
 8023546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023548:	9302      	str	r3, [sp, #8]
 802354a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802354e:	9301      	str	r3, [sp, #4]
 8023550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023554:	9300      	str	r3, [sp, #0]
 8023556:	4613      	mov	r3, r2
 8023558:	687a      	ldr	r2, [r7, #4]
 802355a:	6979      	ldr	r1, [r7, #20]
 802355c:	68f8      	ldr	r0, [r7, #12]
 802355e:	f000 f805 	bl	802356c <ip4_output_if_src>
 8023562:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8023564:	4618      	mov	r0, r3
 8023566:	3718      	adds	r7, #24
 8023568:	46bd      	mov	sp, r7
 802356a:	bd80      	pop	{r7, pc}

0802356c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 802356c:	b580      	push	{r7, lr}
 802356e:	b088      	sub	sp, #32
 8023570:	af00      	add	r7, sp, #0
 8023572:	60f8      	str	r0, [r7, #12]
 8023574:	60b9      	str	r1, [r7, #8]
 8023576:	607a      	str	r2, [r7, #4]
 8023578:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802357a:	68fb      	ldr	r3, [r7, #12]
 802357c:	7b9b      	ldrb	r3, [r3, #14]
 802357e:	2b01      	cmp	r3, #1
 8023580:	d006      	beq.n	8023590 <ip4_output_if_src+0x24>
 8023582:	4b52      	ldr	r3, [pc, #328]	; (80236cc <ip4_output_if_src+0x160>)
 8023584:	f44f 7255 	mov.w	r2, #852	; 0x354
 8023588:	4951      	ldr	r1, [pc, #324]	; (80236d0 <ip4_output_if_src+0x164>)
 802358a:	4852      	ldr	r0, [pc, #328]	; (80236d4 <ip4_output_if_src+0x168>)
 802358c:	f001 f9e4 	bl	8024958 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	2b00      	cmp	r3, #0
 8023594:	d060      	beq.n	8023658 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8023596:	2314      	movs	r3, #20
 8023598:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 802359a:	2114      	movs	r1, #20
 802359c:	68f8      	ldr	r0, [r7, #12]
 802359e:	f7fd fc0d 	bl	8020dbc <pbuf_add_header>
 80235a2:	4603      	mov	r3, r0
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	d002      	beq.n	80235ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80235a8:	f06f 0301 	mvn.w	r3, #1
 80235ac:	e089      	b.n	80236c2 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80235ae:	68fb      	ldr	r3, [r7, #12]
 80235b0:	685b      	ldr	r3, [r3, #4]
 80235b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	895b      	ldrh	r3, [r3, #10]
 80235b8:	2b13      	cmp	r3, #19
 80235ba:	d806      	bhi.n	80235ca <ip4_output_if_src+0x5e>
 80235bc:	4b43      	ldr	r3, [pc, #268]	; (80236cc <ip4_output_if_src+0x160>)
 80235be:	f44f 7262 	mov.w	r2, #904	; 0x388
 80235c2:	4945      	ldr	r1, [pc, #276]	; (80236d8 <ip4_output_if_src+0x16c>)
 80235c4:	4843      	ldr	r0, [pc, #268]	; (80236d4 <ip4_output_if_src+0x168>)
 80235c6:	f001 f9c7 	bl	8024958 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80235ca:	69fb      	ldr	r3, [r7, #28]
 80235cc:	78fa      	ldrb	r2, [r7, #3]
 80235ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80235d0:	69fb      	ldr	r3, [r7, #28]
 80235d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80235d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	681a      	ldr	r2, [r3, #0]
 80235dc:	69fb      	ldr	r3, [r7, #28]
 80235de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80235e0:	8b7b      	ldrh	r3, [r7, #26]
 80235e2:	089b      	lsrs	r3, r3, #2
 80235e4:	b29b      	uxth	r3, r3
 80235e6:	b2db      	uxtb	r3, r3
 80235e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80235ec:	b2da      	uxtb	r2, r3
 80235ee:	69fb      	ldr	r3, [r7, #28]
 80235f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80235f2:	69fb      	ldr	r3, [r7, #28]
 80235f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80235f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80235fa:	68fb      	ldr	r3, [r7, #12]
 80235fc:	891b      	ldrh	r3, [r3, #8]
 80235fe:	4618      	mov	r0, r3
 8023600:	f7fc f896 	bl	801f730 <lwip_htons>
 8023604:	4603      	mov	r3, r0
 8023606:	461a      	mov	r2, r3
 8023608:	69fb      	ldr	r3, [r7, #28]
 802360a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 802360c:	69fb      	ldr	r3, [r7, #28]
 802360e:	2200      	movs	r2, #0
 8023610:	719a      	strb	r2, [r3, #6]
 8023612:	2200      	movs	r2, #0
 8023614:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023616:	4b31      	ldr	r3, [pc, #196]	; (80236dc <ip4_output_if_src+0x170>)
 8023618:	881b      	ldrh	r3, [r3, #0]
 802361a:	4618      	mov	r0, r3
 802361c:	f7fc f888 	bl	801f730 <lwip_htons>
 8023620:	4603      	mov	r3, r0
 8023622:	461a      	mov	r2, r3
 8023624:	69fb      	ldr	r3, [r7, #28]
 8023626:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8023628:	4b2c      	ldr	r3, [pc, #176]	; (80236dc <ip4_output_if_src+0x170>)
 802362a:	881b      	ldrh	r3, [r3, #0]
 802362c:	3301      	adds	r3, #1
 802362e:	b29a      	uxth	r2, r3
 8023630:	4b2a      	ldr	r3, [pc, #168]	; (80236dc <ip4_output_if_src+0x170>)
 8023632:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8023634:	68bb      	ldr	r3, [r7, #8]
 8023636:	2b00      	cmp	r3, #0
 8023638:	d104      	bne.n	8023644 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802363a:	4b29      	ldr	r3, [pc, #164]	; (80236e0 <ip4_output_if_src+0x174>)
 802363c:	681a      	ldr	r2, [r3, #0]
 802363e:	69fb      	ldr	r3, [r7, #28]
 8023640:	60da      	str	r2, [r3, #12]
 8023642:	e003      	b.n	802364c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8023644:	68bb      	ldr	r3, [r7, #8]
 8023646:	681a      	ldr	r2, [r3, #0]
 8023648:	69fb      	ldr	r3, [r7, #28]
 802364a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 802364c:	69fb      	ldr	r3, [r7, #28]
 802364e:	2200      	movs	r2, #0
 8023650:	729a      	strb	r2, [r3, #10]
 8023652:	2200      	movs	r2, #0
 8023654:	72da      	strb	r2, [r3, #11]
 8023656:	e00f      	b.n	8023678 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8023658:	68fb      	ldr	r3, [r7, #12]
 802365a:	895b      	ldrh	r3, [r3, #10]
 802365c:	2b13      	cmp	r3, #19
 802365e:	d802      	bhi.n	8023666 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023660:	f06f 0301 	mvn.w	r3, #1
 8023664:	e02d      	b.n	80236c2 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8023666:	68fb      	ldr	r3, [r7, #12]
 8023668:	685b      	ldr	r3, [r3, #4]
 802366a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 802366c:	69fb      	ldr	r3, [r7, #28]
 802366e:	691b      	ldr	r3, [r3, #16]
 8023670:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8023672:	f107 0314 	add.w	r3, r7, #20
 8023676:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	681a      	ldr	r2, [r3, #0]
 802367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802367e:	3304      	adds	r3, #4
 8023680:	681b      	ldr	r3, [r3, #0]
 8023682:	429a      	cmp	r2, r3
 8023684:	d105      	bne.n	8023692 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8023686:	68f9      	ldr	r1, [r7, #12]
 8023688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802368a:	f7fd f86f 	bl	802076c <netif_loop_output>
 802368e:	4603      	mov	r3, r0
 8023690:	e017      	b.n	80236c2 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8023692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023696:	2b00      	cmp	r3, #0
 8023698:	d00c      	beq.n	80236b4 <ip4_output_if_src+0x148>
 802369a:	68fb      	ldr	r3, [r7, #12]
 802369c:	891a      	ldrh	r2, [r3, #8]
 802369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80236a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80236a2:	429a      	cmp	r2, r3
 80236a4:	d906      	bls.n	80236b4 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80236a6:	687a      	ldr	r2, [r7, #4]
 80236a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80236aa:	68f8      	ldr	r0, [r7, #12]
 80236ac:	f000 fde4 	bl	8024278 <ip4_frag>
 80236b0:	4603      	mov	r3, r0
 80236b2:	e006      	b.n	80236c2 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80236b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80236b6:	695b      	ldr	r3, [r3, #20]
 80236b8:	687a      	ldr	r2, [r7, #4]
 80236ba:	68f9      	ldr	r1, [r7, #12]
 80236bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80236be:	4798      	blx	r3
 80236c0:	4603      	mov	r3, r0
}
 80236c2:	4618      	mov	r0, r3
 80236c4:	3720      	adds	r7, #32
 80236c6:	46bd      	mov	sp, r7
 80236c8:	bd80      	pop	{r7, pc}
 80236ca:	bf00      	nop
 80236cc:	0802af88 	.word	0x0802af88
 80236d0:	0802afbc 	.word	0x0802afbc
 80236d4:	0802afc8 	.word	0x0802afc8
 80236d8:	0802aff0 	.word	0x0802aff0
 80236dc:	200199c6 	.word	0x200199c6
 80236e0:	0802b794 	.word	0x0802b794

080236e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80236e4:	b480      	push	{r7}
 80236e6:	b085      	sub	sp, #20
 80236e8:	af00      	add	r7, sp, #0
 80236ea:	6078      	str	r0, [r7, #4]
 80236ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80236ee:	687b      	ldr	r3, [r7, #4]
 80236f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236f8:	d002      	beq.n	8023700 <ip4_addr_isbroadcast_u32+0x1c>
 80236fa:	687b      	ldr	r3, [r7, #4]
 80236fc:	2b00      	cmp	r3, #0
 80236fe:	d101      	bne.n	8023704 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8023700:	2301      	movs	r3, #1
 8023702:	e02a      	b.n	802375a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8023704:	683b      	ldr	r3, [r7, #0]
 8023706:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802370a:	f003 0302 	and.w	r3, r3, #2
 802370e:	2b00      	cmp	r3, #0
 8023710:	d101      	bne.n	8023716 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8023712:	2300      	movs	r3, #0
 8023714:	e021      	b.n	802375a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8023716:	683b      	ldr	r3, [r7, #0]
 8023718:	3304      	adds	r3, #4
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	687a      	ldr	r2, [r7, #4]
 802371e:	429a      	cmp	r2, r3
 8023720:	d101      	bne.n	8023726 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8023722:	2300      	movs	r3, #0
 8023724:	e019      	b.n	802375a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8023726:	68fa      	ldr	r2, [r7, #12]
 8023728:	683b      	ldr	r3, [r7, #0]
 802372a:	3304      	adds	r3, #4
 802372c:	681b      	ldr	r3, [r3, #0]
 802372e:	405a      	eors	r2, r3
 8023730:	683b      	ldr	r3, [r7, #0]
 8023732:	3308      	adds	r3, #8
 8023734:	681b      	ldr	r3, [r3, #0]
 8023736:	4013      	ands	r3, r2
 8023738:	2b00      	cmp	r3, #0
 802373a:	d10d      	bne.n	8023758 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802373c:	683b      	ldr	r3, [r7, #0]
 802373e:	3308      	adds	r3, #8
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	43da      	mvns	r2, r3
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8023748:	683b      	ldr	r3, [r7, #0]
 802374a:	3308      	adds	r3, #8
 802374c:	681b      	ldr	r3, [r3, #0]
 802374e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023750:	429a      	cmp	r2, r3
 8023752:	d101      	bne.n	8023758 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8023754:	2301      	movs	r3, #1
 8023756:	e000      	b.n	802375a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8023758:	2300      	movs	r3, #0
  }
}
 802375a:	4618      	mov	r0, r3
 802375c:	3714      	adds	r7, #20
 802375e:	46bd      	mov	sp, r7
 8023760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023764:	4770      	bx	lr
	...

08023768 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8023768:	b580      	push	{r7, lr}
 802376a:	b082      	sub	sp, #8
 802376c:	af00      	add	r7, sp, #0
 802376e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8023770:	2210      	movs	r2, #16
 8023772:	4904      	ldr	r1, [pc, #16]	; (8023784 <ip4addr_ntoa+0x1c>)
 8023774:	6878      	ldr	r0, [r7, #4]
 8023776:	f000 f807 	bl	8023788 <ip4addr_ntoa_r>
 802377a:	4603      	mov	r3, r0
}
 802377c:	4618      	mov	r0, r3
 802377e:	3708      	adds	r7, #8
 8023780:	46bd      	mov	sp, r7
 8023782:	bd80      	pop	{r7, pc}
 8023784:	200199c8 	.word	0x200199c8

08023788 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8023788:	b480      	push	{r7}
 802378a:	b08d      	sub	sp, #52	; 0x34
 802378c:	af00      	add	r7, sp, #0
 802378e:	60f8      	str	r0, [r7, #12]
 8023790:	60b9      	str	r1, [r7, #8]
 8023792:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8023794:	2300      	movs	r3, #0
 8023796:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8023798:	68fb      	ldr	r3, [r7, #12]
 802379a:	681b      	ldr	r3, [r3, #0]
 802379c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 802379e:	68bb      	ldr	r3, [r7, #8]
 80237a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80237a2:	f107 0318 	add.w	r3, r7, #24
 80237a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80237a8:	2300      	movs	r3, #0
 80237aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80237ae:	e058      	b.n	8023862 <ip4addr_ntoa_r+0xda>
    i = 0;
 80237b0:	2300      	movs	r3, #0
 80237b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80237b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237b8:	781a      	ldrb	r2, [r3, #0]
 80237ba:	4b32      	ldr	r3, [pc, #200]	; (8023884 <ip4addr_ntoa_r+0xfc>)
 80237bc:	fba3 1302 	umull	r1, r3, r3, r2
 80237c0:	08d9      	lsrs	r1, r3, #3
 80237c2:	460b      	mov	r3, r1
 80237c4:	009b      	lsls	r3, r3, #2
 80237c6:	440b      	add	r3, r1
 80237c8:	005b      	lsls	r3, r3, #1
 80237ca:	1ad3      	subs	r3, r2, r3
 80237cc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80237ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237d0:	781b      	ldrb	r3, [r3, #0]
 80237d2:	4a2c      	ldr	r2, [pc, #176]	; (8023884 <ip4addr_ntoa_r+0xfc>)
 80237d4:	fba2 2303 	umull	r2, r3, r2, r3
 80237d8:	08db      	lsrs	r3, r3, #3
 80237da:	b2da      	uxtb	r2, r3
 80237dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237de:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80237e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80237e4:	1c5a      	adds	r2, r3, #1
 80237e6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80237ea:	4619      	mov	r1, r3
 80237ec:	7ffb      	ldrb	r3, [r7, #31]
 80237ee:	3330      	adds	r3, #48	; 0x30
 80237f0:	b2da      	uxtb	r2, r3
 80237f2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80237f6:	443b      	add	r3, r7
 80237f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80237fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237fe:	781b      	ldrb	r3, [r3, #0]
 8023800:	2b00      	cmp	r3, #0
 8023802:	d1d8      	bne.n	80237b6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8023804:	e011      	b.n	802382a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8023806:	6a3b      	ldr	r3, [r7, #32]
 8023808:	1c5a      	adds	r2, r3, #1
 802380a:	623a      	str	r2, [r7, #32]
 802380c:	687a      	ldr	r2, [r7, #4]
 802380e:	429a      	cmp	r2, r3
 8023810:	dc01      	bgt.n	8023816 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8023812:	2300      	movs	r3, #0
 8023814:	e030      	b.n	8023878 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8023816:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802381c:	1c59      	adds	r1, r3, #1
 802381e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8023820:	3230      	adds	r2, #48	; 0x30
 8023822:	443a      	add	r2, r7
 8023824:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8023828:	701a      	strb	r2, [r3, #0]
    while (i--) {
 802382a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802382e:	1e5a      	subs	r2, r3, #1
 8023830:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8023834:	2b00      	cmp	r3, #0
 8023836:	d1e6      	bne.n	8023806 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8023838:	6a3b      	ldr	r3, [r7, #32]
 802383a:	1c5a      	adds	r2, r3, #1
 802383c:	623a      	str	r2, [r7, #32]
 802383e:	687a      	ldr	r2, [r7, #4]
 8023840:	429a      	cmp	r2, r3
 8023842:	dc01      	bgt.n	8023848 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8023844:	2300      	movs	r3, #0
 8023846:	e017      	b.n	8023878 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8023848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802384a:	1c5a      	adds	r2, r3, #1
 802384c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802384e:	222e      	movs	r2, #46	; 0x2e
 8023850:	701a      	strb	r2, [r3, #0]
    ap++;
 8023852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023854:	3301      	adds	r3, #1
 8023856:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8023858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802385c:	3301      	adds	r3, #1
 802385e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8023862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023866:	2b03      	cmp	r3, #3
 8023868:	d9a2      	bls.n	80237b0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 802386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802386c:	3b01      	subs	r3, #1
 802386e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023872:	2200      	movs	r2, #0
 8023874:	701a      	strb	r2, [r3, #0]
  return buf;
 8023876:	68bb      	ldr	r3, [r7, #8]
}
 8023878:	4618      	mov	r0, r3
 802387a:	3734      	adds	r7, #52	; 0x34
 802387c:	46bd      	mov	sp, r7
 802387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023882:	4770      	bx	lr
 8023884:	cccccccd 	.word	0xcccccccd

08023888 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8023888:	b580      	push	{r7, lr}
 802388a:	b084      	sub	sp, #16
 802388c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802388e:	2300      	movs	r3, #0
 8023890:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8023892:	4b12      	ldr	r3, [pc, #72]	; (80238dc <ip_reass_tmr+0x54>)
 8023894:	681b      	ldr	r3, [r3, #0]
 8023896:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8023898:	e018      	b.n	80238cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 802389a:	68fb      	ldr	r3, [r7, #12]
 802389c:	7fdb      	ldrb	r3, [r3, #31]
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d00b      	beq.n	80238ba <ip_reass_tmr+0x32>
      r->timer--;
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	7fdb      	ldrb	r3, [r3, #31]
 80238a6:	3b01      	subs	r3, #1
 80238a8:	b2da      	uxtb	r2, r3
 80238aa:	68fb      	ldr	r3, [r7, #12]
 80238ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80238ae:	68fb      	ldr	r3, [r7, #12]
 80238b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	60fb      	str	r3, [r7, #12]
 80238b8:	e008      	b.n	80238cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80238ba:	68fb      	ldr	r3, [r7, #12]
 80238bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80238be:	68fb      	ldr	r3, [r7, #12]
 80238c0:	681b      	ldr	r3, [r3, #0]
 80238c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80238c4:	68b9      	ldr	r1, [r7, #8]
 80238c6:	6878      	ldr	r0, [r7, #4]
 80238c8:	f000 f80a 	bl	80238e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80238cc:	68fb      	ldr	r3, [r7, #12]
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	d1e3      	bne.n	802389a <ip_reass_tmr+0x12>
    }
  }
}
 80238d2:	bf00      	nop
 80238d4:	bf00      	nop
 80238d6:	3710      	adds	r7, #16
 80238d8:	46bd      	mov	sp, r7
 80238da:	bd80      	pop	{r7, pc}
 80238dc:	200199d8 	.word	0x200199d8

080238e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80238e0:	b580      	push	{r7, lr}
 80238e2:	b088      	sub	sp, #32
 80238e4:	af00      	add	r7, sp, #0
 80238e6:	6078      	str	r0, [r7, #4]
 80238e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80238ea:	2300      	movs	r3, #0
 80238ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80238ee:	683a      	ldr	r2, [r7, #0]
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	429a      	cmp	r2, r3
 80238f4:	d105      	bne.n	8023902 <ip_reass_free_complete_datagram+0x22>
 80238f6:	4b45      	ldr	r3, [pc, #276]	; (8023a0c <ip_reass_free_complete_datagram+0x12c>)
 80238f8:	22ab      	movs	r2, #171	; 0xab
 80238fa:	4945      	ldr	r1, [pc, #276]	; (8023a10 <ip_reass_free_complete_datagram+0x130>)
 80238fc:	4845      	ldr	r0, [pc, #276]	; (8023a14 <ip_reass_free_complete_datagram+0x134>)
 80238fe:	f001 f82b 	bl	8024958 <iprintf>
  if (prev != NULL) {
 8023902:	683b      	ldr	r3, [r7, #0]
 8023904:	2b00      	cmp	r3, #0
 8023906:	d00a      	beq.n	802391e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8023908:	683b      	ldr	r3, [r7, #0]
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	687a      	ldr	r2, [r7, #4]
 802390e:	429a      	cmp	r2, r3
 8023910:	d005      	beq.n	802391e <ip_reass_free_complete_datagram+0x3e>
 8023912:	4b3e      	ldr	r3, [pc, #248]	; (8023a0c <ip_reass_free_complete_datagram+0x12c>)
 8023914:	22ad      	movs	r2, #173	; 0xad
 8023916:	4940      	ldr	r1, [pc, #256]	; (8023a18 <ip_reass_free_complete_datagram+0x138>)
 8023918:	483e      	ldr	r0, [pc, #248]	; (8023a14 <ip_reass_free_complete_datagram+0x134>)
 802391a:	f001 f81d 	bl	8024958 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	685b      	ldr	r3, [r3, #4]
 8023922:	685b      	ldr	r3, [r3, #4]
 8023924:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8023926:	697b      	ldr	r3, [r7, #20]
 8023928:	889b      	ldrh	r3, [r3, #4]
 802392a:	b29b      	uxth	r3, r3
 802392c:	2b00      	cmp	r3, #0
 802392e:	d12a      	bne.n	8023986 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	685b      	ldr	r3, [r3, #4]
 8023934:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8023936:	697b      	ldr	r3, [r7, #20]
 8023938:	681a      	ldr	r2, [r3, #0]
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802393e:	69bb      	ldr	r3, [r7, #24]
 8023940:	6858      	ldr	r0, [r3, #4]
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	3308      	adds	r3, #8
 8023946:	2214      	movs	r2, #20
 8023948:	4619      	mov	r1, r3
 802394a:	f000 fef5 	bl	8024738 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802394e:	2101      	movs	r1, #1
 8023950:	69b8      	ldr	r0, [r7, #24]
 8023952:	f7ff fbb3 	bl	80230bc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8023956:	69b8      	ldr	r0, [r7, #24]
 8023958:	f7fd fb4e 	bl	8020ff8 <pbuf_clen>
 802395c:	4603      	mov	r3, r0
 802395e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023960:	8bfa      	ldrh	r2, [r7, #30]
 8023962:	8a7b      	ldrh	r3, [r7, #18]
 8023964:	4413      	add	r3, r2
 8023966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802396a:	db05      	blt.n	8023978 <ip_reass_free_complete_datagram+0x98>
 802396c:	4b27      	ldr	r3, [pc, #156]	; (8023a0c <ip_reass_free_complete_datagram+0x12c>)
 802396e:	22bc      	movs	r2, #188	; 0xbc
 8023970:	492a      	ldr	r1, [pc, #168]	; (8023a1c <ip_reass_free_complete_datagram+0x13c>)
 8023972:	4828      	ldr	r0, [pc, #160]	; (8023a14 <ip_reass_free_complete_datagram+0x134>)
 8023974:	f000 fff0 	bl	8024958 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023978:	8bfa      	ldrh	r2, [r7, #30]
 802397a:	8a7b      	ldrh	r3, [r7, #18]
 802397c:	4413      	add	r3, r2
 802397e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8023980:	69b8      	ldr	r0, [r7, #24]
 8023982:	f7fd fab1 	bl	8020ee8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	685b      	ldr	r3, [r3, #4]
 802398a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 802398c:	e01f      	b.n	80239ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 802398e:	69bb      	ldr	r3, [r7, #24]
 8023990:	685b      	ldr	r3, [r3, #4]
 8023992:	617b      	str	r3, [r7, #20]
    pcur = p;
 8023994:	69bb      	ldr	r3, [r7, #24]
 8023996:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8023998:	697b      	ldr	r3, [r7, #20]
 802399a:	681b      	ldr	r3, [r3, #0]
 802399c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 802399e:	68f8      	ldr	r0, [r7, #12]
 80239a0:	f7fd fb2a 	bl	8020ff8 <pbuf_clen>
 80239a4:	4603      	mov	r3, r0
 80239a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80239a8:	8bfa      	ldrh	r2, [r7, #30]
 80239aa:	8a7b      	ldrh	r3, [r7, #18]
 80239ac:	4413      	add	r3, r2
 80239ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80239b2:	db05      	blt.n	80239c0 <ip_reass_free_complete_datagram+0xe0>
 80239b4:	4b15      	ldr	r3, [pc, #84]	; (8023a0c <ip_reass_free_complete_datagram+0x12c>)
 80239b6:	22cc      	movs	r2, #204	; 0xcc
 80239b8:	4918      	ldr	r1, [pc, #96]	; (8023a1c <ip_reass_free_complete_datagram+0x13c>)
 80239ba:	4816      	ldr	r0, [pc, #88]	; (8023a14 <ip_reass_free_complete_datagram+0x134>)
 80239bc:	f000 ffcc 	bl	8024958 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80239c0:	8bfa      	ldrh	r2, [r7, #30]
 80239c2:	8a7b      	ldrh	r3, [r7, #18]
 80239c4:	4413      	add	r3, r2
 80239c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80239c8:	68f8      	ldr	r0, [r7, #12]
 80239ca:	f7fd fa8d 	bl	8020ee8 <pbuf_free>
  while (p != NULL) {
 80239ce:	69bb      	ldr	r3, [r7, #24]
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d1dc      	bne.n	802398e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80239d4:	6839      	ldr	r1, [r7, #0]
 80239d6:	6878      	ldr	r0, [r7, #4]
 80239d8:	f000 f8c2 	bl	8023b60 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80239dc:	4b10      	ldr	r3, [pc, #64]	; (8023a20 <ip_reass_free_complete_datagram+0x140>)
 80239de:	881b      	ldrh	r3, [r3, #0]
 80239e0:	8bfa      	ldrh	r2, [r7, #30]
 80239e2:	429a      	cmp	r2, r3
 80239e4:	d905      	bls.n	80239f2 <ip_reass_free_complete_datagram+0x112>
 80239e6:	4b09      	ldr	r3, [pc, #36]	; (8023a0c <ip_reass_free_complete_datagram+0x12c>)
 80239e8:	22d2      	movs	r2, #210	; 0xd2
 80239ea:	490e      	ldr	r1, [pc, #56]	; (8023a24 <ip_reass_free_complete_datagram+0x144>)
 80239ec:	4809      	ldr	r0, [pc, #36]	; (8023a14 <ip_reass_free_complete_datagram+0x134>)
 80239ee:	f000 ffb3 	bl	8024958 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80239f2:	4b0b      	ldr	r3, [pc, #44]	; (8023a20 <ip_reass_free_complete_datagram+0x140>)
 80239f4:	881a      	ldrh	r2, [r3, #0]
 80239f6:	8bfb      	ldrh	r3, [r7, #30]
 80239f8:	1ad3      	subs	r3, r2, r3
 80239fa:	b29a      	uxth	r2, r3
 80239fc:	4b08      	ldr	r3, [pc, #32]	; (8023a20 <ip_reass_free_complete_datagram+0x140>)
 80239fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8023a00:	8bfb      	ldrh	r3, [r7, #30]
}
 8023a02:	4618      	mov	r0, r3
 8023a04:	3720      	adds	r7, #32
 8023a06:	46bd      	mov	sp, r7
 8023a08:	bd80      	pop	{r7, pc}
 8023a0a:	bf00      	nop
 8023a0c:	0802b020 	.word	0x0802b020
 8023a10:	0802b05c 	.word	0x0802b05c
 8023a14:	0802b068 	.word	0x0802b068
 8023a18:	0802b090 	.word	0x0802b090
 8023a1c:	0802b0a4 	.word	0x0802b0a4
 8023a20:	200199dc 	.word	0x200199dc
 8023a24:	0802b0c4 	.word	0x0802b0c4

08023a28 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8023a28:	b580      	push	{r7, lr}
 8023a2a:	b08a      	sub	sp, #40	; 0x28
 8023a2c:	af00      	add	r7, sp, #0
 8023a2e:	6078      	str	r0, [r7, #4]
 8023a30:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8023a32:	2300      	movs	r3, #0
 8023a34:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8023a36:	2300      	movs	r3, #0
 8023a38:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8023a3a:	2300      	movs	r3, #0
 8023a3c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8023a3e:	2300      	movs	r3, #0
 8023a40:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8023a42:	2300      	movs	r3, #0
 8023a44:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8023a46:	4b28      	ldr	r3, [pc, #160]	; (8023ae8 <ip_reass_remove_oldest_datagram+0xc0>)
 8023a48:	681b      	ldr	r3, [r3, #0]
 8023a4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8023a4c:	e030      	b.n	8023ab0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8023a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a50:	695a      	ldr	r2, [r3, #20]
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	68db      	ldr	r3, [r3, #12]
 8023a56:	429a      	cmp	r2, r3
 8023a58:	d10c      	bne.n	8023a74 <ip_reass_remove_oldest_datagram+0x4c>
 8023a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a5c:	699a      	ldr	r2, [r3, #24]
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	691b      	ldr	r3, [r3, #16]
 8023a62:	429a      	cmp	r2, r3
 8023a64:	d106      	bne.n	8023a74 <ip_reass_remove_oldest_datagram+0x4c>
 8023a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a68:	899a      	ldrh	r2, [r3, #12]
 8023a6a:	687b      	ldr	r3, [r7, #4]
 8023a6c:	889b      	ldrh	r3, [r3, #4]
 8023a6e:	b29b      	uxth	r3, r3
 8023a70:	429a      	cmp	r2, r3
 8023a72:	d014      	beq.n	8023a9e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8023a74:	693b      	ldr	r3, [r7, #16]
 8023a76:	3301      	adds	r3, #1
 8023a78:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8023a7a:	6a3b      	ldr	r3, [r7, #32]
 8023a7c:	2b00      	cmp	r3, #0
 8023a7e:	d104      	bne.n	8023a8a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8023a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a82:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023a84:	69fb      	ldr	r3, [r7, #28]
 8023a86:	61bb      	str	r3, [r7, #24]
 8023a88:	e009      	b.n	8023a9e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8023a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a8c:	7fda      	ldrb	r2, [r3, #31]
 8023a8e:	6a3b      	ldr	r3, [r7, #32]
 8023a90:	7fdb      	ldrb	r3, [r3, #31]
 8023a92:	429a      	cmp	r2, r3
 8023a94:	d803      	bhi.n	8023a9e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8023a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a98:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023a9a:	69fb      	ldr	r3, [r7, #28]
 8023a9c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8023a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	d001      	beq.n	8023aaa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8023aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023aa8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8023aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8023ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ab2:	2b00      	cmp	r3, #0
 8023ab4:	d1cb      	bne.n	8023a4e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8023ab6:	6a3b      	ldr	r3, [r7, #32]
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	d008      	beq.n	8023ace <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8023abc:	69b9      	ldr	r1, [r7, #24]
 8023abe:	6a38      	ldr	r0, [r7, #32]
 8023ac0:	f7ff ff0e 	bl	80238e0 <ip_reass_free_complete_datagram>
 8023ac4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8023ac6:	697a      	ldr	r2, [r7, #20]
 8023ac8:	68fb      	ldr	r3, [r7, #12]
 8023aca:	4413      	add	r3, r2
 8023acc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8023ace:	697a      	ldr	r2, [r7, #20]
 8023ad0:	683b      	ldr	r3, [r7, #0]
 8023ad2:	429a      	cmp	r2, r3
 8023ad4:	da02      	bge.n	8023adc <ip_reass_remove_oldest_datagram+0xb4>
 8023ad6:	693b      	ldr	r3, [r7, #16]
 8023ad8:	2b01      	cmp	r3, #1
 8023ada:	dcac      	bgt.n	8023a36 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8023adc:	697b      	ldr	r3, [r7, #20]
}
 8023ade:	4618      	mov	r0, r3
 8023ae0:	3728      	adds	r7, #40	; 0x28
 8023ae2:	46bd      	mov	sp, r7
 8023ae4:	bd80      	pop	{r7, pc}
 8023ae6:	bf00      	nop
 8023ae8:	200199d8 	.word	0x200199d8

08023aec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8023aec:	b580      	push	{r7, lr}
 8023aee:	b084      	sub	sp, #16
 8023af0:	af00      	add	r7, sp, #0
 8023af2:	6078      	str	r0, [r7, #4]
 8023af4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023af6:	2001      	movs	r0, #1
 8023af8:	f7fc fa76 	bl	801ffe8 <memp_malloc>
 8023afc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8023afe:	68fb      	ldr	r3, [r7, #12]
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	d110      	bne.n	8023b26 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8023b04:	6839      	ldr	r1, [r7, #0]
 8023b06:	6878      	ldr	r0, [r7, #4]
 8023b08:	f7ff ff8e 	bl	8023a28 <ip_reass_remove_oldest_datagram>
 8023b0c:	4602      	mov	r2, r0
 8023b0e:	683b      	ldr	r3, [r7, #0]
 8023b10:	4293      	cmp	r3, r2
 8023b12:	dc03      	bgt.n	8023b1c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023b14:	2001      	movs	r0, #1
 8023b16:	f7fc fa67 	bl	801ffe8 <memp_malloc>
 8023b1a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8023b1c:	68fb      	ldr	r3, [r7, #12]
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	d101      	bne.n	8023b26 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8023b22:	2300      	movs	r3, #0
 8023b24:	e016      	b.n	8023b54 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8023b26:	2220      	movs	r2, #32
 8023b28:	2100      	movs	r1, #0
 8023b2a:	68f8      	ldr	r0, [r7, #12]
 8023b2c:	f000 fe2c 	bl	8024788 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8023b30:	68fb      	ldr	r3, [r7, #12]
 8023b32:	220f      	movs	r2, #15
 8023b34:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8023b36:	4b09      	ldr	r3, [pc, #36]	; (8023b5c <ip_reass_enqueue_new_datagram+0x70>)
 8023b38:	681a      	ldr	r2, [r3, #0]
 8023b3a:	68fb      	ldr	r3, [r7, #12]
 8023b3c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8023b3e:	4a07      	ldr	r2, [pc, #28]	; (8023b5c <ip_reass_enqueue_new_datagram+0x70>)
 8023b40:	68fb      	ldr	r3, [r7, #12]
 8023b42:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8023b44:	68fb      	ldr	r3, [r7, #12]
 8023b46:	3308      	adds	r3, #8
 8023b48:	2214      	movs	r2, #20
 8023b4a:	6879      	ldr	r1, [r7, #4]
 8023b4c:	4618      	mov	r0, r3
 8023b4e:	f000 fdf3 	bl	8024738 <memcpy>
  return ipr;
 8023b52:	68fb      	ldr	r3, [r7, #12]
}
 8023b54:	4618      	mov	r0, r3
 8023b56:	3710      	adds	r7, #16
 8023b58:	46bd      	mov	sp, r7
 8023b5a:	bd80      	pop	{r7, pc}
 8023b5c:	200199d8 	.word	0x200199d8

08023b60 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023b60:	b580      	push	{r7, lr}
 8023b62:	b082      	sub	sp, #8
 8023b64:	af00      	add	r7, sp, #0
 8023b66:	6078      	str	r0, [r7, #4]
 8023b68:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8023b6a:	4b10      	ldr	r3, [pc, #64]	; (8023bac <ip_reass_dequeue_datagram+0x4c>)
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	687a      	ldr	r2, [r7, #4]
 8023b70:	429a      	cmp	r2, r3
 8023b72:	d104      	bne.n	8023b7e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	681b      	ldr	r3, [r3, #0]
 8023b78:	4a0c      	ldr	r2, [pc, #48]	; (8023bac <ip_reass_dequeue_datagram+0x4c>)
 8023b7a:	6013      	str	r3, [r2, #0]
 8023b7c:	e00d      	b.n	8023b9a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023b7e:	683b      	ldr	r3, [r7, #0]
 8023b80:	2b00      	cmp	r3, #0
 8023b82:	d106      	bne.n	8023b92 <ip_reass_dequeue_datagram+0x32>
 8023b84:	4b0a      	ldr	r3, [pc, #40]	; (8023bb0 <ip_reass_dequeue_datagram+0x50>)
 8023b86:	f240 1245 	movw	r2, #325	; 0x145
 8023b8a:	490a      	ldr	r1, [pc, #40]	; (8023bb4 <ip_reass_dequeue_datagram+0x54>)
 8023b8c:	480a      	ldr	r0, [pc, #40]	; (8023bb8 <ip_reass_dequeue_datagram+0x58>)
 8023b8e:	f000 fee3 	bl	8024958 <iprintf>
    prev->next = ipr->next;
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	681a      	ldr	r2, [r3, #0]
 8023b96:	683b      	ldr	r3, [r7, #0]
 8023b98:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8023b9a:	6879      	ldr	r1, [r7, #4]
 8023b9c:	2001      	movs	r0, #1
 8023b9e:	f7fc fa93 	bl	80200c8 <memp_free>
}
 8023ba2:	bf00      	nop
 8023ba4:	3708      	adds	r7, #8
 8023ba6:	46bd      	mov	sp, r7
 8023ba8:	bd80      	pop	{r7, pc}
 8023baa:	bf00      	nop
 8023bac:	200199d8 	.word	0x200199d8
 8023bb0:	0802b020 	.word	0x0802b020
 8023bb4:	0802b0e8 	.word	0x0802b0e8
 8023bb8:	0802b068 	.word	0x0802b068

08023bbc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8023bbc:	b580      	push	{r7, lr}
 8023bbe:	b08c      	sub	sp, #48	; 0x30
 8023bc0:	af00      	add	r7, sp, #0
 8023bc2:	60f8      	str	r0, [r7, #12]
 8023bc4:	60b9      	str	r1, [r7, #8]
 8023bc6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8023bc8:	2300      	movs	r3, #0
 8023bca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8023bcc:	2301      	movs	r3, #1
 8023bce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8023bd0:	68bb      	ldr	r3, [r7, #8]
 8023bd2:	685b      	ldr	r3, [r3, #4]
 8023bd4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023bd6:	69fb      	ldr	r3, [r7, #28]
 8023bd8:	885b      	ldrh	r3, [r3, #2]
 8023bda:	b29b      	uxth	r3, r3
 8023bdc:	4618      	mov	r0, r3
 8023bde:	f7fb fda7 	bl	801f730 <lwip_htons>
 8023be2:	4603      	mov	r3, r0
 8023be4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8023be6:	69fb      	ldr	r3, [r7, #28]
 8023be8:	781b      	ldrb	r3, [r3, #0]
 8023bea:	f003 030f 	and.w	r3, r3, #15
 8023bee:	b2db      	uxtb	r3, r3
 8023bf0:	009b      	lsls	r3, r3, #2
 8023bf2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8023bf4:	7e7b      	ldrb	r3, [r7, #25]
 8023bf6:	b29b      	uxth	r3, r3
 8023bf8:	8b7a      	ldrh	r2, [r7, #26]
 8023bfa:	429a      	cmp	r2, r3
 8023bfc:	d202      	bcs.n	8023c04 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8023c02:	e135      	b.n	8023e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8023c04:	7e7b      	ldrb	r3, [r7, #25]
 8023c06:	b29b      	uxth	r3, r3
 8023c08:	8b7a      	ldrh	r2, [r7, #26]
 8023c0a:	1ad3      	subs	r3, r2, r3
 8023c0c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023c0e:	69fb      	ldr	r3, [r7, #28]
 8023c10:	88db      	ldrh	r3, [r3, #6]
 8023c12:	b29b      	uxth	r3, r3
 8023c14:	4618      	mov	r0, r3
 8023c16:	f7fb fd8b 	bl	801f730 <lwip_htons>
 8023c1a:	4603      	mov	r3, r0
 8023c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023c20:	b29b      	uxth	r3, r3
 8023c22:	00db      	lsls	r3, r3, #3
 8023c24:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8023c26:	68bb      	ldr	r3, [r7, #8]
 8023c28:	685b      	ldr	r3, [r3, #4]
 8023c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8023c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c2e:	2200      	movs	r2, #0
 8023c30:	701a      	strb	r2, [r3, #0]
 8023c32:	2200      	movs	r2, #0
 8023c34:	705a      	strb	r2, [r3, #1]
 8023c36:	2200      	movs	r2, #0
 8023c38:	709a      	strb	r2, [r3, #2]
 8023c3a:	2200      	movs	r2, #0
 8023c3c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8023c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c40:	8afa      	ldrh	r2, [r7, #22]
 8023c42:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8023c44:	8afa      	ldrh	r2, [r7, #22]
 8023c46:	8b7b      	ldrh	r3, [r7, #26]
 8023c48:	4413      	add	r3, r2
 8023c4a:	b29a      	uxth	r2, r3
 8023c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c4e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8023c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c52:	88db      	ldrh	r3, [r3, #6]
 8023c54:	b29b      	uxth	r3, r3
 8023c56:	8afa      	ldrh	r2, [r7, #22]
 8023c58:	429a      	cmp	r2, r3
 8023c5a:	d902      	bls.n	8023c62 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8023c60:	e106      	b.n	8023e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8023c62:	68fb      	ldr	r3, [r7, #12]
 8023c64:	685b      	ldr	r3, [r3, #4]
 8023c66:	627b      	str	r3, [r7, #36]	; 0x24
 8023c68:	e068      	b.n	8023d3c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8023c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c6c:	685b      	ldr	r3, [r3, #4]
 8023c6e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8023c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c72:	889b      	ldrh	r3, [r3, #4]
 8023c74:	b29a      	uxth	r2, r3
 8023c76:	693b      	ldr	r3, [r7, #16]
 8023c78:	889b      	ldrh	r3, [r3, #4]
 8023c7a:	b29b      	uxth	r3, r3
 8023c7c:	429a      	cmp	r2, r3
 8023c7e:	d235      	bcs.n	8023cec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8023c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023c84:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8023c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	d020      	beq.n	8023cce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8023c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c8e:	889b      	ldrh	r3, [r3, #4]
 8023c90:	b29a      	uxth	r2, r3
 8023c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023c94:	88db      	ldrh	r3, [r3, #6]
 8023c96:	b29b      	uxth	r3, r3
 8023c98:	429a      	cmp	r2, r3
 8023c9a:	d307      	bcc.n	8023cac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8023c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c9e:	88db      	ldrh	r3, [r3, #6]
 8023ca0:	b29a      	uxth	r2, r3
 8023ca2:	693b      	ldr	r3, [r7, #16]
 8023ca4:	889b      	ldrh	r3, [r3, #4]
 8023ca6:	b29b      	uxth	r3, r3
 8023ca8:	429a      	cmp	r2, r3
 8023caa:	d902      	bls.n	8023cb2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023cac:	f04f 33ff 	mov.w	r3, #4294967295
 8023cb0:	e0de      	b.n	8023e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8023cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023cb4:	68ba      	ldr	r2, [r7, #8]
 8023cb6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8023cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023cba:	88db      	ldrh	r3, [r3, #6]
 8023cbc:	b29a      	uxth	r2, r3
 8023cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023cc0:	889b      	ldrh	r3, [r3, #4]
 8023cc2:	b29b      	uxth	r3, r3
 8023cc4:	429a      	cmp	r2, r3
 8023cc6:	d03d      	beq.n	8023d44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023cc8:	2300      	movs	r3, #0
 8023cca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8023ccc:	e03a      	b.n	8023d44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8023cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023cd0:	88db      	ldrh	r3, [r3, #6]
 8023cd2:	b29a      	uxth	r2, r3
 8023cd4:	693b      	ldr	r3, [r7, #16]
 8023cd6:	889b      	ldrh	r3, [r3, #4]
 8023cd8:	b29b      	uxth	r3, r3
 8023cda:	429a      	cmp	r2, r3
 8023cdc:	d902      	bls.n	8023ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023cde:	f04f 33ff 	mov.w	r3, #4294967295
 8023ce2:	e0c5      	b.n	8023e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	68ba      	ldr	r2, [r7, #8]
 8023ce8:	605a      	str	r2, [r3, #4]
      break;
 8023cea:	e02b      	b.n	8023d44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8023cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023cee:	889b      	ldrh	r3, [r3, #4]
 8023cf0:	b29a      	uxth	r2, r3
 8023cf2:	693b      	ldr	r3, [r7, #16]
 8023cf4:	889b      	ldrh	r3, [r3, #4]
 8023cf6:	b29b      	uxth	r3, r3
 8023cf8:	429a      	cmp	r2, r3
 8023cfa:	d102      	bne.n	8023d02 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8023d00:	e0b6      	b.n	8023e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8023d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d04:	889b      	ldrh	r3, [r3, #4]
 8023d06:	b29a      	uxth	r2, r3
 8023d08:	693b      	ldr	r3, [r7, #16]
 8023d0a:	88db      	ldrh	r3, [r3, #6]
 8023d0c:	b29b      	uxth	r3, r3
 8023d0e:	429a      	cmp	r2, r3
 8023d10:	d202      	bcs.n	8023d18 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023d12:	f04f 33ff 	mov.w	r3, #4294967295
 8023d16:	e0ab      	b.n	8023e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8023d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d1a:	2b00      	cmp	r3, #0
 8023d1c:	d009      	beq.n	8023d32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8023d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d20:	88db      	ldrh	r3, [r3, #6]
 8023d22:	b29a      	uxth	r2, r3
 8023d24:	693b      	ldr	r3, [r7, #16]
 8023d26:	889b      	ldrh	r3, [r3, #4]
 8023d28:	b29b      	uxth	r3, r3
 8023d2a:	429a      	cmp	r2, r3
 8023d2c:	d001      	beq.n	8023d32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023d2e:	2300      	movs	r3, #0
 8023d30:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8023d32:	693b      	ldr	r3, [r7, #16]
 8023d34:	681b      	ldr	r3, [r3, #0]
 8023d36:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8023d38:	693b      	ldr	r3, [r7, #16]
 8023d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8023d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	d193      	bne.n	8023c6a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8023d42:	e000      	b.n	8023d46 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8023d44:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8023d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d48:	2b00      	cmp	r3, #0
 8023d4a:	d12d      	bne.n	8023da8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8023d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d4e:	2b00      	cmp	r3, #0
 8023d50:	d01c      	beq.n	8023d8c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8023d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d54:	88db      	ldrh	r3, [r3, #6]
 8023d56:	b29a      	uxth	r2, r3
 8023d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d5a:	889b      	ldrh	r3, [r3, #4]
 8023d5c:	b29b      	uxth	r3, r3
 8023d5e:	429a      	cmp	r2, r3
 8023d60:	d906      	bls.n	8023d70 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8023d62:	4b45      	ldr	r3, [pc, #276]	; (8023e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023d64:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8023d68:	4944      	ldr	r1, [pc, #272]	; (8023e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8023d6a:	4845      	ldr	r0, [pc, #276]	; (8023e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023d6c:	f000 fdf4 	bl	8024958 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8023d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d72:	68ba      	ldr	r2, [r7, #8]
 8023d74:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8023d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d78:	88db      	ldrh	r3, [r3, #6]
 8023d7a:	b29a      	uxth	r2, r3
 8023d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d7e:	889b      	ldrh	r3, [r3, #4]
 8023d80:	b29b      	uxth	r3, r3
 8023d82:	429a      	cmp	r2, r3
 8023d84:	d010      	beq.n	8023da8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8023d86:	2300      	movs	r3, #0
 8023d88:	623b      	str	r3, [r7, #32]
 8023d8a:	e00d      	b.n	8023da8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8023d8c:	68fb      	ldr	r3, [r7, #12]
 8023d8e:	685b      	ldr	r3, [r3, #4]
 8023d90:	2b00      	cmp	r3, #0
 8023d92:	d006      	beq.n	8023da2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8023d94:	4b38      	ldr	r3, [pc, #224]	; (8023e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023d96:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8023d9a:	493a      	ldr	r1, [pc, #232]	; (8023e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8023d9c:	4838      	ldr	r0, [pc, #224]	; (8023e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023d9e:	f000 fddb 	bl	8024958 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8023da2:	68fb      	ldr	r3, [r7, #12]
 8023da4:	68ba      	ldr	r2, [r7, #8]
 8023da6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	2b00      	cmp	r3, #0
 8023dac:	d105      	bne.n	8023dba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8023dae:	68fb      	ldr	r3, [r7, #12]
 8023db0:	7f9b      	ldrb	r3, [r3, #30]
 8023db2:	f003 0301 	and.w	r3, r3, #1
 8023db6:	2b00      	cmp	r3, #0
 8023db8:	d059      	beq.n	8023e6e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8023dba:	6a3b      	ldr	r3, [r7, #32]
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	d04f      	beq.n	8023e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023dc0:	68fb      	ldr	r3, [r7, #12]
 8023dc2:	685b      	ldr	r3, [r3, #4]
 8023dc4:	2b00      	cmp	r3, #0
 8023dc6:	d006      	beq.n	8023dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8023dc8:	68fb      	ldr	r3, [r7, #12]
 8023dca:	685b      	ldr	r3, [r3, #4]
 8023dcc:	685b      	ldr	r3, [r3, #4]
 8023dce:	889b      	ldrh	r3, [r3, #4]
 8023dd0:	b29b      	uxth	r3, r3
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	d002      	beq.n	8023ddc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8023dd6:	2300      	movs	r3, #0
 8023dd8:	623b      	str	r3, [r7, #32]
 8023dda:	e041      	b.n	8023e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8023ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023dde:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8023de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8023de6:	e012      	b.n	8023e0e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8023de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023dea:	685b      	ldr	r3, [r3, #4]
 8023dec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8023dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023df0:	88db      	ldrh	r3, [r3, #6]
 8023df2:	b29a      	uxth	r2, r3
 8023df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023df6:	889b      	ldrh	r3, [r3, #4]
 8023df8:	b29b      	uxth	r3, r3
 8023dfa:	429a      	cmp	r2, r3
 8023dfc:	d002      	beq.n	8023e04 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8023dfe:	2300      	movs	r3, #0
 8023e00:	623b      	str	r3, [r7, #32]
            break;
 8023e02:	e007      	b.n	8023e14 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8023e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e06:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8023e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e0a:	681b      	ldr	r3, [r3, #0]
 8023e0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8023e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e10:	2b00      	cmp	r3, #0
 8023e12:	d1e9      	bne.n	8023de8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8023e14:	6a3b      	ldr	r3, [r7, #32]
 8023e16:	2b00      	cmp	r3, #0
 8023e18:	d022      	beq.n	8023e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8023e1a:	68fb      	ldr	r3, [r7, #12]
 8023e1c:	685b      	ldr	r3, [r3, #4]
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	d106      	bne.n	8023e30 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8023e22:	4b15      	ldr	r3, [pc, #84]	; (8023e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023e24:	f240 12df 	movw	r2, #479	; 0x1df
 8023e28:	4917      	ldr	r1, [pc, #92]	; (8023e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8023e2a:	4815      	ldr	r0, [pc, #84]	; (8023e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023e2c:	f000 fd94 	bl	8024958 <iprintf>
          LWIP_ASSERT("sanity check",
 8023e30:	68fb      	ldr	r3, [r7, #12]
 8023e32:	685b      	ldr	r3, [r3, #4]
 8023e34:	685b      	ldr	r3, [r3, #4]
 8023e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023e38:	429a      	cmp	r2, r3
 8023e3a:	d106      	bne.n	8023e4a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8023e3c:	4b0e      	ldr	r3, [pc, #56]	; (8023e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023e3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8023e42:	4911      	ldr	r1, [pc, #68]	; (8023e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8023e44:	480e      	ldr	r0, [pc, #56]	; (8023e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023e46:	f000 fd87 	bl	8024958 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8023e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e4c:	681b      	ldr	r3, [r3, #0]
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	d006      	beq.n	8023e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8023e52:	4b09      	ldr	r3, [pc, #36]	; (8023e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023e54:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8023e58:	490c      	ldr	r1, [pc, #48]	; (8023e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8023e5a:	4809      	ldr	r0, [pc, #36]	; (8023e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023e5c:	f000 fd7c 	bl	8024958 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8023e60:	6a3b      	ldr	r3, [r7, #32]
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	bf14      	ite	ne
 8023e66:	2301      	movne	r3, #1
 8023e68:	2300      	moveq	r3, #0
 8023e6a:	b2db      	uxtb	r3, r3
 8023e6c:	e000      	b.n	8023e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8023e6e:	2300      	movs	r3, #0
}
 8023e70:	4618      	mov	r0, r3
 8023e72:	3730      	adds	r7, #48	; 0x30
 8023e74:	46bd      	mov	sp, r7
 8023e76:	bd80      	pop	{r7, pc}
 8023e78:	0802b020 	.word	0x0802b020
 8023e7c:	0802b104 	.word	0x0802b104
 8023e80:	0802b068 	.word	0x0802b068
 8023e84:	0802b124 	.word	0x0802b124
 8023e88:	0802b15c 	.word	0x0802b15c
 8023e8c:	0802b16c 	.word	0x0802b16c

08023e90 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8023e90:	b580      	push	{r7, lr}
 8023e92:	b08e      	sub	sp, #56	; 0x38
 8023e94:	af00      	add	r7, sp, #0
 8023e96:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8023e98:	687b      	ldr	r3, [r7, #4]
 8023e9a:	685b      	ldr	r3, [r3, #4]
 8023e9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8023e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ea0:	781b      	ldrb	r3, [r3, #0]
 8023ea2:	f003 030f 	and.w	r3, r3, #15
 8023ea6:	b2db      	uxtb	r3, r3
 8023ea8:	009b      	lsls	r3, r3, #2
 8023eaa:	b2db      	uxtb	r3, r3
 8023eac:	2b14      	cmp	r3, #20
 8023eae:	f040 8171 	bne.w	8024194 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8023eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023eb4:	88db      	ldrh	r3, [r3, #6]
 8023eb6:	b29b      	uxth	r3, r3
 8023eb8:	4618      	mov	r0, r3
 8023eba:	f7fb fc39 	bl	801f730 <lwip_htons>
 8023ebe:	4603      	mov	r3, r0
 8023ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023ec4:	b29b      	uxth	r3, r3
 8023ec6:	00db      	lsls	r3, r3, #3
 8023ec8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ecc:	885b      	ldrh	r3, [r3, #2]
 8023ece:	b29b      	uxth	r3, r3
 8023ed0:	4618      	mov	r0, r3
 8023ed2:	f7fb fc2d 	bl	801f730 <lwip_htons>
 8023ed6:	4603      	mov	r3, r0
 8023ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8023eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023edc:	781b      	ldrb	r3, [r3, #0]
 8023ede:	f003 030f 	and.w	r3, r3, #15
 8023ee2:	b2db      	uxtb	r3, r3
 8023ee4:	009b      	lsls	r3, r3, #2
 8023ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8023eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023eee:	b29b      	uxth	r3, r3
 8023ef0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023ef2:	429a      	cmp	r2, r3
 8023ef4:	f0c0 8150 	bcc.w	8024198 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8023ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023efc:	b29b      	uxth	r3, r3
 8023efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023f00:	1ad3      	subs	r3, r2, r3
 8023f02:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8023f04:	6878      	ldr	r0, [r7, #4]
 8023f06:	f7fd f877 	bl	8020ff8 <pbuf_clen>
 8023f0a:	4603      	mov	r3, r0
 8023f0c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8023f0e:	4b8c      	ldr	r3, [pc, #560]	; (8024140 <ip4_reass+0x2b0>)
 8023f10:	881b      	ldrh	r3, [r3, #0]
 8023f12:	461a      	mov	r2, r3
 8023f14:	8c3b      	ldrh	r3, [r7, #32]
 8023f16:	4413      	add	r3, r2
 8023f18:	2b0a      	cmp	r3, #10
 8023f1a:	dd10      	ble.n	8023f3e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023f1c:	8c3b      	ldrh	r3, [r7, #32]
 8023f1e:	4619      	mov	r1, r3
 8023f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023f22:	f7ff fd81 	bl	8023a28 <ip_reass_remove_oldest_datagram>
 8023f26:	4603      	mov	r3, r0
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	f000 8137 	beq.w	802419c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8023f2e:	4b84      	ldr	r3, [pc, #528]	; (8024140 <ip4_reass+0x2b0>)
 8023f30:	881b      	ldrh	r3, [r3, #0]
 8023f32:	461a      	mov	r2, r3
 8023f34:	8c3b      	ldrh	r3, [r7, #32]
 8023f36:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023f38:	2b0a      	cmp	r3, #10
 8023f3a:	f300 812f 	bgt.w	802419c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023f3e:	4b81      	ldr	r3, [pc, #516]	; (8024144 <ip4_reass+0x2b4>)
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	633b      	str	r3, [r7, #48]	; 0x30
 8023f44:	e015      	b.n	8023f72 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8023f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f48:	695a      	ldr	r2, [r3, #20]
 8023f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f4c:	68db      	ldr	r3, [r3, #12]
 8023f4e:	429a      	cmp	r2, r3
 8023f50:	d10c      	bne.n	8023f6c <ip4_reass+0xdc>
 8023f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f54:	699a      	ldr	r2, [r3, #24]
 8023f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f58:	691b      	ldr	r3, [r3, #16]
 8023f5a:	429a      	cmp	r2, r3
 8023f5c:	d106      	bne.n	8023f6c <ip4_reass+0xdc>
 8023f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f60:	899a      	ldrh	r2, [r3, #12]
 8023f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f64:	889b      	ldrh	r3, [r3, #4]
 8023f66:	b29b      	uxth	r3, r3
 8023f68:	429a      	cmp	r2, r3
 8023f6a:	d006      	beq.n	8023f7a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f6e:	681b      	ldr	r3, [r3, #0]
 8023f70:	633b      	str	r3, [r7, #48]	; 0x30
 8023f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d1e6      	bne.n	8023f46 <ip4_reass+0xb6>
 8023f78:	e000      	b.n	8023f7c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8023f7a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8023f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d109      	bne.n	8023f96 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8023f82:	8c3b      	ldrh	r3, [r7, #32]
 8023f84:	4619      	mov	r1, r3
 8023f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023f88:	f7ff fdb0 	bl	8023aec <ip_reass_enqueue_new_datagram>
 8023f8c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8023f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f90:	2b00      	cmp	r3, #0
 8023f92:	d11c      	bne.n	8023fce <ip4_reass+0x13e>
      goto nullreturn;
 8023f94:	e105      	b.n	80241a2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f98:	88db      	ldrh	r3, [r3, #6]
 8023f9a:	b29b      	uxth	r3, r3
 8023f9c:	4618      	mov	r0, r3
 8023f9e:	f7fb fbc7 	bl	801f730 <lwip_htons>
 8023fa2:	4603      	mov	r3, r0
 8023fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023fa8:	2b00      	cmp	r3, #0
 8023faa:	d110      	bne.n	8023fce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8023fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fae:	89db      	ldrh	r3, [r3, #14]
 8023fb0:	4618      	mov	r0, r3
 8023fb2:	f7fb fbbd 	bl	801f730 <lwip_htons>
 8023fb6:	4603      	mov	r3, r0
 8023fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	d006      	beq.n	8023fce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8023fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fc2:	3308      	adds	r3, #8
 8023fc4:	2214      	movs	r2, #20
 8023fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023fc8:	4618      	mov	r0, r3
 8023fca:	f000 fbb5 	bl	8024738 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8023fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fd0:	88db      	ldrh	r3, [r3, #6]
 8023fd2:	b29b      	uxth	r3, r3
 8023fd4:	f003 0320 	and.w	r3, r3, #32
 8023fd8:	2b00      	cmp	r3, #0
 8023fda:	bf0c      	ite	eq
 8023fdc:	2301      	moveq	r3, #1
 8023fde:	2300      	movne	r3, #0
 8023fe0:	b2db      	uxtb	r3, r3
 8023fe2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8023fe4:	69fb      	ldr	r3, [r7, #28]
 8023fe6:	2b00      	cmp	r3, #0
 8023fe8:	d00e      	beq.n	8024008 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8023fea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023fee:	4413      	add	r3, r2
 8023ff0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8023ff2:	8b7a      	ldrh	r2, [r7, #26]
 8023ff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023ff6:	429a      	cmp	r2, r3
 8023ff8:	f0c0 80a0 	bcc.w	802413c <ip4_reass+0x2ac>
 8023ffc:	8b7b      	ldrh	r3, [r7, #26]
 8023ffe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8024002:	4293      	cmp	r3, r2
 8024004:	f200 809a 	bhi.w	802413c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8024008:	69fa      	ldr	r2, [r7, #28]
 802400a:	6879      	ldr	r1, [r7, #4]
 802400c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802400e:	f7ff fdd5 	bl	8023bbc <ip_reass_chain_frag_into_datagram_and_validate>
 8024012:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8024014:	697b      	ldr	r3, [r7, #20]
 8024016:	f1b3 3fff 	cmp.w	r3, #4294967295
 802401a:	f000 809b 	beq.w	8024154 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802401e:	4b48      	ldr	r3, [pc, #288]	; (8024140 <ip4_reass+0x2b0>)
 8024020:	881a      	ldrh	r2, [r3, #0]
 8024022:	8c3b      	ldrh	r3, [r7, #32]
 8024024:	4413      	add	r3, r2
 8024026:	b29a      	uxth	r2, r3
 8024028:	4b45      	ldr	r3, [pc, #276]	; (8024140 <ip4_reass+0x2b0>)
 802402a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 802402c:	69fb      	ldr	r3, [r7, #28]
 802402e:	2b00      	cmp	r3, #0
 8024030:	d00d      	beq.n	802404e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8024032:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024036:	4413      	add	r3, r2
 8024038:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802403c:	8a7a      	ldrh	r2, [r7, #18]
 802403e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024042:	7f9b      	ldrb	r3, [r3, #30]
 8024044:	f043 0301 	orr.w	r3, r3, #1
 8024048:	b2da      	uxtb	r2, r3
 802404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802404c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802404e:	697b      	ldr	r3, [r7, #20]
 8024050:	2b01      	cmp	r3, #1
 8024052:	d171      	bne.n	8024138 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8024054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024056:	8b9b      	ldrh	r3, [r3, #28]
 8024058:	3314      	adds	r3, #20
 802405a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802405e:	685b      	ldr	r3, [r3, #4]
 8024060:	685b      	ldr	r3, [r3, #4]
 8024062:	681b      	ldr	r3, [r3, #0]
 8024064:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8024066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024068:	685b      	ldr	r3, [r3, #4]
 802406a:	685b      	ldr	r3, [r3, #4]
 802406c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024070:	3308      	adds	r3, #8
 8024072:	2214      	movs	r2, #20
 8024074:	4619      	mov	r1, r3
 8024076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024078:	f000 fb5e 	bl	8024738 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802407c:	8a3b      	ldrh	r3, [r7, #16]
 802407e:	4618      	mov	r0, r3
 8024080:	f7fb fb56 	bl	801f730 <lwip_htons>
 8024084:	4603      	mov	r3, r0
 8024086:	461a      	mov	r2, r3
 8024088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802408a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 802408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802408e:	2200      	movs	r2, #0
 8024090:	719a      	strb	r2, [r3, #6]
 8024092:	2200      	movs	r2, #0
 8024094:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8024096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024098:	2200      	movs	r2, #0
 802409a:	729a      	strb	r2, [r3, #10]
 802409c:	2200      	movs	r2, #0
 802409e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80240a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80240a2:	685b      	ldr	r3, [r3, #4]
 80240a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80240a6:	e00d      	b.n	80240c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80240a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80240aa:	685b      	ldr	r3, [r3, #4]
 80240ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80240ae:	2114      	movs	r1, #20
 80240b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80240b2:	f7fc fe93 	bl	8020ddc <pbuf_remove_header>
      pbuf_cat(p, r);
 80240b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80240b8:	6878      	ldr	r0, [r7, #4]
 80240ba:	f7fc ffd7 	bl	802106c <pbuf_cat>
      r = iprh->next_pbuf;
 80240be:	68fb      	ldr	r3, [r7, #12]
 80240c0:	681b      	ldr	r3, [r3, #0]
 80240c2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80240c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	d1ee      	bne.n	80240a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80240ca:	4b1e      	ldr	r3, [pc, #120]	; (8024144 <ip4_reass+0x2b4>)
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80240d0:	429a      	cmp	r2, r3
 80240d2:	d102      	bne.n	80240da <ip4_reass+0x24a>
      ipr_prev = NULL;
 80240d4:	2300      	movs	r3, #0
 80240d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80240d8:	e010      	b.n	80240fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80240da:	4b1a      	ldr	r3, [pc, #104]	; (8024144 <ip4_reass+0x2b4>)
 80240dc:	681b      	ldr	r3, [r3, #0]
 80240de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80240e0:	e007      	b.n	80240f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80240e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240e4:	681b      	ldr	r3, [r3, #0]
 80240e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80240e8:	429a      	cmp	r2, r3
 80240ea:	d006      	beq.n	80240fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80240ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240ee:	681b      	ldr	r3, [r3, #0]
 80240f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80240f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d1f4      	bne.n	80240e2 <ip4_reass+0x252>
 80240f8:	e000      	b.n	80240fc <ip4_reass+0x26c>
          break;
 80240fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80240fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80240fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024100:	f7ff fd2e 	bl	8023b60 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8024104:	6878      	ldr	r0, [r7, #4]
 8024106:	f7fc ff77 	bl	8020ff8 <pbuf_clen>
 802410a:	4603      	mov	r3, r0
 802410c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802410e:	4b0c      	ldr	r3, [pc, #48]	; (8024140 <ip4_reass+0x2b0>)
 8024110:	881b      	ldrh	r3, [r3, #0]
 8024112:	8c3a      	ldrh	r2, [r7, #32]
 8024114:	429a      	cmp	r2, r3
 8024116:	d906      	bls.n	8024126 <ip4_reass+0x296>
 8024118:	4b0b      	ldr	r3, [pc, #44]	; (8024148 <ip4_reass+0x2b8>)
 802411a:	f240 229b 	movw	r2, #667	; 0x29b
 802411e:	490b      	ldr	r1, [pc, #44]	; (802414c <ip4_reass+0x2bc>)
 8024120:	480b      	ldr	r0, [pc, #44]	; (8024150 <ip4_reass+0x2c0>)
 8024122:	f000 fc19 	bl	8024958 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8024126:	4b06      	ldr	r3, [pc, #24]	; (8024140 <ip4_reass+0x2b0>)
 8024128:	881a      	ldrh	r2, [r3, #0]
 802412a:	8c3b      	ldrh	r3, [r7, #32]
 802412c:	1ad3      	subs	r3, r2, r3
 802412e:	b29a      	uxth	r2, r3
 8024130:	4b03      	ldr	r3, [pc, #12]	; (8024140 <ip4_reass+0x2b0>)
 8024132:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	e038      	b.n	80241aa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8024138:	2300      	movs	r3, #0
 802413a:	e036      	b.n	80241aa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 802413c:	bf00      	nop
 802413e:	e00a      	b.n	8024156 <ip4_reass+0x2c6>
 8024140:	200199dc 	.word	0x200199dc
 8024144:	200199d8 	.word	0x200199d8
 8024148:	0802b020 	.word	0x0802b020
 802414c:	0802b190 	.word	0x0802b190
 8024150:	0802b068 	.word	0x0802b068
    goto nullreturn_ipr;
 8024154:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8024156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024158:	2b00      	cmp	r3, #0
 802415a:	d106      	bne.n	802416a <ip4_reass+0x2da>
 802415c:	4b15      	ldr	r3, [pc, #84]	; (80241b4 <ip4_reass+0x324>)
 802415e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8024162:	4915      	ldr	r1, [pc, #84]	; (80241b8 <ip4_reass+0x328>)
 8024164:	4815      	ldr	r0, [pc, #84]	; (80241bc <ip4_reass+0x32c>)
 8024166:	f000 fbf7 	bl	8024958 <iprintf>
  if (ipr->p == NULL) {
 802416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802416c:	685b      	ldr	r3, [r3, #4]
 802416e:	2b00      	cmp	r3, #0
 8024170:	d116      	bne.n	80241a0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8024172:	4b13      	ldr	r3, [pc, #76]	; (80241c0 <ip4_reass+0x330>)
 8024174:	681b      	ldr	r3, [r3, #0]
 8024176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024178:	429a      	cmp	r2, r3
 802417a:	d006      	beq.n	802418a <ip4_reass+0x2fa>
 802417c:	4b0d      	ldr	r3, [pc, #52]	; (80241b4 <ip4_reass+0x324>)
 802417e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8024182:	4910      	ldr	r1, [pc, #64]	; (80241c4 <ip4_reass+0x334>)
 8024184:	480d      	ldr	r0, [pc, #52]	; (80241bc <ip4_reass+0x32c>)
 8024186:	f000 fbe7 	bl	8024958 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802418a:	2100      	movs	r1, #0
 802418c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802418e:	f7ff fce7 	bl	8023b60 <ip_reass_dequeue_datagram>
 8024192:	e006      	b.n	80241a2 <ip4_reass+0x312>
    goto nullreturn;
 8024194:	bf00      	nop
 8024196:	e004      	b.n	80241a2 <ip4_reass+0x312>
    goto nullreturn;
 8024198:	bf00      	nop
 802419a:	e002      	b.n	80241a2 <ip4_reass+0x312>
      goto nullreturn;
 802419c:	bf00      	nop
 802419e:	e000      	b.n	80241a2 <ip4_reass+0x312>
  }

nullreturn:
 80241a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80241a2:	6878      	ldr	r0, [r7, #4]
 80241a4:	f7fc fea0 	bl	8020ee8 <pbuf_free>
  return NULL;
 80241a8:	2300      	movs	r3, #0
}
 80241aa:	4618      	mov	r0, r3
 80241ac:	3738      	adds	r7, #56	; 0x38
 80241ae:	46bd      	mov	sp, r7
 80241b0:	bd80      	pop	{r7, pc}
 80241b2:	bf00      	nop
 80241b4:	0802b020 	.word	0x0802b020
 80241b8:	0802b1ac 	.word	0x0802b1ac
 80241bc:	0802b068 	.word	0x0802b068
 80241c0:	200199d8 	.word	0x200199d8
 80241c4:	0802b1b8 	.word	0x0802b1b8

080241c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80241c8:	b580      	push	{r7, lr}
 80241ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80241cc:	2002      	movs	r0, #2
 80241ce:	f7fb ff0b 	bl	801ffe8 <memp_malloc>
 80241d2:	4603      	mov	r3, r0
}
 80241d4:	4618      	mov	r0, r3
 80241d6:	bd80      	pop	{r7, pc}

080241d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80241d8:	b580      	push	{r7, lr}
 80241da:	b082      	sub	sp, #8
 80241dc:	af00      	add	r7, sp, #0
 80241de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	d106      	bne.n	80241f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80241e6:	4b07      	ldr	r3, [pc, #28]	; (8024204 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80241e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80241ec:	4906      	ldr	r1, [pc, #24]	; (8024208 <ip_frag_free_pbuf_custom_ref+0x30>)
 80241ee:	4807      	ldr	r0, [pc, #28]	; (802420c <ip_frag_free_pbuf_custom_ref+0x34>)
 80241f0:	f000 fbb2 	bl	8024958 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80241f4:	6879      	ldr	r1, [r7, #4]
 80241f6:	2002      	movs	r0, #2
 80241f8:	f7fb ff66 	bl	80200c8 <memp_free>
}
 80241fc:	bf00      	nop
 80241fe:	3708      	adds	r7, #8
 8024200:	46bd      	mov	sp, r7
 8024202:	bd80      	pop	{r7, pc}
 8024204:	0802b020 	.word	0x0802b020
 8024208:	0802b1d8 	.word	0x0802b1d8
 802420c:	0802b068 	.word	0x0802b068

08024210 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8024210:	b580      	push	{r7, lr}
 8024212:	b084      	sub	sp, #16
 8024214:	af00      	add	r7, sp, #0
 8024216:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802421c:	68fb      	ldr	r3, [r7, #12]
 802421e:	2b00      	cmp	r3, #0
 8024220:	d106      	bne.n	8024230 <ipfrag_free_pbuf_custom+0x20>
 8024222:	4b11      	ldr	r3, [pc, #68]	; (8024268 <ipfrag_free_pbuf_custom+0x58>)
 8024224:	f240 22ce 	movw	r2, #718	; 0x2ce
 8024228:	4910      	ldr	r1, [pc, #64]	; (802426c <ipfrag_free_pbuf_custom+0x5c>)
 802422a:	4811      	ldr	r0, [pc, #68]	; (8024270 <ipfrag_free_pbuf_custom+0x60>)
 802422c:	f000 fb94 	bl	8024958 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8024230:	68fa      	ldr	r2, [r7, #12]
 8024232:	687b      	ldr	r3, [r7, #4]
 8024234:	429a      	cmp	r2, r3
 8024236:	d006      	beq.n	8024246 <ipfrag_free_pbuf_custom+0x36>
 8024238:	4b0b      	ldr	r3, [pc, #44]	; (8024268 <ipfrag_free_pbuf_custom+0x58>)
 802423a:	f240 22cf 	movw	r2, #719	; 0x2cf
 802423e:	490d      	ldr	r1, [pc, #52]	; (8024274 <ipfrag_free_pbuf_custom+0x64>)
 8024240:	480b      	ldr	r0, [pc, #44]	; (8024270 <ipfrag_free_pbuf_custom+0x60>)
 8024242:	f000 fb89 	bl	8024958 <iprintf>
  if (pcr->original != NULL) {
 8024246:	68fb      	ldr	r3, [r7, #12]
 8024248:	695b      	ldr	r3, [r3, #20]
 802424a:	2b00      	cmp	r3, #0
 802424c:	d004      	beq.n	8024258 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802424e:	68fb      	ldr	r3, [r7, #12]
 8024250:	695b      	ldr	r3, [r3, #20]
 8024252:	4618      	mov	r0, r3
 8024254:	f7fc fe48 	bl	8020ee8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8024258:	68f8      	ldr	r0, [r7, #12]
 802425a:	f7ff ffbd 	bl	80241d8 <ip_frag_free_pbuf_custom_ref>
}
 802425e:	bf00      	nop
 8024260:	3710      	adds	r7, #16
 8024262:	46bd      	mov	sp, r7
 8024264:	bd80      	pop	{r7, pc}
 8024266:	bf00      	nop
 8024268:	0802b020 	.word	0x0802b020
 802426c:	0802b1e4 	.word	0x0802b1e4
 8024270:	0802b068 	.word	0x0802b068
 8024274:	0802b1f0 	.word	0x0802b1f0

08024278 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024278:	b580      	push	{r7, lr}
 802427a:	b094      	sub	sp, #80	; 0x50
 802427c:	af02      	add	r7, sp, #8
 802427e:	60f8      	str	r0, [r7, #12]
 8024280:	60b9      	str	r1, [r7, #8]
 8024282:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8024284:	2300      	movs	r3, #0
 8024286:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802428a:	68bb      	ldr	r3, [r7, #8]
 802428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802428e:	3b14      	subs	r3, #20
 8024290:	2b00      	cmp	r3, #0
 8024292:	da00      	bge.n	8024296 <ip4_frag+0x1e>
 8024294:	3307      	adds	r3, #7
 8024296:	10db      	asrs	r3, r3, #3
 8024298:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802429a:	2314      	movs	r3, #20
 802429c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802429e:	68fb      	ldr	r3, [r7, #12]
 80242a0:	685b      	ldr	r3, [r3, #4]
 80242a2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80242a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80242a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80242a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80242aa:	781b      	ldrb	r3, [r3, #0]
 80242ac:	f003 030f 	and.w	r3, r3, #15
 80242b0:	b2db      	uxtb	r3, r3
 80242b2:	009b      	lsls	r3, r3, #2
 80242b4:	b2db      	uxtb	r3, r3
 80242b6:	2b14      	cmp	r3, #20
 80242b8:	d002      	beq.n	80242c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80242ba:	f06f 0305 	mvn.w	r3, #5
 80242be:	e110      	b.n	80244e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80242c0:	68fb      	ldr	r3, [r7, #12]
 80242c2:	895b      	ldrh	r3, [r3, #10]
 80242c4:	2b13      	cmp	r3, #19
 80242c6:	d809      	bhi.n	80242dc <ip4_frag+0x64>
 80242c8:	4b88      	ldr	r3, [pc, #544]	; (80244ec <ip4_frag+0x274>)
 80242ca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80242ce:	4988      	ldr	r1, [pc, #544]	; (80244f0 <ip4_frag+0x278>)
 80242d0:	4888      	ldr	r0, [pc, #544]	; (80244f4 <ip4_frag+0x27c>)
 80242d2:	f000 fb41 	bl	8024958 <iprintf>
 80242d6:	f06f 0305 	mvn.w	r3, #5
 80242da:	e102      	b.n	80244e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80242dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80242de:	88db      	ldrh	r3, [r3, #6]
 80242e0:	b29b      	uxth	r3, r3
 80242e2:	4618      	mov	r0, r3
 80242e4:	f7fb fa24 	bl	801f730 <lwip_htons>
 80242e8:	4603      	mov	r3, r0
 80242ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80242ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80242ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80242f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80242f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80242f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80242fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80242fe:	68fb      	ldr	r3, [r7, #12]
 8024300:	891b      	ldrh	r3, [r3, #8]
 8024302:	3b14      	subs	r3, #20
 8024304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8024308:	e0e1      	b.n	80244ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802430a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802430c:	00db      	lsls	r3, r3, #3
 802430e:	b29b      	uxth	r3, r3
 8024310:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8024314:	4293      	cmp	r3, r2
 8024316:	bf28      	it	cs
 8024318:	4613      	movcs	r3, r2
 802431a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802431c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024320:	2114      	movs	r1, #20
 8024322:	200e      	movs	r0, #14
 8024324:	f7fc fafe 	bl	8020924 <pbuf_alloc>
 8024328:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802432c:	2b00      	cmp	r3, #0
 802432e:	f000 80d5 	beq.w	80244dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024334:	895b      	ldrh	r3, [r3, #10]
 8024336:	2b13      	cmp	r3, #19
 8024338:	d806      	bhi.n	8024348 <ip4_frag+0xd0>
 802433a:	4b6c      	ldr	r3, [pc, #432]	; (80244ec <ip4_frag+0x274>)
 802433c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8024340:	496d      	ldr	r1, [pc, #436]	; (80244f8 <ip4_frag+0x280>)
 8024342:	486c      	ldr	r0, [pc, #432]	; (80244f4 <ip4_frag+0x27c>)
 8024344:	f000 fb08 	bl	8024958 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8024348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802434a:	685b      	ldr	r3, [r3, #4]
 802434c:	2214      	movs	r2, #20
 802434e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024350:	4618      	mov	r0, r3
 8024352:	f000 f9f1 	bl	8024738 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8024356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024358:	685b      	ldr	r3, [r3, #4]
 802435a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 802435c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802435e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8024362:	e064      	b.n	802442e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8024364:	68fb      	ldr	r3, [r7, #12]
 8024366:	895a      	ldrh	r2, [r3, #10]
 8024368:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802436a:	1ad3      	subs	r3, r2, r3
 802436c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802436e:	68fb      	ldr	r3, [r7, #12]
 8024370:	895b      	ldrh	r3, [r3, #10]
 8024372:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8024374:	429a      	cmp	r2, r3
 8024376:	d906      	bls.n	8024386 <ip4_frag+0x10e>
 8024378:	4b5c      	ldr	r3, [pc, #368]	; (80244ec <ip4_frag+0x274>)
 802437a:	f240 322d 	movw	r2, #813	; 0x32d
 802437e:	495f      	ldr	r1, [pc, #380]	; (80244fc <ip4_frag+0x284>)
 8024380:	485c      	ldr	r0, [pc, #368]	; (80244f4 <ip4_frag+0x27c>)
 8024382:	f000 fae9 	bl	8024958 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8024386:	8bfa      	ldrh	r2, [r7, #30]
 8024388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802438c:	4293      	cmp	r3, r2
 802438e:	bf28      	it	cs
 8024390:	4613      	movcs	r3, r2
 8024392:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8024396:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802439a:	2b00      	cmp	r3, #0
 802439c:	d105      	bne.n	80243aa <ip4_frag+0x132>
        poff = 0;
 802439e:	2300      	movs	r3, #0
 80243a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80243a2:	68fb      	ldr	r3, [r7, #12]
 80243a4:	681b      	ldr	r3, [r3, #0]
 80243a6:	60fb      	str	r3, [r7, #12]
        continue;
 80243a8:	e041      	b.n	802442e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80243aa:	f7ff ff0d 	bl	80241c8 <ip_frag_alloc_pbuf_custom_ref>
 80243ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80243b0:	69bb      	ldr	r3, [r7, #24]
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d103      	bne.n	80243be <ip4_frag+0x146>
        pbuf_free(rambuf);
 80243b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80243b8:	f7fc fd96 	bl	8020ee8 <pbuf_free>
        goto memerr;
 80243bc:	e08f      	b.n	80244de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80243be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80243c0:	68fb      	ldr	r3, [r7, #12]
 80243c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80243c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80243c6:	4413      	add	r3, r2
 80243c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80243cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80243d0:	9201      	str	r2, [sp, #4]
 80243d2:	9300      	str	r3, [sp, #0]
 80243d4:	4603      	mov	r3, r0
 80243d6:	2241      	movs	r2, #65	; 0x41
 80243d8:	2000      	movs	r0, #0
 80243da:	f7fc fbcb 	bl	8020b74 <pbuf_alloced_custom>
 80243de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80243e0:	697b      	ldr	r3, [r7, #20]
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d106      	bne.n	80243f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80243e6:	69b8      	ldr	r0, [r7, #24]
 80243e8:	f7ff fef6 	bl	80241d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80243ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80243ee:	f7fc fd7b 	bl	8020ee8 <pbuf_free>
        goto memerr;
 80243f2:	e074      	b.n	80244de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80243f4:	68f8      	ldr	r0, [r7, #12]
 80243f6:	f7fc fe17 	bl	8021028 <pbuf_ref>
      pcr->original = p;
 80243fa:	69bb      	ldr	r3, [r7, #24]
 80243fc:	68fa      	ldr	r2, [r7, #12]
 80243fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024400:	69bb      	ldr	r3, [r7, #24]
 8024402:	4a3f      	ldr	r2, [pc, #252]	; (8024500 <ip4_frag+0x288>)
 8024404:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8024406:	6979      	ldr	r1, [r7, #20]
 8024408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802440a:	f7fc fe2f 	bl	802106c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802440e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8024412:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024416:	1ad3      	subs	r3, r2, r3
 8024418:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 802441c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024420:	2b00      	cmp	r3, #0
 8024422:	d004      	beq.n	802442e <ip4_frag+0x1b6>
        poff = 0;
 8024424:	2300      	movs	r3, #0
 8024426:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8024428:	68fb      	ldr	r3, [r7, #12]
 802442a:	681b      	ldr	r3, [r3, #0]
 802442c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802442e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024432:	2b00      	cmp	r3, #0
 8024434:	d196      	bne.n	8024364 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8024436:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8024438:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802443c:	4413      	add	r3, r2
 802443e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8024440:	68bb      	ldr	r3, [r7, #8]
 8024442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024444:	f1a3 0213 	sub.w	r2, r3, #19
 8024448:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802444c:	429a      	cmp	r2, r3
 802444e:	bfcc      	ite	gt
 8024450:	2301      	movgt	r3, #1
 8024452:	2300      	movle	r3, #0
 8024454:	b2db      	uxtb	r3, r3
 8024456:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8024458:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802445c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024460:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8024462:	6a3b      	ldr	r3, [r7, #32]
 8024464:	2b00      	cmp	r3, #0
 8024466:	d002      	beq.n	802446e <ip4_frag+0x1f6>
 8024468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802446a:	2b00      	cmp	r3, #0
 802446c:	d003      	beq.n	8024476 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802446e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024474:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024476:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024478:	4618      	mov	r0, r3
 802447a:	f7fb f959 	bl	801f730 <lwip_htons>
 802447e:	4603      	mov	r3, r0
 8024480:	461a      	mov	r2, r3
 8024482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024484:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024486:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024488:	3314      	adds	r3, #20
 802448a:	b29b      	uxth	r3, r3
 802448c:	4618      	mov	r0, r3
 802448e:	f7fb f94f 	bl	801f730 <lwip_htons>
 8024492:	4603      	mov	r3, r0
 8024494:	461a      	mov	r2, r3
 8024496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024498:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802449c:	2200      	movs	r2, #0
 802449e:	729a      	strb	r2, [r3, #10]
 80244a0:	2200      	movs	r2, #0
 80244a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80244a4:	68bb      	ldr	r3, [r7, #8]
 80244a6:	695b      	ldr	r3, [r3, #20]
 80244a8:	687a      	ldr	r2, [r7, #4]
 80244aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80244ac:	68b8      	ldr	r0, [r7, #8]
 80244ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80244b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80244b2:	f7fc fd19 	bl	8020ee8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80244b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80244ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80244bc:	1ad3      	subs	r3, r2, r3
 80244be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80244c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80244c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80244c8:	4413      	add	r3, r2
 80244ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80244ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	f47f af19 	bne.w	802430a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80244d8:	2300      	movs	r3, #0
 80244da:	e002      	b.n	80244e2 <ip4_frag+0x26a>
      goto memerr;
 80244dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80244de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80244e2:	4618      	mov	r0, r3
 80244e4:	3748      	adds	r7, #72	; 0x48
 80244e6:	46bd      	mov	sp, r7
 80244e8:	bd80      	pop	{r7, pc}
 80244ea:	bf00      	nop
 80244ec:	0802b020 	.word	0x0802b020
 80244f0:	0802b1fc 	.word	0x0802b1fc
 80244f4:	0802b068 	.word	0x0802b068
 80244f8:	0802b218 	.word	0x0802b218
 80244fc:	0802b238 	.word	0x0802b238
 8024500:	08024211 	.word	0x08024211

08024504 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8024504:	b580      	push	{r7, lr}
 8024506:	b086      	sub	sp, #24
 8024508:	af00      	add	r7, sp, #0
 802450a:	6078      	str	r0, [r7, #4]
 802450c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802450e:	230e      	movs	r3, #14
 8024510:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024512:	687b      	ldr	r3, [r7, #4]
 8024514:	895b      	ldrh	r3, [r3, #10]
 8024516:	2b0e      	cmp	r3, #14
 8024518:	d96e      	bls.n	80245f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802451a:	687b      	ldr	r3, [r7, #4]
 802451c:	7bdb      	ldrb	r3, [r3, #15]
 802451e:	2b00      	cmp	r3, #0
 8024520:	d106      	bne.n	8024530 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8024522:	683b      	ldr	r3, [r7, #0]
 8024524:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024528:	3301      	adds	r3, #1
 802452a:	b2da      	uxtb	r2, r3
 802452c:	687b      	ldr	r3, [r7, #4]
 802452e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8024530:	687b      	ldr	r3, [r7, #4]
 8024532:	685b      	ldr	r3, [r3, #4]
 8024534:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8024536:	693b      	ldr	r3, [r7, #16]
 8024538:	7b1a      	ldrb	r2, [r3, #12]
 802453a:	7b5b      	ldrb	r3, [r3, #13]
 802453c:	021b      	lsls	r3, r3, #8
 802453e:	4313      	orrs	r3, r2
 8024540:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8024542:	693b      	ldr	r3, [r7, #16]
 8024544:	781b      	ldrb	r3, [r3, #0]
 8024546:	f003 0301 	and.w	r3, r3, #1
 802454a:	2b00      	cmp	r3, #0
 802454c:	d023      	beq.n	8024596 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802454e:	693b      	ldr	r3, [r7, #16]
 8024550:	781b      	ldrb	r3, [r3, #0]
 8024552:	2b01      	cmp	r3, #1
 8024554:	d10f      	bne.n	8024576 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024556:	693b      	ldr	r3, [r7, #16]
 8024558:	785b      	ldrb	r3, [r3, #1]
 802455a:	2b00      	cmp	r3, #0
 802455c:	d11b      	bne.n	8024596 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802455e:	693b      	ldr	r3, [r7, #16]
 8024560:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024562:	2b5e      	cmp	r3, #94	; 0x5e
 8024564:	d117      	bne.n	8024596 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8024566:	687b      	ldr	r3, [r7, #4]
 8024568:	7b5b      	ldrb	r3, [r3, #13]
 802456a:	f043 0310 	orr.w	r3, r3, #16
 802456e:	b2da      	uxtb	r2, r3
 8024570:	687b      	ldr	r3, [r7, #4]
 8024572:	735a      	strb	r2, [r3, #13]
 8024574:	e00f      	b.n	8024596 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8024576:	693b      	ldr	r3, [r7, #16]
 8024578:	2206      	movs	r2, #6
 802457a:	4928      	ldr	r1, [pc, #160]	; (802461c <ethernet_input+0x118>)
 802457c:	4618      	mov	r0, r3
 802457e:	f000 f8cb 	bl	8024718 <memcmp>
 8024582:	4603      	mov	r3, r0
 8024584:	2b00      	cmp	r3, #0
 8024586:	d106      	bne.n	8024596 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	7b5b      	ldrb	r3, [r3, #13]
 802458c:	f043 0308 	orr.w	r3, r3, #8
 8024590:	b2da      	uxtb	r2, r3
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8024596:	89fb      	ldrh	r3, [r7, #14]
 8024598:	2b08      	cmp	r3, #8
 802459a:	d003      	beq.n	80245a4 <ethernet_input+0xa0>
 802459c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80245a0:	d014      	beq.n	80245cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80245a2:	e032      	b.n	802460a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80245a4:	683b      	ldr	r3, [r7, #0]
 80245a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80245aa:	f003 0308 	and.w	r3, r3, #8
 80245ae:	2b00      	cmp	r3, #0
 80245b0:	d024      	beq.n	80245fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80245b2:	8afb      	ldrh	r3, [r7, #22]
 80245b4:	4619      	mov	r1, r3
 80245b6:	6878      	ldr	r0, [r7, #4]
 80245b8:	f7fc fc10 	bl	8020ddc <pbuf_remove_header>
 80245bc:	4603      	mov	r3, r0
 80245be:	2b00      	cmp	r3, #0
 80245c0:	d11e      	bne.n	8024600 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80245c2:	6839      	ldr	r1, [r7, #0]
 80245c4:	6878      	ldr	r0, [r7, #4]
 80245c6:	f7fe fe8d 	bl	80232e4 <ip4_input>
      break;
 80245ca:	e013      	b.n	80245f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80245cc:	683b      	ldr	r3, [r7, #0]
 80245ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80245d2:	f003 0308 	and.w	r3, r3, #8
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	d014      	beq.n	8024604 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80245da:	8afb      	ldrh	r3, [r7, #22]
 80245dc:	4619      	mov	r1, r3
 80245de:	6878      	ldr	r0, [r7, #4]
 80245e0:	f7fc fbfc 	bl	8020ddc <pbuf_remove_header>
 80245e4:	4603      	mov	r3, r0
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d10e      	bne.n	8024608 <ethernet_input+0x104>
        etharp_input(p, netif);
 80245ea:	6839      	ldr	r1, [r7, #0]
 80245ec:	6878      	ldr	r0, [r7, #4]
 80245ee:	f7fe f82d 	bl	802264c <etharp_input>
      break;
 80245f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80245f4:	2300      	movs	r3, #0
 80245f6:	e00c      	b.n	8024612 <ethernet_input+0x10e>
    goto free_and_return;
 80245f8:	bf00      	nop
 80245fa:	e006      	b.n	802460a <ethernet_input+0x106>
        goto free_and_return;
 80245fc:	bf00      	nop
 80245fe:	e004      	b.n	802460a <ethernet_input+0x106>
        goto free_and_return;
 8024600:	bf00      	nop
 8024602:	e002      	b.n	802460a <ethernet_input+0x106>
        goto free_and_return;
 8024604:	bf00      	nop
 8024606:	e000      	b.n	802460a <ethernet_input+0x106>
        goto free_and_return;
 8024608:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802460a:	6878      	ldr	r0, [r7, #4]
 802460c:	f7fc fc6c 	bl	8020ee8 <pbuf_free>
  return ERR_OK;
 8024610:	2300      	movs	r3, #0
}
 8024612:	4618      	mov	r0, r3
 8024614:	3718      	adds	r7, #24
 8024616:	46bd      	mov	sp, r7
 8024618:	bd80      	pop	{r7, pc}
 802461a:	bf00      	nop
 802461c:	0802b798 	.word	0x0802b798

08024620 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024620:	b580      	push	{r7, lr}
 8024622:	b086      	sub	sp, #24
 8024624:	af00      	add	r7, sp, #0
 8024626:	60f8      	str	r0, [r7, #12]
 8024628:	60b9      	str	r1, [r7, #8]
 802462a:	607a      	str	r2, [r7, #4]
 802462c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802462e:	8c3b      	ldrh	r3, [r7, #32]
 8024630:	4618      	mov	r0, r3
 8024632:	f7fb f87d 	bl	801f730 <lwip_htons>
 8024636:	4603      	mov	r3, r0
 8024638:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802463a:	210e      	movs	r1, #14
 802463c:	68b8      	ldr	r0, [r7, #8]
 802463e:	f7fc fbbd 	bl	8020dbc <pbuf_add_header>
 8024642:	4603      	mov	r3, r0
 8024644:	2b00      	cmp	r3, #0
 8024646:	d125      	bne.n	8024694 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024648:	68bb      	ldr	r3, [r7, #8]
 802464a:	685b      	ldr	r3, [r3, #4]
 802464c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802464e:	693b      	ldr	r3, [r7, #16]
 8024650:	8afa      	ldrh	r2, [r7, #22]
 8024652:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024654:	693b      	ldr	r3, [r7, #16]
 8024656:	2206      	movs	r2, #6
 8024658:	6839      	ldr	r1, [r7, #0]
 802465a:	4618      	mov	r0, r3
 802465c:	f000 f86c 	bl	8024738 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8024660:	693b      	ldr	r3, [r7, #16]
 8024662:	3306      	adds	r3, #6
 8024664:	2206      	movs	r2, #6
 8024666:	6879      	ldr	r1, [r7, #4]
 8024668:	4618      	mov	r0, r3
 802466a:	f000 f865 	bl	8024738 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802466e:	68fb      	ldr	r3, [r7, #12]
 8024670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024674:	2b06      	cmp	r3, #6
 8024676:	d006      	beq.n	8024686 <ethernet_output+0x66>
 8024678:	4b0a      	ldr	r3, [pc, #40]	; (80246a4 <ethernet_output+0x84>)
 802467a:	f44f 7299 	mov.w	r2, #306	; 0x132
 802467e:	490a      	ldr	r1, [pc, #40]	; (80246a8 <ethernet_output+0x88>)
 8024680:	480a      	ldr	r0, [pc, #40]	; (80246ac <ethernet_output+0x8c>)
 8024682:	f000 f969 	bl	8024958 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8024686:	68fb      	ldr	r3, [r7, #12]
 8024688:	699b      	ldr	r3, [r3, #24]
 802468a:	68b9      	ldr	r1, [r7, #8]
 802468c:	68f8      	ldr	r0, [r7, #12]
 802468e:	4798      	blx	r3
 8024690:	4603      	mov	r3, r0
 8024692:	e002      	b.n	802469a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8024694:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8024696:	f06f 0301 	mvn.w	r3, #1
}
 802469a:	4618      	mov	r0, r3
 802469c:	3718      	adds	r7, #24
 802469e:	46bd      	mov	sp, r7
 80246a0:	bd80      	pop	{r7, pc}
 80246a2:	bf00      	nop
 80246a4:	0802b248 	.word	0x0802b248
 80246a8:	0802b280 	.word	0x0802b280
 80246ac:	0802b2b4 	.word	0x0802b2b4

080246b0 <__libc_init_array>:
 80246b0:	b570      	push	{r4, r5, r6, lr}
 80246b2:	4d0d      	ldr	r5, [pc, #52]	; (80246e8 <__libc_init_array+0x38>)
 80246b4:	4c0d      	ldr	r4, [pc, #52]	; (80246ec <__libc_init_array+0x3c>)
 80246b6:	1b64      	subs	r4, r4, r5
 80246b8:	10a4      	asrs	r4, r4, #2
 80246ba:	2600      	movs	r6, #0
 80246bc:	42a6      	cmp	r6, r4
 80246be:	d109      	bne.n	80246d4 <__libc_init_array+0x24>
 80246c0:	4d0b      	ldr	r5, [pc, #44]	; (80246f0 <__libc_init_array+0x40>)
 80246c2:	4c0c      	ldr	r4, [pc, #48]	; (80246f4 <__libc_init_array+0x44>)
 80246c4:	f001 fbfe 	bl	8025ec4 <_init>
 80246c8:	1b64      	subs	r4, r4, r5
 80246ca:	10a4      	asrs	r4, r4, #2
 80246cc:	2600      	movs	r6, #0
 80246ce:	42a6      	cmp	r6, r4
 80246d0:	d105      	bne.n	80246de <__libc_init_array+0x2e>
 80246d2:	bd70      	pop	{r4, r5, r6, pc}
 80246d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80246d8:	4798      	blx	r3
 80246da:	3601      	adds	r6, #1
 80246dc:	e7ee      	b.n	80246bc <__libc_init_array+0xc>
 80246de:	f855 3b04 	ldr.w	r3, [r5], #4
 80246e2:	4798      	blx	r3
 80246e4:	3601      	adds	r6, #1
 80246e6:	e7f2      	b.n	80246ce <__libc_init_array+0x1e>
 80246e8:	0802b8f8 	.word	0x0802b8f8
 80246ec:	0802b8f8 	.word	0x0802b8f8
 80246f0:	0802b8f8 	.word	0x0802b8f8
 80246f4:	0802b8fc 	.word	0x0802b8fc

080246f8 <malloc>:
 80246f8:	4b02      	ldr	r3, [pc, #8]	; (8024704 <malloc+0xc>)
 80246fa:	4601      	mov	r1, r0
 80246fc:	6818      	ldr	r0, [r3, #0]
 80246fe:	f000 b8b7 	b.w	8024870 <_malloc_r>
 8024702:	bf00      	nop
 8024704:	20000140 	.word	0x20000140

08024708 <free>:
 8024708:	4b02      	ldr	r3, [pc, #8]	; (8024714 <free+0xc>)
 802470a:	4601      	mov	r1, r0
 802470c:	6818      	ldr	r0, [r3, #0]
 802470e:	f000 b843 	b.w	8024798 <_free_r>
 8024712:	bf00      	nop
 8024714:	20000140 	.word	0x20000140

08024718 <memcmp>:
 8024718:	b510      	push	{r4, lr}
 802471a:	3901      	subs	r1, #1
 802471c:	4402      	add	r2, r0
 802471e:	4290      	cmp	r0, r2
 8024720:	d101      	bne.n	8024726 <memcmp+0xe>
 8024722:	2000      	movs	r0, #0
 8024724:	e005      	b.n	8024732 <memcmp+0x1a>
 8024726:	7803      	ldrb	r3, [r0, #0]
 8024728:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802472c:	42a3      	cmp	r3, r4
 802472e:	d001      	beq.n	8024734 <memcmp+0x1c>
 8024730:	1b18      	subs	r0, r3, r4
 8024732:	bd10      	pop	{r4, pc}
 8024734:	3001      	adds	r0, #1
 8024736:	e7f2      	b.n	802471e <memcmp+0x6>

08024738 <memcpy>:
 8024738:	440a      	add	r2, r1
 802473a:	4291      	cmp	r1, r2
 802473c:	f100 33ff 	add.w	r3, r0, #4294967295
 8024740:	d100      	bne.n	8024744 <memcpy+0xc>
 8024742:	4770      	bx	lr
 8024744:	b510      	push	{r4, lr}
 8024746:	f811 4b01 	ldrb.w	r4, [r1], #1
 802474a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802474e:	4291      	cmp	r1, r2
 8024750:	d1f9      	bne.n	8024746 <memcpy+0xe>
 8024752:	bd10      	pop	{r4, pc}

08024754 <memmove>:
 8024754:	4288      	cmp	r0, r1
 8024756:	b510      	push	{r4, lr}
 8024758:	eb01 0402 	add.w	r4, r1, r2
 802475c:	d902      	bls.n	8024764 <memmove+0x10>
 802475e:	4284      	cmp	r4, r0
 8024760:	4623      	mov	r3, r4
 8024762:	d807      	bhi.n	8024774 <memmove+0x20>
 8024764:	1e43      	subs	r3, r0, #1
 8024766:	42a1      	cmp	r1, r4
 8024768:	d008      	beq.n	802477c <memmove+0x28>
 802476a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802476e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024772:	e7f8      	b.n	8024766 <memmove+0x12>
 8024774:	4402      	add	r2, r0
 8024776:	4601      	mov	r1, r0
 8024778:	428a      	cmp	r2, r1
 802477a:	d100      	bne.n	802477e <memmove+0x2a>
 802477c:	bd10      	pop	{r4, pc}
 802477e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024786:	e7f7      	b.n	8024778 <memmove+0x24>

08024788 <memset>:
 8024788:	4402      	add	r2, r0
 802478a:	4603      	mov	r3, r0
 802478c:	4293      	cmp	r3, r2
 802478e:	d100      	bne.n	8024792 <memset+0xa>
 8024790:	4770      	bx	lr
 8024792:	f803 1b01 	strb.w	r1, [r3], #1
 8024796:	e7f9      	b.n	802478c <memset+0x4>

08024798 <_free_r>:
 8024798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802479a:	2900      	cmp	r1, #0
 802479c:	d044      	beq.n	8024828 <_free_r+0x90>
 802479e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80247a2:	9001      	str	r0, [sp, #4]
 80247a4:	2b00      	cmp	r3, #0
 80247a6:	f1a1 0404 	sub.w	r4, r1, #4
 80247aa:	bfb8      	it	lt
 80247ac:	18e4      	addlt	r4, r4, r3
 80247ae:	f000 fdbb 	bl	8025328 <__malloc_lock>
 80247b2:	4a1e      	ldr	r2, [pc, #120]	; (802482c <_free_r+0x94>)
 80247b4:	9801      	ldr	r0, [sp, #4]
 80247b6:	6813      	ldr	r3, [r2, #0]
 80247b8:	b933      	cbnz	r3, 80247c8 <_free_r+0x30>
 80247ba:	6063      	str	r3, [r4, #4]
 80247bc:	6014      	str	r4, [r2, #0]
 80247be:	b003      	add	sp, #12
 80247c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80247c4:	f000 bdb6 	b.w	8025334 <__malloc_unlock>
 80247c8:	42a3      	cmp	r3, r4
 80247ca:	d908      	bls.n	80247de <_free_r+0x46>
 80247cc:	6825      	ldr	r5, [r4, #0]
 80247ce:	1961      	adds	r1, r4, r5
 80247d0:	428b      	cmp	r3, r1
 80247d2:	bf01      	itttt	eq
 80247d4:	6819      	ldreq	r1, [r3, #0]
 80247d6:	685b      	ldreq	r3, [r3, #4]
 80247d8:	1949      	addeq	r1, r1, r5
 80247da:	6021      	streq	r1, [r4, #0]
 80247dc:	e7ed      	b.n	80247ba <_free_r+0x22>
 80247de:	461a      	mov	r2, r3
 80247e0:	685b      	ldr	r3, [r3, #4]
 80247e2:	b10b      	cbz	r3, 80247e8 <_free_r+0x50>
 80247e4:	42a3      	cmp	r3, r4
 80247e6:	d9fa      	bls.n	80247de <_free_r+0x46>
 80247e8:	6811      	ldr	r1, [r2, #0]
 80247ea:	1855      	adds	r5, r2, r1
 80247ec:	42a5      	cmp	r5, r4
 80247ee:	d10b      	bne.n	8024808 <_free_r+0x70>
 80247f0:	6824      	ldr	r4, [r4, #0]
 80247f2:	4421      	add	r1, r4
 80247f4:	1854      	adds	r4, r2, r1
 80247f6:	42a3      	cmp	r3, r4
 80247f8:	6011      	str	r1, [r2, #0]
 80247fa:	d1e0      	bne.n	80247be <_free_r+0x26>
 80247fc:	681c      	ldr	r4, [r3, #0]
 80247fe:	685b      	ldr	r3, [r3, #4]
 8024800:	6053      	str	r3, [r2, #4]
 8024802:	4421      	add	r1, r4
 8024804:	6011      	str	r1, [r2, #0]
 8024806:	e7da      	b.n	80247be <_free_r+0x26>
 8024808:	d902      	bls.n	8024810 <_free_r+0x78>
 802480a:	230c      	movs	r3, #12
 802480c:	6003      	str	r3, [r0, #0]
 802480e:	e7d6      	b.n	80247be <_free_r+0x26>
 8024810:	6825      	ldr	r5, [r4, #0]
 8024812:	1961      	adds	r1, r4, r5
 8024814:	428b      	cmp	r3, r1
 8024816:	bf04      	itt	eq
 8024818:	6819      	ldreq	r1, [r3, #0]
 802481a:	685b      	ldreq	r3, [r3, #4]
 802481c:	6063      	str	r3, [r4, #4]
 802481e:	bf04      	itt	eq
 8024820:	1949      	addeq	r1, r1, r5
 8024822:	6021      	streq	r1, [r4, #0]
 8024824:	6054      	str	r4, [r2, #4]
 8024826:	e7ca      	b.n	80247be <_free_r+0x26>
 8024828:	b003      	add	sp, #12
 802482a:	bd30      	pop	{r4, r5, pc}
 802482c:	200199e0 	.word	0x200199e0

08024830 <sbrk_aligned>:
 8024830:	b570      	push	{r4, r5, r6, lr}
 8024832:	4e0e      	ldr	r6, [pc, #56]	; (802486c <sbrk_aligned+0x3c>)
 8024834:	460c      	mov	r4, r1
 8024836:	6831      	ldr	r1, [r6, #0]
 8024838:	4605      	mov	r5, r0
 802483a:	b911      	cbnz	r1, 8024842 <sbrk_aligned+0x12>
 802483c:	f000 f96e 	bl	8024b1c <_sbrk_r>
 8024840:	6030      	str	r0, [r6, #0]
 8024842:	4621      	mov	r1, r4
 8024844:	4628      	mov	r0, r5
 8024846:	f000 f969 	bl	8024b1c <_sbrk_r>
 802484a:	1c43      	adds	r3, r0, #1
 802484c:	d00a      	beq.n	8024864 <sbrk_aligned+0x34>
 802484e:	1cc4      	adds	r4, r0, #3
 8024850:	f024 0403 	bic.w	r4, r4, #3
 8024854:	42a0      	cmp	r0, r4
 8024856:	d007      	beq.n	8024868 <sbrk_aligned+0x38>
 8024858:	1a21      	subs	r1, r4, r0
 802485a:	4628      	mov	r0, r5
 802485c:	f000 f95e 	bl	8024b1c <_sbrk_r>
 8024860:	3001      	adds	r0, #1
 8024862:	d101      	bne.n	8024868 <sbrk_aligned+0x38>
 8024864:	f04f 34ff 	mov.w	r4, #4294967295
 8024868:	4620      	mov	r0, r4
 802486a:	bd70      	pop	{r4, r5, r6, pc}
 802486c:	200199e4 	.word	0x200199e4

08024870 <_malloc_r>:
 8024870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024874:	1ccd      	adds	r5, r1, #3
 8024876:	f025 0503 	bic.w	r5, r5, #3
 802487a:	3508      	adds	r5, #8
 802487c:	2d0c      	cmp	r5, #12
 802487e:	bf38      	it	cc
 8024880:	250c      	movcc	r5, #12
 8024882:	2d00      	cmp	r5, #0
 8024884:	4607      	mov	r7, r0
 8024886:	db01      	blt.n	802488c <_malloc_r+0x1c>
 8024888:	42a9      	cmp	r1, r5
 802488a:	d905      	bls.n	8024898 <_malloc_r+0x28>
 802488c:	230c      	movs	r3, #12
 802488e:	603b      	str	r3, [r7, #0]
 8024890:	2600      	movs	r6, #0
 8024892:	4630      	mov	r0, r6
 8024894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024898:	4e2e      	ldr	r6, [pc, #184]	; (8024954 <_malloc_r+0xe4>)
 802489a:	f000 fd45 	bl	8025328 <__malloc_lock>
 802489e:	6833      	ldr	r3, [r6, #0]
 80248a0:	461c      	mov	r4, r3
 80248a2:	bb34      	cbnz	r4, 80248f2 <_malloc_r+0x82>
 80248a4:	4629      	mov	r1, r5
 80248a6:	4638      	mov	r0, r7
 80248a8:	f7ff ffc2 	bl	8024830 <sbrk_aligned>
 80248ac:	1c43      	adds	r3, r0, #1
 80248ae:	4604      	mov	r4, r0
 80248b0:	d14d      	bne.n	802494e <_malloc_r+0xde>
 80248b2:	6834      	ldr	r4, [r6, #0]
 80248b4:	4626      	mov	r6, r4
 80248b6:	2e00      	cmp	r6, #0
 80248b8:	d140      	bne.n	802493c <_malloc_r+0xcc>
 80248ba:	6823      	ldr	r3, [r4, #0]
 80248bc:	4631      	mov	r1, r6
 80248be:	4638      	mov	r0, r7
 80248c0:	eb04 0803 	add.w	r8, r4, r3
 80248c4:	f000 f92a 	bl	8024b1c <_sbrk_r>
 80248c8:	4580      	cmp	r8, r0
 80248ca:	d13a      	bne.n	8024942 <_malloc_r+0xd2>
 80248cc:	6821      	ldr	r1, [r4, #0]
 80248ce:	3503      	adds	r5, #3
 80248d0:	1a6d      	subs	r5, r5, r1
 80248d2:	f025 0503 	bic.w	r5, r5, #3
 80248d6:	3508      	adds	r5, #8
 80248d8:	2d0c      	cmp	r5, #12
 80248da:	bf38      	it	cc
 80248dc:	250c      	movcc	r5, #12
 80248de:	4629      	mov	r1, r5
 80248e0:	4638      	mov	r0, r7
 80248e2:	f7ff ffa5 	bl	8024830 <sbrk_aligned>
 80248e6:	3001      	adds	r0, #1
 80248e8:	d02b      	beq.n	8024942 <_malloc_r+0xd2>
 80248ea:	6823      	ldr	r3, [r4, #0]
 80248ec:	442b      	add	r3, r5
 80248ee:	6023      	str	r3, [r4, #0]
 80248f0:	e00e      	b.n	8024910 <_malloc_r+0xa0>
 80248f2:	6822      	ldr	r2, [r4, #0]
 80248f4:	1b52      	subs	r2, r2, r5
 80248f6:	d41e      	bmi.n	8024936 <_malloc_r+0xc6>
 80248f8:	2a0b      	cmp	r2, #11
 80248fa:	d916      	bls.n	802492a <_malloc_r+0xba>
 80248fc:	1961      	adds	r1, r4, r5
 80248fe:	42a3      	cmp	r3, r4
 8024900:	6025      	str	r5, [r4, #0]
 8024902:	bf18      	it	ne
 8024904:	6059      	strne	r1, [r3, #4]
 8024906:	6863      	ldr	r3, [r4, #4]
 8024908:	bf08      	it	eq
 802490a:	6031      	streq	r1, [r6, #0]
 802490c:	5162      	str	r2, [r4, r5]
 802490e:	604b      	str	r3, [r1, #4]
 8024910:	4638      	mov	r0, r7
 8024912:	f104 060b 	add.w	r6, r4, #11
 8024916:	f000 fd0d 	bl	8025334 <__malloc_unlock>
 802491a:	f026 0607 	bic.w	r6, r6, #7
 802491e:	1d23      	adds	r3, r4, #4
 8024920:	1af2      	subs	r2, r6, r3
 8024922:	d0b6      	beq.n	8024892 <_malloc_r+0x22>
 8024924:	1b9b      	subs	r3, r3, r6
 8024926:	50a3      	str	r3, [r4, r2]
 8024928:	e7b3      	b.n	8024892 <_malloc_r+0x22>
 802492a:	6862      	ldr	r2, [r4, #4]
 802492c:	42a3      	cmp	r3, r4
 802492e:	bf0c      	ite	eq
 8024930:	6032      	streq	r2, [r6, #0]
 8024932:	605a      	strne	r2, [r3, #4]
 8024934:	e7ec      	b.n	8024910 <_malloc_r+0xa0>
 8024936:	4623      	mov	r3, r4
 8024938:	6864      	ldr	r4, [r4, #4]
 802493a:	e7b2      	b.n	80248a2 <_malloc_r+0x32>
 802493c:	4634      	mov	r4, r6
 802493e:	6876      	ldr	r6, [r6, #4]
 8024940:	e7b9      	b.n	80248b6 <_malloc_r+0x46>
 8024942:	230c      	movs	r3, #12
 8024944:	603b      	str	r3, [r7, #0]
 8024946:	4638      	mov	r0, r7
 8024948:	f000 fcf4 	bl	8025334 <__malloc_unlock>
 802494c:	e7a1      	b.n	8024892 <_malloc_r+0x22>
 802494e:	6025      	str	r5, [r4, #0]
 8024950:	e7de      	b.n	8024910 <_malloc_r+0xa0>
 8024952:	bf00      	nop
 8024954:	200199e0 	.word	0x200199e0

08024958 <iprintf>:
 8024958:	b40f      	push	{r0, r1, r2, r3}
 802495a:	4b0a      	ldr	r3, [pc, #40]	; (8024984 <iprintf+0x2c>)
 802495c:	b513      	push	{r0, r1, r4, lr}
 802495e:	681c      	ldr	r4, [r3, #0]
 8024960:	b124      	cbz	r4, 802496c <iprintf+0x14>
 8024962:	69a3      	ldr	r3, [r4, #24]
 8024964:	b913      	cbnz	r3, 802496c <iprintf+0x14>
 8024966:	4620      	mov	r0, r4
 8024968:	f000 fbc6 	bl	80250f8 <__sinit>
 802496c:	ab05      	add	r3, sp, #20
 802496e:	9a04      	ldr	r2, [sp, #16]
 8024970:	68a1      	ldr	r1, [r4, #8]
 8024972:	9301      	str	r3, [sp, #4]
 8024974:	4620      	mov	r0, r4
 8024976:	f000 fe69 	bl	802564c <_vfiprintf_r>
 802497a:	b002      	add	sp, #8
 802497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024980:	b004      	add	sp, #16
 8024982:	4770      	bx	lr
 8024984:	20000140 	.word	0x20000140

08024988 <putchar>:
 8024988:	4b09      	ldr	r3, [pc, #36]	; (80249b0 <putchar+0x28>)
 802498a:	b513      	push	{r0, r1, r4, lr}
 802498c:	681c      	ldr	r4, [r3, #0]
 802498e:	4601      	mov	r1, r0
 8024990:	b134      	cbz	r4, 80249a0 <putchar+0x18>
 8024992:	69a3      	ldr	r3, [r4, #24]
 8024994:	b923      	cbnz	r3, 80249a0 <putchar+0x18>
 8024996:	9001      	str	r0, [sp, #4]
 8024998:	4620      	mov	r0, r4
 802499a:	f000 fbad 	bl	80250f8 <__sinit>
 802499e:	9901      	ldr	r1, [sp, #4]
 80249a0:	68a2      	ldr	r2, [r4, #8]
 80249a2:	4620      	mov	r0, r4
 80249a4:	b002      	add	sp, #8
 80249a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80249aa:	f001 b913 	b.w	8025bd4 <_putc_r>
 80249ae:	bf00      	nop
 80249b0:	20000140 	.word	0x20000140

080249b4 <_puts_r>:
 80249b4:	b570      	push	{r4, r5, r6, lr}
 80249b6:	460e      	mov	r6, r1
 80249b8:	4605      	mov	r5, r0
 80249ba:	b118      	cbz	r0, 80249c4 <_puts_r+0x10>
 80249bc:	6983      	ldr	r3, [r0, #24]
 80249be:	b90b      	cbnz	r3, 80249c4 <_puts_r+0x10>
 80249c0:	f000 fb9a 	bl	80250f8 <__sinit>
 80249c4:	69ab      	ldr	r3, [r5, #24]
 80249c6:	68ac      	ldr	r4, [r5, #8]
 80249c8:	b913      	cbnz	r3, 80249d0 <_puts_r+0x1c>
 80249ca:	4628      	mov	r0, r5
 80249cc:	f000 fb94 	bl	80250f8 <__sinit>
 80249d0:	4b2c      	ldr	r3, [pc, #176]	; (8024a84 <_puts_r+0xd0>)
 80249d2:	429c      	cmp	r4, r3
 80249d4:	d120      	bne.n	8024a18 <_puts_r+0x64>
 80249d6:	686c      	ldr	r4, [r5, #4]
 80249d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80249da:	07db      	lsls	r3, r3, #31
 80249dc:	d405      	bmi.n	80249ea <_puts_r+0x36>
 80249de:	89a3      	ldrh	r3, [r4, #12]
 80249e0:	0598      	lsls	r0, r3, #22
 80249e2:	d402      	bmi.n	80249ea <_puts_r+0x36>
 80249e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80249e6:	f000 fc37 	bl	8025258 <__retarget_lock_acquire_recursive>
 80249ea:	89a3      	ldrh	r3, [r4, #12]
 80249ec:	0719      	lsls	r1, r3, #28
 80249ee:	d51d      	bpl.n	8024a2c <_puts_r+0x78>
 80249f0:	6923      	ldr	r3, [r4, #16]
 80249f2:	b1db      	cbz	r3, 8024a2c <_puts_r+0x78>
 80249f4:	3e01      	subs	r6, #1
 80249f6:	68a3      	ldr	r3, [r4, #8]
 80249f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80249fc:	3b01      	subs	r3, #1
 80249fe:	60a3      	str	r3, [r4, #8]
 8024a00:	bb39      	cbnz	r1, 8024a52 <_puts_r+0x9e>
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	da38      	bge.n	8024a78 <_puts_r+0xc4>
 8024a06:	4622      	mov	r2, r4
 8024a08:	210a      	movs	r1, #10
 8024a0a:	4628      	mov	r0, r5
 8024a0c:	f000 f97c 	bl	8024d08 <__swbuf_r>
 8024a10:	3001      	adds	r0, #1
 8024a12:	d011      	beq.n	8024a38 <_puts_r+0x84>
 8024a14:	250a      	movs	r5, #10
 8024a16:	e011      	b.n	8024a3c <_puts_r+0x88>
 8024a18:	4b1b      	ldr	r3, [pc, #108]	; (8024a88 <_puts_r+0xd4>)
 8024a1a:	429c      	cmp	r4, r3
 8024a1c:	d101      	bne.n	8024a22 <_puts_r+0x6e>
 8024a1e:	68ac      	ldr	r4, [r5, #8]
 8024a20:	e7da      	b.n	80249d8 <_puts_r+0x24>
 8024a22:	4b1a      	ldr	r3, [pc, #104]	; (8024a8c <_puts_r+0xd8>)
 8024a24:	429c      	cmp	r4, r3
 8024a26:	bf08      	it	eq
 8024a28:	68ec      	ldreq	r4, [r5, #12]
 8024a2a:	e7d5      	b.n	80249d8 <_puts_r+0x24>
 8024a2c:	4621      	mov	r1, r4
 8024a2e:	4628      	mov	r0, r5
 8024a30:	f000 f9bc 	bl	8024dac <__swsetup_r>
 8024a34:	2800      	cmp	r0, #0
 8024a36:	d0dd      	beq.n	80249f4 <_puts_r+0x40>
 8024a38:	f04f 35ff 	mov.w	r5, #4294967295
 8024a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024a3e:	07da      	lsls	r2, r3, #31
 8024a40:	d405      	bmi.n	8024a4e <_puts_r+0x9a>
 8024a42:	89a3      	ldrh	r3, [r4, #12]
 8024a44:	059b      	lsls	r3, r3, #22
 8024a46:	d402      	bmi.n	8024a4e <_puts_r+0x9a>
 8024a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024a4a:	f000 fc06 	bl	802525a <__retarget_lock_release_recursive>
 8024a4e:	4628      	mov	r0, r5
 8024a50:	bd70      	pop	{r4, r5, r6, pc}
 8024a52:	2b00      	cmp	r3, #0
 8024a54:	da04      	bge.n	8024a60 <_puts_r+0xac>
 8024a56:	69a2      	ldr	r2, [r4, #24]
 8024a58:	429a      	cmp	r2, r3
 8024a5a:	dc06      	bgt.n	8024a6a <_puts_r+0xb6>
 8024a5c:	290a      	cmp	r1, #10
 8024a5e:	d004      	beq.n	8024a6a <_puts_r+0xb6>
 8024a60:	6823      	ldr	r3, [r4, #0]
 8024a62:	1c5a      	adds	r2, r3, #1
 8024a64:	6022      	str	r2, [r4, #0]
 8024a66:	7019      	strb	r1, [r3, #0]
 8024a68:	e7c5      	b.n	80249f6 <_puts_r+0x42>
 8024a6a:	4622      	mov	r2, r4
 8024a6c:	4628      	mov	r0, r5
 8024a6e:	f000 f94b 	bl	8024d08 <__swbuf_r>
 8024a72:	3001      	adds	r0, #1
 8024a74:	d1bf      	bne.n	80249f6 <_puts_r+0x42>
 8024a76:	e7df      	b.n	8024a38 <_puts_r+0x84>
 8024a78:	6823      	ldr	r3, [r4, #0]
 8024a7a:	250a      	movs	r5, #10
 8024a7c:	1c5a      	adds	r2, r3, #1
 8024a7e:	6022      	str	r2, [r4, #0]
 8024a80:	701d      	strb	r5, [r3, #0]
 8024a82:	e7db      	b.n	8024a3c <_puts_r+0x88>
 8024a84:	0802b87c 	.word	0x0802b87c
 8024a88:	0802b89c 	.word	0x0802b89c
 8024a8c:	0802b85c 	.word	0x0802b85c

08024a90 <puts>:
 8024a90:	4b02      	ldr	r3, [pc, #8]	; (8024a9c <puts+0xc>)
 8024a92:	4601      	mov	r1, r0
 8024a94:	6818      	ldr	r0, [r3, #0]
 8024a96:	f7ff bf8d 	b.w	80249b4 <_puts_r>
 8024a9a:	bf00      	nop
 8024a9c:	20000140 	.word	0x20000140

08024aa0 <rand>:
 8024aa0:	4b16      	ldr	r3, [pc, #88]	; (8024afc <rand+0x5c>)
 8024aa2:	b510      	push	{r4, lr}
 8024aa4:	681c      	ldr	r4, [r3, #0]
 8024aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024aa8:	b9b3      	cbnz	r3, 8024ad8 <rand+0x38>
 8024aaa:	2018      	movs	r0, #24
 8024aac:	f7ff fe24 	bl	80246f8 <malloc>
 8024ab0:	63a0      	str	r0, [r4, #56]	; 0x38
 8024ab2:	b928      	cbnz	r0, 8024ac0 <rand+0x20>
 8024ab4:	4602      	mov	r2, r0
 8024ab6:	4b12      	ldr	r3, [pc, #72]	; (8024b00 <rand+0x60>)
 8024ab8:	4812      	ldr	r0, [pc, #72]	; (8024b04 <rand+0x64>)
 8024aba:	214e      	movs	r1, #78	; 0x4e
 8024abc:	f000 f9e4 	bl	8024e88 <__assert_func>
 8024ac0:	4a11      	ldr	r2, [pc, #68]	; (8024b08 <rand+0x68>)
 8024ac2:	4b12      	ldr	r3, [pc, #72]	; (8024b0c <rand+0x6c>)
 8024ac4:	e9c0 2300 	strd	r2, r3, [r0]
 8024ac8:	4b11      	ldr	r3, [pc, #68]	; (8024b10 <rand+0x70>)
 8024aca:	6083      	str	r3, [r0, #8]
 8024acc:	230b      	movs	r3, #11
 8024ace:	8183      	strh	r3, [r0, #12]
 8024ad0:	2201      	movs	r2, #1
 8024ad2:	2300      	movs	r3, #0
 8024ad4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8024ad8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8024ada:	4a0e      	ldr	r2, [pc, #56]	; (8024b14 <rand+0x74>)
 8024adc:	6920      	ldr	r0, [r4, #16]
 8024ade:	6963      	ldr	r3, [r4, #20]
 8024ae0:	490d      	ldr	r1, [pc, #52]	; (8024b18 <rand+0x78>)
 8024ae2:	4342      	muls	r2, r0
 8024ae4:	fb01 2203 	mla	r2, r1, r3, r2
 8024ae8:	fba0 0101 	umull	r0, r1, r0, r1
 8024aec:	1c43      	adds	r3, r0, #1
 8024aee:	eb42 0001 	adc.w	r0, r2, r1
 8024af2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8024af6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8024afa:	bd10      	pop	{r4, pc}
 8024afc:	20000140 	.word	0x20000140
 8024b00:	0802b7ac 	.word	0x0802b7ac
 8024b04:	0802b7c3 	.word	0x0802b7c3
 8024b08:	abcd330e 	.word	0xabcd330e
 8024b0c:	e66d1234 	.word	0xe66d1234
 8024b10:	0005deec 	.word	0x0005deec
 8024b14:	5851f42d 	.word	0x5851f42d
 8024b18:	4c957f2d 	.word	0x4c957f2d

08024b1c <_sbrk_r>:
 8024b1c:	b538      	push	{r3, r4, r5, lr}
 8024b1e:	4d06      	ldr	r5, [pc, #24]	; (8024b38 <_sbrk_r+0x1c>)
 8024b20:	2300      	movs	r3, #0
 8024b22:	4604      	mov	r4, r0
 8024b24:	4608      	mov	r0, r1
 8024b26:	602b      	str	r3, [r5, #0]
 8024b28:	f7f2 f876 	bl	8016c18 <_sbrk>
 8024b2c:	1c43      	adds	r3, r0, #1
 8024b2e:	d102      	bne.n	8024b36 <_sbrk_r+0x1a>
 8024b30:	682b      	ldr	r3, [r5, #0]
 8024b32:	b103      	cbz	r3, 8024b36 <_sbrk_r+0x1a>
 8024b34:	6023      	str	r3, [r4, #0]
 8024b36:	bd38      	pop	{r3, r4, r5, pc}
 8024b38:	200199e8 	.word	0x200199e8

08024b3c <setvbuf>:
 8024b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024b40:	461d      	mov	r5, r3
 8024b42:	4b5d      	ldr	r3, [pc, #372]	; (8024cb8 <setvbuf+0x17c>)
 8024b44:	681f      	ldr	r7, [r3, #0]
 8024b46:	4604      	mov	r4, r0
 8024b48:	460e      	mov	r6, r1
 8024b4a:	4690      	mov	r8, r2
 8024b4c:	b127      	cbz	r7, 8024b58 <setvbuf+0x1c>
 8024b4e:	69bb      	ldr	r3, [r7, #24]
 8024b50:	b913      	cbnz	r3, 8024b58 <setvbuf+0x1c>
 8024b52:	4638      	mov	r0, r7
 8024b54:	f000 fad0 	bl	80250f8 <__sinit>
 8024b58:	4b58      	ldr	r3, [pc, #352]	; (8024cbc <setvbuf+0x180>)
 8024b5a:	429c      	cmp	r4, r3
 8024b5c:	d167      	bne.n	8024c2e <setvbuf+0xf2>
 8024b5e:	687c      	ldr	r4, [r7, #4]
 8024b60:	f1b8 0f02 	cmp.w	r8, #2
 8024b64:	d006      	beq.n	8024b74 <setvbuf+0x38>
 8024b66:	f1b8 0f01 	cmp.w	r8, #1
 8024b6a:	f200 809f 	bhi.w	8024cac <setvbuf+0x170>
 8024b6e:	2d00      	cmp	r5, #0
 8024b70:	f2c0 809c 	blt.w	8024cac <setvbuf+0x170>
 8024b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024b76:	07db      	lsls	r3, r3, #31
 8024b78:	d405      	bmi.n	8024b86 <setvbuf+0x4a>
 8024b7a:	89a3      	ldrh	r3, [r4, #12]
 8024b7c:	0598      	lsls	r0, r3, #22
 8024b7e:	d402      	bmi.n	8024b86 <setvbuf+0x4a>
 8024b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024b82:	f000 fb69 	bl	8025258 <__retarget_lock_acquire_recursive>
 8024b86:	4621      	mov	r1, r4
 8024b88:	4638      	mov	r0, r7
 8024b8a:	f000 fa21 	bl	8024fd0 <_fflush_r>
 8024b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024b90:	b141      	cbz	r1, 8024ba4 <setvbuf+0x68>
 8024b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024b96:	4299      	cmp	r1, r3
 8024b98:	d002      	beq.n	8024ba0 <setvbuf+0x64>
 8024b9a:	4638      	mov	r0, r7
 8024b9c:	f7ff fdfc 	bl	8024798 <_free_r>
 8024ba0:	2300      	movs	r3, #0
 8024ba2:	6363      	str	r3, [r4, #52]	; 0x34
 8024ba4:	2300      	movs	r3, #0
 8024ba6:	61a3      	str	r3, [r4, #24]
 8024ba8:	6063      	str	r3, [r4, #4]
 8024baa:	89a3      	ldrh	r3, [r4, #12]
 8024bac:	0619      	lsls	r1, r3, #24
 8024bae:	d503      	bpl.n	8024bb8 <setvbuf+0x7c>
 8024bb0:	6921      	ldr	r1, [r4, #16]
 8024bb2:	4638      	mov	r0, r7
 8024bb4:	f7ff fdf0 	bl	8024798 <_free_r>
 8024bb8:	89a3      	ldrh	r3, [r4, #12]
 8024bba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8024bbe:	f023 0303 	bic.w	r3, r3, #3
 8024bc2:	f1b8 0f02 	cmp.w	r8, #2
 8024bc6:	81a3      	strh	r3, [r4, #12]
 8024bc8:	d06c      	beq.n	8024ca4 <setvbuf+0x168>
 8024bca:	ab01      	add	r3, sp, #4
 8024bcc:	466a      	mov	r2, sp
 8024bce:	4621      	mov	r1, r4
 8024bd0:	4638      	mov	r0, r7
 8024bd2:	f000 fb43 	bl	802525c <__swhatbuf_r>
 8024bd6:	89a3      	ldrh	r3, [r4, #12]
 8024bd8:	4318      	orrs	r0, r3
 8024bda:	81a0      	strh	r0, [r4, #12]
 8024bdc:	2d00      	cmp	r5, #0
 8024bde:	d130      	bne.n	8024c42 <setvbuf+0x106>
 8024be0:	9d00      	ldr	r5, [sp, #0]
 8024be2:	4628      	mov	r0, r5
 8024be4:	f7ff fd88 	bl	80246f8 <malloc>
 8024be8:	4606      	mov	r6, r0
 8024bea:	2800      	cmp	r0, #0
 8024bec:	d155      	bne.n	8024c9a <setvbuf+0x15e>
 8024bee:	f8dd 9000 	ldr.w	r9, [sp]
 8024bf2:	45a9      	cmp	r9, r5
 8024bf4:	d14a      	bne.n	8024c8c <setvbuf+0x150>
 8024bf6:	f04f 35ff 	mov.w	r5, #4294967295
 8024bfa:	2200      	movs	r2, #0
 8024bfc:	60a2      	str	r2, [r4, #8]
 8024bfe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8024c02:	6022      	str	r2, [r4, #0]
 8024c04:	6122      	str	r2, [r4, #16]
 8024c06:	2201      	movs	r2, #1
 8024c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024c0c:	6162      	str	r2, [r4, #20]
 8024c0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024c10:	f043 0302 	orr.w	r3, r3, #2
 8024c14:	07d2      	lsls	r2, r2, #31
 8024c16:	81a3      	strh	r3, [r4, #12]
 8024c18:	d405      	bmi.n	8024c26 <setvbuf+0xea>
 8024c1a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8024c1e:	d102      	bne.n	8024c26 <setvbuf+0xea>
 8024c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024c22:	f000 fb1a 	bl	802525a <__retarget_lock_release_recursive>
 8024c26:	4628      	mov	r0, r5
 8024c28:	b003      	add	sp, #12
 8024c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024c2e:	4b24      	ldr	r3, [pc, #144]	; (8024cc0 <setvbuf+0x184>)
 8024c30:	429c      	cmp	r4, r3
 8024c32:	d101      	bne.n	8024c38 <setvbuf+0xfc>
 8024c34:	68bc      	ldr	r4, [r7, #8]
 8024c36:	e793      	b.n	8024b60 <setvbuf+0x24>
 8024c38:	4b22      	ldr	r3, [pc, #136]	; (8024cc4 <setvbuf+0x188>)
 8024c3a:	429c      	cmp	r4, r3
 8024c3c:	bf08      	it	eq
 8024c3e:	68fc      	ldreq	r4, [r7, #12]
 8024c40:	e78e      	b.n	8024b60 <setvbuf+0x24>
 8024c42:	2e00      	cmp	r6, #0
 8024c44:	d0cd      	beq.n	8024be2 <setvbuf+0xa6>
 8024c46:	69bb      	ldr	r3, [r7, #24]
 8024c48:	b913      	cbnz	r3, 8024c50 <setvbuf+0x114>
 8024c4a:	4638      	mov	r0, r7
 8024c4c:	f000 fa54 	bl	80250f8 <__sinit>
 8024c50:	f1b8 0f01 	cmp.w	r8, #1
 8024c54:	bf08      	it	eq
 8024c56:	89a3      	ldrheq	r3, [r4, #12]
 8024c58:	6026      	str	r6, [r4, #0]
 8024c5a:	bf04      	itt	eq
 8024c5c:	f043 0301 	orreq.w	r3, r3, #1
 8024c60:	81a3      	strheq	r3, [r4, #12]
 8024c62:	89a2      	ldrh	r2, [r4, #12]
 8024c64:	f012 0308 	ands.w	r3, r2, #8
 8024c68:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8024c6c:	d01c      	beq.n	8024ca8 <setvbuf+0x16c>
 8024c6e:	07d3      	lsls	r3, r2, #31
 8024c70:	bf41      	itttt	mi
 8024c72:	2300      	movmi	r3, #0
 8024c74:	426d      	negmi	r5, r5
 8024c76:	60a3      	strmi	r3, [r4, #8]
 8024c78:	61a5      	strmi	r5, [r4, #24]
 8024c7a:	bf58      	it	pl
 8024c7c:	60a5      	strpl	r5, [r4, #8]
 8024c7e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8024c80:	f015 0501 	ands.w	r5, r5, #1
 8024c84:	d115      	bne.n	8024cb2 <setvbuf+0x176>
 8024c86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8024c8a:	e7c8      	b.n	8024c1e <setvbuf+0xe2>
 8024c8c:	4648      	mov	r0, r9
 8024c8e:	f7ff fd33 	bl	80246f8 <malloc>
 8024c92:	4606      	mov	r6, r0
 8024c94:	2800      	cmp	r0, #0
 8024c96:	d0ae      	beq.n	8024bf6 <setvbuf+0xba>
 8024c98:	464d      	mov	r5, r9
 8024c9a:	89a3      	ldrh	r3, [r4, #12]
 8024c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024ca0:	81a3      	strh	r3, [r4, #12]
 8024ca2:	e7d0      	b.n	8024c46 <setvbuf+0x10a>
 8024ca4:	2500      	movs	r5, #0
 8024ca6:	e7a8      	b.n	8024bfa <setvbuf+0xbe>
 8024ca8:	60a3      	str	r3, [r4, #8]
 8024caa:	e7e8      	b.n	8024c7e <setvbuf+0x142>
 8024cac:	f04f 35ff 	mov.w	r5, #4294967295
 8024cb0:	e7b9      	b.n	8024c26 <setvbuf+0xea>
 8024cb2:	2500      	movs	r5, #0
 8024cb4:	e7b7      	b.n	8024c26 <setvbuf+0xea>
 8024cb6:	bf00      	nop
 8024cb8:	20000140 	.word	0x20000140
 8024cbc:	0802b87c 	.word	0x0802b87c
 8024cc0:	0802b89c 	.word	0x0802b89c
 8024cc4:	0802b85c 	.word	0x0802b85c

08024cc8 <siprintf>:
 8024cc8:	b40e      	push	{r1, r2, r3}
 8024cca:	b500      	push	{lr}
 8024ccc:	b09c      	sub	sp, #112	; 0x70
 8024cce:	ab1d      	add	r3, sp, #116	; 0x74
 8024cd0:	9002      	str	r0, [sp, #8]
 8024cd2:	9006      	str	r0, [sp, #24]
 8024cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024cd8:	4809      	ldr	r0, [pc, #36]	; (8024d00 <siprintf+0x38>)
 8024cda:	9107      	str	r1, [sp, #28]
 8024cdc:	9104      	str	r1, [sp, #16]
 8024cde:	4909      	ldr	r1, [pc, #36]	; (8024d04 <siprintf+0x3c>)
 8024ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8024ce4:	9105      	str	r1, [sp, #20]
 8024ce6:	6800      	ldr	r0, [r0, #0]
 8024ce8:	9301      	str	r3, [sp, #4]
 8024cea:	a902      	add	r1, sp, #8
 8024cec:	f000 fb84 	bl	80253f8 <_svfiprintf_r>
 8024cf0:	9b02      	ldr	r3, [sp, #8]
 8024cf2:	2200      	movs	r2, #0
 8024cf4:	701a      	strb	r2, [r3, #0]
 8024cf6:	b01c      	add	sp, #112	; 0x70
 8024cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8024cfc:	b003      	add	sp, #12
 8024cfe:	4770      	bx	lr
 8024d00:	20000140 	.word	0x20000140
 8024d04:	ffff0208 	.word	0xffff0208

08024d08 <__swbuf_r>:
 8024d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d0a:	460e      	mov	r6, r1
 8024d0c:	4614      	mov	r4, r2
 8024d0e:	4605      	mov	r5, r0
 8024d10:	b118      	cbz	r0, 8024d1a <__swbuf_r+0x12>
 8024d12:	6983      	ldr	r3, [r0, #24]
 8024d14:	b90b      	cbnz	r3, 8024d1a <__swbuf_r+0x12>
 8024d16:	f000 f9ef 	bl	80250f8 <__sinit>
 8024d1a:	4b21      	ldr	r3, [pc, #132]	; (8024da0 <__swbuf_r+0x98>)
 8024d1c:	429c      	cmp	r4, r3
 8024d1e:	d12b      	bne.n	8024d78 <__swbuf_r+0x70>
 8024d20:	686c      	ldr	r4, [r5, #4]
 8024d22:	69a3      	ldr	r3, [r4, #24]
 8024d24:	60a3      	str	r3, [r4, #8]
 8024d26:	89a3      	ldrh	r3, [r4, #12]
 8024d28:	071a      	lsls	r2, r3, #28
 8024d2a:	d52f      	bpl.n	8024d8c <__swbuf_r+0x84>
 8024d2c:	6923      	ldr	r3, [r4, #16]
 8024d2e:	b36b      	cbz	r3, 8024d8c <__swbuf_r+0x84>
 8024d30:	6923      	ldr	r3, [r4, #16]
 8024d32:	6820      	ldr	r0, [r4, #0]
 8024d34:	1ac0      	subs	r0, r0, r3
 8024d36:	6963      	ldr	r3, [r4, #20]
 8024d38:	b2f6      	uxtb	r6, r6
 8024d3a:	4283      	cmp	r3, r0
 8024d3c:	4637      	mov	r7, r6
 8024d3e:	dc04      	bgt.n	8024d4a <__swbuf_r+0x42>
 8024d40:	4621      	mov	r1, r4
 8024d42:	4628      	mov	r0, r5
 8024d44:	f000 f944 	bl	8024fd0 <_fflush_r>
 8024d48:	bb30      	cbnz	r0, 8024d98 <__swbuf_r+0x90>
 8024d4a:	68a3      	ldr	r3, [r4, #8]
 8024d4c:	3b01      	subs	r3, #1
 8024d4e:	60a3      	str	r3, [r4, #8]
 8024d50:	6823      	ldr	r3, [r4, #0]
 8024d52:	1c5a      	adds	r2, r3, #1
 8024d54:	6022      	str	r2, [r4, #0]
 8024d56:	701e      	strb	r6, [r3, #0]
 8024d58:	6963      	ldr	r3, [r4, #20]
 8024d5a:	3001      	adds	r0, #1
 8024d5c:	4283      	cmp	r3, r0
 8024d5e:	d004      	beq.n	8024d6a <__swbuf_r+0x62>
 8024d60:	89a3      	ldrh	r3, [r4, #12]
 8024d62:	07db      	lsls	r3, r3, #31
 8024d64:	d506      	bpl.n	8024d74 <__swbuf_r+0x6c>
 8024d66:	2e0a      	cmp	r6, #10
 8024d68:	d104      	bne.n	8024d74 <__swbuf_r+0x6c>
 8024d6a:	4621      	mov	r1, r4
 8024d6c:	4628      	mov	r0, r5
 8024d6e:	f000 f92f 	bl	8024fd0 <_fflush_r>
 8024d72:	b988      	cbnz	r0, 8024d98 <__swbuf_r+0x90>
 8024d74:	4638      	mov	r0, r7
 8024d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d78:	4b0a      	ldr	r3, [pc, #40]	; (8024da4 <__swbuf_r+0x9c>)
 8024d7a:	429c      	cmp	r4, r3
 8024d7c:	d101      	bne.n	8024d82 <__swbuf_r+0x7a>
 8024d7e:	68ac      	ldr	r4, [r5, #8]
 8024d80:	e7cf      	b.n	8024d22 <__swbuf_r+0x1a>
 8024d82:	4b09      	ldr	r3, [pc, #36]	; (8024da8 <__swbuf_r+0xa0>)
 8024d84:	429c      	cmp	r4, r3
 8024d86:	bf08      	it	eq
 8024d88:	68ec      	ldreq	r4, [r5, #12]
 8024d8a:	e7ca      	b.n	8024d22 <__swbuf_r+0x1a>
 8024d8c:	4621      	mov	r1, r4
 8024d8e:	4628      	mov	r0, r5
 8024d90:	f000 f80c 	bl	8024dac <__swsetup_r>
 8024d94:	2800      	cmp	r0, #0
 8024d96:	d0cb      	beq.n	8024d30 <__swbuf_r+0x28>
 8024d98:	f04f 37ff 	mov.w	r7, #4294967295
 8024d9c:	e7ea      	b.n	8024d74 <__swbuf_r+0x6c>
 8024d9e:	bf00      	nop
 8024da0:	0802b87c 	.word	0x0802b87c
 8024da4:	0802b89c 	.word	0x0802b89c
 8024da8:	0802b85c 	.word	0x0802b85c

08024dac <__swsetup_r>:
 8024dac:	4b32      	ldr	r3, [pc, #200]	; (8024e78 <__swsetup_r+0xcc>)
 8024dae:	b570      	push	{r4, r5, r6, lr}
 8024db0:	681d      	ldr	r5, [r3, #0]
 8024db2:	4606      	mov	r6, r0
 8024db4:	460c      	mov	r4, r1
 8024db6:	b125      	cbz	r5, 8024dc2 <__swsetup_r+0x16>
 8024db8:	69ab      	ldr	r3, [r5, #24]
 8024dba:	b913      	cbnz	r3, 8024dc2 <__swsetup_r+0x16>
 8024dbc:	4628      	mov	r0, r5
 8024dbe:	f000 f99b 	bl	80250f8 <__sinit>
 8024dc2:	4b2e      	ldr	r3, [pc, #184]	; (8024e7c <__swsetup_r+0xd0>)
 8024dc4:	429c      	cmp	r4, r3
 8024dc6:	d10f      	bne.n	8024de8 <__swsetup_r+0x3c>
 8024dc8:	686c      	ldr	r4, [r5, #4]
 8024dca:	89a3      	ldrh	r3, [r4, #12]
 8024dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024dd0:	0719      	lsls	r1, r3, #28
 8024dd2:	d42c      	bmi.n	8024e2e <__swsetup_r+0x82>
 8024dd4:	06dd      	lsls	r5, r3, #27
 8024dd6:	d411      	bmi.n	8024dfc <__swsetup_r+0x50>
 8024dd8:	2309      	movs	r3, #9
 8024dda:	6033      	str	r3, [r6, #0]
 8024ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024de0:	81a3      	strh	r3, [r4, #12]
 8024de2:	f04f 30ff 	mov.w	r0, #4294967295
 8024de6:	e03e      	b.n	8024e66 <__swsetup_r+0xba>
 8024de8:	4b25      	ldr	r3, [pc, #148]	; (8024e80 <__swsetup_r+0xd4>)
 8024dea:	429c      	cmp	r4, r3
 8024dec:	d101      	bne.n	8024df2 <__swsetup_r+0x46>
 8024dee:	68ac      	ldr	r4, [r5, #8]
 8024df0:	e7eb      	b.n	8024dca <__swsetup_r+0x1e>
 8024df2:	4b24      	ldr	r3, [pc, #144]	; (8024e84 <__swsetup_r+0xd8>)
 8024df4:	429c      	cmp	r4, r3
 8024df6:	bf08      	it	eq
 8024df8:	68ec      	ldreq	r4, [r5, #12]
 8024dfa:	e7e6      	b.n	8024dca <__swsetup_r+0x1e>
 8024dfc:	0758      	lsls	r0, r3, #29
 8024dfe:	d512      	bpl.n	8024e26 <__swsetup_r+0x7a>
 8024e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024e02:	b141      	cbz	r1, 8024e16 <__swsetup_r+0x6a>
 8024e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024e08:	4299      	cmp	r1, r3
 8024e0a:	d002      	beq.n	8024e12 <__swsetup_r+0x66>
 8024e0c:	4630      	mov	r0, r6
 8024e0e:	f7ff fcc3 	bl	8024798 <_free_r>
 8024e12:	2300      	movs	r3, #0
 8024e14:	6363      	str	r3, [r4, #52]	; 0x34
 8024e16:	89a3      	ldrh	r3, [r4, #12]
 8024e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024e1c:	81a3      	strh	r3, [r4, #12]
 8024e1e:	2300      	movs	r3, #0
 8024e20:	6063      	str	r3, [r4, #4]
 8024e22:	6923      	ldr	r3, [r4, #16]
 8024e24:	6023      	str	r3, [r4, #0]
 8024e26:	89a3      	ldrh	r3, [r4, #12]
 8024e28:	f043 0308 	orr.w	r3, r3, #8
 8024e2c:	81a3      	strh	r3, [r4, #12]
 8024e2e:	6923      	ldr	r3, [r4, #16]
 8024e30:	b94b      	cbnz	r3, 8024e46 <__swsetup_r+0x9a>
 8024e32:	89a3      	ldrh	r3, [r4, #12]
 8024e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024e3c:	d003      	beq.n	8024e46 <__swsetup_r+0x9a>
 8024e3e:	4621      	mov	r1, r4
 8024e40:	4630      	mov	r0, r6
 8024e42:	f000 fa31 	bl	80252a8 <__smakebuf_r>
 8024e46:	89a0      	ldrh	r0, [r4, #12]
 8024e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024e4c:	f010 0301 	ands.w	r3, r0, #1
 8024e50:	d00a      	beq.n	8024e68 <__swsetup_r+0xbc>
 8024e52:	2300      	movs	r3, #0
 8024e54:	60a3      	str	r3, [r4, #8]
 8024e56:	6963      	ldr	r3, [r4, #20]
 8024e58:	425b      	negs	r3, r3
 8024e5a:	61a3      	str	r3, [r4, #24]
 8024e5c:	6923      	ldr	r3, [r4, #16]
 8024e5e:	b943      	cbnz	r3, 8024e72 <__swsetup_r+0xc6>
 8024e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024e64:	d1ba      	bne.n	8024ddc <__swsetup_r+0x30>
 8024e66:	bd70      	pop	{r4, r5, r6, pc}
 8024e68:	0781      	lsls	r1, r0, #30
 8024e6a:	bf58      	it	pl
 8024e6c:	6963      	ldrpl	r3, [r4, #20]
 8024e6e:	60a3      	str	r3, [r4, #8]
 8024e70:	e7f4      	b.n	8024e5c <__swsetup_r+0xb0>
 8024e72:	2000      	movs	r0, #0
 8024e74:	e7f7      	b.n	8024e66 <__swsetup_r+0xba>
 8024e76:	bf00      	nop
 8024e78:	20000140 	.word	0x20000140
 8024e7c:	0802b87c 	.word	0x0802b87c
 8024e80:	0802b89c 	.word	0x0802b89c
 8024e84:	0802b85c 	.word	0x0802b85c

08024e88 <__assert_func>:
 8024e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024e8a:	4614      	mov	r4, r2
 8024e8c:	461a      	mov	r2, r3
 8024e8e:	4b09      	ldr	r3, [pc, #36]	; (8024eb4 <__assert_func+0x2c>)
 8024e90:	681b      	ldr	r3, [r3, #0]
 8024e92:	4605      	mov	r5, r0
 8024e94:	68d8      	ldr	r0, [r3, #12]
 8024e96:	b14c      	cbz	r4, 8024eac <__assert_func+0x24>
 8024e98:	4b07      	ldr	r3, [pc, #28]	; (8024eb8 <__assert_func+0x30>)
 8024e9a:	9100      	str	r1, [sp, #0]
 8024e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024ea0:	4906      	ldr	r1, [pc, #24]	; (8024ebc <__assert_func+0x34>)
 8024ea2:	462b      	mov	r3, r5
 8024ea4:	f000 f9a6 	bl	80251f4 <fiprintf>
 8024ea8:	f000 ff32 	bl	8025d10 <abort>
 8024eac:	4b04      	ldr	r3, [pc, #16]	; (8024ec0 <__assert_func+0x38>)
 8024eae:	461c      	mov	r4, r3
 8024eb0:	e7f3      	b.n	8024e9a <__assert_func+0x12>
 8024eb2:	bf00      	nop
 8024eb4:	20000140 	.word	0x20000140
 8024eb8:	0802b81e 	.word	0x0802b81e
 8024ebc:	0802b82b 	.word	0x0802b82b
 8024ec0:	0802b859 	.word	0x0802b859

08024ec4 <__sflush_r>:
 8024ec4:	898a      	ldrh	r2, [r1, #12]
 8024ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024eca:	4605      	mov	r5, r0
 8024ecc:	0710      	lsls	r0, r2, #28
 8024ece:	460c      	mov	r4, r1
 8024ed0:	d458      	bmi.n	8024f84 <__sflush_r+0xc0>
 8024ed2:	684b      	ldr	r3, [r1, #4]
 8024ed4:	2b00      	cmp	r3, #0
 8024ed6:	dc05      	bgt.n	8024ee4 <__sflush_r+0x20>
 8024ed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024eda:	2b00      	cmp	r3, #0
 8024edc:	dc02      	bgt.n	8024ee4 <__sflush_r+0x20>
 8024ede:	2000      	movs	r0, #0
 8024ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024ee6:	2e00      	cmp	r6, #0
 8024ee8:	d0f9      	beq.n	8024ede <__sflush_r+0x1a>
 8024eea:	2300      	movs	r3, #0
 8024eec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024ef0:	682f      	ldr	r7, [r5, #0]
 8024ef2:	602b      	str	r3, [r5, #0]
 8024ef4:	d032      	beq.n	8024f5c <__sflush_r+0x98>
 8024ef6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024ef8:	89a3      	ldrh	r3, [r4, #12]
 8024efa:	075a      	lsls	r2, r3, #29
 8024efc:	d505      	bpl.n	8024f0a <__sflush_r+0x46>
 8024efe:	6863      	ldr	r3, [r4, #4]
 8024f00:	1ac0      	subs	r0, r0, r3
 8024f02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024f04:	b10b      	cbz	r3, 8024f0a <__sflush_r+0x46>
 8024f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024f08:	1ac0      	subs	r0, r0, r3
 8024f0a:	2300      	movs	r3, #0
 8024f0c:	4602      	mov	r2, r0
 8024f0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024f10:	6a21      	ldr	r1, [r4, #32]
 8024f12:	4628      	mov	r0, r5
 8024f14:	47b0      	blx	r6
 8024f16:	1c43      	adds	r3, r0, #1
 8024f18:	89a3      	ldrh	r3, [r4, #12]
 8024f1a:	d106      	bne.n	8024f2a <__sflush_r+0x66>
 8024f1c:	6829      	ldr	r1, [r5, #0]
 8024f1e:	291d      	cmp	r1, #29
 8024f20:	d82c      	bhi.n	8024f7c <__sflush_r+0xb8>
 8024f22:	4a2a      	ldr	r2, [pc, #168]	; (8024fcc <__sflush_r+0x108>)
 8024f24:	40ca      	lsrs	r2, r1
 8024f26:	07d6      	lsls	r6, r2, #31
 8024f28:	d528      	bpl.n	8024f7c <__sflush_r+0xb8>
 8024f2a:	2200      	movs	r2, #0
 8024f2c:	6062      	str	r2, [r4, #4]
 8024f2e:	04d9      	lsls	r1, r3, #19
 8024f30:	6922      	ldr	r2, [r4, #16]
 8024f32:	6022      	str	r2, [r4, #0]
 8024f34:	d504      	bpl.n	8024f40 <__sflush_r+0x7c>
 8024f36:	1c42      	adds	r2, r0, #1
 8024f38:	d101      	bne.n	8024f3e <__sflush_r+0x7a>
 8024f3a:	682b      	ldr	r3, [r5, #0]
 8024f3c:	b903      	cbnz	r3, 8024f40 <__sflush_r+0x7c>
 8024f3e:	6560      	str	r0, [r4, #84]	; 0x54
 8024f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024f42:	602f      	str	r7, [r5, #0]
 8024f44:	2900      	cmp	r1, #0
 8024f46:	d0ca      	beq.n	8024ede <__sflush_r+0x1a>
 8024f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024f4c:	4299      	cmp	r1, r3
 8024f4e:	d002      	beq.n	8024f56 <__sflush_r+0x92>
 8024f50:	4628      	mov	r0, r5
 8024f52:	f7ff fc21 	bl	8024798 <_free_r>
 8024f56:	2000      	movs	r0, #0
 8024f58:	6360      	str	r0, [r4, #52]	; 0x34
 8024f5a:	e7c1      	b.n	8024ee0 <__sflush_r+0x1c>
 8024f5c:	6a21      	ldr	r1, [r4, #32]
 8024f5e:	2301      	movs	r3, #1
 8024f60:	4628      	mov	r0, r5
 8024f62:	47b0      	blx	r6
 8024f64:	1c41      	adds	r1, r0, #1
 8024f66:	d1c7      	bne.n	8024ef8 <__sflush_r+0x34>
 8024f68:	682b      	ldr	r3, [r5, #0]
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	d0c4      	beq.n	8024ef8 <__sflush_r+0x34>
 8024f6e:	2b1d      	cmp	r3, #29
 8024f70:	d001      	beq.n	8024f76 <__sflush_r+0xb2>
 8024f72:	2b16      	cmp	r3, #22
 8024f74:	d101      	bne.n	8024f7a <__sflush_r+0xb6>
 8024f76:	602f      	str	r7, [r5, #0]
 8024f78:	e7b1      	b.n	8024ede <__sflush_r+0x1a>
 8024f7a:	89a3      	ldrh	r3, [r4, #12]
 8024f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024f80:	81a3      	strh	r3, [r4, #12]
 8024f82:	e7ad      	b.n	8024ee0 <__sflush_r+0x1c>
 8024f84:	690f      	ldr	r7, [r1, #16]
 8024f86:	2f00      	cmp	r7, #0
 8024f88:	d0a9      	beq.n	8024ede <__sflush_r+0x1a>
 8024f8a:	0793      	lsls	r3, r2, #30
 8024f8c:	680e      	ldr	r6, [r1, #0]
 8024f8e:	bf08      	it	eq
 8024f90:	694b      	ldreq	r3, [r1, #20]
 8024f92:	600f      	str	r7, [r1, #0]
 8024f94:	bf18      	it	ne
 8024f96:	2300      	movne	r3, #0
 8024f98:	eba6 0807 	sub.w	r8, r6, r7
 8024f9c:	608b      	str	r3, [r1, #8]
 8024f9e:	f1b8 0f00 	cmp.w	r8, #0
 8024fa2:	dd9c      	ble.n	8024ede <__sflush_r+0x1a>
 8024fa4:	6a21      	ldr	r1, [r4, #32]
 8024fa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024fa8:	4643      	mov	r3, r8
 8024faa:	463a      	mov	r2, r7
 8024fac:	4628      	mov	r0, r5
 8024fae:	47b0      	blx	r6
 8024fb0:	2800      	cmp	r0, #0
 8024fb2:	dc06      	bgt.n	8024fc2 <__sflush_r+0xfe>
 8024fb4:	89a3      	ldrh	r3, [r4, #12]
 8024fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024fba:	81a3      	strh	r3, [r4, #12]
 8024fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8024fc0:	e78e      	b.n	8024ee0 <__sflush_r+0x1c>
 8024fc2:	4407      	add	r7, r0
 8024fc4:	eba8 0800 	sub.w	r8, r8, r0
 8024fc8:	e7e9      	b.n	8024f9e <__sflush_r+0xda>
 8024fca:	bf00      	nop
 8024fcc:	20400001 	.word	0x20400001

08024fd0 <_fflush_r>:
 8024fd0:	b538      	push	{r3, r4, r5, lr}
 8024fd2:	690b      	ldr	r3, [r1, #16]
 8024fd4:	4605      	mov	r5, r0
 8024fd6:	460c      	mov	r4, r1
 8024fd8:	b913      	cbnz	r3, 8024fe0 <_fflush_r+0x10>
 8024fda:	2500      	movs	r5, #0
 8024fdc:	4628      	mov	r0, r5
 8024fde:	bd38      	pop	{r3, r4, r5, pc}
 8024fe0:	b118      	cbz	r0, 8024fea <_fflush_r+0x1a>
 8024fe2:	6983      	ldr	r3, [r0, #24]
 8024fe4:	b90b      	cbnz	r3, 8024fea <_fflush_r+0x1a>
 8024fe6:	f000 f887 	bl	80250f8 <__sinit>
 8024fea:	4b14      	ldr	r3, [pc, #80]	; (802503c <_fflush_r+0x6c>)
 8024fec:	429c      	cmp	r4, r3
 8024fee:	d11b      	bne.n	8025028 <_fflush_r+0x58>
 8024ff0:	686c      	ldr	r4, [r5, #4]
 8024ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ff6:	2b00      	cmp	r3, #0
 8024ff8:	d0ef      	beq.n	8024fda <_fflush_r+0xa>
 8024ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024ffc:	07d0      	lsls	r0, r2, #31
 8024ffe:	d404      	bmi.n	802500a <_fflush_r+0x3a>
 8025000:	0599      	lsls	r1, r3, #22
 8025002:	d402      	bmi.n	802500a <_fflush_r+0x3a>
 8025004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025006:	f000 f927 	bl	8025258 <__retarget_lock_acquire_recursive>
 802500a:	4628      	mov	r0, r5
 802500c:	4621      	mov	r1, r4
 802500e:	f7ff ff59 	bl	8024ec4 <__sflush_r>
 8025012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025014:	07da      	lsls	r2, r3, #31
 8025016:	4605      	mov	r5, r0
 8025018:	d4e0      	bmi.n	8024fdc <_fflush_r+0xc>
 802501a:	89a3      	ldrh	r3, [r4, #12]
 802501c:	059b      	lsls	r3, r3, #22
 802501e:	d4dd      	bmi.n	8024fdc <_fflush_r+0xc>
 8025020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025022:	f000 f91a 	bl	802525a <__retarget_lock_release_recursive>
 8025026:	e7d9      	b.n	8024fdc <_fflush_r+0xc>
 8025028:	4b05      	ldr	r3, [pc, #20]	; (8025040 <_fflush_r+0x70>)
 802502a:	429c      	cmp	r4, r3
 802502c:	d101      	bne.n	8025032 <_fflush_r+0x62>
 802502e:	68ac      	ldr	r4, [r5, #8]
 8025030:	e7df      	b.n	8024ff2 <_fflush_r+0x22>
 8025032:	4b04      	ldr	r3, [pc, #16]	; (8025044 <_fflush_r+0x74>)
 8025034:	429c      	cmp	r4, r3
 8025036:	bf08      	it	eq
 8025038:	68ec      	ldreq	r4, [r5, #12]
 802503a:	e7da      	b.n	8024ff2 <_fflush_r+0x22>
 802503c:	0802b87c 	.word	0x0802b87c
 8025040:	0802b89c 	.word	0x0802b89c
 8025044:	0802b85c 	.word	0x0802b85c

08025048 <std>:
 8025048:	2300      	movs	r3, #0
 802504a:	b510      	push	{r4, lr}
 802504c:	4604      	mov	r4, r0
 802504e:	e9c0 3300 	strd	r3, r3, [r0]
 8025052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025056:	6083      	str	r3, [r0, #8]
 8025058:	8181      	strh	r1, [r0, #12]
 802505a:	6643      	str	r3, [r0, #100]	; 0x64
 802505c:	81c2      	strh	r2, [r0, #14]
 802505e:	6183      	str	r3, [r0, #24]
 8025060:	4619      	mov	r1, r3
 8025062:	2208      	movs	r2, #8
 8025064:	305c      	adds	r0, #92	; 0x5c
 8025066:	f7ff fb8f 	bl	8024788 <memset>
 802506a:	4b05      	ldr	r3, [pc, #20]	; (8025080 <std+0x38>)
 802506c:	6263      	str	r3, [r4, #36]	; 0x24
 802506e:	4b05      	ldr	r3, [pc, #20]	; (8025084 <std+0x3c>)
 8025070:	62a3      	str	r3, [r4, #40]	; 0x28
 8025072:	4b05      	ldr	r3, [pc, #20]	; (8025088 <std+0x40>)
 8025074:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025076:	4b05      	ldr	r3, [pc, #20]	; (802508c <std+0x44>)
 8025078:	6224      	str	r4, [r4, #32]
 802507a:	6323      	str	r3, [r4, #48]	; 0x30
 802507c:	bd10      	pop	{r4, pc}
 802507e:	bf00      	nop
 8025080:	08025c65 	.word	0x08025c65
 8025084:	08025c87 	.word	0x08025c87
 8025088:	08025cbf 	.word	0x08025cbf
 802508c:	08025ce3 	.word	0x08025ce3

08025090 <_cleanup_r>:
 8025090:	4901      	ldr	r1, [pc, #4]	; (8025098 <_cleanup_r+0x8>)
 8025092:	f000 b8c1 	b.w	8025218 <_fwalk_reent>
 8025096:	bf00      	nop
 8025098:	08024fd1 	.word	0x08024fd1

0802509c <__sfmoreglue>:
 802509c:	b570      	push	{r4, r5, r6, lr}
 802509e:	2268      	movs	r2, #104	; 0x68
 80250a0:	1e4d      	subs	r5, r1, #1
 80250a2:	4355      	muls	r5, r2
 80250a4:	460e      	mov	r6, r1
 80250a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80250aa:	f7ff fbe1 	bl	8024870 <_malloc_r>
 80250ae:	4604      	mov	r4, r0
 80250b0:	b140      	cbz	r0, 80250c4 <__sfmoreglue+0x28>
 80250b2:	2100      	movs	r1, #0
 80250b4:	e9c0 1600 	strd	r1, r6, [r0]
 80250b8:	300c      	adds	r0, #12
 80250ba:	60a0      	str	r0, [r4, #8]
 80250bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80250c0:	f7ff fb62 	bl	8024788 <memset>
 80250c4:	4620      	mov	r0, r4
 80250c6:	bd70      	pop	{r4, r5, r6, pc}

080250c8 <__sfp_lock_acquire>:
 80250c8:	4801      	ldr	r0, [pc, #4]	; (80250d0 <__sfp_lock_acquire+0x8>)
 80250ca:	f000 b8c5 	b.w	8025258 <__retarget_lock_acquire_recursive>
 80250ce:	bf00      	nop
 80250d0:	200199ed 	.word	0x200199ed

080250d4 <__sfp_lock_release>:
 80250d4:	4801      	ldr	r0, [pc, #4]	; (80250dc <__sfp_lock_release+0x8>)
 80250d6:	f000 b8c0 	b.w	802525a <__retarget_lock_release_recursive>
 80250da:	bf00      	nop
 80250dc:	200199ed 	.word	0x200199ed

080250e0 <__sinit_lock_acquire>:
 80250e0:	4801      	ldr	r0, [pc, #4]	; (80250e8 <__sinit_lock_acquire+0x8>)
 80250e2:	f000 b8b9 	b.w	8025258 <__retarget_lock_acquire_recursive>
 80250e6:	bf00      	nop
 80250e8:	200199ee 	.word	0x200199ee

080250ec <__sinit_lock_release>:
 80250ec:	4801      	ldr	r0, [pc, #4]	; (80250f4 <__sinit_lock_release+0x8>)
 80250ee:	f000 b8b4 	b.w	802525a <__retarget_lock_release_recursive>
 80250f2:	bf00      	nop
 80250f4:	200199ee 	.word	0x200199ee

080250f8 <__sinit>:
 80250f8:	b510      	push	{r4, lr}
 80250fa:	4604      	mov	r4, r0
 80250fc:	f7ff fff0 	bl	80250e0 <__sinit_lock_acquire>
 8025100:	69a3      	ldr	r3, [r4, #24]
 8025102:	b11b      	cbz	r3, 802510c <__sinit+0x14>
 8025104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025108:	f7ff bff0 	b.w	80250ec <__sinit_lock_release>
 802510c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025110:	6523      	str	r3, [r4, #80]	; 0x50
 8025112:	4b13      	ldr	r3, [pc, #76]	; (8025160 <__sinit+0x68>)
 8025114:	4a13      	ldr	r2, [pc, #76]	; (8025164 <__sinit+0x6c>)
 8025116:	681b      	ldr	r3, [r3, #0]
 8025118:	62a2      	str	r2, [r4, #40]	; 0x28
 802511a:	42a3      	cmp	r3, r4
 802511c:	bf04      	itt	eq
 802511e:	2301      	moveq	r3, #1
 8025120:	61a3      	streq	r3, [r4, #24]
 8025122:	4620      	mov	r0, r4
 8025124:	f000 f820 	bl	8025168 <__sfp>
 8025128:	6060      	str	r0, [r4, #4]
 802512a:	4620      	mov	r0, r4
 802512c:	f000 f81c 	bl	8025168 <__sfp>
 8025130:	60a0      	str	r0, [r4, #8]
 8025132:	4620      	mov	r0, r4
 8025134:	f000 f818 	bl	8025168 <__sfp>
 8025138:	2200      	movs	r2, #0
 802513a:	60e0      	str	r0, [r4, #12]
 802513c:	2104      	movs	r1, #4
 802513e:	6860      	ldr	r0, [r4, #4]
 8025140:	f7ff ff82 	bl	8025048 <std>
 8025144:	68a0      	ldr	r0, [r4, #8]
 8025146:	2201      	movs	r2, #1
 8025148:	2109      	movs	r1, #9
 802514a:	f7ff ff7d 	bl	8025048 <std>
 802514e:	68e0      	ldr	r0, [r4, #12]
 8025150:	2202      	movs	r2, #2
 8025152:	2112      	movs	r1, #18
 8025154:	f7ff ff78 	bl	8025048 <std>
 8025158:	2301      	movs	r3, #1
 802515a:	61a3      	str	r3, [r4, #24]
 802515c:	e7d2      	b.n	8025104 <__sinit+0xc>
 802515e:	bf00      	nop
 8025160:	0802b7a8 	.word	0x0802b7a8
 8025164:	08025091 	.word	0x08025091

08025168 <__sfp>:
 8025168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802516a:	4607      	mov	r7, r0
 802516c:	f7ff ffac 	bl	80250c8 <__sfp_lock_acquire>
 8025170:	4b1e      	ldr	r3, [pc, #120]	; (80251ec <__sfp+0x84>)
 8025172:	681e      	ldr	r6, [r3, #0]
 8025174:	69b3      	ldr	r3, [r6, #24]
 8025176:	b913      	cbnz	r3, 802517e <__sfp+0x16>
 8025178:	4630      	mov	r0, r6
 802517a:	f7ff ffbd 	bl	80250f8 <__sinit>
 802517e:	3648      	adds	r6, #72	; 0x48
 8025180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025184:	3b01      	subs	r3, #1
 8025186:	d503      	bpl.n	8025190 <__sfp+0x28>
 8025188:	6833      	ldr	r3, [r6, #0]
 802518a:	b30b      	cbz	r3, 80251d0 <__sfp+0x68>
 802518c:	6836      	ldr	r6, [r6, #0]
 802518e:	e7f7      	b.n	8025180 <__sfp+0x18>
 8025190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025194:	b9d5      	cbnz	r5, 80251cc <__sfp+0x64>
 8025196:	4b16      	ldr	r3, [pc, #88]	; (80251f0 <__sfp+0x88>)
 8025198:	60e3      	str	r3, [r4, #12]
 802519a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802519e:	6665      	str	r5, [r4, #100]	; 0x64
 80251a0:	f000 f859 	bl	8025256 <__retarget_lock_init_recursive>
 80251a4:	f7ff ff96 	bl	80250d4 <__sfp_lock_release>
 80251a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80251ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80251b0:	6025      	str	r5, [r4, #0]
 80251b2:	61a5      	str	r5, [r4, #24]
 80251b4:	2208      	movs	r2, #8
 80251b6:	4629      	mov	r1, r5
 80251b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80251bc:	f7ff fae4 	bl	8024788 <memset>
 80251c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80251c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80251c8:	4620      	mov	r0, r4
 80251ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80251cc:	3468      	adds	r4, #104	; 0x68
 80251ce:	e7d9      	b.n	8025184 <__sfp+0x1c>
 80251d0:	2104      	movs	r1, #4
 80251d2:	4638      	mov	r0, r7
 80251d4:	f7ff ff62 	bl	802509c <__sfmoreglue>
 80251d8:	4604      	mov	r4, r0
 80251da:	6030      	str	r0, [r6, #0]
 80251dc:	2800      	cmp	r0, #0
 80251de:	d1d5      	bne.n	802518c <__sfp+0x24>
 80251e0:	f7ff ff78 	bl	80250d4 <__sfp_lock_release>
 80251e4:	230c      	movs	r3, #12
 80251e6:	603b      	str	r3, [r7, #0]
 80251e8:	e7ee      	b.n	80251c8 <__sfp+0x60>
 80251ea:	bf00      	nop
 80251ec:	0802b7a8 	.word	0x0802b7a8
 80251f0:	ffff0001 	.word	0xffff0001

080251f4 <fiprintf>:
 80251f4:	b40e      	push	{r1, r2, r3}
 80251f6:	b503      	push	{r0, r1, lr}
 80251f8:	4601      	mov	r1, r0
 80251fa:	ab03      	add	r3, sp, #12
 80251fc:	4805      	ldr	r0, [pc, #20]	; (8025214 <fiprintf+0x20>)
 80251fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8025202:	6800      	ldr	r0, [r0, #0]
 8025204:	9301      	str	r3, [sp, #4]
 8025206:	f000 fa21 	bl	802564c <_vfiprintf_r>
 802520a:	b002      	add	sp, #8
 802520c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025210:	b003      	add	sp, #12
 8025212:	4770      	bx	lr
 8025214:	20000140 	.word	0x20000140

08025218 <_fwalk_reent>:
 8025218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802521c:	4606      	mov	r6, r0
 802521e:	4688      	mov	r8, r1
 8025220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025224:	2700      	movs	r7, #0
 8025226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802522a:	f1b9 0901 	subs.w	r9, r9, #1
 802522e:	d505      	bpl.n	802523c <_fwalk_reent+0x24>
 8025230:	6824      	ldr	r4, [r4, #0]
 8025232:	2c00      	cmp	r4, #0
 8025234:	d1f7      	bne.n	8025226 <_fwalk_reent+0xe>
 8025236:	4638      	mov	r0, r7
 8025238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802523c:	89ab      	ldrh	r3, [r5, #12]
 802523e:	2b01      	cmp	r3, #1
 8025240:	d907      	bls.n	8025252 <_fwalk_reent+0x3a>
 8025242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025246:	3301      	adds	r3, #1
 8025248:	d003      	beq.n	8025252 <_fwalk_reent+0x3a>
 802524a:	4629      	mov	r1, r5
 802524c:	4630      	mov	r0, r6
 802524e:	47c0      	blx	r8
 8025250:	4307      	orrs	r7, r0
 8025252:	3568      	adds	r5, #104	; 0x68
 8025254:	e7e9      	b.n	802522a <_fwalk_reent+0x12>

08025256 <__retarget_lock_init_recursive>:
 8025256:	4770      	bx	lr

08025258 <__retarget_lock_acquire_recursive>:
 8025258:	4770      	bx	lr

0802525a <__retarget_lock_release_recursive>:
 802525a:	4770      	bx	lr

0802525c <__swhatbuf_r>:
 802525c:	b570      	push	{r4, r5, r6, lr}
 802525e:	460e      	mov	r6, r1
 8025260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025264:	2900      	cmp	r1, #0
 8025266:	b096      	sub	sp, #88	; 0x58
 8025268:	4614      	mov	r4, r2
 802526a:	461d      	mov	r5, r3
 802526c:	da08      	bge.n	8025280 <__swhatbuf_r+0x24>
 802526e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025272:	2200      	movs	r2, #0
 8025274:	602a      	str	r2, [r5, #0]
 8025276:	061a      	lsls	r2, r3, #24
 8025278:	d410      	bmi.n	802529c <__swhatbuf_r+0x40>
 802527a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802527e:	e00e      	b.n	802529e <__swhatbuf_r+0x42>
 8025280:	466a      	mov	r2, sp
 8025282:	f000 fd5d 	bl	8025d40 <_fstat_r>
 8025286:	2800      	cmp	r0, #0
 8025288:	dbf1      	blt.n	802526e <__swhatbuf_r+0x12>
 802528a:	9a01      	ldr	r2, [sp, #4]
 802528c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025294:	425a      	negs	r2, r3
 8025296:	415a      	adcs	r2, r3
 8025298:	602a      	str	r2, [r5, #0]
 802529a:	e7ee      	b.n	802527a <__swhatbuf_r+0x1e>
 802529c:	2340      	movs	r3, #64	; 0x40
 802529e:	2000      	movs	r0, #0
 80252a0:	6023      	str	r3, [r4, #0]
 80252a2:	b016      	add	sp, #88	; 0x58
 80252a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080252a8 <__smakebuf_r>:
 80252a8:	898b      	ldrh	r3, [r1, #12]
 80252aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80252ac:	079d      	lsls	r5, r3, #30
 80252ae:	4606      	mov	r6, r0
 80252b0:	460c      	mov	r4, r1
 80252b2:	d507      	bpl.n	80252c4 <__smakebuf_r+0x1c>
 80252b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80252b8:	6023      	str	r3, [r4, #0]
 80252ba:	6123      	str	r3, [r4, #16]
 80252bc:	2301      	movs	r3, #1
 80252be:	6163      	str	r3, [r4, #20]
 80252c0:	b002      	add	sp, #8
 80252c2:	bd70      	pop	{r4, r5, r6, pc}
 80252c4:	ab01      	add	r3, sp, #4
 80252c6:	466a      	mov	r2, sp
 80252c8:	f7ff ffc8 	bl	802525c <__swhatbuf_r>
 80252cc:	9900      	ldr	r1, [sp, #0]
 80252ce:	4605      	mov	r5, r0
 80252d0:	4630      	mov	r0, r6
 80252d2:	f7ff facd 	bl	8024870 <_malloc_r>
 80252d6:	b948      	cbnz	r0, 80252ec <__smakebuf_r+0x44>
 80252d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80252dc:	059a      	lsls	r2, r3, #22
 80252de:	d4ef      	bmi.n	80252c0 <__smakebuf_r+0x18>
 80252e0:	f023 0303 	bic.w	r3, r3, #3
 80252e4:	f043 0302 	orr.w	r3, r3, #2
 80252e8:	81a3      	strh	r3, [r4, #12]
 80252ea:	e7e3      	b.n	80252b4 <__smakebuf_r+0xc>
 80252ec:	4b0d      	ldr	r3, [pc, #52]	; (8025324 <__smakebuf_r+0x7c>)
 80252ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80252f0:	89a3      	ldrh	r3, [r4, #12]
 80252f2:	6020      	str	r0, [r4, #0]
 80252f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80252f8:	81a3      	strh	r3, [r4, #12]
 80252fa:	9b00      	ldr	r3, [sp, #0]
 80252fc:	6163      	str	r3, [r4, #20]
 80252fe:	9b01      	ldr	r3, [sp, #4]
 8025300:	6120      	str	r0, [r4, #16]
 8025302:	b15b      	cbz	r3, 802531c <__smakebuf_r+0x74>
 8025304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025308:	4630      	mov	r0, r6
 802530a:	f000 fd2b 	bl	8025d64 <_isatty_r>
 802530e:	b128      	cbz	r0, 802531c <__smakebuf_r+0x74>
 8025310:	89a3      	ldrh	r3, [r4, #12]
 8025312:	f023 0303 	bic.w	r3, r3, #3
 8025316:	f043 0301 	orr.w	r3, r3, #1
 802531a:	81a3      	strh	r3, [r4, #12]
 802531c:	89a0      	ldrh	r0, [r4, #12]
 802531e:	4305      	orrs	r5, r0
 8025320:	81a5      	strh	r5, [r4, #12]
 8025322:	e7cd      	b.n	80252c0 <__smakebuf_r+0x18>
 8025324:	08025091 	.word	0x08025091

08025328 <__malloc_lock>:
 8025328:	4801      	ldr	r0, [pc, #4]	; (8025330 <__malloc_lock+0x8>)
 802532a:	f7ff bf95 	b.w	8025258 <__retarget_lock_acquire_recursive>
 802532e:	bf00      	nop
 8025330:	200199ec 	.word	0x200199ec

08025334 <__malloc_unlock>:
 8025334:	4801      	ldr	r0, [pc, #4]	; (802533c <__malloc_unlock+0x8>)
 8025336:	f7ff bf90 	b.w	802525a <__retarget_lock_release_recursive>
 802533a:	bf00      	nop
 802533c:	200199ec 	.word	0x200199ec

08025340 <__ssputs_r>:
 8025340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025344:	688e      	ldr	r6, [r1, #8]
 8025346:	429e      	cmp	r6, r3
 8025348:	4682      	mov	sl, r0
 802534a:	460c      	mov	r4, r1
 802534c:	4690      	mov	r8, r2
 802534e:	461f      	mov	r7, r3
 8025350:	d838      	bhi.n	80253c4 <__ssputs_r+0x84>
 8025352:	898a      	ldrh	r2, [r1, #12]
 8025354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025358:	d032      	beq.n	80253c0 <__ssputs_r+0x80>
 802535a:	6825      	ldr	r5, [r4, #0]
 802535c:	6909      	ldr	r1, [r1, #16]
 802535e:	eba5 0901 	sub.w	r9, r5, r1
 8025362:	6965      	ldr	r5, [r4, #20]
 8025364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802536c:	3301      	adds	r3, #1
 802536e:	444b      	add	r3, r9
 8025370:	106d      	asrs	r5, r5, #1
 8025372:	429d      	cmp	r5, r3
 8025374:	bf38      	it	cc
 8025376:	461d      	movcc	r5, r3
 8025378:	0553      	lsls	r3, r2, #21
 802537a:	d531      	bpl.n	80253e0 <__ssputs_r+0xa0>
 802537c:	4629      	mov	r1, r5
 802537e:	f7ff fa77 	bl	8024870 <_malloc_r>
 8025382:	4606      	mov	r6, r0
 8025384:	b950      	cbnz	r0, 802539c <__ssputs_r+0x5c>
 8025386:	230c      	movs	r3, #12
 8025388:	f8ca 3000 	str.w	r3, [sl]
 802538c:	89a3      	ldrh	r3, [r4, #12]
 802538e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025392:	81a3      	strh	r3, [r4, #12]
 8025394:	f04f 30ff 	mov.w	r0, #4294967295
 8025398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802539c:	6921      	ldr	r1, [r4, #16]
 802539e:	464a      	mov	r2, r9
 80253a0:	f7ff f9ca 	bl	8024738 <memcpy>
 80253a4:	89a3      	ldrh	r3, [r4, #12]
 80253a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80253aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80253ae:	81a3      	strh	r3, [r4, #12]
 80253b0:	6126      	str	r6, [r4, #16]
 80253b2:	6165      	str	r5, [r4, #20]
 80253b4:	444e      	add	r6, r9
 80253b6:	eba5 0509 	sub.w	r5, r5, r9
 80253ba:	6026      	str	r6, [r4, #0]
 80253bc:	60a5      	str	r5, [r4, #8]
 80253be:	463e      	mov	r6, r7
 80253c0:	42be      	cmp	r6, r7
 80253c2:	d900      	bls.n	80253c6 <__ssputs_r+0x86>
 80253c4:	463e      	mov	r6, r7
 80253c6:	6820      	ldr	r0, [r4, #0]
 80253c8:	4632      	mov	r2, r6
 80253ca:	4641      	mov	r1, r8
 80253cc:	f7ff f9c2 	bl	8024754 <memmove>
 80253d0:	68a3      	ldr	r3, [r4, #8]
 80253d2:	1b9b      	subs	r3, r3, r6
 80253d4:	60a3      	str	r3, [r4, #8]
 80253d6:	6823      	ldr	r3, [r4, #0]
 80253d8:	4433      	add	r3, r6
 80253da:	6023      	str	r3, [r4, #0]
 80253dc:	2000      	movs	r0, #0
 80253de:	e7db      	b.n	8025398 <__ssputs_r+0x58>
 80253e0:	462a      	mov	r2, r5
 80253e2:	f000 fce1 	bl	8025da8 <_realloc_r>
 80253e6:	4606      	mov	r6, r0
 80253e8:	2800      	cmp	r0, #0
 80253ea:	d1e1      	bne.n	80253b0 <__ssputs_r+0x70>
 80253ec:	6921      	ldr	r1, [r4, #16]
 80253ee:	4650      	mov	r0, sl
 80253f0:	f7ff f9d2 	bl	8024798 <_free_r>
 80253f4:	e7c7      	b.n	8025386 <__ssputs_r+0x46>
	...

080253f8 <_svfiprintf_r>:
 80253f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253fc:	4698      	mov	r8, r3
 80253fe:	898b      	ldrh	r3, [r1, #12]
 8025400:	061b      	lsls	r3, r3, #24
 8025402:	b09d      	sub	sp, #116	; 0x74
 8025404:	4607      	mov	r7, r0
 8025406:	460d      	mov	r5, r1
 8025408:	4614      	mov	r4, r2
 802540a:	d50e      	bpl.n	802542a <_svfiprintf_r+0x32>
 802540c:	690b      	ldr	r3, [r1, #16]
 802540e:	b963      	cbnz	r3, 802542a <_svfiprintf_r+0x32>
 8025410:	2140      	movs	r1, #64	; 0x40
 8025412:	f7ff fa2d 	bl	8024870 <_malloc_r>
 8025416:	6028      	str	r0, [r5, #0]
 8025418:	6128      	str	r0, [r5, #16]
 802541a:	b920      	cbnz	r0, 8025426 <_svfiprintf_r+0x2e>
 802541c:	230c      	movs	r3, #12
 802541e:	603b      	str	r3, [r7, #0]
 8025420:	f04f 30ff 	mov.w	r0, #4294967295
 8025424:	e0d1      	b.n	80255ca <_svfiprintf_r+0x1d2>
 8025426:	2340      	movs	r3, #64	; 0x40
 8025428:	616b      	str	r3, [r5, #20]
 802542a:	2300      	movs	r3, #0
 802542c:	9309      	str	r3, [sp, #36]	; 0x24
 802542e:	2320      	movs	r3, #32
 8025430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025434:	f8cd 800c 	str.w	r8, [sp, #12]
 8025438:	2330      	movs	r3, #48	; 0x30
 802543a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80255e4 <_svfiprintf_r+0x1ec>
 802543e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025442:	f04f 0901 	mov.w	r9, #1
 8025446:	4623      	mov	r3, r4
 8025448:	469a      	mov	sl, r3
 802544a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802544e:	b10a      	cbz	r2, 8025454 <_svfiprintf_r+0x5c>
 8025450:	2a25      	cmp	r2, #37	; 0x25
 8025452:	d1f9      	bne.n	8025448 <_svfiprintf_r+0x50>
 8025454:	ebba 0b04 	subs.w	fp, sl, r4
 8025458:	d00b      	beq.n	8025472 <_svfiprintf_r+0x7a>
 802545a:	465b      	mov	r3, fp
 802545c:	4622      	mov	r2, r4
 802545e:	4629      	mov	r1, r5
 8025460:	4638      	mov	r0, r7
 8025462:	f7ff ff6d 	bl	8025340 <__ssputs_r>
 8025466:	3001      	adds	r0, #1
 8025468:	f000 80aa 	beq.w	80255c0 <_svfiprintf_r+0x1c8>
 802546c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802546e:	445a      	add	r2, fp
 8025470:	9209      	str	r2, [sp, #36]	; 0x24
 8025472:	f89a 3000 	ldrb.w	r3, [sl]
 8025476:	2b00      	cmp	r3, #0
 8025478:	f000 80a2 	beq.w	80255c0 <_svfiprintf_r+0x1c8>
 802547c:	2300      	movs	r3, #0
 802547e:	f04f 32ff 	mov.w	r2, #4294967295
 8025482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025486:	f10a 0a01 	add.w	sl, sl, #1
 802548a:	9304      	str	r3, [sp, #16]
 802548c:	9307      	str	r3, [sp, #28]
 802548e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025492:	931a      	str	r3, [sp, #104]	; 0x68
 8025494:	4654      	mov	r4, sl
 8025496:	2205      	movs	r2, #5
 8025498:	f814 1b01 	ldrb.w	r1, [r4], #1
 802549c:	4851      	ldr	r0, [pc, #324]	; (80255e4 <_svfiprintf_r+0x1ec>)
 802549e:	f7da fee7 	bl	8000270 <memchr>
 80254a2:	9a04      	ldr	r2, [sp, #16]
 80254a4:	b9d8      	cbnz	r0, 80254de <_svfiprintf_r+0xe6>
 80254a6:	06d0      	lsls	r0, r2, #27
 80254a8:	bf44      	itt	mi
 80254aa:	2320      	movmi	r3, #32
 80254ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80254b0:	0711      	lsls	r1, r2, #28
 80254b2:	bf44      	itt	mi
 80254b4:	232b      	movmi	r3, #43	; 0x2b
 80254b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80254ba:	f89a 3000 	ldrb.w	r3, [sl]
 80254be:	2b2a      	cmp	r3, #42	; 0x2a
 80254c0:	d015      	beq.n	80254ee <_svfiprintf_r+0xf6>
 80254c2:	9a07      	ldr	r2, [sp, #28]
 80254c4:	4654      	mov	r4, sl
 80254c6:	2000      	movs	r0, #0
 80254c8:	f04f 0c0a 	mov.w	ip, #10
 80254cc:	4621      	mov	r1, r4
 80254ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80254d2:	3b30      	subs	r3, #48	; 0x30
 80254d4:	2b09      	cmp	r3, #9
 80254d6:	d94e      	bls.n	8025576 <_svfiprintf_r+0x17e>
 80254d8:	b1b0      	cbz	r0, 8025508 <_svfiprintf_r+0x110>
 80254da:	9207      	str	r2, [sp, #28]
 80254dc:	e014      	b.n	8025508 <_svfiprintf_r+0x110>
 80254de:	eba0 0308 	sub.w	r3, r0, r8
 80254e2:	fa09 f303 	lsl.w	r3, r9, r3
 80254e6:	4313      	orrs	r3, r2
 80254e8:	9304      	str	r3, [sp, #16]
 80254ea:	46a2      	mov	sl, r4
 80254ec:	e7d2      	b.n	8025494 <_svfiprintf_r+0x9c>
 80254ee:	9b03      	ldr	r3, [sp, #12]
 80254f0:	1d19      	adds	r1, r3, #4
 80254f2:	681b      	ldr	r3, [r3, #0]
 80254f4:	9103      	str	r1, [sp, #12]
 80254f6:	2b00      	cmp	r3, #0
 80254f8:	bfbb      	ittet	lt
 80254fa:	425b      	neglt	r3, r3
 80254fc:	f042 0202 	orrlt.w	r2, r2, #2
 8025500:	9307      	strge	r3, [sp, #28]
 8025502:	9307      	strlt	r3, [sp, #28]
 8025504:	bfb8      	it	lt
 8025506:	9204      	strlt	r2, [sp, #16]
 8025508:	7823      	ldrb	r3, [r4, #0]
 802550a:	2b2e      	cmp	r3, #46	; 0x2e
 802550c:	d10c      	bne.n	8025528 <_svfiprintf_r+0x130>
 802550e:	7863      	ldrb	r3, [r4, #1]
 8025510:	2b2a      	cmp	r3, #42	; 0x2a
 8025512:	d135      	bne.n	8025580 <_svfiprintf_r+0x188>
 8025514:	9b03      	ldr	r3, [sp, #12]
 8025516:	1d1a      	adds	r2, r3, #4
 8025518:	681b      	ldr	r3, [r3, #0]
 802551a:	9203      	str	r2, [sp, #12]
 802551c:	2b00      	cmp	r3, #0
 802551e:	bfb8      	it	lt
 8025520:	f04f 33ff 	movlt.w	r3, #4294967295
 8025524:	3402      	adds	r4, #2
 8025526:	9305      	str	r3, [sp, #20]
 8025528:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80255f4 <_svfiprintf_r+0x1fc>
 802552c:	7821      	ldrb	r1, [r4, #0]
 802552e:	2203      	movs	r2, #3
 8025530:	4650      	mov	r0, sl
 8025532:	f7da fe9d 	bl	8000270 <memchr>
 8025536:	b140      	cbz	r0, 802554a <_svfiprintf_r+0x152>
 8025538:	2340      	movs	r3, #64	; 0x40
 802553a:	eba0 000a 	sub.w	r0, r0, sl
 802553e:	fa03 f000 	lsl.w	r0, r3, r0
 8025542:	9b04      	ldr	r3, [sp, #16]
 8025544:	4303      	orrs	r3, r0
 8025546:	3401      	adds	r4, #1
 8025548:	9304      	str	r3, [sp, #16]
 802554a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802554e:	4826      	ldr	r0, [pc, #152]	; (80255e8 <_svfiprintf_r+0x1f0>)
 8025550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025554:	2206      	movs	r2, #6
 8025556:	f7da fe8b 	bl	8000270 <memchr>
 802555a:	2800      	cmp	r0, #0
 802555c:	d038      	beq.n	80255d0 <_svfiprintf_r+0x1d8>
 802555e:	4b23      	ldr	r3, [pc, #140]	; (80255ec <_svfiprintf_r+0x1f4>)
 8025560:	bb1b      	cbnz	r3, 80255aa <_svfiprintf_r+0x1b2>
 8025562:	9b03      	ldr	r3, [sp, #12]
 8025564:	3307      	adds	r3, #7
 8025566:	f023 0307 	bic.w	r3, r3, #7
 802556a:	3308      	adds	r3, #8
 802556c:	9303      	str	r3, [sp, #12]
 802556e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025570:	4433      	add	r3, r6
 8025572:	9309      	str	r3, [sp, #36]	; 0x24
 8025574:	e767      	b.n	8025446 <_svfiprintf_r+0x4e>
 8025576:	fb0c 3202 	mla	r2, ip, r2, r3
 802557a:	460c      	mov	r4, r1
 802557c:	2001      	movs	r0, #1
 802557e:	e7a5      	b.n	80254cc <_svfiprintf_r+0xd4>
 8025580:	2300      	movs	r3, #0
 8025582:	3401      	adds	r4, #1
 8025584:	9305      	str	r3, [sp, #20]
 8025586:	4619      	mov	r1, r3
 8025588:	f04f 0c0a 	mov.w	ip, #10
 802558c:	4620      	mov	r0, r4
 802558e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025592:	3a30      	subs	r2, #48	; 0x30
 8025594:	2a09      	cmp	r2, #9
 8025596:	d903      	bls.n	80255a0 <_svfiprintf_r+0x1a8>
 8025598:	2b00      	cmp	r3, #0
 802559a:	d0c5      	beq.n	8025528 <_svfiprintf_r+0x130>
 802559c:	9105      	str	r1, [sp, #20]
 802559e:	e7c3      	b.n	8025528 <_svfiprintf_r+0x130>
 80255a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80255a4:	4604      	mov	r4, r0
 80255a6:	2301      	movs	r3, #1
 80255a8:	e7f0      	b.n	802558c <_svfiprintf_r+0x194>
 80255aa:	ab03      	add	r3, sp, #12
 80255ac:	9300      	str	r3, [sp, #0]
 80255ae:	462a      	mov	r2, r5
 80255b0:	4b0f      	ldr	r3, [pc, #60]	; (80255f0 <_svfiprintf_r+0x1f8>)
 80255b2:	a904      	add	r1, sp, #16
 80255b4:	4638      	mov	r0, r7
 80255b6:	f3af 8000 	nop.w
 80255ba:	1c42      	adds	r2, r0, #1
 80255bc:	4606      	mov	r6, r0
 80255be:	d1d6      	bne.n	802556e <_svfiprintf_r+0x176>
 80255c0:	89ab      	ldrh	r3, [r5, #12]
 80255c2:	065b      	lsls	r3, r3, #25
 80255c4:	f53f af2c 	bmi.w	8025420 <_svfiprintf_r+0x28>
 80255c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80255ca:	b01d      	add	sp, #116	; 0x74
 80255cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255d0:	ab03      	add	r3, sp, #12
 80255d2:	9300      	str	r3, [sp, #0]
 80255d4:	462a      	mov	r2, r5
 80255d6:	4b06      	ldr	r3, [pc, #24]	; (80255f0 <_svfiprintf_r+0x1f8>)
 80255d8:	a904      	add	r1, sp, #16
 80255da:	4638      	mov	r0, r7
 80255dc:	f000 f9d4 	bl	8025988 <_printf_i>
 80255e0:	e7eb      	b.n	80255ba <_svfiprintf_r+0x1c2>
 80255e2:	bf00      	nop
 80255e4:	0802b8bc 	.word	0x0802b8bc
 80255e8:	0802b8c6 	.word	0x0802b8c6
 80255ec:	00000000 	.word	0x00000000
 80255f0:	08025341 	.word	0x08025341
 80255f4:	0802b8c2 	.word	0x0802b8c2

080255f8 <__sfputc_r>:
 80255f8:	6893      	ldr	r3, [r2, #8]
 80255fa:	3b01      	subs	r3, #1
 80255fc:	2b00      	cmp	r3, #0
 80255fe:	b410      	push	{r4}
 8025600:	6093      	str	r3, [r2, #8]
 8025602:	da08      	bge.n	8025616 <__sfputc_r+0x1e>
 8025604:	6994      	ldr	r4, [r2, #24]
 8025606:	42a3      	cmp	r3, r4
 8025608:	db01      	blt.n	802560e <__sfputc_r+0x16>
 802560a:	290a      	cmp	r1, #10
 802560c:	d103      	bne.n	8025616 <__sfputc_r+0x1e>
 802560e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025612:	f7ff bb79 	b.w	8024d08 <__swbuf_r>
 8025616:	6813      	ldr	r3, [r2, #0]
 8025618:	1c58      	adds	r0, r3, #1
 802561a:	6010      	str	r0, [r2, #0]
 802561c:	7019      	strb	r1, [r3, #0]
 802561e:	4608      	mov	r0, r1
 8025620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025624:	4770      	bx	lr

08025626 <__sfputs_r>:
 8025626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025628:	4606      	mov	r6, r0
 802562a:	460f      	mov	r7, r1
 802562c:	4614      	mov	r4, r2
 802562e:	18d5      	adds	r5, r2, r3
 8025630:	42ac      	cmp	r4, r5
 8025632:	d101      	bne.n	8025638 <__sfputs_r+0x12>
 8025634:	2000      	movs	r0, #0
 8025636:	e007      	b.n	8025648 <__sfputs_r+0x22>
 8025638:	f814 1b01 	ldrb.w	r1, [r4], #1
 802563c:	463a      	mov	r2, r7
 802563e:	4630      	mov	r0, r6
 8025640:	f7ff ffda 	bl	80255f8 <__sfputc_r>
 8025644:	1c43      	adds	r3, r0, #1
 8025646:	d1f3      	bne.n	8025630 <__sfputs_r+0xa>
 8025648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802564c <_vfiprintf_r>:
 802564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025650:	460d      	mov	r5, r1
 8025652:	b09d      	sub	sp, #116	; 0x74
 8025654:	4614      	mov	r4, r2
 8025656:	4698      	mov	r8, r3
 8025658:	4606      	mov	r6, r0
 802565a:	b118      	cbz	r0, 8025664 <_vfiprintf_r+0x18>
 802565c:	6983      	ldr	r3, [r0, #24]
 802565e:	b90b      	cbnz	r3, 8025664 <_vfiprintf_r+0x18>
 8025660:	f7ff fd4a 	bl	80250f8 <__sinit>
 8025664:	4b89      	ldr	r3, [pc, #548]	; (802588c <_vfiprintf_r+0x240>)
 8025666:	429d      	cmp	r5, r3
 8025668:	d11b      	bne.n	80256a2 <_vfiprintf_r+0x56>
 802566a:	6875      	ldr	r5, [r6, #4]
 802566c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802566e:	07d9      	lsls	r1, r3, #31
 8025670:	d405      	bmi.n	802567e <_vfiprintf_r+0x32>
 8025672:	89ab      	ldrh	r3, [r5, #12]
 8025674:	059a      	lsls	r2, r3, #22
 8025676:	d402      	bmi.n	802567e <_vfiprintf_r+0x32>
 8025678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802567a:	f7ff fded 	bl	8025258 <__retarget_lock_acquire_recursive>
 802567e:	89ab      	ldrh	r3, [r5, #12]
 8025680:	071b      	lsls	r3, r3, #28
 8025682:	d501      	bpl.n	8025688 <_vfiprintf_r+0x3c>
 8025684:	692b      	ldr	r3, [r5, #16]
 8025686:	b9eb      	cbnz	r3, 80256c4 <_vfiprintf_r+0x78>
 8025688:	4629      	mov	r1, r5
 802568a:	4630      	mov	r0, r6
 802568c:	f7ff fb8e 	bl	8024dac <__swsetup_r>
 8025690:	b1c0      	cbz	r0, 80256c4 <_vfiprintf_r+0x78>
 8025692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025694:	07dc      	lsls	r4, r3, #31
 8025696:	d50e      	bpl.n	80256b6 <_vfiprintf_r+0x6a>
 8025698:	f04f 30ff 	mov.w	r0, #4294967295
 802569c:	b01d      	add	sp, #116	; 0x74
 802569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256a2:	4b7b      	ldr	r3, [pc, #492]	; (8025890 <_vfiprintf_r+0x244>)
 80256a4:	429d      	cmp	r5, r3
 80256a6:	d101      	bne.n	80256ac <_vfiprintf_r+0x60>
 80256a8:	68b5      	ldr	r5, [r6, #8]
 80256aa:	e7df      	b.n	802566c <_vfiprintf_r+0x20>
 80256ac:	4b79      	ldr	r3, [pc, #484]	; (8025894 <_vfiprintf_r+0x248>)
 80256ae:	429d      	cmp	r5, r3
 80256b0:	bf08      	it	eq
 80256b2:	68f5      	ldreq	r5, [r6, #12]
 80256b4:	e7da      	b.n	802566c <_vfiprintf_r+0x20>
 80256b6:	89ab      	ldrh	r3, [r5, #12]
 80256b8:	0598      	lsls	r0, r3, #22
 80256ba:	d4ed      	bmi.n	8025698 <_vfiprintf_r+0x4c>
 80256bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80256be:	f7ff fdcc 	bl	802525a <__retarget_lock_release_recursive>
 80256c2:	e7e9      	b.n	8025698 <_vfiprintf_r+0x4c>
 80256c4:	2300      	movs	r3, #0
 80256c6:	9309      	str	r3, [sp, #36]	; 0x24
 80256c8:	2320      	movs	r3, #32
 80256ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80256ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80256d2:	2330      	movs	r3, #48	; 0x30
 80256d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025898 <_vfiprintf_r+0x24c>
 80256d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80256dc:	f04f 0901 	mov.w	r9, #1
 80256e0:	4623      	mov	r3, r4
 80256e2:	469a      	mov	sl, r3
 80256e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80256e8:	b10a      	cbz	r2, 80256ee <_vfiprintf_r+0xa2>
 80256ea:	2a25      	cmp	r2, #37	; 0x25
 80256ec:	d1f9      	bne.n	80256e2 <_vfiprintf_r+0x96>
 80256ee:	ebba 0b04 	subs.w	fp, sl, r4
 80256f2:	d00b      	beq.n	802570c <_vfiprintf_r+0xc0>
 80256f4:	465b      	mov	r3, fp
 80256f6:	4622      	mov	r2, r4
 80256f8:	4629      	mov	r1, r5
 80256fa:	4630      	mov	r0, r6
 80256fc:	f7ff ff93 	bl	8025626 <__sfputs_r>
 8025700:	3001      	adds	r0, #1
 8025702:	f000 80aa 	beq.w	802585a <_vfiprintf_r+0x20e>
 8025706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025708:	445a      	add	r2, fp
 802570a:	9209      	str	r2, [sp, #36]	; 0x24
 802570c:	f89a 3000 	ldrb.w	r3, [sl]
 8025710:	2b00      	cmp	r3, #0
 8025712:	f000 80a2 	beq.w	802585a <_vfiprintf_r+0x20e>
 8025716:	2300      	movs	r3, #0
 8025718:	f04f 32ff 	mov.w	r2, #4294967295
 802571c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025720:	f10a 0a01 	add.w	sl, sl, #1
 8025724:	9304      	str	r3, [sp, #16]
 8025726:	9307      	str	r3, [sp, #28]
 8025728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802572c:	931a      	str	r3, [sp, #104]	; 0x68
 802572e:	4654      	mov	r4, sl
 8025730:	2205      	movs	r2, #5
 8025732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025736:	4858      	ldr	r0, [pc, #352]	; (8025898 <_vfiprintf_r+0x24c>)
 8025738:	f7da fd9a 	bl	8000270 <memchr>
 802573c:	9a04      	ldr	r2, [sp, #16]
 802573e:	b9d8      	cbnz	r0, 8025778 <_vfiprintf_r+0x12c>
 8025740:	06d1      	lsls	r1, r2, #27
 8025742:	bf44      	itt	mi
 8025744:	2320      	movmi	r3, #32
 8025746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802574a:	0713      	lsls	r3, r2, #28
 802574c:	bf44      	itt	mi
 802574e:	232b      	movmi	r3, #43	; 0x2b
 8025750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025754:	f89a 3000 	ldrb.w	r3, [sl]
 8025758:	2b2a      	cmp	r3, #42	; 0x2a
 802575a:	d015      	beq.n	8025788 <_vfiprintf_r+0x13c>
 802575c:	9a07      	ldr	r2, [sp, #28]
 802575e:	4654      	mov	r4, sl
 8025760:	2000      	movs	r0, #0
 8025762:	f04f 0c0a 	mov.w	ip, #10
 8025766:	4621      	mov	r1, r4
 8025768:	f811 3b01 	ldrb.w	r3, [r1], #1
 802576c:	3b30      	subs	r3, #48	; 0x30
 802576e:	2b09      	cmp	r3, #9
 8025770:	d94e      	bls.n	8025810 <_vfiprintf_r+0x1c4>
 8025772:	b1b0      	cbz	r0, 80257a2 <_vfiprintf_r+0x156>
 8025774:	9207      	str	r2, [sp, #28]
 8025776:	e014      	b.n	80257a2 <_vfiprintf_r+0x156>
 8025778:	eba0 0308 	sub.w	r3, r0, r8
 802577c:	fa09 f303 	lsl.w	r3, r9, r3
 8025780:	4313      	orrs	r3, r2
 8025782:	9304      	str	r3, [sp, #16]
 8025784:	46a2      	mov	sl, r4
 8025786:	e7d2      	b.n	802572e <_vfiprintf_r+0xe2>
 8025788:	9b03      	ldr	r3, [sp, #12]
 802578a:	1d19      	adds	r1, r3, #4
 802578c:	681b      	ldr	r3, [r3, #0]
 802578e:	9103      	str	r1, [sp, #12]
 8025790:	2b00      	cmp	r3, #0
 8025792:	bfbb      	ittet	lt
 8025794:	425b      	neglt	r3, r3
 8025796:	f042 0202 	orrlt.w	r2, r2, #2
 802579a:	9307      	strge	r3, [sp, #28]
 802579c:	9307      	strlt	r3, [sp, #28]
 802579e:	bfb8      	it	lt
 80257a0:	9204      	strlt	r2, [sp, #16]
 80257a2:	7823      	ldrb	r3, [r4, #0]
 80257a4:	2b2e      	cmp	r3, #46	; 0x2e
 80257a6:	d10c      	bne.n	80257c2 <_vfiprintf_r+0x176>
 80257a8:	7863      	ldrb	r3, [r4, #1]
 80257aa:	2b2a      	cmp	r3, #42	; 0x2a
 80257ac:	d135      	bne.n	802581a <_vfiprintf_r+0x1ce>
 80257ae:	9b03      	ldr	r3, [sp, #12]
 80257b0:	1d1a      	adds	r2, r3, #4
 80257b2:	681b      	ldr	r3, [r3, #0]
 80257b4:	9203      	str	r2, [sp, #12]
 80257b6:	2b00      	cmp	r3, #0
 80257b8:	bfb8      	it	lt
 80257ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80257be:	3402      	adds	r4, #2
 80257c0:	9305      	str	r3, [sp, #20]
 80257c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80258a8 <_vfiprintf_r+0x25c>
 80257c6:	7821      	ldrb	r1, [r4, #0]
 80257c8:	2203      	movs	r2, #3
 80257ca:	4650      	mov	r0, sl
 80257cc:	f7da fd50 	bl	8000270 <memchr>
 80257d0:	b140      	cbz	r0, 80257e4 <_vfiprintf_r+0x198>
 80257d2:	2340      	movs	r3, #64	; 0x40
 80257d4:	eba0 000a 	sub.w	r0, r0, sl
 80257d8:	fa03 f000 	lsl.w	r0, r3, r0
 80257dc:	9b04      	ldr	r3, [sp, #16]
 80257de:	4303      	orrs	r3, r0
 80257e0:	3401      	adds	r4, #1
 80257e2:	9304      	str	r3, [sp, #16]
 80257e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80257e8:	482c      	ldr	r0, [pc, #176]	; (802589c <_vfiprintf_r+0x250>)
 80257ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80257ee:	2206      	movs	r2, #6
 80257f0:	f7da fd3e 	bl	8000270 <memchr>
 80257f4:	2800      	cmp	r0, #0
 80257f6:	d03f      	beq.n	8025878 <_vfiprintf_r+0x22c>
 80257f8:	4b29      	ldr	r3, [pc, #164]	; (80258a0 <_vfiprintf_r+0x254>)
 80257fa:	bb1b      	cbnz	r3, 8025844 <_vfiprintf_r+0x1f8>
 80257fc:	9b03      	ldr	r3, [sp, #12]
 80257fe:	3307      	adds	r3, #7
 8025800:	f023 0307 	bic.w	r3, r3, #7
 8025804:	3308      	adds	r3, #8
 8025806:	9303      	str	r3, [sp, #12]
 8025808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802580a:	443b      	add	r3, r7
 802580c:	9309      	str	r3, [sp, #36]	; 0x24
 802580e:	e767      	b.n	80256e0 <_vfiprintf_r+0x94>
 8025810:	fb0c 3202 	mla	r2, ip, r2, r3
 8025814:	460c      	mov	r4, r1
 8025816:	2001      	movs	r0, #1
 8025818:	e7a5      	b.n	8025766 <_vfiprintf_r+0x11a>
 802581a:	2300      	movs	r3, #0
 802581c:	3401      	adds	r4, #1
 802581e:	9305      	str	r3, [sp, #20]
 8025820:	4619      	mov	r1, r3
 8025822:	f04f 0c0a 	mov.w	ip, #10
 8025826:	4620      	mov	r0, r4
 8025828:	f810 2b01 	ldrb.w	r2, [r0], #1
 802582c:	3a30      	subs	r2, #48	; 0x30
 802582e:	2a09      	cmp	r2, #9
 8025830:	d903      	bls.n	802583a <_vfiprintf_r+0x1ee>
 8025832:	2b00      	cmp	r3, #0
 8025834:	d0c5      	beq.n	80257c2 <_vfiprintf_r+0x176>
 8025836:	9105      	str	r1, [sp, #20]
 8025838:	e7c3      	b.n	80257c2 <_vfiprintf_r+0x176>
 802583a:	fb0c 2101 	mla	r1, ip, r1, r2
 802583e:	4604      	mov	r4, r0
 8025840:	2301      	movs	r3, #1
 8025842:	e7f0      	b.n	8025826 <_vfiprintf_r+0x1da>
 8025844:	ab03      	add	r3, sp, #12
 8025846:	9300      	str	r3, [sp, #0]
 8025848:	462a      	mov	r2, r5
 802584a:	4b16      	ldr	r3, [pc, #88]	; (80258a4 <_vfiprintf_r+0x258>)
 802584c:	a904      	add	r1, sp, #16
 802584e:	4630      	mov	r0, r6
 8025850:	f3af 8000 	nop.w
 8025854:	4607      	mov	r7, r0
 8025856:	1c78      	adds	r0, r7, #1
 8025858:	d1d6      	bne.n	8025808 <_vfiprintf_r+0x1bc>
 802585a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802585c:	07d9      	lsls	r1, r3, #31
 802585e:	d405      	bmi.n	802586c <_vfiprintf_r+0x220>
 8025860:	89ab      	ldrh	r3, [r5, #12]
 8025862:	059a      	lsls	r2, r3, #22
 8025864:	d402      	bmi.n	802586c <_vfiprintf_r+0x220>
 8025866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025868:	f7ff fcf7 	bl	802525a <__retarget_lock_release_recursive>
 802586c:	89ab      	ldrh	r3, [r5, #12]
 802586e:	065b      	lsls	r3, r3, #25
 8025870:	f53f af12 	bmi.w	8025698 <_vfiprintf_r+0x4c>
 8025874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025876:	e711      	b.n	802569c <_vfiprintf_r+0x50>
 8025878:	ab03      	add	r3, sp, #12
 802587a:	9300      	str	r3, [sp, #0]
 802587c:	462a      	mov	r2, r5
 802587e:	4b09      	ldr	r3, [pc, #36]	; (80258a4 <_vfiprintf_r+0x258>)
 8025880:	a904      	add	r1, sp, #16
 8025882:	4630      	mov	r0, r6
 8025884:	f000 f880 	bl	8025988 <_printf_i>
 8025888:	e7e4      	b.n	8025854 <_vfiprintf_r+0x208>
 802588a:	bf00      	nop
 802588c:	0802b87c 	.word	0x0802b87c
 8025890:	0802b89c 	.word	0x0802b89c
 8025894:	0802b85c 	.word	0x0802b85c
 8025898:	0802b8bc 	.word	0x0802b8bc
 802589c:	0802b8c6 	.word	0x0802b8c6
 80258a0:	00000000 	.word	0x00000000
 80258a4:	08025627 	.word	0x08025627
 80258a8:	0802b8c2 	.word	0x0802b8c2

080258ac <_printf_common>:
 80258ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80258b0:	4616      	mov	r6, r2
 80258b2:	4699      	mov	r9, r3
 80258b4:	688a      	ldr	r2, [r1, #8]
 80258b6:	690b      	ldr	r3, [r1, #16]
 80258b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80258bc:	4293      	cmp	r3, r2
 80258be:	bfb8      	it	lt
 80258c0:	4613      	movlt	r3, r2
 80258c2:	6033      	str	r3, [r6, #0]
 80258c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80258c8:	4607      	mov	r7, r0
 80258ca:	460c      	mov	r4, r1
 80258cc:	b10a      	cbz	r2, 80258d2 <_printf_common+0x26>
 80258ce:	3301      	adds	r3, #1
 80258d0:	6033      	str	r3, [r6, #0]
 80258d2:	6823      	ldr	r3, [r4, #0]
 80258d4:	0699      	lsls	r1, r3, #26
 80258d6:	bf42      	ittt	mi
 80258d8:	6833      	ldrmi	r3, [r6, #0]
 80258da:	3302      	addmi	r3, #2
 80258dc:	6033      	strmi	r3, [r6, #0]
 80258de:	6825      	ldr	r5, [r4, #0]
 80258e0:	f015 0506 	ands.w	r5, r5, #6
 80258e4:	d106      	bne.n	80258f4 <_printf_common+0x48>
 80258e6:	f104 0a19 	add.w	sl, r4, #25
 80258ea:	68e3      	ldr	r3, [r4, #12]
 80258ec:	6832      	ldr	r2, [r6, #0]
 80258ee:	1a9b      	subs	r3, r3, r2
 80258f0:	42ab      	cmp	r3, r5
 80258f2:	dc26      	bgt.n	8025942 <_printf_common+0x96>
 80258f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80258f8:	1e13      	subs	r3, r2, #0
 80258fa:	6822      	ldr	r2, [r4, #0]
 80258fc:	bf18      	it	ne
 80258fe:	2301      	movne	r3, #1
 8025900:	0692      	lsls	r2, r2, #26
 8025902:	d42b      	bmi.n	802595c <_printf_common+0xb0>
 8025904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025908:	4649      	mov	r1, r9
 802590a:	4638      	mov	r0, r7
 802590c:	47c0      	blx	r8
 802590e:	3001      	adds	r0, #1
 8025910:	d01e      	beq.n	8025950 <_printf_common+0xa4>
 8025912:	6823      	ldr	r3, [r4, #0]
 8025914:	68e5      	ldr	r5, [r4, #12]
 8025916:	6832      	ldr	r2, [r6, #0]
 8025918:	f003 0306 	and.w	r3, r3, #6
 802591c:	2b04      	cmp	r3, #4
 802591e:	bf08      	it	eq
 8025920:	1aad      	subeq	r5, r5, r2
 8025922:	68a3      	ldr	r3, [r4, #8]
 8025924:	6922      	ldr	r2, [r4, #16]
 8025926:	bf0c      	ite	eq
 8025928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802592c:	2500      	movne	r5, #0
 802592e:	4293      	cmp	r3, r2
 8025930:	bfc4      	itt	gt
 8025932:	1a9b      	subgt	r3, r3, r2
 8025934:	18ed      	addgt	r5, r5, r3
 8025936:	2600      	movs	r6, #0
 8025938:	341a      	adds	r4, #26
 802593a:	42b5      	cmp	r5, r6
 802593c:	d11a      	bne.n	8025974 <_printf_common+0xc8>
 802593e:	2000      	movs	r0, #0
 8025940:	e008      	b.n	8025954 <_printf_common+0xa8>
 8025942:	2301      	movs	r3, #1
 8025944:	4652      	mov	r2, sl
 8025946:	4649      	mov	r1, r9
 8025948:	4638      	mov	r0, r7
 802594a:	47c0      	blx	r8
 802594c:	3001      	adds	r0, #1
 802594e:	d103      	bne.n	8025958 <_printf_common+0xac>
 8025950:	f04f 30ff 	mov.w	r0, #4294967295
 8025954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025958:	3501      	adds	r5, #1
 802595a:	e7c6      	b.n	80258ea <_printf_common+0x3e>
 802595c:	18e1      	adds	r1, r4, r3
 802595e:	1c5a      	adds	r2, r3, #1
 8025960:	2030      	movs	r0, #48	; 0x30
 8025962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025966:	4422      	add	r2, r4
 8025968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802596c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025970:	3302      	adds	r3, #2
 8025972:	e7c7      	b.n	8025904 <_printf_common+0x58>
 8025974:	2301      	movs	r3, #1
 8025976:	4622      	mov	r2, r4
 8025978:	4649      	mov	r1, r9
 802597a:	4638      	mov	r0, r7
 802597c:	47c0      	blx	r8
 802597e:	3001      	adds	r0, #1
 8025980:	d0e6      	beq.n	8025950 <_printf_common+0xa4>
 8025982:	3601      	adds	r6, #1
 8025984:	e7d9      	b.n	802593a <_printf_common+0x8e>
	...

08025988 <_printf_i>:
 8025988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802598c:	7e0f      	ldrb	r7, [r1, #24]
 802598e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025990:	2f78      	cmp	r7, #120	; 0x78
 8025992:	4691      	mov	r9, r2
 8025994:	4680      	mov	r8, r0
 8025996:	460c      	mov	r4, r1
 8025998:	469a      	mov	sl, r3
 802599a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802599e:	d807      	bhi.n	80259b0 <_printf_i+0x28>
 80259a0:	2f62      	cmp	r7, #98	; 0x62
 80259a2:	d80a      	bhi.n	80259ba <_printf_i+0x32>
 80259a4:	2f00      	cmp	r7, #0
 80259a6:	f000 80d8 	beq.w	8025b5a <_printf_i+0x1d2>
 80259aa:	2f58      	cmp	r7, #88	; 0x58
 80259ac:	f000 80a3 	beq.w	8025af6 <_printf_i+0x16e>
 80259b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80259b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80259b8:	e03a      	b.n	8025a30 <_printf_i+0xa8>
 80259ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80259be:	2b15      	cmp	r3, #21
 80259c0:	d8f6      	bhi.n	80259b0 <_printf_i+0x28>
 80259c2:	a101      	add	r1, pc, #4	; (adr r1, 80259c8 <_printf_i+0x40>)
 80259c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80259c8:	08025a21 	.word	0x08025a21
 80259cc:	08025a35 	.word	0x08025a35
 80259d0:	080259b1 	.word	0x080259b1
 80259d4:	080259b1 	.word	0x080259b1
 80259d8:	080259b1 	.word	0x080259b1
 80259dc:	080259b1 	.word	0x080259b1
 80259e0:	08025a35 	.word	0x08025a35
 80259e4:	080259b1 	.word	0x080259b1
 80259e8:	080259b1 	.word	0x080259b1
 80259ec:	080259b1 	.word	0x080259b1
 80259f0:	080259b1 	.word	0x080259b1
 80259f4:	08025b41 	.word	0x08025b41
 80259f8:	08025a65 	.word	0x08025a65
 80259fc:	08025b23 	.word	0x08025b23
 8025a00:	080259b1 	.word	0x080259b1
 8025a04:	080259b1 	.word	0x080259b1
 8025a08:	08025b63 	.word	0x08025b63
 8025a0c:	080259b1 	.word	0x080259b1
 8025a10:	08025a65 	.word	0x08025a65
 8025a14:	080259b1 	.word	0x080259b1
 8025a18:	080259b1 	.word	0x080259b1
 8025a1c:	08025b2b 	.word	0x08025b2b
 8025a20:	682b      	ldr	r3, [r5, #0]
 8025a22:	1d1a      	adds	r2, r3, #4
 8025a24:	681b      	ldr	r3, [r3, #0]
 8025a26:	602a      	str	r2, [r5, #0]
 8025a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025a30:	2301      	movs	r3, #1
 8025a32:	e0a3      	b.n	8025b7c <_printf_i+0x1f4>
 8025a34:	6820      	ldr	r0, [r4, #0]
 8025a36:	6829      	ldr	r1, [r5, #0]
 8025a38:	0606      	lsls	r6, r0, #24
 8025a3a:	f101 0304 	add.w	r3, r1, #4
 8025a3e:	d50a      	bpl.n	8025a56 <_printf_i+0xce>
 8025a40:	680e      	ldr	r6, [r1, #0]
 8025a42:	602b      	str	r3, [r5, #0]
 8025a44:	2e00      	cmp	r6, #0
 8025a46:	da03      	bge.n	8025a50 <_printf_i+0xc8>
 8025a48:	232d      	movs	r3, #45	; 0x2d
 8025a4a:	4276      	negs	r6, r6
 8025a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025a50:	485e      	ldr	r0, [pc, #376]	; (8025bcc <_printf_i+0x244>)
 8025a52:	230a      	movs	r3, #10
 8025a54:	e019      	b.n	8025a8a <_printf_i+0x102>
 8025a56:	680e      	ldr	r6, [r1, #0]
 8025a58:	602b      	str	r3, [r5, #0]
 8025a5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025a5e:	bf18      	it	ne
 8025a60:	b236      	sxthne	r6, r6
 8025a62:	e7ef      	b.n	8025a44 <_printf_i+0xbc>
 8025a64:	682b      	ldr	r3, [r5, #0]
 8025a66:	6820      	ldr	r0, [r4, #0]
 8025a68:	1d19      	adds	r1, r3, #4
 8025a6a:	6029      	str	r1, [r5, #0]
 8025a6c:	0601      	lsls	r1, r0, #24
 8025a6e:	d501      	bpl.n	8025a74 <_printf_i+0xec>
 8025a70:	681e      	ldr	r6, [r3, #0]
 8025a72:	e002      	b.n	8025a7a <_printf_i+0xf2>
 8025a74:	0646      	lsls	r6, r0, #25
 8025a76:	d5fb      	bpl.n	8025a70 <_printf_i+0xe8>
 8025a78:	881e      	ldrh	r6, [r3, #0]
 8025a7a:	4854      	ldr	r0, [pc, #336]	; (8025bcc <_printf_i+0x244>)
 8025a7c:	2f6f      	cmp	r7, #111	; 0x6f
 8025a7e:	bf0c      	ite	eq
 8025a80:	2308      	moveq	r3, #8
 8025a82:	230a      	movne	r3, #10
 8025a84:	2100      	movs	r1, #0
 8025a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025a8a:	6865      	ldr	r5, [r4, #4]
 8025a8c:	60a5      	str	r5, [r4, #8]
 8025a8e:	2d00      	cmp	r5, #0
 8025a90:	bfa2      	ittt	ge
 8025a92:	6821      	ldrge	r1, [r4, #0]
 8025a94:	f021 0104 	bicge.w	r1, r1, #4
 8025a98:	6021      	strge	r1, [r4, #0]
 8025a9a:	b90e      	cbnz	r6, 8025aa0 <_printf_i+0x118>
 8025a9c:	2d00      	cmp	r5, #0
 8025a9e:	d04d      	beq.n	8025b3c <_printf_i+0x1b4>
 8025aa0:	4615      	mov	r5, r2
 8025aa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8025aa6:	fb03 6711 	mls	r7, r3, r1, r6
 8025aaa:	5dc7      	ldrb	r7, [r0, r7]
 8025aac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025ab0:	4637      	mov	r7, r6
 8025ab2:	42bb      	cmp	r3, r7
 8025ab4:	460e      	mov	r6, r1
 8025ab6:	d9f4      	bls.n	8025aa2 <_printf_i+0x11a>
 8025ab8:	2b08      	cmp	r3, #8
 8025aba:	d10b      	bne.n	8025ad4 <_printf_i+0x14c>
 8025abc:	6823      	ldr	r3, [r4, #0]
 8025abe:	07de      	lsls	r6, r3, #31
 8025ac0:	d508      	bpl.n	8025ad4 <_printf_i+0x14c>
 8025ac2:	6923      	ldr	r3, [r4, #16]
 8025ac4:	6861      	ldr	r1, [r4, #4]
 8025ac6:	4299      	cmp	r1, r3
 8025ac8:	bfde      	ittt	le
 8025aca:	2330      	movle	r3, #48	; 0x30
 8025acc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025ad0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025ad4:	1b52      	subs	r2, r2, r5
 8025ad6:	6122      	str	r2, [r4, #16]
 8025ad8:	f8cd a000 	str.w	sl, [sp]
 8025adc:	464b      	mov	r3, r9
 8025ade:	aa03      	add	r2, sp, #12
 8025ae0:	4621      	mov	r1, r4
 8025ae2:	4640      	mov	r0, r8
 8025ae4:	f7ff fee2 	bl	80258ac <_printf_common>
 8025ae8:	3001      	adds	r0, #1
 8025aea:	d14c      	bne.n	8025b86 <_printf_i+0x1fe>
 8025aec:	f04f 30ff 	mov.w	r0, #4294967295
 8025af0:	b004      	add	sp, #16
 8025af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025af6:	4835      	ldr	r0, [pc, #212]	; (8025bcc <_printf_i+0x244>)
 8025af8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025afc:	6829      	ldr	r1, [r5, #0]
 8025afe:	6823      	ldr	r3, [r4, #0]
 8025b00:	f851 6b04 	ldr.w	r6, [r1], #4
 8025b04:	6029      	str	r1, [r5, #0]
 8025b06:	061d      	lsls	r5, r3, #24
 8025b08:	d514      	bpl.n	8025b34 <_printf_i+0x1ac>
 8025b0a:	07df      	lsls	r7, r3, #31
 8025b0c:	bf44      	itt	mi
 8025b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8025b12:	6023      	strmi	r3, [r4, #0]
 8025b14:	b91e      	cbnz	r6, 8025b1e <_printf_i+0x196>
 8025b16:	6823      	ldr	r3, [r4, #0]
 8025b18:	f023 0320 	bic.w	r3, r3, #32
 8025b1c:	6023      	str	r3, [r4, #0]
 8025b1e:	2310      	movs	r3, #16
 8025b20:	e7b0      	b.n	8025a84 <_printf_i+0xfc>
 8025b22:	6823      	ldr	r3, [r4, #0]
 8025b24:	f043 0320 	orr.w	r3, r3, #32
 8025b28:	6023      	str	r3, [r4, #0]
 8025b2a:	2378      	movs	r3, #120	; 0x78
 8025b2c:	4828      	ldr	r0, [pc, #160]	; (8025bd0 <_printf_i+0x248>)
 8025b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025b32:	e7e3      	b.n	8025afc <_printf_i+0x174>
 8025b34:	0659      	lsls	r1, r3, #25
 8025b36:	bf48      	it	mi
 8025b38:	b2b6      	uxthmi	r6, r6
 8025b3a:	e7e6      	b.n	8025b0a <_printf_i+0x182>
 8025b3c:	4615      	mov	r5, r2
 8025b3e:	e7bb      	b.n	8025ab8 <_printf_i+0x130>
 8025b40:	682b      	ldr	r3, [r5, #0]
 8025b42:	6826      	ldr	r6, [r4, #0]
 8025b44:	6961      	ldr	r1, [r4, #20]
 8025b46:	1d18      	adds	r0, r3, #4
 8025b48:	6028      	str	r0, [r5, #0]
 8025b4a:	0635      	lsls	r5, r6, #24
 8025b4c:	681b      	ldr	r3, [r3, #0]
 8025b4e:	d501      	bpl.n	8025b54 <_printf_i+0x1cc>
 8025b50:	6019      	str	r1, [r3, #0]
 8025b52:	e002      	b.n	8025b5a <_printf_i+0x1d2>
 8025b54:	0670      	lsls	r0, r6, #25
 8025b56:	d5fb      	bpl.n	8025b50 <_printf_i+0x1c8>
 8025b58:	8019      	strh	r1, [r3, #0]
 8025b5a:	2300      	movs	r3, #0
 8025b5c:	6123      	str	r3, [r4, #16]
 8025b5e:	4615      	mov	r5, r2
 8025b60:	e7ba      	b.n	8025ad8 <_printf_i+0x150>
 8025b62:	682b      	ldr	r3, [r5, #0]
 8025b64:	1d1a      	adds	r2, r3, #4
 8025b66:	602a      	str	r2, [r5, #0]
 8025b68:	681d      	ldr	r5, [r3, #0]
 8025b6a:	6862      	ldr	r2, [r4, #4]
 8025b6c:	2100      	movs	r1, #0
 8025b6e:	4628      	mov	r0, r5
 8025b70:	f7da fb7e 	bl	8000270 <memchr>
 8025b74:	b108      	cbz	r0, 8025b7a <_printf_i+0x1f2>
 8025b76:	1b40      	subs	r0, r0, r5
 8025b78:	6060      	str	r0, [r4, #4]
 8025b7a:	6863      	ldr	r3, [r4, #4]
 8025b7c:	6123      	str	r3, [r4, #16]
 8025b7e:	2300      	movs	r3, #0
 8025b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025b84:	e7a8      	b.n	8025ad8 <_printf_i+0x150>
 8025b86:	6923      	ldr	r3, [r4, #16]
 8025b88:	462a      	mov	r2, r5
 8025b8a:	4649      	mov	r1, r9
 8025b8c:	4640      	mov	r0, r8
 8025b8e:	47d0      	blx	sl
 8025b90:	3001      	adds	r0, #1
 8025b92:	d0ab      	beq.n	8025aec <_printf_i+0x164>
 8025b94:	6823      	ldr	r3, [r4, #0]
 8025b96:	079b      	lsls	r3, r3, #30
 8025b98:	d413      	bmi.n	8025bc2 <_printf_i+0x23a>
 8025b9a:	68e0      	ldr	r0, [r4, #12]
 8025b9c:	9b03      	ldr	r3, [sp, #12]
 8025b9e:	4298      	cmp	r0, r3
 8025ba0:	bfb8      	it	lt
 8025ba2:	4618      	movlt	r0, r3
 8025ba4:	e7a4      	b.n	8025af0 <_printf_i+0x168>
 8025ba6:	2301      	movs	r3, #1
 8025ba8:	4632      	mov	r2, r6
 8025baa:	4649      	mov	r1, r9
 8025bac:	4640      	mov	r0, r8
 8025bae:	47d0      	blx	sl
 8025bb0:	3001      	adds	r0, #1
 8025bb2:	d09b      	beq.n	8025aec <_printf_i+0x164>
 8025bb4:	3501      	adds	r5, #1
 8025bb6:	68e3      	ldr	r3, [r4, #12]
 8025bb8:	9903      	ldr	r1, [sp, #12]
 8025bba:	1a5b      	subs	r3, r3, r1
 8025bbc:	42ab      	cmp	r3, r5
 8025bbe:	dcf2      	bgt.n	8025ba6 <_printf_i+0x21e>
 8025bc0:	e7eb      	b.n	8025b9a <_printf_i+0x212>
 8025bc2:	2500      	movs	r5, #0
 8025bc4:	f104 0619 	add.w	r6, r4, #25
 8025bc8:	e7f5      	b.n	8025bb6 <_printf_i+0x22e>
 8025bca:	bf00      	nop
 8025bcc:	0802b8cd 	.word	0x0802b8cd
 8025bd0:	0802b8de 	.word	0x0802b8de

08025bd4 <_putc_r>:
 8025bd4:	b570      	push	{r4, r5, r6, lr}
 8025bd6:	460d      	mov	r5, r1
 8025bd8:	4614      	mov	r4, r2
 8025bda:	4606      	mov	r6, r0
 8025bdc:	b118      	cbz	r0, 8025be6 <_putc_r+0x12>
 8025bde:	6983      	ldr	r3, [r0, #24]
 8025be0:	b90b      	cbnz	r3, 8025be6 <_putc_r+0x12>
 8025be2:	f7ff fa89 	bl	80250f8 <__sinit>
 8025be6:	4b1c      	ldr	r3, [pc, #112]	; (8025c58 <_putc_r+0x84>)
 8025be8:	429c      	cmp	r4, r3
 8025bea:	d124      	bne.n	8025c36 <_putc_r+0x62>
 8025bec:	6874      	ldr	r4, [r6, #4]
 8025bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025bf0:	07d8      	lsls	r0, r3, #31
 8025bf2:	d405      	bmi.n	8025c00 <_putc_r+0x2c>
 8025bf4:	89a3      	ldrh	r3, [r4, #12]
 8025bf6:	0599      	lsls	r1, r3, #22
 8025bf8:	d402      	bmi.n	8025c00 <_putc_r+0x2c>
 8025bfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025bfc:	f7ff fb2c 	bl	8025258 <__retarget_lock_acquire_recursive>
 8025c00:	68a3      	ldr	r3, [r4, #8]
 8025c02:	3b01      	subs	r3, #1
 8025c04:	2b00      	cmp	r3, #0
 8025c06:	60a3      	str	r3, [r4, #8]
 8025c08:	da05      	bge.n	8025c16 <_putc_r+0x42>
 8025c0a:	69a2      	ldr	r2, [r4, #24]
 8025c0c:	4293      	cmp	r3, r2
 8025c0e:	db1c      	blt.n	8025c4a <_putc_r+0x76>
 8025c10:	b2eb      	uxtb	r3, r5
 8025c12:	2b0a      	cmp	r3, #10
 8025c14:	d019      	beq.n	8025c4a <_putc_r+0x76>
 8025c16:	6823      	ldr	r3, [r4, #0]
 8025c18:	1c5a      	adds	r2, r3, #1
 8025c1a:	6022      	str	r2, [r4, #0]
 8025c1c:	701d      	strb	r5, [r3, #0]
 8025c1e:	b2ed      	uxtb	r5, r5
 8025c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025c22:	07da      	lsls	r2, r3, #31
 8025c24:	d405      	bmi.n	8025c32 <_putc_r+0x5e>
 8025c26:	89a3      	ldrh	r3, [r4, #12]
 8025c28:	059b      	lsls	r3, r3, #22
 8025c2a:	d402      	bmi.n	8025c32 <_putc_r+0x5e>
 8025c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c2e:	f7ff fb14 	bl	802525a <__retarget_lock_release_recursive>
 8025c32:	4628      	mov	r0, r5
 8025c34:	bd70      	pop	{r4, r5, r6, pc}
 8025c36:	4b09      	ldr	r3, [pc, #36]	; (8025c5c <_putc_r+0x88>)
 8025c38:	429c      	cmp	r4, r3
 8025c3a:	d101      	bne.n	8025c40 <_putc_r+0x6c>
 8025c3c:	68b4      	ldr	r4, [r6, #8]
 8025c3e:	e7d6      	b.n	8025bee <_putc_r+0x1a>
 8025c40:	4b07      	ldr	r3, [pc, #28]	; (8025c60 <_putc_r+0x8c>)
 8025c42:	429c      	cmp	r4, r3
 8025c44:	bf08      	it	eq
 8025c46:	68f4      	ldreq	r4, [r6, #12]
 8025c48:	e7d1      	b.n	8025bee <_putc_r+0x1a>
 8025c4a:	4629      	mov	r1, r5
 8025c4c:	4622      	mov	r2, r4
 8025c4e:	4630      	mov	r0, r6
 8025c50:	f7ff f85a 	bl	8024d08 <__swbuf_r>
 8025c54:	4605      	mov	r5, r0
 8025c56:	e7e3      	b.n	8025c20 <_putc_r+0x4c>
 8025c58:	0802b87c 	.word	0x0802b87c
 8025c5c:	0802b89c 	.word	0x0802b89c
 8025c60:	0802b85c 	.word	0x0802b85c

08025c64 <__sread>:
 8025c64:	b510      	push	{r4, lr}
 8025c66:	460c      	mov	r4, r1
 8025c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c6c:	f000 f8cc 	bl	8025e08 <_read_r>
 8025c70:	2800      	cmp	r0, #0
 8025c72:	bfab      	itete	ge
 8025c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025c76:	89a3      	ldrhlt	r3, [r4, #12]
 8025c78:	181b      	addge	r3, r3, r0
 8025c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025c7e:	bfac      	ite	ge
 8025c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8025c82:	81a3      	strhlt	r3, [r4, #12]
 8025c84:	bd10      	pop	{r4, pc}

08025c86 <__swrite>:
 8025c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c8a:	461f      	mov	r7, r3
 8025c8c:	898b      	ldrh	r3, [r1, #12]
 8025c8e:	05db      	lsls	r3, r3, #23
 8025c90:	4605      	mov	r5, r0
 8025c92:	460c      	mov	r4, r1
 8025c94:	4616      	mov	r6, r2
 8025c96:	d505      	bpl.n	8025ca4 <__swrite+0x1e>
 8025c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c9c:	2302      	movs	r3, #2
 8025c9e:	2200      	movs	r2, #0
 8025ca0:	f000 f870 	bl	8025d84 <_lseek_r>
 8025ca4:	89a3      	ldrh	r3, [r4, #12]
 8025ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025cae:	81a3      	strh	r3, [r4, #12]
 8025cb0:	4632      	mov	r2, r6
 8025cb2:	463b      	mov	r3, r7
 8025cb4:	4628      	mov	r0, r5
 8025cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025cba:	f000 b817 	b.w	8025cec <_write_r>

08025cbe <__sseek>:
 8025cbe:	b510      	push	{r4, lr}
 8025cc0:	460c      	mov	r4, r1
 8025cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025cc6:	f000 f85d 	bl	8025d84 <_lseek_r>
 8025cca:	1c43      	adds	r3, r0, #1
 8025ccc:	89a3      	ldrh	r3, [r4, #12]
 8025cce:	bf15      	itete	ne
 8025cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8025cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025cda:	81a3      	strheq	r3, [r4, #12]
 8025cdc:	bf18      	it	ne
 8025cde:	81a3      	strhne	r3, [r4, #12]
 8025ce0:	bd10      	pop	{r4, pc}

08025ce2 <__sclose>:
 8025ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025ce6:	f000 b81b 	b.w	8025d20 <_close_r>
	...

08025cec <_write_r>:
 8025cec:	b538      	push	{r3, r4, r5, lr}
 8025cee:	4d07      	ldr	r5, [pc, #28]	; (8025d0c <_write_r+0x20>)
 8025cf0:	4604      	mov	r4, r0
 8025cf2:	4608      	mov	r0, r1
 8025cf4:	4611      	mov	r1, r2
 8025cf6:	2200      	movs	r2, #0
 8025cf8:	602a      	str	r2, [r5, #0]
 8025cfa:	461a      	mov	r2, r3
 8025cfc:	f7f0 ff3b 	bl	8016b76 <_write>
 8025d00:	1c43      	adds	r3, r0, #1
 8025d02:	d102      	bne.n	8025d0a <_write_r+0x1e>
 8025d04:	682b      	ldr	r3, [r5, #0]
 8025d06:	b103      	cbz	r3, 8025d0a <_write_r+0x1e>
 8025d08:	6023      	str	r3, [r4, #0]
 8025d0a:	bd38      	pop	{r3, r4, r5, pc}
 8025d0c:	200199e8 	.word	0x200199e8

08025d10 <abort>:
 8025d10:	b508      	push	{r3, lr}
 8025d12:	2006      	movs	r0, #6
 8025d14:	f000 f8b2 	bl	8025e7c <raise>
 8025d18:	2001      	movs	r0, #1
 8025d1a:	f7f0 ff05 	bl	8016b28 <_exit>
	...

08025d20 <_close_r>:
 8025d20:	b538      	push	{r3, r4, r5, lr}
 8025d22:	4d06      	ldr	r5, [pc, #24]	; (8025d3c <_close_r+0x1c>)
 8025d24:	2300      	movs	r3, #0
 8025d26:	4604      	mov	r4, r0
 8025d28:	4608      	mov	r0, r1
 8025d2a:	602b      	str	r3, [r5, #0]
 8025d2c:	f7f0 ff3f 	bl	8016bae <_close>
 8025d30:	1c43      	adds	r3, r0, #1
 8025d32:	d102      	bne.n	8025d3a <_close_r+0x1a>
 8025d34:	682b      	ldr	r3, [r5, #0]
 8025d36:	b103      	cbz	r3, 8025d3a <_close_r+0x1a>
 8025d38:	6023      	str	r3, [r4, #0]
 8025d3a:	bd38      	pop	{r3, r4, r5, pc}
 8025d3c:	200199e8 	.word	0x200199e8

08025d40 <_fstat_r>:
 8025d40:	b538      	push	{r3, r4, r5, lr}
 8025d42:	4d07      	ldr	r5, [pc, #28]	; (8025d60 <_fstat_r+0x20>)
 8025d44:	2300      	movs	r3, #0
 8025d46:	4604      	mov	r4, r0
 8025d48:	4608      	mov	r0, r1
 8025d4a:	4611      	mov	r1, r2
 8025d4c:	602b      	str	r3, [r5, #0]
 8025d4e:	f7f0 ff3a 	bl	8016bc6 <_fstat>
 8025d52:	1c43      	adds	r3, r0, #1
 8025d54:	d102      	bne.n	8025d5c <_fstat_r+0x1c>
 8025d56:	682b      	ldr	r3, [r5, #0]
 8025d58:	b103      	cbz	r3, 8025d5c <_fstat_r+0x1c>
 8025d5a:	6023      	str	r3, [r4, #0]
 8025d5c:	bd38      	pop	{r3, r4, r5, pc}
 8025d5e:	bf00      	nop
 8025d60:	200199e8 	.word	0x200199e8

08025d64 <_isatty_r>:
 8025d64:	b538      	push	{r3, r4, r5, lr}
 8025d66:	4d06      	ldr	r5, [pc, #24]	; (8025d80 <_isatty_r+0x1c>)
 8025d68:	2300      	movs	r3, #0
 8025d6a:	4604      	mov	r4, r0
 8025d6c:	4608      	mov	r0, r1
 8025d6e:	602b      	str	r3, [r5, #0]
 8025d70:	f7f0 ff39 	bl	8016be6 <_isatty>
 8025d74:	1c43      	adds	r3, r0, #1
 8025d76:	d102      	bne.n	8025d7e <_isatty_r+0x1a>
 8025d78:	682b      	ldr	r3, [r5, #0]
 8025d7a:	b103      	cbz	r3, 8025d7e <_isatty_r+0x1a>
 8025d7c:	6023      	str	r3, [r4, #0]
 8025d7e:	bd38      	pop	{r3, r4, r5, pc}
 8025d80:	200199e8 	.word	0x200199e8

08025d84 <_lseek_r>:
 8025d84:	b538      	push	{r3, r4, r5, lr}
 8025d86:	4d07      	ldr	r5, [pc, #28]	; (8025da4 <_lseek_r+0x20>)
 8025d88:	4604      	mov	r4, r0
 8025d8a:	4608      	mov	r0, r1
 8025d8c:	4611      	mov	r1, r2
 8025d8e:	2200      	movs	r2, #0
 8025d90:	602a      	str	r2, [r5, #0]
 8025d92:	461a      	mov	r2, r3
 8025d94:	f7f0 ff32 	bl	8016bfc <_lseek>
 8025d98:	1c43      	adds	r3, r0, #1
 8025d9a:	d102      	bne.n	8025da2 <_lseek_r+0x1e>
 8025d9c:	682b      	ldr	r3, [r5, #0]
 8025d9e:	b103      	cbz	r3, 8025da2 <_lseek_r+0x1e>
 8025da0:	6023      	str	r3, [r4, #0]
 8025da2:	bd38      	pop	{r3, r4, r5, pc}
 8025da4:	200199e8 	.word	0x200199e8

08025da8 <_realloc_r>:
 8025da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025dac:	4680      	mov	r8, r0
 8025dae:	4614      	mov	r4, r2
 8025db0:	460e      	mov	r6, r1
 8025db2:	b921      	cbnz	r1, 8025dbe <_realloc_r+0x16>
 8025db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025db8:	4611      	mov	r1, r2
 8025dba:	f7fe bd59 	b.w	8024870 <_malloc_r>
 8025dbe:	b92a      	cbnz	r2, 8025dcc <_realloc_r+0x24>
 8025dc0:	f7fe fcea 	bl	8024798 <_free_r>
 8025dc4:	4625      	mov	r5, r4
 8025dc6:	4628      	mov	r0, r5
 8025dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025dcc:	f000 f872 	bl	8025eb4 <_malloc_usable_size_r>
 8025dd0:	4284      	cmp	r4, r0
 8025dd2:	4607      	mov	r7, r0
 8025dd4:	d802      	bhi.n	8025ddc <_realloc_r+0x34>
 8025dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8025dda:	d812      	bhi.n	8025e02 <_realloc_r+0x5a>
 8025ddc:	4621      	mov	r1, r4
 8025dde:	4640      	mov	r0, r8
 8025de0:	f7fe fd46 	bl	8024870 <_malloc_r>
 8025de4:	4605      	mov	r5, r0
 8025de6:	2800      	cmp	r0, #0
 8025de8:	d0ed      	beq.n	8025dc6 <_realloc_r+0x1e>
 8025dea:	42bc      	cmp	r4, r7
 8025dec:	4622      	mov	r2, r4
 8025dee:	4631      	mov	r1, r6
 8025df0:	bf28      	it	cs
 8025df2:	463a      	movcs	r2, r7
 8025df4:	f7fe fca0 	bl	8024738 <memcpy>
 8025df8:	4631      	mov	r1, r6
 8025dfa:	4640      	mov	r0, r8
 8025dfc:	f7fe fccc 	bl	8024798 <_free_r>
 8025e00:	e7e1      	b.n	8025dc6 <_realloc_r+0x1e>
 8025e02:	4635      	mov	r5, r6
 8025e04:	e7df      	b.n	8025dc6 <_realloc_r+0x1e>
	...

08025e08 <_read_r>:
 8025e08:	b538      	push	{r3, r4, r5, lr}
 8025e0a:	4d07      	ldr	r5, [pc, #28]	; (8025e28 <_read_r+0x20>)
 8025e0c:	4604      	mov	r4, r0
 8025e0e:	4608      	mov	r0, r1
 8025e10:	4611      	mov	r1, r2
 8025e12:	2200      	movs	r2, #0
 8025e14:	602a      	str	r2, [r5, #0]
 8025e16:	461a      	mov	r2, r3
 8025e18:	f7f0 fe90 	bl	8016b3c <_read>
 8025e1c:	1c43      	adds	r3, r0, #1
 8025e1e:	d102      	bne.n	8025e26 <_read_r+0x1e>
 8025e20:	682b      	ldr	r3, [r5, #0]
 8025e22:	b103      	cbz	r3, 8025e26 <_read_r+0x1e>
 8025e24:	6023      	str	r3, [r4, #0]
 8025e26:	bd38      	pop	{r3, r4, r5, pc}
 8025e28:	200199e8 	.word	0x200199e8

08025e2c <_raise_r>:
 8025e2c:	291f      	cmp	r1, #31
 8025e2e:	b538      	push	{r3, r4, r5, lr}
 8025e30:	4604      	mov	r4, r0
 8025e32:	460d      	mov	r5, r1
 8025e34:	d904      	bls.n	8025e40 <_raise_r+0x14>
 8025e36:	2316      	movs	r3, #22
 8025e38:	6003      	str	r3, [r0, #0]
 8025e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8025e3e:	bd38      	pop	{r3, r4, r5, pc}
 8025e40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025e42:	b112      	cbz	r2, 8025e4a <_raise_r+0x1e>
 8025e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025e48:	b94b      	cbnz	r3, 8025e5e <_raise_r+0x32>
 8025e4a:	4620      	mov	r0, r4
 8025e4c:	f000 f830 	bl	8025eb0 <_getpid_r>
 8025e50:	462a      	mov	r2, r5
 8025e52:	4601      	mov	r1, r0
 8025e54:	4620      	mov	r0, r4
 8025e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025e5a:	f000 b817 	b.w	8025e8c <_kill_r>
 8025e5e:	2b01      	cmp	r3, #1
 8025e60:	d00a      	beq.n	8025e78 <_raise_r+0x4c>
 8025e62:	1c59      	adds	r1, r3, #1
 8025e64:	d103      	bne.n	8025e6e <_raise_r+0x42>
 8025e66:	2316      	movs	r3, #22
 8025e68:	6003      	str	r3, [r0, #0]
 8025e6a:	2001      	movs	r0, #1
 8025e6c:	e7e7      	b.n	8025e3e <_raise_r+0x12>
 8025e6e:	2400      	movs	r4, #0
 8025e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025e74:	4628      	mov	r0, r5
 8025e76:	4798      	blx	r3
 8025e78:	2000      	movs	r0, #0
 8025e7a:	e7e0      	b.n	8025e3e <_raise_r+0x12>

08025e7c <raise>:
 8025e7c:	4b02      	ldr	r3, [pc, #8]	; (8025e88 <raise+0xc>)
 8025e7e:	4601      	mov	r1, r0
 8025e80:	6818      	ldr	r0, [r3, #0]
 8025e82:	f7ff bfd3 	b.w	8025e2c <_raise_r>
 8025e86:	bf00      	nop
 8025e88:	20000140 	.word	0x20000140

08025e8c <_kill_r>:
 8025e8c:	b538      	push	{r3, r4, r5, lr}
 8025e8e:	4d07      	ldr	r5, [pc, #28]	; (8025eac <_kill_r+0x20>)
 8025e90:	2300      	movs	r3, #0
 8025e92:	4604      	mov	r4, r0
 8025e94:	4608      	mov	r0, r1
 8025e96:	4611      	mov	r1, r2
 8025e98:	602b      	str	r3, [r5, #0]
 8025e9a:	f7f0 fe33 	bl	8016b04 <_kill>
 8025e9e:	1c43      	adds	r3, r0, #1
 8025ea0:	d102      	bne.n	8025ea8 <_kill_r+0x1c>
 8025ea2:	682b      	ldr	r3, [r5, #0]
 8025ea4:	b103      	cbz	r3, 8025ea8 <_kill_r+0x1c>
 8025ea6:	6023      	str	r3, [r4, #0]
 8025ea8:	bd38      	pop	{r3, r4, r5, pc}
 8025eaa:	bf00      	nop
 8025eac:	200199e8 	.word	0x200199e8

08025eb0 <_getpid_r>:
 8025eb0:	f7f0 be20 	b.w	8016af4 <_getpid>

08025eb4 <_malloc_usable_size_r>:
 8025eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025eb8:	1f18      	subs	r0, r3, #4
 8025eba:	2b00      	cmp	r3, #0
 8025ebc:	bfbc      	itt	lt
 8025ebe:	580b      	ldrlt	r3, [r1, r0]
 8025ec0:	18c0      	addlt	r0, r0, r3
 8025ec2:	4770      	bx	lr

08025ec4 <_init>:
 8025ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ec6:	bf00      	nop
 8025ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025eca:	bc08      	pop	{r3}
 8025ecc:	469e      	mov	lr, r3
 8025ece:	4770      	bx	lr

08025ed0 <_fini>:
 8025ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ed2:	bf00      	nop
 8025ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025ed6:	bc08      	pop	{r3}
 8025ed8:	469e      	mov	lr, r3
 8025eda:	4770      	bx	lr
