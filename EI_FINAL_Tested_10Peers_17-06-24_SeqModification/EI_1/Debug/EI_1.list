
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000266e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b80  080268e4  080268e4  000368e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c464  0802c464  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802c464  0802c464  0003c464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c46c  0802c46c  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c46c  0802c46c  0003c46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c470  0802c470  0003c470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0802c474  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  0802c618  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  0802c6b8  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00014d28  200002e4  0802c758  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2001500c  0802c758  0004500c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039cbc  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000860a  00000000  00000000  00079fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002510  00000000  00000000  000825d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002230  00000000  00000000  00084ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043982  00000000  00000000  00086d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047b48  00000000  00000000  000ca69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013c2d5  00000000  00000000  001121e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0024e4b7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a27c  00000000  00000000  0024e508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	080268cc 	.word	0x080268cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	080268cc 	.word	0x080268cc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000dc0 	.word	0x20000dc0
 8000a70:	080268e4 	.word	0x080268e4
 8000a74:	080268f0 	.word	0x080268f0
 8000a78:	08026900 	.word	0x08026900
 8000a7c:	08026910 	.word	0x08026910
 8000a80:	08026924 	.word	0x08026924
 8000a84:	08026938 	.word	0x08026938
 8000a88:	0802694c 	.word	0x0802694c
 8000a8c:	08026958 	.word	0x08026958
 8000a90:	200011a8 	.word	0x200011a8

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01d fa19 	bl	801dedc <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f024 fd45 	bl	8025544 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000c9ac 	.word	0x2000c9ac
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f01a f8ed 	bl	801acbc <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f01a f8dd 	bl	801acbc <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f01a f8cc 	bl	801acbc <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000db8 	.word	0x20000db8
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f024 fb08 	bl	8025190 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f f87b 	bl	800fc80 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f017 f8b1 	bl	8017cfc <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f017 f860 	bl	8017c7c <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f024 fbbe 	bl	8025360 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f024 fc32 	bl	8025498 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f024 fb88 	bl	8025360 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f024 fc03 	bl	8025498 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f024 fb56 	bl	8025360 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f024 fbef 	bl	8025498 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f024 fb39 	bl	8025360 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f024 fb2b 	bl	8025360 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f024 fbc4 	bl	8025498 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f024 fb0b 	bl	8025360 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f024 fafd 	bl	8025360 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f024 fb96 	bl	8025498 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f024 fad8 	bl	8025360 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f024 fab6 	bl	8025360 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f024 fa9d 	bl	8025360 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f024 fa8f 	bl	8025360 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f024 fa81 	bl	8025360 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f024 fb19 	bl	8025498 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00f fcb7 	bl	80107e8 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000ad68 	.word	0x2000ad68
 8000e88:	08026960 	.word	0x08026960
 8000e8c:	200009b4 	.word	0x200009b4
 8000e90:	08026978 	.word	0x08026978
 8000e94:	20000df2 	.word	0x20000df2
 8000e98:	080269b8 	.word	0x080269b8
 8000e9c:	200009b5 	.word	0x200009b5
 8000ea0:	080269cc 	.word	0x080269cc
 8000ea4:	20000e24 	.word	0x20000e24
 8000ea8:	080269e8 	.word	0x080269e8
 8000eac:	08026a04 	.word	0x08026a04
 8000eb0:	20001d88 	.word	0x20001d88
 8000eb4:	08026a14 	.word	0x08026a14
 8000eb8:	20000e56 	.word	0x20000e56
 8000ebc:	08026a28 	.word	0x08026a28
 8000ec0:	20000e88 	.word	0x20000e88
 8000ec4:	08026a38 	.word	0x08026a38
 8000ec8:	20000eba 	.word	0x20000eba
 8000ecc:	20000eec 	.word	0x20000eec
 8000ed0:	20000f1e 	.word	0x20000f1e
 8000ed4:	08026a54 	.word	0x08026a54
 8000ed8:	20000f50 	.word	0x20000f50
 8000edc:	08026a64 	.word	0x08026a64
 8000ee0:	20000f82 	.word	0x20000f82

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f024 f900 	bl	8025120 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000dc0 	.word	0x20000dc0
 8000f48:	200011a8 	.word	0x200011a8

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f024 f913 	bl	8025190 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00f fa44 	bl	8010404 <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00f f9f5 	bl	80103dc <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d906      	bls.n	800101a <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8a3 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001020:	bf00      	nop
 8001022:	3788      	adds	r7, #136	; 0x88
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	; 0x88
 800102c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	227c      	movs	r2, #124	; 0x7c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f024 f8a5 	bl	8025190 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <Process_Hitachi_Packets_Com+0x12c>)
 8001054:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <Process_Hitachi_Packets_Com+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00e fe0d 	bl	800fc80 <HAL_Elaps_Ticks>
 8001066:	4603      	mov	r3, r0
 8001068:	2b13      	cmp	r3, #19
 800106a:	d96e      	bls.n	800114a <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 800106c:	e04a      	b.n	8001104 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800106e:	2003      	movs	r0, #3
 8001070:	f016 fe44 	bl	8017cfc <Com_Get_Byte>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800107a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800107e:	2b7e      	cmp	r3, #126	; 0x7e
 8001080:	d90a      	bls.n	8001098 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <Process_Hitachi_Packets_Com+0x134>)
 800108c:	f024 f968 	bl	8025360 <iprintf>
			Traverser = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001096:	e03d      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001098:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800109c:	2bf4      	cmp	r3, #244	; 0xf4
 800109e:	d002      	beq.n	80010a6 <Process_Hitachi_Packets_Com+0x7e>
 80010a0:	2bf6      	cmp	r3, #246	; 0xf6
 80010a2:	d00c      	beq.n	80010be <Process_Hitachi_Packets_Com+0x96>
 80010a4:	e01b      	b.n	80010de <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010b0:	3388      	adds	r3, #136	; 0x88
 80010b2:	443b      	add	r3, r7
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010b8:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010bc:	e01e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c8:	3388      	adds	r3, #136	; 0x88
 80010ca:	443b      	add	r3, r7
 80010cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010dc:	e00e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010f0:	3388      	adds	r3, #136	; 0x88
 80010f2:	443b      	add	r3, r7
 80010f4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010f8:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001104:	2003      	movs	r0, #3
 8001106:	f016 fdb9 	bl	8017c7c <Com_DataReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ae      	bne.n	800106e <Process_Hitachi_Packets_Com+0x46>
 8001110:	e000      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001112:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 800111c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d906      	bls.n	8001132 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001124:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f817 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f024 f826 	bl	8025190 <memset>
 8001144:	e002      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 800114a:	bf00      	nop
	}
}
 800114c:	3788      	adds	r7, #136	; 0x88
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000304 	.word	0x20000304
 8001158:	2000ad64 	.word	0x2000ad64
 800115c:	08026aa0 	.word	0x08026aa0

08001160 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	227c      	movs	r2, #124	; 0x7c
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f024 f809 	bl	8025190 <memset>
	uint16_t des_index=0,src_index=0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001196:	e034      	b.n	8001202 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bf0      	cmp	r3, #240	; 0xf0
 80011a4:	d118      	bne.n	80011d8 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b4:	3301      	adds	r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3390      	adds	r3, #144	; 0x90
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011d6:	e00a      	b.n	80011ee <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3390      	adds	r3, #144	; 0x90
 80011e8:	443b      	add	r3, r7
 80011ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80011ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800120a:	429a      	cmp	r2, r3
 800120c:	d3c4      	bcc.n	8001198 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 800120e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f805 	bl	8001228 <EI_Data_Analyzer>
}
 800121e:	bf00      	nop
 8001220:	3790      	adds	r7, #144	; 0x90
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	2300      	movs	r3, #0
 800123e:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001248:	f017 f880 	bl	801834c <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800124e:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <EI_Data_Analyzer+0x2c4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <EI_Data_Analyzer+0x52>
 8001256:	f017 f879 	bl	801834c <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	4293      	cmp	r3, r2
 8001262:	d90a      	bls.n	800127a <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001264:	48a2      	ldr	r0, [pc, #648]	; (80014f0 <EI_Data_Analyzer+0x2c8>)
 8001266:	f024 f917 	bl	8025498 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800126a:	49a2      	ldr	r1, [pc, #648]	; (80014f4 <EI_Data_Analyzer+0x2cc>)
 800126c:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <EI_Data_Analyzer+0x2d0>)
 800126e:	f7fe ffe7 	bl	8000240 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 81a1 	bne.w	80015bc <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3303      	adds	r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	2110      	movs	r1, #16
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f9c6 	bl	8000614 <ExtractBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800128e:	e00b      	b.n	80012a8 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001294:	3366      	adds	r3, #102	; 0x66
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d009      	beq.n	80012b6 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	7ffa      	ldrb	r2, [r7, #31]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ed      	bcc.n	8001290 <EI_Data_Analyzer+0x68>
 80012b4:	e000      	b.n	80012b8 <EI_Data_Analyzer+0x90>
		{
			break;
 80012b6:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d309      	bcc.n	80012d8 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8179 	bne.w	80015c0 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	488c      	ldr	r0, [pc, #560]	; (8001504 <EI_Data_Analyzer+0x2dc>)
 80012d2:	f024 f845 	bl	8025360 <iprintf>
		}
		return;
 80012d6:	e173      	b.n	80015c0 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	2110      	movs	r1, #16
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff f997 	bl	8000614 <ExtractBits>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012f0:	3370      	adds	r3, #112	; 0x70
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d012      	beq.n	8001324 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80012fe:	4882      	ldr	r0, [pc, #520]	; (8001508 <EI_Data_Analyzer+0x2e0>)
 8001300:	f024 f8ca 	bl	8025498 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	4881      	ldr	r0, [pc, #516]	; (800150c <EI_Data_Analyzer+0x2e4>)
 8001308:	f024 f82a 	bl	8025360 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001310:	3370      	adds	r3, #112	; 0x70
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	487c      	ldr	r0, [pc, #496]	; (8001510 <EI_Data_Analyzer+0x2e8>)
 800131e:	f024 f81f 	bl	8025360 <iprintf>
		return;
 8001322:	e14e      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	7fba      	ldrb	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d111      	bne.n	8001364 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001340:	4875      	ldr	r0, [pc, #468]	; (8001518 <EI_Data_Analyzer+0x2f0>)
 8001342:	f024 f8a9 	bl	8025498 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	4874      	ldr	r0, [pc, #464]	; (800151c <EI_Data_Analyzer+0x2f4>)
 800134a:	f024 f809 	bl	8025360 <iprintf>
			Destin_Address = 333;
 800134e:	f240 134d 	movw	r3, #333	; 0x14d
 8001352:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4870      	ldr	r0, [pc, #448]	; (8001520 <EI_Data_Analyzer+0x2f8>)
 8001360:	f023 fffe 	bl	8025360 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	429a      	cmp	r2, r3
 800136e:	d307      	bcc.n	8001380 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001370:	486c      	ldr	r0, [pc, #432]	; (8001524 <EI_Data_Analyzer+0x2fc>)
 8001372:	f024 f891 	bl	8025498 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <EI_Data_Analyzer+0x300>)
 800137a:	f023 fff1 	bl	8025360 <iprintf>
		return;
 800137e:	e120      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d121      	bne.n	80013cc <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <EI_Data_Analyzer+0x304>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <EI_Data_Analyzer+0x170>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <EI_Data_Analyzer+0x178>
 8001396:	e007      	b.n	80013a8 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001398:	4865      	ldr	r0, [pc, #404]	; (8001530 <EI_Data_Analyzer+0x308>)
 800139a:	f024 f87d 	bl	8025498 <puts>
			break;
 800139e:	e015      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013a0:	4864      	ldr	r0, [pc, #400]	; (8001534 <EI_Data_Analyzer+0x30c>)
 80013a2:	f024 f879 	bl	8025498 <puts>
			break;
 80013a6:	e011      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80013ac:	4413      	add	r3, r2
 80013ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <EI_Data_Analyzer+0x310>)
 80013b8:	f024 f86e 	bl	8025498 <puts>
 80013bc:	e006      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <EI_Data_Analyzer+0x304>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485d      	ldr	r0, [pc, #372]	; (800153c <EI_Data_Analyzer+0x314>)
 80013c8:	f023 ffca 	bl	8025360 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <EI_Data_Analyzer+0x304>)
 80013d8:	5c8a      	ldrb	r2, [r1, r2]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d014      	beq.n	8001408 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <EI_Data_Analyzer+0x31c>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4957      	ldr	r1, [pc, #348]	; (8001548 <EI_Data_Analyzer+0x320>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <EI_Data_Analyzer+0x304>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <EI_Data_Analyzer+0x324>)
 8001404:	f024 f848 	bl	8025498 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <EI_Data_Analyzer+0x304>)
 800140e:	5c89      	ldrb	r1, [r1, r2]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <EI_Data_Analyzer+0x328>)
 8001412:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f00e fc2f 	bl	800fc80 <HAL_Elaps_Ticks>
 8001422:	4602      	mov	r2, r0
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001428:	338a      	adds	r3, #138	; 0x8a
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d318      	bcc.n	8001464 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4947      	ldr	r1, [pc, #284]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <EI_Data_Analyzer+0x31c>)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <EI_Data_Analyzer+0x320>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001454:	3366      	adds	r3, #102	; 0x66
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <EI_Data_Analyzer+0x330>)
 8001460:	f023 ff7e 	bl	8025360 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	493b      	ldr	r1, [pc, #236]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 800146e:	2281      	movs	r2, #129	; 0x81
 8001470:	2100      	movs	r1, #0
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <EI_Data_Analyzer+0x334>)
 8001474:	f023 fe8c 	bl	8025190 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <EI_Data_Analyzer+0x334>)
 8001480:	f023 fe5e 	bl	8025140 <memcpy>
	Rx_Print_st.Size = Size;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <EI_Data_Analyzer+0x334>)
 800148a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3307      	adds	r3, #7
 8001492:	461a      	mov	r2, r3
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f8bc 	bl	8000614 <ExtractBits>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <EI_Data_Analyzer+0x338>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <EI_Data_Analyzer+0x33c>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fde5 	bl	8008090 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d870      	bhi.n	80015b0 <EI_Data_Analyzer+0x388>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <EI_Data_Analyzer+0x2ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001579 	.word	0x08001579
 80014dc:	08001589 	.word	0x08001589
 80014e0:	08001591 	.word	0x08001591
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015a1 	.word	0x080015a1
 80014ec:	20000108 	.word	0x20000108
 80014f0:	08026acc 	.word	0x08026acc
 80014f4:	08026b0c 	.word	0x08026b0c
 80014f8:	20000305 	.word	0x20000305
 80014fc:	20000304 	.word	0x20000304
 8001500:	200009b5 	.word	0x200009b5
 8001504:	08026b18 	.word	0x08026b18
 8001508:	08026b54 	.word	0x08026b54
 800150c:	08026b70 	.word	0x08026b70
 8001510:	08026b94 	.word	0x08026b94
 8001514:	20001d88 	.word	0x20001d88
 8001518:	08026bcc 	.word	0x08026bcc
 800151c:	08026bf0 	.word	0x08026bf0
 8001520:	08026c00 	.word	0x08026c00
 8001524:	08026c10 	.word	0x08026c10
 8001528:	08026c44 	.word	0x08026c44
 800152c:	20001408 	.word	0x20001408
 8001530:	08026c64 	.word	0x08026c64
 8001534:	08026c74 	.word	0x08026c74
 8001538:	08026c84 	.word	0x08026c84
 800153c:	08026c9c 	.word	0x08026c9c
 8001540:	20001304 	.word	0x20001304
 8001544:	2000132c 	.word	0x2000132c
 8001548:	20001354 	.word	0x20001354
 800154c:	08026cc0 	.word	0x08026cc0
 8001550:	200013ac 	.word	0x200013ac
 8001554:	200013b8 	.word	0x200013b8
 8001558:	08026cd8 	.word	0x08026cd8
 800155c:	2000203c 	.word	0x2000203c
 8001560:	20001aa0 	.word	0x20001aa0
 8001564:	200011e4 	.word	0x200011e4
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f82d 	bl	80015d0 <Init_Msg_extr>
		break;
 8001576:	e024      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fbc3 	bl	8002d0c <Vital_Msg_extr>
		break;
 8001586:	e01c      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <EI_Data_Analyzer+0x3a0>)
 800158a:	f023 ff85 	bl	8025498 <puts>
		break;
 800158e:	e018      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7ffa      	ldrb	r2, [r7, #31]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 ff3f 	bl	800541c <Status_Msg_Extr>
		break;
 800159e:	e010      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 f9b9 	bl	8006920 <Service_Msg_Extr>
		break;
 80015ae:	e008      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <EI_Data_Analyzer+0x3a4>)
 80015b6:	f023 fed3 	bl	8025360 <iprintf>
		break;
 80015ba:	e002      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
			return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
		return;
 80015c0:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08026cf4 	.word	0x08026cf4
 80015cc:	08026d18 	.word	0x08026d18

080015d0 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80015fa:	f016 fea7 	bl	801834c <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b05      	subs	r3, #5
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f013 f94e 	bl	80148b4 <CalculateDirectReverseCrc>
 8001618:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b05      	subs	r3, #5
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fff4 	bl	8000614 <ExtractBits>
 800162c:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d013      	beq.n	800165e <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <Init_Msg_extr+0x110>)
 800163a:	3366      	adds	r3, #102	; 0x66
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <Init_Msg_extr+0x114>)
 8001646:	f023 fe8b 	bl	8025360 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <Init_Msg_extr+0x118>)
 800164e:	f023 fe87 	bl	8025360 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <Init_Msg_extr+0x11c>)
 8001656:	f023 fe83 	bl	8025360 <iprintf>
		return;
 800165a:	f000 be32 	b.w	80022c2 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <Init_Msg_extr+0x120>)
 8001662:	2101      	movs	r1, #1
 8001664:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <Init_Msg_extr+0x124>)
 800166a:	2101      	movs	r1, #1
 800166c:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 021d 	add.w	r2, r3, #29
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	2110      	movs	r1, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffcb 	bl	8000614 <ExtractBits>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Init_Msg_extr+0x110>)
 8001686:	33f4      	adds	r3, #244	; 0xf4
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	8b7a      	ldrh	r2, [r7, #26]
 8001690:	429a      	cmp	r2, r3
 8001692:	d03d      	beq.n	8001710 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <Init_Msg_extr+0x128>)
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <Init_Msg_extr+0x110>)
 80016a0:	3366      	adds	r3, #102	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <Init_Msg_extr+0x12c>)
 80016ac:	f023 fe58 	bl	8025360 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016b0:	8b7b      	ldrh	r3, [r7, #26]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <Init_Msg_extr+0x130>)
 80016b6:	f023 fe53 	bl	8025360 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Init_Msg_extr+0x110>)
 80016be:	33f4      	adds	r3, #244	; 0xf4
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <Init_Msg_extr+0x134>)
 80016ca:	f023 fe49 	bl	8025360 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <Init_Msg_extr+0x138>)
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Init_Msg_extr+0x13c>)
 80016d2:	f7fe fdb5 	bl	8000240 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01d      	beq.n	8001718 <Init_Msg_extr+0x148>
		{
			return;
 80016dc:	f000 bdf1 	b.w	80022c2 <Init_Msg_extr+0xcf2>
 80016e0:	20000304 	.word	0x20000304
 80016e4:	08026d34 	.word	0x08026d34
 80016e8:	08026d50 	.word	0x08026d50
 80016ec:	08026d60 	.word	0x08026d60
 80016f0:	2000137c 	.word	0x2000137c
 80016f4:	20001394 	.word	0x20001394
 80016f8:	20001388 	.word	0x20001388
 80016fc:	08026d70 	.word	0x08026d70
 8001700:	08026da8 	.word	0x08026da8
 8001704:	08026dcc 	.word	0x08026dcc
 8001708:	08026b0c 	.word	0x08026b0c
 800170c:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001710:	78bb      	ldrb	r3, [r7, #2]
 8001712:	4aab      	ldr	r2, [pc, #684]	; (80019c0 <Init_Msg_extr+0x3f0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800171e:	8bbb      	ldrh	r3, [r7, #28]
 8001720:	2108      	movs	r1, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff76 	bl	8000614 <ExtractBits>
 8001728:	4603      	mov	r3, r0
 800172a:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	4aa5      	ldr	r2, [pc, #660]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001736:	7e7a      	ldrb	r2, [r7, #25]
 8001738:	429a      	cmp	r2, r3
 800173a:	d01f      	beq.n	800177c <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001740:	3366      	adds	r3, #102	; 0x66
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <Init_Msg_extr+0x3f8>)
 800174c:	f023 fe08 	bl	8025360 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001754:	4413      	add	r3, r2
 8001756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800175a:	4619      	mov	r1, r3
 800175c:	489b      	ldr	r0, [pc, #620]	; (80019cc <Init_Msg_extr+0x3fc>)
 800175e:	f023 fdff 	bl	8025360 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001762:	7e7b      	ldrb	r3, [r7, #25]
 8001764:	4619      	mov	r1, r3
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <Init_Msg_extr+0x400>)
 8001768:	f023 fdfa 	bl	8025360 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800176c:	4999      	ldr	r1, [pc, #612]	; (80019d4 <Init_Msg_extr+0x404>)
 800176e:	489a      	ldr	r0, [pc, #616]	; (80019d8 <Init_Msg_extr+0x408>)
 8001770:	f7fe fd66 	bl	8000240 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 85a2 	bne.w	80022c0 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4997      	ldr	r1, [pc, #604]	; (80019dc <Init_Msg_extr+0x40c>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4a95      	ldr	r2, [pc, #596]	; (80019e0 <Init_Msg_extr+0x410>)
 800178a:	2101      	movs	r1, #1
 800178c:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <Init_Msg_extr+0x414>)
 8001792:	2100      	movs	r1, #0
 8001794:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4993      	ldr	r1, [pc, #588]	; (80019e8 <Init_Msg_extr+0x418>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017a4:	3308      	adds	r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <Init_Msg_extr+0x1dc>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
 80017b6:	8bbb      	ldrh	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	425a      	negs	r2, r3
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	bf58      	it	pl
 80017ca:	4253      	negpl	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff1a 	bl	8000614 <ExtractBits>
 80017e0:	4602      	mov	r2, r0
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	b291      	uxth	r1, r2
 80017e6:	4a81      	ldr	r2, [pc, #516]	; (80019ec <Init_Msg_extr+0x41c>)
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	3310      	adds	r3, #16
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <Init_Msg_extr+0x41c>)
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <Init_Msg_extr+0x420>)
 8001802:	f023 fdad 	bl	8025360 <iprintf>
	BITSTUFFINC(16);
 8001806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800180a:	3310      	adds	r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <Init_Msg_extr+0x242>
 8001810:	3307      	adds	r3, #7
 8001812:	10db      	asrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	425a      	negs	r2, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	bf58      	it	pl
 8001830:	4253      	negpl	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	441a      	add	r2, r3
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <ExtractBits>
 8001846:	4602      	mov	r2, r0
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	b291      	uxth	r1, r2
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <Init_Msg_extr+0x41c>)
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4413      	add	r3, r2
 8001852:	330e      	adds	r3, #14
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Init_Msg_extr+0x41c>)
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4413      	add	r3, r2
 8001860:	330e      	adds	r3, #14
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <Init_Msg_extr+0x424>)
 8001868:	f023 fd7a 	bl	8025360 <iprintf>
	BITSTUFFINC(16);
 800186c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001870:	3310      	adds	r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	da00      	bge.n	8001878 <Init_Msg_extr+0x2a8>
 8001876:	3307      	adds	r3, #7
 8001878:	10db      	asrs	r3, r3, #3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	8bbb      	ldrh	r3, [r7, #28]
 80018a4:	2108      	movs	r1, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe feb4 	bl	8000614 <ExtractBits>
 80018ac:	4602      	mov	r2, r0
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <Init_Msg_extr+0x41c>)
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018c0:	3308      	adds	r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <Init_Msg_extr+0x2f8>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b21b      	sxth	r3, r3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	2108      	movs	r1, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe8c 	bl	8000614 <ExtractBits>
 80018fc:	4602      	mov	r2, r0
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Init_Msg_extr+0x41c>)
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4413      	add	r3, r2
 8001908:	3301      	adds	r3, #1
 800190a:	460a      	mov	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800190e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001912:	3308      	adds	r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <Init_Msg_extr+0x34a>
 8001918:	3307      	adds	r3, #7
 800191a:	10db      	asrs	r3, r3, #3
 800191c:	b29a      	uxth	r2, r3
 800191e:	8bfb      	ldrh	r3, [r7, #30]
 8001920:	4413      	add	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	425a      	negs	r2, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f002 0207 	and.w	r2, r2, #7
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	441a      	add	r2, r3
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe63 	bl	8000614 <ExtractBits>
 800194e:	4602      	mov	r2, r0
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <Init_Msg_extr+0x41c>)
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001964:	3308      	adds	r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <Init_Msg_extr+0x39c>
 800196a:	3307      	adds	r3, #7
 800196c:	10db      	asrs	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	425a      	negs	r2, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f002 0207 	and.w	r2, r2, #7
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	441a      	add	r2, r3
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe3a 	bl	8000614 <ExtractBits>
 80019a0:	4602      	mov	r2, r0
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	b291      	uxth	r1, r2
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <Init_Msg_extr+0x428>)
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b6:	3310      	adds	r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da1f      	bge.n	80019fc <Init_Msg_extr+0x42c>
 80019bc:	3307      	adds	r3, #7
 80019be:	e01d      	b.n	80019fc <Init_Msg_extr+0x42c>
 80019c0:	20001388 	.word	0x20001388
 80019c4:	20000304 	.word	0x20000304
 80019c8:	08026df0 	.word	0x08026df0
 80019cc:	08026e18 	.word	0x08026e18
 80019d0:	08026e2c 	.word	0x08026e2c
 80019d4:	08026b0c 	.word	0x08026b0c
 80019d8:	20000305 	.word	0x20000305
 80019dc:	2000132c 	.word	0x2000132c
 80019e0:	20001394 	.word	0x20001394
 80019e4:	20001414 	.word	0x20001414
 80019e8:	20001420 	.word	0x20001420
 80019ec:	20001690 	.word	0x20001690
 80019f0:	08026e40 	.word	0x08026e40
 80019f4:	08026e48 	.word	0x08026e48
 80019f8:	200015f0 	.word	0x200015f0
 80019fc:	10db      	asrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	83fb      	strh	r3, [r7, #30]
 8001a06:	8bbb      	ldrh	r3, [r7, #28]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <Init_Msg_extr+0x68c>)
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 811d 	beq.w	8001c70 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8bbb      	ldrh	r3, [r7, #28]
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fde7 	bl	8000614 <ExtractBits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	78ba      	ldrb	r2, [r7, #2]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4984      	ldr	r1, [pc, #528]	; (8001c60 <Init_Msg_extr+0x690>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a62:	3308      	adds	r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <Init_Msg_extr+0x49a>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4413      	add	r3, r2
 8001a72:	83fb      	strh	r3, [r7, #30]
 8001a74:	8bbb      	ldrh	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	425a      	negs	r2, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	bf58      	it	pl
 8001a88:	4253      	negpl	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	441a      	add	r2, r3
 8001a94:	8bbb      	ldrh	r3, [r7, #28]
 8001a96:	2108      	movs	r1, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdbb 	bl	8000614 <ExtractBits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	78ba      	ldrb	r2, [r7, #2]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	496e      	ldr	r1, [pc, #440]	; (8001c60 <Init_Msg_extr+0x690>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001ab6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aba:	3308      	adds	r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <Init_Msg_extr+0x4f2>
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	10db      	asrs	r3, r3, #3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	4413      	add	r3, r2
 8001aca:	83fb      	strh	r3, [r7, #30]
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	f002 0207 	and.w	r2, r2, #7
 8001ade:	bf58      	it	pl
 8001ae0:	4253      	negpl	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	441a      	add	r2, r3
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	2108      	movs	r1, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd8f 	bl	8000614 <ExtractBits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4958      	ldr	r1, [pc, #352]	; (8001c60 <Init_Msg_extr+0x690>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	3303      	adds	r3, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b12:	3308      	adds	r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <Init_Msg_extr+0x54a>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	4413      	add	r3, r2
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	f002 0207 	and.w	r2, r2, #7
 8001b36:	bf58      	it	pl
 8001b38:	4253      	negpl	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	2108      	movs	r1, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd63 	bl	8000614 <ExtractBits>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4942      	ldr	r1, [pc, #264]	; (8001c60 <Init_Msg_extr+0x690>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <Init_Msg_extr+0x5a0>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4413      	add	r3, r2
 8001b78:	83fb      	strh	r3, [r7, #30]
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	f002 0207 	and.w	r2, r2, #7
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	8bbb      	ldrh	r3, [r7, #28]
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <Init_Msg_extr+0x690>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da00      	bge.n	8001bc8 <Init_Msg_extr+0x5f8>
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	8bbb      	ldrh	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	425a      	negs	r2, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	bf58      	it	pl
 8001be6:	4253      	negpl	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	8bbb      	ldrh	r3, [r7, #28]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd0c 	bl	8000614 <ExtractBits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	78ba      	ldrb	r2, [r7, #2]
 8001c00:	b2d8      	uxtb	r0, r3
 8001c02:	4917      	ldr	r1, [pc, #92]	; (8001c60 <Init_Msg_extr+0x690>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <Init_Msg_extr+0x650>
 8001c1e:	3307      	adds	r3, #7
 8001c20:	10db      	asrs	r3, r3, #3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4413      	add	r3, r2
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	f002 0207 	and.w	r2, r2, #7
 8001c3c:	bf58      	it	pl
 8001c3e:	4253      	negpl	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 faac 	bl	80091a4 <IS_MLK_EIPC_TIME_MATCHING>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <Init_Msg_extr+0x698>
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <Init_Msg_extr+0x694>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	54d1      	strb	r1, [r2, r3]
 8001c5a:	e009      	b.n	8001c70 <Init_Msg_extr+0x6a0>
 8001c5c:	200015f0 	.word	0x200015f0
 8001c60:	200015b4 	.word	0x200015b4
 8001c64:	20001460 	.word	0x20001460
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	4aa4      	ldr	r2, [pc, #656]	; (8001efc <Init_Msg_extr+0x92c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fcca 	bl	8000614 <ExtractBits>
 8001c80:	4602      	mov	r2, r0
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <Init_Msg_extr+0x930>)
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c96:	3308      	adds	r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da00      	bge.n	8001c9e <Init_Msg_extr+0x6ce>
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	10db      	asrs	r3, r3, #3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bbb      	ldrh	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f002 0207 	and.w	r2, r2, #7
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fca1 	bl	8000614 <ExtractBits>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	b291      	uxth	r1, r2
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <Init_Msg_extr+0x930>)
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	3312      	adds	r3, #18
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce8:	3310      	adds	r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <Init_Msg_extr+0x720>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	f002 0207 	and.w	r2, r2, #7
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <Init_Msg_extr+0x930>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2206      	movs	r2, #6
 8001d26:	4619      	mov	r1, r3
 8001d28:	f023 fa0a 	bl	8025140 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d30:	3310      	adds	r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <Init_Msg_extr+0x768>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	4413      	add	r3, r2
 8001d40:	83fb      	strh	r3, [r7, #30]
 8001d42:	8bbb      	ldrh	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	f002 0207 	and.w	r2, r2, #7
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d60:	3310      	adds	r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da00      	bge.n	8001d68 <Init_Msg_extr+0x798>
 8001d66:	3307      	adds	r3, #7
 8001d68:	10db      	asrs	r3, r3, #3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	4413      	add	r3, r2
 8001d70:	83fb      	strh	r3, [r7, #30]
 8001d72:	8bbb      	ldrh	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	3310      	adds	r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <Init_Msg_extr+0x7c8>
 8001d96:	3307      	adds	r3, #7
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	4413      	add	r3, r2
 8001da0:	83fb      	strh	r3, [r7, #30]
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dbc:	8bfb      	ldrh	r3, [r7, #30]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	8bbb      	ldrh	r3, [r7, #28]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc24 	bl	8000614 <ExtractBits>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	b291      	uxth	r1, r2
 8001dd2:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <Init_Msg_extr+0x930>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3314      	adds	r3, #20
 8001dda:	460a      	mov	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001de2:	3310      	adds	r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <Init_Msg_extr+0x81a>
 8001de8:	3307      	adds	r3, #7
 8001dea:	10db      	asrs	r3, r3, #3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	4413      	add	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	f002 0207 	and.w	r2, r2, #7
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	2110      	movs	r1, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbfb 	bl	8000614 <ExtractBits>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	4413      	add	r3, r2
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e34:	3310      	adds	r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <Init_Msg_extr+0x86c>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	4413      	add	r3, r2
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	8bbb      	ldrh	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	f002 0207 	and.w	r2, r2, #7
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbd2 	bl	8000614 <ExtractBits>
 8001e70:	4602      	mov	r2, r0
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e86:	3310      	adds	r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <Init_Msg_extr+0x8be>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	4413      	add	r3, r2
 8001e96:	83fb      	strh	r3, [r7, #30]
 8001e98:	8bbb      	ldrh	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	78bc      	ldrb	r4, [r7, #2]
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ec8:	0123      	lsls	r3, r4, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Init_Msg_extr+0x938>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4403      	add	r3, r0
 8001eea:	3308      	adds	r3, #8
 8001eec:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Init_Msg_extr+0x93c>
 8001ef8:	3307      	adds	r3, #7
 8001efa:	e007      	b.n	8001f0c <Init_Msg_extr+0x93c>
 8001efc:	20001460 	.word	0x20001460
 8001f00:	20001690 	.word	0x20001690
 8001f04:	200015f0 	.word	0x200015f0
 8001f08:	20001aa0 	.word	0x20001aa0
 8001f0c:	10db      	asrs	r3, r3, #3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4413      	add	r3, r2
 8001f14:	83fb      	strh	r3, [r7, #30]
 8001f16:	8bbb      	ldrh	r3, [r7, #28]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	8bbb      	ldrh	r3, [r7, #28]
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb6a 	bl	8000614 <ExtractBits>
 8001f40:	4602      	mov	r2, r0
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4ab1      	ldr	r2, [pc, #708]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	49ad      	ldr	r1, [pc, #692]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4aab      	ldr	r2, [pc, #684]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	460a      	mov	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <Init_Msg_extr+0x9a4>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83fb      	strh	r3, [r7, #30]
 8001f7e:	8bbb      	ldrh	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <Init_Msg_extr+0xc40>)
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <Init_Msg_extr+0x9f6>
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	10db      	asrs	r3, r3, #3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4413      	add	r3, r2
 8001fce:	83fb      	strh	r3, [r7, #30]
 8001fd0:	8bbb      	ldrh	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f002 0207 	and.w	r2, r2, #7
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb0d 	bl	8000614 <ExtractBits>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <Init_Msg_extr+0xc3c>)
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 800200c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002010:	3308      	adds	r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	da00      	bge.n	8002018 <Init_Msg_extr+0xa48>
 8002016:	3307      	adds	r3, #7
 8002018:	10db      	asrs	r3, r3, #3
 800201a:	b29a      	uxth	r2, r3
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
 8002022:	8bbb      	ldrh	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	425a      	negs	r2, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	f002 0207 	and.w	r2, r2, #7
 8002034:	bf58      	it	pl
 8002036:	4253      	negpl	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <Init_Msg_extr+0xc3c>)
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3303      	adds	r3, #3
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <Init_Msg_extr+0xc44>)
 800204c:	440b      	add	r3, r1
 800204e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002052:	429a      	cmp	r2, r3
 8002054:	d015      	beq.n	8002082 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <Init_Msg_extr+0xc48>)
 8002058:	f023 fa1e 	bl	8025498 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <Init_Msg_extr+0xc44>)
 8002060:	4413      	add	r3, r2
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	; (800221c <Init_Msg_extr+0xc4c>)
 800206a:	f023 f979 	bl	8025360 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <Init_Msg_extr+0xc3c>)
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <Init_Msg_extr+0xc50>)
 800207e:	f023 f96f 	bl	8025360 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	2108      	movs	r1, #8
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fac1 	bl	8000614 <ExtractBits>
 8002092:	4602      	mov	r2, r0
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	b2d1      	uxtb	r1, r2
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <Init_Msg_extr+0xc40>)
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	330b      	adds	r3, #11
 80020a0:	460a      	mov	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a8:	3308      	adds	r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <Init_Msg_extr+0xae0>
 80020ae:	3307      	adds	r3, #7
 80020b0:	10db      	asrs	r3, r3, #3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	4413      	add	r3, r2
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	2108      	movs	r1, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa98 	bl	8000614 <ExtractBits>
 80020e4:	4602      	mov	r2, r0
 80020e6:	78bb      	ldrb	r3, [r7, #2]
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <Init_Msg_extr+0xc40>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	4413      	add	r3, r2
 80020f0:	330c      	adds	r3, #12
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80020f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da00      	bge.n	8002102 <Init_Msg_extr+0xb32>
 8002100:	3307      	adds	r3, #7
 8002102:	10db      	asrs	r3, r3, #3
 8002104:	b29a      	uxth	r2, r3
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	4413      	add	r3, r2
 800210a:	83fb      	strh	r3, [r7, #30]
 800210c:	8bbb      	ldrh	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	425a      	negs	r2, r3
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f002 0207 	and.w	r2, r2, #7
 800211e:	bf58      	it	pl
 8002120:	4253      	negpl	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Init_Msg_extr+0xc40>)
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	4413      	add	r3, r2
 800212e:	330c      	adds	r3, #12
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <Init_Msg_extr+0xc40>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4837      	ldr	r0, [pc, #220]	; (8002224 <Init_Msg_extr+0xc54>)
 8002146:	f023 f90b 	bl	8025360 <iprintf>
		printf("This Value has to be \"1\"\n");
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <Init_Msg_extr+0xc58>)
 800214c:	f023 f9a4 	bl	8025498 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	441a      	add	r2, r3
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2108      	movs	r1, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa5a 	bl	8000614 <ExtractBits>
 8002160:	4602      	mov	r2, r0
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <Init_Msg_extr+0xc40>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	330d      	adds	r3, #13
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002176:	3308      	adds	r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <Init_Msg_extr+0xbae>
 800217c:	3307      	adds	r3, #7
 800217e:	10db      	asrs	r3, r3, #3
 8002180:	b29a      	uxth	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	4413      	add	r3, r2
 8002186:	83fb      	strh	r3, [r7, #30]
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	f002 0207 	and.w	r2, r2, #7
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021a2:	8bfb      	ldrh	r3, [r7, #30]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	441a      	add	r2, r3
 80021a8:	78bc      	ldrb	r4, [r7, #2]
 80021aa:	8bbb      	ldrh	r3, [r7, #28]
 80021ac:	2120      	movs	r1, #32
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa30 	bl	8000614 <ExtractBits>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <Init_Msg_extr+0xc40>)
 80021b8:	0163      	lsls	r3, r4, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	331c      	adds	r3, #28
 80021be:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <Init_Msg_extr+0xbfc>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
 80021d6:	8bbb      	ldrh	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21b      	sxth	r3, r3
 80021de:	425a      	negs	r2, r3
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	bf58      	it	pl
 80021ea:	4253      	negpl	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80021f0:	787a      	ldrb	r2, [r7, #1]
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f86c 	bl	80022d4 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <Init_Msg_extr+0xc5c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	e012      	b.n	8002230 <Init_Msg_extr+0xc60>
 800220a:	bf00      	nop
 800220c:	200015f0 	.word	0x200015f0
 8002210:	20001690 	.word	0x20001690
 8002214:	20000304 	.word	0x20000304
 8002218:	08026e50 	.word	0x08026e50
 800221c:	08026e18 	.word	0x08026e18
 8002220:	08026e2c 	.word	0x08026e2c
 8002224:	08026e6c 	.word	0x08026e6c
 8002228:	08026e98 	.word	0x08026e98
 800222c:	20001aa0 	.word	0x20001aa0
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002238:	78ba      	ldrb	r2, [r7, #2]
 800223a:	4923      	ldr	r1, [pc, #140]	; (80022c8 <Init_Msg_extr+0xcf8>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3305      	adds	r3, #5
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002272:	2218      	movs	r2, #24
 8002274:	2100      	movs	r1, #0
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002278:	f022 ff8a 	bl	8025190 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002288:	4413      	add	r3, r2
 800228a:	2218      	movs	r2, #24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002290:	f022 ff56 	bl	8025140 <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002294:	f240 2001 	movw	r0, #513	; 0x201
 8002298:	f00e faa6 	bl	80107e8 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <Init_Msg_extr+0xcf8>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022b0:	78bc      	ldrb	r4, [r7, #2]
 80022b2:	f016 f84b 	bl	801834c <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <Init_Msg_extr+0xd00>)
 80022ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022be:	e000      	b.n	80022c2 <Init_Msg_extr+0xcf2>
			return;
 80022c0:	bf00      	nop
}
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	20001aa0 	.word	0x20001aa0
 80022cc:	20001c80 	.word	0x20001c80
 80022d0:	200011b4 	.word	0x200011b4

080022d4 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	; 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f022 ff4d 	bl	8025190 <memset>
	uint32_t Calc_CRC = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002300:	2300      	movs	r3, #0
 8002302:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	441a      	add	r2, r3
 8002310:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002314:	23f4      	movs	r3, #244	; 0xf4
 8002316:	2108      	movs	r1, #8
 8002318:	f7fe fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800231c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Send_Init_Msg+0x54>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	4413      	add	r3, r2
 8002332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800233a:	3308      	adds	r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	425a      	negs	r2, r3
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	f002 0207 	and.w	r2, r2, #7
 800234a:	bf58      	it	pl
 800234c:	4253      	negpl	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	441a      	add	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4977      	ldr	r1, [pc, #476]	; (8002540 <Send_Init_Msg+0x26c>)
 8002362:	3366      	adds	r3, #102	; 0x66
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800236e:	2110      	movs	r1, #16
 8002370:	f7fe f9dc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002378:	3310      	adds	r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	da00      	bge.n	8002380 <Send_Init_Msg+0xac>
 800237e:	3307      	adds	r3, #7
 8002380:	10db      	asrs	r3, r3, #3
 8002382:	b29a      	uxth	r2, r3
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	4413      	add	r3, r2
 800238a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800238e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002392:	3310      	adds	r3, #16
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	425a      	negs	r2, r3
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	f002 0207 	and.w	r2, r2, #7
 80023a2:	bf58      	it	pl
 80023a4:	4253      	negpl	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	441a      	add	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <Send_Init_Msg+0x26c>)
 80023ba:	3370      	adds	r3, #112	; 0x70
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023c6:	2110      	movs	r1, #16
 80023c8:	f7fe f9b0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023d0:	3310      	adds	r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <Send_Init_Msg+0x104>
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	4413      	add	r3, r2
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023ea:	3310      	adds	r3, #16
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Send_Init_Msg+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d031      	beq.n	8002476 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Send_Init_Msg+0x270>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d137      	bne.n	800248c <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002422:	4849      	ldr	r0, [pc, #292]	; (8002548 <Send_Init_Msg+0x274>)
 8002424:	f01a fc44 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8002428:	4602      	mov	r2, r0
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <Send_Init_Msg+0x278>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <Send_Init_Msg+0x27c>)
 8002444:	f023 f828 	bl	8025498 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002448:	2100      	movs	r1, #0
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <Send_Init_Msg+0x280>)
 800244c:	f022 ff88 	bl	8025360 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002450:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	; (8002558 <Send_Init_Msg+0x284>)
 8002458:	f022 ff82 	bl	8025360 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	441a      	add	r2, r3
 8002466:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800246a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800246e:	2108      	movs	r1, #8
 8002470:	f7fe f95c 	bl	800072c <InsertBits>
 8002474:	e00a      	b.n	800248c <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	441a      	add	r2, r3
 8002480:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	2108      	movs	r1, #8
 8002488:	f7fe f950 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800248c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002490:	3308      	adds	r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <Send_Init_Msg+0x1c4>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	4413      	add	r3, r2
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024aa:	3308      	adds	r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	425a      	negs	r2, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	f002 0207 	and.w	r2, r2, #7
 80024ba:	bf58      	it	pl
 80024bc:	4253      	negpl	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Send_Init_Msg+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Send_Init_Msg+0x270>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	79fa      	ldrb	r2, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d165      	bne.n	80025a8 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <Send_Init_Msg+0x274>)
 80024e4:	f01a fbe4 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <Send_Init_Msg+0x278>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <Send_Init_Msg+0x288>)
 8002500:	f022 ffca 	bl	8025498 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <Send_Init_Msg+0x28c>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <Send_Init_Msg+0x290>)
 8002514:	f022 ff24 	bl	8025360 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002518:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <Send_Init_Msg+0x294>)
 8002520:	f022 ff1e 	bl	8025360 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	441a      	add	r2, r3
 800252e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002536:	2108      	movs	r1, #8
 8002538:	f7fe f8f8 	bl	800072c <InsertBits>
 800253c:	e034      	b.n	80025a8 <Send_Init_Msg+0x2d4>
 800253e:	bf00      	nop
 8002540:	20000304 	.word	0x20000304
 8002544:	20001d88 	.word	0x20001d88
 8002548:	2000a9e0 	.word	0x2000a9e0
 800254c:	51eb851f 	.word	0x51eb851f
 8002550:	08026eb4 	.word	0x08026eb4
 8002554:	08026ed8 	.word	0x08026ed8
 8002558:	08026ef8 	.word	0x08026ef8
 800255c:	08026f18 	.word	0x08026f18
 8002560:	200015f0 	.word	0x200015f0
 8002564:	08026f3c 	.word	0x08026f3c
 8002568:	08026f5c 	.word	0x08026f5c

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	48c4      	ldr	r0, [pc, #784]	; (800288c <Send_Init_Msg+0x5b8>)
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4402      	add	r2, r0
 800257e:	3202      	adds	r2, #2
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	3201      	adds	r2, #1
 8002584:	b2d4      	uxtb	r4, r2
 8002586:	48c1      	ldr	r0, [pc, #772]	; (800288c <Send_Init_Msg+0x5b8>)
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	4402      	add	r2, r0
 800258c:	3202      	adds	r2, #2
 800258e:	4620      	mov	r0, r4
 8002590:	7010      	strb	r0, [r2, #0]
 8002592:	4abe      	ldr	r2, [pc, #760]	; (800288c <Send_Init_Msg+0x5b8>)
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025a0:	460a      	mov	r2, r1
 80025a2:	2108      	movs	r1, #8
 80025a4:	f7fe f8c2 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025ac:	3308      	adds	r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da00      	bge.n	80025b4 <Send_Init_Msg+0x2e0>
 80025b2:	3307      	adds	r3, #7
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	4413      	add	r3, r2
 80025be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025c6:	3308      	adds	r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f002 0207 	and.w	r2, r2, #7
 80025d6:	bf58      	it	pl
 80025d8:	4253      	negpl	r3, r2
 80025da:	b21b      	sxth	r3, r3
 80025dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025ee:	2301      	movs	r3, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	f7fe f89b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80025f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025fa:	3308      	adds	r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <Send_Init_Msg+0x32e>
 8002600:	3307      	adds	r3, #7
 8002602:	10db      	asrs	r3, r3, #3
 8002604:	b29a      	uxth	r2, r3
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	4413      	add	r3, r2
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002614:	3308      	adds	r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	425a      	negs	r2, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	f002 0207 	and.w	r2, r2, #7
 8002624:	bf58      	it	pl
 8002626:	4253      	negpl	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a96      	ldr	r2, [pc, #600]	; (800288c <Send_Init_Msg+0x5b8>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3306      	adds	r3, #6
 8002638:	2205      	movs	r2, #5
 800263a:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	441a      	add	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4990      	ldr	r1, [pc, #576]	; (800288c <Send_Init_Msg+0x5b8>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3306      	adds	r3, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002656:	2110      	movs	r1, #16
 8002658:	f7fe f868 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800265c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002660:	3310      	adds	r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <Send_Init_Msg+0x394>
 8002666:	3307      	adds	r3, #7
 8002668:	10db      	asrs	r3, r3, #3
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002670:	4413      	add	r3, r2
 8002672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267a:	3310      	adds	r3, #16
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21b      	sxth	r3, r3
 8002680:	425a      	negs	r2, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	f002 0207 	and.w	r2, r2, #7
 800268a:	bf58      	it	pl
 800268c:	4253      	negpl	r3, r2
 800268e:	b21b      	sxth	r3, r3
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026a2:	2317      	movs	r3, #23
 80026a4:	2108      	movs	r1, #8
 80026a6:	f7fe f841 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da00      	bge.n	80026b6 <Send_Init_Msg+0x3e2>
 80026b4:	3307      	adds	r3, #7
 80026b6:	10db      	asrs	r3, r3, #3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	4413      	add	r3, r2
 80026c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c8:	3308      	adds	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	425a      	negs	r2, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	f002 0207 	and.w	r2, r2, #7
 80026d8:	bf58      	it	pl
 80026da:	4253      	negpl	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	f7fe f81a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80026f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026fc:	3310      	adds	r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Send_Init_Msg+0x430>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	4413      	add	r3, r2
 800270e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002716:	3310      	adds	r3, #16
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	425a      	negs	r2, r3
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	441a      	add	r2, r3
 800273a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <Send_Init_Msg+0x5bc>)
 8002740:	2120      	movs	r1, #32
 8002742:	f7fd fff3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002746:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800274a:	3320      	adds	r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <Send_Init_Msg+0x47e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275a:	4413      	add	r3, r2
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002764:	3320      	adds	r3, #32
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	425a      	negs	r2, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	f002 0207 	and.w	r2, r2, #7
 8002774:	bf58      	it	pl
 8002776:	4253      	negpl	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800278c:	2300      	movs	r3, #0
 800278e:	2110      	movs	r1, #16
 8002790:	f7fd ffcc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002798:	3310      	adds	r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <Send_Init_Msg+0x4cc>
 800279e:	3307      	adds	r3, #7
 80027a0:	10db      	asrs	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	4413      	add	r3, r2
 80027aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	3310      	adds	r3, #16
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027da:	2300      	movs	r3, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f7fd ffa5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	3310      	adds	r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Send_Init_Msg+0x51a>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	4413      	add	r3, r2
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002800:	3310      	adds	r3, #16
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21b      	sxth	r3, r3
 8002806:	425a      	negs	r2, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002828:	2300      	movs	r3, #0
 800282a:	2110      	movs	r1, #16
 800282c:	f7fd ff7e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002834:	3310      	adds	r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <Send_Init_Msg+0x568>
 800283a:	3307      	adds	r3, #7
 800283c:	10db      	asrs	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002844:	4413      	add	r3, r2
 8002846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800284e:	3310      	adds	r3, #16
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	425a      	negs	r2, r3
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f002 0207 	and.w	r2, r2, #7
 800285e:	bf58      	it	pl
 8002860:	4253      	negpl	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002876:	2300      	movs	r3, #0
 8002878:	2110      	movs	r1, #16
 800287a:	f7fd ff57 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800287e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002882:	3310      	adds	r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	da05      	bge.n	8002894 <Send_Init_Msg+0x5c0>
 8002888:	3307      	adds	r3, #7
 800288a:	e003      	b.n	8002894 <Send_Init_Msg+0x5c0>
 800288c:	200015f0 	.word	0x200015f0
 8002890:	33e232af 	.word	0x33e232af
 8002894:	10db      	asrs	r3, r3, #3
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028a6:	3310      	adds	r3, #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	425a      	negs	r2, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	f002 0207 	and.w	r2, r2, #7
 80028b6:	bf58      	it	pl
 80028b8:	4253      	negpl	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <Send_Init_Msg+0x8bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90d      	bls.n	80028ee <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4aad      	ldr	r2, [pc, #692]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	49aa      	ldr	r1, [pc, #680]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00c      	b.n	8002908 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3308      	adds	r3, #8
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	3201      	adds	r2, #1
 80028fe:	49a3      	ldr	r1, [pc, #652]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	330c      	adds	r3, #12
 8002906:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	441a      	add	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	330c      	adds	r3, #12
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002922:	2118      	movs	r1, #24
 8002924:	f7fd ff02 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4997      	ldr	r1, [pc, #604]	; (8002b8c <Send_Init_Msg+0x8b8>)
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4897      	ldr	r0, [pc, #604]	; (8002b94 <Send_Init_Msg+0x8c0>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4403      	add	r3, r0
 8002942:	330c      	adds	r3, #12
 8002944:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002946:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800294a:	3318      	adds	r3, #24
 800294c:	2b00      	cmp	r3, #0
 800294e:	da00      	bge.n	8002952 <Send_Init_Msg+0x67e>
 8002950:	3307      	adds	r3, #7
 8002952:	10db      	asrs	r3, r3, #3
 8002954:	b29a      	uxth	r2, r3
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	4413      	add	r3, r2
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002960:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002964:	3318      	adds	r3, #24
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	425a      	negs	r2, r3
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a85      	ldr	r2, [pc, #532]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002982:	5cd2      	ldrb	r2, [r2, r3]
 8002984:	3201      	adds	r2, #1
 8002986:	b2d1      	uxtb	r1, r2
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800298a:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2bb3      	cmp	r3, #179	; 0xb3
 8002994:	d804      	bhi.n	80029a0 <Send_Init_Msg+0x6cc>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029a4:	210a      	movs	r1, #10
 80029a6:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	441a      	add	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4978      	ldr	r1, [pc, #480]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029bc:	2108      	movs	r1, #8
 80029be:	f7fd feb5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <Send_Init_Msg+0x6fa>
 80029cc:	3307      	adds	r3, #7
 80029ce:	10db      	asrs	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d6:	4413      	add	r3, r2
 80029d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029e0:	3308      	adds	r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	f002 0207 	and.w	r2, r2, #7
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f107 020c 	add.w	r2, r7, #12
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	f7fd fe8e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a14:	3308      	adds	r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da00      	bge.n	8002a1c <Send_Init_Msg+0x748>
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	10db      	asrs	r3, r3, #3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	4413      	add	r3, r2
 8002a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3308      	adds	r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f002 0207 	and.w	r2, r2, #7
 8002a3e:	bf58      	it	pl
 8002a40:	4253      	negpl	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a56:	2301      	movs	r3, #1
 8002a58:	2108      	movs	r1, #8
 8002a5a:	f7fd fe67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da00      	bge.n	8002a6a <Send_Init_Msg+0x796>
 8002a68:	3307      	adds	r3, #7
 8002a6a:	10db      	asrs	r3, r3, #3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	4413      	add	r3, r2
 8002a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	425a      	negs	r2, r3
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	f002 0207 	and.w	r2, r2, #7
 8002a8c:	bf58      	it	pl
 8002a8e:	4253      	negpl	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	f7fd fe40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <Send_Init_Msg+0x7e4>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aca:	3308      	adds	r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	f002 0207 	and.w	r2, r2, #7
 8002ada:	bf58      	it	pl
 8002adc:	4253      	negpl	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <Send_Init_Msg+0x8e0>
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d15b      	bne.n	8002bb4 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002afc:	230c      	movs	r3, #12
 8002afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <Send_Init_Msg+0x8cc>)
 8002b04:	f01a f8d4 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <Send_Init_Msg+0x8d0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	4613      	mov	r3, r2
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1aca      	subs	r2, r1, r3
 8002b1e:	b2d3      	uxtb	r3, r2
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <Send_Init_Msg+0x8d4>)
 8002b28:	f022 fcb6 	bl	8025498 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <Send_Init_Msg+0x8d8>)
 8002b3c:	f022 fc10 	bl	8025360 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <Send_Init_Msg+0x8dc>)
 8002b6e:	f022 fbf7 	bl	8025360 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fd fdd1 	bl	800072c <InsertBits>
	{
 8002b8a:	e022      	b.n	8002bd2 <Send_Init_Msg+0x8fe>
 8002b8c:	200015f0 	.word	0x200015f0
 8002b90:	00ffffef 	.word	0x00ffffef
 8002b94:	20001aa0 	.word	0x20001aa0
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	20001d88 	.word	0x20001d88
 8002ba0:	2000a9e0 	.word	0x2000a9e0
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	08026f7c 	.word	0x08026f7c
 8002bac:	08026fac 	.word	0x08026fac
 8002bb0:	08026fc8 	.word	0x08026fc8
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	441a      	add	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	494e      	ldr	r1, [pc, #312]	; (8002cfc <Send_Init_Msg+0xa28>)
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bc8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002bcc:	2108      	movs	r1, #8
 8002bce:	f7fd fdad 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002bd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <Send_Init_Msg+0x90a>
 8002bdc:	3307      	adds	r3, #7
 8002bde:	10db      	asrs	r3, r3, #3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be6:	4413      	add	r3, r2
 8002be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	bf58      	it	pl
 8002c02:	4253      	negpl	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c24:	3308      	adds	r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da00      	bge.n	8002c2c <Send_Init_Msg+0x958>
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	10db      	asrs	r3, r3, #3
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c34:	4413      	add	r3, r2
 8002c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	3308      	adds	r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	f002 0207 	and.w	r2, r2, #7
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f011 fe26 	bl	80148b4 <CalculateDirectReverseCrc>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	f7fd fd56 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c84:	3320      	adds	r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da00      	bge.n	8002c8c <Send_Init_Msg+0x9b8>
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	4413      	add	r3, r2
 8002c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f002 0207 	and.w	r2, r2, #7
 8002cae:	bf58      	it	pl
 8002cb0:	4253      	negpl	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <Send_Init_Msg+0xa0a>
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <Send_Init_Msg+0xa30>)
 8002cd2:	f022 fbe1 	bl	8025498 <puts>
		printf("Not Sending Reply");
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Send_Init_Msg+0xa34>)
 8002cd8:	f022 fb42 	bl	8025360 <iprintf>
 8002cdc:	e009      	b.n	8002cf2 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fe38 	bl	8007960 <Process_Sending_Reply>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	375c      	adds	r7, #92	; 0x5c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	20001d88 	.word	0x20001d88
 8002d04:	08026fe4 	.word	0x08026fe4
 8002d08:	08026ffc 	.word	0x08026ffc

08002d0c <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b0ab      	sub	sp, #172	; 0xac
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70bb      	strb	r3, [r7, #2]
 8002d22:	4613      	mov	r3, r2
 8002d24:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint32_t Calc_CRC = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t Recv_CRC = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t Ticks = HAL_GetTick();
 8002d38:	f015 fb08 	bl	801834c <HAL_GetTick>
 8002d3c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint8_t noofIP = 0, uc_index = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	uint8_t LinkEstablishFlag = RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t Temp_Vital_Data_Buff[HITACHI_MAX_PAYLOAD] = {0,};
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	227c      	movs	r2, #124	; 0x7c
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f022 fa16 	bl	8025190 <memset>
	BITSTUFFINIT(0, 0);
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d70:	49a9      	ldr	r1, [pc, #676]	; (8003018 <Vital_Msg_extr+0x30c>)
 8002d72:	48aa      	ldr	r0, [pc, #680]	; (800301c <Vital_Msg_extr+0x310>)
 8002d74:	f7fd fa64 	bl	8000240 <strcmp>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8149 	beq.w	8003012 <Vital_Msg_extr+0x306>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d80:	4ba7      	ldr	r3, [pc, #668]	; (8003020 <Vital_Msg_extr+0x314>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d031      	beq.n	8002df0 <Vital_Msg_extr+0xe4>
 8002d8c:	4ba4      	ldr	r3, [pc, #656]	; (8003020 <Vital_Msg_extr+0x314>)
 8002d8e:	791b      	ldrb	r3, [r3, #4]
 8002d90:	78ba      	ldrb	r2, [r7, #2]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d12c      	bne.n	8002df0 <Vital_Msg_extr+0xe4>
	{
		uint32_t Rand_Number = 22;
 8002d96:	2316      	movs	r3, #22
 8002d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002d9c:	48a1      	ldr	r0, [pc, #644]	; (8003024 <Vital_Msg_extr+0x318>)
 8002d9e:	f019 ff87 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4ba0      	ldr	r3, [pc, #640]	; (8003028 <Vital_Msg_extr+0x31c>)
 8002da6:	fba3 1302 	umull	r1, r3, r3, r2
 8002daa:	0dd9      	lsrs	r1, r3, #23
 8002dac:	460b      	mov	r3, r1
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	1a5b      	subs	r3, r3, r1
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002dba:	489c      	ldr	r0, [pc, #624]	; (800302c <Vital_Msg_extr+0x320>)
 8002dbc:	f022 fb6c 	bl	8025498 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002dc0:	78bb      	ldrb	r3, [r7, #2]
 8002dc2:	4a9b      	ldr	r2, [pc, #620]	; (8003030 <Vital_Msg_extr+0x324>)
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3308      	adds	r3, #8
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4899      	ldr	r0, [pc, #612]	; (8003034 <Vital_Msg_extr+0x328>)
 8002dd0:	f022 fac6 	bl	8025360 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dd4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002dd8:	4897      	ldr	r0, [pc, #604]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002dda:	f022 fac1 	bl	8025360 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002dde:	f107 020c 	add.w	r2, r7, #12
 8002de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de6:	2118      	movs	r1, #24
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd fc9f 	bl	800072c <InsertBits>
	{
 8002dee:	e00b      	b.n	8002e08 <Vital_Msg_extr+0xfc>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002df0:	78bb      	ldrb	r3, [r7, #2]
 8002df2:	4a8f      	ldr	r2, [pc, #572]	; (8003030 <Vital_Msg_extr+0x324>)
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	3308      	adds	r3, #8
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f107 020c 	add.w	r2, r7, #12
 8002e00:	2118      	movs	r1, #24
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fd fc92 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002e0e:	e010      	b.n	8002e32 <Vital_Msg_extr+0x126>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e10:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	441a      	add	r2, r3
 8002e18:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e1c:	3303      	adds	r3, #3
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	33a8      	adds	r3, #168	; 0xa8
 8002e22:	443b      	add	r3, r7
 8002e24:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e28:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002e32:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	3b05      	subs	r3, #5
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	dbe8      	blt.n	8002e10 <Vital_Msg_extr+0x104>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e3e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3303      	adds	r3, #3
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f011 fd30 	bl	80148b4 <CalculateDirectReverseCrc>
 8002e54:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	3b05      	subs	r3, #5
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	441a      	add	r2, r3
 8002e60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002e64:	2120      	movs	r1, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fbd4 	bl	8000614 <ExtractBits>
 8002e6c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f000 80f5 	beq.w	8003068 <Vital_Msg_extr+0x35c>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3305      	adds	r3, #5
 8002e82:	461a      	mov	r2, r3
 8002e84:	2108      	movs	r1, #8
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fbc4 	bl	8000614 <ExtractBits>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <Vital_Msg_extr+0x19c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3305      	adds	r3, #5
 8002e96:	461a      	mov	r2, r3
 8002e98:	2108      	movs	r1, #8
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fd fbba 	bl	8000614 <ExtractBits>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	f040 809f 	bne.w	8002fe6 <Vital_Msg_extr+0x2da>
		{
			printf("Tx seq Roll over Detected\n");
 8002ea8:	4864      	ldr	r0, [pc, #400]	; (800303c <Vital_Msg_extr+0x330>)
 8002eaa:	f022 faf5 	bl	8025498 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002eae:	f107 030c 	add.w	r3, r7, #12
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f022 f96a 	bl	8025190 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002ebc:	78bb      	ldrb	r3, [r7, #2]
 8002ebe:	4a5c      	ldr	r2, [pc, #368]	; (8003030 <Vital_Msg_extr+0x324>)
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f107 020c 	add.w	r2, r7, #12
 8002ece:	2118      	movs	r1, #24
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd fc2b 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002edc:	e010      	b.n	8002f00 <Vital_Msg_extr+0x1f4>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ede:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	441a      	add	r2, r3
 8002ee6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002eea:	3303      	adds	r3, #3
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	33a8      	adds	r3, #168	; 0xa8
 8002ef0:	443b      	add	r3, r7
 8002ef2:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ef6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002efa:	3301      	adds	r3, #1
 8002efc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002f00:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	3b05      	subs	r3, #5
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbe8      	blt.n	8002ede <Vital_Msg_extr+0x1d2>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002f0c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3303      	adds	r3, #3
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	f107 030c 	add.w	r3, r7, #12
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f011 fcc9 	bl	80148b4 <CalculateDirectReverseCrc>
 8002f22:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	3b05      	subs	r3, #5
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002f32:	2120      	movs	r1, #32
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fb6d 	bl	8000614 <ExtractBits>
 8002f3a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			if(Calc_CRC == Recv_CRC)
 8002f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d137      	bne.n	8002fba <Vital_Msg_extr+0x2ae>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f4a:	483d      	ldr	r0, [pc, #244]	; (8003040 <Vital_Msg_extr+0x334>)
 8002f4c:	f022 faa4 	bl	8025498 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f50:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002f54:	483b      	ldr	r0, [pc, #236]	; (8003044 <Vital_Msg_extr+0x338>)
 8002f56:	f022 fa03 	bl	8025360 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f5a:	78bb      	ldrb	r3, [r7, #2]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	4413      	add	r3, r2
 8002f62:	3308      	adds	r3, #8
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	4837      	ldr	r0, [pc, #220]	; (8003048 <Vital_Msg_extr+0x33c>)
 8002f6a:	f022 f9f9 	bl	8025360 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f6e:	78bb      	ldrb	r3, [r7, #2]
 8002f70:	492f      	ldr	r1, [pc, #188]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f72:	011a      	lsls	r2, r3, #4
 8002f74:	440a      	add	r2, r1
 8002f76:	3208      	adds	r2, #8
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	3201      	adds	r2, #1
 8002f7c:	492c      	ldr	r1, [pc, #176]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	440b      	add	r3, r1
 8002f82:	3308      	adds	r3, #8
 8002f84:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f86:	78bb      	ldrb	r3, [r7, #2]
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <Vital_Msg_extr+0x324>)
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3308      	adds	r3, #8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	482d      	ldr	r0, [pc, #180]	; (800304c <Vital_Msg_extr+0x340>)
 8002f96:	f022 f9e3 	bl	8025360 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	78ba      	ldrb	r2, [r7, #2]
 8002f9e:	4924      	ldr	r1, [pc, #144]	; (8003030 <Vital_Msg_extr+0x324>)
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	4829      	ldr	r0, [pc, #164]	; (8003050 <Vital_Msg_extr+0x344>)
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4403      	add	r3, r0
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002fb8:	e057      	b.n	800306a <Vital_Msg_extr+0x35e>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fba:	78bb      	ldrb	r3, [r7, #2]
 8002fbc:	4a25      	ldr	r2, [pc, #148]	; (8003054 <Vital_Msg_extr+0x348>)
 8002fbe:	3366      	adds	r3, #102	; 0x66
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4823      	ldr	r0, [pc, #140]	; (8003058 <Vital_Msg_extr+0x34c>)
 8002fca:	f022 f9c9 	bl	8025360 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002fd2:	4822      	ldr	r0, [pc, #136]	; (800305c <Vital_Msg_extr+0x350>)
 8002fd4:	f022 f9c4 	bl	8025360 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fd8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002fdc:	4820      	ldr	r0, [pc, #128]	; (8003060 <Vital_Msg_extr+0x354>)
 8002fde:	f022 f9bf 	bl	8025360 <iprintf>
				return;
 8002fe2:	f000 bf7a 	b.w	8003eda <Vital_Msg_extr+0x11ce>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fe6:	78bb      	ldrb	r3, [r7, #2]
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <Vital_Msg_extr+0x348>)
 8002fea:	3366      	adds	r3, #102	; 0x66
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	481b      	ldr	r0, [pc, #108]	; (8003064 <Vital_Msg_extr+0x358>)
 8002ff6:	f022 f9b3 	bl	8025360 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002ffa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002ffe:	4817      	ldr	r0, [pc, #92]	; (800305c <Vital_Msg_extr+0x350>)
 8003000:	f022 f9ae 	bl	8025360 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8003004:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003008:	4815      	ldr	r0, [pc, #84]	; (8003060 <Vital_Msg_extr+0x354>)
 800300a:	f022 f9a9 	bl	8025360 <iprintf>
			return;
 800300e:	f000 bf64 	b.w	8003eda <Vital_Msg_extr+0x11ce>
		goto ROLLOVER_VITAL;
 8003012:	bf00      	nop
 8003014:	e029      	b.n	800306a <Vital_Msg_extr+0x35e>
 8003016:	bf00      	nop
 8003018:	08026b0c 	.word	0x08026b0c
 800301c:	20000305 	.word	0x20000305
 8003020:	20001d88 	.word	0x20001d88
 8003024:	2000a9e0 	.word	0x2000a9e0
 8003028:	80008001 	.word	0x80008001
 800302c:	08027010 	.word	0x08027010
 8003030:	200015f0 	.word	0x200015f0
 8003034:	08027030 	.word	0x08027030
 8003038:	08027058 	.word	0x08027058
 800303c:	08027080 	.word	0x08027080
 8003040:	0802709c 	.word	0x0802709c
 8003044:	080270b4 	.word	0x080270b4
 8003048:	080270d4 	.word	0x080270d4
 800304c:	080270f4 	.word	0x080270f4
 8003050:	20001aa0 	.word	0x20001aa0
 8003054:	20000304 	.word	0x20000304
 8003058:	08027120 	.word	0x08027120
 800305c:	08026d50 	.word	0x08026d50
 8003060:	08026d60 	.word	0x08026d60
 8003064:	08027140 	.word	0x08027140
		}
	}

	ROLLOVER_VITAL:
 8003068:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 800306a:	78bb      	ldrb	r3, [r7, #2]
 800306c:	49c4      	ldr	r1, [pc, #784]	; (8003380 <Vital_Msg_extr+0x674>)
 800306e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8003076:	78bb      	ldrb	r3, [r7, #2]
 8003078:	49c2      	ldr	r1, [pc, #776]	; (8003384 <Vital_Msg_extr+0x678>)
 800307a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003082:	78bb      	ldrb	r3, [r7, #2]
 8003084:	4ac0      	ldr	r2, [pc, #768]	; (8003388 <Vital_Msg_extr+0x67c>)
 8003086:	2101      	movs	r1, #1
 8003088:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800308a:	78ba      	ldrb	r2, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	015b      	lsls	r3, r3, #5
 8003090:	4413      	add	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4abd      	ldr	r2, [pc, #756]	; (800338c <Vital_Msg_extr+0x680>)
 8003096:	4413      	add	r3, r2
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f022 f877 	bl	8025190 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 80030a2:	78ba      	ldrb	r2, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	4413      	add	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4ab7      	ldr	r2, [pc, #732]	; (800338c <Vital_Msg_extr+0x680>)
 80030ae:	4413      	add	r3, r2
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f022 f843 	bl	8025140 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 80030ba:	78ba      	ldrb	r2, [r7, #2]
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	b298      	uxth	r0, r3
 80030c0:	49b2      	ldr	r1, [pc, #712]	; (800338c <Vital_Msg_extr+0x680>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	4413      	add	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	440b      	add	r3, r1
 80030cc:	3340      	adds	r3, #64	; 0x40
 80030ce:	4602      	mov	r2, r0
 80030d0:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030d2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80030d6:	3308      	adds	r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da00      	bge.n	80030de <Vital_Msg_extr+0x3d2>
 80030dc:	3307      	adds	r3, #7
 80030de:	10db      	asrs	r3, r3, #3
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80030e6:	4413      	add	r3, r2
 80030e8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80030ec:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80030f0:	3308      	adds	r3, #8
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	425a      	negs	r2, r3
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	f002 0207 	and.w	r2, r2, #7
 8003100:	bf58      	it	pl
 8003102:	4253      	negpl	r3, r2
 8003104:	b21b      	sxth	r3, r3
 8003106:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800310a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	441a      	add	r2, r3
 8003112:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003116:	2110      	movs	r1, #16
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fa7b 	bl	8000614 <ExtractBits>
 800311e:	4603      	mov	r3, r0
 8003120:	78ba      	ldrb	r2, [r7, #2]
 8003122:	b298      	uxth	r0, r3
 8003124:	499a      	ldr	r1, [pc, #616]	; (8003390 <Vital_Msg_extr+0x684>)
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	440b      	add	r3, r1
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	4602      	mov	r2, r0
 8003134:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 8003136:	78ba      	ldrb	r2, [r7, #2]
 8003138:	4995      	ldr	r1, [pc, #596]	; (8003390 <Vital_Msg_extr+0x684>)
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	440b      	add	r3, r1
 8003144:	3328      	adds	r3, #40	; 0x28
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	4892      	ldr	r0, [pc, #584]	; (8003394 <Vital_Msg_extr+0x688>)
 800314c:	f022 f908 	bl	8025360 <iprintf>
	BITSTUFFINC(16);
 8003150:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003154:	3310      	adds	r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	da00      	bge.n	800315c <Vital_Msg_extr+0x450>
 800315a:	3307      	adds	r3, #7
 800315c:	10db      	asrs	r3, r3, #3
 800315e:	b29a      	uxth	r2, r3
 8003160:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003164:	4413      	add	r3, r2
 8003166:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800316a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800316e:	3310      	adds	r3, #16
 8003170:	b29b      	uxth	r3, r3
 8003172:	b21b      	sxth	r3, r3
 8003174:	425a      	negs	r2, r3
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	f002 0207 	and.w	r2, r2, #7
 800317e:	bf58      	it	pl
 8003180:	4253      	negpl	r3, r2
 8003182:	b21b      	sxth	r3, r3
 8003184:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003188:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	441a      	add	r2, r3
 8003190:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003194:	2110      	movs	r1, #16
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fa3c 	bl	8000614 <ExtractBits>
 800319c:	4603      	mov	r3, r0
 800319e:	78ba      	ldrb	r2, [r7, #2]
 80031a0:	b298      	uxth	r0, r3
 80031a2:	497b      	ldr	r1, [pc, #492]	; (8003390 <Vital_Msg_extr+0x684>)
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	440b      	add	r3, r1
 80031ae:	3326      	adds	r3, #38	; 0x26
 80031b0:	4602      	mov	r2, r0
 80031b2:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 80031b4:	78ba      	ldrb	r2, [r7, #2]
 80031b6:	4976      	ldr	r1, [pc, #472]	; (8003390 <Vital_Msg_extr+0x684>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	440b      	add	r3, r1
 80031c2:	3326      	adds	r3, #38	; 0x26
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4873      	ldr	r0, [pc, #460]	; (8003398 <Vital_Msg_extr+0x68c>)
 80031ca:	f022 f8c9 	bl	8025360 <iprintf>
	BITSTUFFINC(16);
 80031ce:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80031d2:	3310      	adds	r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da00      	bge.n	80031da <Vital_Msg_extr+0x4ce>
 80031d8:	3307      	adds	r3, #7
 80031da:	10db      	asrs	r3, r3, #3
 80031dc:	b29a      	uxth	r2, r3
 80031de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80031e2:	4413      	add	r3, r2
 80031e4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80031e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80031ec:	3310      	adds	r3, #16
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b21b      	sxth	r3, r3
 80031f2:	425a      	negs	r2, r3
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	f002 0207 	and.w	r2, r2, #7
 80031fc:	bf58      	it	pl
 80031fe:	4253      	negpl	r3, r2
 8003200:	b21b      	sxth	r3, r3
 8003202:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003206:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	441a      	add	r2, r3
 800320e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003212:	2108      	movs	r1, #8
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f9fd 	bl	8000614 <ExtractBits>
 800321a:	4602      	mov	r2, r0
 800321c:	78bb      	ldrb	r3, [r7, #2]
 800321e:	b2d1      	uxtb	r1, r2
 8003220:	4a5e      	ldr	r2, [pc, #376]	; (800339c <Vital_Msg_extr+0x690>)
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	3302      	adds	r3, #2
 8003228:	460a      	mov	r2, r1
 800322a:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800322c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003230:	3308      	adds	r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	da00      	bge.n	8003238 <Vital_Msg_extr+0x52c>
 8003236:	3307      	adds	r3, #7
 8003238:	10db      	asrs	r3, r3, #3
 800323a:	b29a      	uxth	r2, r3
 800323c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003240:	4413      	add	r3, r2
 8003242:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003246:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800324a:	3308      	adds	r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	b21b      	sxth	r3, r3
 8003250:	425a      	negs	r2, r3
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	f002 0207 	and.w	r2, r2, #7
 800325a:	bf58      	it	pl
 800325c:	4253      	negpl	r3, r2
 800325e:	b21b      	sxth	r3, r3
 8003260:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003264:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	441a      	add	r2, r3
 800326c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003270:	2108      	movs	r1, #8
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f9ce 	bl	8000614 <ExtractBits>
 8003278:	4602      	mov	r2, r0
 800327a:	78bb      	ldrb	r3, [r7, #2]
 800327c:	b2d1      	uxtb	r1, r2
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <Vital_Msg_extr+0x690>)
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4413      	add	r3, r2
 8003284:	3301      	adds	r3, #1
 8003286:	460a      	mov	r2, r1
 8003288:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800328a:	78bb      	ldrb	r3, [r7, #2]
 800328c:	4a43      	ldr	r2, [pc, #268]	; (800339c <Vital_Msg_extr+0x690>)
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	3301      	adds	r3, #1
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d138      	bne.n	800330c <Vital_Msg_extr+0x600>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800329a:	78bb      	ldrb	r3, [r7, #2]
 800329c:	4a40      	ldr	r2, [pc, #256]	; (80033a0 <Vital_Msg_extr+0x694>)
 800329e:	3366      	adds	r3, #102	; 0x66
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4619      	mov	r1, r3
 80032a8:	483e      	ldr	r0, [pc, #248]	; (80033a4 <Vital_Msg_extr+0x698>)
 80032aa:	f022 f859 	bl	8025360 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	4a3a      	ldr	r2, [pc, #232]	; (800339c <Vital_Msg_extr+0x690>)
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	483a      	ldr	r0, [pc, #232]	; (80033a8 <Vital_Msg_extr+0x69c>)
 80032be:	f022 f84f 	bl	8025360 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	4935      	ldr	r1, [pc, #212]	; (800339c <Vital_Msg_extr+0x690>)
 80032c6:	011a      	lsls	r2, r3, #4
 80032c8:	440a      	add	r2, r1
 80032ca:	320c      	adds	r2, #12
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	3201      	adds	r2, #1
 80032d0:	4932      	ldr	r1, [pc, #200]	; (800339c <Vital_Msg_extr+0x690>)
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	440b      	add	r3, r1
 80032d6:	330c      	adds	r3, #12
 80032d8:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032da:	78bb      	ldrb	r3, [r7, #2]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <Vital_Msg_extr+0x690>)
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	330c      	adds	r3, #12
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4619      	mov	r1, r3
 80032e8:	4830      	ldr	r0, [pc, #192]	; (80033ac <Vital_Msg_extr+0x6a0>)
 80032ea:	f022 f839 	bl	8025360 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032ee:	78bb      	ldrb	r3, [r7, #2]
 80032f0:	78ba      	ldrb	r2, [r7, #2]
 80032f2:	492a      	ldr	r1, [pc, #168]	; (800339c <Vital_Msg_extr+0x690>)
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	440b      	add	r3, r1
 80032f8:	330c      	adds	r3, #12
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	482c      	ldr	r0, [pc, #176]	; (80033b0 <Vital_Msg_extr+0x6a4>)
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4403      	add	r3, r0
 8003308:	330c      	adds	r3, #12
 800330a:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 800330c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003310:	3308      	adds	r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	da00      	bge.n	8003318 <Vital_Msg_extr+0x60c>
 8003316:	3307      	adds	r3, #7
 8003318:	10db      	asrs	r3, r3, #3
 800331a:	b29a      	uxth	r2, r3
 800331c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003320:	4413      	add	r3, r2
 8003322:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003326:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800332a:	3308      	adds	r3, #8
 800332c:	b29b      	uxth	r3, r3
 800332e:	b21b      	sxth	r3, r3
 8003330:	425a      	negs	r2, r3
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	f002 0207 	and.w	r2, r2, #7
 800333a:	bf58      	it	pl
 800333c:	4253      	negpl	r3, r2
 800333e:	b21b      	sxth	r3, r3
 8003340:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003344:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	441a      	add	r2, r3
 800334c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003350:	2108      	movs	r1, #8
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f95e 	bl	8000614 <ExtractBits>
 8003358:	4603      	mov	r3, r0
 800335a:	78ba      	ldrb	r2, [r7, #2]
 800335c:	b2d8      	uxtb	r0, r3
 800335e:	490c      	ldr	r1, [pc, #48]	; (8003390 <Vital_Msg_extr+0x684>)
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	440b      	add	r3, r1
 800336a:	3302      	adds	r3, #2
 800336c:	4602      	mov	r2, r0
 800336e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003370:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003374:	3308      	adds	r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	da1c      	bge.n	80033b4 <Vital_Msg_extr+0x6a8>
 800337a:	3307      	adds	r3, #7
 800337c:	e01a      	b.n	80033b4 <Vital_Msg_extr+0x6a8>
 800337e:	bf00      	nop
 8003380:	2000132c 	.word	0x2000132c
 8003384:	20001354 	.word	0x20001354
 8003388:	200013a0 	.word	0x200013a0
 800338c:	20001da8 	.word	0x20001da8
 8003390:	200017d0 	.word	0x200017d0
 8003394:	08026e40 	.word	0x08026e40
 8003398:	08026e48 	.word	0x08026e48
 800339c:	200015f0 	.word	0x200015f0
 80033a0:	20000304 	.word	0x20000304
 80033a4:	08027154 	.word	0x08027154
 80033a8:	08027198 	.word	0x08027198
 80033ac:	080271a8 	.word	0x080271a8
 80033b0:	20001aa0 	.word	0x20001aa0
 80033b4:	10db      	asrs	r3, r3, #3
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80033bc:	4413      	add	r3, r2
 80033be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80033c2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80033c6:	3308      	adds	r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	425a      	negs	r2, r3
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	f002 0207 	and.w	r2, r2, #7
 80033d6:	bf58      	it	pl
 80033d8:	4253      	negpl	r3, r2
 80033da:	b21b      	sxth	r3, r3
 80033dc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	441a      	add	r2, r3
 80033e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80033ec:	2110      	movs	r1, #16
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f910 	bl	8000614 <ExtractBits>
 80033f4:	4602      	mov	r2, r0
 80033f6:	78bb      	ldrb	r3, [r7, #2]
 80033f8:	b291      	uxth	r1, r2
 80033fa:	4abd      	ldr	r2, [pc, #756]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	460a      	mov	r2, r1
 8003404:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003406:	49bb      	ldr	r1, [pc, #748]	; (80036f4 <Vital_Msg_extr+0x9e8>)
 8003408:	48bb      	ldr	r0, [pc, #748]	; (80036f8 <Vital_Msg_extr+0x9ec>)
 800340a:	f7fc ff19 	bl	8000240 <strcmp>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <Vital_Msg_extr+0x728>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8003414:	78bb      	ldrb	r3, [r7, #2]
 8003416:	4ab6      	ldr	r2, [pc, #728]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	78bb      	ldrb	r3, [r7, #2]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	b291      	uxth	r1, r2
 8003428:	4ab1      	ldr	r2, [pc, #708]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	460a      	mov	r2, r1
 8003432:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003434:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003438:	3310      	adds	r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	da00      	bge.n	8003440 <Vital_Msg_extr+0x734>
 800343e:	3307      	adds	r3, #7
 8003440:	10db      	asrs	r3, r3, #3
 8003442:	b29a      	uxth	r2, r3
 8003444:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003448:	4413      	add	r3, r2
 800344a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800344e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003452:	3310      	adds	r3, #16
 8003454:	b29b      	uxth	r3, r3
 8003456:	b21b      	sxth	r3, r3
 8003458:	425a      	negs	r2, r3
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	f002 0207 	and.w	r2, r2, #7
 8003462:	bf58      	it	pl
 8003464:	4253      	negpl	r3, r2
 8003466:	b21b      	sxth	r3, r3
 8003468:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 800346c:	78bb      	ldrb	r3, [r7, #2]
 800346e:	4aa0      	ldr	r2, [pc, #640]	; (80036f0 <Vital_Msg_extr+0x9e4>)
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8145 	beq.w	800370c <Vital_Msg_extr+0xa00>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003482:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	441a      	add	r2, r3
 800348a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800348e:	2108      	movs	r1, #8
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f8bf 	bl	8000614 <ExtractBits>
 8003496:	4603      	mov	r3, r0
 8003498:	78ba      	ldrb	r2, [r7, #2]
 800349a:	b2d8      	uxtb	r0, r3
 800349c:	4997      	ldr	r1, [pc, #604]	; (80036fc <Vital_Msg_extr+0x9f0>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	440b      	add	r3, r1
 80034a8:	3305      	adds	r3, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80034ae:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80034b2:	3308      	adds	r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da00      	bge.n	80034ba <Vital_Msg_extr+0x7ae>
 80034b8:	3307      	adds	r3, #7
 80034ba:	10db      	asrs	r3, r3, #3
 80034bc:	b29a      	uxth	r2, r3
 80034be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80034c2:	4413      	add	r3, r2
 80034c4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80034c8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80034cc:	3308      	adds	r3, #8
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	425a      	negs	r2, r3
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	f002 0207 	and.w	r2, r2, #7
 80034dc:	bf58      	it	pl
 80034de:	4253      	negpl	r3, r2
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	441a      	add	r2, r3
 80034ee:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80034f2:	2108      	movs	r1, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd f88d 	bl	8000614 <ExtractBits>
 80034fa:	4603      	mov	r3, r0
 80034fc:	78ba      	ldrb	r2, [r7, #2]
 80034fe:	b2d8      	uxtb	r0, r3
 8003500:	497e      	ldr	r1, [pc, #504]	; (80036fc <Vital_Msg_extr+0x9f0>)
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	440b      	add	r3, r1
 800350c:	3304      	adds	r3, #4
 800350e:	4602      	mov	r2, r0
 8003510:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8003512:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003516:	3308      	adds	r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	da00      	bge.n	800351e <Vital_Msg_extr+0x812>
 800351c:	3307      	adds	r3, #7
 800351e:	10db      	asrs	r3, r3, #3
 8003520:	b29a      	uxth	r2, r3
 8003522:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003526:	4413      	add	r3, r2
 8003528:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800352c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003530:	3308      	adds	r3, #8
 8003532:	b29b      	uxth	r3, r3
 8003534:	b21b      	sxth	r3, r3
 8003536:	425a      	negs	r2, r3
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	f002 0207 	and.w	r2, r2, #7
 8003540:	bf58      	it	pl
 8003542:	4253      	negpl	r3, r2
 8003544:	b21b      	sxth	r3, r3
 8003546:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800354a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	441a      	add	r2, r3
 8003552:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003556:	2108      	movs	r1, #8
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd f85b 	bl	8000614 <ExtractBits>
 800355e:	4603      	mov	r3, r0
 8003560:	78ba      	ldrb	r2, [r7, #2]
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	4965      	ldr	r1, [pc, #404]	; (80036fc <Vital_Msg_extr+0x9f0>)
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	440b      	add	r3, r1
 8003570:	3303      	adds	r3, #3
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8003576:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800357a:	3308      	adds	r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	da00      	bge.n	8003582 <Vital_Msg_extr+0x876>
 8003580:	3307      	adds	r3, #7
 8003582:	10db      	asrs	r3, r3, #3
 8003584:	b29a      	uxth	r2, r3
 8003586:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800358a:	4413      	add	r3, r2
 800358c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003590:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003594:	3308      	adds	r3, #8
 8003596:	b29b      	uxth	r3, r3
 8003598:	b21b      	sxth	r3, r3
 800359a:	425a      	negs	r2, r3
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	f002 0207 	and.w	r2, r2, #7
 80035a4:	bf58      	it	pl
 80035a6:	4253      	negpl	r3, r2
 80035a8:	b21b      	sxth	r3, r3
 80035aa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	441a      	add	r2, r3
 80035b6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80035ba:	2108      	movs	r1, #8
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd f829 	bl	8000614 <ExtractBits>
 80035c2:	4603      	mov	r3, r0
 80035c4:	78ba      	ldrb	r2, [r7, #2]
 80035c6:	b2d8      	uxtb	r0, r3
 80035c8:	494c      	ldr	r1, [pc, #304]	; (80036fc <Vital_Msg_extr+0x9f0>)
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	440b      	add	r3, r1
 80035d4:	4602      	mov	r2, r0
 80035d6:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035d8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80035dc:	3308      	adds	r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da00      	bge.n	80035e4 <Vital_Msg_extr+0x8d8>
 80035e2:	3307      	adds	r3, #7
 80035e4:	10db      	asrs	r3, r3, #3
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80035ec:	4413      	add	r3, r2
 80035ee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80035f2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80035f6:	3308      	adds	r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	425a      	negs	r2, r3
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	f002 0207 	and.w	r2, r2, #7
 8003606:	bf58      	it	pl
 8003608:	4253      	negpl	r3, r2
 800360a:	b21b      	sxth	r3, r3
 800360c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003610:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	441a      	add	r2, r3
 8003618:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800361c:	2108      	movs	r1, #8
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc fff8 	bl	8000614 <ExtractBits>
 8003624:	4603      	mov	r3, r0
 8003626:	78ba      	ldrb	r2, [r7, #2]
 8003628:	b2d8      	uxtb	r0, r3
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <Vital_Msg_extr+0x9f0>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	440b      	add	r3, r1
 8003636:	3301      	adds	r3, #1
 8003638:	4602      	mov	r2, r0
 800363a:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 800363c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003640:	3308      	adds	r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	da00      	bge.n	8003648 <Vital_Msg_extr+0x93c>
 8003646:	3307      	adds	r3, #7
 8003648:	10db      	asrs	r3, r3, #3
 800364a:	b29a      	uxth	r2, r3
 800364c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003650:	4413      	add	r3, r2
 8003652:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003656:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800365a:	3308      	adds	r3, #8
 800365c:	b29b      	uxth	r3, r3
 800365e:	b21b      	sxth	r3, r3
 8003660:	425a      	negs	r2, r3
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	f002 0207 	and.w	r2, r2, #7
 800366a:	bf58      	it	pl
 800366c:	4253      	negpl	r3, r2
 800366e:	b21b      	sxth	r3, r3
 8003670:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003674:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	441a      	add	r2, r3
 800367c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003680:	2108      	movs	r1, #8
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ffc6 	bl	8000614 <ExtractBits>
 8003688:	4603      	mov	r3, r0
 800368a:	78ba      	ldrb	r2, [r7, #2]
 800368c:	b2d8      	uxtb	r0, r3
 800368e:	491b      	ldr	r1, [pc, #108]	; (80036fc <Vital_Msg_extr+0x9f0>)
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	3302      	adds	r3, #2
 800369c:	4602      	mov	r2, r0
 800369e:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 80036a0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80036a4:	3308      	adds	r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da00      	bge.n	80036ac <Vital_Msg_extr+0x9a0>
 80036aa:	3307      	adds	r3, #7
 80036ac:	10db      	asrs	r3, r3, #3
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80036b4:	4413      	add	r3, r2
 80036b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80036ba:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80036be:	3308      	adds	r3, #8
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	425a      	negs	r2, r3
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	f002 0207 	and.w	r2, r2, #7
 80036ce:	bf58      	it	pl
 80036d0:	4253      	negpl	r3, r2
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fd62 	bl	80091a4 <IS_MLK_EIPC_TIME_MATCHING>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <Vital_Msg_extr+0x9f8>
 80036e6:	78bb      	ldrb	r3, [r7, #2]
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <Vital_Msg_extr+0x9f4>)
 80036ea:	2100      	movs	r1, #0
 80036ec:	54d1      	strb	r1, [r2, r3]
 80036ee:	e00d      	b.n	800370c <Vital_Msg_extr+0xa00>
 80036f0:	200015f0 	.word	0x200015f0
 80036f4:	08026b0c 	.word	0x08026b0c
 80036f8:	20000305 	.word	0x20000305
 80036fc:	200015b4 	.word	0x200015b4
 8003700:	20001460 	.word	0x20001460
 8003704:	78bb      	ldrb	r3, [r7, #2]
 8003706:	4a91      	ldr	r2, [pc, #580]	; (800394c <Vital_Msg_extr+0xc40>)
 8003708:	2101      	movs	r1, #1
 800370a:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800370c:	78bb      	ldrb	r3, [r7, #2]
 800370e:	4a90      	ldr	r2, [pc, #576]	; (8003950 <Vital_Msg_extr+0xc44>)
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4413      	add	r3, r2
 8003714:	3304      	adds	r3, #4
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <Vital_Msg_extr+0xa1a>
	{
		LinkEstablishFlag = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003726:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	441a      	add	r2, r3
 800372e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003732:	2108      	movs	r1, #8
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc ff6d 	bl	8000614 <ExtractBits>
 800373a:	4603      	mov	r3, r0
 800373c:	78ba      	ldrb	r2, [r7, #2]
 800373e:	b2d8      	uxtb	r0, r3
 8003740:	4984      	ldr	r1, [pc, #528]	; (8003954 <Vital_Msg_extr+0xc48>)
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	440b      	add	r3, r1
 800374c:	3303      	adds	r3, #3
 800374e:	4602      	mov	r2, r0
 8003750:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003752:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003756:	3308      	adds	r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	da00      	bge.n	800375e <Vital_Msg_extr+0xa52>
 800375c:	3307      	adds	r3, #7
 800375e:	10db      	asrs	r3, r3, #3
 8003760:	b29a      	uxth	r2, r3
 8003762:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003766:	4413      	add	r3, r2
 8003768:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800376c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003770:	3308      	adds	r3, #8
 8003772:	b29b      	uxth	r3, r3
 8003774:	b21b      	sxth	r3, r3
 8003776:	425a      	negs	r2, r3
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	f002 0207 	and.w	r2, r2, #7
 8003780:	bf58      	it	pl
 8003782:	4253      	negpl	r3, r2
 8003784:	b21b      	sxth	r3, r3
 8003786:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 800378a:	78ba      	ldrb	r2, [r7, #2]
 800378c:	4971      	ldr	r1, [pc, #452]	; (8003954 <Vital_Msg_extr+0xc48>)
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	440b      	add	r3, r1
 8003798:	3303      	adds	r3, #3
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4619      	mov	r1, r3
 800379e:	486e      	ldr	r0, [pc, #440]	; (8003958 <Vital_Msg_extr+0xc4c>)
 80037a0:	f021 fdde 	bl	8025360 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80037a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	441a      	add	r2, r3
 80037ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037b0:	2108      	movs	r1, #8
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc ff2e 	bl	8000614 <ExtractBits>
 80037b8:	4603      	mov	r3, r0
 80037ba:	78ba      	ldrb	r2, [r7, #2]
 80037bc:	b2d8      	uxtb	r0, r3
 80037be:	4965      	ldr	r1, [pc, #404]	; (8003954 <Vital_Msg_extr+0xc48>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	440b      	add	r3, r1
 80037ca:	3304      	adds	r3, #4
 80037cc:	4602      	mov	r2, r0
 80037ce:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037d0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80037d4:	3308      	adds	r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da00      	bge.n	80037dc <Vital_Msg_extr+0xad0>
 80037da:	3307      	adds	r3, #7
 80037dc:	10db      	asrs	r3, r3, #3
 80037de:	b29a      	uxth	r2, r3
 80037e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037e4:	4413      	add	r3, r2
 80037e6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80037ea:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037ee:	3308      	adds	r3, #8
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b21b      	sxth	r3, r3
 80037f4:	425a      	negs	r2, r3
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	f002 0207 	and.w	r2, r2, #7
 80037fe:	bf58      	it	pl
 8003800:	4253      	negpl	r3, r2
 8003802:	b21b      	sxth	r3, r3
 8003804:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 8003808:	78ba      	ldrb	r2, [r7, #2]
 800380a:	4952      	ldr	r1, [pc, #328]	; (8003954 <Vital_Msg_extr+0xc48>)
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	440b      	add	r3, r1
 8003816:	3303      	adds	r3, #3
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (noofIP != 0)
 8003822:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <Vital_Msg_extr+0xb3c>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 800382a:	78ba      	ldrb	r2, [r7, #2]
 800382c:	4949      	ldr	r1, [pc, #292]	; (8003954 <Vital_Msg_extr+0xc48>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	440b      	add	r3, r1
 8003838:	3303      	adds	r3, #3
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	08db      	lsrs	r3, r3, #3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003846:	e00b      	b.n	8003860 <Vital_Msg_extr+0xb54>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003848:	78ba      	ldrb	r2, [r7, #2]
 800384a:	4942      	ldr	r1, [pc, #264]	; (8003954 <Vital_Msg_extr+0xc48>)
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	440b      	add	r3, r1
 8003856:	3303      	adds	r3, #3
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	08db      	lsrs	r3, r3, #3
 800385c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003860:	2300      	movs	r3, #0
 8003862:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003866:	e04c      	b.n	8003902 <Vital_Msg_extr+0xbf6>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003868:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	441a      	add	r2, r3
 8003870:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003874:	2108      	movs	r1, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fecc 	bl	8000614 <ExtractBits>
 800387c:	4603      	mov	r3, r0
 800387e:	78ba      	ldrb	r2, [r7, #2]
 8003880:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003884:	b2dc      	uxtb	r4, r3
 8003886:	4833      	ldr	r0, [pc, #204]	; (8003954 <Vital_Msg_extr+0xc48>)
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4403      	add	r3, r0
 8003892:	440b      	add	r3, r1
 8003894:	3305      	adds	r3, #5
 8003896:	4622      	mov	r2, r4
 8003898:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 800389a:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 800389e:	78ba      	ldrb	r2, [r7, #2]
 80038a0:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 80038a4:	4c2b      	ldr	r4, [pc, #172]	; (8003954 <Vital_Msg_extr+0xc48>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4423      	add	r3, r4
 80038b0:	440b      	add	r3, r1
 80038b2:	3305      	adds	r3, #5
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	4601      	mov	r1, r0
 80038ba:	4828      	ldr	r0, [pc, #160]	; (800395c <Vital_Msg_extr+0xc50>)
 80038bc:	f021 fd50 	bl	8025360 <iprintf>
		BITSTUFFINC(8);
 80038c0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80038c4:	3308      	adds	r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da00      	bge.n	80038cc <Vital_Msg_extr+0xbc0>
 80038ca:	3307      	adds	r3, #7
 80038cc:	10db      	asrs	r3, r3, #3
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038d4:	4413      	add	r3, r2
 80038d6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80038da:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038de:	3308      	adds	r3, #8
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	425a      	negs	r2, r3
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	f002 0207 	and.w	r2, r2, #7
 80038ee:	bf58      	it	pl
 80038f0:	4253      	negpl	r3, r2
 80038f2:	b21b      	sxth	r3, r3
 80038f4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003902:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003906:	b29b      	uxth	r3, r3
 8003908:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800390c:	429a      	cmp	r2, r3
 800390e:	d3ab      	bcc.n	8003868 <Vital_Msg_extr+0xb5c>
	}
	printf("\n");
 8003910:	200a      	movs	r0, #10
 8003912:	f021 fd3d 	bl	8025390 <putchar>
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8003916:	78bb      	ldrb	r3, [r7, #2]
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <Vital_Msg_extr+0xc54>)
 800391a:	4413      	add	r3, r2
 800391c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003920:	2b02      	cmp	r3, #2
 8003922:	d10e      	bne.n	8003942 <Vital_Msg_extr+0xc36>
	{
		printf("Online Bit Status:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8003924:	78ba      	ldrb	r2, [r7, #2]
 8003926:	490b      	ldr	r1, [pc, #44]	; (8003954 <Vital_Msg_extr+0xc48>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	440b      	add	r3, r1
 8003932:	3305      	adds	r3, #5
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	4619      	mov	r1, r3
 800393c:	4809      	ldr	r0, [pc, #36]	; (8003964 <Vital_Msg_extr+0xc58>)
 800393e:	f021 fd0f 	bl	8025360 <iprintf>
	}

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003942:	2300      	movs	r3, #0
 8003944:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003948:	e048      	b.n	80039dc <Vital_Msg_extr+0xcd0>
 800394a:	bf00      	nop
 800394c:	20001460 	.word	0x20001460
 8003950:	200015f0 	.word	0x200015f0
 8003954:	200017d0 	.word	0x200017d0
 8003958:	080271b8 	.word	0x080271b8
 800395c:	080271c0 	.word	0x080271c0
 8003960:	20000304 	.word	0x20000304
 8003964:	080271d0 	.word	0x080271d0
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003968:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	441a      	add	r2, r3
 8003970:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003974:	2108      	movs	r1, #8
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fe4c 	bl	8000614 <ExtractBits>
 800397c:	4603      	mov	r3, r0
 800397e:	78ba      	ldrb	r2, [r7, #2]
 8003980:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003984:	b2dc      	uxtb	r4, r3
 8003986:	486b      	ldr	r0, [pc, #428]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	4403      	add	r3, r0
 8003992:	440b      	add	r3, r1
 8003994:	3315      	adds	r3, #21
 8003996:	4622      	mov	r2, r4
 8003998:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800399a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800399e:	3308      	adds	r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da00      	bge.n	80039a6 <Vital_Msg_extr+0xc9a>
 80039a4:	3307      	adds	r3, #7
 80039a6:	10db      	asrs	r3, r3, #3
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80039ae:	4413      	add	r3, r2
 80039b0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80039b4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80039b8:	3308      	adds	r3, #8
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	b21b      	sxth	r3, r3
 80039be:	425a      	negs	r2, r3
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	f002 0207 	and.w	r2, r2, #7
 80039c8:	bf58      	it	pl
 80039ca:	4253      	negpl	r3, r2
 80039cc:	b21b      	sxth	r3, r3
 80039ce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80039d2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80039d6:	3301      	adds	r3, #1
 80039d8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80039dc:	78ba      	ldrb	r2, [r7, #2]
 80039de:	4955      	ldr	r1, [pc, #340]	; (8003b34 <Vital_Msg_extr+0xe28>)
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	440b      	add	r3, r1
 80039ea:	3304      	adds	r3, #4
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d3b7      	bcc.n	8003968 <Vital_Msg_extr+0xc5c>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 80039f8:	787a      	ldrb	r2, [r7, #1]
 80039fa:	78bb      	ldrb	r3, [r7, #2]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 fc0e 	bl	8007220 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 8003a04:	78bb      	ldrb	r3, [r7, #2]
 8003a06:	4a4c      	ldr	r2, [pc, #304]	; (8003b38 <Vital_Msg_extr+0xe2c>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 8003a0c:	78bb      	ldrb	r3, [r7, #2]
 8003a0e:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <Vital_Msg_extr+0xe2c>)
 8003a10:	3302      	adds	r3, #2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003a1a:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8003a1c:	78ba      	ldrb	r2, [r7, #2]
 8003a1e:	4947      	ldr	r1, [pc, #284]	; (8003b3c <Vital_Msg_extr+0xe30>)
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	440b      	add	r3, r1
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d116      	bne.n	8003a60 <Vital_Msg_extr+0xd54>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8003a32:	2246      	movs	r2, #70	; 0x46
 8003a34:	2100      	movs	r1, #0
 8003a36:	4842      	ldr	r0, [pc, #264]	; (8003b40 <Vital_Msg_extr+0xe34>)
 8003a38:	f021 fbaa 	bl	8025190 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8003a3c:	78bb      	ldrb	r3, [r7, #2]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <Vital_Msg_extr+0xe34>)
 8003a42:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <Vital_Msg_extr+0xe34>)
 8003a4a:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	483c      	ldr	r0, [pc, #240]	; (8003b44 <Vital_Msg_extr+0xe38>)
 8003a54:	f021 fb74 	bl	8025140 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 8003a58:	f240 2003 	movw	r0, #515	; 0x203
 8003a5c:	f00c fec4 	bl	80107e8 <TransmitCanPkt>

	/* To check Whether the Data received is from Active system or Not By checking the 1st bit Vital Data
	 * This checking is Only required for Serial Interface
	 */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET))
 8003a60:	78bb      	ldrb	r3, [r7, #2]
 8003a62:	4a39      	ldr	r2, [pc, #228]	; (8003b48 <Vital_Msg_extr+0xe3c>)
 8003a64:	4413      	add	r3, r2
 8003a66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d128      	bne.n	8003ac0 <Vital_Msg_extr+0xdb4>
 8003a6e:	78ba      	ldrb	r2, [r7, #2]
 8003a70:	4930      	ldr	r1, [pc, #192]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3305      	adds	r3, #5
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11b      	bne.n	8003ac0 <Vital_Msg_extr+0xdb4>
	{
		printf("Online Bit Drop\n");
 8003a88:	4830      	ldr	r0, [pc, #192]	; (8003b4c <Vital_Msg_extr+0xe40>)
 8003a8a:	f021 fd05 	bl	8025498 <puts>
		LinkEstablishFlag = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		Act_InactiveFlag[Source_Index] = SET;
 8003a94:	78bb      	ldrb	r3, [r7, #2]
 8003a96:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <Vital_Msg_extr+0xe44>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	54d1      	strb	r1, [r2, r3]
		LastActCount[Source_Index] = RESET;
 8003a9c:	78bb      	ldrb	r3, [r7, #2]
 8003a9e:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	54d1      	strb	r1, [r2, r3]
		memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 8003aa4:	78ba      	ldrb	r2, [r7, #2]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3305      	adds	r3, #5
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f021 fb69 	bl	8025190 <memset>
 8003abe:	e05d      	b.n	8003b7c <Vital_Msg_extr+0xe70>
	}
	else if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == SET) && (LinkEstablishFlag == SET))
 8003ac0:	78bb      	ldrb	r3, [r7, #2]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <Vital_Msg_extr+0xe3c>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d156      	bne.n	8003b7c <Vital_Msg_extr+0xe70>
 8003ace:	78ba      	ldrb	r2, [r7, #2]
 8003ad0:	4918      	ldr	r1, [pc, #96]	; (8003b34 <Vital_Msg_extr+0xe28>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	440b      	add	r3, r1
 8003adc:	3305      	adds	r3, #5
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d049      	beq.n	8003b7c <Vital_Msg_extr+0xe70>
 8003ae8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d145      	bne.n	8003b7c <Vital_Msg_extr+0xe70>
	{
		if(Act_InactiveFlag[Source_Index] == SET)
 8003af0:	78bb      	ldrb	r3, [r7, #2]
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <Vital_Msg_extr+0xe44>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d140      	bne.n	8003b7c <Vital_Msg_extr+0xe70>
		{
			++LastActCount[Source_Index];
 8003afa:	78bb      	ldrb	r3, [r7, #2]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003afe:	5cd2      	ldrb	r2, [r2, r3]
 8003b00:	3201      	adds	r2, #1
 8003b02:	b2d1      	uxtb	r1, r2
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b06:	54d1      	strb	r1, [r2, r3]
			printf("Updated Count:%u\n",LastActCount[Source_Index]);
 8003b08:	78bb      	ldrb	r3, [r7, #2]
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b0c:	5cd3      	ldrb	r3, [r2, r3]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4811      	ldr	r0, [pc, #68]	; (8003b58 <Vital_Msg_extr+0xe4c>)
 8003b12:	f021 fc25 	bl	8025360 <iprintf>
			if(LastActCount[Source_Index] >= MAX_LAST_ACT_COUNT)
 8003b16:	78bb      	ldrb	r3, [r7, #2]
 8003b18:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d91d      	bls.n	8003b5c <Vital_Msg_extr+0xe50>
			{
				Act_InactiveFlag[Source_Index] = RESET;
 8003b20:	78bb      	ldrb	r3, [r7, #2]
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <Vital_Msg_extr+0xe44>)
 8003b24:	2100      	movs	r1, #0
 8003b26:	54d1      	strb	r1, [r2, r3]
				LastActCount[Source_Index] = MAX_LAST_ACT_COUNT; /* To avoid Overflow of Variable */
 8003b28:	78bb      	ldrb	r3, [r7, #2]
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <Vital_Msg_extr+0xe48>)
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	54d1      	strb	r1, [r2, r3]
 8003b30:	e024      	b.n	8003b7c <Vital_Msg_extr+0xe70>
 8003b32:	bf00      	nop
 8003b34:	200017d0 	.word	0x200017d0
 8003b38:	200020c0 	.word	0x200020c0
 8003b3c:	20001aa0 	.word	0x20001aa0
 8003b40:	20001cb0 	.word	0x20001cb0
 8003b44:	20001cb6 	.word	0x20001cb6
 8003b48:	20000304 	.word	0x20000304
 8003b4c:	080271e8 	.word	0x080271e8
 8003b50:	20001234 	.word	0x20001234
 8003b54:	20001240 	.word	0x20001240
 8003b58:	080271f8 	.word	0x080271f8
			}
			else
			{
				LinkEstablishFlag = RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 8003b62:	78ba      	ldrb	r2, [r7, #2]
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4ab1      	ldr	r2, [pc, #708]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	3305      	adds	r3, #5
 8003b72:	2210      	movs	r2, #16
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f021 fb0a 	bl	8025190 <memset>
		}
	}


	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8003b7c:	78ba      	ldrb	r2, [r7, #2]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4aac      	ldr	r2, [pc, #688]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f021 fafd 	bl	8025190 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003b96:	78ba      	ldrb	r2, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4aa5      	ldr	r2, [pc, #660]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	1c58      	adds	r0, r3, #1
 8003ba6:	78ba      	ldrb	r2, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4aa0      	ldr	r2, [pc, #640]	; (8003e34 <Vital_Msg_extr+0x1128>)
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3305      	adds	r3, #5
 8003bb6:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f021 fac0 	bl	8025140 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003bc0:	78ba      	ldrb	r2, [r7, #2]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4a9b      	ldr	r2, [pc, #620]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003bd4:	b212      	sxth	r2, r2
 8003bd6:	78bc      	ldrb	r4, [r7, #2]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f010 fdb0 	bl	8014740 <GetCRC16>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4619      	mov	r1, r3
 8003be4:	4a94      	ldr	r2, [pc, #592]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003be6:	4623      	mov	r3, r4
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4423      	add	r3, r4
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	3312      	adds	r3, #18
 8003bf2:	460a      	mov	r2, r1
 8003bf4:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003bf6:	78ba      	ldrb	r2, [r7, #2]
 8003bf8:	498f      	ldr	r1, [pc, #572]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3311      	adds	r3, #17
 8003c06:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003c0a:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003c0c:	78ba      	ldrb	r2, [r7, #2]
 8003c0e:	498a      	ldr	r1, [pc, #552]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	78ba      	ldrb	r2, [r7, #2]
 8003c1c:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003c1e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d176      	bne.n	8003d14 <Vital_Msg_extr+0x1008>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003c26:	78ba      	ldrb	r2, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a82      	ldr	r2, [pc, #520]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003c32:	4413      	add	r3, r2
 8003c34:	3301      	adds	r3, #1
 8003c36:	2210      	movs	r2, #16
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f021 faa8 	bl	8025190 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003c40:	78ba      	ldrb	r2, [r7, #2]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003c4c:	1898      	adds	r0, r3, r2
 8003c4e:	78ba      	ldrb	r2, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a77      	ldr	r2, [pc, #476]	; (8003e38 <Vital_Msg_extr+0x112c>)
 8003c5a:	4413      	add	r3, r2
 8003c5c:	2214      	movs	r2, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f021 fa6e 	bl	8025140 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003c64:	78bb      	ldrb	r3, [r7, #2]
 8003c66:	4976      	ldr	r1, [pc, #472]	; (8003e40 <Vital_Msg_extr+0x1134>)
 8003c68:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003c70:	78bb      	ldrb	r3, [r7, #2]
 8003c72:	4a74      	ldr	r2, [pc, #464]	; (8003e44 <Vital_Msg_extr+0x1138>)
 8003c74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003c78:	78ba      	ldrb	r2, [r7, #2]
 8003c7a:	4870      	ldr	r0, [pc, #448]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	3312      	adds	r3, #18
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	4299      	cmp	r1, r3
 8003c8c:	d042      	beq.n	8003d14 <Vital_Msg_extr+0x1008>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003c8e:	78ba      	ldrb	r2, [r7, #2]
 8003c90:	78b9      	ldrb	r1, [r7, #2]
 8003c92:	486a      	ldr	r0, [pc, #424]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4403      	add	r3, r0
 8003c9e:	3312      	adds	r3, #18
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <Vital_Msg_extr+0x1138>)
 8003ca4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003ca8:	2214      	movs	r2, #20
 8003caa:	2100      	movs	r1, #0
 8003cac:	4866      	ldr	r0, [pc, #408]	; (8003e48 <Vital_Msg_extr+0x113c>)
 8003cae:	f021 fa6f 	bl	8025190 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003cb2:	78ba      	ldrb	r2, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a5f      	ldr	r2, [pc, #380]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	2214      	movs	r2, #20
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4860      	ldr	r0, [pc, #384]	; (8003e48 <Vital_Msg_extr+0x113c>)
 8003cc6:	f021 fa3b 	bl	8025140 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8003cca:	f240 2007 	movw	r0, #519	; 0x207
 8003cce:	f00c fd8b 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 8003cd2:	78bb      	ldrb	r3, [r7, #2]
 8003cd4:	4a5d      	ldr	r2, [pc, #372]	; (8003e4c <Vital_Msg_extr+0x1140>)
 8003cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <Vital_Msg_extr+0x1008>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003cde:	78bb      	ldrb	r3, [r7, #2]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4a5b      	ldr	r2, [pc, #364]	; (8003e50 <Vital_Msg_extr+0x1144>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	1c98      	adds	r0, r3, #2
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f021 fa20 	bl	8025140 <memcpy>
#ifdef EI_1

#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif
				ReArrangedVitalData();
 8003d00:	f006 f948 	bl	8009f94 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8003d04:	f240 1019 	movw	r0, #281	; 0x119
 8003d08:	f00c fd6e 	bl	80107e8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8003d0c:	4a51      	ldr	r2, [pc, #324]	; (8003e54 <Vital_Msg_extr+0x1148>)
 8003d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d12:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003d14:	78b9      	ldrb	r1, [r7, #2]
 8003d16:	78ba      	ldrb	r2, [r7, #2]
 8003d18:	4848      	ldr	r0, [pc, #288]	; (8003e3c <Vital_Msg_extr+0x1130>)
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4403      	add	r3, r0
 8003d24:	3312      	adds	r3, #18
 8003d26:	8818      	ldrh	r0, [r3, #0]
 8003d28:	494b      	ldr	r1, [pc, #300]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	3306      	adds	r3, #6
 8003d36:	4602      	mov	r2, r0
 8003d38:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003d3a:	78ba      	ldrb	r2, [r7, #2]
 8003d3c:	4946      	ldr	r1, [pc, #280]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003d3e:	4613      	mov	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	440b      	add	r3, r1
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003d4e:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003d50:	78ba      	ldrb	r2, [r7, #2]
 8003d52:	4941      	ldr	r1, [pc, #260]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003d54:	4613      	mov	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3305      	adds	r3, #5
 8003d60:	2202      	movs	r2, #2
 8003d62:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003d64:	78ba      	ldrb	r2, [r7, #2]
 8003d66:	493c      	ldr	r1, [pc, #240]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	440b      	add	r3, r1
 8003d72:	78ba      	ldrb	r2, [r7, #2]
 8003d74:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003d76:	78ba      	ldrb	r2, [r7, #2]
 8003d78:	4937      	ldr	r1, [pc, #220]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	3301      	adds	r3, #1
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003d8a:	78ba      	ldrb	r2, [r7, #2]
 8003d8c:	4932      	ldr	r1, [pc, #200]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	440b      	add	r3, r1
 8003d98:	3302      	adds	r3, #2
 8003d9a:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8003d9e:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003da0:	2218      	movs	r2, #24
 8003da2:	2100      	movs	r1, #0
 8003da4:	482d      	ldr	r0, [pc, #180]	; (8003e5c <Vital_Msg_extr+0x1150>)
 8003da6:	f021 f9f3 	bl	8025190 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003daa:	78ba      	ldrb	r2, [r7, #2]
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003db6:	4413      	add	r3, r2
 8003db8:	2218      	movs	r2, #24
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4827      	ldr	r0, [pc, #156]	; (8003e5c <Vital_Msg_extr+0x1150>)
 8003dbe:	f021 f9bf 	bl	8025140 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8003dc2:	f240 2001 	movw	r0, #513	; 0x201
 8003dc6:	f00c fd0f 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003dca:	78ba      	ldrb	r2, [r7, #2]
 8003dcc:	4922      	ldr	r1, [pc, #136]	; (8003e58 <Vital_Msg_extr+0x114c>)
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3301      	adds	r3, #1
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003dde:	78bb      	ldrb	r3, [r7, #2]
 8003de0:	491f      	ldr	r1, [pc, #124]	; (8003e60 <Vital_Msg_extr+0x1154>)
 8003de2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003dea:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d13e      	bne.n	8003e70 <Vital_Msg_extr+0x1164>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003df2:	78bb      	ldrb	r3, [r7, #2]
 8003df4:	491b      	ldr	r1, [pc, #108]	; (8003e64 <Vital_Msg_extr+0x1158>)
 8003df6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003dfe:	78ba      	ldrb	r2, [r7, #2]
 8003e00:	4919      	ldr	r1, [pc, #100]	; (8003e68 <Vital_Msg_extr+0x115c>)
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e12:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003e14:	78ba      	ldrb	r2, [r7, #2]
 8003e16:	4914      	ldr	r1, [pc, #80]	; (8003e68 <Vital_Msg_extr+0x115c>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3301      	adds	r3, #1
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8003e28:	78bb      	ldrb	r3, [r7, #2]
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <Vital_Msg_extr+0x1160>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	54d1      	strb	r1, [r2, r3]
 8003e30:	e04e      	b.n	8003ed0 <Vital_Msg_extr+0x11c4>
 8003e32:	bf00      	nop
 8003e34:	200017d0 	.word	0x200017d0
 8003e38:	200021e4 	.word	0x200021e4
 8003e3c:	200022ac 	.word	0x200022ac
 8003e40:	20001260 	.word	0x20001260
 8003e44:	20001288 	.word	0x20001288
 8003e48:	2000243c 	.word	0x2000243c
 8003e4c:	2000124c 	.word	0x2000124c
 8003e50:	2000146c 	.word	0x2000146c
 8003e54:	200011e0 	.word	0x200011e0
 8003e58:	20001aa0 	.word	0x20001aa0
 8003e5c:	20001c80 	.word	0x20001c80
 8003e60:	200011b4 	.word	0x200011b4
 8003e64:	2000129c 	.word	0x2000129c
 8003e68:	200020f4 	.word	0x200020f4
 8003e6c:	200012ec 	.word	0x200012ec
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8003e70:	78bb      	ldrb	r3, [r7, #2]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <Vital_Msg_extr+0x11d4>)
 8003e74:	2100      	movs	r1, #0
 8003e76:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003e78:	78ba      	ldrb	r2, [r7, #2]
 8003e7a:	491a      	ldr	r1, [pc, #104]	; (8003ee4 <Vital_Msg_extr+0x11d8>)
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3308      	adds	r3, #8
 8003e88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e8c:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8003e8e:	78ba      	ldrb	r2, [r7, #2]
 8003e90:	4914      	ldr	r1, [pc, #80]	; (8003ee4 <Vital_Msg_extr+0x11d8>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003ea2:	78ba      	ldrb	r2, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <Vital_Msg_extr+0x11dc>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f021 f96a 	bl	8025190 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8003ebc:	78ba      	ldrb	r2, [r7, #2]
 8003ebe:	490a      	ldr	r1, [pc, #40]	; (8003ee8 <Vital_Msg_extr+0x11dc>)
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3312      	adds	r3, #18
 8003ecc:	2200      	movs	r2, #0
 8003ece:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ed4:	4805      	ldr	r0, [pc, #20]	; (8003eec <Vital_Msg_extr+0x11e0>)
 8003ed6:	f016 ff22 	bl	801ad1e <HAL_GPIO_TogglePin>

}
 8003eda:	37ac      	adds	r7, #172	; 0xac
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}
 8003ee0:	200012ec 	.word	0x200012ec
 8003ee4:	200020f4 	.word	0x200020f4
 8003ee8:	200022ac 	.word	0x200022ac
 8003eec:	40021c00 	.word	0x40021c00

08003ef0 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b0a5      	sub	sp, #148	; 0x94
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	460a      	mov	r2, r1
 8003efa:	71fb      	strb	r3, [r7, #7]
 8003efc:	4613      	mov	r3, r2
 8003efe:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003f00:	2300      	movs	r3, #0
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f08:	2238      	movs	r2, #56	; 0x38
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f021 f93f 	bl	8025190 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	f107 0310 	add.w	r3, r7, #16
 8003f1a:	2238      	movs	r2, #56	; 0x38
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f021 f936 	bl	8025190 <memset>
	uint8_t uc_index = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f3a:	223c      	movs	r2, #60	; 0x3c
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f021 f926 	bl	8025190 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003f44:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f4c:	441a      	add	r2, r3
 8003f4e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f52:	23f4      	movs	r3, #244	; 0xf4
 8003f54:	2108      	movs	r1, #8
 8003f56:	f7fc fbe9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003f5a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f5e:	3308      	adds	r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da00      	bge.n	8003f66 <Send_Vital_Data_Message+0x76>
 8003f64:	3307      	adds	r3, #7
 8003f66:	10db      	asrs	r3, r3, #3
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f6e:	4413      	add	r3, r2
 8003f70:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f78:	3308      	adds	r3, #8
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	b21b      	sxth	r3, r3
 8003f7e:	425a      	negs	r2, r3
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	f002 0207 	and.w	r2, r2, #7
 8003f88:	bf58      	it	pl
 8003f8a:	4253      	negpl	r3, r2
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003f92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f9a:	441a      	add	r2, r3
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	49c6      	ldr	r1, [pc, #792]	; (80042b8 <Send_Vital_Data_Message+0x3c8>)
 8003fa0:	3366      	adds	r3, #102	; 0x66
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fac:	2110      	movs	r1, #16
 8003fae:	f7fc fbbd 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003fb2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da00      	bge.n	8003fbe <Send_Vital_Data_Message+0xce>
 8003fbc:	3307      	adds	r3, #7
 8003fbe:	10db      	asrs	r3, r3, #3
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003fcc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fd0:	3310      	adds	r3, #16
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	b21b      	sxth	r3, r3
 8003fd6:	425a      	negs	r2, r3
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	f002 0207 	and.w	r2, r2, #7
 8003fe0:	bf58      	it	pl
 8003fe2:	4253      	negpl	r3, r2
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003fea:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ff2:	441a      	add	r2, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	49b0      	ldr	r1, [pc, #704]	; (80042b8 <Send_Vital_Data_Message+0x3c8>)
 8003ff8:	3370      	adds	r3, #112	; 0x70
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004004:	2110      	movs	r1, #16
 8004006:	f7fc fb91 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800400a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800400e:	3310      	adds	r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	da00      	bge.n	8004016 <Send_Vital_Data_Message+0x126>
 8004014:	3307      	adds	r3, #7
 8004016:	10db      	asrs	r3, r3, #3
 8004018:	b29a      	uxth	r2, r3
 800401a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800401e:	4413      	add	r3, r2
 8004020:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004024:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004028:	3310      	adds	r3, #16
 800402a:	b29b      	uxth	r3, r3
 800402c:	b21b      	sxth	r3, r3
 800402e:	425a      	negs	r2, r3
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	f002 0207 	and.w	r2, r2, #7
 8004038:	bf58      	it	pl
 800403a:	4253      	negpl	r3, r2
 800403c:	b21b      	sxth	r3, r3
 800403e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004042:	4b9e      	ldr	r3, [pc, #632]	; (80042bc <Send_Vital_Data_Message+0x3cc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d035      	beq.n	80040bc <Send_Vital_Data_Message+0x1cc>
 8004050:	4b9a      	ldr	r3, [pc, #616]	; (80042bc <Send_Vital_Data_Message+0x3cc>)
 8004052:	791b      	ldrb	r3, [r3, #4]
 8004054:	79fa      	ldrb	r2, [r7, #7]
 8004056:	429a      	cmp	r2, r3
 8004058:	d130      	bne.n	80040bc <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8004060:	4897      	ldr	r0, [pc, #604]	; (80042c0 <Send_Vital_Data_Message+0x3d0>)
 8004062:	f018 fe25 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8004066:	4602      	mov	r2, r0
 8004068:	4b96      	ldr	r3, [pc, #600]	; (80042c4 <Send_Vital_Data_Message+0x3d4>)
 800406a:	fba3 1302 	umull	r1, r3, r3, r2
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	21c8      	movs	r1, #200	; 0xc8
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 800407c:	4892      	ldr	r0, [pc, #584]	; (80042c8 <Send_Vital_Data_Message+0x3d8>)
 800407e:	f021 fa0b 	bl	8025498 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	4a91      	ldr	r2, [pc, #580]	; (80042cc <Send_Vital_Data_Message+0x3dc>)
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	4413      	add	r3, r2
 800408a:	3301      	adds	r3, #1
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	4619      	mov	r1, r3
 8004090:	488f      	ldr	r0, [pc, #572]	; (80042d0 <Send_Vital_Data_Message+0x3e0>)
 8004092:	f021 f965 	bl	8025360 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8004096:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800409a:	4619      	mov	r1, r3
 800409c:	488d      	ldr	r0, [pc, #564]	; (80042d4 <Send_Vital_Data_Message+0x3e4>)
 800409e:	f021 f95f 	bl	8025360 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 80040a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040aa:	441a      	add	r2, r3
 80040ac:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80040b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040b4:	2108      	movs	r1, #8
 80040b6:	f7fc fb39 	bl	800072c <InsertBits>
	{
 80040ba:	e00f      	b.n	80040dc <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80040bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040c4:	441a      	add	r2, r3
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	4980      	ldr	r1, [pc, #512]	; (80042cc <Send_Vital_Data_Message+0x3dc>)
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	440b      	add	r3, r1
 80040ce:	3301      	adds	r3, #1
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040d6:	2108      	movs	r1, #8
 80040d8:	f7fc fb28 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80040dc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040e0:	3308      	adds	r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da00      	bge.n	80040e8 <Send_Vital_Data_Message+0x1f8>
 80040e6:	3307      	adds	r3, #7
 80040e8:	10db      	asrs	r3, r3, #3
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040f0:	4413      	add	r3, r2
 80040f2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040fa:	3308      	adds	r3, #8
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b21b      	sxth	r3, r3
 8004100:	425a      	negs	r2, r3
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	f002 0207 	and.w	r2, r2, #7
 800410a:	bf58      	it	pl
 800410c:	4253      	negpl	r3, r2
 800410e:	b21b      	sxth	r3, r3
 8004110:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004114:	4b69      	ldr	r3, [pc, #420]	; (80042bc <Send_Vital_Data_Message+0x3cc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	08db      	lsrs	r3, r3, #3
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d035      	beq.n	800418e <Send_Vital_Data_Message+0x29e>
 8004122:	4b66      	ldr	r3, [pc, #408]	; (80042bc <Send_Vital_Data_Message+0x3cc>)
 8004124:	791b      	ldrb	r3, [r3, #4]
 8004126:	79fa      	ldrb	r2, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d130      	bne.n	800418e <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8004132:	4863      	ldr	r0, [pc, #396]	; (80042c0 <Send_Vital_Data_Message+0x3d0>)
 8004134:	f018 fdbc 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8004138:	4602      	mov	r2, r0
 800413a:	4b62      	ldr	r3, [pc, #392]	; (80042c4 <Send_Vital_Data_Message+0x3d4>)
 800413c:	fba3 1302 	umull	r1, r3, r3, r2
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	21c8      	movs	r1, #200	; 0xc8
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 800414e:	4862      	ldr	r0, [pc, #392]	; (80042d8 <Send_Vital_Data_Message+0x3e8>)
 8004150:	f021 f9a2 	bl	8025498 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	4a5d      	ldr	r2, [pc, #372]	; (80042cc <Send_Vital_Data_Message+0x3dc>)
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	4413      	add	r3, r2
 800415c:	3302      	adds	r3, #2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	4619      	mov	r1, r3
 8004162:	485e      	ldr	r0, [pc, #376]	; (80042dc <Send_Vital_Data_Message+0x3ec>)
 8004164:	f021 f8fc 	bl	8025360 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004168:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800416c:	4619      	mov	r1, r3
 800416e:	485c      	ldr	r0, [pc, #368]	; (80042e0 <Send_Vital_Data_Message+0x3f0>)
 8004170:	f021 f8f6 	bl	8025360 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8004174:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004178:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800417c:	441a      	add	r2, r3
 800417e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004182:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004186:	2108      	movs	r1, #8
 8004188:	f7fc fad0 	bl	800072c <InsertBits>
	{
 800418c:	e00f      	b.n	80041ae <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 800418e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004192:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004196:	441a      	add	r2, r3
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	494c      	ldr	r1, [pc, #304]	; (80042cc <Send_Vital_Data_Message+0x3dc>)
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	440b      	add	r3, r1
 80041a0:	3302      	adds	r3, #2
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041a8:	2108      	movs	r1, #8
 80041aa:	f7fc fabf 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 80041ae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041b2:	3308      	adds	r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da00      	bge.n	80041ba <Send_Vital_Data_Message+0x2ca>
 80041b8:	3307      	adds	r3, #7
 80041ba:	10db      	asrs	r3, r3, #3
 80041bc:	b29a      	uxth	r2, r3
 80041be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041c2:	4413      	add	r3, r2
 80041c4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041cc:	3308      	adds	r3, #8
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	b21b      	sxth	r3, r3
 80041d2:	425a      	negs	r2, r3
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	f002 0207 	and.w	r2, r2, #7
 80041dc:	bf58      	it	pl
 80041de:	4253      	negpl	r3, r2
 80041e0:	b21b      	sxth	r3, r3
 80041e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80041e6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041ee:	441a      	add	r2, r3
 80041f0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041f4:	2302      	movs	r3, #2
 80041f6:	2108      	movs	r1, #8
 80041f8:	f7fc fa98 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041fc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004200:	3308      	adds	r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	da00      	bge.n	8004208 <Send_Vital_Data_Message+0x318>
 8004206:	3307      	adds	r3, #7
 8004208:	10db      	asrs	r3, r3, #3
 800420a:	b29a      	uxth	r2, r3
 800420c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004210:	4413      	add	r3, r2
 8004212:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004216:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800421a:	3308      	adds	r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	b21b      	sxth	r3, r3
 8004220:	425a      	negs	r2, r3
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	f002 0207 	and.w	r2, r2, #7
 800422a:	bf58      	it	pl
 800422c:	4253      	negpl	r3, r2
 800422e:	b21b      	sxth	r3, r3
 8004230:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	4a2b      	ldr	r2, [pc, #172]	; (80042e4 <Send_Vital_Data_Message+0x3f4>)
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d15a      	bne.n	80042f4 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800423e:	f008 f89b 	bl	800c378 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8004242:	79fa      	ldrb	r2, [r7, #7]
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <Send_Vital_Data_Message+0x3f8>)
 800424e:	4413      	add	r3, r2
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <Send_Vital_Data_Message+0x3fc>)
 8004252:	6811      	ldr	r1, [r2, #0]
 8004254:	6019      	str	r1, [r3, #0]
 8004256:	8892      	ldrh	r2, [r2, #4]
 8004258:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800425a:	4825      	ldr	r0, [pc, #148]	; (80042f0 <Send_Vital_Data_Message+0x400>)
 800425c:	f021 f91c 	bl	8025498 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <Send_Vital_Data_Message+0x3f4>)
 8004264:	2100      	movs	r1, #0
 8004266:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004268:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800426c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004270:	441a      	add	r2, r3
 8004272:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004276:	2368      	movs	r3, #104	; 0x68
 8004278:	2110      	movs	r1, #16
 800427a:	f7fc fa57 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800427e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004282:	3310      	adds	r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	da00      	bge.n	800428a <Send_Vital_Data_Message+0x39a>
 8004288:	3307      	adds	r3, #7
 800428a:	10db      	asrs	r3, r3, #3
 800428c:	b29a      	uxth	r2, r3
 800428e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004292:	4413      	add	r3, r2
 8004294:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004298:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800429c:	3310      	adds	r3, #16
 800429e:	b29b      	uxth	r3, r3
 80042a0:	b21b      	sxth	r3, r3
 80042a2:	425a      	negs	r2, r3
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	f002 0207 	and.w	r2, r2, #7
 80042ac:	bf58      	it	pl
 80042ae:	4253      	negpl	r3, r2
 80042b0:	b21b      	sxth	r3, r3
 80042b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80042b6:	e044      	b.n	8004342 <Send_Vital_Data_Message+0x452>
 80042b8:	20000304 	.word	0x20000304
 80042bc:	20001d88 	.word	0x20001d88
 80042c0:	2000a9e0 	.word	0x2000a9e0
 80042c4:	51eb851f 	.word	0x51eb851f
 80042c8:	0802720c 	.word	0x0802720c
 80042cc:	200015f0 	.word	0x200015f0
 80042d0:	08027230 	.word	0x08027230
 80042d4:	08027250 	.word	0x08027250
 80042d8:	08026f18 	.word	0x08026f18
 80042dc:	08026f3c 	.word	0x08026f3c
 80042e0:	08026f5c 	.word	0x08026f5c
 80042e4:	20001460 	.word	0x20001460
 80042e8:	200015b4 	.word	0x200015b4
 80042ec:	20002ce0 	.word	0x20002ce0
 80042f0:	08027270 	.word	0x08027270
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 80042f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042fc:	441a      	add	r2, r3
 80042fe:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004302:	2328      	movs	r3, #40	; 0x28
 8004304:	2110      	movs	r1, #16
 8004306:	f7fc fa11 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800430a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800430e:	3310      	adds	r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	da00      	bge.n	8004316 <Send_Vital_Data_Message+0x426>
 8004314:	3307      	adds	r3, #7
 8004316:	10db      	asrs	r3, r3, #3
 8004318:	b29a      	uxth	r2, r3
 800431a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800431e:	4413      	add	r3, r2
 8004320:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004324:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004328:	3310      	adds	r3, #16
 800432a:	b29b      	uxth	r3, r3
 800432c:	b21b      	sxth	r3, r3
 800432e:	425a      	negs	r2, r3
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	f002 0207 	and.w	r2, r2, #7
 8004338:	bf58      	it	pl
 800433a:	4253      	negpl	r3, r2
 800433c:	b21b      	sxth	r3, r3
 800433e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004342:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004346:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800434a:	18d1      	adds	r1, r2, r3
 800434c:	79fa      	ldrb	r2, [r7, #7]
 800434e:	48cd      	ldr	r0, [pc, #820]	; (8004684 <Send_Vital_Data_Message+0x794>)
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4403      	add	r3, r0
 800435a:	3305      	adds	r3, #5
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004362:	460a      	mov	r2, r1
 8004364:	2108      	movs	r1, #8
 8004366:	f7fc f9e1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800436a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800436e:	3308      	adds	r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	da00      	bge.n	8004376 <Send_Vital_Data_Message+0x486>
 8004374:	3307      	adds	r3, #7
 8004376:	10db      	asrs	r3, r3, #3
 8004378:	b29a      	uxth	r2, r3
 800437a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800437e:	4413      	add	r3, r2
 8004380:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004384:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004388:	3308      	adds	r3, #8
 800438a:	b29b      	uxth	r3, r3
 800438c:	b21b      	sxth	r3, r3
 800438e:	425a      	negs	r2, r3
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	f002 0207 	and.w	r2, r2, #7
 8004398:	bf58      	it	pl
 800439a:	4253      	negpl	r3, r2
 800439c:	b21b      	sxth	r3, r3
 800439e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80043a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043aa:	18d1      	adds	r1, r2, r3
 80043ac:	79fa      	ldrb	r2, [r7, #7]
 80043ae:	48b5      	ldr	r0, [pc, #724]	; (8004684 <Send_Vital_Data_Message+0x794>)
 80043b0:	4613      	mov	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4403      	add	r3, r0
 80043ba:	3304      	adds	r3, #4
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043c2:	460a      	mov	r2, r1
 80043c4:	2108      	movs	r1, #8
 80043c6:	f7fc f9b1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043ce:	3308      	adds	r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da00      	bge.n	80043d6 <Send_Vital_Data_Message+0x4e6>
 80043d4:	3307      	adds	r3, #7
 80043d6:	10db      	asrs	r3, r3, #3
 80043d8:	b29a      	uxth	r2, r3
 80043da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043de:	4413      	add	r3, r2
 80043e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043e8:	3308      	adds	r3, #8
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	b21b      	sxth	r3, r3
 80043ee:	425a      	negs	r2, r3
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	f002 0207 	and.w	r2, r2, #7
 80043f8:	bf58      	it	pl
 80043fa:	4253      	negpl	r3, r2
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004402:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800440a:	18d1      	adds	r1, r2, r3
 800440c:	79fa      	ldrb	r2, [r7, #7]
 800440e:	489d      	ldr	r0, [pc, #628]	; (8004684 <Send_Vital_Data_Message+0x794>)
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4403      	add	r3, r0
 800441a:	3303      	adds	r3, #3
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004422:	460a      	mov	r2, r1
 8004424:	2108      	movs	r1, #8
 8004426:	f7fc f981 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800442a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800442e:	3308      	adds	r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	da00      	bge.n	8004436 <Send_Vital_Data_Message+0x546>
 8004434:	3307      	adds	r3, #7
 8004436:	10db      	asrs	r3, r3, #3
 8004438:	b29a      	uxth	r2, r3
 800443a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800443e:	4413      	add	r3, r2
 8004440:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004448:	3308      	adds	r3, #8
 800444a:	b29b      	uxth	r3, r3
 800444c:	b21b      	sxth	r3, r3
 800444e:	425a      	negs	r2, r3
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	f002 0207 	and.w	r2, r2, #7
 8004458:	bf58      	it	pl
 800445a:	4253      	negpl	r3, r2
 800445c:	b21b      	sxth	r3, r3
 800445e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004462:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004466:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800446a:	18d1      	adds	r1, r2, r3
 800446c:	79fa      	ldrb	r2, [r7, #7]
 800446e:	4885      	ldr	r0, [pc, #532]	; (8004684 <Send_Vital_Data_Message+0x794>)
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4403      	add	r3, r0
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004480:	460a      	mov	r2, r1
 8004482:	2108      	movs	r1, #8
 8004484:	f7fc f952 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004488:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800448c:	3308      	adds	r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	da00      	bge.n	8004494 <Send_Vital_Data_Message+0x5a4>
 8004492:	3307      	adds	r3, #7
 8004494:	10db      	asrs	r3, r3, #3
 8004496:	b29a      	uxth	r2, r3
 8004498:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800449c:	4413      	add	r3, r2
 800449e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80044a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80044a6:	3308      	adds	r3, #8
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	b21b      	sxth	r3, r3
 80044ac:	425a      	negs	r2, r3
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	f002 0207 	and.w	r2, r2, #7
 80044b6:	bf58      	it	pl
 80044b8:	4253      	negpl	r3, r2
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80044c0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044c8:	18d1      	adds	r1, r2, r3
 80044ca:	79fa      	ldrb	r2, [r7, #7]
 80044cc:	486d      	ldr	r0, [pc, #436]	; (8004684 <Send_Vital_Data_Message+0x794>)
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4403      	add	r3, r0
 80044d8:	3301      	adds	r3, #1
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80044e0:	460a      	mov	r2, r1
 80044e2:	2108      	movs	r1, #8
 80044e4:	f7fc f922 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80044e8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80044ec:	3308      	adds	r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da00      	bge.n	80044f4 <Send_Vital_Data_Message+0x604>
 80044f2:	3307      	adds	r3, #7
 80044f4:	10db      	asrs	r3, r3, #3
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044fc:	4413      	add	r3, r2
 80044fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004502:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004506:	3308      	adds	r3, #8
 8004508:	b29b      	uxth	r3, r3
 800450a:	b21b      	sxth	r3, r3
 800450c:	425a      	negs	r2, r3
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	f002 0207 	and.w	r2, r2, #7
 8004516:	bf58      	it	pl
 8004518:	4253      	negpl	r3, r2
 800451a:	b21b      	sxth	r3, r3
 800451c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004520:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004524:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004528:	18d1      	adds	r1, r2, r3
 800452a:	79fa      	ldrb	r2, [r7, #7]
 800452c:	4855      	ldr	r0, [pc, #340]	; (8004684 <Send_Vital_Data_Message+0x794>)
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4403      	add	r3, r0
 8004538:	3302      	adds	r3, #2
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004540:	460a      	mov	r2, r1
 8004542:	2108      	movs	r1, #8
 8004544:	f7fc f8f2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004548:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800454c:	3308      	adds	r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	da00      	bge.n	8004554 <Send_Vital_Data_Message+0x664>
 8004552:	3307      	adds	r3, #7
 8004554:	10db      	asrs	r3, r3, #3
 8004556:	b29a      	uxth	r2, r3
 8004558:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800455c:	4413      	add	r3, r2
 800455e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004562:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004566:	3308      	adds	r3, #8
 8004568:	b29b      	uxth	r3, r3
 800456a:	b21b      	sxth	r3, r3
 800456c:	425a      	negs	r2, r3
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	f002 0207 	and.w	r2, r2, #7
 8004576:	bf58      	it	pl
 8004578:	4253      	negpl	r3, r2
 800457a:	b21b      	sxth	r3, r3
 800457c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 8004580:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004584:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004588:	441a      	add	r2, r3
 800458a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800458e:	2301      	movs	r3, #1
 8004590:	2108      	movs	r1, #8
 8004592:	f7fc f8cb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004596:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800459a:	3308      	adds	r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	da00      	bge.n	80045a2 <Send_Vital_Data_Message+0x6b2>
 80045a0:	3307      	adds	r3, #7
 80045a2:	10db      	asrs	r3, r3, #3
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045aa:	4413      	add	r3, r2
 80045ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045b4:	3308      	adds	r3, #8
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	b21b      	sxth	r3, r3
 80045ba:	425a      	negs	r2, r3
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	f002 0207 	and.w	r2, r2, #7
 80045c4:	bf58      	it	pl
 80045c6:	4253      	negpl	r3, r2
 80045c8:	b21b      	sxth	r3, r3
 80045ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 80045ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045d6:	441a      	add	r2, r3
 80045d8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80045dc:	2300      	movs	r3, #0
 80045de:	2108      	movs	r1, #8
 80045e0:	f7fc f8a4 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80045e4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80045e8:	3308      	adds	r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da00      	bge.n	80045f0 <Send_Vital_Data_Message+0x700>
 80045ee:	3307      	adds	r3, #7
 80045f0:	10db      	asrs	r3, r3, #3
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045f8:	4413      	add	r3, r2
 80045fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004602:	3308      	adds	r3, #8
 8004604:	b29b      	uxth	r3, r3
 8004606:	b21b      	sxth	r3, r3
 8004608:	425a      	negs	r2, r3
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	f002 0207 	and.w	r2, r2, #7
 8004612:	bf58      	it	pl
 8004614:	4253      	negpl	r3, r2
 8004616:	b21b      	sxth	r3, r3
 8004618:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 800461c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004620:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004624:	441a      	add	r2, r3
 8004626:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800462a:	2301      	movs	r3, #1
 800462c:	2108      	movs	r1, #8
 800462e:	f7fc f87d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004632:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004636:	3308      	adds	r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	da00      	bge.n	800463e <Send_Vital_Data_Message+0x74e>
 800463c:	3307      	adds	r3, #7
 800463e:	10db      	asrs	r3, r3, #3
 8004640:	b29a      	uxth	r2, r3
 8004642:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004646:	4413      	add	r3, r2
 8004648:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800464c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004650:	3308      	adds	r3, #8
 8004652:	b29b      	uxth	r3, r3
 8004654:	b21b      	sxth	r3, r3
 8004656:	425a      	negs	r2, r3
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	f002 0207 	and.w	r2, r2, #7
 8004660:	bf58      	it	pl
 8004662:	4253      	negpl	r3, r2
 8004664:	b21b      	sxth	r3, r3
 8004666:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <Send_Vital_Data_Message+0x798>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02c      	beq.n	80046d2 <Send_Vital_Data_Message+0x7e2>
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <Send_Vital_Data_Message+0x798>)
 800467a:	791b      	ldrb	r3, [r3, #4]
 800467c:	79fa      	ldrb	r2, [r7, #7]
 800467e:	429a      	cmp	r2, r3
 8004680:	d127      	bne.n	80046d2 <Send_Vital_Data_Message+0x7e2>
 8004682:	e003      	b.n	800468c <Send_Vital_Data_Message+0x79c>
 8004684:	200015b4 	.word	0x200015b4
 8004688:	20001d88 	.word	0x20001d88
	{
		uint32_t Rand_Number = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 8004692:	484e      	ldr	r0, [pc, #312]	; (80047cc <Send_Vital_Data_Message+0x8dc>)
 8004694:	f018 fb0c 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8004698:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 800469c:	484c      	ldr	r0, [pc, #304]	; (80047d0 <Send_Vital_Data_Message+0x8e0>)
 800469e:	f020 fefb 	bl	8025498 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	4a4b      	ldr	r2, [pc, #300]	; (80047d4 <Send_Vital_Data_Message+0x8e4>)
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4413      	add	r3, r2
 80046aa:	330c      	adds	r3, #12
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	4849      	ldr	r0, [pc, #292]	; (80047d8 <Send_Vital_Data_Message+0x8e8>)
 80046b2:	f020 fe55 	bl	8025360 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 80046b6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80046ba:	4848      	ldr	r0, [pc, #288]	; (80047dc <Send_Vital_Data_Message+0x8ec>)
 80046bc:	f020 fe50 	bl	8025360 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 80046c0:	f107 020c 	add.w	r2, r7, #12
 80046c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046c8:	2118      	movs	r1, #24
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fc f82e 	bl	800072c <InsertBits>
	{
 80046d0:	e00b      	b.n	80046ea <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	4a3f      	ldr	r2, [pc, #252]	; (80047d4 <Send_Vital_Data_Message+0x8e4>)
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	4413      	add	r3, r2
 80046da:	330c      	adds	r3, #12
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f107 020c 	add.w	r2, r7, #12
 80046e2:	2118      	movs	r1, #24
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fc f821 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80046f0:	e011      	b.n	8004716 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 80046f2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80046f6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80046fa:	3303      	adds	r3, #3
 80046fc:	3290      	adds	r2, #144	; 0x90
 80046fe:	443a      	add	r2, r7
 8004700:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004704:	3390      	adds	r3, #144	; 0x90
 8004706:	443b      	add	r3, r7
 8004708:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800470c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004710:	3301      	adds	r3, #1
 8004712:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004716:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800471a:	b29b      	uxth	r3, r3
 800471c:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004720:	429a      	cmp	r2, r3
 8004722:	d8e6      	bhi.n	80046f2 <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004724:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004728:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800472c:	18d4      	adds	r4, r2, r3
 800472e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004732:	b29b      	uxth	r3, r3
 8004734:	3303      	adds	r3, #3
 8004736:	b29a      	uxth	r2, r3
 8004738:	f107 030c 	add.w	r3, r7, #12
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f010 f8b8 	bl	80148b4 <CalculateDirectReverseCrc>
 8004744:	4603      	mov	r3, r0
 8004746:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800474a:	4622      	mov	r2, r4
 800474c:	2120      	movs	r1, #32
 800474e:	f7fb ffed 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004752:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004756:	3320      	adds	r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	da00      	bge.n	800475e <Send_Vital_Data_Message+0x86e>
 800475c:	3307      	adds	r3, #7
 800475e:	10db      	asrs	r3, r3, #3
 8004760:	b29a      	uxth	r2, r3
 8004762:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004766:	4413      	add	r3, r2
 8004768:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800476c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004770:	3320      	adds	r3, #32
 8004772:	b29b      	uxth	r3, r3
 8004774:	b21b      	sxth	r3, r3
 8004776:	425a      	negs	r2, r3
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	f002 0207 	and.w	r2, r2, #7
 8004780:	bf58      	it	pl
 8004782:	4253      	negpl	r3, r2
 8004784:	b21b      	sxth	r3, r3
 8004786:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <Send_Vital_Data_Message+0x8f0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	0a5b      	lsrs	r3, r3, #9
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <Send_Vital_Data_Message+0x8c0>
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <Send_Vital_Data_Message+0x8f0>)
 800479a:	791b      	ldrb	r3, [r3, #4]
 800479c:	79fa      	ldrb	r2, [r7, #7]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d106      	bne.n	80047b0 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80047a2:	4810      	ldr	r0, [pc, #64]	; (80047e4 <Send_Vital_Data_Message+0x8f4>)
 80047a4:	f020 fe78 	bl	8025498 <puts>
		printf("Not Sending Reply");
 80047a8:	480f      	ldr	r0, [pc, #60]	; (80047e8 <Send_Vital_Data_Message+0x8f8>)
 80047aa:	f020 fdd9 	bl	8025360 <iprintf>
 80047ae:	e009      	b.n	80047c4 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80047b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047b4:	b2d9      	uxtb	r1, r3
 80047b6:	79fa      	ldrb	r2, [r7, #7]
 80047b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 f8cf 	bl	8007960 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	3794      	adds	r7, #148	; 0x94
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	2000a9e0 	.word	0x2000a9e0
 80047d0:	08027288 	.word	0x08027288
 80047d4:	200015f0 	.word	0x200015f0
 80047d8:	080272ac 	.word	0x080272ac
 80047dc:	080272d0 	.word	0x080272d0
 80047e0:	20001d88 	.word	0x20001d88
 80047e4:	08026fe4 	.word	0x08026fe4
 80047e8:	08026ffc 	.word	0x08026ffc

080047ec <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0c0      	sub	sp, #256	; 0x100
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	4608      	mov	r0, r1
 80047f6:	4611      	mov	r1, r2
 80047f8:	461a      	mov	r2, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	70fb      	strb	r3, [r7, #3]
 80047fe:	460b      	mov	r3, r1
 8004800:	70bb      	strb	r3, [r7, #2]
 8004802:	4613      	mov	r3, r2
 8004804:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004818:	f013 fd98 	bl	801834c <HAL_GetTick>
 800481c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004826:	2300      	movs	r3, #0
 8004828:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004832:	2300      	movs	r3, #0
 8004834:	667b      	str	r3, [r7, #100]	; 0x64
 8004836:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800483a:	227c      	movs	r2, #124	; 0x7c
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f020 fca6 	bl	8025190 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004844:	2300      	movs	r3, #0
 8004846:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800484a:	2300      	movs	r3, #0
 800484c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	b299      	uxth	r1, r3
 8004854:	78ba      	ldrb	r2, [r7, #2]
 8004856:	48c3      	ldr	r0, [pc, #780]	; (8004b64 <Vital_Msg_extr_from_CAN+0x378>)
 8004858:	4613      	mov	r3, r2
 800485a:	015b      	lsls	r3, r3, #5
 800485c:	4413      	add	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4403      	add	r3, r0
 8004862:	3340      	adds	r3, #64	; 0x40
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	4299      	cmp	r1, r3
 8004868:	d11a      	bne.n	80048a0 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 800486a:	78ba      	ldrb	r2, [r7, #2]
 800486c:	4613      	mov	r3, r2
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	4413      	add	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4abb      	ldr	r2, [pc, #748]	; (8004b64 <Vital_Msg_extr_from_CAN+0x378>)
 8004876:	4413      	add	r3, r2
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f020 fc4f 	bl	8025120 <memcmp>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004888:	78bb      	ldrb	r3, [r7, #2]
 800488a:	4ab7      	ldr	r2, [pc, #732]	; (8004b68 <Vital_Msg_extr_from_CAN+0x37c>)
 800488c:	3366      	adds	r3, #102	; 0x66
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4619      	mov	r1, r3
 8004896:	48b5      	ldr	r0, [pc, #724]	; (8004b6c <Vital_Msg_extr_from_CAN+0x380>)
 8004898:	f020 fd62 	bl	8025360 <iprintf>
			return;
 800489c:	f000 bda3 	b.w	80053e6 <Vital_Msg_extr_from_CAN+0xbfa>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	3b05      	subs	r3, #5
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	441a      	add	r2, r3
 80048a8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80048ac:	2120      	movs	r1, #32
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb feb0 	bl	8000614 <ExtractBits>
 80048b4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80048b8:	4bad      	ldr	r3, [pc, #692]	; (8004b70 <Vital_Msg_extr_from_CAN+0x384>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d034      	beq.n	800492e <Vital_Msg_extr_from_CAN+0x142>
 80048c4:	4baa      	ldr	r3, [pc, #680]	; (8004b70 <Vital_Msg_extr_from_CAN+0x384>)
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	78ba      	ldrb	r2, [r7, #2]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d12f      	bne.n	800492e <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 80048ce:	2316      	movs	r3, #22
 80048d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 80048d4:	48a7      	ldr	r0, [pc, #668]	; (8004b74 <Vital_Msg_extr_from_CAN+0x388>)
 80048d6:	f018 f9eb 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 80048da:	4602      	mov	r2, r0
 80048dc:	4ba6      	ldr	r3, [pc, #664]	; (8004b78 <Vital_Msg_extr_from_CAN+0x38c>)
 80048de:	fba3 1302 	umull	r1, r3, r3, r2
 80048e2:	0dd9      	lsrs	r1, r3, #23
 80048e4:	460b      	mov	r3, r1
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	1a5b      	subs	r3, r3, r1
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 80048f2:	48a2      	ldr	r0, [pc, #648]	; (8004b7c <Vital_Msg_extr_from_CAN+0x390>)
 80048f4:	f020 fdd0 	bl	8025498 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048f8:	78ba      	ldrb	r2, [r7, #2]
 80048fa:	49a1      	ldr	r1, [pc, #644]	; (8004b80 <Vital_Msg_extr_from_CAN+0x394>)
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	3308      	adds	r3, #8
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	489d      	ldr	r0, [pc, #628]	; (8004b84 <Vital_Msg_extr_from_CAN+0x398>)
 800490e:	f020 fd27 	bl	8025360 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004912:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004916:	489c      	ldr	r0, [pc, #624]	; (8004b88 <Vital_Msg_extr_from_CAN+0x39c>)
 8004918:	f020 fd22 	bl	8025360 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 800491c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004924:	2118      	movs	r1, #24
 8004926:	2000      	movs	r0, #0
 8004928:	f7fb ff00 	bl	800072c <InsertBits>
	{
 800492c:	e00e      	b.n	800494c <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800492e:	78ba      	ldrb	r2, [r7, #2]
 8004930:	4993      	ldr	r1, [pc, #588]	; (8004b80 <Vital_Msg_extr_from_CAN+0x394>)
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	440b      	add	r3, r1
 800493c:	3308      	adds	r3, #8
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004944:	2118      	movs	r1, #24
 8004946:	2000      	movs	r0, #0
 8004948:	f7fb fef0 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800494c:	2300      	movs	r3, #0
 800494e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004952:	e011      	b.n	8004978 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004954:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	441a      	add	r2, r3
 800495c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004960:	3303      	adds	r3, #3
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004968:	443b      	add	r3, r7
 800496a:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800496e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004972:	3301      	adds	r3, #1
 8004974:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004978:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	3b05      	subs	r3, #5
 8004980:	429a      	cmp	r2, r3
 8004982:	dbe7      	blt.n	8004954 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8004984:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004988:	b29b      	uxth	r3, r3
 800498a:	3303      	adds	r3, #3
 800498c:	b29a      	uxth	r2, r3
 800498e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f00f ff8d 	bl	80148b4 <CalculateDirectReverseCrc>
 800499a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 800499e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80049a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049a6:	429a      	cmp	r2, r3
 80049a8:	f000 8104 	beq.w	8004bb4 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3305      	adds	r3, #5
 80049b0:	461a      	mov	r2, r3
 80049b2:	2108      	movs	r1, #8
 80049b4:	2000      	movs	r0, #0
 80049b6:	f7fb fe2d 	bl	8000614 <ExtractBits>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 80ba 	bne.w	8004b36 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80049c2:	4872      	ldr	r0, [pc, #456]	; (8004b8c <Vital_Msg_extr_from_CAN+0x3a0>)
 80049c4:	f020 fd68 	bl	8025498 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80049c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049cc:	2280      	movs	r2, #128	; 0x80
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f020 fbdd 	bl	8025190 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 80049d6:	78ba      	ldrb	r2, [r7, #2]
 80049d8:	4969      	ldr	r1, [pc, #420]	; (8004b80 <Vital_Msg_extr_from_CAN+0x394>)
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	3308      	adds	r3, #8
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80049ee:	2118      	movs	r1, #24
 80049f0:	2000      	movs	r0, #0
 80049f2:	f7fb fe9b 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80049fc:	e011      	b.n	8004a22 <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80049fe:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	441a      	add	r2, r3
 8004a06:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a0a:	3303      	adds	r3, #3
 8004a0c:	7812      	ldrb	r2, [r2, #0]
 8004a0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a12:	443b      	add	r3, r7
 8004a14:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004a18:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004a22:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	3b05      	subs	r3, #5
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	dbe7      	blt.n	80049fe <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8004a2e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3303      	adds	r3, #3
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f00f ff38 	bl	80148b4 <CalculateDirectReverseCrc>
 8004a44:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	3b05      	subs	r3, #5
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	441a      	add	r2, r3
 8004a50:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a54:	2120      	movs	r1, #32
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fb fddc 	bl	8000614 <ExtractBits>
 8004a5c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8004a60:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d14e      	bne.n	8004b0a <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 8004a6c:	4848      	ldr	r0, [pc, #288]	; (8004b90 <Vital_Msg_extr_from_CAN+0x3a4>)
 8004a6e:	f020 fd13 	bl	8025498 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8004a72:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004a76:	4847      	ldr	r0, [pc, #284]	; (8004b94 <Vital_Msg_extr_from_CAN+0x3a8>)
 8004a78:	f020 fc72 	bl	8025360 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004a7c:	78ba      	ldrb	r2, [r7, #2]
 8004a7e:	4940      	ldr	r1, [pc, #256]	; (8004b80 <Vital_Msg_extr_from_CAN+0x394>)
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4841      	ldr	r0, [pc, #260]	; (8004b98 <Vital_Msg_extr_from_CAN+0x3ac>)
 8004a92:	f020 fc65 	bl	8025360 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8004a96:	78ba      	ldrb	r2, [r7, #2]
 8004a98:	4939      	ldr	r1, [pc, #228]	; (8004b80 <Vital_Msg_extr_from_CAN+0x394>)
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	1c59      	adds	r1, r3, #1
 8004aaa:	4835      	ldr	r0, [pc, #212]	; (8004b80 <Vital_Msg_extr_from_CAN+0x394>)
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4403      	add	r3, r0
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	78b9      	ldrb	r1, [r7, #2]
 8004abc:	4830      	ldr	r0, [pc, #192]	; (8004b80 <Vital_Msg_extr_from_CAN+0x394>)
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4403      	add	r3, r0
 8004ac8:	3308      	adds	r3, #8
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4833      	ldr	r0, [pc, #204]	; (8004b9c <Vital_Msg_extr_from_CAN+0x3b0>)
 8004ace:	010b      	lsls	r3, r1, #4
 8004ad0:	4403      	add	r3, r0
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004ad6:	78bb      	ldrb	r3, [r7, #2]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <Vital_Msg_extr_from_CAN+0x3b0>)
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	4413      	add	r3, r2
 8004ade:	3308      	adds	r3, #8
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	482e      	ldr	r0, [pc, #184]	; (8004ba0 <Vital_Msg_extr_from_CAN+0x3b4>)
 8004ae6:	f020 fc3b 	bl	8025360 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8004aea:	78bb      	ldrb	r3, [r7, #2]
 8004aec:	78ba      	ldrb	r2, [r7, #2]
 8004aee:	492b      	ldr	r1, [pc, #172]	; (8004b9c <Vital_Msg_extr_from_CAN+0x3b0>)
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	440b      	add	r3, r1
 8004af4:	3308      	adds	r3, #8
 8004af6:	6819      	ldr	r1, [r3, #0]
 8004af8:	482a      	ldr	r0, [pc, #168]	; (8004ba4 <Vital_Msg_extr_from_CAN+0x3b8>)
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4403      	add	r3, r0
 8004b04:	3308      	adds	r3, #8
 8004b06:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004b08:	e055      	b.n	8004bb6 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004b0a:	78bb      	ldrb	r3, [r7, #2]
 8004b0c:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <Vital_Msg_extr_from_CAN+0x37c>)
 8004b0e:	3366      	adds	r3, #102	; 0x66
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4823      	ldr	r0, [pc, #140]	; (8004ba8 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004b1a:	f020 fc21 	bl	8025360 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004b1e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004b22:	4822      	ldr	r0, [pc, #136]	; (8004bac <Vital_Msg_extr_from_CAN+0x3c0>)
 8004b24:	f020 fc1c 	bl	8025360 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004b28:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004b2c:	4820      	ldr	r0, [pc, #128]	; (8004bb0 <Vital_Msg_extr_from_CAN+0x3c4>)
 8004b2e:	f020 fc17 	bl	8025360 <iprintf>
				return;
 8004b32:	f000 bc58 	b.w	80053e6 <Vital_Msg_extr_from_CAN+0xbfa>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004b36:	78bb      	ldrb	r3, [r7, #2]
 8004b38:	4a0b      	ldr	r2, [pc, #44]	; (8004b68 <Vital_Msg_extr_from_CAN+0x37c>)
 8004b3a:	3366      	adds	r3, #102	; 0x66
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4619      	mov	r1, r3
 8004b44:	4818      	ldr	r0, [pc, #96]	; (8004ba8 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004b46:	f020 fc0b 	bl	8025360 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004b4a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004b4e:	4817      	ldr	r0, [pc, #92]	; (8004bac <Vital_Msg_extr_from_CAN+0x3c0>)
 8004b50:	f020 fc06 	bl	8025360 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004b54:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004b58:	4815      	ldr	r0, [pc, #84]	; (8004bb0 <Vital_Msg_extr_from_CAN+0x3c4>)
 8004b5a:	f020 fc01 	bl	8025360 <iprintf>
			return;
 8004b5e:	f000 bc42 	b.w	80053e6 <Vital_Msg_extr_from_CAN+0xbfa>
 8004b62:	bf00      	nop
 8004b64:	20001da8 	.word	0x20001da8
 8004b68:	20000304 	.word	0x20000304
 8004b6c:	080272f4 	.word	0x080272f4
 8004b70:	20001d88 	.word	0x20001d88
 8004b74:	2000a9e0 	.word	0x2000a9e0
 8004b78:	80008001 	.word	0x80008001
 8004b7c:	08027010 	.word	0x08027010
 8004b80:	20001b90 	.word	0x20001b90
 8004b84:	08027030 	.word	0x08027030
 8004b88:	08027058 	.word	0x08027058
 8004b8c:	08027080 	.word	0x08027080
 8004b90:	08027338 	.word	0x08027338
 8004b94:	080270b4 	.word	0x080270b4
 8004b98:	0802735c 	.word	0x0802735c
 8004b9c:	200015f0 	.word	0x200015f0
 8004ba0:	080270f4 	.word	0x080270f4
 8004ba4:	20001aa0 	.word	0x20001aa0
 8004ba8:	08027378 	.word	0x08027378
 8004bac:	08026d50 	.word	0x08026d50
 8004bb0:	08026d60 	.word	0x08026d60
		}
	}
	ROLLOVER_VITAL_CAN:
 8004bb4:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004bb6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bba:	3308      	adds	r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	da00      	bge.n	8004bc2 <Vital_Msg_extr_from_CAN+0x3d6>
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	10db      	asrs	r3, r3, #3
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bca:	4413      	add	r3, r2
 8004bcc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bd0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	425a      	negs	r2, r3
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	f002 0207 	and.w	r2, r2, #7
 8004be4:	bf58      	it	pl
 8004be6:	4253      	negpl	r3, r2
 8004be8:	b21b      	sxth	r3, r3
 8004bea:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004bee:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	441a      	add	r2, r3
 8004bf6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bfa:	2110      	movs	r1, #16
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fb fd09 	bl	8000614 <ExtractBits>
 8004c02:	4603      	mov	r3, r0
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004c0a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c0e:	4619      	mov	r1, r3
 8004c10:	48c6      	ldr	r0, [pc, #792]	; (8004f2c <Vital_Msg_extr_from_CAN+0x740>)
 8004c12:	f020 fba5 	bl	8025360 <iprintf>
	BITSTUFFINC(16);
 8004c16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	da00      	bge.n	8004c22 <Vital_Msg_extr_from_CAN+0x436>
 8004c20:	3307      	adds	r3, #7
 8004c22:	10db      	asrs	r3, r3, #3
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c34:	3310      	adds	r3, #16
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	b21b      	sxth	r3, r3
 8004c3a:	425a      	negs	r2, r3
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	f002 0207 	and.w	r2, r2, #7
 8004c44:	bf58      	it	pl
 8004c46:	4253      	negpl	r3, r2
 8004c48:	b21b      	sxth	r3, r3
 8004c4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004c4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	441a      	add	r2, r3
 8004c56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c5a:	2110      	movs	r1, #16
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fb fcd9 	bl	8000614 <ExtractBits>
 8004c62:	4603      	mov	r3, r0
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004c6a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c6e:	4619      	mov	r1, r3
 8004c70:	48af      	ldr	r0, [pc, #700]	; (8004f30 <Vital_Msg_extr_from_CAN+0x744>)
 8004c72:	f020 fb75 	bl	8025360 <iprintf>
	BITSTUFFINC(16);
 8004c76:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c7a:	3310      	adds	r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	da00      	bge.n	8004c82 <Vital_Msg_extr_from_CAN+0x496>
 8004c80:	3307      	adds	r3, #7
 8004c82:	10db      	asrs	r3, r3, #3
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c90:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c94:	3310      	adds	r3, #16
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	b21b      	sxth	r3, r3
 8004c9a:	425a      	negs	r2, r3
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	f002 0207 	and.w	r2, r2, #7
 8004ca4:	bf58      	it	pl
 8004ca6:	4253      	negpl	r3, r2
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004cae:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cba:	2108      	movs	r1, #8
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb fca9 	bl	8000614 <ExtractBits>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004cca:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cce:	3308      	adds	r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	da00      	bge.n	8004cd6 <Vital_Msg_extr_from_CAN+0x4ea>
 8004cd4:	3307      	adds	r3, #7
 8004cd6:	10db      	asrs	r3, r3, #3
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cde:	4413      	add	r3, r2
 8004ce0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ce4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ce8:	3308      	adds	r3, #8
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	425a      	negs	r2, r3
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	f002 0207 	and.w	r2, r2, #7
 8004cf8:	bf58      	it	pl
 8004cfa:	4253      	negpl	r3, r2
 8004cfc:	b21b      	sxth	r3, r3
 8004cfe:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d02:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	441a      	add	r2, r3
 8004d0a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d0e:	2108      	movs	r1, #8
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb fc7f 	bl	8000614 <ExtractBits>
 8004d16:	4603      	mov	r3, r0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004d1e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d22:	3308      	adds	r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da00      	bge.n	8004d2a <Vital_Msg_extr_from_CAN+0x53e>
 8004d28:	3307      	adds	r3, #7
 8004d2a:	10db      	asrs	r3, r3, #3
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d32:	4413      	add	r3, r2
 8004d34:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d38:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b21b      	sxth	r3, r3
 8004d42:	425a      	negs	r2, r3
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	f002 0207 	and.w	r2, r2, #7
 8004d4c:	bf58      	it	pl
 8004d4e:	4253      	negpl	r3, r2
 8004d50:	b21b      	sxth	r3, r3
 8004d52:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d56:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d62:	2108      	movs	r1, #8
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fb fc55 	bl	8000614 <ExtractBits>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",CAN_Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004d72:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d76:	3308      	adds	r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da00      	bge.n	8004d7e <Vital_Msg_extr_from_CAN+0x592>
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	10db      	asrs	r3, r3, #3
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d86:	4413      	add	r3, r2
 8004d88:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d8c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d90:	3308      	adds	r3, #8
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	b21b      	sxth	r3, r3
 8004d96:	425a      	negs	r2, r3
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	f002 0207 	and.w	r2, r2, #7
 8004da0:	bf58      	it	pl
 8004da2:	4253      	negpl	r3, r2
 8004da4:	b21b      	sxth	r3, r3
 8004da6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004daa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	441a      	add	r2, r3
 8004db2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004db6:	2110      	movs	r1, #16
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb fc2b 	bl	8000614 <ExtractBits>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004dc4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dc8:	3310      	adds	r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da00      	bge.n	8004dd0 <Vital_Msg_extr_from_CAN+0x5e4>
 8004dce:	3307      	adds	r3, #7
 8004dd0:	10db      	asrs	r3, r3, #3
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dd8:	4413      	add	r3, r2
 8004dda:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004dde:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004de2:	3310      	adds	r3, #16
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	b21b      	sxth	r3, r3
 8004de8:	425a      	negs	r2, r3
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	f002 0207 	and.w	r2, r2, #7
 8004df2:	bf58      	it	pl
 8004df4:	4253      	negpl	r3, r2
 8004df6:	b21b      	sxth	r3, r3
 8004df8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004dfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80fe 	beq.w	8005004 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e08:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	441a      	add	r2, r3
 8004e10:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e14:	2108      	movs	r1, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fb fbfc 	bl	8000614 <ExtractBits>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004e24:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e28:	3308      	adds	r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	da00      	bge.n	8004e30 <Vital_Msg_extr_from_CAN+0x644>
 8004e2e:	3307      	adds	r3, #7
 8004e30:	10db      	asrs	r3, r3, #3
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e38:	4413      	add	r3, r2
 8004e3a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e3e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e42:	3308      	adds	r3, #8
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	b21b      	sxth	r3, r3
 8004e48:	425a      	negs	r2, r3
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	f002 0207 	and.w	r2, r2, #7
 8004e52:	bf58      	it	pl
 8004e54:	4253      	negpl	r3, r2
 8004e56:	b21b      	sxth	r3, r3
 8004e58:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e5c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	441a      	add	r2, r3
 8004e64:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e68:	2108      	movs	r1, #8
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb fbd2 	bl	8000614 <ExtractBits>
 8004e70:	4603      	mov	r3, r0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004e78:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da00      	bge.n	8004e84 <Vital_Msg_extr_from_CAN+0x698>
 8004e82:	3307      	adds	r3, #7
 8004e84:	10db      	asrs	r3, r3, #3
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e92:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e96:	3308      	adds	r3, #8
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	b21b      	sxth	r3, r3
 8004e9c:	425a      	negs	r2, r3
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	f002 0207 	and.w	r2, r2, #7
 8004ea6:	bf58      	it	pl
 8004ea8:	4253      	negpl	r3, r2
 8004eaa:	b21b      	sxth	r3, r3
 8004eac:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004eb0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	441a      	add	r2, r3
 8004eb8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ebc:	2108      	movs	r1, #8
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb fba8 	bl	8000614 <ExtractBits>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004eca:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ece:	3308      	adds	r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da00      	bge.n	8004ed6 <Vital_Msg_extr_from_CAN+0x6ea>
 8004ed4:	3307      	adds	r3, #7
 8004ed6:	10db      	asrs	r3, r3, #3
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ede:	4413      	add	r3, r2
 8004ee0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ee4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ee8:	3308      	adds	r3, #8
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	b21b      	sxth	r3, r3
 8004eee:	425a      	negs	r2, r3
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	f002 0207 	and.w	r2, r2, #7
 8004ef8:	bf58      	it	pl
 8004efa:	4253      	negpl	r3, r2
 8004efc:	b21b      	sxth	r3, r3
 8004efe:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f02:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	441a      	add	r2, r3
 8004f0a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f0e:	2108      	movs	r1, #8
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb fb7f 	bl	8000614 <ExtractBits>
 8004f16:	4603      	mov	r3, r0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004f1c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f20:	3308      	adds	r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	da06      	bge.n	8004f34 <Vital_Msg_extr_from_CAN+0x748>
 8004f26:	3307      	adds	r3, #7
 8004f28:	e004      	b.n	8004f34 <Vital_Msg_extr_from_CAN+0x748>
 8004f2a:	bf00      	nop
 8004f2c:	08026e40 	.word	0x08026e40
 8004f30:	08026e48 	.word	0x08026e48
 8004f34:	10db      	asrs	r3, r3, #3
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f42:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f46:	3308      	adds	r3, #8
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	b21b      	sxth	r3, r3
 8004f4c:	425a      	negs	r2, r3
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	f002 0207 	and.w	r2, r2, #7
 8004f56:	bf58      	it	pl
 8004f58:	4253      	negpl	r3, r2
 8004f5a:	b21b      	sxth	r3, r3
 8004f5c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f60:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	441a      	add	r2, r3
 8004f68:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f6c:	2108      	movs	r1, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fb fb50 	bl	8000614 <ExtractBits>
 8004f74:	4603      	mov	r3, r0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004f7a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f7e:	3308      	adds	r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da00      	bge.n	8004f86 <Vital_Msg_extr_from_CAN+0x79a>
 8004f84:	3307      	adds	r3, #7
 8004f86:	10db      	asrs	r3, r3, #3
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f8e:	4413      	add	r3, r2
 8004f90:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f94:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f98:	3308      	adds	r3, #8
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	b21b      	sxth	r3, r3
 8004f9e:	425a      	negs	r2, r3
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	f002 0207 	and.w	r2, r2, #7
 8004fa8:	bf58      	it	pl
 8004faa:	4253      	negpl	r3, r2
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004fb2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	441a      	add	r2, r3
 8004fba:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fbe:	2108      	movs	r1, #8
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fb fb27 	bl	8000614 <ExtractBits>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004fcc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	da00      	bge.n	8004fd8 <Vital_Msg_extr_from_CAN+0x7ec>
 8004fd6:	3307      	adds	r3, #7
 8004fd8:	10db      	asrs	r3, r3, #3
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fe6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fea:	3308      	adds	r3, #8
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	b21b      	sxth	r3, r3
 8004ff0:	425a      	negs	r2, r3
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	f002 0207 	and.w	r2, r2, #7
 8004ffa:	bf58      	it	pl
 8004ffc:	4253      	negpl	r3, r2
 8004ffe:	b21b      	sxth	r3, r3
 8005000:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8005004:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005014:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	441a      	add	r2, r3
 800501c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005020:	2108      	movs	r1, #8
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb faf6 	bl	8000614 <ExtractBits>
 8005028:	4603      	mov	r3, r0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8005030:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005034:	3308      	adds	r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	da00      	bge.n	800503c <Vital_Msg_extr_from_CAN+0x850>
 800503a:	3307      	adds	r3, #7
 800503c:	10db      	asrs	r3, r3, #3
 800503e:	b29a      	uxth	r2, r3
 8005040:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005044:	4413      	add	r3, r2
 8005046:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800504a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800504e:	3308      	adds	r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b21b      	sxth	r3, r3
 8005054:	425a      	negs	r2, r3
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	f002 0207 	and.w	r2, r2, #7
 800505e:	bf58      	it	pl
 8005060:	4253      	negpl	r3, r2
 8005062:	b21b      	sxth	r3, r3
 8005064:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8005068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800506c:	4619      	mov	r1, r3
 800506e:	484b      	ldr	r0, [pc, #300]	; (800519c <Vital_Msg_extr_from_CAN+0x9b0>)
 8005070:	f020 f976 	bl	8025360 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005074:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	441a      	add	r2, r3
 800507c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005080:	2108      	movs	r1, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb fac6 	bl	8000614 <ExtractBits>
 8005088:	4603      	mov	r3, r0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8005090:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005094:	3308      	adds	r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	da00      	bge.n	800509c <Vital_Msg_extr_from_CAN+0x8b0>
 800509a:	3307      	adds	r3, #7
 800509c:	10db      	asrs	r3, r3, #3
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80050a4:	4413      	add	r3, r2
 80050a6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80050aa:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80050ae:	3308      	adds	r3, #8
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	b21b      	sxth	r3, r3
 80050b4:	425a      	negs	r2, r3
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	f002 0207 	and.w	r2, r2, #7
 80050be:	bf58      	it	pl
 80050c0:	4253      	negpl	r3, r2
 80050c2:	b21b      	sxth	r3, r3
 80050c4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 80050c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 80050d4:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 80050dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050e0:	08db      	lsrs	r3, r3, #3
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80050ea:	e004      	b.n	80050f6 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 80050ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80050fc:	e040      	b.n	8005180 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80050fe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	441a      	add	r2, r3
 8005106:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800510a:	2108      	movs	r1, #8
 800510c:	4618      	mov	r0, r3
 800510e:	f7fb fa81 	bl	8000614 <ExtractBits>
 8005112:	4602      	mov	r2, r0
 8005114:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800511e:	443b      	add	r3, r7
 8005120:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8005124:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8005128:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800512c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005130:	443b      	add	r3, r7
 8005132:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8005136:	461a      	mov	r2, r3
 8005138:	4819      	ldr	r0, [pc, #100]	; (80051a0 <Vital_Msg_extr_from_CAN+0x9b4>)
 800513a:	f020 f911 	bl	8025360 <iprintf>
		BITSTUFFINC(8);
 800513e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005142:	3308      	adds	r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	da00      	bge.n	800514a <Vital_Msg_extr_from_CAN+0x95e>
 8005148:	3307      	adds	r3, #7
 800514a:	10db      	asrs	r3, r3, #3
 800514c:	b29a      	uxth	r2, r3
 800514e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005152:	4413      	add	r3, r2
 8005154:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005158:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800515c:	3308      	adds	r3, #8
 800515e:	b29b      	uxth	r3, r3
 8005160:	b21b      	sxth	r3, r3
 8005162:	425a      	negs	r2, r3
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	f002 0207 	and.w	r2, r2, #7
 800516c:	bf58      	it	pl
 800516e:	4253      	negpl	r3, r2
 8005170:	b21b      	sxth	r3, r3
 8005172:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8005176:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800517a:	3301      	adds	r3, #1
 800517c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005180:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005184:	b29b      	uxth	r3, r3
 8005186:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 800518a:	429a      	cmp	r2, r3
 800518c:	d3b7      	bcc.n	80050fe <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 800518e:	200a      	movs	r0, #10
 8005190:	f020 f8fe 	bl	8025390 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005194:	2300      	movs	r3, #0
 8005196:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800519a:	e037      	b.n	800520c <Vital_Msg_extr_from_CAN+0xa20>
 800519c:	08027394 	.word	0x08027394
 80051a0:	0802739c 	.word	0x0802739c
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80051a4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	441a      	add	r2, r3
 80051ac:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80051b0:	2108      	movs	r1, #8
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fb fa2e 	bl	8000614 <ExtractBits>
 80051b8:	4602      	mov	r2, r0
 80051ba:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80051c4:	443b      	add	r3, r7
 80051c6:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80051ca:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80051ce:	3308      	adds	r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	da00      	bge.n	80051d6 <Vital_Msg_extr_from_CAN+0x9ea>
 80051d4:	3307      	adds	r3, #7
 80051d6:	10db      	asrs	r3, r3, #3
 80051d8:	b29a      	uxth	r2, r3
 80051da:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80051de:	4413      	add	r3, r2
 80051e0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80051e4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80051e8:	3308      	adds	r3, #8
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	b21b      	sxth	r3, r3
 80051ee:	425a      	negs	r2, r3
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	f002 0207 	and.w	r2, r2, #7
 80051f8:	bf58      	it	pl
 80051fa:	4253      	negpl	r3, r2
 80051fc:	b21b      	sxth	r3, r3
 80051fe:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005202:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005206:	3301      	adds	r3, #1
 8005208:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800520c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005210:	b29b      	uxth	r3, r3
 8005212:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005216:	429a      	cmp	r2, r3
 8005218:	d3c4      	bcc.n	80051a4 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	3301      	adds	r3, #1
 8005220:	2210      	movs	r2, #16
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f01f ffb3 	bl	8025190 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 800522a:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800522e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005232:	1d59      	adds	r1, r3, #5
 8005234:	f107 0308 	add.w	r3, r7, #8
 8005238:	3301      	adds	r3, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f01f ff80 	bl	8025140 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005240:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005244:	b21a      	sxth	r2, r3
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	3301      	adds	r3, #1
 800524c:	4619      	mov	r1, r3
 800524e:	2000      	movs	r0, #0
 8005250:	f00f fa76 	bl	8014740 <GetCRC16>
 8005254:	4603      	mov	r3, r0
 8005256:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005258:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800525c:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 800525e:	78bb      	ldrb	r3, [r7, #2]
 8005260:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 8005262:	78bb      	ldrb	r3, [r7, #2]
 8005264:	4a62      	ldr	r2, [pc, #392]	; (80053f0 <Vital_Msg_extr_from_CAN+0xc04>)
 8005266:	4413      	add	r3, r2
 8005268:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800526c:	2b01      	cmp	r3, #1
 800526e:	f040 8082 	bne.w	8005376 <Vital_Msg_extr_from_CAN+0xb8a>
 8005272:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005276:	2b01      	cmp	r3, #1
 8005278:	d17d      	bne.n	8005376 <Vital_Msg_extr_from_CAN+0xb8a>
 800527a:	8b79      	ldrh	r1, [r7, #26]
 800527c:	78ba      	ldrb	r2, [r7, #2]
 800527e:	485d      	ldr	r0, [pc, #372]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc08>)
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4403      	add	r3, r0
 800528a:	3312      	adds	r3, #18
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	4299      	cmp	r1, r3
 8005290:	d071      	beq.n	8005376 <Vital_Msg_extr_from_CAN+0xb8a>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005292:	78ba      	ldrb	r2, [r7, #2]
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4a55      	ldr	r2, [pc, #340]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc08>)
 800529e:	4413      	add	r3, r2
 80052a0:	3301      	adds	r3, #1
 80052a2:	2210      	movs	r2, #16
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f01f ff72 	bl	8025190 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80052ac:	78ba      	ldrb	r2, [r7, #2]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4a4f      	ldr	r2, [pc, #316]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc08>)
 80052b8:	4413      	add	r3, r2
 80052ba:	f107 0108 	add.w	r1, r7, #8
 80052be:	2214      	movs	r2, #20
 80052c0:	4618      	mov	r0, r3
 80052c2:	f01f ff3d 	bl	8025140 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80052c6:	78bb      	ldrb	r3, [r7, #2]
 80052c8:	494b      	ldr	r1, [pc, #300]	; (80053f8 <Vital_Msg_extr_from_CAN+0xc0c>)
 80052ca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80052ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80052d2:	78bb      	ldrb	r3, [r7, #2]
 80052d4:	4a49      	ldr	r2, [pc, #292]	; (80053fc <Vital_Msg_extr_from_CAN+0xc10>)
 80052d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80052da:	78ba      	ldrb	r2, [r7, #2]
 80052dc:	4845      	ldr	r0, [pc, #276]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc08>)
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4403      	add	r3, r0
 80052e8:	3312      	adds	r3, #18
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	4299      	cmp	r1, r3
 80052ee:	d042      	beq.n	8005376 <Vital_Msg_extr_from_CAN+0xb8a>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80052f0:	78ba      	ldrb	r2, [r7, #2]
 80052f2:	78b9      	ldrb	r1, [r7, #2]
 80052f4:	483f      	ldr	r0, [pc, #252]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc08>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4403      	add	r3, r0
 8005300:	3312      	adds	r3, #18
 8005302:	881a      	ldrh	r2, [r3, #0]
 8005304:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <Vital_Msg_extr_from_CAN+0xc10>)
 8005306:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 800530a:	2214      	movs	r2, #20
 800530c:	2100      	movs	r1, #0
 800530e:	483c      	ldr	r0, [pc, #240]	; (8005400 <Vital_Msg_extr_from_CAN+0xc14>)
 8005310:	f01f ff3e 	bl	8025190 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005314:	78ba      	ldrb	r2, [r7, #2]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4a35      	ldr	r2, [pc, #212]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc08>)
 8005320:	4413      	add	r3, r2
 8005322:	2214      	movs	r2, #20
 8005324:	4619      	mov	r1, r3
 8005326:	4836      	ldr	r0, [pc, #216]	; (8005400 <Vital_Msg_extr_from_CAN+0xc14>)
 8005328:	f01f ff0a 	bl	8025140 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800532c:	f240 2007 	movw	r0, #519	; 0x207
 8005330:	f00b fa5a 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 8005334:	78bb      	ldrb	r3, [r7, #2]
 8005336:	4a33      	ldr	r2, [pc, #204]	; (8005404 <Vital_Msg_extr_from_CAN+0xc18>)
 8005338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11a      	bne.n	8005376 <Vital_Msg_extr_from_CAN+0xb8a>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005340:	78bb      	ldrb	r3, [r7, #2]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4a30      	ldr	r2, [pc, #192]	; (8005408 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005346:	4413      	add	r3, r2
 8005348:	1c98      	adds	r0, r3, #2
 800534a:	78ba      	ldrb	r2, [r7, #2]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a27      	ldr	r2, [pc, #156]	; (80053f4 <Vital_Msg_extr_from_CAN+0xc08>)
 8005356:	4413      	add	r3, r2
 8005358:	3301      	adds	r3, #1
 800535a:	2210      	movs	r2, #16
 800535c:	4619      	mov	r1, r3
 800535e:	f01f feef 	bl	8025140 <memcpy>
#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif

#ifdef EI_1
				ReArrangedVitalData();
 8005362:	f004 fe17 	bl	8009f94 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8005366:	f240 1019 	movw	r0, #281	; 0x119
 800536a:	f00b fa3d 	bl	80107e8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 800536e:	4a27      	ldr	r2, [pc, #156]	; (800540c <Vital_Msg_extr_from_CAN+0xc20>)
 8005370:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005374:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005376:	78ba      	ldrb	r2, [r7, #2]
 8005378:	4925      	ldr	r1, [pc, #148]	; (8005410 <Vital_Msg_extr_from_CAN+0xc24>)
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	78ba      	ldrb	r2, [r7, #2]
 8005386:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005388:	78ba      	ldrb	r2, [r7, #2]
 800538a:	4921      	ldr	r1, [pc, #132]	; (8005410 <Vital_Msg_extr_from_CAN+0xc24>)
 800538c:	4613      	mov	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	440b      	add	r3, r1
 8005396:	3301      	adds	r3, #1
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800539c:	2218      	movs	r2, #24
 800539e:	2100      	movs	r1, #0
 80053a0:	481c      	ldr	r0, [pc, #112]	; (8005414 <Vital_Msg_extr_from_CAN+0xc28>)
 80053a2:	f01f fef5 	bl	8025190 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80053a6:	78ba      	ldrb	r2, [r7, #2]
 80053a8:	4613      	mov	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <Vital_Msg_extr_from_CAN+0xc24>)
 80053b2:	4413      	add	r3, r2
 80053b4:	2218      	movs	r2, #24
 80053b6:	4619      	mov	r1, r3
 80053b8:	4816      	ldr	r0, [pc, #88]	; (8005414 <Vital_Msg_extr_from_CAN+0xc28>)
 80053ba:	f01f fec1 	bl	8025140 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80053be:	f240 2001 	movw	r0, #513	; 0x201
 80053c2:	f00b fa11 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80053c6:	78ba      	ldrb	r2, [r7, #2]
 80053c8:	4911      	ldr	r1, [pc, #68]	; (8005410 <Vital_Msg_extr_from_CAN+0xc24>)
 80053ca:	4613      	mov	r3, r2
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	4413      	add	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	440b      	add	r3, r1
 80053d4:	3301      	adds	r3, #1
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80053da:	78bb      	ldrb	r3, [r7, #2]
 80053dc:	490e      	ldr	r1, [pc, #56]	; (8005418 <Vital_Msg_extr_from_CAN+0xc2c>)
 80053de:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80053e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 80053e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000304 	.word	0x20000304
 80053f4:	200022ac 	.word	0x200022ac
 80053f8:	20001260 	.word	0x20001260
 80053fc:	20001288 	.word	0x20001288
 8005400:	2000243c 	.word	0x2000243c
 8005404:	2000124c 	.word	0x2000124c
 8005408:	2000146c 	.word	0x2000146c
 800540c:	200011e0 	.word	0x200011e0
 8005410:	20001aa0 	.word	0x20001aa0
 8005414:	20001c80 	.word	0x20001c80
 8005418:	200011b4 	.word	0x200011b4

0800541c <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b095      	sub	sp, #84	; 0x54
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	461a      	mov	r2, r3
 800542a:	4603      	mov	r3, r0
 800542c:	70fb      	strb	r3, [r7, #3]
 800542e:	460b      	mov	r3, r1
 8005430:	70bb      	strb	r3, [r7, #2]
 8005432:	4613      	mov	r3, r2
 8005434:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	2224      	movs	r2, #36	; 0x24
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f01f fea4 	bl	8025190 <memset>
	uint8_t uc_index = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 800545c:	f012 ff76 	bl	801834c <HAL_GetTick>
 8005460:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005468:	2300      	movs	r3, #0
 800546a:	873b      	strh	r3, [r7, #56]	; 0x38
 800546c:	2300      	movs	r3, #0
 800546e:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005470:	499a      	ldr	r1, [pc, #616]	; (80056dc <Status_Msg_Extr+0x2c0>)
 8005472:	489b      	ldr	r0, [pc, #620]	; (80056e0 <Status_Msg_Extr+0x2c4>)
 8005474:	f7fa fee4 	bl	8000240 <strcmp>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 812c 	beq.w	80056d8 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005480:	4b98      	ldr	r3, [pc, #608]	; (80056e4 <Status_Msg_Extr+0x2c8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d02c      	beq.n	80054e6 <Status_Msg_Extr+0xca>
 800548c:	4b95      	ldr	r3, [pc, #596]	; (80056e4 <Status_Msg_Extr+0x2c8>)
 800548e:	791b      	ldrb	r3, [r3, #4]
 8005490:	78ba      	ldrb	r2, [r7, #2]
 8005492:	429a      	cmp	r2, r3
 8005494:	d127      	bne.n	80054e6 <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 800549a:	4893      	ldr	r0, [pc, #588]	; (80056e8 <Status_Msg_Extr+0x2cc>)
 800549c:	f017 fc08 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b92      	ldr	r3, [pc, #584]	; (80056ec <Status_Msg_Extr+0x2d0>)
 80054a4:	fba3 1302 	umull	r1, r3, r3, r2
 80054a8:	0bd9      	lsrs	r1, r3, #15
 80054aa:	460b      	mov	r3, r1
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	1a5b      	subs	r3, r3, r1
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80054b4:	488e      	ldr	r0, [pc, #568]	; (80056f0 <Status_Msg_Extr+0x2d4>)
 80054b6:	f01f ffef 	bl	8025498 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80054ba:	78bb      	ldrb	r3, [r7, #2]
 80054bc:	4a8d      	ldr	r2, [pc, #564]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	4413      	add	r3, r2
 80054c2:	3308      	adds	r3, #8
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	488b      	ldr	r0, [pc, #556]	; (80056f8 <Status_Msg_Extr+0x2dc>)
 80054ca:	f01f ff49 	bl	8025360 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80054ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054d0:	488a      	ldr	r0, [pc, #552]	; (80056fc <Status_Msg_Extr+0x2e0>)
 80054d2:	f01f ff45 	bl	8025360 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 80054d6:	f107 0208 	add.w	r2, r7, #8
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	2118      	movs	r1, #24
 80054de:	2000      	movs	r0, #0
 80054e0:	f7fb f924 	bl	800072c <InsertBits>
	{
 80054e4:	e00b      	b.n	80054fe <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80054e6:	78bb      	ldrb	r3, [r7, #2]
 80054e8:	4a82      	ldr	r2, [pc, #520]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4413      	add	r3, r2
 80054ee:	3308      	adds	r3, #8
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f107 0208 	add.w	r2, r7, #8
 80054f6:	2118      	movs	r1, #24
 80054f8:	2000      	movs	r0, #0
 80054fa:	f7fb f917 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005504:	e010      	b.n	8005528 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005506:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	441a      	add	r2, r3
 800550e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005512:	3303      	adds	r3, #3
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	3350      	adds	r3, #80	; 0x50
 8005518:	443b      	add	r3, r7
 800551a:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800551e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005522:	3301      	adds	r3, #1
 8005524:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005528:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	3b05      	subs	r3, #5
 8005530:	429a      	cmp	r2, r3
 8005532:	dbe8      	blt.n	8005506 <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005534:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005538:	b29b      	uxth	r3, r3
 800553a:	3303      	adds	r3, #3
 800553c:	b29a      	uxth	r2, r3
 800553e:	f107 0308 	add.w	r3, r7, #8
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f00f f9b5 	bl	80148b4 <CalculateDirectReverseCrc>
 800554a:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	3b05      	subs	r3, #5
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	441a      	add	r2, r3
 8005554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005556:	2120      	movs	r1, #32
 8005558:	4618      	mov	r0, r3
 800555a:	f7fb f85b 	bl	8000614 <ExtractBits>
 800555e:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005564:	429a      	cmp	r2, r3
 8005566:	f000 80df 	beq.w	8005728 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3305      	adds	r3, #5
 800556e:	461a      	mov	r2, r3
 8005570:	2108      	movs	r1, #8
 8005572:	2000      	movs	r0, #0
 8005574:	f7fb f84e 	bl	8000614 <ExtractBits>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 800557e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <Status_Msg_Extr+0x174>
 8005586:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800558a:	2b01      	cmp	r3, #1
 800558c:	f040 8090 	bne.w	80056b0 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005590:	78bb      	ldrb	r3, [r7, #2]
 8005592:	4a5b      	ldr	r2, [pc, #364]	; (8005700 <Status_Msg_Extr+0x2e4>)
 8005594:	3366      	adds	r3, #102	; 0x66
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4619      	mov	r1, r3
 800559e:	4859      	ldr	r0, [pc, #356]	; (8005704 <Status_Msg_Extr+0x2e8>)
 80055a0:	f01f fede 	bl	8025360 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	2228      	movs	r2, #40	; 0x28
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f01f fdef 	bl	8025190 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80055b2:	78bb      	ldrb	r3, [r7, #2]
 80055b4:	4a4f      	ldr	r2, [pc, #316]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4413      	add	r3, r2
 80055ba:	3308      	adds	r3, #8
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	f107 0208 	add.w	r2, r7, #8
 80055c4:	2118      	movs	r1, #24
 80055c6:	2000      	movs	r0, #0
 80055c8:	f7fb f8b0 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80055d2:	e010      	b.n	80055f6 <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 80055d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	441a      	add	r2, r3
 80055dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055e0:	3303      	adds	r3, #3
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	3350      	adds	r3, #80	; 0x50
 80055e6:	443b      	add	r3, r7
 80055e8:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80055ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055f0:	3301      	adds	r3, #1
 80055f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80055f6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	3b05      	subs	r3, #5
 80055fe:	429a      	cmp	r2, r3
 8005600:	dbe8      	blt.n	80055d4 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005602:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005606:	b29b      	uxth	r3, r3
 8005608:	3303      	adds	r3, #3
 800560a:	b29a      	uxth	r2, r3
 800560c:	f107 0308 	add.w	r3, r7, #8
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f00f f94e 	bl	80148b4 <CalculateDirectReverseCrc>
 8005618:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 800561a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800561c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561e:	429a      	cmp	r2, r3
 8005620:	d132      	bne.n	8005688 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005622:	4839      	ldr	r0, [pc, #228]	; (8005708 <Status_Msg_Extr+0x2ec>)
 8005624:	f01f ff38 	bl	8025498 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005628:	78bb      	ldrb	r3, [r7, #2]
 800562a:	4a32      	ldr	r2, [pc, #200]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	4413      	add	r3, r2
 8005630:	3308      	adds	r3, #8
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	4835      	ldr	r0, [pc, #212]	; (800570c <Status_Msg_Extr+0x2f0>)
 8005638:	f01f fe92 	bl	8025360 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800563c:	78bb      	ldrb	r3, [r7, #2]
 800563e:	492d      	ldr	r1, [pc, #180]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 8005640:	011a      	lsls	r2, r3, #4
 8005642:	440a      	add	r2, r1
 8005644:	3208      	adds	r2, #8
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	3201      	adds	r2, #1
 800564a:	492a      	ldr	r1, [pc, #168]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	440b      	add	r3, r1
 8005650:	3308      	adds	r3, #8
 8005652:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005654:	78bb      	ldrb	r3, [r7, #2]
 8005656:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	4413      	add	r3, r2
 800565c:	3308      	adds	r3, #8
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	482b      	ldr	r0, [pc, #172]	; (8005710 <Status_Msg_Extr+0x2f4>)
 8005664:	f01f fe7c 	bl	8025360 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005668:	78bb      	ldrb	r3, [r7, #2]
 800566a:	78ba      	ldrb	r2, [r7, #2]
 800566c:	4921      	ldr	r1, [pc, #132]	; (80056f4 <Status_Msg_Extr+0x2d8>)
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	440b      	add	r3, r1
 8005672:	3308      	adds	r3, #8
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	4827      	ldr	r0, [pc, #156]	; (8005714 <Status_Msg_Extr+0x2f8>)
 8005678:	4613      	mov	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4403      	add	r3, r0
 8005682:	3308      	adds	r3, #8
 8005684:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 8005686:	e050      	b.n	800572a <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005688:	78bb      	ldrb	r3, [r7, #2]
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <Status_Msg_Extr+0x2e4>)
 800568c:	3366      	adds	r3, #102	; 0x66
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4619      	mov	r1, r3
 8005696:	4820      	ldr	r0, [pc, #128]	; (8005718 <Status_Msg_Extr+0x2fc>)
 8005698:	f01f fe62 	bl	8025360 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 800569c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800569e:	481f      	ldr	r0, [pc, #124]	; (800571c <Status_Msg_Extr+0x300>)
 80056a0:	f01f fe5e 	bl	8025360 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80056a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056a6:	481e      	ldr	r0, [pc, #120]	; (8005720 <Status_Msg_Extr+0x304>)
 80056a8:	f01f fe5a 	bl	8025360 <iprintf>
				return;
 80056ac:	f000 bca7 	b.w	8005ffe <Status_Msg_Extr+0xbe2>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056b0:	78bb      	ldrb	r3, [r7, #2]
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <Status_Msg_Extr+0x2e4>)
 80056b4:	3366      	adds	r3, #102	; 0x66
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4619      	mov	r1, r3
 80056be:	4819      	ldr	r0, [pc, #100]	; (8005724 <Status_Msg_Extr+0x308>)
 80056c0:	f01f fe4e 	bl	8025360 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80056c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056c6:	4815      	ldr	r0, [pc, #84]	; (800571c <Status_Msg_Extr+0x300>)
 80056c8:	f01f fe4a 	bl	8025360 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80056cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ce:	4814      	ldr	r0, [pc, #80]	; (8005720 <Status_Msg_Extr+0x304>)
 80056d0:	f01f fe46 	bl	8025360 <iprintf>
			return;
 80056d4:	f000 bc93 	b.w	8005ffe <Status_Msg_Extr+0xbe2>
		goto ROLLOVER_STATUS;
 80056d8:	bf00      	nop
 80056da:	e026      	b.n	800572a <Status_Msg_Extr+0x30e>
 80056dc:	08026b0c 	.word	0x08026b0c
 80056e0:	20000305 	.word	0x20000305
 80056e4:	20001d88 	.word	0x20001d88
 80056e8:	2000a9e0 	.word	0x2000a9e0
 80056ec:	80008001 	.word	0x80008001
 80056f0:	080273ac 	.word	0x080273ac
 80056f4:	200015f0 	.word	0x200015f0
 80056f8:	080273cc 	.word	0x080273cc
 80056fc:	08027058 	.word	0x08027058
 8005700:	20000304 	.word	0x20000304
 8005704:	080273f0 	.word	0x080273f0
 8005708:	0802709c 	.word	0x0802709c
 800570c:	08027414 	.word	0x08027414
 8005710:	0802742c 	.word	0x0802742c
 8005714:	20001aa0 	.word	0x20001aa0
 8005718:	08027444 	.word	0x08027444
 800571c:	08026d50 	.word	0x08026d50
 8005720:	08026d60 	.word	0x08026d60
 8005724:	08027464 	.word	0x08027464
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005728:	bf00      	nop

	BITSTUFFINC(8);
 800572a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800572e:	3308      	adds	r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	da00      	bge.n	8005736 <Status_Msg_Extr+0x31a>
 8005734:	3307      	adds	r3, #7
 8005736:	10db      	asrs	r3, r3, #3
 8005738:	b29a      	uxth	r2, r3
 800573a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800573c:	4413      	add	r3, r2
 800573e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005742:	3308      	adds	r3, #8
 8005744:	b29b      	uxth	r3, r3
 8005746:	b21b      	sxth	r3, r3
 8005748:	425a      	negs	r2, r3
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	f002 0207 	and.w	r2, r2, #7
 8005752:	bf58      	it	pl
 8005754:	4253      	negpl	r3, r2
 8005756:	b21b      	sxth	r3, r3
 8005758:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800575a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	441a      	add	r2, r3
 8005760:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005762:	2110      	movs	r1, #16
 8005764:	4618      	mov	r0, r3
 8005766:	f7fa ff55 	bl	8000614 <ExtractBits>
 800576a:	4603      	mov	r3, r0
 800576c:	78ba      	ldrb	r2, [r7, #2]
 800576e:	b298      	uxth	r0, r3
 8005770:	49ab      	ldr	r1, [pc, #684]	; (8005a20 <Status_Msg_Extr+0x604>)
 8005772:	4613      	mov	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	3306      	adds	r3, #6
 800577e:	4602      	mov	r2, r0
 8005780:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005782:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005786:	3310      	adds	r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	da00      	bge.n	800578e <Status_Msg_Extr+0x372>
 800578c:	3307      	adds	r3, #7
 800578e:	10db      	asrs	r3, r3, #3
 8005790:	b29a      	uxth	r2, r3
 8005792:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005794:	4413      	add	r3, r2
 8005796:	873b      	strh	r3, [r7, #56]	; 0x38
 8005798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800579a:	3310      	adds	r3, #16
 800579c:	b29b      	uxth	r3, r3
 800579e:	b21b      	sxth	r3, r3
 80057a0:	425a      	negs	r2, r3
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	f002 0207 	and.w	r2, r2, #7
 80057aa:	bf58      	it	pl
 80057ac:	4253      	negpl	r3, r2
 80057ae:	b21b      	sxth	r3, r3
 80057b0:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80057b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	441a      	add	r2, r3
 80057b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ba:	2110      	movs	r1, #16
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fa ff29 	bl	8000614 <ExtractBits>
 80057c2:	4603      	mov	r3, r0
 80057c4:	78ba      	ldrb	r2, [r7, #2]
 80057c6:	b298      	uxth	r0, r3
 80057c8:	4995      	ldr	r1, [pc, #596]	; (8005a20 <Status_Msg_Extr+0x604>)
 80057ca:	4613      	mov	r3, r2
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3304      	adds	r3, #4
 80057d6:	4602      	mov	r2, r0
 80057d8:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80057da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057de:	3310      	adds	r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da00      	bge.n	80057e6 <Status_Msg_Extr+0x3ca>
 80057e4:	3307      	adds	r3, #7
 80057e6:	10db      	asrs	r3, r3, #3
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ec:	4413      	add	r3, r2
 80057ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80057f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057f2:	3310      	adds	r3, #16
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b21b      	sxth	r3, r3
 80057f8:	425a      	negs	r2, r3
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	f002 0207 	and.w	r2, r2, #7
 8005802:	bf58      	it	pl
 8005804:	4253      	negpl	r3, r2
 8005806:	b21b      	sxth	r3, r3
 8005808:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800580a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	441a      	add	r2, r3
 8005810:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005812:	2108      	movs	r1, #8
 8005814:	4618      	mov	r0, r3
 8005816:	f7fa fefd 	bl	8000614 <ExtractBits>
 800581a:	4602      	mov	r2, r0
 800581c:	78bb      	ldrb	r3, [r7, #2]
 800581e:	b2d1      	uxtb	r1, r2
 8005820:	4a80      	ldr	r2, [pc, #512]	; (8005a24 <Status_Msg_Extr+0x608>)
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	4413      	add	r3, r2
 8005826:	3302      	adds	r3, #2
 8005828:	460a      	mov	r2, r1
 800582a:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800582c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005830:	3308      	adds	r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	da00      	bge.n	8005838 <Status_Msg_Extr+0x41c>
 8005836:	3307      	adds	r3, #7
 8005838:	10db      	asrs	r3, r3, #3
 800583a:	b29a      	uxth	r2, r3
 800583c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800583e:	4413      	add	r3, r2
 8005840:	873b      	strh	r3, [r7, #56]	; 0x38
 8005842:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005844:	3308      	adds	r3, #8
 8005846:	b29b      	uxth	r3, r3
 8005848:	b21b      	sxth	r3, r3
 800584a:	425a      	negs	r2, r3
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	f002 0207 	and.w	r2, r2, #7
 8005854:	bf58      	it	pl
 8005856:	4253      	negpl	r3, r2
 8005858:	b21b      	sxth	r3, r3
 800585a:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800585c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	441a      	add	r2, r3
 8005862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005864:	2108      	movs	r1, #8
 8005866:	4618      	mov	r0, r3
 8005868:	f7fa fed4 	bl	8000614 <ExtractBits>
 800586c:	4602      	mov	r2, r0
 800586e:	78bb      	ldrb	r3, [r7, #2]
 8005870:	b2d1      	uxtb	r1, r2
 8005872:	4a6c      	ldr	r2, [pc, #432]	; (8005a24 <Status_Msg_Extr+0x608>)
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	4413      	add	r3, r2
 8005878:	3301      	adds	r3, #1
 800587a:	460a      	mov	r2, r1
 800587c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800587e:	78bb      	ldrb	r3, [r7, #2]
 8005880:	4a68      	ldr	r2, [pc, #416]	; (8005a24 <Status_Msg_Extr+0x608>)
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	4413      	add	r3, r2
 8005886:	3301      	adds	r3, #1
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d138      	bne.n	8005900 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800588e:	78bb      	ldrb	r3, [r7, #2]
 8005890:	4a65      	ldr	r2, [pc, #404]	; (8005a28 <Status_Msg_Extr+0x60c>)
 8005892:	3366      	adds	r3, #102	; 0x66
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4619      	mov	r1, r3
 800589c:	4863      	ldr	r0, [pc, #396]	; (8005a2c <Status_Msg_Extr+0x610>)
 800589e:	f01f fd5f 	bl	8025360 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80058a2:	78bb      	ldrb	r3, [r7, #2]
 80058a4:	4a5f      	ldr	r2, [pc, #380]	; (8005a24 <Status_Msg_Extr+0x608>)
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	4413      	add	r3, r2
 80058aa:	330c      	adds	r3, #12
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	485f      	ldr	r0, [pc, #380]	; (8005a30 <Status_Msg_Extr+0x614>)
 80058b2:	f01f fd55 	bl	8025360 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80058b6:	78bb      	ldrb	r3, [r7, #2]
 80058b8:	495a      	ldr	r1, [pc, #360]	; (8005a24 <Status_Msg_Extr+0x608>)
 80058ba:	011a      	lsls	r2, r3, #4
 80058bc:	440a      	add	r2, r1
 80058be:	320c      	adds	r2, #12
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	3201      	adds	r2, #1
 80058c4:	4957      	ldr	r1, [pc, #348]	; (8005a24 <Status_Msg_Extr+0x608>)
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	440b      	add	r3, r1
 80058ca:	330c      	adds	r3, #12
 80058cc:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80058ce:	78bb      	ldrb	r3, [r7, #2]
 80058d0:	4a54      	ldr	r2, [pc, #336]	; (8005a24 <Status_Msg_Extr+0x608>)
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	4413      	add	r3, r2
 80058d6:	330c      	adds	r3, #12
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4619      	mov	r1, r3
 80058dc:	4855      	ldr	r0, [pc, #340]	; (8005a34 <Status_Msg_Extr+0x618>)
 80058de:	f01f fd3f 	bl	8025360 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80058e2:	78bb      	ldrb	r3, [r7, #2]
 80058e4:	78ba      	ldrb	r2, [r7, #2]
 80058e6:	494f      	ldr	r1, [pc, #316]	; (8005a24 <Status_Msg_Extr+0x608>)
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	440b      	add	r3, r1
 80058ec:	330c      	adds	r3, #12
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	4851      	ldr	r0, [pc, #324]	; (8005a38 <Status_Msg_Extr+0x61c>)
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4403      	add	r3, r0
 80058fc:	330c      	adds	r3, #12
 80058fe:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005900:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005904:	3308      	adds	r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	da00      	bge.n	800590c <Status_Msg_Extr+0x4f0>
 800590a:	3307      	adds	r3, #7
 800590c:	10db      	asrs	r3, r3, #3
 800590e:	b29a      	uxth	r2, r3
 8005910:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005912:	4413      	add	r3, r2
 8005914:	873b      	strh	r3, [r7, #56]	; 0x38
 8005916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005918:	3308      	adds	r3, #8
 800591a:	b29b      	uxth	r3, r3
 800591c:	b21b      	sxth	r3, r3
 800591e:	425a      	negs	r2, r3
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	f002 0207 	and.w	r2, r2, #7
 8005928:	bf58      	it	pl
 800592a:	4253      	negpl	r3, r2
 800592c:	b21b      	sxth	r3, r3
 800592e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005930:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	441a      	add	r2, r3
 8005936:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005938:	2108      	movs	r1, #8
 800593a:	4618      	mov	r0, r3
 800593c:	f7fa fe6a 	bl	8000614 <ExtractBits>
 8005940:	4603      	mov	r3, r0
 8005942:	78ba      	ldrb	r2, [r7, #2]
 8005944:	b2d8      	uxtb	r0, r3
 8005946:	4936      	ldr	r1, [pc, #216]	; (8005a20 <Status_Msg_Extr+0x604>)
 8005948:	4613      	mov	r3, r2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	3302      	adds	r3, #2
 8005954:	4602      	mov	r2, r0
 8005956:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8005958:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800595c:	3308      	adds	r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	da00      	bge.n	8005964 <Status_Msg_Extr+0x548>
 8005962:	3307      	adds	r3, #7
 8005964:	10db      	asrs	r3, r3, #3
 8005966:	b29a      	uxth	r2, r3
 8005968:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800596a:	4413      	add	r3, r2
 800596c:	873b      	strh	r3, [r7, #56]	; 0x38
 800596e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005970:	3308      	adds	r3, #8
 8005972:	b29b      	uxth	r3, r3
 8005974:	b21b      	sxth	r3, r3
 8005976:	425a      	negs	r2, r3
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	f002 0207 	and.w	r2, r2, #7
 8005980:	bf58      	it	pl
 8005982:	4253      	negpl	r3, r2
 8005984:	b21b      	sxth	r3, r3
 8005986:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005988:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	441a      	add	r2, r3
 800598e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005990:	2110      	movs	r1, #16
 8005992:	4618      	mov	r0, r3
 8005994:	f7fa fe3e 	bl	8000614 <ExtractBits>
 8005998:	4602      	mov	r2, r0
 800599a:	78bb      	ldrb	r3, [r7, #2]
 800599c:	b291      	uxth	r1, r2
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <Status_Msg_Extr+0x608>)
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	4413      	add	r3, r2
 80059a4:	3304      	adds	r3, #4
 80059a6:	460a      	mov	r2, r1
 80059a8:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80059aa:	4924      	ldr	r1, [pc, #144]	; (8005a3c <Status_Msg_Extr+0x620>)
 80059ac:	4824      	ldr	r0, [pc, #144]	; (8005a40 <Status_Msg_Extr+0x624>)
 80059ae:	f7fa fc47 	bl	8000240 <strcmp>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10f      	bne.n	80059d8 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80059b8:	78bb      	ldrb	r3, [r7, #2]
 80059ba:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <Status_Msg_Extr+0x608>)
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	78bb      	ldrb	r3, [r7, #2]
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	b291      	uxth	r1, r2
 80059cc:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <Status_Msg_Extr+0x608>)
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	4413      	add	r3, r2
 80059d2:	3304      	adds	r3, #4
 80059d4:	460a      	mov	r2, r1
 80059d6:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80059d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059dc:	3310      	adds	r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da00      	bge.n	80059e4 <Status_Msg_Extr+0x5c8>
 80059e2:	3307      	adds	r3, #7
 80059e4:	10db      	asrs	r3, r3, #3
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059ea:	4413      	add	r3, r2
 80059ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80059ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059f0:	3310      	adds	r3, #16
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	425a      	negs	r2, r3
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	f002 0207 	and.w	r2, r2, #7
 8005a00:	bf58      	it	pl
 8005a02:	4253      	negpl	r3, r2
 8005a04:	b21b      	sxth	r3, r3
 8005a06:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 8005a08:	78bb      	ldrb	r3, [r7, #2]
 8005a0a:	4a06      	ldr	r2, [pc, #24]	; (8005a24 <Status_Msg_Extr+0x608>)
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 812a 	beq.w	8005c72 <Status_Msg_Extr+0x856>
 8005a1e:	e011      	b.n	8005a44 <Status_Msg_Extr+0x628>
 8005a20:	20001a28 	.word	0x20001a28
 8005a24:	200015f0 	.word	0x200015f0
 8005a28:	20000304 	.word	0x20000304
 8005a2c:	08027154 	.word	0x08027154
 8005a30:	0802747c 	.word	0x0802747c
 8005a34:	08027488 	.word	0x08027488
 8005a38:	20001aa0 	.word	0x20001aa0
 8005a3c:	08026b0c 	.word	0x08026b0c
 8005a40:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	441a      	add	r2, r3
 8005a4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a4c:	2108      	movs	r1, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fa fde0 	bl	8000614 <ExtractBits>
 8005a54:	4603      	mov	r3, r0
 8005a56:	78ba      	ldrb	r2, [r7, #2]
 8005a58:	b2d8      	uxtb	r0, r3
 8005a5a:	49b0      	ldr	r1, [pc, #704]	; (8005d1c <Status_Msg_Extr+0x900>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	440b      	add	r3, r1
 8005a66:	3305      	adds	r3, #5
 8005a68:	4602      	mov	r2, r0
 8005a6a:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a6c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a70:	3308      	adds	r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da00      	bge.n	8005a78 <Status_Msg_Extr+0x65c>
 8005a76:	3307      	adds	r3, #7
 8005a78:	10db      	asrs	r3, r3, #3
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a7e:	4413      	add	r3, r2
 8005a80:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a84:	3308      	adds	r3, #8
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	b21b      	sxth	r3, r3
 8005a8a:	425a      	negs	r2, r3
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	f002 0207 	and.w	r2, r2, #7
 8005a94:	bf58      	it	pl
 8005a96:	4253      	negpl	r3, r2
 8005a98:	b21b      	sxth	r3, r3
 8005a9a:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	441a      	add	r2, r3
 8005aa2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005aa4:	2108      	movs	r1, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fa fdb4 	bl	8000614 <ExtractBits>
 8005aac:	4603      	mov	r3, r0
 8005aae:	78ba      	ldrb	r2, [r7, #2]
 8005ab0:	b2d8      	uxtb	r0, r3
 8005ab2:	499a      	ldr	r1, [pc, #616]	; (8005d1c <Status_Msg_Extr+0x900>)
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	440b      	add	r3, r1
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005ac4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ac8:	3308      	adds	r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da00      	bge.n	8005ad0 <Status_Msg_Extr+0x6b4>
 8005ace:	3307      	adds	r3, #7
 8005ad0:	10db      	asrs	r3, r3, #3
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ad6:	4413      	add	r3, r2
 8005ad8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ada:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005adc:	3308      	adds	r3, #8
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	b21b      	sxth	r3, r3
 8005ae2:	425a      	negs	r2, r3
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	f002 0207 	and.w	r2, r2, #7
 8005aec:	bf58      	it	pl
 8005aee:	4253      	negpl	r3, r2
 8005af0:	b21b      	sxth	r3, r3
 8005af2:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005af4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	441a      	add	r2, r3
 8005afa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005afc:	2108      	movs	r1, #8
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fa fd88 	bl	8000614 <ExtractBits>
 8005b04:	4603      	mov	r3, r0
 8005b06:	78ba      	ldrb	r2, [r7, #2]
 8005b08:	b2d8      	uxtb	r0, r3
 8005b0a:	4984      	ldr	r1, [pc, #528]	; (8005d1c <Status_Msg_Extr+0x900>)
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	440b      	add	r3, r1
 8005b16:	3303      	adds	r3, #3
 8005b18:	4602      	mov	r2, r0
 8005b1a:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005b1c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b20:	3308      	adds	r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da00      	bge.n	8005b28 <Status_Msg_Extr+0x70c>
 8005b26:	3307      	adds	r3, #7
 8005b28:	10db      	asrs	r3, r3, #3
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b2e:	4413      	add	r3, r2
 8005b30:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b34:	3308      	adds	r3, #8
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	b21b      	sxth	r3, r3
 8005b3a:	425a      	negs	r2, r3
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	f002 0207 	and.w	r2, r2, #7
 8005b44:	bf58      	it	pl
 8005b46:	4253      	negpl	r3, r2
 8005b48:	b21b      	sxth	r3, r3
 8005b4a:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005b4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	441a      	add	r2, r3
 8005b52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b54:	2108      	movs	r1, #8
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fa fd5c 	bl	8000614 <ExtractBits>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	78ba      	ldrb	r2, [r7, #2]
 8005b60:	b2d8      	uxtb	r0, r3
 8005b62:	496e      	ldr	r1, [pc, #440]	; (8005d1c <Status_Msg_Extr+0x900>)
 8005b64:	4613      	mov	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4413      	add	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	440b      	add	r3, r1
 8005b6e:	4602      	mov	r2, r0
 8005b70:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005b72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b76:	3308      	adds	r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	da00      	bge.n	8005b7e <Status_Msg_Extr+0x762>
 8005b7c:	3307      	adds	r3, #7
 8005b7e:	10db      	asrs	r3, r3, #3
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b84:	4413      	add	r3, r2
 8005b86:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	b21b      	sxth	r3, r3
 8005b90:	425a      	negs	r2, r3
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	f002 0207 	and.w	r2, r2, #7
 8005b9a:	bf58      	it	pl
 8005b9c:	4253      	negpl	r3, r2
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005ba2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	441a      	add	r2, r3
 8005ba8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005baa:	2108      	movs	r1, #8
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fa fd31 	bl	8000614 <ExtractBits>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	78ba      	ldrb	r2, [r7, #2]
 8005bb6:	b2d8      	uxtb	r0, r3
 8005bb8:	4958      	ldr	r1, [pc, #352]	; (8005d1c <Status_Msg_Extr+0x900>)
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005bca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da00      	bge.n	8005bd6 <Status_Msg_Extr+0x7ba>
 8005bd4:	3307      	adds	r3, #7
 8005bd6:	10db      	asrs	r3, r3, #3
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bdc:	4413      	add	r3, r2
 8005bde:	873b      	strh	r3, [r7, #56]	; 0x38
 8005be0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005be2:	3308      	adds	r3, #8
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	b21b      	sxth	r3, r3
 8005be8:	425a      	negs	r2, r3
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	f002 0207 	and.w	r2, r2, #7
 8005bf2:	bf58      	it	pl
 8005bf4:	4253      	negpl	r3, r2
 8005bf6:	b21b      	sxth	r3, r3
 8005bf8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005bfa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	441a      	add	r2, r3
 8005c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c02:	2108      	movs	r1, #8
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fa fd05 	bl	8000614 <ExtractBits>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	78ba      	ldrb	r2, [r7, #2]
 8005c0e:	b2d8      	uxtb	r0, r3
 8005c10:	4942      	ldr	r1, [pc, #264]	; (8005d1c <Status_Msg_Extr+0x900>)
 8005c12:	4613      	mov	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4413      	add	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	4602      	mov	r2, r0
 8005c20:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005c22:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005c26:	3308      	adds	r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	da00      	bge.n	8005c2e <Status_Msg_Extr+0x812>
 8005c2c:	3307      	adds	r3, #7
 8005c2e:	10db      	asrs	r3, r3, #3
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c34:	4413      	add	r3, r2
 8005c36:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	b21b      	sxth	r3, r3
 8005c40:	425a      	negs	r2, r3
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	f002 0207 	and.w	r2, r2, #7
 8005c4a:	bf58      	it	pl
 8005c4c:	4253      	negpl	r3, r2
 8005c4e:	b21b      	sxth	r3, r3
 8005c50:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005c52:	78bb      	ldrb	r3, [r7, #2]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f003 faa5 	bl	80091a4 <IS_MLK_EIPC_TIME_MATCHING>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <Status_Msg_Extr+0x84e>
 8005c60:	78bb      	ldrb	r3, [r7, #2]
 8005c62:	4a2f      	ldr	r2, [pc, #188]	; (8005d20 <Status_Msg_Extr+0x904>)
 8005c64:	2100      	movs	r1, #0
 8005c66:	54d1      	strb	r1, [r2, r3]
 8005c68:	e003      	b.n	8005c72 <Status_Msg_Extr+0x856>
 8005c6a:	78bb      	ldrb	r3, [r7, #2]
 8005c6c:	4a2c      	ldr	r2, [pc, #176]	; (8005d20 <Status_Msg_Extr+0x904>)
 8005c6e:	2101      	movs	r1, #1
 8005c70:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005c72:	78bb      	ldrb	r3, [r7, #2]
 8005c74:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <Status_Msg_Extr+0x908>)
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	4413      	add	r3, r2
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <Status_Msg_Extr+0x870>
	{
		LinkEstablishFlag = SET;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005c8c:	787a      	ldrb	r2, [r7, #1]
 8005c8e:	78bb      	ldrb	r3, [r7, #2]
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 f9e0 	bl	8006058 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005c98:	78bb      	ldrb	r3, [r7, #2]
 8005c9a:	4923      	ldr	r1, [pc, #140]	; (8005d28 <Status_Msg_Extr+0x90c>)
 8005c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005ca2:	78bb      	ldrb	r3, [r7, #2]
 8005ca4:	4921      	ldr	r1, [pc, #132]	; (8005d2c <Status_Msg_Extr+0x910>)
 8005ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005cac:	78ba      	ldrb	r2, [r7, #2]
 8005cae:	4920      	ldr	r1, [pc, #128]	; (8005d30 <Status_Msg_Extr+0x914>)
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	440b      	add	r3, r1
 8005cba:	3310      	adds	r3, #16
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	78bc      	ldrb	r4, [r7, #2]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f009 ffdd 	bl	800fc80 <HAL_Elaps_Ticks>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	4919      	ldr	r1, [pc, #100]	; (8005d30 <Status_Msg_Extr+0x914>)
 8005cca:	4623      	mov	r3, r4
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4423      	add	r3, r4
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	601a      	str	r2, [r3, #0]
	/* Updating the Clocks */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 8005cd8:	78bb      	ldrb	r3, [r7, #2]
 8005cda:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <Status_Msg_Extr+0x918>)
 8005cdc:	4413      	add	r3, r2
 8005cde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d12e      	bne.n	8005d44 <Status_Msg_Extr+0x928>
 8005ce6:	78bb      	ldrb	r3, [r7, #2]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <Status_Msg_Extr+0x91c>)
 8005cea:	5cd3      	ldrb	r3, [r2, r3]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d829      	bhi.n	8005d44 <Status_Msg_Extr+0x928>
 8005cf0:	78ba      	ldrb	r2, [r7, #2]
 8005cf2:	4912      	ldr	r1, [pc, #72]	; (8005d3c <Status_Msg_Extr+0x920>)
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	440b      	add	r3, r1
 8005cfe:	3305      	adds	r3, #5
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d11c      	bne.n	8005d44 <Status_Msg_Extr+0x928>
 8005d0a:	78bb      	ldrb	r3, [r7, #2]
 8005d0c:	4a0c      	ldr	r2, [pc, #48]	; (8005d40 <Status_Msg_Extr+0x924>)
 8005d0e:	5cd3      	ldrb	r3, [r2, r3]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d117      	bne.n	8005d44 <Status_Msg_Extr+0x928>
	{
		LinkEstablishFlag = RESET;
 8005d14:	2300      	movs	r3, #0
 8005d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d1a:	e03d      	b.n	8005d98 <Status_Msg_Extr+0x97c>
 8005d1c:	200015b4 	.word	0x200015b4
 8005d20:	20001460 	.word	0x20001460
 8005d24:	200015f0 	.word	0x200015f0
 8005d28:	2000132c 	.word	0x2000132c
 8005d2c:	20001354 	.word	0x20001354
 8005d30:	20001aa0 	.word	0x20001aa0
 8005d34:	20000304 	.word	0x20000304
 8005d38:	20001240 	.word	0x20001240
 8005d3c:	200017d0 	.word	0x200017d0
 8005d40:	20001234 	.word	0x20001234
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8005d44:	78bb      	ldrb	r3, [r7, #2]
 8005d46:	4aaf      	ldr	r2, [pc, #700]	; (8006004 <Status_Msg_Extr+0xbe8>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d122      	bne.n	8005d98 <Status_Msg_Extr+0x97c>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 8005d52:	78bb      	ldrb	r3, [r7, #2]
 8005d54:	4aab      	ldr	r2, [pc, #684]	; (8006004 <Status_Msg_Extr+0xbe8>)
 8005d56:	3366      	adds	r3, #102	; 0x66
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	6859      	ldr	r1, [r3, #4]
 8005d5e:	78bb      	ldrb	r3, [r7, #2]
 8005d60:	4aa9      	ldr	r2, [pc, #676]	; (8006008 <Status_Msg_Extr+0xbec>)
 8005d62:	5cd3      	ldrb	r3, [r2, r3]
 8005d64:	461a      	mov	r2, r3
 8005d66:	48a9      	ldr	r0, [pc, #676]	; (800600c <Status_Msg_Extr+0xbf0>)
 8005d68:	f01f fafa 	bl	8025360 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8005d6c:	78bb      	ldrb	r3, [r7, #2]
 8005d6e:	4aa8      	ldr	r2, [pc, #672]	; (8006010 <Status_Msg_Extr+0xbf4>)
 8005d70:	5cd3      	ldrb	r3, [r2, r3]
 8005d72:	4619      	mov	r1, r3
 8005d74:	48a7      	ldr	r0, [pc, #668]	; (8006014 <Status_Msg_Extr+0xbf8>)
 8005d76:	f01f faf3 	bl	8025360 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8005d7a:	78ba      	ldrb	r2, [r7, #2]
 8005d7c:	49a6      	ldr	r1, [pc, #664]	; (8006018 <Status_Msg_Extr+0xbfc>)
 8005d7e:	4613      	mov	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4413      	add	r3, r2
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	440b      	add	r3, r1
 8005d88:	3305      	adds	r3, #5
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	4619      	mov	r1, r3
 8005d92:	48a2      	ldr	r0, [pc, #648]	; (800601c <Status_Msg_Extr+0xc00>)
 8005d94:	f01f fae4 	bl	8025360 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005d98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d16f      	bne.n	8005e80 <Status_Msg_Extr+0xa64>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005da0:	78ba      	ldrb	r2, [r7, #2]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4a9d      	ldr	r2, [pc, #628]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005dac:	4413      	add	r3, r2
 8005dae:	3301      	adds	r3, #1
 8005db0:	2210      	movs	r2, #16
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f01f f9eb 	bl	8025190 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005dba:	78ba      	ldrb	r2, [r7, #2]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a96      	ldr	r2, [pc, #600]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005dc6:	1898      	adds	r0, r3, r2
 8005dc8:	78ba      	ldrb	r2, [r7, #2]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4a94      	ldr	r2, [pc, #592]	; (8006024 <Status_Msg_Extr+0xc08>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	2214      	movs	r2, #20
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f01f f9b1 	bl	8025140 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005dde:	78bb      	ldrb	r3, [r7, #2]
 8005de0:	4a91      	ldr	r2, [pc, #580]	; (8006028 <Status_Msg_Extr+0xc0c>)
 8005de2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005de6:	78ba      	ldrb	r2, [r7, #2]
 8005de8:	488d      	ldr	r0, [pc, #564]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4403      	add	r3, r0
 8005df4:	3312      	adds	r3, #18
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	4299      	cmp	r1, r3
 8005dfa:	d041      	beq.n	8005e80 <Status_Msg_Extr+0xa64>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005dfc:	78ba      	ldrb	r2, [r7, #2]
 8005dfe:	78b9      	ldrb	r1, [r7, #2]
 8005e00:	4887      	ldr	r0, [pc, #540]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4403      	add	r3, r0
 8005e0c:	3312      	adds	r3, #18
 8005e0e:	881a      	ldrh	r2, [r3, #0]
 8005e10:	4b85      	ldr	r3, [pc, #532]	; (8006028 <Status_Msg_Extr+0xc0c>)
 8005e12:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005e16:	2214      	movs	r2, #20
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4884      	ldr	r0, [pc, #528]	; (800602c <Status_Msg_Extr+0xc10>)
 8005e1c:	f01f f9b8 	bl	8025190 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005e20:	78ba      	ldrb	r2, [r7, #2]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a7d      	ldr	r2, [pc, #500]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005e2c:	4413      	add	r3, r2
 8005e2e:	2214      	movs	r2, #20
 8005e30:	4619      	mov	r1, r3
 8005e32:	487e      	ldr	r0, [pc, #504]	; (800602c <Status_Msg_Extr+0xc10>)
 8005e34:	f01f f984 	bl	8025140 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005e38:	f240 2007 	movw	r0, #519	; 0x207
 8005e3c:	f00a fcd4 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005e40:	78bb      	ldrb	r3, [r7, #2]
 8005e42:	4a7b      	ldr	r2, [pc, #492]	; (8006030 <Status_Msg_Extr+0xc14>)
 8005e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d119      	bne.n	8005e80 <Status_Msg_Extr+0xa64>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005e4c:	78bb      	ldrb	r3, [r7, #2]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	4a78      	ldr	r2, [pc, #480]	; (8006034 <Status_Msg_Extr+0xc18>)
 8005e52:	4413      	add	r3, r2
 8005e54:	1c98      	adds	r0, r3, #2
 8005e56:	78ba      	ldrb	r2, [r7, #2]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4a6f      	ldr	r2, [pc, #444]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005e62:	4413      	add	r3, r2
 8005e64:	3301      	adds	r3, #1
 8005e66:	2210      	movs	r2, #16
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f01f f969 	bl	8025140 <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 8005e6e:	f004 f891 	bl	8009f94 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8005e72:	f240 1019 	movw	r0, #281	; 0x119
 8005e76:	f00a fcb7 	bl	80107e8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005e7a:	4a6f      	ldr	r2, [pc, #444]	; (8006038 <Status_Msg_Extr+0xc1c>)
 8005e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7e:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005e80:	78b9      	ldrb	r1, [r7, #2]
 8005e82:	78ba      	ldrb	r2, [r7, #2]
 8005e84:	4866      	ldr	r0, [pc, #408]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005e86:	460b      	mov	r3, r1
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4403      	add	r3, r0
 8005e90:	3312      	adds	r3, #18
 8005e92:	8818      	ldrh	r0, [r3, #0]
 8005e94:	4969      	ldr	r1, [pc, #420]	; (800603c <Status_Msg_Extr+0xc20>)
 8005e96:	4613      	mov	r3, r2
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3306      	adds	r3, #6
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005ea6:	78ba      	ldrb	r2, [r7, #2]
 8005ea8:	4964      	ldr	r1, [pc, #400]	; (800603c <Status_Msg_Extr+0xc20>)
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb8:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005eba:	78ba      	ldrb	r2, [r7, #2]
 8005ebc:	495f      	ldr	r1, [pc, #380]	; (800603c <Status_Msg_Extr+0xc20>)
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3305      	adds	r3, #5
 8005eca:	2204      	movs	r2, #4
 8005ecc:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005ece:	78ba      	ldrb	r2, [r7, #2]
 8005ed0:	495a      	ldr	r1, [pc, #360]	; (800603c <Status_Msg_Extr+0xc20>)
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	78ba      	ldrb	r2, [r7, #2]
 8005ede:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005ee0:	78ba      	ldrb	r2, [r7, #2]
 8005ee2:	4956      	ldr	r1, [pc, #344]	; (800603c <Status_Msg_Extr+0xc20>)
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	440b      	add	r3, r1
 8005eee:	3301      	adds	r3, #1
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005ef4:	78ba      	ldrb	r2, [r7, #2]
 8005ef6:	4951      	ldr	r1, [pc, #324]	; (800603c <Status_Msg_Extr+0xc20>)
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	440b      	add	r3, r1
 8005f02:	3302      	adds	r3, #2
 8005f04:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005f08:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005f0a:	2218      	movs	r2, #24
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	484c      	ldr	r0, [pc, #304]	; (8006040 <Status_Msg_Extr+0xc24>)
 8005f10:	f01f f93e 	bl	8025190 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005f14:	78ba      	ldrb	r2, [r7, #2]
 8005f16:	4613      	mov	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4a47      	ldr	r2, [pc, #284]	; (800603c <Status_Msg_Extr+0xc20>)
 8005f20:	4413      	add	r3, r2
 8005f22:	2218      	movs	r2, #24
 8005f24:	4619      	mov	r1, r3
 8005f26:	4846      	ldr	r0, [pc, #280]	; (8006040 <Status_Msg_Extr+0xc24>)
 8005f28:	f01f f90a 	bl	8025140 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005f2c:	f240 2001 	movw	r0, #513	; 0x201
 8005f30:	f00a fc5a 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005f34:	78ba      	ldrb	r2, [r7, #2]
 8005f36:	4941      	ldr	r1, [pc, #260]	; (800603c <Status_Msg_Extr+0xc20>)
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	440b      	add	r3, r1
 8005f42:	3301      	adds	r3, #1
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005f48:	78bb      	ldrb	r3, [r7, #2]
 8005f4a:	493e      	ldr	r1, [pc, #248]	; (8006044 <Status_Msg_Extr+0xc28>)
 8005f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005f52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d11d      	bne.n	8005f96 <Status_Msg_Extr+0xb7a>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005f5a:	78bb      	ldrb	r3, [r7, #2]
 8005f5c:	493a      	ldr	r1, [pc, #232]	; (8006048 <Status_Msg_Extr+0xc2c>)
 8005f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005f64:	78ba      	ldrb	r2, [r7, #2]
 8005f66:	4939      	ldr	r1, [pc, #228]	; (800604c <Status_Msg_Extr+0xc30>)
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	3304      	adds	r3, #4
 8005f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f76:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005f78:	78ba      	ldrb	r2, [r7, #2]
 8005f7a:	4934      	ldr	r1, [pc, #208]	; (800604c <Status_Msg_Extr+0xc30>)
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	3301      	adds	r3, #1
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8005f8c:	78bb      	ldrb	r3, [r7, #2]
 8005f8e:	4a30      	ldr	r2, [pc, #192]	; (8006050 <Status_Msg_Extr+0xc34>)
 8005f90:	2101      	movs	r1, #1
 8005f92:	54d1      	strb	r1, [r2, r3]
 8005f94:	e02e      	b.n	8005ff4 <Status_Msg_Extr+0xbd8>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8005f96:	78bb      	ldrb	r3, [r7, #2]
 8005f98:	4a2d      	ldr	r2, [pc, #180]	; (8006050 <Status_Msg_Extr+0xc34>)
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005f9e:	78ba      	ldrb	r2, [r7, #2]
 8005fa0:	492a      	ldr	r1, [pc, #168]	; (800604c <Status_Msg_Extr+0xc30>)
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3308      	adds	r3, #8
 8005fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fb0:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8005fb2:	78ba      	ldrb	r2, [r7, #2]
 8005fb4:	4925      	ldr	r1, [pc, #148]	; (800604c <Status_Msg_Extr+0xc30>)
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005fc6:	78ba      	ldrb	r2, [r7, #2]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f01f f8d8 	bl	8025190 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8005fe0:	78ba      	ldrb	r2, [r7, #2]
 8005fe2:	490f      	ldr	r1, [pc, #60]	; (8006020 <Status_Msg_Extr+0xc04>)
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	3312      	adds	r3, #18
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ff8:	4816      	ldr	r0, [pc, #88]	; (8006054 <Status_Msg_Extr+0xc38>)
 8005ffa:	f014 fe90 	bl	801ad1e <HAL_GPIO_TogglePin>

}
 8005ffe:	3754      	adds	r7, #84	; 0x54
 8006000:	46bd      	mov	sp, r7
 8006002:	bd90      	pop	{r4, r7, pc}
 8006004:	20000304 	.word	0x20000304
 8006008:	20001240 	.word	0x20001240
 800600c:	08027494 	.word	0x08027494
 8006010:	20001234 	.word	0x20001234
 8006014:	080274a4 	.word	0x080274a4
 8006018:	200017d0 	.word	0x200017d0
 800601c:	080274bc 	.word	0x080274bc
 8006020:	200022ac 	.word	0x200022ac
 8006024:	200021e4 	.word	0x200021e4
 8006028:	20001288 	.word	0x20001288
 800602c:	2000243c 	.word	0x2000243c
 8006030:	2000124c 	.word	0x2000124c
 8006034:	2000146c 	.word	0x2000146c
 8006038:	200011e0 	.word	0x200011e0
 800603c:	20001aa0 	.word	0x20001aa0
 8006040:	20001c80 	.word	0x20001c80
 8006044:	200011b4 	.word	0x200011b4
 8006048:	2000129c 	.word	0x2000129c
 800604c:	200020f4 	.word	0x200020f4
 8006050:	200012ec 	.word	0x200012ec
 8006054:	40021c00 	.word	0x40021c00

08006058 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b0a5      	sub	sp, #148	; 0x94
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	460a      	mov	r2, r1
 8006062:	71fb      	strb	r3, [r7, #7]
 8006064:	4613      	mov	r3, r2
 8006066:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006068:	2300      	movs	r3, #0
 800606a:	64bb      	str	r3, [r7, #72]	; 0x48
 800606c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006070:	2238      	movs	r2, #56	; 0x38
 8006072:	2100      	movs	r1, #0
 8006074:	4618      	mov	r0, r3
 8006076:	f01f f88b 	bl	8025190 <memset>
	uint8_t Temp_Buff[60] = {0,};
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	f107 0310 	add.w	r3, r7, #16
 8006082:	2238      	movs	r2, #56	; 0x38
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f01f f882 	bl	8025190 <memset>
	uint8_t uc_index = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8006092:	2300      	movs	r3, #0
 8006094:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006098:	2300      	movs	r3, #0
 800609a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 800609e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060a6:	441a      	add	r2, r3
 80060a8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060ac:	23f4      	movs	r3, #244	; 0xf4
 80060ae:	2108      	movs	r1, #8
 80060b0:	f7fa fb3c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80060b4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80060b8:	3308      	adds	r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	da00      	bge.n	80060c0 <Send_Status_Message+0x68>
 80060be:	3307      	adds	r3, #7
 80060c0:	10db      	asrs	r3, r3, #3
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060c8:	4413      	add	r3, r2
 80060ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060d2:	3308      	adds	r3, #8
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	b21b      	sxth	r3, r3
 80060d8:	425a      	negs	r2, r3
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	f002 0207 	and.w	r2, r2, #7
 80060e2:	bf58      	it	pl
 80060e4:	4253      	negpl	r3, r2
 80060e6:	b21b      	sxth	r3, r3
 80060e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80060ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060f4:	441a      	add	r2, r3
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	49bc      	ldr	r1, [pc, #752]	; (80063ec <Send_Status_Message+0x394>)
 80060fa:	3366      	adds	r3, #102	; 0x66
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006106:	2110      	movs	r1, #16
 8006108:	f7fa fb10 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800610c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006110:	3310      	adds	r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	da00      	bge.n	8006118 <Send_Status_Message+0xc0>
 8006116:	3307      	adds	r3, #7
 8006118:	10db      	asrs	r3, r3, #3
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006120:	4413      	add	r3, r2
 8006122:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006126:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800612a:	3310      	adds	r3, #16
 800612c:	b29b      	uxth	r3, r3
 800612e:	b21b      	sxth	r3, r3
 8006130:	425a      	negs	r2, r3
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	f002 0207 	and.w	r2, r2, #7
 800613a:	bf58      	it	pl
 800613c:	4253      	negpl	r3, r2
 800613e:	b21b      	sxth	r3, r3
 8006140:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8006144:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006148:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800614c:	441a      	add	r2, r3
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	49a6      	ldr	r1, [pc, #664]	; (80063ec <Send_Status_Message+0x394>)
 8006152:	3370      	adds	r3, #112	; 0x70
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800615e:	2110      	movs	r1, #16
 8006160:	f7fa fae4 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006164:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006168:	3310      	adds	r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	da00      	bge.n	8006170 <Send_Status_Message+0x118>
 800616e:	3307      	adds	r3, #7
 8006170:	10db      	asrs	r3, r3, #3
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006178:	4413      	add	r3, r2
 800617a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800617e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006182:	3310      	adds	r3, #16
 8006184:	b29b      	uxth	r3, r3
 8006186:	b21b      	sxth	r3, r3
 8006188:	425a      	negs	r2, r3
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	f002 0207 	and.w	r2, r2, #7
 8006192:	bf58      	it	pl
 8006194:	4253      	negpl	r3, r2
 8006196:	b21b      	sxth	r3, r3
 8006198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800619c:	4b94      	ldr	r3, [pc, #592]	; (80063f0 <Send_Status_Message+0x398>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	089b      	lsrs	r3, r3, #2
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d035      	beq.n	8006216 <Send_Status_Message+0x1be>
 80061aa:	4b91      	ldr	r3, [pc, #580]	; (80063f0 <Send_Status_Message+0x398>)
 80061ac:	791b      	ldrb	r3, [r3, #4]
 80061ae:	79fa      	ldrb	r2, [r7, #7]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d130      	bne.n	8006216 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 80061ba:	488e      	ldr	r0, [pc, #568]	; (80063f4 <Send_Status_Message+0x39c>)
 80061bc:	f016 fd78 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b8d      	ldr	r3, [pc, #564]	; (80063f8 <Send_Status_Message+0x3a0>)
 80061c4:	fba3 1302 	umull	r1, r3, r3, r2
 80061c8:	099b      	lsrs	r3, r3, #6
 80061ca:	21c8      	movs	r1, #200	; 0xc8
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 80061d6:	4889      	ldr	r0, [pc, #548]	; (80063fc <Send_Status_Message+0x3a4>)
 80061d8:	f01f f95e 	bl	8025498 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	4a88      	ldr	r2, [pc, #544]	; (8006400 <Send_Status_Message+0x3a8>)
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	4413      	add	r3, r2
 80061e4:	3301      	adds	r3, #1
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	4886      	ldr	r0, [pc, #536]	; (8006404 <Send_Status_Message+0x3ac>)
 80061ec:	f01f f8b8 	bl	8025360 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80061f0:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80061f4:	4619      	mov	r1, r3
 80061f6:	4884      	ldr	r0, [pc, #528]	; (8006408 <Send_Status_Message+0x3b0>)
 80061f8:	f01f f8b2 	bl	8025360 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 80061fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006200:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006204:	441a      	add	r2, r3
 8006206:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800620a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800620e:	2108      	movs	r1, #8
 8006210:	f7fa fa8c 	bl	800072c <InsertBits>
	{
 8006214:	e00f      	b.n	8006236 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8006216:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800621a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800621e:	441a      	add	r2, r3
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	4977      	ldr	r1, [pc, #476]	; (8006400 <Send_Status_Message+0x3a8>)
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	440b      	add	r3, r1
 8006228:	3301      	adds	r3, #1
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006230:	2108      	movs	r1, #8
 8006232:	f7fa fa7b 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8006236:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800623a:	3308      	adds	r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	da00      	bge.n	8006242 <Send_Status_Message+0x1ea>
 8006240:	3307      	adds	r3, #7
 8006242:	10db      	asrs	r3, r3, #3
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800624a:	4413      	add	r3, r2
 800624c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006250:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006254:	3308      	adds	r3, #8
 8006256:	b29b      	uxth	r3, r3
 8006258:	b21b      	sxth	r3, r3
 800625a:	425a      	negs	r2, r3
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	f002 0207 	and.w	r2, r2, #7
 8006264:	bf58      	it	pl
 8006266:	4253      	negpl	r3, r2
 8006268:	b21b      	sxth	r3, r3
 800626a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800626e:	4b60      	ldr	r3, [pc, #384]	; (80063f0 <Send_Status_Message+0x398>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	08db      	lsrs	r3, r3, #3
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d038      	beq.n	80062ee <Send_Status_Message+0x296>
 800627c:	4b5c      	ldr	r3, [pc, #368]	; (80063f0 <Send_Status_Message+0x398>)
 800627e:	791b      	ldrb	r3, [r3, #4]
 8006280:	79fa      	ldrb	r2, [r7, #7]
 8006282:	429a      	cmp	r2, r3
 8006284:	d133      	bne.n	80062ee <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800628c:	4859      	ldr	r0, [pc, #356]	; (80063f4 <Send_Status_Message+0x39c>)
 800628e:	f016 fd0f 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8006292:	4602      	mov	r2, r0
 8006294:	4b58      	ldr	r3, [pc, #352]	; (80063f8 <Send_Status_Message+0x3a0>)
 8006296:	fba3 1302 	umull	r1, r3, r3, r2
 800629a:	099b      	lsrs	r3, r3, #6
 800629c:	21c8      	movs	r1, #200	; 0xc8
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 80062a8:	4858      	ldr	r0, [pc, #352]	; (800640c <Send_Status_Message+0x3b4>)
 80062aa:	f01f f8f5 	bl	8025498 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	4a53      	ldr	r2, [pc, #332]	; (8006400 <Send_Status_Message+0x3a8>)
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	4413      	add	r3, r2
 80062b6:	3302      	adds	r3, #2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	4854      	ldr	r0, [pc, #336]	; (8006410 <Send_Status_Message+0x3b8>)
 80062be:	f01f f84f 	bl	8025360 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80062c2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80062c6:	4619      	mov	r1, r3
 80062c8:	4852      	ldr	r0, [pc, #328]	; (8006414 <Send_Status_Message+0x3bc>)
 80062ca:	f01f f849 	bl	8025360 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80062ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062d6:	441a      	add	r2, r3
 80062d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80062dc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062e0:	2108      	movs	r1, #8
 80062e2:	f7fa fa23 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 80062e6:	4b4c      	ldr	r3, [pc, #304]	; (8006418 <Send_Status_Message+0x3c0>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
	{
 80062ec:	e020      	b.n	8006330 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 80062ee:	4b4a      	ldr	r3, [pc, #296]	; (8006418 <Send_Status_Message+0x3c0>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80062f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062fc:	18d1      	adds	r1, r2, r3
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	483f      	ldr	r0, [pc, #252]	; (8006400 <Send_Status_Message+0x3a8>)
 8006302:	011a      	lsls	r2, r3, #4
 8006304:	4402      	add	r2, r0
 8006306:	3202      	adds	r2, #2
 8006308:	7812      	ldrb	r2, [r2, #0]
 800630a:	3201      	adds	r2, #1
 800630c:	b2d4      	uxtb	r4, r2
 800630e:	483c      	ldr	r0, [pc, #240]	; (8006400 <Send_Status_Message+0x3a8>)
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	4402      	add	r2, r0
 8006314:	3202      	adds	r2, #2
 8006316:	4620      	mov	r0, r4
 8006318:	7010      	strb	r0, [r2, #0]
 800631a:	4a39      	ldr	r2, [pc, #228]	; (8006400 <Send_Status_Message+0x3a8>)
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	4413      	add	r3, r2
 8006320:	3302      	adds	r3, #2
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006328:	460a      	mov	r2, r1
 800632a:	2108      	movs	r1, #8
 800632c:	f7fa f9fe 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006330:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006334:	3308      	adds	r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	da00      	bge.n	800633c <Send_Status_Message+0x2e4>
 800633a:	3307      	adds	r3, #7
 800633c:	10db      	asrs	r3, r3, #3
 800633e:	b29a      	uxth	r2, r3
 8006340:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006344:	4413      	add	r3, r2
 8006346:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800634a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800634e:	3308      	adds	r3, #8
 8006350:	b29b      	uxth	r3, r3
 8006352:	b21b      	sxth	r3, r3
 8006354:	425a      	negs	r2, r3
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	f002 0207 	and.w	r2, r2, #7
 800635e:	bf58      	it	pl
 8006360:	4253      	negpl	r3, r2
 8006362:	b21b      	sxth	r3, r3
 8006364:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006368:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800636c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006370:	441a      	add	r2, r3
 8006372:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006376:	2304      	movs	r3, #4
 8006378:	2108      	movs	r1, #8
 800637a:	f7fa f9d7 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800637e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006382:	3308      	adds	r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	da00      	bge.n	800638a <Send_Status_Message+0x332>
 8006388:	3307      	adds	r3, #7
 800638a:	10db      	asrs	r3, r3, #3
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006392:	4413      	add	r3, r2
 8006394:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006398:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800639c:	3308      	adds	r3, #8
 800639e:	b29b      	uxth	r3, r3
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	425a      	negs	r2, r3
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	f002 0207 	and.w	r2, r2, #7
 80063ac:	bf58      	it	pl
 80063ae:	4253      	negpl	r3, r2
 80063b0:	b21b      	sxth	r3, r3
 80063b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	4a11      	ldr	r2, [pc, #68]	; (8006400 <Send_Status_Message+0x3a8>)
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	4413      	add	r3, r2
 80063be:	3304      	adds	r3, #4
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d052      	beq.n	8006470 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	4a13      	ldr	r2, [pc, #76]	; (800641c <Send_Status_Message+0x3c4>)
 80063ce:	5cd3      	ldrb	r3, [r2, r3]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d125      	bne.n	8006420 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 80063d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063dc:	441a      	add	r2, r3
 80063de:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063e2:	2368      	movs	r3, #104	; 0x68
 80063e4:	2110      	movs	r1, #16
 80063e6:	f7fa f9a1 	bl	800072c <InsertBits>
 80063ea:	e024      	b.n	8006436 <Send_Status_Message+0x3de>
 80063ec:	20000304 	.word	0x20000304
 80063f0:	20001d88 	.word	0x20001d88
 80063f4:	2000a9e0 	.word	0x2000a9e0
 80063f8:	51eb851f 	.word	0x51eb851f
 80063fc:	08026eb4 	.word	0x08026eb4
 8006400:	200015f0 	.word	0x200015f0
 8006404:	080274cc 	.word	0x080274cc
 8006408:	080274ec 	.word	0x080274ec
 800640c:	08026f18 	.word	0x08026f18
 8006410:	0802750c 	.word	0x0802750c
 8006414:	0802752c 	.word	0x0802752c
 8006418:	200011a9 	.word	0x200011a9
 800641c:	20001460 	.word	0x20001460
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006420:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006424:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006428:	441a      	add	r2, r3
 800642a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800642e:	2328      	movs	r3, #40	; 0x28
 8006430:	2110      	movs	r1, #16
 8006432:	f7fa f97b 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006436:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800643a:	3310      	adds	r3, #16
 800643c:	2b00      	cmp	r3, #0
 800643e:	da00      	bge.n	8006442 <Send_Status_Message+0x3ea>
 8006440:	3307      	adds	r3, #7
 8006442:	10db      	asrs	r3, r3, #3
 8006444:	b29a      	uxth	r2, r3
 8006446:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800644a:	4413      	add	r3, r2
 800644c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006450:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006454:	3310      	adds	r3, #16
 8006456:	b29b      	uxth	r3, r3
 8006458:	b21b      	sxth	r3, r3
 800645a:	425a      	negs	r2, r3
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	f002 0207 	and.w	r2, r2, #7
 8006464:	bf58      	it	pl
 8006466:	4253      	negpl	r3, r2
 8006468:	b21b      	sxth	r3, r3
 800646a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800646e:	e03a      	b.n	80064e6 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	4a08      	ldr	r2, [pc, #32]	; (8006494 <Send_Status_Message+0x43c>)
 8006474:	5cd3      	ldrb	r3, [r2, r3]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10e      	bne.n	8006498 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 800647a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800647e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006482:	441a      	add	r2, r3
 8006484:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006488:	2364      	movs	r3, #100	; 0x64
 800648a:	2110      	movs	r1, #16
 800648c:	f7fa f94e 	bl	800072c <InsertBits>
 8006490:	e00d      	b.n	80064ae <Send_Status_Message+0x456>
 8006492:	bf00      	nop
 8006494:	20001460 	.word	0x20001460
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006498:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800649c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80064a0:	441a      	add	r2, r3
 80064a2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80064a6:	2324      	movs	r3, #36	; 0x24
 80064a8:	2110      	movs	r1, #16
 80064aa:	f7fa f93f 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80064ae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80064b2:	3310      	adds	r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da00      	bge.n	80064ba <Send_Status_Message+0x462>
 80064b8:	3307      	adds	r3, #7
 80064ba:	10db      	asrs	r3, r3, #3
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80064c2:	4413      	add	r3, r2
 80064c4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064cc:	3310      	adds	r3, #16
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	b21b      	sxth	r3, r3
 80064d2:	425a      	negs	r2, r3
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	f002 0207 	and.w	r2, r2, #7
 80064dc:	bf58      	it	pl
 80064de:	4253      	negpl	r3, r2
 80064e0:	b21b      	sxth	r3, r3
 80064e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	4ac6      	ldr	r2, [pc, #792]	; (8006804 <Send_Status_Message+0x7ac>)
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	4413      	add	r3, r2
 80064ee:	3304      	adds	r3, #4
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8139 	beq.w	8006772 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	4ac1      	ldr	r2, [pc, #772]	; (8006808 <Send_Status_Message+0x7b0>)
 8006504:	5cd3      	ldrb	r3, [r2, r3]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d114      	bne.n	8006534 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800650a:	f005 ff35 	bl	800c378 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800650e:	79fa      	ldrb	r2, [r7, #7]
 8006510:	4613      	mov	r3, r2
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	4413      	add	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	4abc      	ldr	r2, [pc, #752]	; (800680c <Send_Status_Message+0x7b4>)
 800651a:	4413      	add	r3, r2
 800651c:	4abc      	ldr	r2, [pc, #752]	; (8006810 <Send_Status_Message+0x7b8>)
 800651e:	6811      	ldr	r1, [r2, #0]
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	8892      	ldrh	r2, [r2, #4]
 8006524:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006526:	48bb      	ldr	r0, [pc, #748]	; (8006814 <Send_Status_Message+0x7bc>)
 8006528:	f01e ffb6 	bl	8025498 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	4ab6      	ldr	r2, [pc, #728]	; (8006808 <Send_Status_Message+0x7b0>)
 8006530:	2100      	movs	r1, #0
 8006532:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006534:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006538:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800653c:	18d1      	adds	r1, r2, r3
 800653e:	79fa      	ldrb	r2, [r7, #7]
 8006540:	48b2      	ldr	r0, [pc, #712]	; (800680c <Send_Status_Message+0x7b4>)
 8006542:	4613      	mov	r3, r2
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	4413      	add	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4403      	add	r3, r0
 800654c:	3305      	adds	r3, #5
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006554:	460a      	mov	r2, r1
 8006556:	2108      	movs	r1, #8
 8006558:	f7fa f8e8 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800655c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006560:	3308      	adds	r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	da00      	bge.n	8006568 <Send_Status_Message+0x510>
 8006566:	3307      	adds	r3, #7
 8006568:	10db      	asrs	r3, r3, #3
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006570:	4413      	add	r3, r2
 8006572:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006576:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800657a:	3308      	adds	r3, #8
 800657c:	b29b      	uxth	r3, r3
 800657e:	b21b      	sxth	r3, r3
 8006580:	425a      	negs	r2, r3
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	f002 0207 	and.w	r2, r2, #7
 800658a:	bf58      	it	pl
 800658c:	4253      	negpl	r3, r2
 800658e:	b21b      	sxth	r3, r3
 8006590:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8006594:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006598:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800659c:	18d1      	adds	r1, r2, r3
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	489a      	ldr	r0, [pc, #616]	; (800680c <Send_Status_Message+0x7b4>)
 80065a2:	4613      	mov	r3, r2
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	4413      	add	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4403      	add	r3, r0
 80065ac:	3304      	adds	r3, #4
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80065b4:	460a      	mov	r2, r1
 80065b6:	2108      	movs	r1, #8
 80065b8:	f7fa f8b8 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80065bc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065c0:	3308      	adds	r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da00      	bge.n	80065c8 <Send_Status_Message+0x570>
 80065c6:	3307      	adds	r3, #7
 80065c8:	10db      	asrs	r3, r3, #3
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065d0:	4413      	add	r3, r2
 80065d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80065d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065da:	3308      	adds	r3, #8
 80065dc:	b29b      	uxth	r3, r3
 80065de:	b21b      	sxth	r3, r3
 80065e0:	425a      	negs	r2, r3
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	f002 0207 	and.w	r2, r2, #7
 80065ea:	bf58      	it	pl
 80065ec:	4253      	negpl	r3, r2
 80065ee:	b21b      	sxth	r3, r3
 80065f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 80065f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80065fc:	18d1      	adds	r1, r2, r3
 80065fe:	79fa      	ldrb	r2, [r7, #7]
 8006600:	4882      	ldr	r0, [pc, #520]	; (800680c <Send_Status_Message+0x7b4>)
 8006602:	4613      	mov	r3, r2
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4413      	add	r3, r2
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	4403      	add	r3, r0
 800660c:	3303      	adds	r3, #3
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006614:	460a      	mov	r2, r1
 8006616:	2108      	movs	r1, #8
 8006618:	f7fa f888 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800661c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006620:	3308      	adds	r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	da00      	bge.n	8006628 <Send_Status_Message+0x5d0>
 8006626:	3307      	adds	r3, #7
 8006628:	10db      	asrs	r3, r3, #3
 800662a:	b29a      	uxth	r2, r3
 800662c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006630:	4413      	add	r3, r2
 8006632:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006636:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800663a:	3308      	adds	r3, #8
 800663c:	b29b      	uxth	r3, r3
 800663e:	b21b      	sxth	r3, r3
 8006640:	425a      	negs	r2, r3
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	f002 0207 	and.w	r2, r2, #7
 800664a:	bf58      	it	pl
 800664c:	4253      	negpl	r3, r2
 800664e:	b21b      	sxth	r3, r3
 8006650:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006654:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006658:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800665c:	18d1      	adds	r1, r2, r3
 800665e:	79fa      	ldrb	r2, [r7, #7]
 8006660:	486a      	ldr	r0, [pc, #424]	; (800680c <Send_Status_Message+0x7b4>)
 8006662:	4613      	mov	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4413      	add	r3, r2
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	4403      	add	r3, r0
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006672:	460a      	mov	r2, r1
 8006674:	2108      	movs	r1, #8
 8006676:	f7fa f859 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800667a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800667e:	3308      	adds	r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	da00      	bge.n	8006686 <Send_Status_Message+0x62e>
 8006684:	3307      	adds	r3, #7
 8006686:	10db      	asrs	r3, r3, #3
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800668e:	4413      	add	r3, r2
 8006690:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006694:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006698:	3308      	adds	r3, #8
 800669a:	b29b      	uxth	r3, r3
 800669c:	b21b      	sxth	r3, r3
 800669e:	425a      	negs	r2, r3
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	f002 0207 	and.w	r2, r2, #7
 80066a8:	bf58      	it	pl
 80066aa:	4253      	negpl	r3, r2
 80066ac:	b21b      	sxth	r3, r3
 80066ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80066b2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80066b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066ba:	18d1      	adds	r1, r2, r3
 80066bc:	79fa      	ldrb	r2, [r7, #7]
 80066be:	4853      	ldr	r0, [pc, #332]	; (800680c <Send_Status_Message+0x7b4>)
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	4403      	add	r3, r0
 80066ca:	3301      	adds	r3, #1
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80066d2:	460a      	mov	r2, r1
 80066d4:	2108      	movs	r1, #8
 80066d6:	f7fa f829 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80066da:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80066de:	3308      	adds	r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	da00      	bge.n	80066e6 <Send_Status_Message+0x68e>
 80066e4:	3307      	adds	r3, #7
 80066e6:	10db      	asrs	r3, r3, #3
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80066ee:	4413      	add	r3, r2
 80066f0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80066f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066f8:	3308      	adds	r3, #8
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	b21b      	sxth	r3, r3
 80066fe:	425a      	negs	r2, r3
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	f002 0207 	and.w	r2, r2, #7
 8006708:	bf58      	it	pl
 800670a:	4253      	negpl	r3, r2
 800670c:	b21b      	sxth	r3, r3
 800670e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006712:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006716:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800671a:	18d1      	adds	r1, r2, r3
 800671c:	79fa      	ldrb	r2, [r7, #7]
 800671e:	483b      	ldr	r0, [pc, #236]	; (800680c <Send_Status_Message+0x7b4>)
 8006720:	4613      	mov	r3, r2
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	4413      	add	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	4403      	add	r3, r0
 800672a:	3302      	adds	r3, #2
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006732:	460a      	mov	r2, r1
 8006734:	2108      	movs	r1, #8
 8006736:	f7f9 fff9 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800673a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800673e:	3308      	adds	r3, #8
 8006740:	2b00      	cmp	r3, #0
 8006742:	da00      	bge.n	8006746 <Send_Status_Message+0x6ee>
 8006744:	3307      	adds	r3, #7
 8006746:	10db      	asrs	r3, r3, #3
 8006748:	b29a      	uxth	r2, r3
 800674a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800674e:	4413      	add	r3, r2
 8006750:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006754:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006758:	3308      	adds	r3, #8
 800675a:	b29b      	uxth	r3, r3
 800675c:	b21b      	sxth	r3, r3
 800675e:	425a      	negs	r2, r3
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	f002 0207 	and.w	r2, r2, #7
 8006768:	bf58      	it	pl
 800676a:	4253      	negpl	r3, r2
 800676c:	b21b      	sxth	r3, r3
 800676e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006772:	4b29      	ldr	r3, [pc, #164]	; (8006818 <Send_Status_Message+0x7c0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d031      	beq.n	80067e4 <Send_Status_Message+0x78c>
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <Send_Status_Message+0x7c0>)
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	79fa      	ldrb	r2, [r7, #7]
 8006786:	429a      	cmp	r2, r3
 8006788:	d12c      	bne.n	80067e4 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006790:	4822      	ldr	r0, [pc, #136]	; (800681c <Send_Status_Message+0x7c4>)
 8006792:	f016 fa8d 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8006796:	4602      	mov	r2, r0
 8006798:	4b21      	ldr	r3, [pc, #132]	; (8006820 <Send_Status_Message+0x7c8>)
 800679a:	fba3 1302 	umull	r1, r3, r3, r2
 800679e:	0dd9      	lsrs	r1, r3, #23
 80067a0:	460b      	mov	r3, r1
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	1a5b      	subs	r3, r3, r1
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80067ae:	481d      	ldr	r0, [pc, #116]	; (8006824 <Send_Status_Message+0x7cc>)
 80067b0:	f01e fe72 	bl	8025498 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	4a13      	ldr	r2, [pc, #76]	; (8006804 <Send_Status_Message+0x7ac>)
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	4413      	add	r3, r2
 80067bc:	330c      	adds	r3, #12
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4619      	mov	r1, r3
 80067c2:	4819      	ldr	r0, [pc, #100]	; (8006828 <Send_Status_Message+0x7d0>)
 80067c4:	f01e fdcc 	bl	8025360 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 80067c8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80067cc:	4817      	ldr	r0, [pc, #92]	; (800682c <Send_Status_Message+0x7d4>)
 80067ce:	f01e fdc7 	bl	8025360 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 80067d2:	f107 020c 	add.w	r2, r7, #12
 80067d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067da:	2118      	movs	r1, #24
 80067dc:	2000      	movs	r0, #0
 80067de:	f7f9 ffa5 	bl	800072c <InsertBits>
	{
 80067e2:	e00b      	b.n	80067fc <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	4a07      	ldr	r2, [pc, #28]	; (8006804 <Send_Status_Message+0x7ac>)
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	4413      	add	r3, r2
 80067ec:	330c      	adds	r3, #12
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f107 020c 	add.w	r2, r7, #12
 80067f4:	2118      	movs	r1, #24
 80067f6:	2000      	movs	r0, #0
 80067f8:	f7f9 ff98 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006802:	e027      	b.n	8006854 <Send_Status_Message+0x7fc>
 8006804:	200015f0 	.word	0x200015f0
 8006808:	20001460 	.word	0x20001460
 800680c:	200015b4 	.word	0x200015b4
 8006810:	20002ce0 	.word	0x20002ce0
 8006814:	08027270 	.word	0x08027270
 8006818:	20001d88 	.word	0x20001d88
 800681c:	2000a9e0 	.word	0x2000a9e0
 8006820:	80008001 	.word	0x80008001
 8006824:	08027288 	.word	0x08027288
 8006828:	080272ac 	.word	0x080272ac
 800682c:	080272d0 	.word	0x080272d0
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006830:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006834:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006838:	3303      	adds	r3, #3
 800683a:	3290      	adds	r2, #144	; 0x90
 800683c:	443a      	add	r2, r7
 800683e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006842:	3390      	adds	r3, #144	; 0x90
 8006844:	443b      	add	r3, r7
 8006846:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800684a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800684e:	3301      	adds	r3, #1
 8006850:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006854:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006858:	b29b      	uxth	r3, r3
 800685a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800685e:	429a      	cmp	r2, r3
 8006860:	d8e6      	bhi.n	8006830 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006862:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006866:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800686a:	18d4      	adds	r4, r2, r3
 800686c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006870:	b29b      	uxth	r3, r3
 8006872:	3303      	adds	r3, #3
 8006874:	b29a      	uxth	r2, r3
 8006876:	f107 030c 	add.w	r3, r7, #12
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f00e f819 	bl	80148b4 <CalculateDirectReverseCrc>
 8006882:	4603      	mov	r3, r0
 8006884:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006888:	4622      	mov	r2, r4
 800688a:	2120      	movs	r1, #32
 800688c:	f7f9 ff4e 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006890:	4b1f      	ldr	r3, [pc, #124]	; (8006910 <Send_Status_Message+0x8b8>)
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 8006896:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800689a:	3320      	adds	r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	da00      	bge.n	80068a2 <Send_Status_Message+0x84a>
 80068a0:	3307      	adds	r3, #7
 80068a2:	10db      	asrs	r3, r3, #3
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068aa:	4413      	add	r3, r2
 80068ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80068b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068b4:	3320      	adds	r3, #32
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	425a      	negs	r2, r3
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	f002 0207 	and.w	r2, r2, #7
 80068c4:	bf58      	it	pl
 80068c6:	4253      	negpl	r3, r2
 80068c8:	b21b      	sxth	r3, r3
 80068ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <Send_Status_Message+0x8bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	0a5b      	lsrs	r3, r3, #9
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <Send_Status_Message+0x89c>
 80068dc:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <Send_Status_Message+0x8bc>)
 80068de:	791b      	ldrb	r3, [r3, #4]
 80068e0:	79fa      	ldrb	r2, [r7, #7]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d106      	bne.n	80068f4 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 80068e6:	480c      	ldr	r0, [pc, #48]	; (8006918 <Send_Status_Message+0x8c0>)
 80068e8:	f01e fdd6 	bl	8025498 <puts>
		printf("Not Sending Reply");
 80068ec:	480b      	ldr	r0, [pc, #44]	; (800691c <Send_Status_Message+0x8c4>)
 80068ee:	f01e fd37 	bl	8025360 <iprintf>
 80068f2:	e009      	b.n	8006908 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 80068f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068f8:	b2d9      	uxtb	r1, r3
 80068fa:	79fa      	ldrb	r2, [r7, #7]
 80068fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006900:	4618      	mov	r0, r3
 8006902:	f001 f82d 	bl	8007960 <Process_Sending_Reply>
	}
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	3794      	adds	r7, #148	; 0x94
 800690c:	46bd      	mov	sp, r7
 800690e:	bd90      	pop	{r4, r7, pc}
 8006910:	200011a9 	.word	0x200011a9
 8006914:	20001d88 	.word	0x20001d88
 8006918:	08026fe4 	.word	0x08026fe4
 800691c:	08026ffc 	.word	0x08026ffc

08006920 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	4608      	mov	r0, r1
 800692a:	4611      	mov	r1, r2
 800692c:	461a      	mov	r2, r3
 800692e:	4603      	mov	r3, r0
 8006930:	70fb      	strb	r3, [r7, #3]
 8006932:	460b      	mov	r3, r1
 8006934:	70bb      	strb	r3, [r7, #2]
 8006936:	4613      	mov	r3, r2
 8006938:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = RESET;
 8006942:	2300      	movs	r3, #0
 8006944:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006946:	f011 fd01 	bl	801834c <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 800694c:	2300      	movs	r3, #0
 800694e:	81fb      	strh	r3, [r7, #14]
 8006950:	2300      	movs	r3, #0
 8006952:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b05      	subs	r3, #5
 800695a:	b29b      	uxth	r3, r3
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f00d ffa8 	bl	80148b4 <CalculateDirectReverseCrc>
 8006964:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	3b05      	subs	r3, #5
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	441a      	add	r2, r3
 800696e:	89bb      	ldrh	r3, [r7, #12]
 8006970:	2120      	movs	r1, #32
 8006972:	4618      	mov	r0, r3
 8006974:	f7f9 fe4e 	bl	8000614 <ExtractBits>
 8006978:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	429a      	cmp	r2, r3
 8006980:	d01c      	beq.n	80069bc <Service_Msg_Extr+0x9c>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8006982:	78bb      	ldrb	r3, [r7, #2]
 8006984:	4a09      	ldr	r2, [pc, #36]	; (80069ac <Service_Msg_Extr+0x8c>)
 8006986:	3366      	adds	r3, #102	; 0x66
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4619      	mov	r1, r3
 8006990:	4807      	ldr	r0, [pc, #28]	; (80069b0 <Service_Msg_Extr+0x90>)
 8006992:	f01e fce5 	bl	8025360 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	4806      	ldr	r0, [pc, #24]	; (80069b4 <Service_Msg_Extr+0x94>)
 800699a:	f01e fce1 	bl	8025360 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 800699e:	69b9      	ldr	r1, [r7, #24]
 80069a0:	4805      	ldr	r0, [pc, #20]	; (80069b8 <Service_Msg_Extr+0x98>)
 80069a2:	f01e fcdd 	bl	8025360 <iprintf>
		return;
 80069a6:	f000 bc0e 	b.w	80071c6 <Service_Msg_Extr+0x8a6>
 80069aa:	bf00      	nop
 80069ac:	20000304 	.word	0x20000304
 80069b0:	08027550 	.word	0x08027550
 80069b4:	08026d50 	.word	0x08026d50
 80069b8:	08026d60 	.word	0x08026d60
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80069bc:	78bb      	ldrb	r3, [r7, #2]
 80069be:	49ae      	ldr	r1, [pc, #696]	; (8006c78 <Service_Msg_Extr+0x358>)
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80069c6:	78bb      	ldrb	r3, [r7, #2]
 80069c8:	49ac      	ldr	r1, [pc, #688]	; (8006c7c <Service_Msg_Extr+0x35c>)
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80069d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069d4:	3308      	adds	r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da00      	bge.n	80069dc <Service_Msg_Extr+0xbc>
 80069da:	3307      	adds	r3, #7
 80069dc:	10db      	asrs	r3, r3, #3
 80069de:	b29a      	uxth	r2, r3
 80069e0:	89fb      	ldrh	r3, [r7, #14]
 80069e2:	4413      	add	r3, r2
 80069e4:	81fb      	strh	r3, [r7, #14]
 80069e6:	89bb      	ldrh	r3, [r7, #12]
 80069e8:	3308      	adds	r3, #8
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	b21b      	sxth	r3, r3
 80069ee:	425a      	negs	r2, r3
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	f002 0207 	and.w	r2, r2, #7
 80069f8:	bf58      	it	pl
 80069fa:	4253      	negpl	r3, r2
 80069fc:	b21b      	sxth	r3, r3
 80069fe:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006a00:	89fb      	ldrh	r3, [r7, #14]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	441a      	add	r2, r3
 8006a06:	89bb      	ldrh	r3, [r7, #12]
 8006a08:	2110      	movs	r1, #16
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7f9 fe02 	bl	8000614 <ExtractBits>
 8006a10:	4603      	mov	r3, r0
 8006a12:	78ba      	ldrb	r2, [r7, #2]
 8006a14:	b298      	uxth	r0, r3
 8006a16:	499a      	ldr	r1, [pc, #616]	; (8006c80 <Service_Msg_Extr+0x360>)
 8006a18:	4613      	mov	r3, r2
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	3306      	adds	r3, #6
 8006a24:	4602      	mov	r2, r0
 8006a26:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006a28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	da00      	bge.n	8006a34 <Service_Msg_Extr+0x114>
 8006a32:	3307      	adds	r3, #7
 8006a34:	10db      	asrs	r3, r3, #3
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	89fb      	ldrh	r3, [r7, #14]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	81fb      	strh	r3, [r7, #14]
 8006a3e:	89bb      	ldrh	r3, [r7, #12]
 8006a40:	3310      	adds	r3, #16
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	b21b      	sxth	r3, r3
 8006a46:	425a      	negs	r2, r3
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	f002 0207 	and.w	r2, r2, #7
 8006a50:	bf58      	it	pl
 8006a52:	4253      	negpl	r3, r2
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006a58:	89fb      	ldrh	r3, [r7, #14]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	441a      	add	r2, r3
 8006a5e:	89bb      	ldrh	r3, [r7, #12]
 8006a60:	2110      	movs	r1, #16
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7f9 fdd6 	bl	8000614 <ExtractBits>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	78ba      	ldrb	r2, [r7, #2]
 8006a6c:	b298      	uxth	r0, r3
 8006a6e:	4984      	ldr	r1, [pc, #528]	; (8006c80 <Service_Msg_Extr+0x360>)
 8006a70:	4613      	mov	r3, r2
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8006a80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a84:	3310      	adds	r3, #16
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da00      	bge.n	8006a8c <Service_Msg_Extr+0x16c>
 8006a8a:	3307      	adds	r3, #7
 8006a8c:	10db      	asrs	r3, r3, #3
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	4413      	add	r3, r2
 8006a94:	81fb      	strh	r3, [r7, #14]
 8006a96:	89bb      	ldrh	r3, [r7, #12]
 8006a98:	3310      	adds	r3, #16
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	b21b      	sxth	r3, r3
 8006a9e:	425a      	negs	r2, r3
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	f002 0207 	and.w	r2, r2, #7
 8006aa8:	bf58      	it	pl
 8006aaa:	4253      	negpl	r3, r2
 8006aac:	b21b      	sxth	r3, r3
 8006aae:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ab0:	89fb      	ldrh	r3, [r7, #14]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	441a      	add	r2, r3
 8006ab6:	89bb      	ldrh	r3, [r7, #12]
 8006ab8:	2108      	movs	r1, #8
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7f9 fdaa 	bl	8000614 <ExtractBits>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	78bb      	ldrb	r3, [r7, #2]
 8006ac4:	b2d1      	uxtb	r1, r2
 8006ac6:	4a6f      	ldr	r2, [pc, #444]	; (8006c84 <Service_Msg_Extr+0x364>)
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	4413      	add	r3, r2
 8006acc:	3302      	adds	r3, #2
 8006ace:	460a      	mov	r2, r1
 8006ad0:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8006ad2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	da00      	bge.n	8006ade <Service_Msg_Extr+0x1be>
 8006adc:	3307      	adds	r3, #7
 8006ade:	10db      	asrs	r3, r3, #3
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	89fb      	ldrh	r3, [r7, #14]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	81fb      	strh	r3, [r7, #14]
 8006ae8:	89bb      	ldrh	r3, [r7, #12]
 8006aea:	3308      	adds	r3, #8
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	425a      	negs	r2, r3
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	f002 0207 	and.w	r2, r2, #7
 8006afa:	bf58      	it	pl
 8006afc:	4253      	negpl	r3, r2
 8006afe:	b21b      	sxth	r3, r3
 8006b00:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b02:	89fb      	ldrh	r3, [r7, #14]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	441a      	add	r2, r3
 8006b08:	89bb      	ldrh	r3, [r7, #12]
 8006b0a:	2108      	movs	r1, #8
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7f9 fd81 	bl	8000614 <ExtractBits>
 8006b12:	4602      	mov	r2, r0
 8006b14:	78bb      	ldrb	r3, [r7, #2]
 8006b16:	b2d1      	uxtb	r1, r2
 8006b18:	4a5a      	ldr	r2, [pc, #360]	; (8006c84 <Service_Msg_Extr+0x364>)
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3301      	adds	r3, #1
 8006b20:	460a      	mov	r2, r1
 8006b22:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006b24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da00      	bge.n	8006b30 <Service_Msg_Extr+0x210>
 8006b2e:	3307      	adds	r3, #7
 8006b30:	10db      	asrs	r3, r3, #3
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	89fb      	ldrh	r3, [r7, #14]
 8006b36:	4413      	add	r3, r2
 8006b38:	81fb      	strh	r3, [r7, #14]
 8006b3a:	89bb      	ldrh	r3, [r7, #12]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	425a      	negs	r2, r3
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	f002 0207 	and.w	r2, r2, #7
 8006b4c:	bf58      	it	pl
 8006b4e:	4253      	negpl	r3, r2
 8006b50:	b21b      	sxth	r3, r3
 8006b52:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b54:	89fb      	ldrh	r3, [r7, #14]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	441a      	add	r2, r3
 8006b5a:	89bb      	ldrh	r3, [r7, #12]
 8006b5c:	2108      	movs	r1, #8
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7f9 fd58 	bl	8000614 <ExtractBits>
 8006b64:	4603      	mov	r3, r0
 8006b66:	78ba      	ldrb	r2, [r7, #2]
 8006b68:	b2d8      	uxtb	r0, r3
 8006b6a:	4945      	ldr	r1, [pc, #276]	; (8006c80 <Service_Msg_Extr+0x360>)
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	3302      	adds	r3, #2
 8006b78:	4602      	mov	r2, r0
 8006b7a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006b7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b80:	3308      	adds	r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da00      	bge.n	8006b88 <Service_Msg_Extr+0x268>
 8006b86:	3307      	adds	r3, #7
 8006b88:	10db      	asrs	r3, r3, #3
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	4413      	add	r3, r2
 8006b90:	81fb      	strh	r3, [r7, #14]
 8006b92:	89bb      	ldrh	r3, [r7, #12]
 8006b94:	3308      	adds	r3, #8
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	b21b      	sxth	r3, r3
 8006b9a:	425a      	negs	r2, r3
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	f002 0207 	and.w	r2, r2, #7
 8006ba4:	bf58      	it	pl
 8006ba6:	4253      	negpl	r3, r2
 8006ba8:	b21b      	sxth	r3, r3
 8006baa:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006bac:	89fb      	ldrh	r3, [r7, #14]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	441a      	add	r2, r3
 8006bb2:	89bb      	ldrh	r3, [r7, #12]
 8006bb4:	2110      	movs	r1, #16
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7f9 fd2c 	bl	8000614 <ExtractBits>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	78bb      	ldrb	r3, [r7, #2]
 8006bc0:	b291      	uxth	r1, r2
 8006bc2:	4a30      	ldr	r2, [pc, #192]	; (8006c84 <Service_Msg_Extr+0x364>)
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3304      	adds	r3, #4
 8006bca:	460a      	mov	r2, r1
 8006bcc:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8006bce:	492e      	ldr	r1, [pc, #184]	; (8006c88 <Service_Msg_Extr+0x368>)
 8006bd0:	482e      	ldr	r0, [pc, #184]	; (8006c8c <Service_Msg_Extr+0x36c>)
 8006bd2:	f7f9 fb35 	bl	8000240 <strcmp>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10f      	bne.n	8006bfc <Service_Msg_Extr+0x2dc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8006bdc:	78bb      	ldrb	r3, [r7, #2]
 8006bde:	4a29      	ldr	r2, [pc, #164]	; (8006c84 <Service_Msg_Extr+0x364>)
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	4413      	add	r3, r2
 8006be4:	3304      	adds	r3, #4
 8006be6:	881a      	ldrh	r2, [r3, #0]
 8006be8:	78bb      	ldrb	r3, [r7, #2]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	b291      	uxth	r1, r2
 8006bf0:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <Service_Msg_Extr+0x364>)
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8006bfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c00:	3310      	adds	r3, #16
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da00      	bge.n	8006c08 <Service_Msg_Extr+0x2e8>
 8006c06:	3307      	adds	r3, #7
 8006c08:	10db      	asrs	r3, r3, #3
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	89fb      	ldrh	r3, [r7, #14]
 8006c0e:	4413      	add	r3, r2
 8006c10:	81fb      	strh	r3, [r7, #14]
 8006c12:	89bb      	ldrh	r3, [r7, #12]
 8006c14:	3310      	adds	r3, #16
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	425a      	negs	r2, r3
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	f002 0207 	and.w	r2, r2, #7
 8006c24:	bf58      	it	pl
 8006c26:	4253      	negpl	r3, r2
 8006c28:	b21b      	sxth	r3, r3
 8006c2a:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006c2c:	78bb      	ldrb	r3, [r7, #2]
 8006c2e:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <Service_Msg_Extr+0x364>)
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	4413      	add	r3, r2
 8006c34:	3304      	adds	r3, #4
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8126 	beq.w	8006e8e <Service_Msg_Extr+0x56e>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006c42:	89fb      	ldrh	r3, [r7, #14]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	441a      	add	r2, r3
 8006c48:	89bb      	ldrh	r3, [r7, #12]
 8006c4a:	2108      	movs	r1, #8
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7f9 fce1 	bl	8000614 <ExtractBits>
 8006c52:	4603      	mov	r3, r0
 8006c54:	78ba      	ldrb	r2, [r7, #2]
 8006c56:	b2d8      	uxtb	r0, r3
 8006c58:	490d      	ldr	r1, [pc, #52]	; (8006c90 <Service_Msg_Extr+0x370>)
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4413      	add	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	440b      	add	r3, r1
 8006c64:	3305      	adds	r3, #5
 8006c66:	4602      	mov	r2, r0
 8006c68:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8006c6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da0f      	bge.n	8006c94 <Service_Msg_Extr+0x374>
 8006c74:	3307      	adds	r3, #7
 8006c76:	e00d      	b.n	8006c94 <Service_Msg_Extr+0x374>
 8006c78:	2000132c 	.word	0x2000132c
 8006c7c:	20001354 	.word	0x20001354
 8006c80:	200019b0 	.word	0x200019b0
 8006c84:	200015f0 	.word	0x200015f0
 8006c88:	08026b0c 	.word	0x08026b0c
 8006c8c:	20000305 	.word	0x20000305
 8006c90:	200015b4 	.word	0x200015b4
 8006c94:	10db      	asrs	r3, r3, #3
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	89fb      	ldrh	r3, [r7, #14]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	81fb      	strh	r3, [r7, #14]
 8006c9e:	89bb      	ldrh	r3, [r7, #12]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	b21b      	sxth	r3, r3
 8006ca6:	425a      	negs	r2, r3
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	f002 0207 	and.w	r2, r2, #7
 8006cb0:	bf58      	it	pl
 8006cb2:	4253      	negpl	r3, r2
 8006cb4:	b21b      	sxth	r3, r3
 8006cb6:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006cb8:	89fb      	ldrh	r3, [r7, #14]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	441a      	add	r2, r3
 8006cbe:	89bb      	ldrh	r3, [r7, #12]
 8006cc0:	2108      	movs	r1, #8
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7f9 fca6 	bl	8000614 <ExtractBits>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	78ba      	ldrb	r2, [r7, #2]
 8006ccc:	b2d8      	uxtb	r0, r3
 8006cce:	4989      	ldr	r1, [pc, #548]	; (8006ef4 <Service_Msg_Extr+0x5d4>)
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	4413      	add	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	440b      	add	r3, r1
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4602      	mov	r2, r0
 8006cde:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da00      	bge.n	8006cec <Service_Msg_Extr+0x3cc>
 8006cea:	3307      	adds	r3, #7
 8006cec:	10db      	asrs	r3, r3, #3
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	89fb      	ldrh	r3, [r7, #14]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	81fb      	strh	r3, [r7, #14]
 8006cf6:	89bb      	ldrh	r3, [r7, #12]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	425a      	negs	r2, r3
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	f002 0207 	and.w	r2, r2, #7
 8006d08:	bf58      	it	pl
 8006d0a:	4253      	negpl	r3, r2
 8006d0c:	b21b      	sxth	r3, r3
 8006d0e:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006d10:	89fb      	ldrh	r3, [r7, #14]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	441a      	add	r2, r3
 8006d16:	89bb      	ldrh	r3, [r7, #12]
 8006d18:	2108      	movs	r1, #8
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 fc7a 	bl	8000614 <ExtractBits>
 8006d20:	4603      	mov	r3, r0
 8006d22:	78ba      	ldrb	r2, [r7, #2]
 8006d24:	b2d8      	uxtb	r0, r3
 8006d26:	4973      	ldr	r1, [pc, #460]	; (8006ef4 <Service_Msg_Extr+0x5d4>)
 8006d28:	4613      	mov	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	440b      	add	r3, r1
 8006d32:	3303      	adds	r3, #3
 8006d34:	4602      	mov	r2, r0
 8006d36:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006d38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	da00      	bge.n	8006d44 <Service_Msg_Extr+0x424>
 8006d42:	3307      	adds	r3, #7
 8006d44:	10db      	asrs	r3, r3, #3
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	81fb      	strh	r3, [r7, #14]
 8006d4e:	89bb      	ldrh	r3, [r7, #12]
 8006d50:	3308      	adds	r3, #8
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	425a      	negs	r2, r3
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	f002 0207 	and.w	r2, r2, #7
 8006d60:	bf58      	it	pl
 8006d62:	4253      	negpl	r3, r2
 8006d64:	b21b      	sxth	r3, r3
 8006d66:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006d68:	89fb      	ldrh	r3, [r7, #14]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	441a      	add	r2, r3
 8006d6e:	89bb      	ldrh	r3, [r7, #12]
 8006d70:	2108      	movs	r1, #8
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7f9 fc4e 	bl	8000614 <ExtractBits>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	78ba      	ldrb	r2, [r7, #2]
 8006d7c:	b2d8      	uxtb	r0, r3
 8006d7e:	495d      	ldr	r1, [pc, #372]	; (8006ef4 <Service_Msg_Extr+0x5d4>)
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	440b      	add	r3, r1
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006d8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d92:	3308      	adds	r3, #8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da00      	bge.n	8006d9a <Service_Msg_Extr+0x47a>
 8006d98:	3307      	adds	r3, #7
 8006d9a:	10db      	asrs	r3, r3, #3
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	4413      	add	r3, r2
 8006da2:	81fb      	strh	r3, [r7, #14]
 8006da4:	89bb      	ldrh	r3, [r7, #12]
 8006da6:	3308      	adds	r3, #8
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	b21b      	sxth	r3, r3
 8006dac:	425a      	negs	r2, r3
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	f002 0207 	and.w	r2, r2, #7
 8006db6:	bf58      	it	pl
 8006db8:	4253      	negpl	r3, r2
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006dbe:	89fb      	ldrh	r3, [r7, #14]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	89bb      	ldrh	r3, [r7, #12]
 8006dc6:	2108      	movs	r1, #8
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7f9 fc23 	bl	8000614 <ExtractBits>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	78ba      	ldrb	r2, [r7, #2]
 8006dd2:	b2d8      	uxtb	r0, r3
 8006dd4:	4947      	ldr	r1, [pc, #284]	; (8006ef4 <Service_Msg_Extr+0x5d4>)
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	4413      	add	r3, r2
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	440b      	add	r3, r1
 8006de0:	3301      	adds	r3, #1
 8006de2:	4602      	mov	r2, r0
 8006de4:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006de6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006dea:	3308      	adds	r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	da00      	bge.n	8006df2 <Service_Msg_Extr+0x4d2>
 8006df0:	3307      	adds	r3, #7
 8006df2:	10db      	asrs	r3, r3, #3
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	89fb      	ldrh	r3, [r7, #14]
 8006df8:	4413      	add	r3, r2
 8006dfa:	81fb      	strh	r3, [r7, #14]
 8006dfc:	89bb      	ldrh	r3, [r7, #12]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	b21b      	sxth	r3, r3
 8006e04:	425a      	negs	r2, r3
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	f002 0207 	and.w	r2, r2, #7
 8006e0e:	bf58      	it	pl
 8006e10:	4253      	negpl	r3, r2
 8006e12:	b21b      	sxth	r3, r3
 8006e14:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006e16:	89fb      	ldrh	r3, [r7, #14]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	441a      	add	r2, r3
 8006e1c:	89bb      	ldrh	r3, [r7, #12]
 8006e1e:	2108      	movs	r1, #8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7f9 fbf7 	bl	8000614 <ExtractBits>
 8006e26:	4603      	mov	r3, r0
 8006e28:	78ba      	ldrb	r2, [r7, #2]
 8006e2a:	b2d8      	uxtb	r0, r3
 8006e2c:	4931      	ldr	r1, [pc, #196]	; (8006ef4 <Service_Msg_Extr+0x5d4>)
 8006e2e:	4613      	mov	r3, r2
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	4413      	add	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	440b      	add	r3, r1
 8006e38:	3302      	adds	r3, #2
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006e3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e42:	3308      	adds	r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da00      	bge.n	8006e4a <Service_Msg_Extr+0x52a>
 8006e48:	3307      	adds	r3, #7
 8006e4a:	10db      	asrs	r3, r3, #3
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	89fb      	ldrh	r3, [r7, #14]
 8006e50:	4413      	add	r3, r2
 8006e52:	81fb      	strh	r3, [r7, #14]
 8006e54:	89bb      	ldrh	r3, [r7, #12]
 8006e56:	3308      	adds	r3, #8
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	b21b      	sxth	r3, r3
 8006e5c:	425a      	negs	r2, r3
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	f002 0207 	and.w	r2, r2, #7
 8006e66:	bf58      	it	pl
 8006e68:	4253      	negpl	r3, r2
 8006e6a:	b21b      	sxth	r3, r3
 8006e6c:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006e6e:	78bb      	ldrb	r3, [r7, #2]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 f997 	bl	80091a4 <IS_MLK_EIPC_TIME_MATCHING>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <Service_Msg_Extr+0x566>
 8006e7c:	78bb      	ldrb	r3, [r7, #2]
 8006e7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ef8 <Service_Msg_Extr+0x5d8>)
 8006e80:	2100      	movs	r1, #0
 8006e82:	54d1      	strb	r1, [r2, r3]
 8006e84:	e003      	b.n	8006e8e <Service_Msg_Extr+0x56e>
 8006e86:	78bb      	ldrb	r3, [r7, #2]
 8006e88:	4a1b      	ldr	r2, [pc, #108]	; (8006ef8 <Service_Msg_Extr+0x5d8>)
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006e8e:	78bb      	ldrb	r3, [r7, #2]
 8006e90:	4a1a      	ldr	r2, [pc, #104]	; (8006efc <Service_Msg_Extr+0x5dc>)
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	4413      	add	r3, r2
 8006e96:	3304      	adds	r3, #4
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <Service_Msg_Extr+0x586>
	{
		LinkEstablishFlag = SET;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006ea6:	787a      	ldrb	r2, [r7, #1]
 8006ea8:	78bb      	ldrb	r3, [r7, #2]
 8006eaa:	4611      	mov	r1, r2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff f8d3 	bl	8006058 <Send_Status_Message>
	/* Preparing and Sending Reply */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 8006eb2:	78bb      	ldrb	r3, [r7, #2]
 8006eb4:	4a12      	ldr	r2, [pc, #72]	; (8006f00 <Service_Msg_Extr+0x5e0>)
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d127      	bne.n	8006f10 <Service_Msg_Extr+0x5f0>
 8006ec0:	78bb      	ldrb	r3, [r7, #2]
 8006ec2:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <Service_Msg_Extr+0x5e4>)
 8006ec4:	5cd3      	ldrb	r3, [r2, r3]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d822      	bhi.n	8006f10 <Service_Msg_Extr+0x5f0>
 8006eca:	78ba      	ldrb	r2, [r7, #2]
 8006ecc:	490e      	ldr	r1, [pc, #56]	; (8006f08 <Service_Msg_Extr+0x5e8>)
 8006ece:	4613      	mov	r3, r2
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	4413      	add	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3305      	adds	r3, #5
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d115      	bne.n	8006f10 <Service_Msg_Extr+0x5f0>
 8006ee4:	78bb      	ldrb	r3, [r7, #2]
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <Service_Msg_Extr+0x5ec>)
 8006ee8:	5cd3      	ldrb	r3, [r2, r3]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d110      	bne.n	8006f10 <Service_Msg_Extr+0x5f0>
	{
		LinkEstablishFlag = RESET;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	77fb      	strb	r3, [r7, #31]
 8006ef2:	e037      	b.n	8006f64 <Service_Msg_Extr+0x644>
 8006ef4:	200015b4 	.word	0x200015b4
 8006ef8:	20001460 	.word	0x20001460
 8006efc:	200015f0 	.word	0x200015f0
 8006f00:	20000304 	.word	0x20000304
 8006f04:	20001240 	.word	0x20001240
 8006f08:	200017d0 	.word	0x200017d0
 8006f0c:	20001234 	.word	0x20001234
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8006f10:	78bb      	ldrb	r3, [r7, #2]
 8006f12:	4aae      	ldr	r2, [pc, #696]	; (80071cc <Service_Msg_Extr+0x8ac>)
 8006f14:	4413      	add	r3, r2
 8006f16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d122      	bne.n	8006f64 <Service_Msg_Extr+0x644>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 8006f1e:	78bb      	ldrb	r3, [r7, #2]
 8006f20:	4aaa      	ldr	r2, [pc, #680]	; (80071cc <Service_Msg_Extr+0x8ac>)
 8006f22:	3366      	adds	r3, #102	; 0x66
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	78bb      	ldrb	r3, [r7, #2]
 8006f2c:	4aa8      	ldr	r2, [pc, #672]	; (80071d0 <Service_Msg_Extr+0x8b0>)
 8006f2e:	5cd3      	ldrb	r3, [r2, r3]
 8006f30:	461a      	mov	r2, r3
 8006f32:	48a8      	ldr	r0, [pc, #672]	; (80071d4 <Service_Msg_Extr+0x8b4>)
 8006f34:	f01e fa14 	bl	8025360 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8006f38:	78bb      	ldrb	r3, [r7, #2]
 8006f3a:	4aa7      	ldr	r2, [pc, #668]	; (80071d8 <Service_Msg_Extr+0x8b8>)
 8006f3c:	5cd3      	ldrb	r3, [r2, r3]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	48a6      	ldr	r0, [pc, #664]	; (80071dc <Service_Msg_Extr+0x8bc>)
 8006f42:	f01e fa0d 	bl	8025360 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8006f46:	78ba      	ldrb	r2, [r7, #2]
 8006f48:	49a5      	ldr	r1, [pc, #660]	; (80071e0 <Service_Msg_Extr+0x8c0>)
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	440b      	add	r3, r1
 8006f54:	3305      	adds	r3, #5
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	48a1      	ldr	r0, [pc, #644]	; (80071e4 <Service_Msg_Extr+0x8c4>)
 8006f60:	f01e f9fe 	bl	8025360 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006f64:	7ffb      	ldrb	r3, [r7, #31]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	f040 8083 	bne.w	8007072 <Service_Msg_Extr+0x752>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006f6c:	78ba      	ldrb	r2, [r7, #2]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4a9c      	ldr	r2, [pc, #624]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	2210      	movs	r2, #16
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f01e f905 	bl	8025190 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006f86:	78ba      	ldrb	r2, [r7, #2]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4a95      	ldr	r2, [pc, #596]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 8006f92:	1898      	adds	r0, r3, r2
 8006f94:	78ba      	ldrb	r2, [r7, #2]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a93      	ldr	r2, [pc, #588]	; (80071ec <Service_Msg_Extr+0x8cc>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	2214      	movs	r2, #20
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f01e f8cb 	bl	8025140 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006faa:	78bb      	ldrb	r3, [r7, #2]
 8006fac:	4a90      	ldr	r2, [pc, #576]	; (80071f0 <Service_Msg_Extr+0x8d0>)
 8006fae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006fb2:	78ba      	ldrb	r2, [r7, #2]
 8006fb4:	488c      	ldr	r0, [pc, #560]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4403      	add	r3, r0
 8006fc0:	3312      	adds	r3, #18
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	4299      	cmp	r1, r3
 8006fc6:	d054      	beq.n	8007072 <Service_Msg_Extr+0x752>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006fc8:	78ba      	ldrb	r2, [r7, #2]
 8006fca:	78b9      	ldrb	r1, [r7, #2]
 8006fcc:	4886      	ldr	r0, [pc, #536]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 8006fce:	4613      	mov	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4403      	add	r3, r0
 8006fd8:	3312      	adds	r3, #18
 8006fda:	881a      	ldrh	r2, [r3, #0]
 8006fdc:	4b84      	ldr	r3, [pc, #528]	; (80071f0 <Service_Msg_Extr+0x8d0>)
 8006fde:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006fe2:	2214      	movs	r2, #20
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4883      	ldr	r0, [pc, #524]	; (80071f4 <Service_Msg_Extr+0x8d4>)
 8006fe8:	f01e f8d2 	bl	8025190 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006fec:	78ba      	ldrb	r2, [r7, #2]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4a7c      	ldr	r2, [pc, #496]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 8006ff8:	4413      	add	r3, r2
 8006ffa:	2214      	movs	r2, #20
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	487d      	ldr	r0, [pc, #500]	; (80071f4 <Service_Msg_Extr+0x8d4>)
 8007000:	f01e f89e 	bl	8025140 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8007004:	f240 2007 	movw	r0, #519	; 0x207
 8007008:	f009 fbee 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800700c:	78b9      	ldrb	r1, [r7, #2]
 800700e:	78ba      	ldrb	r2, [r7, #2]
 8007010:	4875      	ldr	r0, [pc, #468]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 8007012:	460b      	mov	r3, r1
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4403      	add	r3, r0
 800701c:	3312      	adds	r3, #18
 800701e:	8818      	ldrh	r0, [r3, #0]
 8007020:	4975      	ldr	r1, [pc, #468]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 8007022:	4613      	mov	r3, r2
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	4413      	add	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	440b      	add	r3, r1
 800702c:	3306      	adds	r3, #6
 800702e:	4602      	mov	r2, r0
 8007030:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8007032:	78bb      	ldrb	r3, [r7, #2]
 8007034:	4a71      	ldr	r2, [pc, #452]	; (80071fc <Service_Msg_Extr+0x8dc>)
 8007036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d119      	bne.n	8007072 <Service_Msg_Extr+0x752>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800703e:	78bb      	ldrb	r3, [r7, #2]
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	4a6f      	ldr	r2, [pc, #444]	; (8007200 <Service_Msg_Extr+0x8e0>)
 8007044:	4413      	add	r3, r2
 8007046:	1c98      	adds	r0, r3, #2
 8007048:	78ba      	ldrb	r2, [r7, #2]
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4a65      	ldr	r2, [pc, #404]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 8007054:	4413      	add	r3, r2
 8007056:	3301      	adds	r3, #1
 8007058:	2210      	movs	r2, #16
 800705a:	4619      	mov	r1, r3
 800705c:	f01e f870 	bl	8025140 <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 8007060:	f002 ff98 	bl	8009f94 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8007064:	f240 1019 	movw	r0, #281	; 0x119
 8007068:	f009 fbbe 	bl	80107e8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 800706c:	4a65      	ldr	r2, [pc, #404]	; (8007204 <Service_Msg_Extr+0x8e4>)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8007072:	78ba      	ldrb	r2, [r7, #2]
 8007074:	4960      	ldr	r1, [pc, #384]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	440b      	add	r3, r1
 8007080:	3314      	adds	r3, #20
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8007086:	78ba      	ldrb	r2, [r7, #2]
 8007088:	495b      	ldr	r1, [pc, #364]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 800708a:	4613      	mov	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4413      	add	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	440b      	add	r3, r1
 8007094:	3305      	adds	r3, #5
 8007096:	2206      	movs	r2, #6
 8007098:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800709a:	78ba      	ldrb	r2, [r7, #2]
 800709c:	4956      	ldr	r1, [pc, #344]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 800709e:	4613      	mov	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	440b      	add	r3, r1
 80070a8:	78ba      	ldrb	r2, [r7, #2]
 80070aa:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80070ac:	78ba      	ldrb	r2, [r7, #2]
 80070ae:	4952      	ldr	r1, [pc, #328]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 80070b0:	4613      	mov	r3, r2
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4413      	add	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	440b      	add	r3, r1
 80070ba:	3301      	adds	r3, #1
 80070bc:	2201      	movs	r2, #1
 80070be:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80070c0:	78ba      	ldrb	r2, [r7, #2]
 80070c2:	494d      	ldr	r1, [pc, #308]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	440b      	add	r3, r1
 80070ce:	3302      	adds	r3, #2
 80070d0:	7ffa      	ldrb	r2, [r7, #31]
 80070d2:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80070d4:	2218      	movs	r2, #24
 80070d6:	2100      	movs	r1, #0
 80070d8:	484b      	ldr	r0, [pc, #300]	; (8007208 <Service_Msg_Extr+0x8e8>)
 80070da:	f01e f859 	bl	8025190 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80070de:	78ba      	ldrb	r2, [r7, #2]
 80070e0:	4613      	mov	r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4413      	add	r3, r2
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4a43      	ldr	r2, [pc, #268]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 80070ea:	4413      	add	r3, r2
 80070ec:	2218      	movs	r2, #24
 80070ee:	4619      	mov	r1, r3
 80070f0:	4845      	ldr	r0, [pc, #276]	; (8007208 <Service_Msg_Extr+0x8e8>)
 80070f2:	f01e f825 	bl	8025140 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80070f6:	f240 2001 	movw	r0, #513	; 0x201
 80070fa:	f009 fb75 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80070fe:	78ba      	ldrb	r2, [r7, #2]
 8007100:	493d      	ldr	r1, [pc, #244]	; (80071f8 <Service_Msg_Extr+0x8d8>)
 8007102:	4613      	mov	r3, r2
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	4413      	add	r3, r2
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	440b      	add	r3, r1
 800710c:	3301      	adds	r3, #1
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8007112:	78bb      	ldrb	r3, [r7, #2]
 8007114:	493d      	ldr	r1, [pc, #244]	; (800720c <Service_Msg_Extr+0x8ec>)
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 800711c:	7ffb      	ldrb	r3, [r7, #31]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d11d      	bne.n	800715e <Service_Msg_Extr+0x83e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8007122:	78bb      	ldrb	r3, [r7, #2]
 8007124:	493a      	ldr	r1, [pc, #232]	; (8007210 <Service_Msg_Extr+0x8f0>)
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SelfLinkFlag[Source_Index] = SET;
 800712c:	78bb      	ldrb	r3, [r7, #2]
 800712e:	4a39      	ldr	r2, [pc, #228]	; (8007214 <Service_Msg_Extr+0x8f4>)
 8007130:	2101      	movs	r1, #1
 8007132:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8007134:	78ba      	ldrb	r2, [r7, #2]
 8007136:	4938      	ldr	r1, [pc, #224]	; (8007218 <Service_Msg_Extr+0x8f8>)
 8007138:	4613      	mov	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	3301      	adds	r3, #1
 8007144:	2201      	movs	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8007148:	78ba      	ldrb	r2, [r7, #2]
 800714a:	4933      	ldr	r1, [pc, #204]	; (8007218 <Service_Msg_Extr+0x8f8>)
 800714c:	4613      	mov	r3, r2
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	3304      	adds	r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e02e      	b.n	80071bc <Service_Msg_Extr+0x89c>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 800715e:	78bb      	ldrb	r3, [r7, #2]
 8007160:	4a2c      	ldr	r2, [pc, #176]	; (8007214 <Service_Msg_Extr+0x8f4>)
 8007162:	2100      	movs	r1, #0
 8007164:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8007166:	78ba      	ldrb	r2, [r7, #2]
 8007168:	492b      	ldr	r1, [pc, #172]	; (8007218 <Service_Msg_Extr+0x8f8>)
 800716a:	4613      	mov	r3, r2
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	3308      	adds	r3, #8
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 800717a:	78ba      	ldrb	r2, [r7, #2]
 800717c:	4926      	ldr	r1, [pc, #152]	; (8007218 <Service_Msg_Extr+0x8f8>)
 800717e:	4613      	mov	r3, r2
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3301      	adds	r3, #1
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800718e:	78ba      	ldrb	r2, [r7, #2]
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 800719a:	4413      	add	r3, r2
 800719c:	3301      	adds	r3, #1
 800719e:	2210      	movs	r2, #16
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f01d fff4 	bl	8025190 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80071a8:	78ba      	ldrb	r2, [r7, #2]
 80071aa:	490f      	ldr	r1, [pc, #60]	; (80071e8 <Service_Msg_Extr+0x8c8>)
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	440b      	add	r3, r1
 80071b6:	3312      	adds	r3, #18
 80071b8:	2200      	movs	r2, #0
 80071ba:	801a      	strh	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80071bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071c0:	4816      	ldr	r0, [pc, #88]	; (800721c <Service_Msg_Extr+0x8fc>)
 80071c2:	f013 fdac 	bl	801ad1e <HAL_GPIO_TogglePin>

}
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20000304 	.word	0x20000304
 80071d0:	20001240 	.word	0x20001240
 80071d4:	08027494 	.word	0x08027494
 80071d8:	20001234 	.word	0x20001234
 80071dc:	080274a4 	.word	0x080274a4
 80071e0:	200017d0 	.word	0x200017d0
 80071e4:	080274bc 	.word	0x080274bc
 80071e8:	200022ac 	.word	0x200022ac
 80071ec:	200021e4 	.word	0x200021e4
 80071f0:	20001288 	.word	0x20001288
 80071f4:	2000243c 	.word	0x2000243c
 80071f8:	20001aa0 	.word	0x20001aa0
 80071fc:	2000124c 	.word	0x2000124c
 8007200:	2000146c 	.word	0x2000146c
 8007204:	200011e0 	.word	0x200011e0
 8007208:	20001c80 	.word	0x20001c80
 800720c:	200011b4 	.word	0x200011b4
 8007210:	2000129c 	.word	0x2000129c
 8007214:	200012ec 	.word	0x200012ec
 8007218:	200020f4 	.word	0x200020f4
 800721c:	40021c00 	.word	0x40021c00

08007220 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b095      	sub	sp, #84	; 0x54
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	460a      	mov	r2, r1
 800722a:	71fb      	strb	r3, [r7, #7]
 800722c:	4613      	mov	r3, r2
 800722e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	f107 0310 	add.w	r3, r7, #16
 8007238:	2238      	movs	r2, #56	; 0x38
 800723a:	2100      	movs	r1, #0
 800723c:	4618      	mov	r0, r3
 800723e:	f01d ffa7 	bl	8025190 <memset>

	BITSTUFFINIT(0, 0);
 8007242:	2300      	movs	r3, #0
 8007244:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007248:	2300      	movs	r3, #0
 800724a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 800724e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007252:	f107 020c 	add.w	r2, r7, #12
 8007256:	441a      	add	r2, r3
 8007258:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800725c:	23f4      	movs	r3, #244	; 0xf4
 800725e:	2108      	movs	r1, #8
 8007260:	f7f9 fa64 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007264:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007268:	3308      	adds	r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	da00      	bge.n	8007270 <Send_Service_Signal_Message+0x50>
 800726e:	3307      	adds	r3, #7
 8007270:	10db      	asrs	r3, r3, #3
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007278:	4413      	add	r3, r2
 800727a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800727e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007282:	3308      	adds	r3, #8
 8007284:	b29b      	uxth	r3, r3
 8007286:	b21b      	sxth	r3, r3
 8007288:	425a      	negs	r2, r3
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	f002 0207 	and.w	r2, r2, #7
 8007292:	bf58      	it	pl
 8007294:	4253      	negpl	r3, r2
 8007296:	b21b      	sxth	r3, r3
 8007298:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 800729c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072a0:	f107 020c 	add.w	r2, r7, #12
 80072a4:	441a      	add	r2, r3
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	497b      	ldr	r1, [pc, #492]	; (8007498 <Send_Service_Signal_Message+0x278>)
 80072aa:	3366      	adds	r3, #102	; 0x66
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072b6:	2110      	movs	r1, #16
 80072b8:	f7f9 fa38 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80072bc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072c0:	3310      	adds	r3, #16
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da00      	bge.n	80072c8 <Send_Service_Signal_Message+0xa8>
 80072c6:	3307      	adds	r3, #7
 80072c8:	10db      	asrs	r3, r3, #3
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d0:	4413      	add	r3, r2
 80072d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072da:	3310      	adds	r3, #16
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b21b      	sxth	r3, r3
 80072e0:	425a      	negs	r2, r3
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	f002 0207 	and.w	r2, r2, #7
 80072ea:	bf58      	it	pl
 80072ec:	4253      	negpl	r3, r2
 80072ee:	b21b      	sxth	r3, r3
 80072f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 80072f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072f8:	f107 020c 	add.w	r2, r7, #12
 80072fc:	441a      	add	r2, r3
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	4965      	ldr	r1, [pc, #404]	; (8007498 <Send_Service_Signal_Message+0x278>)
 8007302:	3370      	adds	r3, #112	; 0x70
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800730e:	2110      	movs	r1, #16
 8007310:	f7f9 fa0c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007314:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007318:	3310      	adds	r3, #16
 800731a:	2b00      	cmp	r3, #0
 800731c:	da00      	bge.n	8007320 <Send_Service_Signal_Message+0x100>
 800731e:	3307      	adds	r3, #7
 8007320:	10db      	asrs	r3, r3, #3
 8007322:	b29a      	uxth	r2, r3
 8007324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007328:	4413      	add	r3, r2
 800732a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800732e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007332:	3310      	adds	r3, #16
 8007334:	b29b      	uxth	r3, r3
 8007336:	b21b      	sxth	r3, r3
 8007338:	425a      	negs	r2, r3
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	f002 0207 	and.w	r2, r2, #7
 8007342:	bf58      	it	pl
 8007344:	4253      	negpl	r3, r2
 8007346:	b21b      	sxth	r3, r3
 8007348:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800734c:	4b53      	ldr	r3, [pc, #332]	; (800749c <Send_Service_Signal_Message+0x27c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	089b      	lsrs	r3, r3, #2
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d035      	beq.n	80073c6 <Send_Service_Signal_Message+0x1a6>
 800735a:	4b50      	ldr	r3, [pc, #320]	; (800749c <Send_Service_Signal_Message+0x27c>)
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	79fa      	ldrb	r2, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d130      	bne.n	80073c6 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800736a:	484d      	ldr	r0, [pc, #308]	; (80074a0 <Send_Service_Signal_Message+0x280>)
 800736c:	f015 fca0 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8007370:	4602      	mov	r2, r0
 8007372:	4b4c      	ldr	r3, [pc, #304]	; (80074a4 <Send_Service_Signal_Message+0x284>)
 8007374:	fba3 1302 	umull	r1, r3, r3, r2
 8007378:	099b      	lsrs	r3, r3, #6
 800737a:	21c8      	movs	r1, #200	; 0xc8
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8007386:	4848      	ldr	r0, [pc, #288]	; (80074a8 <Send_Service_Signal_Message+0x288>)
 8007388:	f01e f886 	bl	8025498 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	4a47      	ldr	r2, [pc, #284]	; (80074ac <Send_Service_Signal_Message+0x28c>)
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	4413      	add	r3, r2
 8007394:	3301      	adds	r3, #1
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	4845      	ldr	r0, [pc, #276]	; (80074b0 <Send_Service_Signal_Message+0x290>)
 800739c:	f01d ffe0 	bl	8025360 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80073a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80073a4:	4619      	mov	r1, r3
 80073a6:	4843      	ldr	r0, [pc, #268]	; (80074b4 <Send_Service_Signal_Message+0x294>)
 80073a8:	f01d ffda 	bl	8025360 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 80073ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073b0:	f107 020c 	add.w	r2, r7, #12
 80073b4:	441a      	add	r2, r3
 80073b6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80073ba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073be:	2108      	movs	r1, #8
 80073c0:	f7f9 f9b4 	bl	800072c <InsertBits>
	{
 80073c4:	e00f      	b.n	80073e6 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80073c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073ca:	f107 020c 	add.w	r2, r7, #12
 80073ce:	441a      	add	r2, r3
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	4936      	ldr	r1, [pc, #216]	; (80074ac <Send_Service_Signal_Message+0x28c>)
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	440b      	add	r3, r1
 80073d8:	3301      	adds	r3, #1
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073e0:	2108      	movs	r1, #8
 80073e2:	f7f9 f9a3 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80073e6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073ea:	3308      	adds	r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da00      	bge.n	80073f2 <Send_Service_Signal_Message+0x1d2>
 80073f0:	3307      	adds	r3, #7
 80073f2:	10db      	asrs	r3, r3, #3
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073fa:	4413      	add	r3, r2
 80073fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007400:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007404:	3308      	adds	r3, #8
 8007406:	b29b      	uxth	r3, r3
 8007408:	b21b      	sxth	r3, r3
 800740a:	425a      	negs	r2, r3
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	f002 0207 	and.w	r2, r2, #7
 8007414:	bf58      	it	pl
 8007416:	4253      	negpl	r3, r2
 8007418:	b21b      	sxth	r3, r3
 800741a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800741e:	4b1f      	ldr	r3, [pc, #124]	; (800749c <Send_Service_Signal_Message+0x27c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	08db      	lsrs	r3, r3, #3
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d04b      	beq.n	80074c4 <Send_Service_Signal_Message+0x2a4>
 800742c:	4b1b      	ldr	r3, [pc, #108]	; (800749c <Send_Service_Signal_Message+0x27c>)
 800742e:	791b      	ldrb	r3, [r3, #4]
 8007430:	79fa      	ldrb	r2, [r7, #7]
 8007432:	429a      	cmp	r2, r3
 8007434:	d146      	bne.n	80074c4 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800743c:	4818      	ldr	r0, [pc, #96]	; (80074a0 <Send_Service_Signal_Message+0x280>)
 800743e:	f015 fc37 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8007442:	4602      	mov	r2, r0
 8007444:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <Send_Service_Signal_Message+0x284>)
 8007446:	fba3 1302 	umull	r1, r3, r3, r2
 800744a:	099b      	lsrs	r3, r3, #6
 800744c:	21c8      	movs	r1, #200	; 0xc8
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007458:	4817      	ldr	r0, [pc, #92]	; (80074b8 <Send_Service_Signal_Message+0x298>)
 800745a:	f01e f81d 	bl	8025498 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	4a12      	ldr	r2, [pc, #72]	; (80074ac <Send_Service_Signal_Message+0x28c>)
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	4413      	add	r3, r2
 8007466:	3302      	adds	r3, #2
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	4619      	mov	r1, r3
 800746c:	4813      	ldr	r0, [pc, #76]	; (80074bc <Send_Service_Signal_Message+0x29c>)
 800746e:	f01d ff77 	bl	8025360 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007472:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007476:	4619      	mov	r1, r3
 8007478:	4811      	ldr	r0, [pc, #68]	; (80074c0 <Send_Service_Signal_Message+0x2a0>)
 800747a:	f01d ff71 	bl	8025360 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800747e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007482:	f107 020c 	add.w	r2, r7, #12
 8007486:	441a      	add	r2, r3
 8007488:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800748c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007490:	2108      	movs	r1, #8
 8007492:	f7f9 f94b 	bl	800072c <InsertBits>
	{
 8007496:	e033      	b.n	8007500 <Send_Service_Signal_Message+0x2e0>
 8007498:	20000304 	.word	0x20000304
 800749c:	20001d88 	.word	0x20001d88
 80074a0:	2000a9e0 	.word	0x2000a9e0
 80074a4:	51eb851f 	.word	0x51eb851f
 80074a8:	08026eb4 	.word	0x08026eb4
 80074ac:	200015f0 	.word	0x200015f0
 80074b0:	080274cc 	.word	0x080274cc
 80074b4:	080274ec 	.word	0x080274ec
 80074b8:	08026f18 	.word	0x08026f18
 80074bc:	0802750c 	.word	0x0802750c
 80074c0:	0802752c 	.word	0x0802752c
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80074c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074c8:	f107 020c 	add.w	r2, r7, #12
 80074cc:	18d1      	adds	r1, r2, r3
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	484e      	ldr	r0, [pc, #312]	; (800760c <Send_Service_Signal_Message+0x3ec>)
 80074d2:	011a      	lsls	r2, r3, #4
 80074d4:	4402      	add	r2, r0
 80074d6:	3202      	adds	r2, #2
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	3201      	adds	r2, #1
 80074dc:	b2d4      	uxtb	r4, r2
 80074de:	484b      	ldr	r0, [pc, #300]	; (800760c <Send_Service_Signal_Message+0x3ec>)
 80074e0:	011a      	lsls	r2, r3, #4
 80074e2:	4402      	add	r2, r0
 80074e4:	3202      	adds	r2, #2
 80074e6:	4620      	mov	r0, r4
 80074e8:	7010      	strb	r0, [r2, #0]
 80074ea:	4a48      	ldr	r2, [pc, #288]	; (800760c <Send_Service_Signal_Message+0x3ec>)
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	4413      	add	r3, r2
 80074f0:	3302      	adds	r3, #2
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074f8:	460a      	mov	r2, r1
 80074fa:	2108      	movs	r1, #8
 80074fc:	f7f9 f916 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007500:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007504:	3308      	adds	r3, #8
 8007506:	2b00      	cmp	r3, #0
 8007508:	da00      	bge.n	800750c <Send_Service_Signal_Message+0x2ec>
 800750a:	3307      	adds	r3, #7
 800750c:	10db      	asrs	r3, r3, #3
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007514:	4413      	add	r3, r2
 8007516:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800751a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800751e:	3308      	adds	r3, #8
 8007520:	b29b      	uxth	r3, r3
 8007522:	b21b      	sxth	r3, r3
 8007524:	425a      	negs	r2, r3
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	f002 0207 	and.w	r2, r2, #7
 800752e:	bf58      	it	pl
 8007530:	4253      	negpl	r3, r2
 8007532:	b21b      	sxth	r3, r3
 8007534:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800753c:	f107 020c 	add.w	r2, r7, #12
 8007540:	441a      	add	r2, r3
 8007542:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007546:	2306      	movs	r3, #6
 8007548:	2108      	movs	r1, #8
 800754a:	f7f9 f8ef 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800754e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007552:	3308      	adds	r3, #8
 8007554:	2b00      	cmp	r3, #0
 8007556:	da00      	bge.n	800755a <Send_Service_Signal_Message+0x33a>
 8007558:	3307      	adds	r3, #7
 800755a:	10db      	asrs	r3, r3, #3
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007562:	4413      	add	r3, r2
 8007564:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007568:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800756c:	3308      	adds	r3, #8
 800756e:	b29b      	uxth	r3, r3
 8007570:	b21b      	sxth	r3, r3
 8007572:	425a      	negs	r2, r3
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	f002 0207 	and.w	r2, r2, #7
 800757c:	bf58      	it	pl
 800757e:	4253      	negpl	r3, r2
 8007580:	b21b      	sxth	r3, r3
 8007582:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	4a21      	ldr	r2, [pc, #132]	; (8007610 <Send_Service_Signal_Message+0x3f0>)
 800758a:	5cd3      	ldrb	r3, [r2, r3]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d147      	bne.n	8007620 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007590:	f004 fef2 	bl	800c378 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007594:	79fa      	ldrb	r2, [r7, #7]
 8007596:	4613      	mov	r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4413      	add	r3, r2
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4a1d      	ldr	r2, [pc, #116]	; (8007614 <Send_Service_Signal_Message+0x3f4>)
 80075a0:	4413      	add	r3, r2
 80075a2:	4a1d      	ldr	r2, [pc, #116]	; (8007618 <Send_Service_Signal_Message+0x3f8>)
 80075a4:	6811      	ldr	r1, [r2, #0]
 80075a6:	6019      	str	r1, [r3, #0]
 80075a8:	8892      	ldrh	r2, [r2, #4]
 80075aa:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80075ac:	481b      	ldr	r0, [pc, #108]	; (800761c <Send_Service_Signal_Message+0x3fc>)
 80075ae:	f01d ff73 	bl	8025498 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	4a16      	ldr	r2, [pc, #88]	; (8007610 <Send_Service_Signal_Message+0x3f0>)
 80075b6:	2100      	movs	r1, #0
 80075b8:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 80075ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075be:	f107 020c 	add.w	r2, r7, #12
 80075c2:	441a      	add	r2, r3
 80075c4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80075c8:	2369      	movs	r3, #105	; 0x69
 80075ca:	2110      	movs	r1, #16
 80075cc:	f7f9 f8ae 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80075d0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80075d4:	3310      	adds	r3, #16
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	da00      	bge.n	80075dc <Send_Service_Signal_Message+0x3bc>
 80075da:	3307      	adds	r3, #7
 80075dc:	10db      	asrs	r3, r3, #3
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075e4:	4413      	add	r3, r2
 80075e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80075ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80075ee:	3310      	adds	r3, #16
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	b21b      	sxth	r3, r3
 80075f4:	425a      	negs	r2, r3
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	f002 0207 	and.w	r2, r2, #7
 80075fe:	bf58      	it	pl
 8007600:	4253      	negpl	r3, r2
 8007602:	b21b      	sxth	r3, r3
 8007604:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007608:	e031      	b.n	800766e <Send_Service_Signal_Message+0x44e>
 800760a:	bf00      	nop
 800760c:	200015f0 	.word	0x200015f0
 8007610:	20001460 	.word	0x20001460
 8007614:	200015b4 	.word	0x200015b4
 8007618:	20002ce0 	.word	0x20002ce0
 800761c:	08027270 	.word	0x08027270
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007624:	f107 020c 	add.w	r2, r7, #12
 8007628:	441a      	add	r2, r3
 800762a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800762e:	2329      	movs	r3, #41	; 0x29
 8007630:	2110      	movs	r1, #16
 8007632:	f7f9 f87b 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007636:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800763a:	3310      	adds	r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	da00      	bge.n	8007642 <Send_Service_Signal_Message+0x422>
 8007640:	3307      	adds	r3, #7
 8007642:	10db      	asrs	r3, r3, #3
 8007644:	b29a      	uxth	r2, r3
 8007646:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800764a:	4413      	add	r3, r2
 800764c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007650:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007654:	3310      	adds	r3, #16
 8007656:	b29b      	uxth	r3, r3
 8007658:	b21b      	sxth	r3, r3
 800765a:	425a      	negs	r2, r3
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	f002 0207 	and.w	r2, r2, #7
 8007664:	bf58      	it	pl
 8007666:	4253      	negpl	r3, r2
 8007668:	b21b      	sxth	r3, r3
 800766a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800766e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007672:	f107 020c 	add.w	r2, r7, #12
 8007676:	18d1      	adds	r1, r2, r3
 8007678:	79fa      	ldrb	r2, [r7, #7]
 800767a:	48b5      	ldr	r0, [pc, #724]	; (8007950 <Send_Service_Signal_Message+0x730>)
 800767c:	4613      	mov	r3, r2
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	4413      	add	r3, r2
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	4403      	add	r3, r0
 8007686:	3305      	adds	r3, #5
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800768e:	460a      	mov	r2, r1
 8007690:	2108      	movs	r1, #8
 8007692:	f7f9 f84b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007696:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800769a:	3308      	adds	r3, #8
 800769c:	2b00      	cmp	r3, #0
 800769e:	da00      	bge.n	80076a2 <Send_Service_Signal_Message+0x482>
 80076a0:	3307      	adds	r3, #7
 80076a2:	10db      	asrs	r3, r3, #3
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076aa:	4413      	add	r3, r2
 80076ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80076b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076b4:	3308      	adds	r3, #8
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	b21b      	sxth	r3, r3
 80076ba:	425a      	negs	r2, r3
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	f002 0207 	and.w	r2, r2, #7
 80076c4:	bf58      	it	pl
 80076c6:	4253      	negpl	r3, r2
 80076c8:	b21b      	sxth	r3, r3
 80076ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80076ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076d2:	f107 020c 	add.w	r2, r7, #12
 80076d6:	18d1      	adds	r1, r2, r3
 80076d8:	79fa      	ldrb	r2, [r7, #7]
 80076da:	489d      	ldr	r0, [pc, #628]	; (8007950 <Send_Service_Signal_Message+0x730>)
 80076dc:	4613      	mov	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	4413      	add	r3, r2
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	4403      	add	r3, r0
 80076e6:	3304      	adds	r3, #4
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80076ee:	460a      	mov	r2, r1
 80076f0:	2108      	movs	r1, #8
 80076f2:	f7f9 f81b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80076f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80076fa:	3308      	adds	r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	da00      	bge.n	8007702 <Send_Service_Signal_Message+0x4e2>
 8007700:	3307      	adds	r3, #7
 8007702:	10db      	asrs	r3, r3, #3
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800770a:	4413      	add	r3, r2
 800770c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007710:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007714:	3308      	adds	r3, #8
 8007716:	b29b      	uxth	r3, r3
 8007718:	b21b      	sxth	r3, r3
 800771a:	425a      	negs	r2, r3
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	f002 0207 	and.w	r2, r2, #7
 8007724:	bf58      	it	pl
 8007726:	4253      	negpl	r3, r2
 8007728:	b21b      	sxth	r3, r3
 800772a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800772e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007732:	f107 020c 	add.w	r2, r7, #12
 8007736:	18d1      	adds	r1, r2, r3
 8007738:	79fa      	ldrb	r2, [r7, #7]
 800773a:	4885      	ldr	r0, [pc, #532]	; (8007950 <Send_Service_Signal_Message+0x730>)
 800773c:	4613      	mov	r3, r2
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	4413      	add	r3, r2
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	4403      	add	r3, r0
 8007746:	3303      	adds	r3, #3
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800774e:	460a      	mov	r2, r1
 8007750:	2108      	movs	r1, #8
 8007752:	f7f8 ffeb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007756:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800775a:	3308      	adds	r3, #8
 800775c:	2b00      	cmp	r3, #0
 800775e:	da00      	bge.n	8007762 <Send_Service_Signal_Message+0x542>
 8007760:	3307      	adds	r3, #7
 8007762:	10db      	asrs	r3, r3, #3
 8007764:	b29a      	uxth	r2, r3
 8007766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800776a:	4413      	add	r3, r2
 800776c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007770:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007774:	3308      	adds	r3, #8
 8007776:	b29b      	uxth	r3, r3
 8007778:	b21b      	sxth	r3, r3
 800777a:	425a      	negs	r2, r3
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	f002 0207 	and.w	r2, r2, #7
 8007784:	bf58      	it	pl
 8007786:	4253      	negpl	r3, r2
 8007788:	b21b      	sxth	r3, r3
 800778a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 800778e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007792:	f107 020c 	add.w	r2, r7, #12
 8007796:	18d1      	adds	r1, r2, r3
 8007798:	79fa      	ldrb	r2, [r7, #7]
 800779a:	486d      	ldr	r0, [pc, #436]	; (8007950 <Send_Service_Signal_Message+0x730>)
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	4403      	add	r3, r0
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80077ac:	460a      	mov	r2, r1
 80077ae:	2108      	movs	r1, #8
 80077b0:	f7f8 ffbc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80077b4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80077b8:	3308      	adds	r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da00      	bge.n	80077c0 <Send_Service_Signal_Message+0x5a0>
 80077be:	3307      	adds	r3, #7
 80077c0:	10db      	asrs	r3, r3, #3
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077c8:	4413      	add	r3, r2
 80077ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80077ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077d2:	3308      	adds	r3, #8
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	b21b      	sxth	r3, r3
 80077d8:	425a      	negs	r2, r3
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	f002 0207 	and.w	r2, r2, #7
 80077e2:	bf58      	it	pl
 80077e4:	4253      	negpl	r3, r2
 80077e6:	b21b      	sxth	r3, r3
 80077e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80077ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077f0:	f107 020c 	add.w	r2, r7, #12
 80077f4:	18d1      	adds	r1, r2, r3
 80077f6:	79fa      	ldrb	r2, [r7, #7]
 80077f8:	4855      	ldr	r0, [pc, #340]	; (8007950 <Send_Service_Signal_Message+0x730>)
 80077fa:	4613      	mov	r3, r2
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	4413      	add	r3, r2
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	4403      	add	r3, r0
 8007804:	3301      	adds	r3, #1
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800780c:	460a      	mov	r2, r1
 800780e:	2108      	movs	r1, #8
 8007810:	f7f8 ff8c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007814:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007818:	3308      	adds	r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	da00      	bge.n	8007820 <Send_Service_Signal_Message+0x600>
 800781e:	3307      	adds	r3, #7
 8007820:	10db      	asrs	r3, r3, #3
 8007822:	b29a      	uxth	r2, r3
 8007824:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007828:	4413      	add	r3, r2
 800782a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800782e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007832:	3308      	adds	r3, #8
 8007834:	b29b      	uxth	r3, r3
 8007836:	b21b      	sxth	r3, r3
 8007838:	425a      	negs	r2, r3
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	f002 0207 	and.w	r2, r2, #7
 8007842:	bf58      	it	pl
 8007844:	4253      	negpl	r3, r2
 8007846:	b21b      	sxth	r3, r3
 8007848:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 800784c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007850:	f107 020c 	add.w	r2, r7, #12
 8007854:	18d1      	adds	r1, r2, r3
 8007856:	79fa      	ldrb	r2, [r7, #7]
 8007858:	483d      	ldr	r0, [pc, #244]	; (8007950 <Send_Service_Signal_Message+0x730>)
 800785a:	4613      	mov	r3, r2
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	4413      	add	r3, r2
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4403      	add	r3, r0
 8007864:	3302      	adds	r3, #2
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800786c:	460a      	mov	r2, r1
 800786e:	2108      	movs	r1, #8
 8007870:	f7f8 ff5c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007874:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007878:	3308      	adds	r3, #8
 800787a:	2b00      	cmp	r3, #0
 800787c:	da00      	bge.n	8007880 <Send_Service_Signal_Message+0x660>
 800787e:	3307      	adds	r3, #7
 8007880:	10db      	asrs	r3, r3, #3
 8007882:	b29a      	uxth	r2, r3
 8007884:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007888:	4413      	add	r3, r2
 800788a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800788e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007892:	3308      	adds	r3, #8
 8007894:	b29b      	uxth	r3, r3
 8007896:	b21b      	sxth	r3, r3
 8007898:	425a      	negs	r2, r3
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	f002 0207 	and.w	r2, r2, #7
 80078a2:	bf58      	it	pl
 80078a4:	4253      	negpl	r3, r2
 80078a6:	b21b      	sxth	r3, r3
 80078a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 80078ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078b0:	f107 020c 	add.w	r2, r7, #12
 80078b4:	18d4      	adds	r4, r2, r3
 80078b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f00c fff7 	bl	80148b4 <CalculateDirectReverseCrc>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80078cc:	4622      	mov	r2, r4
 80078ce:	2120      	movs	r1, #32
 80078d0:	f7f8 ff2c 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 80078d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80078d8:	3320      	adds	r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	da00      	bge.n	80078e0 <Send_Service_Signal_Message+0x6c0>
 80078de:	3307      	adds	r3, #7
 80078e0:	10db      	asrs	r3, r3, #3
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078e8:	4413      	add	r3, r2
 80078ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80078ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078f2:	3320      	adds	r3, #32
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	425a      	negs	r2, r3
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	f002 0207 	and.w	r2, r2, #7
 8007902:	bf58      	it	pl
 8007904:	4253      	negpl	r3, r2
 8007906:	b21b      	sxth	r3, r3
 8007908:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800790c:	4b11      	ldr	r3, [pc, #68]	; (8007954 <Send_Service_Signal_Message+0x734>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	0a5b      	lsrs	r3, r3, #9
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <Send_Service_Signal_Message+0x712>
 800791a:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <Send_Service_Signal_Message+0x734>)
 800791c:	791b      	ldrb	r3, [r3, #4]
 800791e:	79fa      	ldrb	r2, [r7, #7]
 8007920:	429a      	cmp	r2, r3
 8007922:	d106      	bne.n	8007932 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007924:	480c      	ldr	r0, [pc, #48]	; (8007958 <Send_Service_Signal_Message+0x738>)
 8007926:	f01d fdb7 	bl	8025498 <puts>
		printf("Not Sending Reply");
 800792a:	480c      	ldr	r0, [pc, #48]	; (800795c <Send_Service_Signal_Message+0x73c>)
 800792c:	f01d fd18 	bl	8025360 <iprintf>
 8007930:	e009      	b.n	8007946 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007936:	b2d9      	uxtb	r1, r3
 8007938:	79fa      	ldrb	r2, [r7, #7]
 800793a:	f107 030c 	add.w	r3, r7, #12
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f80e 	bl	8007960 <Process_Sending_Reply>
	}
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	3754      	adds	r7, #84	; 0x54
 800794a:	46bd      	mov	sp, r7
 800794c:	bd90      	pop	{r4, r7, pc}
 800794e:	bf00      	nop
 8007950:	200015b4 	.word	0x200015b4
 8007954:	20001d88 	.word	0x20001d88
 8007958:	08026fe4 	.word	0x08026fe4
 800795c:	08026ffc 	.word	0x08026ffc

08007960 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b09c      	sub	sp, #112	; 0x70
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
 800796c:	4613      	mov	r3, r2
 800796e:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 8007970:	2300      	movs	r3, #0
 8007972:	60bb      	str	r3, [r7, #8]
 8007974:	f107 030c 	add.w	r3, r7, #12
 8007978:	2260      	movs	r2, #96	; 0x60
 800797a:	2100      	movs	r1, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f01d fc07 	bl	8025190 <memset>
	uint8_t uc_index = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 800798e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8007998:	4619      	mov	r1, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80079a2:	443b      	add	r3, r7
 80079a4:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80079ae:	e03c      	b.n	8007a2a <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 80079b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4413      	add	r3, r2
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2bef      	cmp	r3, #239	; 0xef
 80079bc:	d922      	bls.n	8007a04 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80079be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	781a      	ldrb	r2, [r3, #0]
 80079c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80079cc:	1c59      	adds	r1, r3, #1
 80079ce:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80079d2:	f022 020f 	bic.w	r2, r2, #15
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	3370      	adds	r3, #112	; 0x70
 80079da:	443b      	add	r3, r7
 80079dc:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80079e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80079ee:	1c59      	adds	r1, r3, #1
 80079f0:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80079f4:	f002 020f 	and.w	r2, r2, #15
 80079f8:	b2d2      	uxtb	r2, r2
 80079fa:	3370      	adds	r3, #112	; 0x70
 80079fc:	443b      	add	r3, r7
 80079fe:	f803 2c68 	strb.w	r2, [r3, #-104]
 8007a02:	e00d      	b.n	8007a20 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007a04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	441a      	add	r2, r3
 8007a0c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007a10:	1c59      	adds	r1, r3, #1
 8007a12:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007a16:	7812      	ldrb	r2, [r2, #0]
 8007a18:	3370      	adds	r3, #112	; 0x70
 8007a1a:	443b      	add	r3, r7
 8007a1c:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007a20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007a24:	3301      	adds	r3, #1
 8007a26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007a2a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d3bd      	bcc.n	80079b0 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007a34:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8007a3e:	3370      	adds	r3, #112	; 0x70
 8007a40:	443b      	add	r3, r7
 8007a42:	22f6      	movs	r2, #246	; 0xf6
 8007a44:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 8007a48:	78bb      	ldrb	r3, [r7, #2]
 8007a4a:	4a37      	ldr	r2, [pc, #220]	; (8007b28 <Process_Sending_Reply+0x1c8>)
 8007a4c:	5cd3      	ldrb	r3, [r2, r3]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d10b      	bne.n	8007a6a <Process_Sending_Reply+0x10a>
 8007a52:	4b36      	ldr	r3, [pc, #216]	; (8007b2c <Process_Sending_Reply+0x1cc>)
 8007a54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <Process_Sending_Reply+0x10a>
 8007a5c:	4b34      	ldr	r3, [pc, #208]	; (8007b30 <Process_Sending_Reply+0x1d0>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d102      	bne.n	8007a6a <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007a64:	4833      	ldr	r0, [pc, #204]	; (8007b34 <Process_Sending_Reply+0x1d4>)
 8007a66:	f001 f8f1 	bl	8008c4c <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 8007a6a:	78bb      	ldrb	r3, [r7, #2]
 8007a6c:	4a32      	ldr	r2, [pc, #200]	; (8007b38 <Process_Sending_Reply+0x1d8>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d10d      	bne.n	8007a94 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8007a78:	78bb      	ldrb	r3, [r7, #2]
 8007a7a:	4a30      	ldr	r2, [pc, #192]	; (8007b3c <Process_Sending_Reply+0x1dc>)
 8007a7c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8007a80:	f107 0008 	add.w	r0, r7, #8
 8007a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a88:	f008 fc6a 	bl	8010360 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = RESET;
 8007a8c:	78bb      	ldrb	r3, [r7, #2]
 8007a8e:	4a26      	ldr	r2, [pc, #152]	; (8007b28 <Process_Sending_Reply+0x1c8>)
 8007a90:	2100      	movs	r1, #0
 8007a92:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8007a94:	78bb      	ldrb	r3, [r7, #2]
 8007a96:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <Process_Sending_Reply+0x1d8>)
 8007a98:	4413      	add	r3, r2
 8007a9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d119      	bne.n	8007ad6 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007aa8:	e00e      	b.n	8007ac8 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 8007aaa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007aae:	3370      	adds	r3, #112	; 0x70
 8007ab0:	443b      	add	r3, r7
 8007ab2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	2003      	movs	r0, #3
 8007aba:	f010 f9ef 	bl	8017e9c <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 8007abe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007ac8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d3e9      	bcc.n	8007aaa <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 8007ad6:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <Process_Sending_Reply+0x1d0>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d102      	bne.n	8007ae4 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007ade:	4815      	ldr	r0, [pc, #84]	; (8007b34 <Process_Sending_Reply+0x1d4>)
 8007ae0:	f001 f8b4 	bl	8008c4c <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 8007ae4:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <Process_Sending_Reply+0x1cc>)
 8007ae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <Process_Sending_Reply+0x1cc>)
 8007af0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007af4:	461a      	mov	r2, r3
 8007af6:	2101      	movs	r1, #1
 8007af8:	480c      	ldr	r0, [pc, #48]	; (8007b2c <Process_Sending_Reply+0x1cc>)
 8007afa:	f000 ff01 	bl	8008900 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <Process_Sending_Reply+0x1cc>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fef7 	bl	8008900 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <Process_Sending_Reply+0x1d0>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d102      	bne.n	8007b20 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 8007b1a:	4809      	ldr	r0, [pc, #36]	; (8007b40 <Process_Sending_Reply+0x1e0>)
 8007b1c:	f001 f896 	bl	8008c4c <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007b20:	bf00      	nop
 8007b22:	3770      	adds	r7, #112	; 0x70
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20001454 	.word	0x20001454
 8007b2c:	2000203c 	.word	0x2000203c
 8007b30:	200009b5 	.word	0x200009b5
 8007b34:	08027570 	.word	0x08027570
 8007b38:	20000304 	.word	0x20000304
 8007b3c:	200013e0 	.word	0x200013e0
 8007b40:	080275d0 	.word	0x080275d0

08007b44 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8007b4e:	f010 fbfd 	bl	801834c <HAL_GetTick>
 8007b52:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	4a86      	ldr	r2, [pc, #536]	; (8007d70 <Check_Primary_r_Secondary+0x22c>)
 8007b58:	4413      	add	r3, r2
 8007b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	f000 8102 	beq.w	8007d68 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007b64:	79fa      	ldrb	r2, [r7, #7]
 8007b66:	4983      	ldr	r1, [pc, #524]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007b68:	4613      	mov	r3, r2
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	4413      	add	r3, r2
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	440b      	add	r3, r1
 8007b72:	3303      	adds	r3, #3
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d12b      	bne.n	8007bd2 <Check_Primary_r_Secondary+0x8e>
 8007b7a:	79fa      	ldrb	r2, [r7, #7]
 8007b7c:	497e      	ldr	r1, [pc, #504]	; (8007d78 <Check_Primary_r_Secondary+0x234>)
 8007b7e:	4613      	mov	r3, r2
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	4413      	add	r3, r2
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	440b      	add	r3, r1
 8007b88:	3303      	adds	r3, #3
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d120      	bne.n	8007bd2 <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007b90:	79fa      	ldrb	r2, [r7, #7]
 8007b92:	4978      	ldr	r1, [pc, #480]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007b94:	4613      	mov	r3, r2
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	4413      	add	r3, r2
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	440b      	add	r3, r1
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 80e1 	beq.w	8007d6a <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	4a71      	ldr	r2, [pc, #452]	; (8007d70 <Check_Primary_r_Secondary+0x22c>)
 8007bac:	3366      	adds	r3, #102	; 0x66
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4871      	ldr	r0, [pc, #452]	; (8007d7c <Check_Primary_r_Secondary+0x238>)
 8007bb8:	f01d fbd2 	bl	8025360 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007bbc:	79fa      	ldrb	r2, [r7, #7]
 8007bbe:	496d      	ldr	r1, [pc, #436]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	4413      	add	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	440b      	add	r3, r1
 8007bca:	3304      	adds	r3, #4
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007bd0:	e0cb      	b.n	8007d6a <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007bd2:	79fa      	ldrb	r2, [r7, #7]
 8007bd4:	4967      	ldr	r1, [pc, #412]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	4413      	add	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	440b      	add	r3, r1
 8007be0:	3303      	adds	r3, #3
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d12b      	bne.n	8007c40 <Check_Primary_r_Secondary+0xfc>
 8007be8:	79fa      	ldrb	r2, [r7, #7]
 8007bea:	4963      	ldr	r1, [pc, #396]	; (8007d78 <Check_Primary_r_Secondary+0x234>)
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	440b      	add	r3, r1
 8007bf6:	3303      	adds	r3, #3
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d120      	bne.n	8007c40 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007bfe:	79fa      	ldrb	r2, [r7, #7]
 8007c00:	495c      	ldr	r1, [pc, #368]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007c02:	4613      	mov	r3, r2
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4413      	add	r3, r2
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	440b      	add	r3, r1
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80aa 	beq.w	8007d6a <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	4a55      	ldr	r2, [pc, #340]	; (8007d70 <Check_Primary_r_Secondary+0x22c>)
 8007c1a:	3366      	adds	r3, #102	; 0x66
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	4619      	mov	r1, r3
 8007c24:	4856      	ldr	r0, [pc, #344]	; (8007d80 <Check_Primary_r_Secondary+0x23c>)
 8007c26:	f01d fb9b 	bl	8025360 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007c2a:	79fa      	ldrb	r2, [r7, #7]
 8007c2c:	4951      	ldr	r1, [pc, #324]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007c2e:	4613      	mov	r3, r2
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	4413      	add	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	440b      	add	r3, r1
 8007c38:	3304      	adds	r3, #4
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007c3e:	e094      	b.n	8007d6a <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007c40:	79fa      	ldrb	r2, [r7, #7]
 8007c42:	494c      	ldr	r1, [pc, #304]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007c44:	4613      	mov	r3, r2
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	4413      	add	r3, r2
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3303      	adds	r3, #3
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d13e      	bne.n	8007cd4 <Check_Primary_r_Secondary+0x190>
 8007c56:	79fa      	ldrb	r2, [r7, #7]
 8007c58:	4947      	ldr	r1, [pc, #284]	; (8007d78 <Check_Primary_r_Secondary+0x234>)
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4413      	add	r3, r2
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	440b      	add	r3, r1
 8007c64:	3303      	adds	r3, #3
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d133      	bne.n	8007cd4 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007c6c:	79fa      	ldrb	r2, [r7, #7]
 8007c6e:	4941      	ldr	r1, [pc, #260]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007c70:	4613      	mov	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	4413      	add	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	440b      	add	r3, r1
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d073      	beq.n	8007d6a <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	4a3a      	ldr	r2, [pc, #232]	; (8007d70 <Check_Primary_r_Secondary+0x22c>)
 8007c86:	3366      	adds	r3, #102	; 0x66
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	483c      	ldr	r0, [pc, #240]	; (8007d84 <Check_Primary_r_Secondary+0x240>)
 8007c92:	f01d fb65 	bl	8025360 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	493b      	ldr	r1, [pc, #236]	; (8007d88 <Check_Primary_r_Secondary+0x244>)
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	493a      	ldr	r1, [pc, #232]	; (8007d8c <Check_Primary_r_Secondary+0x248>)
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8007caa:	79fa      	ldrb	r2, [r7, #7]
 8007cac:	4931      	ldr	r1, [pc, #196]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007cae:	4613      	mov	r3, r2
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3310      	adds	r3, #16
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8007cbe:	79fa      	ldrb	r2, [r7, #7]
 8007cc0:	492c      	ldr	r1, [pc, #176]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	4413      	add	r3, r2
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	440b      	add	r3, r1
 8007ccc:	3304      	adds	r3, #4
 8007cce:	2201      	movs	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007cd2:	e04a      	b.n	8007d6a <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007cd4:	79fa      	ldrb	r2, [r7, #7]
 8007cd6:	4927      	ldr	r1, [pc, #156]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007cd8:	4613      	mov	r3, r2
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	4413      	add	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	440b      	add	r3, r1
 8007ce2:	3303      	adds	r3, #3
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d13f      	bne.n	8007d6a <Check_Primary_r_Secondary+0x226>
 8007cea:	79fa      	ldrb	r2, [r7, #7]
 8007cec:	4922      	ldr	r1, [pc, #136]	; (8007d78 <Check_Primary_r_Secondary+0x234>)
 8007cee:	4613      	mov	r3, r2
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	4413      	add	r3, r2
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	440b      	add	r3, r1
 8007cf8:	3303      	adds	r3, #3
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d134      	bne.n	8007d6a <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007d00:	79fa      	ldrb	r2, [r7, #7]
 8007d02:	491c      	ldr	r1, [pc, #112]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007d04:	4613      	mov	r3, r2
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	4413      	add	r3, r2
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	440b      	add	r3, r1
 8007d0e:	3304      	adds	r3, #4
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d029      	beq.n	8007d6a <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <Check_Primary_r_Secondary+0x22c>)
 8007d1a:	3366      	adds	r3, #102	; 0x66
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4619      	mov	r1, r3
 8007d24:	481a      	ldr	r0, [pc, #104]	; (8007d90 <Check_Primary_r_Secondary+0x24c>)
 8007d26:	f01d fb1b 	bl	8025360 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	4916      	ldr	r1, [pc, #88]	; (8007d88 <Check_Primary_r_Secondary+0x244>)
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	4915      	ldr	r1, [pc, #84]	; (8007d8c <Check_Primary_r_Secondary+0x248>)
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8007d3e:	79fa      	ldrb	r2, [r7, #7]
 8007d40:	490c      	ldr	r1, [pc, #48]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007d42:	4613      	mov	r3, r2
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3310      	adds	r3, #16
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8007d52:	79fa      	ldrb	r2, [r7, #7]
 8007d54:	4907      	ldr	r1, [pc, #28]	; (8007d74 <Check_Primary_r_Secondary+0x230>)
 8007d56:	4613      	mov	r3, r2
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	4413      	add	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	440b      	add	r3, r1
 8007d60:	3304      	adds	r3, #4
 8007d62:	2201      	movs	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e000      	b.n	8007d6a <Check_Primary_r_Secondary+0x226>
		return;
 8007d68:	bf00      	nop
			}
#endif

		}
	}
}
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000304 	.word	0x20000304
 8007d74:	20001aa0 	.word	0x20001aa0
 8007d78:	20001b90 	.word	0x20001b90
 8007d7c:	08027788 	.word	0x08027788
 8007d80:	080277c4 	.word	0x080277c4
 8007d84:	08027800 	.word	0x08027800
 8007d88:	2000132c 	.word	0x2000132c
 8007d8c:	20001354 	.word	0x20001354
 8007d90:	08027838 	.word	0x08027838

08007d94 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	4aac      	ldr	r2, [pc, #688]	; (8008054 <Check_Vital_CRC+0x2c0>)
 8007da2:	4413      	add	r3, r2
 8007da4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	f000 814f 	beq.w	800804c <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007dae:	79fa      	ldrb	r2, [r7, #7]
 8007db0:	49a9      	ldr	r1, [pc, #676]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007db2:	4613      	mov	r3, r2
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	4413      	add	r3, r2
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	440b      	add	r3, r1
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	6819      	ldr	r1, [r3, #0]
 8007dc0:	79fa      	ldrb	r2, [r7, #7]
 8007dc2:	48a6      	ldr	r0, [pc, #664]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	4403      	add	r3, r0
 8007dce:	3308      	adds	r3, #8
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4299      	cmp	r1, r3
 8007dd4:	f000 8092 	beq.w	8007efc <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007dd8:	79fa      	ldrb	r2, [r7, #7]
 8007dda:	49a0      	ldr	r1, [pc, #640]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007ddc:	4613      	mov	r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	4413      	add	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	440b      	add	r3, r1
 8007de6:	3308      	adds	r3, #8
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8086 	beq.w	8007efc <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007df0:	79fa      	ldrb	r2, [r7, #7]
 8007df2:	4999      	ldr	r1, [pc, #612]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007df4:	4613      	mov	r3, r2
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	4413      	add	r3, r2
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	440b      	add	r3, r1
 8007dfe:	3304      	adds	r3, #4
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d104      	bne.n	8007e10 <Check_Vital_CRC+0x7c>
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	4a95      	ldr	r2, [pc, #596]	; (8008060 <Check_Vital_CRC+0x2cc>)
 8007e0a:	5cd3      	ldrb	r3, [r2, r3]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d175      	bne.n	8007efc <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007e10:	79fa      	ldrb	r2, [r7, #7]
 8007e12:	4991      	ldr	r1, [pc, #580]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007e14:	4613      	mov	r3, r2
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	440b      	add	r3, r1
 8007e1e:	3308      	adds	r3, #8
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	79fa      	ldrb	r2, [r7, #7]
 8007e24:	488d      	ldr	r0, [pc, #564]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007e26:	4613      	mov	r3, r2
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	4413      	add	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	4403      	add	r3, r0
 8007e30:	3308      	adds	r3, #8
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	1acb      	subs	r3, r1, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfb8      	it	lt
 8007e3a:	425b      	neglt	r3, r3
 8007e3c:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d104      	bne.n	8007e4e <Check_Vital_CRC+0xba>
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	4a87      	ldr	r2, [pc, #540]	; (8008064 <Check_Vital_CRC+0x2d0>)
 8007e48:	5cd3      	ldrb	r3, [r2, r3]
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d14c      	bne.n	8007ee8 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	4a84      	ldr	r2, [pc, #528]	; (8008064 <Check_Vital_CRC+0x2d0>)
 8007e52:	2100      	movs	r1, #0
 8007e54:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	4a7e      	ldr	r2, [pc, #504]	; (8008054 <Check_Vital_CRC+0x2c0>)
 8007e5a:	3366      	adds	r3, #102	; 0x66
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4880      	ldr	r0, [pc, #512]	; (8008068 <Check_Vital_CRC+0x2d4>)
 8007e66:	f01d fa7b 	bl	8025360 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007e6a:	79fa      	ldrb	r2, [r7, #7]
 8007e6c:	497a      	ldr	r1, [pc, #488]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007e6e:	4613      	mov	r3, r2
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	4413      	add	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	440b      	add	r3, r1
 8007e78:	3308      	adds	r3, #8
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	487b      	ldr	r0, [pc, #492]	; (800806c <Check_Vital_CRC+0x2d8>)
 8007e80:	f01d fa6e 	bl	8025360 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007e84:	79fa      	ldrb	r2, [r7, #7]
 8007e86:	4975      	ldr	r1, [pc, #468]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007e88:	4613      	mov	r3, r2
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	440b      	add	r3, r1
 8007e92:	3308      	adds	r3, #8
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4619      	mov	r1, r3
 8007e98:	4875      	ldr	r0, [pc, #468]	; (8008070 <Check_Vital_CRC+0x2dc>)
 8007e9a:	f01d fa61 	bl	8025360 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007e9e:	4875      	ldr	r0, [pc, #468]	; (8008074 <Check_Vital_CRC+0x2e0>)
 8007ea0:	f01d fafa 	bl	8025498 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007ea4:	79fa      	ldrb	r2, [r7, #7]
 8007ea6:	79f9      	ldrb	r1, [r7, #7]
 8007ea8:	486c      	ldr	r0, [pc, #432]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007eaa:	4613      	mov	r3, r2
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4413      	add	r3, r2
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	4403      	add	r3, r0
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	486f      	ldr	r0, [pc, #444]	; (8008078 <Check_Vital_CRC+0x2e4>)
 8007eba:	010b      	lsls	r3, r1, #4
 8007ebc:	4403      	add	r3, r0
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007ec2:	79f9      	ldrb	r1, [r7, #7]
 8007ec4:	79fa      	ldrb	r2, [r7, #7]
 8007ec6:	4865      	ldr	r0, [pc, #404]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007ec8:	460b      	mov	r3, r1
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	440b      	add	r3, r1
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	4403      	add	r3, r0
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	6819      	ldr	r1, [r3, #0]
 8007ed6:	4860      	ldr	r0, [pc, #384]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007ed8:	4613      	mov	r3, r2
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	4403      	add	r3, r0
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	6019      	str	r1, [r3, #0]
 8007ee6:	e009      	b.n	8007efc <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d106      	bne.n	8007efc <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	4a5c      	ldr	r2, [pc, #368]	; (8008064 <Check_Vital_CRC+0x2d0>)
 8007ef2:	5cd2      	ldrb	r2, [r2, r3]
 8007ef4:	3201      	adds	r2, #1
 8007ef6:	b2d1      	uxtb	r1, r2
 8007ef8:	4a5a      	ldr	r2, [pc, #360]	; (8008064 <Check_Vital_CRC+0x2d0>)
 8007efa:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007efc:	79fa      	ldrb	r2, [r7, #7]
 8007efe:	4956      	ldr	r1, [pc, #344]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007f00:	4613      	mov	r3, r2
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	4413      	add	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	440b      	add	r3, r1
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	6819      	ldr	r1, [r3, #0]
 8007f0e:	79fa      	ldrb	r2, [r7, #7]
 8007f10:	4852      	ldr	r0, [pc, #328]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007f12:	4613      	mov	r3, r2
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	4413      	add	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	4403      	add	r3, r0
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4299      	cmp	r1, r3
 8007f22:	f000 8094 	beq.w	800804e <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007f26:	79fa      	ldrb	r2, [r7, #7]
 8007f28:	494c      	ldr	r1, [pc, #304]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	4413      	add	r3, r2
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	440b      	add	r3, r1
 8007f34:	330c      	adds	r3, #12
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8088 	beq.w	800804e <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007f3e:	79fa      	ldrb	r2, [r7, #7]
 8007f40:	4945      	ldr	r1, [pc, #276]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007f42:	4613      	mov	r3, r2
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	4413      	add	r3, r2
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d104      	bne.n	8007f5e <Check_Vital_CRC+0x1ca>
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	4a42      	ldr	r2, [pc, #264]	; (8008060 <Check_Vital_CRC+0x2cc>)
 8007f58:	5cd3      	ldrb	r3, [r2, r3]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d177      	bne.n	800804e <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007f5e:	79fa      	ldrb	r2, [r7, #7]
 8007f60:	493d      	ldr	r1, [pc, #244]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007f62:	4613      	mov	r3, r2
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	4413      	add	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	440b      	add	r3, r1
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	79fa      	ldrb	r2, [r7, #7]
 8007f72:	483a      	ldr	r0, [pc, #232]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007f74:	4613      	mov	r3, r2
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	4413      	add	r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4403      	add	r3, r0
 8007f7e:	330c      	adds	r3, #12
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	1acb      	subs	r3, r1, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfb8      	it	lt
 8007f88:	425b      	neglt	r3, r3
 8007f8a:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d104      	bne.n	8007f9c <Check_Vital_CRC+0x208>
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	4a39      	ldr	r2, [pc, #228]	; (800807c <Check_Vital_CRC+0x2e8>)
 8007f96:	5cd3      	ldrb	r3, [r2, r3]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d14c      	bne.n	8008036 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	4a37      	ldr	r2, [pc, #220]	; (800807c <Check_Vital_CRC+0x2e8>)
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	4a2b      	ldr	r2, [pc, #172]	; (8008054 <Check_Vital_CRC+0x2c0>)
 8007fa8:	3366      	adds	r3, #102	; 0x66
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4833      	ldr	r0, [pc, #204]	; (8008080 <Check_Vital_CRC+0x2ec>)
 8007fb4:	f01d f9d4 	bl	8025360 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007fb8:	79fa      	ldrb	r2, [r7, #7]
 8007fba:	4927      	ldr	r1, [pc, #156]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	4413      	add	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	440b      	add	r3, r1
 8007fc6:	330c      	adds	r3, #12
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	482d      	ldr	r0, [pc, #180]	; (8008084 <Check_Vital_CRC+0x2f0>)
 8007fce:	f01d f9c7 	bl	8025360 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007fd2:	79fa      	ldrb	r2, [r7, #7]
 8007fd4:	4921      	ldr	r1, [pc, #132]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	4413      	add	r3, r2
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	440b      	add	r3, r1
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4828      	ldr	r0, [pc, #160]	; (8008088 <Check_Vital_CRC+0x2f4>)
 8007fe8:	f01d f9ba 	bl	8025360 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007fec:	4827      	ldr	r0, [pc, #156]	; (800808c <Check_Vital_CRC+0x2f8>)
 8007fee:	f01d fa53 	bl	8025498 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007ff2:	79fa      	ldrb	r2, [r7, #7]
 8007ff4:	79f9      	ldrb	r1, [r7, #7]
 8007ff6:	4819      	ldr	r0, [pc, #100]	; (800805c <Check_Vital_CRC+0x2c8>)
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4403      	add	r3, r0
 8008002:	330c      	adds	r3, #12
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	481c      	ldr	r0, [pc, #112]	; (8008078 <Check_Vital_CRC+0x2e4>)
 8008008:	010b      	lsls	r3, r1, #4
 800800a:	4403      	add	r3, r0
 800800c:	330c      	adds	r3, #12
 800800e:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8008010:	79f9      	ldrb	r1, [r7, #7]
 8008012:	79fa      	ldrb	r2, [r7, #7]
 8008014:	4811      	ldr	r0, [pc, #68]	; (800805c <Check_Vital_CRC+0x2c8>)
 8008016:	460b      	mov	r3, r1
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	440b      	add	r3, r1
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4403      	add	r3, r0
 8008020:	330c      	adds	r3, #12
 8008022:	6819      	ldr	r1, [r3, #0]
 8008024:	480c      	ldr	r0, [pc, #48]	; (8008058 <Check_Vital_CRC+0x2c4>)
 8008026:	4613      	mov	r3, r2
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	4413      	add	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	4403      	add	r3, r0
 8008030:	330c      	adds	r3, #12
 8008032:	6019      	str	r1, [r3, #0]
 8008034:	e00b      	b.n	800804e <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d108      	bne.n	800804e <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	4a0f      	ldr	r2, [pc, #60]	; (800807c <Check_Vital_CRC+0x2e8>)
 8008040:	5cd2      	ldrb	r2, [r2, r3]
 8008042:	3201      	adds	r2, #1
 8008044:	b2d1      	uxtb	r1, r2
 8008046:	4a0d      	ldr	r2, [pc, #52]	; (800807c <Check_Vital_CRC+0x2e8>)
 8008048:	54d1      	strb	r1, [r2, r3]
 800804a:	e000      	b.n	800804e <Check_Vital_CRC+0x2ba>
		return;
 800804c:	bf00      	nop
				}
			}
		}
	}
}
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000304 	.word	0x20000304
 8008058:	20001aa0 	.word	0x20001aa0
 800805c:	20001b90 	.word	0x20001b90
 8008060:	2000137c 	.word	0x2000137c
 8008064:	20002464 	.word	0x20002464
 8008068:	08027874 	.word	0x08027874
 800806c:	080278b8 	.word	0x080278b8
 8008070:	080278dc 	.word	0x080278dc
 8008074:	08027900 	.word	0x08027900
 8008078:	200015f0 	.word	0x200015f0
 800807c:	20002470 	.word	0x20002470
 8008080:	08027928 	.word	0x08027928
 8008084:	0802796c 	.word	0x0802796c
 8008088:	08027990 	.word	0x08027990
 800808c:	080279b4 	.word	0x080279b4

08008090 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <Check_Other_EiPC_Packet+0x38>)
 800809e:	4413      	add	r3, r2
 80080a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d007      	beq.n	80080b8 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fd4a 	bl	8007b44 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fe6e 	bl	8007d94 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 fa66 	bl	800958c <CheckOtherLinkStatus>
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000304 	.word	0x20000304

080080cc <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80080d6:	493c      	ldr	r1, [pc, #240]	; (80081c8 <CheckLinkEstablishTimeout+0xfc>)
 80080d8:	483c      	ldr	r0, [pc, #240]	; (80081cc <CheckLinkEstablishTimeout+0x100>)
 80080da:	f7f8 f8b1 	bl	8000240 <strcmp>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d06c      	beq.n	80081be <CheckLinkEstablishTimeout+0xf2>
	{
		return;
	}

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80080e4:	2300      	movs	r3, #0
 80080e6:	71fb      	strb	r3, [r7, #7]
 80080e8:	e062      	b.n	80081b0 <CheckLinkEstablishTimeout+0xe4>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	4a38      	ldr	r2, [pc, #224]	; (80081d0 <CheckLinkEstablishTimeout+0x104>)
 80080ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f007 fdc4 	bl	800fc80 <HAL_Elaps_Ticks>
 80080f8:	4602      	mov	r2, r0
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	4935      	ldr	r1, [pc, #212]	; (80081d4 <CheckLinkEstablishTimeout+0x108>)
 80080fe:	339e      	adds	r3, #158	; 0x9e
 8008100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008104:	429a      	cmp	r2, r3
 8008106:	d950      	bls.n	80081aa <CheckLinkEstablishTimeout+0xde>
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	4a33      	ldr	r2, [pc, #204]	; (80081d8 <CheckLinkEstablishTimeout+0x10c>)
 800810c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	492f      	ldr	r1, [pc, #188]	; (80081d0 <CheckLinkEstablishTimeout+0x104>)
 8008114:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008118:	429a      	cmp	r2, r3
 800811a:	d046      	beq.n	80081aa <CheckLinkEstablishTimeout+0xde>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	492b      	ldr	r1, [pc, #172]	; (80081d0 <CheckLinkEstablishTimeout+0x104>)
 8008122:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008126:	492c      	ldr	r1, [pc, #176]	; (80081d8 <CheckLinkEstablishTimeout+0x10c>)
 8008128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	4a29      	ldr	r2, [pc, #164]	; (80081d4 <CheckLinkEstablishTimeout+0x108>)
 8008130:	3366      	adds	r3, #102	; 0x66
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4619      	mov	r1, r3
 800813a:	4828      	ldr	r0, [pc, #160]	; (80081dc <CheckLinkEstablishTimeout+0x110>)
 800813c:	f01d f910 	bl	8025360 <iprintf>
			SelfLinkFlag[Traverser] = RESET;
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	4a27      	ldr	r2, [pc, #156]	; (80081e0 <CheckLinkEstablishTimeout+0x114>)
 8008144:	2100      	movs	r1, #0
 8008146:	54d1      	strb	r1, [r2, r3]
			memset(&Main_Relays_st[Traverser].RelayIPS_Buff,0,sizeof(Main_Relays_st[Traverser].RelayIPS_Buff));
 8008148:	79fa      	ldrb	r2, [r7, #7]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4a24      	ldr	r2, [pc, #144]	; (80081e4 <CheckLinkEstablishTimeout+0x118>)
 8008154:	4413      	add	r3, r2
 8008156:	3301      	adds	r3, #1
 8008158:	2210      	movs	r2, #16
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f01d f817 	bl	8025190 <memset>
			Main_Relays_st[Traverser].RelayIPS_CRC = 0;
 8008162:	79fa      	ldrb	r2, [r7, #7]
 8008164:	491f      	ldr	r1, [pc, #124]	; (80081e4 <CheckLinkEstablishTimeout+0x118>)
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	3312      	adds	r3, #18
 8008172:	2200      	movs	r2, #0
 8008174:	801a      	strh	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8008176:	79fa      	ldrb	r2, [r7, #7]
 8008178:	491b      	ldr	r1, [pc, #108]	; (80081e8 <CheckLinkEstablishTimeout+0x11c>)
 800817a:	4613      	mov	r3, r2
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	4413      	add	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	440b      	add	r3, r1
 8008184:	3310      	adds	r3, #16
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	79fc      	ldrb	r4, [r7, #7]
 800818a:	4618      	mov	r0, r3
 800818c:	f007 fd78 	bl	800fc80 <HAL_Elaps_Ticks>
 8008190:	4602      	mov	r2, r0
 8008192:	4915      	ldr	r1, [pc, #84]	; (80081e8 <CheckLinkEstablishTimeout+0x11c>)
 8008194:	4623      	mov	r3, r4
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	4423      	add	r3, r4
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	440b      	add	r3, r1
 800819e:	3310      	adds	r3, #16
 80081a0:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 f9f1 	bl	800958c <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	3301      	adds	r3, #1
 80081ae:	71fb      	strb	r3, [r7, #7]
 80081b0:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <CheckLinkEstablishTimeout+0x108>)
 80081b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081b6:	79fa      	ldrb	r2, [r7, #7]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d396      	bcc.n	80080ea <CheckLinkEstablishTimeout+0x1e>
 80081bc:	e000      	b.n	80081c0 <CheckLinkEstablishTimeout+0xf4>
		return;
 80081be:	bf00      	nop
		}
	}
}
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	08026b0c 	.word	0x08026b0c
 80081cc:	20000305 	.word	0x20000305
 80081d0:	2000129c 	.word	0x2000129c
 80081d4:	20000304 	.word	0x20000304
 80081d8:	2000247c 	.word	0x2000247c
 80081dc:	080279dc 	.word	0x080279dc
 80081e0:	200012ec 	.word	0x200012ec
 80081e4:	200022ac 	.word	0x200022ac
 80081e8:	20001aa0 	.word	0x20001aa0

080081ec <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 80081ec:	b590      	push	{r4, r7, lr}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80081f2:	2300      	movs	r3, #0
 80081f4:	71fb      	strb	r3, [r7, #7]
 80081f6:	e052      	b.n	800829e <Send_Self_Sharing+0xb2>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	4a2d      	ldr	r2, [pc, #180]	; (80082b0 <Send_Self_Sharing+0xc4>)
 80081fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008200:	4618      	mov	r0, r3
 8008202:	f007 fd3d 	bl	800fc80 <HAL_Elaps_Ticks>
 8008206:	4602      	mov	r2, r0
 8008208:	4b2a      	ldr	r3, [pc, #168]	; (80082b4 <Send_Self_Sharing+0xc8>)
 800820a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800820e:	429a      	cmp	r2, r3
 8008210:	d942      	bls.n	8008298 <Send_Self_Sharing+0xac>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8008212:	79fa      	ldrb	r2, [r7, #7]
 8008214:	4928      	ldr	r1, [pc, #160]	; (80082b8 <Send_Self_Sharing+0xcc>)
 8008216:	4613      	mov	r3, r2
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	4413      	add	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	440b      	add	r3, r1
 8008220:	3301      	adds	r3, #1
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8008226:	79f9      	ldrb	r1, [r7, #7]
 8008228:	79fa      	ldrb	r2, [r7, #7]
 800822a:	4824      	ldr	r0, [pc, #144]	; (80082bc <Send_Self_Sharing+0xd0>)
 800822c:	460b      	mov	r3, r1
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	440b      	add	r3, r1
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4403      	add	r3, r0
 8008236:	3301      	adds	r3, #1
 8008238:	7818      	ldrb	r0, [r3, #0]
 800823a:	491f      	ldr	r1, [pc, #124]	; (80082b8 <Send_Self_Sharing+0xcc>)
 800823c:	4613      	mov	r3, r2
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	4413      	add	r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	440b      	add	r3, r1
 8008246:	3302      	adds	r3, #2
 8008248:	4602      	mov	r2, r0
 800824a:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800824c:	2218      	movs	r2, #24
 800824e:	2100      	movs	r1, #0
 8008250:	481b      	ldr	r0, [pc, #108]	; (80082c0 <Send_Self_Sharing+0xd4>)
 8008252:	f01c ff9d 	bl	8025190 <memset>
			Tx_Ei_self_sharing_st[Traverser].Peer_Index = Traverser;
 8008256:	79fa      	ldrb	r2, [r7, #7]
 8008258:	4917      	ldr	r1, [pc, #92]	; (80082b8 <Send_Self_Sharing+0xcc>)
 800825a:	4613      	mov	r3, r2
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	4413      	add	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	440b      	add	r3, r1
 8008264:	79fa      	ldrb	r2, [r7, #7]
 8008266:	701a      	strb	r2, [r3, #0]
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8008268:	79fa      	ldrb	r2, [r7, #7]
 800826a:	4613      	mov	r3, r2
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	4413      	add	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	4a11      	ldr	r2, [pc, #68]	; (80082b8 <Send_Self_Sharing+0xcc>)
 8008274:	4413      	add	r3, r2
 8008276:	2218      	movs	r2, #24
 8008278:	4619      	mov	r1, r3
 800827a:	4811      	ldr	r0, [pc, #68]	; (80082c0 <Send_Self_Sharing+0xd4>)
 800827c:	f01c ff60 	bl	8025140 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8008280:	f240 2001 	movw	r0, #513	; 0x201
 8008284:	f008 fab0 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8008288:	79fc      	ldrb	r4, [r7, #7]
 800828a:	f010 f85f 	bl	801834c <HAL_GetTick>
 800828e:	4603      	mov	r3, r0
 8008290:	4a07      	ldr	r2, [pc, #28]	; (80082b0 <Send_Self_Sharing+0xc4>)
 8008292:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8008296:	e008      	b.n	80082aa <Send_Self_Sharing+0xbe>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	3301      	adds	r3, #1
 800829c:	71fb      	strb	r3, [r7, #7]
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <Send_Self_Sharing+0xc8>)
 80082a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082a4:	79fa      	ldrb	r2, [r7, #7]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d3a6      	bcc.n	80081f8 <Send_Self_Sharing+0xc>
		}
	}
}
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}
 80082b0:	200011b4 	.word	0x200011b4
 80082b4:	20000304 	.word	0x20000304
 80082b8:	20001aa0 	.word	0x20001aa0
 80082bc:	200020f4 	.word	0x200020f4
 80082c0:	20001c80 	.word	0x20001c80

080082c4 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 80082c8:	4b29      	ldr	r3, [pc, #164]	; (8008370 <Detect_CAN_Xchange_Failure+0xac>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 80082d0:	f00c fda0 	bl	8014e14 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80082d4:	4927      	ldr	r1, [pc, #156]	; (8008374 <Detect_CAN_Xchange_Failure+0xb0>)
 80082d6:	4828      	ldr	r0, [pc, #160]	; (8008378 <Detect_CAN_Xchange_Failure+0xb4>)
 80082d8:	f7f7 ffb2 	bl	8000240 <strcmp>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 80082e2:	4b23      	ldr	r3, [pc, #140]	; (8008370 <Detect_CAN_Xchange_Failure+0xac>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
		return;
 80082e8:	e040      	b.n	800836c <Detect_CAN_Xchange_Failure+0xa8>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 80082ea:	4b24      	ldr	r3, [pc, #144]	; (800837c <Detect_CAN_Xchange_Failure+0xb8>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f007 fcc6 	bl	800fc80 <HAL_Elaps_Ticks>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b22      	ldr	r3, [pc, #136]	; (8008380 <Detect_CAN_Xchange_Failure+0xbc>)
 80082f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d335      	bcc.n	800836c <Detect_CAN_Xchange_Failure+0xa8>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8008300:	4b20      	ldr	r3, [pc, #128]	; (8008384 <Detect_CAN_Xchange_Failure+0xc0>)
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	4b1d      	ldr	r3, [pc, #116]	; (800837c <Detect_CAN_Xchange_Failure+0xb8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d02f      	beq.n	800836c <Detect_CAN_Xchange_Failure+0xa8>
		{
			Is_CAN_Exchange_happening = NO;
 800830c:	4b18      	ldr	r3, [pc, #96]	; (8008370 <Detect_CAN_Xchange_Failure+0xac>)
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8008312:	4b1a      	ldr	r3, [pc, #104]	; (800837c <Detect_CAN_Xchange_Failure+0xb8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1b      	ldr	r2, [pc, #108]	; (8008384 <Detect_CAN_Xchange_Failure+0xc0>)
 8008318:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 800831a:	4b18      	ldr	r3, [pc, #96]	; (800837c <Detect_CAN_Xchange_Failure+0xb8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f007 fcae 	bl	800fc80 <HAL_Elaps_Ticks>
 8008324:	4603      	mov	r3, r0
 8008326:	4a18      	ldr	r2, [pc, #96]	; (8008388 <Detect_CAN_Xchange_Failure+0xc4>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	099b      	lsrs	r3, r3, #6
 800832e:	4619      	mov	r1, r3
 8008330:	4816      	ldr	r0, [pc, #88]	; (800838c <Detect_CAN_Xchange_Failure+0xc8>)
 8008332:	f01d f815 	bl	8025360 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8008336:	4816      	ldr	r0, [pc, #88]	; (8008390 <Detect_CAN_Xchange_Failure+0xcc>)
 8008338:	f01d f8ae 	bl	8025498 <puts>
			memset(&Rx_Ei_self_sharing_st,0,(sizeof(EI_SELF_SHARING_t)* EI_data.Hitachi_st.PeersCnt));
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <Detect_CAN_Xchange_Failure+0xbc>)
 800833e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008342:	461a      	mov	r2, r3
 8008344:	4613      	mov	r3, r2
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	4413      	add	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	461a      	mov	r2, r3
 800834e:	2100      	movs	r1, #0
 8008350:	4810      	ldr	r0, [pc, #64]	; (8008394 <Detect_CAN_Xchange_Failure+0xd0>)
 8008352:	f01c ff1d 	bl	8025190 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8008356:	22a2      	movs	r2, #162	; 0xa2
 8008358:	2100      	movs	r1, #0
 800835a:	480f      	ldr	r0, [pc, #60]	; (8008398 <Detect_CAN_Xchange_Failure+0xd4>)
 800835c:	f01c ff18 	bl	8025190 <memset>
			ReArrangedVitalData();
 8008360:	f001 fe18 	bl	8009f94 <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008364:	f240 1019 	movw	r0, #281	; 0x119
 8008368:	f008 fa3e 	bl	80107e8 <TransmitCanPkt>
		}
	}
}
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000108 	.word	0x20000108
 8008374:	08026b0c 	.word	0x08026b0c
 8008378:	20000305 	.word	0x20000305
 800837c:	200011b0 	.word	0x200011b0
 8008380:	20000304 	.word	0x20000304
 8008384:	200024a4 	.word	0x200024a4
 8008388:	10624dd3 	.word	0x10624dd3
 800838c:	080279fc 	.word	0x080279fc
 8008390:	08027a2c 	.word	0x08027a2c
 8008394:	20001b90 	.word	0x20001b90
 8008398:	2000146c 	.word	0x2000146c

0800839c <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b0ae      	sub	sp, #184	; 0xb8
 80083a0:	af00      	add	r7, sp, #0

#ifdef EI_1
	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 80083a2:	2300      	movs	r3, #0
 80083a4:	607b      	str	r3, [r7, #4]
 80083a6:	f107 0308 	add.w	r3, r7, #8
 80083aa:	22a6      	movs	r2, #166	; 0xa6
 80083ac:	2100      	movs	r1, #0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f01c feee 	bl	8025190 <memset>
	uint16_t Serial_Byte = RESET;
 80083b4:	2300      	movs	r3, #0
 80083b6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif


	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 80083ba:	4bc9      	ldr	r3, [pc, #804]	; (80086e0 <Process_Send_Signals_2_MIE+0x344>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f007 fc5e 	bl	800fc80 <HAL_Elaps_Ticks>
 80083c4:	4602      	mov	r2, r0
 80083c6:	4bc7      	ldr	r3, [pc, #796]	; (80086e4 <Process_Send_Signals_2_MIE+0x348>)
 80083c8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80083cc:	429a      	cmp	r2, r3
 80083ce:	f240 8282 	bls.w	80088d6 <Process_Send_Signals_2_MIE+0x53a>
	{
		uint8_t Traverser = RESET;
 80083d2:	2300      	movs	r3, #0
 80083d4:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = RESET;
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80083de:	2300      	movs	r3, #0
 80083e0:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80083e4:	e0c6      	b.n	8008574 <Process_Send_Signals_2_MIE+0x1d8>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 80083e6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80083ea:	4abf      	ldr	r2, [pc, #764]	; (80086e8 <Process_Send_Signals_2_MIE+0x34c>)
 80083ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d11d      	bne.n	8008430 <Process_Send_Signals_2_MIE+0x94>
 80083f4:	49bd      	ldr	r1, [pc, #756]	; (80086ec <Process_Send_Signals_2_MIE+0x350>)
 80083f6:	48be      	ldr	r0, [pc, #760]	; (80086f0 <Process_Send_Signals_2_MIE+0x354>)
 80083f8:	f7f7 ff22 	bl	8000240 <strcmp>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d016      	beq.n	8008430 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008402:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008406:	4ab7      	ldr	r2, [pc, #732]	; (80086e4 <Process_Send_Signals_2_MIE+0x348>)
 8008408:	3366      	adds	r3, #102	; 0x66
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4619      	mov	r1, r3
 8008412:	48b8      	ldr	r0, [pc, #736]	; (80086f4 <Process_Send_Signals_2_MIE+0x358>)
 8008414:	f01c ffa4 	bl	8025360 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008418:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	4ab6      	ldr	r2, [pc, #728]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 8008420:	4413      	add	r3, r2
 8008422:	3302      	adds	r3, #2
 8008424:	2210      	movs	r2, #16
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f01c feb1 	bl	8025190 <memset>
				continue;
 800842e:	e09c      	b.n	800856a <Process_Send_Signals_2_MIE+0x1ce>
			}
			Choice = RESET;
 8008430:	2300      	movs	r3, #0
 8008432:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008436:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800843a:	4ab0      	ldr	r2, [pc, #704]	; (80086fc <Process_Send_Signals_2_MIE+0x360>)
 800843c:	5cd3      	ldrb	r3, [r2, r3]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d106      	bne.n	8008450 <Process_Send_Signals_2_MIE+0xb4>
 8008442:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008446:	f043 0301 	orr.w	r3, r3, #1
 800844a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800844e:	e005      	b.n	800845c <Process_Send_Signals_2_MIE+0xc0>
 8008450:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008454:	f023 0301 	bic.w	r3, r3, #1
 8008458:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(SelfLinkFlag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 800845c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008460:	4aa7      	ldr	r2, [pc, #668]	; (8008700 <Process_Send_Signals_2_MIE+0x364>)
 8008462:	5cd3      	ldrb	r3, [r2, r3]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d106      	bne.n	8008476 <Process_Send_Signals_2_MIE+0xda>
 8008468:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008474:	e005      	b.n	8008482 <Process_Send_Signals_2_MIE+0xe6>
 8008476:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800847a:	f023 0302 	bic.w	r3, r3, #2
 800847e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			if(Debug_flag == 1)
 8008482:	4ba0      	ldr	r3, [pc, #640]	; (8008704 <Process_Send_Signals_2_MIE+0x368>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d10c      	bne.n	80084a4 <Process_Send_Signals_2_MIE+0x108>
			{
				printf("Choice:%02X|%lu\n",Choice,EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800848a:	f897 10b4 	ldrb.w	r1, [r7, #180]	; 0xb4
 800848e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008492:	4a94      	ldr	r2, [pc, #592]	; (80086e4 <Process_Send_Signals_2_MIE+0x348>)
 8008494:	3366      	adds	r3, #102	; 0x66
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	461a      	mov	r2, r3
 800849e:	489a      	ldr	r0, [pc, #616]	; (8008708 <Process_Send_Signals_2_MIE+0x36c>)
 80084a0:	f01c ff5e 	bl	8025360 <iprintf>
			}

			switch(Choice)
 80084a4:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d853      	bhi.n	8008554 <Process_Send_Signals_2_MIE+0x1b8>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <Process_Send_Signals_2_MIE+0x118>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084dd 	.word	0x080084dd
 80084bc:	08008505 	.word	0x08008505
 80084c0:	0800852d 	.word	0x0800852d
			{
			case BOTHCARD_LINK_NOK:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 80084c4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	4a8b      	ldr	r2, [pc, #556]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 80084cc:	4413      	add	r3, r2
 80084ce:	3302      	adds	r3, #2
 80084d0:	2210      	movs	r2, #16
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f01c fe5b 	bl	8025190 <memset>
				break;
 80084da:	e046      	b.n	800856a <Process_Send_Signals_2_MIE+0x1ce>

			case OTHERCARD_LINK_OK:
				/*printf("\nOtherCard SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80084dc:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	4a85      	ldr	r2, [pc, #532]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 80084e4:	4413      	add	r3, r2
 80084e6:	1c98      	adds	r0, r3, #2
 80084e8:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4a85      	ldr	r2, [pc, #532]	; (800870c <Process_Send_Signals_2_MIE+0x370>)
 80084f6:	4413      	add	r3, r2
 80084f8:	3301      	adds	r3, #1
 80084fa:	2210      	movs	r2, #16
 80084fc:	4619      	mov	r1, r3
 80084fe:	f01c fe1f 	bl	8025140 <memcpy>
				break;
 8008502:	e032      	b.n	800856a <Process_Send_Signals_2_MIE+0x1ce>
			case THISCARD_LINK_OK:
				/*printf("\nOnly This Card SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008504:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008508:	011b      	lsls	r3, r3, #4
 800850a:	4a7b      	ldr	r2, [pc, #492]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 800850c:	4413      	add	r3, r2
 800850e:	1c98      	adds	r0, r3, #2
 8008510:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4a7c      	ldr	r2, [pc, #496]	; (8008710 <Process_Send_Signals_2_MIE+0x374>)
 800851e:	4413      	add	r3, r2
 8008520:	3301      	adds	r3, #1
 8008522:	2210      	movs	r2, #16
 8008524:	4619      	mov	r1, r3
 8008526:	f01c fe0b 	bl	8025140 <memcpy>
				break;
 800852a:	e01e      	b.n	800856a <Process_Send_Signals_2_MIE+0x1ce>
			case BOTHCARD_LINK_OK:
				/*printf("\nBothCard SET3\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 800852c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	4a71      	ldr	r2, [pc, #452]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 8008534:	4413      	add	r3, r2
 8008536:	1c98      	adds	r0, r3, #2
 8008538:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4a72      	ldr	r2, [pc, #456]	; (8008710 <Process_Send_Signals_2_MIE+0x374>)
 8008546:	4413      	add	r3, r2
 8008548:	3301      	adds	r3, #1
 800854a:	2210      	movs	r2, #16
 800854c:	4619      	mov	r1, r3
 800854e:	f01c fdf7 	bl	8025140 <memcpy>
				break;
 8008552:	e00a      	b.n	800856a <Process_Send_Signals_2_MIE+0x1ce>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008554:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	4a67      	ldr	r2, [pc, #412]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 800855c:	4413      	add	r3, r2
 800855e:	3302      	adds	r3, #2
 8008560:	2210      	movs	r2, #16
 8008562:	2100      	movs	r1, #0
 8008564:	4618      	mov	r0, r3
 8008566:	f01c fe13 	bl	8025190 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800856a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800856e:	3301      	adds	r3, #1
 8008570:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008574:	4b5b      	ldr	r3, [pc, #364]	; (80086e4 <Process_Send_Signals_2_MIE+0x348>)
 8008576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800857a:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 800857e:	429a      	cmp	r2, r3
 8008580:	f4ff af31 	bcc.w	80083e6 <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008584:	4959      	ldr	r1, [pc, #356]	; (80086ec <Process_Send_Signals_2_MIE+0x350>)
 8008586:	485a      	ldr	r0, [pc, #360]	; (80086f0 <Process_Send_Signals_2_MIE+0x354>)
 8008588:	f7f7 fe5a 	bl	8000240 <strcmp>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <Process_Send_Signals_2_MIE+0x1fc>
		{
			Is_CAN_Exchange_happening = YES;
 8008592:	4b60      	ldr	r3, [pc, #384]	; (8008714 <Process_Send_Signals_2_MIE+0x378>)
 8008594:	2201      	movs	r2, #1
 8008596:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008598:	4b5e      	ldr	r3, [pc, #376]	; (8008714 <Process_Send_Signals_2_MIE+0x378>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <Process_Send_Signals_2_MIE+0x21a>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 80085a0:	485d      	ldr	r0, [pc, #372]	; (8008718 <Process_Send_Signals_2_MIE+0x37c>)
 80085a2:	f01c ff79 	bl	8025498 <puts>
			printf("Sending Blank Relay statuses\n");
 80085a6:	485d      	ldr	r0, [pc, #372]	; (800871c <Process_Send_Signals_2_MIE+0x380>)
 80085a8:	f01c ff76 	bl	8025498 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 80085ac:	22a2      	movs	r2, #162	; 0xa2
 80085ae:	2100      	movs	r1, #0
 80085b0:	4851      	ldr	r0, [pc, #324]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 80085b2:	f01c fded 	bl	8025190 <memset>
		}


		if(Debug_flag == 1)
 80085b6:	4b53      	ldr	r3, [pc, #332]	; (8008704 <Process_Send_Signals_2_MIE+0x368>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d143      	bne.n	8008646 <Process_Send_Signals_2_MIE+0x2aa>
		{
			Get_time();
 80085be:	f003 fedb 	bl	800c378 <Get_time>
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 80085c2:	4b57      	ldr	r3, [pc, #348]	; (8008720 <Process_Send_Signals_2_MIE+0x384>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	4619      	mov	r1, r3
 80085c8:	4b55      	ldr	r3, [pc, #340]	; (8008720 <Process_Send_Signals_2_MIE+0x384>)
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	461a      	mov	r2, r3
 80085ce:	4b54      	ldr	r3, [pc, #336]	; (8008720 <Process_Send_Signals_2_MIE+0x384>)
 80085d0:	789b      	ldrb	r3, [r3, #2]
 80085d2:	4854      	ldr	r0, [pc, #336]	; (8008724 <Process_Send_Signals_2_MIE+0x388>)
 80085d4:	f01c fec4 	bl	8025360 <iprintf>
			ReArrangedVitalData();
 80085d8:	f001 fcdc 	bl	8009f94 <ReArrangedVitalData>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80085dc:	2300      	movs	r3, #0
 80085de:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80085e2:	e025      	b.n	8008630 <Process_Send_Signals_2_MIE+0x294>
			{
				if(ReorderFlag == RESET)
 80085e4:	4b50      	ldr	r3, [pc, #320]	; (8008728 <Process_Send_Signals_2_MIE+0x38c>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <Process_Send_Signals_2_MIE+0x264>
				{
					printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 80085ec:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80085f0:	4a41      	ldr	r2, [pc, #260]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 80085f2:	4413      	add	r3, r2
 80085f4:	789b      	ldrb	r3, [r3, #2]
 80085f6:	4619      	mov	r1, r3
 80085f8:	484c      	ldr	r0, [pc, #304]	; (800872c <Process_Send_Signals_2_MIE+0x390>)
 80085fa:	f01c feb1 	bl	8025360 <iprintf>
 80085fe:	e008      	b.n	8008612 <Process_Send_Signals_2_MIE+0x276>
				}
				else
				{
					printf("%02X ",HitachiEI_DataReArranged_st.Inputs[Byte]);
 8008600:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008604:	4a4a      	ldr	r2, [pc, #296]	; (8008730 <Process_Send_Signals_2_MIE+0x394>)
 8008606:	4413      	add	r3, r2
 8008608:	789b      	ldrb	r3, [r3, #2]
 800860a:	4619      	mov	r1, r3
 800860c:	4847      	ldr	r0, [pc, #284]	; (800872c <Process_Send_Signals_2_MIE+0x390>)
 800860e:	f01c fea7 	bl	8025360 <iprintf>
				}
				if(((Byte+1)%16)==0)
 8008612:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008616:	3301      	adds	r3, #1
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <Process_Send_Signals_2_MIE+0x28a>
				{
					printf("\n");
 8008620:	200a      	movs	r0, #10
 8008622:	f01c feb5 	bl	8025390 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008626:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800862a:	3301      	adds	r3, #1
 800862c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008630:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8008634:	4b2b      	ldr	r3, [pc, #172]	; (80086e4 <Process_Send_Signals_2_MIE+0x348>)
 8008636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	429a      	cmp	r2, r3
 800863e:	dbd1      	blt.n	80085e4 <Process_Send_Signals_2_MIE+0x248>
				}
			}
			printf("\n");
 8008640:	200a      	movs	r0, #10
 8008642:	f01c fea5 	bl	8025390 <putchar>
		}

#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif
		ReArrangedVitalData();
 8008646:	f001 fca5 	bl	8009f94 <ReArrangedVitalData>
		TransmitCanPkt(EI_PROCESS_DATA);
 800864a:	f240 1019 	movw	r0, #281	; 0x119
 800864e:	f008 f8cb 	bl	80107e8 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008652:	4926      	ldr	r1, [pc, #152]	; (80086ec <Process_Send_Signals_2_MIE+0x350>)
 8008654:	4826      	ldr	r0, [pc, #152]	; (80086f0 <Process_Send_Signals_2_MIE+0x354>)
 8008656:	f7f7 fdf3 	bl	8000240 <strcmp>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	f040 8135 	bne.w	80088cc <Process_Send_Signals_2_MIE+0x530>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 8008662:	4b34      	ldr	r3, [pc, #208]	; (8008734 <Process_Send_Signals_2_MIE+0x398>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f007 fb0a 	bl	800fc80 <HAL_Elaps_Ticks>
 800866c:	4603      	mov	r3, r0
 800866e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008672:	f0c0 80ad 	bcc.w	80087d0 <Process_Send_Signals_2_MIE+0x434>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008676:	4a30      	ldr	r2, [pc, #192]	; (8008738 <Process_Send_Signals_2_MIE+0x39c>)
 8008678:	4b1f      	ldr	r3, [pc, #124]	; (80086f8 <Process_Send_Signals_2_MIE+0x35c>)
 800867a:	4610      	mov	r0, r2
 800867c:	3302      	adds	r3, #2
 800867e:	22a0      	movs	r2, #160	; 0xa0
 8008680:	4619      	mov	r1, r3
 8008682:	f01c fd5d 	bl	8025140 <memcpy>
				Serial_Byte = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800868c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008696:	33b8      	adds	r3, #184	; 0xb8
 8008698:	443b      	add	r3, r7
 800869a:	227e      	movs	r2, #126	; 0x7e
 800869c:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80086a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80086aa:	33b8      	adds	r3, #184	; 0xb8
 80086ac:	443b      	add	r3, r7
 80086ae:	227e      	movs	r2, #126	; 0x7e
 80086b0:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80086b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80086be:	33b8      	adds	r3, #184	; 0xb8
 80086c0:	443b      	add	r3, r7
 80086c2:	227e      	movs	r2, #126	; 0x7e
 80086c4:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 80086c8:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <Process_Send_Signals_2_MIE+0x368>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d102      	bne.n	80086d6 <Process_Send_Signals_2_MIE+0x33a>
				{
					printf("Sending Signals over Ethernet:\n");
 80086d0:	481a      	ldr	r0, [pc, #104]	; (800873c <Process_Send_Signals_2_MIE+0x3a0>)
 80086d2:	f01c fee1 	bl	8025498 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80086d6:	2300      	movs	r3, #0
 80086d8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 80086dc:	e045      	b.n	800876a <Process_Send_Signals_2_MIE+0x3ce>
 80086de:	bf00      	nop
 80086e0:	200011e0 	.word	0x200011e0
 80086e4:	20000304 	.word	0x20000304
 80086e8:	2000124c 	.word	0x2000124c
 80086ec:	08026b0c 	.word	0x08026b0c
 80086f0:	20000305 	.word	0x20000305
 80086f4:	08027a50 	.word	0x08027a50
 80086f8:	2000146c 	.word	0x2000146c
 80086fc:	200012f8 	.word	0x200012f8
 8008700:	200012ec 	.word	0x200012ec
 8008704:	200009b5 	.word	0x200009b5
 8008708:	08027a64 	.word	0x08027a64
 800870c:	20002374 	.word	0x20002374
 8008710:	200022ac 	.word	0x200022ac
 8008714:	20000108 	.word	0x20000108
 8008718:	08027a78 	.word	0x08027a78
 800871c:	08027a9c 	.word	0x08027a9c
 8008720:	20002cd8 	.word	0x20002cd8
 8008724:	08027abc 	.word	0x08027abc
 8008728:	2000124a 	.word	0x2000124a
 800872c:	08027ae4 	.word	0x08027ae4
 8008730:	20001510 	.word	0x20001510
 8008734:	200024a8 	.word	0x200024a8
 8008738:	200024ac 	.word	0x200024ac
 800873c:	08027aec 	.word	0x08027aec
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008740:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008744:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008748:	1c59      	adds	r1, r3, #1
 800874a:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 800874e:	4619      	mov	r1, r3
 8008750:	4b63      	ldr	r3, [pc, #396]	; (80088e0 <Process_Send_Signals_2_MIE+0x544>)
 8008752:	4413      	add	r3, r2
 8008754:	789a      	ldrb	r2, [r3, #2]
 8008756:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 800875a:	443b      	add	r3, r7
 800875c:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008760:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008764:	3301      	adds	r3, #1
 8008766:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800876a:	4b5d      	ldr	r3, [pc, #372]	; (80088e0 <Process_Send_Signals_2_MIE+0x544>)
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008772:	429a      	cmp	r2, r3
 8008774:	d3e4      	bcc.n	8008740 <Process_Send_Signals_2_MIE+0x3a4>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008776:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008780:	33b8      	adds	r3, #184	; 0xb8
 8008782:	443b      	add	r3, r7
 8008784:	227f      	movs	r2, #127	; 0x7f
 8008786:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800878a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008794:	33b8      	adds	r3, #184	; 0xb8
 8008796:	443b      	add	r3, r7
 8008798:	227f      	movs	r2, #127	; 0x7f
 800879a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800879e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80087a8:	33b8      	adds	r3, #184	; 0xb8
 80087aa:	443b      	add	r3, r7
 80087ac:	227f      	movs	r2, #127	; 0x7f
 80087ae:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 80087b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087b6:	b2d9      	uxtb	r1, r3
 80087b8:	4a4a      	ldr	r2, [pc, #296]	; (80088e4 <Process_Send_Signals_2_MIE+0x548>)
 80087ba:	1d3b      	adds	r3, r7, #4
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f007 fe50 	bl	8010464 <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 80087c4:	f00f fdc2 	bl	801834c <HAL_GetTick>
 80087c8:	4603      	mov	r3, r0
 80087ca:	4a47      	ldr	r2, [pc, #284]	; (80088e8 <Process_Send_Signals_2_MIE+0x54c>)
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e07d      	b.n	80088cc <Process_Send_Signals_2_MIE+0x530>
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 80087d0:	22a0      	movs	r2, #160	; 0xa0
 80087d2:	4946      	ldr	r1, [pc, #280]	; (80088ec <Process_Send_Signals_2_MIE+0x550>)
 80087d4:	4846      	ldr	r0, [pc, #280]	; (80088f0 <Process_Send_Signals_2_MIE+0x554>)
 80087d6:	f01c fca3 	bl	8025120 <memcmp>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d075      	beq.n	80088cc <Process_Send_Signals_2_MIE+0x530>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 80087e0:	4a43      	ldr	r2, [pc, #268]	; (80088f0 <Process_Send_Signals_2_MIE+0x554>)
 80087e2:	4b3f      	ldr	r3, [pc, #252]	; (80088e0 <Process_Send_Signals_2_MIE+0x544>)
 80087e4:	4610      	mov	r0, r2
 80087e6:	3302      	adds	r3, #2
 80087e8:	22a0      	movs	r2, #160	; 0xa0
 80087ea:	4619      	mov	r1, r3
 80087ec:	f01c fca8 	bl	8025140 <memcpy>
				Serial_Byte = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80087f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008800:	33b8      	adds	r3, #184	; 0xb8
 8008802:	443b      	add	r3, r7
 8008804:	227e      	movs	r2, #126	; 0x7e
 8008806:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800880a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008814:	33b8      	adds	r3, #184	; 0xb8
 8008816:	443b      	add	r3, r7
 8008818:	227e      	movs	r2, #126	; 0x7e
 800881a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800881e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008828:	33b8      	adds	r3, #184	; 0xb8
 800882a:	443b      	add	r3, r7
 800882c:	227e      	movs	r2, #126	; 0x7e
 800882e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008832:	4b30      	ldr	r3, [pc, #192]	; (80088f4 <Process_Send_Signals_2_MIE+0x558>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d102      	bne.n	8008840 <Process_Send_Signals_2_MIE+0x4a4>
				{
					printf("Sending Signals over Ethernet:\n");
 800883a:	482f      	ldr	r0, [pc, #188]	; (80088f8 <Process_Send_Signals_2_MIE+0x55c>)
 800883c:	f01c fe2c 	bl	8025498 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008840:	2300      	movs	r3, #0
 8008842:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008846:	e014      	b.n	8008872 <Process_Send_Signals_2_MIE+0x4d6>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008848:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800884c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008850:	1c59      	adds	r1, r3, #1
 8008852:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008856:	4619      	mov	r1, r3
 8008858:	4b21      	ldr	r3, [pc, #132]	; (80088e0 <Process_Send_Signals_2_MIE+0x544>)
 800885a:	4413      	add	r3, r2
 800885c:	789a      	ldrb	r2, [r3, #2]
 800885e:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008862:	443b      	add	r3, r7
 8008864:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008868:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800886c:	3301      	adds	r3, #1
 800886e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008872:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <Process_Send_Signals_2_MIE+0x544>)
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800887a:	429a      	cmp	r2, r3
 800887c:	d3e4      	bcc.n	8008848 <Process_Send_Signals_2_MIE+0x4ac>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800887e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008888:	33b8      	adds	r3, #184	; 0xb8
 800888a:	443b      	add	r3, r7
 800888c:	227f      	movs	r2, #127	; 0x7f
 800888e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008892:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800889c:	33b8      	adds	r3, #184	; 0xb8
 800889e:	443b      	add	r3, r7
 80088a0:	227f      	movs	r2, #127	; 0x7f
 80088a2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80088a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80088b0:	33b8      	adds	r3, #184	; 0xb8
 80088b2:	443b      	add	r3, r7
 80088b4:	227f      	movs	r2, #127	; 0x7f
 80088b6:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 80088ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80088be:	b2d9      	uxtb	r1, r3
 80088c0:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <Process_Send_Signals_2_MIE+0x548>)
 80088c2:	1d3b      	adds	r3, r7, #4
 80088c4:	6812      	ldr	r2, [r2, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f007 fdcc 	bl	8010464 <Udp_Send_SigInfo>
#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 80088cc:	f00f fd3e 	bl	801834c <HAL_GetTick>
 80088d0:	4603      	mov	r3, r0
 80088d2:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <Process_Send_Signals_2_MIE+0x560>)
 80088d4:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 80088d6:	bf00      	nop
 80088d8:	37b8      	adds	r7, #184	; 0xb8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	2000146c 	.word	0x2000146c
 80088e4:	200013e0 	.word	0x200013e0
 80088e8:	200024a8 	.word	0x200024a8
 80088ec:	2000146e 	.word	0x2000146e
 80088f0:	200024ac 	.word	0x200024ac
 80088f4:	200009b5 	.word	0x200009b5
 80088f8:	08027aec 	.word	0x08027aec
 80088fc:	200011e0 	.word	0x200011e0

08008900 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008902:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8008906:	af04      	add	r7, sp, #16
 8008908:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800890c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008910:	6018      	str	r0, [r3, #0]
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800891a:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800891e:	4602      	mov	r2, r0
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008926:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800892a:	460a      	mov	r2, r1
 800892c:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 800892e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008936:	2200      	movs	r2, #0
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	3304      	adds	r3, #4
 800893c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8008940:	2100      	movs	r1, #0
 8008942:	4618      	mov	r0, r3
 8008944:	f01c fc24 	bl	8025190 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 800894e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008952:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <Print_EI_DATA+0x64>
 800895c:	48a8      	ldr	r0, [pc, #672]	; (8008c00 <Print_EI_DATA+0x300>)
 800895e:	f000 f975 	bl	8008c4c <Display>
 8008962:	e002      	b.n	800896a <Print_EI_DATA+0x6a>
 8008964:	48a7      	ldr	r0, [pc, #668]	; (8008c04 <Print_EI_DATA+0x304>)
 8008966:	f000 f971 	bl	8008c4c <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 800896a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800896e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3301      	adds	r3, #1
 8008976:	461a      	mov	r2, r3
 8008978:	2110      	movs	r1, #16
 800897a:	2000      	movs	r0, #0
 800897c:	f7f7 fe4a 	bl	8000614 <ExtractBits>
 8008980:	4602      	mov	r2, r0
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	49a0      	ldr	r1, [pc, #640]	; (8008c08 <Print_EI_DATA+0x308>)
 8008988:	4618      	mov	r0, r3
 800898a:	f01c fea1 	bl	80256d0 <siprintf>
	Display(Print_buff);
 800898e:	f107 030c 	add.w	r3, r7, #12
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f95a 	bl	8008c4c <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008998:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800899c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3303      	adds	r3, #3
 80089a4:	461a      	mov	r2, r3
 80089a6:	2110      	movs	r1, #16
 80089a8:	2000      	movs	r0, #0
 80089aa:	f7f7 fe33 	bl	8000614 <ExtractBits>
 80089ae:	4602      	mov	r2, r0
 80089b0:	f107 030c 	add.w	r3, r7, #12
 80089b4:	4995      	ldr	r1, [pc, #596]	; (8008c0c <Print_EI_DATA+0x30c>)
 80089b6:	4618      	mov	r0, r3
 80089b8:	f01c fe8a 	bl	80256d0 <siprintf>
	Display(Print_buff);
 80089bc:	f107 030c 	add.w	r3, r7, #12
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 f943 	bl	8008c4c <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 80089c6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80089ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3307      	adds	r3, #7
 80089d2:	461a      	mov	r2, r3
 80089d4:	2108      	movs	r1, #8
 80089d6:	2000      	movs	r0, #0
 80089d8:	f7f7 fe1c 	bl	8000614 <ExtractBits>
 80089dc:	4603      	mov	r3, r0
 80089de:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 80089e2:	488b      	ldr	r0, [pc, #556]	; (8008c10 <Print_EI_DATA+0x310>)
 80089e4:	f000 f932 	bl	8008c4c <Display>
	switch(Msg_type)
 80089e8:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80089ec:	3b01      	subs	r3, #1
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d829      	bhi.n	8008a46 <Print_EI_DATA+0x146>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <Print_EI_DATA+0xf8>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a11 	.word	0x08008a11
 80089fc:	08008a2f 	.word	0x08008a2f
 8008a00:	08008a47 	.word	0x08008a47
 8008a04:	08008a37 	.word	0x08008a37
 8008a08:	08008a47 	.word	0x08008a47
 8008a0c:	08008a3f 	.word	0x08008a3f
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008a10:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a14:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <Print_EI_DATA+0x126>
 8008a1e:	487d      	ldr	r0, [pc, #500]	; (8008c14 <Print_EI_DATA+0x314>)
 8008a20:	f000 f914 	bl	8008c4c <Display>
		//Display("INIT     ");
		break;
 8008a24:	e012      	b.n	8008a4c <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008a26:	487c      	ldr	r0, [pc, #496]	; (8008c18 <Print_EI_DATA+0x318>)
 8008a28:	f000 f910 	bl	8008c4c <Display>
		break;
 8008a2c:	e00e      	b.n	8008a4c <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8008a2e:	487b      	ldr	r0, [pc, #492]	; (8008c1c <Print_EI_DATA+0x31c>)
 8008a30:	f000 f90c 	bl	8008c4c <Display>
		break;
 8008a34:	e00a      	b.n	8008a4c <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 8008a36:	487a      	ldr	r0, [pc, #488]	; (8008c20 <Print_EI_DATA+0x320>)
 8008a38:	f000 f908 	bl	8008c4c <Display>
		break;
 8008a3c:	e006      	b.n	8008a4c <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 8008a3e:	4879      	ldr	r0, [pc, #484]	; (8008c24 <Print_EI_DATA+0x324>)
 8008a40:	f000 f904 	bl	8008c4c <Display>
		break;
 8008a44:	e002      	b.n	8008a4c <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 8008a46:	4878      	ldr	r0, [pc, #480]	; (8008c28 <Print_EI_DATA+0x328>)
 8008a48:	f000 f900 	bl	8008c4c <Display>
	}
	Display("|");
 8008a4c:	4877      	ldr	r0, [pc, #476]	; (8008c2c <Print_EI_DATA+0x32c>)
 8008a4e:	f000 f8fd 	bl	8008c4c <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 8008a52:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a56:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	3305      	adds	r3, #5
 8008a5e:	461a      	mov	r2, r3
 8008a60:	2108      	movs	r1, #8
 8008a62:	2000      	movs	r0, #0
 8008a64:	f7f7 fdd6 	bl	8000614 <ExtractBits>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	f107 030c 	add.w	r3, r7, #12
 8008a6e:	4970      	ldr	r1, [pc, #448]	; (8008c30 <Print_EI_DATA+0x330>)
 8008a70:	4618      	mov	r0, r3
 8008a72:	f01c fe2d 	bl	80256d0 <siprintf>
	Display(Print_buff);
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f8e6 	bl	8008c4c <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 8008a80:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a84:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3306      	adds	r3, #6
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	2108      	movs	r1, #8
 8008a90:	2000      	movs	r0, #0
 8008a92:	f7f7 fdbf 	bl	8000614 <ExtractBits>
 8008a96:	4602      	mov	r2, r0
 8008a98:	f107 030c 	add.w	r3, r7, #12
 8008a9c:	4965      	ldr	r1, [pc, #404]	; (8008c34 <Print_EI_DATA+0x334>)
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f01c fe16 	bl	80256d0 <siprintf>
	Display(Print_buff);
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f8cf 	bl	8008c4c <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008aae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ab2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	461a      	mov	r2, r3
 8008abc:	2110      	movs	r1, #16
 8008abe:	2000      	movs	r0, #0
 8008ac0:	f7f7 fda8 	bl	8000614 <ExtractBits>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 8008aca:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008ace:	f107 030c 	add.w	r3, r7, #12
 8008ad2:	4959      	ldr	r1, [pc, #356]	; (8008c38 <Print_EI_DATA+0x338>)
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f01c fdfb 	bl	80256d0 <siprintf>
	Display(Print_buff);
 8008ada:	f107 030c 	add.w	r3, r7, #12
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f8b4 	bl	8008c4c <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008ae4:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008ae8:	095b      	lsrs	r3, r3, #5
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d03f      	beq.n	8008b74 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008af4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008af8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330a      	adds	r3, #10
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	461d      	mov	r5, r3
 8008b04:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b08:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330b      	adds	r3, #11
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	461e      	mov	r6, r3
 8008b14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	330c      	adds	r3, #12
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b28:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	330d      	adds	r3, #13
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	4619      	mov	r1, r3
 8008b34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b38:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	330e      	adds	r3, #14
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	461c      	mov	r4, r3
 8008b44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b48:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330f      	adds	r3, #15
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f107 000c 	add.w	r0, r7, #12
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	9402      	str	r4, [sp, #8]
 8008b5a:	9101      	str	r1, [sp, #4]
 8008b5c:	9200      	str	r2, [sp, #0]
 8008b5e:	4633      	mov	r3, r6
 8008b60:	462a      	mov	r2, r5
 8008b62:	4936      	ldr	r1, [pc, #216]	; (8008c3c <Print_EI_DATA+0x33c>)
 8008b64:	f01c fdb4 	bl	80256d0 <siprintf>
		Display(Print_buff);
 8008b68:	f107 030c 	add.w	r3, r7, #12
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f86d 	bl	8008c4c <Display>
 8008b72:	e002      	b.n	8008b7a <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 8008b74:	4832      	ldr	r0, [pc, #200]	; (8008c40 <Print_EI_DATA+0x340>)
 8008b76:	f000 f869 	bl	8008c4c <Display>
	}
	if(Debug_flag == 1)
 8008b7a:	4b32      	ldr	r3, [pc, #200]	; (8008c44 <Print_EI_DATA+0x344>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d139      	bne.n	8008bf6 <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008b82:	2300      	movs	r3, #0
 8008b84:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008b88:	e019      	b.n	8008bbe <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 8008b8a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008b8e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008b92:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	4413      	add	r3, r2
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f107 030c 	add.w	r3, r7, #12
 8008ba2:	4929      	ldr	r1, [pc, #164]	; (8008c48 <Print_EI_DATA+0x348>)
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f01c fd93 	bl	80256d0 <siprintf>
			Display(Print_buff);
 8008baa:	f107 030c 	add.w	r3, r7, #12
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f84c 	bl	8008c4c <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008bb4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008bb8:	3301      	adds	r3, #1
 8008bba:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008bbe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008bc2:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008bc6:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d3dc      	bcc.n	8008b8a <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008bd0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008bd4:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10b      	bne.n	8008bf6 <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008bde:	f107 030c 	add.w	r3, r7, #12
 8008be2:	22f6      	movs	r2, #246	; 0xf6
 8008be4:	4918      	ldr	r1, [pc, #96]	; (8008c48 <Print_EI_DATA+0x348>)
 8008be6:	4618      	mov	r0, r3
 8008be8:	f01c fd72 	bl	80256d0 <siprintf>
			Display(Print_buff);
 8008bec:	f107 030c 	add.w	r3, r7, #12
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 f82b 	bl	8008c4c <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008bf6:	bf00      	nop
 8008bf8:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c00:	08027b0c 	.word	0x08027b0c
 8008c04:	08027b10 	.word	0x08027b10
 8008c08:	08027b14 	.word	0x08027b14
 8008c0c:	08027b1c 	.word	0x08027b1c
 8008c10:	08027b24 	.word	0x08027b24
 8008c14:	08027b28 	.word	0x08027b28
 8008c18:	08027b30 	.word	0x08027b30
 8008c1c:	08027b38 	.word	0x08027b38
 8008c20:	08027b3c 	.word	0x08027b3c
 8008c24:	08027b40 	.word	0x08027b40
 8008c28:	08027b44 	.word	0x08027b44
 8008c2c:	08027b58 	.word	0x08027b58
 8008c30:	08027b5c 	.word	0x08027b5c
 8008c34:	08027b68 	.word	0x08027b68
 8008c38:	08027b74 	.word	0x08027b74
 8008c3c:	08027b80 	.word	0x08027b80
 8008c40:	08027ba4 	.word	0x08027ba4
 8008c44:	200009b5 	.word	0x200009b5
 8008c48:	08027ae4 	.word	0x08027ae4

08008c4c <Display>:

void Display(char *Data)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 8008c58:	e00a      	b.n	8008c70 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	4619      	mov	r1, r3
 8008c64:	2000      	movs	r0, #0
 8008c66:	f00f f919 	bl	8017e9c <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4413      	add	r3, r2
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1ee      	bne.n	8008c5a <Display+0xe>
	}
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <print_self_Details_Hitachi>:
	}

}

void print_self_Details_Hitachi(void)
{
 8008c88:	b5b0      	push	{r4, r5, r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 8008c92:	4890      	ldr	r0, [pc, #576]	; (8008ed4 <print_self_Details_Hitachi+0x24c>)
 8008c94:	f01c fc00 	bl	8025498 <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008c98:	4b8f      	ldr	r3, [pc, #572]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	488e      	ldr	r0, [pc, #568]	; (8008edc <print_self_Details_Hitachi+0x254>)
 8008ca2:	f01c fb5d 	bl	8025360 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8008ca6:	4b8c      	ldr	r3, [pc, #560]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008ca8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008cac:	4619      	mov	r1, r3
 8008cae:	488c      	ldr	r0, [pc, #560]	; (8008ee0 <print_self_Details_Hitachi+0x258>)
 8008cb0:	f01c fb56 	bl	8025360 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008cb4:	4b88      	ldr	r3, [pc, #544]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008cb6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4889      	ldr	r0, [pc, #548]	; (8008ee4 <print_self_Details_Hitachi+0x25c>)
 8008cbe:	f01c fb4f 	bl	8025360 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8008cc2:	4b85      	ldr	r3, [pc, #532]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008cc4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4887      	ldr	r0, [pc, #540]	; (8008ee8 <print_self_Details_Hitachi+0x260>)
 8008ccc:	f01c fb48 	bl	8025360 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008cd0:	4b81      	ldr	r3, [pc, #516]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008cd2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4884      	ldr	r0, [pc, #528]	; (8008eec <print_self_Details_Hitachi+0x264>)
 8008cda:	f01c fb41 	bl	8025360 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008cde:	4b7e      	ldr	r3, [pc, #504]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008ce0:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4882      	ldr	r0, [pc, #520]	; (8008ef0 <print_self_Details_Hitachi+0x268>)
 8008ce8:	f01c fb3a 	bl	8025360 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008cec:	4b7a      	ldr	r3, [pc, #488]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008cee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4879      	ldr	r0, [pc, #484]	; (8008edc <print_self_Details_Hitachi+0x254>)
 8008cf6:	f01c fb33 	bl	8025360 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	71fb      	strb	r3, [r7, #7]
 8008cfe:	e03b      	b.n	8008d78 <print_self_Details_Hitachi+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008d00:	79f9      	ldrb	r1, [r7, #7]
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	4a74      	ldr	r2, [pc, #464]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d06:	3312      	adds	r3, #18
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	78db      	ldrb	r3, [r3, #3]
 8008d0e:	461c      	mov	r4, r3
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	4a71      	ldr	r2, [pc, #452]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008d1c:	461d      	mov	r5, r3
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	4a6d      	ldr	r2, [pc, #436]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	4a6a      	ldr	r2, [pc, #424]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	9000      	str	r0, [sp, #0]
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	4622      	mov	r2, r4
 8008d40:	486c      	ldr	r0, [pc, #432]	; (8008ef4 <print_self_Details_Hitachi+0x26c>)
 8008d42:	f01c fb0d 	bl	8025360 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 8008d46:	79f9      	ldrb	r1, [r7, #7]
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	4a63      	ldr	r2, [pc, #396]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d4c:	333e      	adds	r3, #62	; 0x3e
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	885b      	ldrh	r3, [r3, #2]
 8008d54:	461a      	mov	r2, r3
 8008d56:	4868      	ldr	r0, [pc, #416]	; (8008ef8 <print_self_Details_Hitachi+0x270>)
 8008d58:	f01c fb02 	bl	8025360 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 8008d5c:	79f9      	ldrb	r1, [r7, #7]
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	4a5d      	ldr	r2, [pc, #372]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4863      	ldr	r0, [pc, #396]	; (8008efc <print_self_Details_Hitachi+0x274>)
 8008d6e:	f01c faf7 	bl	8025360 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	3301      	adds	r3, #1
 8008d76:	71fb      	strb	r3, [r7, #7]
 8008d78:	4b57      	ldr	r3, [pc, #348]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d7e:	79fa      	ldrb	r2, [r7, #7]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d3bd      	bcc.n	8008d00 <print_self_Details_Hitachi+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 8008d84:	4b54      	ldr	r3, [pc, #336]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d86:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4b52      	ldr	r3, [pc, #328]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d92:	461a      	mov	r2, r3
 8008d94:	4b50      	ldr	r3, [pc, #320]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	4b4e      	ldr	r3, [pc, #312]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008d9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	4603      	mov	r3, r0
 8008da6:	4856      	ldr	r0, [pc, #344]	; (8008f00 <print_self_Details_Hitachi+0x278>)
 8008da8:	f01c fada 	bl	8025360 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008dac:	4b4a      	ldr	r3, [pc, #296]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008dae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008db2:	4618      	mov	r0, r3
 8008db4:	4b48      	ldr	r3, [pc, #288]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dba:	461c      	mov	r4, r3
 8008dbc:	4b46      	ldr	r3, [pc, #280]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc2:	461d      	mov	r5, r3
 8008dc4:	4b44      	ldr	r3, [pc, #272]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b42      	ldr	r3, [pc, #264]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4b40      	ldr	r3, [pc, #256]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dda:	9302      	str	r3, [sp, #8]
 8008ddc:	9101      	str	r1, [sp, #4]
 8008dde:	9200      	str	r2, [sp, #0]
 8008de0:	462b      	mov	r3, r5
 8008de2:	4622      	mov	r2, r4
 8008de4:	4601      	mov	r1, r0
 8008de6:	4847      	ldr	r0, [pc, #284]	; (8008f04 <print_self_Details_Hitachi+0x27c>)
 8008de8:	f01c faba 	bl	8025360 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008dec:	4b3a      	ldr	r3, [pc, #232]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008dee:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008df2:	4619      	mov	r1, r3
 8008df4:	4844      	ldr	r0, [pc, #272]	; (8008f08 <print_self_Details_Hitachi+0x280>)
 8008df6:	f01c fab3 	bl	8025360 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	71fb      	strb	r3, [r7, #7]
 8008dfe:	e05c      	b.n	8008eba <print_self_Details_Hitachi+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	3301      	adds	r3, #1
 8008e04:	4619      	mov	r1, r3
 8008e06:	4841      	ldr	r0, [pc, #260]	; (8008f0c <print_self_Details_Hitachi+0x284>)
 8008e08:	f01c faaa 	bl	8025360 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	4a32      	ldr	r2, [pc, #200]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e10:	3366      	adds	r3, #102	; 0x66
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	483d      	ldr	r0, [pc, #244]	; (8008f10 <print_self_Details_Hitachi+0x288>)
 8008e1c:	f01c faa0 	bl	8025360 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	4a2d      	ldr	r2, [pc, #180]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e24:	3370      	adds	r3, #112	; 0x70
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4839      	ldr	r0, [pc, #228]	; (8008f14 <print_self_Details_Hitachi+0x28c>)
 8008e30:	f01c fa96 	bl	8025360 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e38:	33f4      	adds	r3, #244	; 0xf4
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	4413      	add	r3, r2
 8008e3e:	889b      	ldrh	r3, [r3, #4]
 8008e40:	4619      	mov	r1, r3
 8008e42:	4835      	ldr	r0, [pc, #212]	; (8008f18 <print_self_Details_Hitachi+0x290>)
 8008e44:	f01c fa8c 	bl	8025360 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	4a23      	ldr	r2, [pc, #140]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8008e52:	4619      	mov	r1, r3
 8008e54:	4831      	ldr	r0, [pc, #196]	; (8008f1c <print_self_Details_Hitachi+0x294>)
 8008e56:	f01c fa83 	bl	8025360 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e5e:	4413      	add	r3, r2
 8008e60:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008e64:	4619      	mov	r1, r3
 8008e66:	482e      	ldr	r0, [pc, #184]	; (8008f20 <print_self_Details_Hitachi+0x298>)
 8008e68:	f01c fa7a 	bl	8025360 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	4a1a      	ldr	r2, [pc, #104]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e70:	4413      	add	r3, r2
 8008e72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e76:	4619      	mov	r1, r3
 8008e78:	482a      	ldr	r0, [pc, #168]	; (8008f24 <print_self_Details_Hitachi+0x29c>)
 8008e7a:	f01c fa71 	bl	8025360 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e82:	338a      	adds	r3, #138	; 0x8a
 8008e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4827      	ldr	r0, [pc, #156]	; (8008f28 <print_self_Details_Hitachi+0x2a0>)
 8008e8c:	f01c fa68 	bl	8025360 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	4a11      	ldr	r2, [pc, #68]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008e94:	3394      	adds	r3, #148	; 0x94
 8008e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4823      	ldr	r0, [pc, #140]	; (8008f2c <print_self_Details_Hitachi+0x2a4>)
 8008e9e:	f01c fa5f 	bl	8025360 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008ea6:	339e      	adds	r3, #158	; 0x9e
 8008ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eac:	4619      	mov	r1, r3
 8008eae:	4820      	ldr	r0, [pc, #128]	; (8008f30 <print_self_Details_Hitachi+0x2a8>)
 8008eb0:	f01c fa56 	bl	8025360 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	71fb      	strb	r3, [r7, #7]
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <print_self_Details_Hitachi+0x250>)
 8008ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ec0:	79fa      	ldrb	r2, [r7, #7]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d39c      	bcc.n	8008e00 <print_self_Details_Hitachi+0x178>

	}

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 8008ec6:	4803      	ldr	r0, [pc, #12]	; (8008ed4 <print_self_Details_Hitachi+0x24c>)
 8008ec8:	f01c fae6 	bl	8025498 <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ed4:	08027c18 	.word	0x08027c18
 8008ed8:	20000304 	.word	0x20000304
 8008edc:	08027c6c 	.word	0x08027c6c
 8008ee0:	08027c90 	.word	0x08027c90
 8008ee4:	08027cb4 	.word	0x08027cb4
 8008ee8:	08027ce0 	.word	0x08027ce0
 8008eec:	08027d0c 	.word	0x08027d0c
 8008ef0:	08027d38 	.word	0x08027d38
 8008ef4:	08027d64 	.word	0x08027d64
 8008ef8:	08027d84 	.word	0x08027d84
 8008efc:	08027d94 	.word	0x08027d94
 8008f00:	08027da4 	.word	0x08027da4
 8008f04:	08027dc0 	.word	0x08027dc0
 8008f08:	08027df0 	.word	0x08027df0
 8008f0c:	08027e04 	.word	0x08027e04
 8008f10:	08027e18 	.word	0x08027e18
 8008f14:	08027e34 	.word	0x08027e34
 8008f18:	08027e50 	.word	0x08027e50
 8008f1c:	08027e6c 	.word	0x08027e6c
 8008f20:	08027e84 	.word	0x08027e84
 8008f24:	08027e98 	.word	0x08027e98
 8008f28:	08027eac 	.word	0x08027eac
 8008f2c:	08027ec8 	.word	0x08027ec8
 8008f30:	08027ee4 	.word	0x08027ee4

08008f34 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008f3e:	2300      	movs	r3, #0
 8008f40:	71fb      	strb	r3, [r7, #7]
 8008f42:	e054      	b.n	8008fee <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	4a2f      	ldr	r2, [pc, #188]	; (8009004 <Send_Init_After_Timeout+0xd0>)
 8008f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d04b      	beq.n	8008fe8 <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	4a2c      	ldr	r2, [pc, #176]	; (8009004 <Send_Init_After_Timeout+0xd0>)
 8008f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f006 fe91 	bl	800fc80 <HAL_Elaps_Ticks>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	4929      	ldr	r1, [pc, #164]	; (8009008 <Send_Init_After_Timeout+0xd4>)
 8008f64:	3394      	adds	r3, #148	; 0x94
 8008f66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d93c      	bls.n	8008fe8 <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	4a26      	ldr	r2, [pc, #152]	; (800900c <Send_Init_After_Timeout+0xd8>)
 8008f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f006 fe82 	bl	800fc80 <HAL_Elaps_Ticks>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	4921      	ldr	r1, [pc, #132]	; (8009008 <Send_Init_After_Timeout+0xd4>)
 8008f82:	3394      	adds	r3, #148	; 0x94
 8008f84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d92d      	bls.n	8008fe8 <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	4a20      	ldr	r2, [pc, #128]	; (8009010 <Send_Init_After_Timeout+0xdc>)
 8008f90:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d028      	beq.n	8008fe8 <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	4a1e      	ldr	r2, [pc, #120]	; (8009014 <Send_Init_After_Timeout+0xe0>)
 8008f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fa2:	d921      	bls.n	8008fe8 <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	4a17      	ldr	r2, [pc, #92]	; (8009004 <Send_Init_After_Timeout+0xd0>)
 8008fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f006 fe67 	bl	800fc80 <HAL_Elaps_Ticks>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4a18      	ldr	r2, [pc, #96]	; (8009018 <Send_Init_After_Timeout+0xe4>)
 8008fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fba:	099b      	lsrs	r3, r3, #6
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4817      	ldr	r0, [pc, #92]	; (800901c <Send_Init_After_Timeout+0xe8>)
 8008fc0:	f01c f9ce 	bl	8025360 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	4a16      	ldr	r2, [pc, #88]	; (8009020 <Send_Init_After_Timeout+0xec>)
 8008fc8:	2101      	movs	r1, #1
 8008fca:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008fcc:	79fa      	ldrb	r2, [r7, #7]
 8008fce:	79fb      	ldrb	r3, [r7, #7]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7f9 f97e 	bl	80022d4 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	4a0d      	ldr	r2, [pc, #52]	; (8009010 <Send_Init_After_Timeout+0xdc>)
 8008fdc:	2101      	movs	r1, #1
 8008fde:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	4a10      	ldr	r2, [pc, #64]	; (8009024 <Send_Init_After_Timeout+0xf0>)
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	3301      	adds	r3, #1
 8008fec:	71fb      	strb	r3, [r7, #7]
 8008fee:	4b06      	ldr	r3, [pc, #24]	; (8009008 <Send_Init_After_Timeout+0xd4>)
 8008ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ff4:	79fa      	ldrb	r2, [r7, #7]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d3a4      	bcc.n	8008f44 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	2000132c 	.word	0x2000132c
 8009008:	20000304 	.word	0x20000304
 800900c:	2000120c 	.word	0x2000120c
 8009010:	20001414 	.word	0x20001414
 8009014:	20001420 	.word	0x20001420
 8009018:	10624dd3 	.word	0x10624dd3
 800901c:	08027f00 	.word	0x08027f00
 8009020:	20001454 	.word	0x20001454
 8009024:	20001448 	.word	0x20001448

08009028 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009032:	e037      	b.n	80090a4 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8009034:	79fa      	ldrb	r2, [r7, #7]
 8009036:	4921      	ldr	r1, [pc, #132]	; (80090bc <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8009038:	4613      	mov	r3, r2
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	4413      	add	r3, r2
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	440b      	add	r3, r1
 8009042:	3304      	adds	r3, #4
 8009044:	781b      	ldrb	r3, [r3, #0]
		if(
 8009046:	2b01      	cmp	r3, #1
 8009048:	d006      	beq.n	8009058 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	4a1c      	ldr	r2, [pc, #112]	; (80090c0 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800904e:	4413      	add	r3, r2
 8009050:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009054:	2b02      	cmp	r3, #2
 8009056:	d122      	bne.n	800909e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	4a1a      	ldr	r2, [pc, #104]	; (80090c4 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800905c:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 800905e:	2b01      	cmp	r3, #1
 8009060:	d11d      	bne.n	800909e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009066:	3302      	adds	r3, #2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	4618      	mov	r0, r3
 8009070:	f006 fe06 	bl	800fc80 <HAL_Elaps_Ticks>
 8009074:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8009076:	2b32      	cmp	r3, #50	; 0x32
 8009078:	d911      	bls.n	800909e <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 800907a:	79fa      	ldrb	r2, [r7, #7]
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	4611      	mov	r1, r2
 8009080:	4618      	mov	r0, r3
 8009082:	f7fa ff35 	bl	8003ef0 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	4a0e      	ldr	r2, [pc, #56]	; (80090c4 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800908a:	2100      	movs	r1, #0
 800908c:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 800908e:	79fb      	ldrb	r3, [r7, #7]
 8009090:	4a0c      	ldr	r2, [pc, #48]	; (80090c4 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009092:	3302      	adds	r3, #2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	f04f 32ff 	mov.w	r2, #4294967295
 800909c:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	3301      	adds	r3, #1
 80090a2:	71fb      	strb	r3, [r7, #7]
 80090a4:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80090a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090aa:	79fa      	ldrb	r2, [r7, #7]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d3c1      	bcc.n	8009034 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = RESET;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20001aa0 	.word	0x20001aa0
 80090c0:	20000304 	.word	0x20000304
 80090c4:	200020c0 	.word	0x200020c0

080090c8 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80090ce:	2300      	movs	r3, #0
 80090d0:	71fb      	strb	r3, [r7, #7]
 80090d2:	e04e      	b.n	8009172 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	4a2c      	ldr	r2, [pc, #176]	; (8009188 <Check_Recv_Status_fail+0xc0>)
 80090d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d045      	beq.n	800916c <Check_Recv_Status_fail+0xa4>
 80090e0:	79fa      	ldrb	r2, [r7, #7]
 80090e2:	492a      	ldr	r1, [pc, #168]	; (800918c <Check_Recv_Status_fail+0xc4>)
 80090e4:	4613      	mov	r3, r2
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	4413      	add	r3, r2
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	440b      	add	r3, r1
 80090ee:	3303      	adds	r3, #3
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d03a      	beq.n	800916c <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	4a23      	ldr	r2, [pc, #140]	; (8009188 <Check_Recv_Status_fail+0xc0>)
 80090fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090fe:	4618      	mov	r0, r3
 8009100:	f006 fdbe 	bl	800fc80 <HAL_Elaps_Ticks>
 8009104:	4602      	mov	r2, r0
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	4921      	ldr	r1, [pc, #132]	; (8009190 <Check_Recv_Status_fail+0xc8>)
 800910a:	338a      	adds	r3, #138	; 0x8a
 800910c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009110:	429a      	cmp	r2, r3
 8009112:	d92b      	bls.n	800916c <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <Check_Recv_Status_fail+0xc8>)
 8009118:	3366      	adds	r3, #102	; 0x66
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	6859      	ldr	r1, [r3, #4]
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	4a1b      	ldr	r2, [pc, #108]	; (8009190 <Check_Recv_Status_fail+0xc8>)
 8009124:	338a      	adds	r3, #138	; 0x8a
 8009126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800912a:	4a1a      	ldr	r2, [pc, #104]	; (8009194 <Check_Recv_Status_fail+0xcc>)
 800912c:	fba2 2303 	umull	r2, r3, r2, r3
 8009130:	099b      	lsrs	r3, r3, #6
 8009132:	461a      	mov	r2, r3
 8009134:	4818      	ldr	r0, [pc, #96]	; (8009198 <Check_Recv_Status_fail+0xd0>)
 8009136:	f01c f913 	bl	8025360 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	4a12      	ldr	r2, [pc, #72]	; (8009188 <Check_Recv_Status_fail+0xc0>)
 800913e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009142:	4619      	mov	r1, r3
 8009144:	4815      	ldr	r0, [pc, #84]	; (800919c <Check_Recv_Status_fail+0xd4>)
 8009146:	f01c f90b 	bl	8025360 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 800914a:	f00f f8ff 	bl	801834c <HAL_GetTick>
 800914e:	4603      	mov	r3, r0
 8009150:	4619      	mov	r1, r3
 8009152:	4813      	ldr	r0, [pc, #76]	; (80091a0 <Check_Recv_Status_fail+0xd8>)
 8009154:	f01c f904 	bl	8025360 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8009158:	79fa      	ldrb	r2, [r7, #7]
 800915a:	490c      	ldr	r1, [pc, #48]	; (800918c <Check_Recv_Status_fail+0xc4>)
 800915c:	4613      	mov	r3, r2
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	4413      	add	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	440b      	add	r3, r1
 8009166:	3303      	adds	r3, #3
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	3301      	adds	r3, #1
 8009170:	71fb      	strb	r3, [r7, #7]
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <Check_Recv_Status_fail+0xc8>)
 8009174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009178:	79fa      	ldrb	r2, [r7, #7]
 800917a:	429a      	cmp	r2, r3
 800917c:	d3aa      	bcc.n	80090d4 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20001354 	.word	0x20001354
 800918c:	20001aa0 	.word	0x20001aa0
 8009190:	20000304 	.word	0x20000304
 8009194:	10624dd3 	.word	0x10624dd3
 8009198:	08027f2c 	.word	0x08027f2c
 800919c:	08027f60 	.word	0x08027f60
 80091a0:	08027f90 	.word	0x08027f90

080091a4 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 80091a4:	b590      	push	{r4, r7, lr}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	4a39      	ldr	r2, [pc, #228]	; (80092a4 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 80091be:	4413      	add	r3, r2
 80091c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d168      	bne.n	800929a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 80091c8:	4b37      	ldr	r3, [pc, #220]	; (80092a8 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d164      	bne.n	800929a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80091d0:	79fa      	ldrb	r2, [r7, #7]
 80091d2:	4936      	ldr	r1, [pc, #216]	; (80092ac <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80091d4:	4613      	mov	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	4413      	add	r3, r2
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	440b      	add	r3, r1
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f002 ffcd 	bl	800c180 <bcdToDec>
 80091e6:	4603      	mov	r3, r0
 80091e8:	461a      	mov	r2, r3
 80091ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80091ee:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80091f2:	79fa      	ldrb	r2, [r7, #7]
 80091f4:	492d      	ldr	r1, [pc, #180]	; (80092ac <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80091f6:	4613      	mov	r3, r2
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	4413      	add	r3, r2
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	440b      	add	r3, r1
 8009200:	3301      	adds	r3, #1
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f002 ffbb 	bl	800c180 <bcdToDec>
 800920a:	4603      	mov	r3, r0
 800920c:	461a      	mov	r2, r3
 800920e:	4613      	mov	r3, r2
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009216:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8009218:	79fa      	ldrb	r2, [r7, #7]
 800921a:	4924      	ldr	r1, [pc, #144]	; (80092ac <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800921c:	4613      	mov	r3, r2
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	4413      	add	r3, r2
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	440b      	add	r3, r1
 8009226:	3302      	adds	r3, #2
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	4618      	mov	r0, r3
 800922c:	f002 ffa8 	bl	800c180 <bcdToDec>
 8009230:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8009232:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8009234:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009236:	613b      	str	r3, [r7, #16]

		Get_time();
 8009238:	f003 f89e 	bl	800c378 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 800923c:	4b1c      	ldr	r3, [pc, #112]	; (80092b0 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009246:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 800924a:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	4619      	mov	r1, r3
 8009250:	460b      	mov	r3, r1
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	1a5b      	subs	r3, r3, r1
 8009256:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8009258:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 800925a:	4a15      	ldr	r2, [pc, #84]	; (80092b0 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 800925c:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 800925e:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8009260:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8009262:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	bfb8      	it	lt
 800926e:	425b      	neglt	r3, r3
 8009270:	2b01      	cmp	r3, #1
 8009272:	dd12      	ble.n	800929a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800927e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	4a07      	ldr	r2, [pc, #28]	; (80092a4 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8009286:	3366      	adds	r3, #102	; 0x66
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	461a      	mov	r2, r3
 8009290:	4808      	ldr	r0, [pc, #32]	; (80092b4 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8009292:	f01c f865 	bl	8025360 <iprintf>
			Return_Value  = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 800929a:	7dfb      	ldrb	r3, [r7, #23]
}
 800929c:	4618      	mov	r0, r3
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd90      	pop	{r4, r7, pc}
 80092a4:	20000304 	.word	0x20000304
 80092a8:	200011dc 	.word	0x200011dc
 80092ac:	200015b4 	.word	0x200015b4
 80092b0:	20002cd8 	.word	0x20002cd8
 80092b4:	08027f9c 	.word	0x08027f9c

080092b8 <Check_All_Peers>:

void Check_All_Peers(void)
{
 80092b8:	b590      	push	{r4, r7, lr}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80092be:	2300      	movs	r3, #0
 80092c0:	71fb      	strb	r3, [r7, #7]
 80092c2:	e045      	b.n	8009350 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fd64 	bl	8007d94 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 80092cc:	79fa      	ldrb	r2, [r7, #7]
 80092ce:	4926      	ldr	r1, [pc, #152]	; (8009368 <Check_All_Peers+0xb0>)
 80092d0:	4613      	mov	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	3304      	adds	r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f006 fcce 	bl	800fc80 <HAL_Elaps_Ticks>
 80092e4:	4602      	mov	r2, r0
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	4920      	ldr	r1, [pc, #128]	; (800936c <Check_All_Peers+0xb4>)
 80092ea:	338a      	adds	r3, #138	; 0x8a
 80092ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d92a      	bls.n	800934a <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 80092f4:	79fa      	ldrb	r2, [r7, #7]
 80092f6:	491c      	ldr	r1, [pc, #112]	; (8009368 <Check_All_Peers+0xb0>)
 80092f8:	4613      	mov	r3, r2
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	3301      	adds	r3, #1
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d11f      	bne.n	800934a <Check_All_Peers+0x92>
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	4a18      	ldr	r2, [pc, #96]	; (8009370 <Check_All_Peers+0xb8>)
 800930e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009312:	79fa      	ldrb	r2, [r7, #7]
 8009314:	4814      	ldr	r0, [pc, #80]	; (8009368 <Check_All_Peers+0xb0>)
 8009316:	4613      	mov	r3, r2
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4403      	add	r3, r0
 8009320:	3304      	adds	r3, #4
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4299      	cmp	r1, r3
 8009326:	d010      	beq.n	800934a <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = RESET;
 8009328:	79fa      	ldrb	r2, [r7, #7]
 800932a:	490f      	ldr	r1, [pc, #60]	; (8009368 <Check_All_Peers+0xb0>)
 800932c:	4613      	mov	r3, r2
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	3301      	adds	r3, #1
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 800933c:	79fc      	ldrb	r4, [r7, #7]
 800933e:	f00f f805 	bl	801834c <HAL_GetTick>
 8009342:	4603      	mov	r3, r0
 8009344:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <Check_All_Peers+0xb8>)
 8009346:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	3301      	adds	r3, #1
 800934e:	71fb      	strb	r3, [r7, #7]
 8009350:	4b06      	ldr	r3, [pc, #24]	; (800936c <Check_All_Peers+0xb4>)
 8009352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009356:	79fa      	ldrb	r2, [r7, #7]
 8009358:	429a      	cmp	r2, r3
 800935a:	d3b3      	bcc.n	80092c4 <Check_All_Peers+0xc>
			}
		}
	}
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	bd90      	pop	{r4, r7, pc}
 8009366:	bf00      	nop
 8009368:	200020f4 	.word	0x200020f4
 800936c:	20000304 	.word	0x20000304
 8009370:	2000254c 	.word	0x2000254c

08009374 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8009374:	b590      	push	{r4, r7, lr}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800937a:	4976      	ldr	r1, [pc, #472]	; (8009554 <Check_for_RelayMisMatch+0x1e0>)
 800937c:	4876      	ldr	r0, [pc, #472]	; (8009558 <Check_for_RelayMisMatch+0x1e4>)
 800937e:	f7f6 ff5f 	bl	8000240 <strcmp>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 80e0 	beq.w	800954a <Check_for_RelayMisMatch+0x1d6>
	{
		return;
	}

	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 800938a:	2300      	movs	r3, #0
 800938c:	71fb      	strb	r3, [r7, #7]
 800938e:	e0d4      	b.n	800953a <Check_for_RelayMisMatch+0x1c6>
	{
		if(EI_data.Hitachi_st.Interface_Type[Traverser] == ETHERNET)
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	4a72      	ldr	r2, [pc, #456]	; (800955c <Check_for_RelayMisMatch+0x1e8>)
 8009394:	4413      	add	r3, r2
 8009396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800939a:	2b01      	cmp	r3, #1
 800939c:	f000 80c7 	beq.w	800952e <Check_for_RelayMisMatch+0x1ba>
		{
			continue;
		}

		if((HAL_Elaps_Ticks(Check_Clk[Traverser]) < FIVE_SEC ) || (MisMatchFlag[Traverser] == SET))
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	4a6f      	ldr	r2, [pc, #444]	; (8009560 <Check_for_RelayMisMatch+0x1ec>)
 80093a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f006 fc69 	bl	800fc80 <HAL_Elaps_Ticks>
 80093ae:	4603      	mov	r3, r0
 80093b0:	f241 3287 	movw	r2, #4999	; 0x1387
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d906      	bls.n	80093c6 <Check_for_RelayMisMatch+0x52>
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	4a6a      	ldr	r2, [pc, #424]	; (8009564 <Check_for_RelayMisMatch+0x1f0>)
 80093bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	f040 80ac 	bne.w	800951e <Check_for_RelayMisMatch+0x1aa>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (SelfLinkFlag[Traverser] == RESET))
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	4a67      	ldr	r2, [pc, #412]	; (8009568 <Check_for_RelayMisMatch+0x1f4>)
 80093ca:	5cd3      	ldrb	r3, [r2, r3]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d116      	bne.n	80093fe <Check_for_RelayMisMatch+0x8a>
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	4a66      	ldr	r2, [pc, #408]	; (800956c <Check_for_RelayMisMatch+0x1f8>)
 80093d4:	5cd3      	ldrb	r3, [r2, r3]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d111      	bne.n	80093fe <Check_for_RelayMisMatch+0x8a>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 80093da:	79fa      	ldrb	r2, [r7, #7]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4a62      	ldr	r2, [pc, #392]	; (8009570 <Check_for_RelayMisMatch+0x1fc>)
 80093e6:	1898      	adds	r0, r3, r2
 80093e8:	79fa      	ldrb	r2, [r7, #7]
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4a60      	ldr	r2, [pc, #384]	; (8009574 <Check_for_RelayMisMatch+0x200>)
 80093f4:	4413      	add	r3, r2
 80093f6:	2214      	movs	r2, #20
 80093f8:	4619      	mov	r1, r3
 80093fa:	f01b fea1 	bl	8025140 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 80093fe:	79fa      	ldrb	r2, [r7, #7]
 8009400:	495b      	ldr	r1, [pc, #364]	; (8009570 <Check_for_RelayMisMatch+0x1fc>)
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	440b      	add	r3, r1
 800940c:	3312      	adds	r3, #18
 800940e:	8819      	ldrh	r1, [r3, #0]
 8009410:	79fa      	ldrb	r2, [r7, #7]
 8009412:	4858      	ldr	r0, [pc, #352]	; (8009574 <Check_for_RelayMisMatch+0x200>)
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4403      	add	r3, r0
 800941e:	3312      	adds	r3, #18
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	4299      	cmp	r1, r3
 8009424:	d076      	beq.n	8009514 <Check_for_RelayMisMatch+0x1a0>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	4a53      	ldr	r2, [pc, #332]	; (8009578 <Check_for_RelayMisMatch+0x204>)
 800942a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800942e:	4618      	mov	r0, r3
 8009430:	f006 fc26 	bl	800fc80 <HAL_Elaps_Ticks>
 8009434:	4603      	mov	r3, r0
 8009436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800943a:	d37a      	bcc.n	8009532 <Check_for_RelayMisMatch+0x1be>
				{
					continue;
				}
				else
				{
					MisMatchFlag[Traverser] = SET;
 800943c:	79fb      	ldrb	r3, [r7, #7]
 800943e:	4a49      	ldr	r2, [pc, #292]	; (8009564 <Check_for_RelayMisMatch+0x1f0>)
 8009440:	2101      	movs	r1, #1
 8009442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if( ((Main_Relays_st[Traverser].RelayIPS_CRC == 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC != 0)) || ((Main_Relays_st[Traverser].RelayIPS_CRC != 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC == 0)) )
 8009446:	79fa      	ldrb	r2, [r7, #7]
 8009448:	4949      	ldr	r1, [pc, #292]	; (8009570 <Check_for_RelayMisMatch+0x1fc>)
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	3312      	adds	r3, #18
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <Check_for_RelayMisMatch+0xfe>
 800945c:	79fa      	ldrb	r2, [r7, #7]
 800945e:	4945      	ldr	r1, [pc, #276]	; (8009574 <Check_for_RelayMisMatch+0x200>)
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	3312      	adds	r3, #18
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d115      	bne.n	800949e <Check_for_RelayMisMatch+0x12a>
 8009472:	79fa      	ldrb	r2, [r7, #7]
 8009474:	493e      	ldr	r1, [pc, #248]	; (8009570 <Check_for_RelayMisMatch+0x1fc>)
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	3312      	adds	r3, #18
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00f      	beq.n	80094a8 <Check_for_RelayMisMatch+0x134>
 8009488:	79fa      	ldrb	r2, [r7, #7]
 800948a:	493a      	ldr	r1, [pc, #232]	; (8009574 <Check_for_RelayMisMatch+0x200>)
 800948c:	4613      	mov	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	440b      	add	r3, r1
 8009496:	3312      	adds	r3, #18
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <Check_for_RelayMisMatch+0x134>
					{
						MisMatchFlag[Traverser] = RESET;
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	4a30      	ldr	r2, [pc, #192]	; (8009564 <Check_for_RelayMisMatch+0x1f0>)
 80094a2:	2100      	movs	r1, #0
 80094a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(MisMatchFlag[Traverser] ==  SET)
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	4a2e      	ldr	r2, [pc, #184]	; (8009564 <Check_for_RelayMisMatch+0x1f0>)
 80094ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d134      	bne.n	800951e <Check_for_RelayMisMatch+0x1aa>
					{
						printf("S:%u|O:%u\n",SelfLinkFlag[Traverser],OtherCardLink_Flag[Traverser]);
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	4a2d      	ldr	r2, [pc, #180]	; (800956c <Check_for_RelayMisMatch+0x1f8>)
 80094b8:	5cd3      	ldrb	r3, [r2, r3]
 80094ba:	4619      	mov	r1, r3
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <Check_for_RelayMisMatch+0x1f4>)
 80094c0:	5cd3      	ldrb	r3, [r2, r3]
 80094c2:	461a      	mov	r2, r3
 80094c4:	482d      	ldr	r0, [pc, #180]	; (800957c <Check_for_RelayMisMatch+0x208>)
 80094c6:	f01b ff4b 	bl	8025360 <iprintf>
						printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	4a23      	ldr	r2, [pc, #140]	; (800955c <Check_for_RelayMisMatch+0x1e8>)
 80094ce:	3366      	adds	r3, #102	; 0x66
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	4619      	mov	r1, r3
 80094d8:	4829      	ldr	r0, [pc, #164]	; (8009580 <Check_for_RelayMisMatch+0x20c>)
 80094da:	f01b ff41 	bl	8025360 <iprintf>
						printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 80094de:	79fa      	ldrb	r2, [r7, #7]
 80094e0:	4923      	ldr	r1, [pc, #140]	; (8009570 <Check_for_RelayMisMatch+0x1fc>)
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	3312      	adds	r3, #18
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	4619      	mov	r1, r3
 80094f2:	4824      	ldr	r0, [pc, #144]	; (8009584 <Check_for_RelayMisMatch+0x210>)
 80094f4:	f01b ff34 	bl	8025360 <iprintf>
						printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 80094f8:	79fa      	ldrb	r2, [r7, #7]
 80094fa:	491e      	ldr	r1, [pc, #120]	; (8009574 <Check_for_RelayMisMatch+0x200>)
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	3312      	adds	r3, #18
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	4619      	mov	r1, r3
 800950c:	481e      	ldr	r0, [pc, #120]	; (8009588 <Check_for_RelayMisMatch+0x214>)
 800950e:	f01b ff27 	bl	8025360 <iprintf>
 8009512:	e004      	b.n	800951e <Check_for_RelayMisMatch+0x1aa>
					}
				}
			}
			else
			{
				MisMatchFlag[Traverser] = RESET; /* If both Relay CRC is Matching MisMatch will be RESET */
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	4a13      	ldr	r2, [pc, #76]	; (8009564 <Check_for_RelayMisMatch+0x1f0>)
 8009518:	2100      	movs	r1, #0
 800951a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		Check_Clk[Traverser] = HAL_GetTick();
 800951e:	79fc      	ldrb	r4, [r7, #7]
 8009520:	f00e ff14 	bl	801834c <HAL_GetTick>
 8009524:	4603      	mov	r3, r0
 8009526:	4a0e      	ldr	r2, [pc, #56]	; (8009560 <Check_for_RelayMisMatch+0x1ec>)
 8009528:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800952c:	e002      	b.n	8009534 <Check_for_RelayMisMatch+0x1c0>
			continue;
 800952e:	bf00      	nop
 8009530:	e000      	b.n	8009534 <Check_for_RelayMisMatch+0x1c0>
					continue;
 8009532:	bf00      	nop
	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	3301      	adds	r3, #1
 8009538:	71fb      	strb	r3, [r7, #7]
 800953a:	4b08      	ldr	r3, [pc, #32]	; (800955c <Check_for_RelayMisMatch+0x1e8>)
 800953c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009540:	79fa      	ldrb	r2, [r7, #7]
 8009542:	429a      	cmp	r2, r3
 8009544:	f4ff af24 	bcc.w	8009390 <Check_for_RelayMisMatch+0x1c>
 8009548:	e000      	b.n	800954c <Check_for_RelayMisMatch+0x1d8>
		return;
 800954a:	bf00      	nop
	}
}
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	bd90      	pop	{r4, r7, pc}
 8009552:	bf00      	nop
 8009554:	08026b0c 	.word	0x08026b0c
 8009558:	20000305 	.word	0x20000305
 800955c:	20000304 	.word	0x20000304
 8009560:	20002574 	.word	0x20002574
 8009564:	2000124c 	.word	0x2000124c
 8009568:	200012f8 	.word	0x200012f8
 800956c:	200012ec 	.word	0x200012ec
 8009570:	200022ac 	.word	0x200022ac
 8009574:	20002374 	.word	0x20002374
 8009578:	20001260 	.word	0x20001260
 800957c:	08027fdc 	.word	0x08027fdc
 8009580:	08027fe8 	.word	0x08027fe8
 8009584:	08027ff4 	.word	0x08027ff4
 8009588:	08028004 	.word	0x08028004

0800958c <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8009596:	f00e fed9 	bl	801834c <HAL_GetTick>
 800959a:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 800959c:	79fa      	ldrb	r2, [r7, #7]
 800959e:	4935      	ldr	r1, [pc, #212]	; (8009674 <CheckOtherLinkStatus+0xe8>)
 80095a0:	4613      	mov	r3, r2
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	4413      	add	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	440b      	add	r3, r1
 80095aa:	3302      	adds	r3, #2
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d11d      	bne.n	80095ee <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	4930      	ldr	r1, [pc, #192]	; (8009678 <CheckOtherLinkStatus+0xec>)
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 80095bc:	79fa      	ldrb	r2, [r7, #7]
 80095be:	492f      	ldr	r1, [pc, #188]	; (800967c <CheckOtherLinkStatus+0xf0>)
 80095c0:	4613      	mov	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	3304      	adds	r3, #4
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 80095d0:	79fa      	ldrb	r2, [r7, #7]
 80095d2:	492a      	ldr	r1, [pc, #168]	; (800967c <CheckOtherLinkStatus+0xf0>)
 80095d4:	4613      	mov	r3, r2
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	3301      	adds	r3, #1
 80095e0:	2201      	movs	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	4a26      	ldr	r2, [pc, #152]	; (8009680 <CheckOtherLinkStatus+0xf4>)
 80095e8:	2101      	movs	r1, #1
 80095ea:	54d1      	strb	r1, [r2, r3]
 80095ec:	e02e      	b.n	800964c <CheckOtherLinkStatus+0xc0>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = RESET;
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	4a23      	ldr	r2, [pc, #140]	; (8009680 <CheckOtherLinkStatus+0xf4>)
 80095f2:	2100      	movs	r1, #0
 80095f4:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 80095f6:	79fa      	ldrb	r2, [r7, #7]
 80095f8:	4920      	ldr	r1, [pc, #128]	; (800967c <CheckOtherLinkStatus+0xf0>)
 80095fa:	4613      	mov	r3, r2
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	3308      	adds	r3, #8
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = RESET;
 800960a:	79fa      	ldrb	r2, [r7, #7]
 800960c:	491b      	ldr	r1, [pc, #108]	; (800967c <CheckOtherLinkStatus+0xf0>)
 800960e:	4613      	mov	r3, r2
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	3301      	adds	r3, #1
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
		OtherCard_Relays_st[SourceIndex].RelayIPS_CRC = 0;
 800961e:	79fa      	ldrb	r2, [r7, #7]
 8009620:	4918      	ldr	r1, [pc, #96]	; (8009684 <CheckOtherLinkStatus+0xf8>)
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	440b      	add	r3, r1
 800962c:	3312      	adds	r3, #18
 800962e:	2200      	movs	r2, #0
 8009630:	801a      	strh	r2, [r3, #0]
		memset(&OtherCard_Relays_st[SourceIndex].RelayIPS_Buff,0,sizeof(OtherCard_Relays_st[SourceIndex].RelayIPS_Buff));
 8009632:	79fa      	ldrb	r2, [r7, #7]
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4a11      	ldr	r2, [pc, #68]	; (8009684 <CheckOtherLinkStatus+0xf8>)
 800963e:	4413      	add	r3, r2
 8009640:	3301      	adds	r3, #1
 8009642:	2210      	movs	r2, #16
 8009644:	2100      	movs	r1, #0
 8009646:	4618      	mov	r0, r3
 8009648:	f01b fda2 	bl	8025190 <memset>
	}

	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 800964c:	79fa      	ldrb	r2, [r7, #7]
 800964e:	4909      	ldr	r1, [pc, #36]	; (8009674 <CheckOtherLinkStatus+0xe8>)
 8009650:	4613      	mov	r3, r2
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	4413      	add	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	440b      	add	r3, r1
 800965a:	3301      	adds	r3, #1
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d104      	bne.n	800966c <CheckOtherLinkStatus+0xe0>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	4908      	ldr	r1, [pc, #32]	; (8009688 <CheckOtherLinkStatus+0xfc>)
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800966c:	bf00      	nop
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	20001b90 	.word	0x20001b90
 8009678:	200012c4 	.word	0x200012c4
 800967c:	2000216c 	.word	0x2000216c
 8009680:	200012f8 	.word	0x200012f8
 8009684:	20002374 	.word	0x20002374
 8009688:	2000120c 	.word	0x2000120c

0800968c <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009690:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <SendRelay2_Other+0x70>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4618      	mov	r0, r3
 8009696:	f006 faf3 	bl	800fc80 <HAL_Elaps_Ticks>
 800969a:	4603      	mov	r3, r0
 800969c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096a0:	d92a      	bls.n	80096f8 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 80096a2:	2214      	movs	r2, #20
 80096a4:	2100      	movs	r1, #0
 80096a6:	4816      	ldr	r0, [pc, #88]	; (8009700 <SendRelay2_Other+0x74>)
 80096a8:	f01b fd72 	bl	8025190 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 80096ac:	4b15      	ldr	r3, [pc, #84]	; (8009704 <SendRelay2_Other+0x78>)
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4a13      	ldr	r2, [pc, #76]	; (8009708 <SendRelay2_Other+0x7c>)
 80096ba:	4413      	add	r3, r2
 80096bc:	2214      	movs	r2, #20
 80096be:	4619      	mov	r1, r3
 80096c0:	480f      	ldr	r0, [pc, #60]	; (8009700 <SendRelay2_Other+0x74>)
 80096c2:	f01b fd3d 	bl	8025140 <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 80096c6:	f240 2007 	movw	r0, #519	; 0x207
 80096ca:	f007 f88d 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 80096ce:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <SendRelay2_Other+0x78>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	4a0b      	ldr	r2, [pc, #44]	; (8009704 <SendRelay2_Other+0x78>)
 80096d6:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 80096d8:	4b0c      	ldr	r3, [pc, #48]	; (800970c <SendRelay2_Other+0x80>)
 80096da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096de:	461a      	mov	r2, r3
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <SendRelay2_Other+0x78>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d102      	bne.n	80096ee <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 80096e8:	4b06      	ldr	r3, [pc, #24]	; (8009704 <SendRelay2_Other+0x78>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 80096ee:	f00e fe2d 	bl	801834c <HAL_GetTick>
 80096f2:	4603      	mov	r3, r0
 80096f4:	4a01      	ldr	r2, [pc, #4]	; (80096fc <SendRelay2_Other+0x70>)
 80096f6:	6013      	str	r3, [r2, #0]
	}
}
 80096f8:	bf00      	nop
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	2000259c 	.word	0x2000259c
 8009700:	2000243c 	.word	0x2000243c
 8009704:	200025a0 	.word	0x200025a0
 8009708:	200022ac 	.word	0x200022ac
 800970c:	20000304 	.word	0x20000304

08009710 <Process_HitachiEI>:




void Process_HitachiEI(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009714:	f016 f908 	bl	801f928 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8009718:	481a      	ldr	r0, [pc, #104]	; (8009784 <Process_HitachiEI+0x74>)
 800971a:	f012 f97d 	bl	801ba18 <HAL_IWDG_Refresh>

		Feed_wdt();
 800971e:	f00b fb5d 	bl	8014ddc <Feed_wdt>

		readCanToStructs();
 8009722:	f007 fdbb 	bl	801129c <readCanToStructs>

		Check_for_cmd();
 8009726:	f7f7 fa17 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 800972a:	f7f7 fc0f 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 800972e:	f7f7 fc7b 	bl	8001028 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8009732:	f7fe fe33 	bl	800839c <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8009736:	f7fe fd59 	bl	80081ec <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 800973a:	f7fe fdc3 	bl	80082c4 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 800973e:	f7fe fcc5 	bl	80080cc <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8009742:	f7ff fdb9 	bl	80092b8 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8009746:	f7ff fc6f 	bl	8009028 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 800974a:	f7ff fbf3 	bl	8008f34 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 800974e:	f7ff fcbb 	bl	80090c8 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009752:	f002 fe73 	bl	800c43c <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8009756:	f7ff fe0d 	bl	8009374 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 800975a:	f7ff ff97 	bl	800968c <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 800975e:	f00d fdb1 	bl	80172c4 <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 8009762:	4b09      	ldr	r3, [pc, #36]	; (8009788 <Process_HitachiEI+0x78>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 800976a:	4b08      	ldr	r3, [pc, #32]	; (800978c <Process_HitachiEI+0x7c>)
 800976c:	2203      	movs	r2, #3
 800976e:	701a      	strb	r2, [r3, #0]
			break;
 8009770:	e002      	b.n	8009778 <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 8009772:	f00e fbd9 	bl	8017f28 <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009776:	e7cd      	b.n	8009714 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009778:	f00d fca2 	bl	80170c0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800977c:	4801      	ldr	r0, [pc, #4]	; (8009784 <Process_HitachiEI+0x74>)
 800977e:	f012 f94b 	bl	801ba18 <HAL_IWDG_Refresh>
		Data_Processing();
 8009782:	e7f9      	b.n	8009778 <Process_HitachiEI+0x68>
 8009784:	2000a160 	.word	0x2000a160
 8009788:	200009b4 	.word	0x200009b4
 800978c:	20000db9 	.word	0x20000db9

08009790 <ReAssignData>:

#endif


void ReAssignData(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 8009796:	af00      	add	r7, sp, #0
	EI_t EI_dataTempEthernet,EI_dataTempSerial;
	uint8_t PeerTraverser = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
	bool SerialFlag = RESET;
 800979e:	2300      	movs	r3, #0
 80097a0:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
	bool OrderOKFlag = SET;
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	uint8_t EthernetIndex = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
	uint8_t SerialIndex = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3



	printf("EI_data.Hitachi_st.EnableSerialPort:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 80097b6:	4b8d      	ldr	r3, [pc, #564]	; (80099ec <ReAssignData+0x25c>)
 80097b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80097bc:	4619      	mov	r1, r3
 80097be:	488c      	ldr	r0, [pc, #560]	; (80099f0 <ReAssignData+0x260>)
 80097c0:	f01b fdce 	bl	8025360 <iprintf>
	if(EI_data.Hitachi_st.EnableSerialPort <= 0)
 80097c4:	4b89      	ldr	r3, [pc, #548]	; (80099ec <ReAssignData+0x25c>)
 80097c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 83d8 	beq.w	8009f80 <ReAssignData+0x7f0>
	{
		return;
	}

	memset(&EI_dataTempEthernet,0,sizeof(EI_t));
 80097d0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80097d4:	f44f 7256 	mov.w	r2, #856	; 0x358
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f01b fcd8 	bl	8025190 <memset>
	memset(&EI_dataTempSerial,0,sizeof(EI_t));
 80097e0:	463b      	mov	r3, r7
 80097e2:	f44f 7256 	mov.w	r2, #856	; 0x358
 80097e6:	2100      	movs	r1, #0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f01b fcd1 	bl	8025190 <memset>


	/* Check whether the order is valid */
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 80097ee:	2300      	movs	r3, #0
 80097f0:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 80097f4:	e026      	b.n	8009844 <ReAssignData+0xb4>
	{
		if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 80097f6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 80097fa:	4a7c      	ldr	r2, [pc, #496]	; (80099ec <ReAssignData+0x25c>)
 80097fc:	4413      	add	r3, r2
 80097fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009802:	2b02      	cmp	r3, #2
 8009804:	d103      	bne.n	800980e <ReAssignData+0x7e>
		{
			SerialFlag = SET;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
 800980c:	e015      	b.n	800983a <ReAssignData+0xaa>
		}
		else if ((EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET) && (SerialFlag == SET))
 800980e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009812:	4a76      	ldr	r2, [pc, #472]	; (80099ec <ReAssignData+0x25c>)
 8009814:	4413      	add	r3, r2
 8009816:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800981a:	2b01      	cmp	r3, #1
 800981c:	d10d      	bne.n	800983a <ReAssignData+0xaa>
 800981e:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <ReAssignData+0xaa>
		{
			printf("EI_data.Hitachi_st.EnableSerialPort11111111111:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009826:	4b71      	ldr	r3, [pc, #452]	; (80099ec <ReAssignData+0x25c>)
 8009828:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800982c:	4619      	mov	r1, r3
 800982e:	4871      	ldr	r0, [pc, #452]	; (80099f4 <ReAssignData+0x264>)
 8009830:	f01b fd96 	bl	8025360 <iprintf>
			OrderOKFlag = RESET;
 8009834:	2300      	movs	r3, #0
 8009836:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 800983a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800983e:	3301      	adds	r3, #1
 8009840:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009844:	4b69      	ldr	r3, [pc, #420]	; (80099ec <ReAssignData+0x25c>)
 8009846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800984a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800984e:	429a      	cmp	r2, r3
 8009850:	d3d1      	bcc.n	80097f6 <ReAssignData+0x66>
		}
	}

	if(OrderOKFlag == RESET)
 8009852:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8009856:	f083 0301 	eor.w	r3, r3, #1
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 838b 	beq.w	8009f78 <ReAssignData+0x7e8>
	{
		memcpy(&EI_BeforeReorderData,&EI_data,sizeof(EI_t));
 8009862:	4a65      	ldr	r2, [pc, #404]	; (80099f8 <ReAssignData+0x268>)
 8009864:	4b61      	ldr	r3, [pc, #388]	; (80099ec <ReAssignData+0x25c>)
 8009866:	4610      	mov	r0, r2
 8009868:	4619      	mov	r1, r3
 800986a:	f44f 7356 	mov.w	r3, #856	; 0x358
 800986e:	461a      	mov	r2, r3
 8009870:	f01b fc66 	bl	8025140 <memcpy>
		ReorderFlag = SET;
 8009874:	4b61      	ldr	r3, [pc, #388]	; (80099fc <ReAssignData+0x26c>)
 8009876:	2201      	movs	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
		printf("\n============================ CONFIG DATA IS NOT IN ORDER RE-ORDERING THE DATA ============================\n");
 800987a:	4861      	ldr	r0, [pc, #388]	; (8009a00 <ReAssignData+0x270>)
 800987c:	f01b fe0c 	bl	8025498 <puts>

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009880:	2300      	movs	r3, #0
 8009882:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009886:	e172      	b.n	8009b6e <ReAssignData+0x3de>
		{
			if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET)
 8009888:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800988c:	4a57      	ldr	r2, [pc, #348]	; (80099ec <ReAssignData+0x25c>)
 800988e:	4413      	add	r3, r2
 8009890:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009894:	2b01      	cmp	r3, #1
 8009896:	f040 80b5 	bne.w	8009a04 <ReAssignData+0x274>
			{
				EI_dataTempEthernet.Hitachi_st.ClockMaster[EthernetIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 800989a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800989e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 80098a2:	4952      	ldr	r1, [pc, #328]	; (80099ec <ReAssignData+0x25c>)
 80098a4:	440a      	add	r2, r1
 80098a6:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 80098aa:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 80098ae:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 80098b2:	4413      	add	r3, r2
 80098b4:	460a      	mov	r2, r1
 80098b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempEthernet.Hitachi_st.Interface_Type[EthernetIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 80098ba:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 80098be:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 80098c2:	494a      	ldr	r1, [pc, #296]	; (80099ec <ReAssignData+0x25c>)
 80098c4:	440a      	add	r2, r1
 80098c6:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 80098ca:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 80098ce:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 80098d2:	4413      	add	r3, r2
 80098d4:	460a      	mov	r2, r1
 80098d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 80098da:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 80098de:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 80098e2:	4a42      	ldr	r2, [pc, #264]	; (80099ec <ReAssignData+0x25c>)
 80098e4:	3366      	adds	r3, #102	; 0x66
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80098f0:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 80098f4:	f100 0366 	add.w	r3, r0, #102	; 0x66
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	440b      	add	r3, r1
 80098fc:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 80098fe:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009902:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 8009906:	4a39      	ldr	r2, [pc, #228]	; (80099ec <ReAssignData+0x25c>)
 8009908:	3370      	adds	r3, #112	; 0x70
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009914:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8009918:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009922:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009926:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800992a:	4a30      	ldr	r2, [pc, #192]	; (80099ec <ReAssignData+0x25c>)
 800992c:	33f4      	adds	r3, #244	; 0xf4
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	4413      	add	r3, r2
 8009932:	8898      	ldrh	r0, [r3, #4]
 8009934:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009938:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800993c:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	4413      	add	r3, r2
 8009944:	4602      	mov	r2, r0
 8009946:	809a      	strh	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.Bool_outputs[EthernetIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 8009948:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800994c:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009950:	4926      	ldr	r1, [pc, #152]	; (80099ec <ReAssignData+0x25c>)
 8009952:	440a      	add	r2, r1
 8009954:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009958:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800995c:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009960:	4413      	add	r3, r2
 8009962:	460a      	mov	r2, r1
 8009964:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009968:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800996c:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009970:	491e      	ldr	r1, [pc, #120]	; (80099ec <ReAssignData+0x25c>)
 8009972:	338a      	adds	r3, #138	; 0x8a
 8009974:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009978:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800997c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009980:	328a      	adds	r2, #138	; 0x8a
 8009982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009986:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800998a:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800998e:	4917      	ldr	r1, [pc, #92]	; (80099ec <ReAssignData+0x25c>)
 8009990:	3394      	adds	r3, #148	; 0x94
 8009992:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009996:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800999a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800999e:	3294      	adds	r2, #148	; 0x94
 80099a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 80099a4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 80099a8:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 80099ac:	490f      	ldr	r1, [pc, #60]	; (80099ec <ReAssignData+0x25c>)
 80099ae:	339e      	adds	r3, #158	; 0x9e
 80099b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80099b4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80099b8:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80099bc:	329e      	adds	r2, #158	; 0x9e
 80099be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempEthernet.Hitachi_st.PeersCnt;
 80099c2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80099c6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80099ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099ce:	3301      	adds	r3, #1
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80099d6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80099da:	f883 2020 	strb.w	r2, [r3, #32]
				++EthernetIndex;
 80099de:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 80099e2:	3301      	adds	r3, #1
 80099e4:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
 80099e8:	e0bc      	b.n	8009b64 <ReAssignData+0x3d4>
 80099ea:	bf00      	nop
 80099ec:	20000304 	.word	0x20000304
 80099f0:	08028014 	.word	0x08028014
 80099f4:	0802803c 	.word	0x0802803c
 80099f8:	2000065c 	.word	0x2000065c
 80099fc:	2000124a 	.word	0x2000124a
 8009a00:	08028070 	.word	0x08028070
			}
			else if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009a04:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009a08:	4aa9      	ldr	r2, [pc, #676]	; (8009cb0 <ReAssignData+0x520>)
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	f040 80a7 	bne.w	8009b64 <ReAssignData+0x3d4>
			{
				EI_dataTempSerial.Hitachi_st.ClockMaster[SerialIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 8009a16:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009a1a:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009a1e:	49a4      	ldr	r1, [pc, #656]	; (8009cb0 <ReAssignData+0x520>)
 8009a20:	440a      	add	r2, r1
 8009a22:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009a26:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009a2a:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009a2e:	4413      	add	r3, r2
 8009a30:	460a      	mov	r2, r1
 8009a32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempSerial.Hitachi_st.Interface_Type[SerialIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 8009a36:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009a3a:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009a3e:	499c      	ldr	r1, [pc, #624]	; (8009cb0 <ReAssignData+0x520>)
 8009a40:	440a      	add	r2, r1
 8009a42:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009a46:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009a4a:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009a4e:	4413      	add	r3, r2
 8009a50:	460a      	mov	r2, r1
 8009a52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009a56:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009a5a:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 8009a5e:	4a94      	ldr	r2, [pc, #592]	; (8009cb0 <ReAssignData+0x520>)
 8009a60:	3366      	adds	r3, #102	; 0x66
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009a6c:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 8009a70:	f100 0366 	add.w	r3, r0, #102	; 0x66
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009a7a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009a7e:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 8009a82:	4a8b      	ldr	r2, [pc, #556]	; (8009cb0 <ReAssignData+0x520>)
 8009a84:	3370      	adds	r3, #112	; 0x70
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009a90:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 8009a94:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][SerialIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009a9e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009aa2:	f897 16b3 	ldrb.w	r1, [r7, #1715]	; 0x6b3
 8009aa6:	4a82      	ldr	r2, [pc, #520]	; (8009cb0 <ReAssignData+0x520>)
 8009aa8:	33f4      	adds	r3, #244	; 0xf4
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	4413      	add	r3, r2
 8009aae:	8898      	ldrh	r0, [r3, #4]
 8009ab0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009ab4:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 8009ab8:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	4413      	add	r3, r2
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	809a      	strh	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.Bool_outputs[SerialIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 8009ac4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009ac8:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009acc:	4978      	ldr	r1, [pc, #480]	; (8009cb0 <ReAssignData+0x520>)
 8009ace:	440a      	add	r2, r1
 8009ad0:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009ad4:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009ad8:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009adc:	4413      	add	r3, r2
 8009ade:	460a      	mov	r2, r1
 8009ae0:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009ae4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ae8:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009aec:	4970      	ldr	r1, [pc, #448]	; (8009cb0 <ReAssignData+0x520>)
 8009aee:	338a      	adds	r3, #138	; 0x8a
 8009af0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009af4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009af8:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009afc:	328a      	adds	r2, #138	; 0x8a
 8009afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009b02:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009b06:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009b0a:	4969      	ldr	r1, [pc, #420]	; (8009cb0 <ReAssignData+0x520>)
 8009b0c:	3394      	adds	r3, #148	; 0x94
 8009b0e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009b12:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009b16:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009b1a:	3294      	adds	r2, #148	; 0x94
 8009b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[SerialIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 8009b20:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009b24:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009b28:	4961      	ldr	r1, [pc, #388]	; (8009cb0 <ReAssignData+0x520>)
 8009b2a:	339e      	adds	r3, #158	; 0x9e
 8009b2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009b30:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009b34:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009b38:	329e      	adds	r2, #158	; 0x9e
 8009b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempSerial.Hitachi_st.PeersCnt;
 8009b3e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009b42:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009b52:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009b56:	f883 2020 	strb.w	r2, [r3, #32]
				++SerialIndex;
 8009b5a:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009b5e:	3301      	adds	r3, #1
 8009b60:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009b64:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009b68:	3301      	adds	r3, #1
 8009b6a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009b6e:	4b50      	ldr	r3, [pc, #320]	; (8009cb0 <ReAssignData+0x520>)
 8009b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b74:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	f4ff ae85 	bcc.w	8009888 <ReAssignData+0xf8>
			}
		}

		EthernetIndex = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		SerialIndex = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009b90:	e077      	b.n	8009c82 <ReAssignData+0x4f2>
		{
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][0] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][0];
 8009b92:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009b96:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009b9a:	4a45      	ldr	r2, [pc, #276]	; (8009cb0 <ReAssignData+0x520>)
 8009b9c:	3312      	adds	r3, #18
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	78d8      	ldrb	r0, [r3, #3]
 8009ba4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009ba8:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009bac:	f101 0312 	add.w	r3, r1, #18
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	70da      	strb	r2, [r3, #3]
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][1] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][1];
 8009bb8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009bbc:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009bc0:	4a3b      	ldr	r2, [pc, #236]	; (8009cb0 <ReAssignData+0x520>)
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 8009bca:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009bce:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009bd2:	008b      	lsls	r3, r1, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][2] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][2];
 8009bdc:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009be0:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009be4:	4a32      	ldr	r2, [pc, #200]	; (8009cb0 <ReAssignData+0x520>)
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 8009bee:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009bf2:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009bf6:	008b      	lsls	r3, r1, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][3] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][3];
 8009c00:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c04:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009c08:	4a29      	ldr	r2, [pc, #164]	; (8009cb0 <ReAssignData+0x520>)
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
 8009c12:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009c16:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009c1a:	008b      	lsls	r3, r1, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	4602      	mov	r2, r0
 8009c20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][TX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][TX_PORT];
 8009c24:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c28:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009c2c:	4a20      	ldr	r2, [pc, #128]	; (8009cb0 <ReAssignData+0x520>)
 8009c2e:	333e      	adds	r3, #62	; 0x3e
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	8858      	ldrh	r0, [r3, #2]
 8009c36:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009c3a:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009c3e:	f101 033e 	add.w	r3, r1, #62	; 0x3e
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	4602      	mov	r2, r0
 8009c48:	805a      	strh	r2, [r3, #2]
			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][RX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][RX_PORT];
 8009c4a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c4e:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009c52:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <ReAssignData+0x520>)
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	; 0xfc
 8009c5c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009c60:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009c64:	008b      	lsls	r3, r1, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	4602      	mov	r2, r0
 8009c6a:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
			++EthernetIndex;
 8009c6e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009c72:	3301      	adds	r3, #1
 8009c74:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 8009c78:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009c82:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <ReAssignData+0x520>)
 8009c84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009c88:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d380      	bcc.n	8009b92 <ReAssignData+0x402>
		}


		EthernetIndex = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		if(EI_dataTempEthernet.Hitachi_st.PeersCnt > 0)
 8009c96:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009c9a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 80af 	beq.w	8009e06 <ReAssignData+0x676>
		{
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009cae:	e09f      	b.n	8009df0 <ReAssignData+0x660>
 8009cb0:	20000304 	.word	0x20000304
			{
				EI_data.Hitachi_st.ClockMaster[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.ClockMaster[PeerTraverser];
 8009cb4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009cb8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009cbc:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009cc0:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009cca:	4ab0      	ldr	r2, [pc, #704]	; (8009f8c <ReAssignData+0x7fc>)
 8009ccc:	4413      	add	r3, r2
 8009cce:	460a      	mov	r2, r1
 8009cd0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Interface_Type[PeerTraverser];
 8009cd4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009cd8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009cdc:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009ce0:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009cea:	4aa8      	ldr	r2, [pc, #672]	; (8009f8c <ReAssignData+0x7fc>)
 8009cec:	4413      	add	r3, r2
 8009cee:	460a      	mov	r2, r1
 8009cf0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009cf4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009cf8:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009cfc:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009d00:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009d04:	3366      	adds	r3, #102	; 0x66
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	489f      	ldr	r0, [pc, #636]	; (8009f8c <ReAssignData+0x7fc>)
 8009d0e:	f101 0366 	add.w	r3, r1, #102	; 0x66
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4403      	add	r3, r0
 8009d16:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009d18:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d1c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009d20:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009d24:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009d28:	3370      	adds	r3, #112	; 0x70
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	4896      	ldr	r0, [pc, #600]	; (8009f8c <ReAssignData+0x7fc>)
 8009d32:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4403      	add	r3, r0
 8009d3a:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser] = EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009d3c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d40:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009d44:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009d48:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 8009d4c:	33f4      	adds	r3, #244	; 0xf4
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	440b      	add	r3, r1
 8009d52:	8898      	ldrh	r0, [r3, #4]
 8009d54:	498d      	ldr	r1, [pc, #564]	; (8009f8c <ReAssignData+0x7fc>)
 8009d56:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	440b      	add	r3, r1
 8009d5e:	4602      	mov	r2, r0
 8009d60:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Bool_outputs[PeerTraverser];
 8009d62:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009d66:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d6a:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009d6e:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 8009d72:	440a      	add	r2, r1
 8009d74:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009d78:	4a84      	ldr	r2, [pc, #528]	; (8009f8c <ReAssignData+0x7fc>)
 8009d7a:	4413      	add	r3, r2
 8009d7c:	460a      	mov	r2, r1
 8009d7e:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009d82:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009d86:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d8a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009d8e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009d92:	318a      	adds	r1, #138	; 0x8a
 8009d94:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009d98:	497c      	ldr	r1, [pc, #496]	; (8009f8c <ReAssignData+0x7fc>)
 8009d9a:	338a      	adds	r3, #138	; 0x8a
 8009d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009da0:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009da4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009da8:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009dac:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009db0:	3194      	adds	r1, #148	; 0x94
 8009db2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009db6:	4975      	ldr	r1, [pc, #468]	; (8009f8c <ReAssignData+0x7fc>)
 8009db8:	3394      	adds	r3, #148	; 0x94
 8009dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 8009dbe:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009dc2:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009dc6:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009dca:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009dce:	319e      	adds	r1, #158	; 0x9e
 8009dd0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009dd4:	496d      	ldr	r1, [pc, #436]	; (8009f8c <ReAssignData+0x7fc>)
 8009dd6:	339e      	adds	r3, #158	; 0x9e
 8009dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 8009ddc:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009de0:	3301      	adds	r3, #1
 8009de2:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 8009de6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009dea:	3301      	adds	r3, #1
 8009dec:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009df0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009df4:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dfc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009e00:	429a      	cmp	r2, r3
 8009e02:	f4ff af57 	bcc.w	8009cb4 <ReAssignData+0x524>
			}
		}
		if(EI_dataTempSerial.Hitachi_st.PeersCnt > 0)
 8009e06:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e0a:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 80ad 	beq.w	8009f72 <ReAssignData+0x7e2>
		{
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009e1e:	e09d      	b.n	8009f5c <ReAssignData+0x7cc>
			{
				EI_data.Hitachi_st.ClockMaster[EthernetIndex] = EI_dataTempSerial.Hitachi_st.ClockMaster[PeerTraverser];
 8009e20:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009e24:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009e28:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009e2c:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 8009e30:	440a      	add	r2, r1
 8009e32:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009e36:	4a55      	ldr	r2, [pc, #340]	; (8009f8c <ReAssignData+0x7fc>)
 8009e38:	4413      	add	r3, r2
 8009e3a:	460a      	mov	r2, r1
 8009e3c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Interface_Type[PeerTraverser];
 8009e40:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009e44:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009e48:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009e4c:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 8009e50:	440a      	add	r2, r1
 8009e52:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009e56:	4a4d      	ldr	r2, [pc, #308]	; (8009f8c <ReAssignData+0x7fc>)
 8009e58:	4413      	add	r3, r2
 8009e5a:	460a      	mov	r2, r1
 8009e5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009e60:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e64:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009e68:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009e6c:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009e70:	3366      	adds	r3, #102	; 0x66
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	4844      	ldr	r0, [pc, #272]	; (8009f8c <ReAssignData+0x7fc>)
 8009e7a:	f101 0366 	add.w	r3, r1, #102	; 0x66
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4403      	add	r3, r0
 8009e82:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009e84:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e88:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009e8c:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009e90:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009e94:	3370      	adds	r3, #112	; 0x70
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	483b      	ldr	r0, [pc, #236]	; (8009f8c <ReAssignData+0x7fc>)
 8009e9e:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4403      	add	r3, r0
 8009ea6:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009ea8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009eac:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009eb0:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009eb4:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 8009eb8:	33f4      	adds	r3, #244	; 0xf4
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	440b      	add	r3, r1
 8009ebe:	8898      	ldrh	r0, [r3, #4]
 8009ec0:	4932      	ldr	r1, [pc, #200]	; (8009f8c <ReAssignData+0x7fc>)
 8009ec2:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 8009ec6:	005b      	lsls	r3, r3, #1
 8009ec8:	440b      	add	r3, r1
 8009eca:	4602      	mov	r2, r0
 8009ecc:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Bool_outputs[PeerTraverser];
 8009ece:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009ed2:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009ed6:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8009eda:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 8009ede:	440a      	add	r2, r1
 8009ee0:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009ee4:	4a29      	ldr	r2, [pc, #164]	; (8009f8c <ReAssignData+0x7fc>)
 8009ee6:	4413      	add	r3, r2
 8009ee8:	460a      	mov	r2, r1
 8009eea:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009eee:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009ef2:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009ef6:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009efa:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009efe:	318a      	adds	r1, #138	; 0x8a
 8009f00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009f04:	4921      	ldr	r1, [pc, #132]	; (8009f8c <ReAssignData+0x7fc>)
 8009f06:	338a      	adds	r3, #138	; 0x8a
 8009f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009f0c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009f10:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009f14:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009f18:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009f1c:	3194      	adds	r1, #148	; 0x94
 8009f1e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009f22:	491a      	ldr	r1, [pc, #104]	; (8009f8c <ReAssignData+0x7fc>)
 8009f24:	3394      	adds	r3, #148	; 0x94
 8009f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 8009f2a:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 8009f2e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009f32:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009f36:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009f3a:	319e      	adds	r1, #158	; 0x9e
 8009f3c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009f40:	4912      	ldr	r1, [pc, #72]	; (8009f8c <ReAssignData+0x7fc>)
 8009f42:	339e      	adds	r3, #158	; 0x9e
 8009f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 8009f48:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 8009f52:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f56:	3301      	adds	r3, #1
 8009f58:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f5c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f60:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f68:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	f4ff af57 	bcc.w	8009e20 <ReAssignData+0x690>

			}
		}

		print_self_Details_Hitachi();
 8009f72:	f7fe fe89 	bl	8008c88 <print_self_Details_Hitachi>
 8009f76:	e004      	b.n	8009f82 <ReAssignData+0x7f2>

	}
	else
	{
		printf("\nNo PROBLEM Found\n");
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <ReAssignData+0x800>)
 8009f7a:	f01b fa8d 	bl	8025498 <puts>
 8009f7e:	e000      	b.n	8009f82 <ReAssignData+0x7f2>
		return;
 8009f80:	bf00      	nop
	}

}
 8009f82:	f507 67d7 	add.w	r7, r7, #1720	; 0x6b8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000304 	.word	0x20000304
 8009f90:	080280dc 	.word	0x080280dc

08009f94 <ReArrangedVitalData>:

void ReArrangedVitalData(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
	if(ReorderFlag == SET)
 8009f9a:	4b23      	ldr	r3, [pc, #140]	; (800a028 <ReArrangedVitalData+0x94>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d13d      	bne.n	800a01e <ReArrangedVitalData+0x8a>
	{
		memset(&HitachiEI_DataReArranged_st,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8009fa2:	22a2      	movs	r2, #162	; 0xa2
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	4821      	ldr	r0, [pc, #132]	; (800a02c <ReArrangedVitalData+0x98>)
 8009fa8:	f01b f8f2 	bl	8025190 <memset>
		HitachiEI_DataReArranged_st.ActualDataBytes = vEI_Transver_EI_To_MIE.ActualDataBytes;
 8009fac:	4b20      	ldr	r3, [pc, #128]	; (800a030 <ReArrangedVitalData+0x9c>)
 8009fae:	881a      	ldrh	r2, [r3, #0]
 8009fb0:	4b1e      	ldr	r3, [pc, #120]	; (800a02c <ReArrangedVitalData+0x98>)
 8009fb2:	801a      	strh	r2, [r3, #0]

		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	71fb      	strb	r3, [r7, #7]
 8009fb8:	e02b      	b.n	800a012 <ReArrangedVitalData+0x7e>
		{
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 8009fba:	2300      	movs	r3, #0
 8009fbc:	71bb      	strb	r3, [r7, #6]
 8009fbe:	e01f      	b.n	800a000 <ReArrangedVitalData+0x6c>
			{
				if(EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser] == EI_BeforeReorderData.Hitachi_st.SOURCE_ADDRESSES[PeerFinder])
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	4a1c      	ldr	r2, [pc, #112]	; (800a034 <ReArrangedVitalData+0xa0>)
 8009fc4:	3366      	adds	r3, #102	; 0x66
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	79bb      	ldrb	r3, [r7, #6]
 8009fce:	491a      	ldr	r1, [pc, #104]	; (800a038 <ReArrangedVitalData+0xa4>)
 8009fd0:	3366      	adds	r3, #102	; 0x66
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d10e      	bne.n	8009ffa <ReArrangedVitalData+0x66>
				{
					memcpy(&HitachiEI_DataReArranged_st.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],&vEI_Transver_EI_To_MIE.Inputs[PeerFinder * MAX_OUTPUTS_PER_PEER],MAX_OUTPUTS_PER_PEER);
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	4a12      	ldr	r2, [pc, #72]	; (800a02c <ReArrangedVitalData+0x98>)
 8009fe2:	4413      	add	r3, r2
 8009fe4:	1c98      	adds	r0, r3, #2
 8009fe6:	79bb      	ldrb	r3, [r7, #6]
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	4a11      	ldr	r2, [pc, #68]	; (800a030 <ReArrangedVitalData+0x9c>)
 8009fec:	4413      	add	r3, r2
 8009fee:	3302      	adds	r3, #2
 8009ff0:	2210      	movs	r2, #16
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f01b f8a4 	bl	8025140 <memcpy>
					break;
 8009ff8:	e008      	b.n	800a00c <ReArrangedVitalData+0x78>
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 8009ffa:	79bb      	ldrb	r3, [r7, #6]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	71bb      	strb	r3, [r7, #6]
 800a000:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <ReArrangedVitalData+0xa0>)
 800a002:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a006:	79ba      	ldrb	r2, [r7, #6]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d3d9      	bcc.n	8009fc0 <ReArrangedVitalData+0x2c>
		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	3301      	adds	r3, #1
 800a010:	71fb      	strb	r3, [r7, #7]
 800a012:	4b08      	ldr	r3, [pc, #32]	; (800a034 <ReArrangedVitalData+0xa0>)
 800a014:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a018:	79fa      	ldrb	r2, [r7, #7]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d3cd      	bcc.n	8009fba <ReArrangedVitalData+0x26>
				}
			}
		}
	}
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	2000124a 	.word	0x2000124a
 800a02c:	20001510 	.word	0x20001510
 800a030:	2000146c 	.word	0x2000146c
 800a034:	20000304 	.word	0x20000304
 800a038:	2000065c 	.word	0x2000065c

0800a03c <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800a042:	4b26      	ldr	r3, [pc, #152]	; (800a0dc <reset_cause_get+0xa0>)
 800a044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a046:	2b00      	cmp	r3, #0
 800a048:	da02      	bge.n	800a050 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800a04a:	2301      	movs	r3, #1
 800a04c:	71fb      	strb	r3, [r7, #7]
 800a04e:	e037      	b.n	800a0c0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800a050:	4b22      	ldr	r3, [pc, #136]	; (800a0dc <reset_cause_get+0xa0>)
 800a052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800a05c:	2302      	movs	r3, #2
 800a05e:	71fb      	strb	r3, [r7, #7]
 800a060:	e02e      	b.n	800a0c0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800a062:	4b1e      	ldr	r3, [pc, #120]	; (800a0dc <reset_cause_get+0xa0>)
 800a064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a066:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800a06e:	2303      	movs	r3, #3
 800a070:	71fb      	strb	r3, [r7, #7]
 800a072:	e025      	b.n	800a0c0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800a074:	4b19      	ldr	r3, [pc, #100]	; (800a0dc <reset_cause_get+0xa0>)
 800a076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800a080:	2304      	movs	r3, #4
 800a082:	71fb      	strb	r3, [r7, #7]
 800a084:	e01c      	b.n	800a0c0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800a086:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <reset_cause_get+0xa0>)
 800a088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800a092:	2305      	movs	r3, #5
 800a094:	71fb      	strb	r3, [r7, #7]
 800a096:	e013      	b.n	800a0c0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800a098:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <reset_cause_get+0xa0>)
 800a09a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800a0a4:	2306      	movs	r3, #6
 800a0a6:	71fb      	strb	r3, [r7, #7]
 800a0a8:	e00a      	b.n	800a0c0 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800a0aa:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <reset_cause_get+0xa0>)
 800a0ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800a0b6:	2307      	movs	r3, #7
 800a0b8:	71fb      	strb	r3, [r7, #7]
 800a0ba:	e001      	b.n	800a0c0 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800a0c0:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <reset_cause_get+0xa0>)
 800a0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c4:	4a05      	ldr	r2, [pc, #20]	; (800a0dc <reset_cause_get+0xa0>)
 800a0c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0ca:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	40023800 	.word	0x40023800

0800a0e0 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 800a0ea:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <reset_cause_get_name+0x7c>)
 800a0ec:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	2b07      	cmp	r3, #7
 800a0f2:	d82b      	bhi.n	800a14c <reset_cause_get_name+0x6c>
 800a0f4:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <reset_cause_get_name+0x1c>)
 800a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fa:	bf00      	nop
 800a0fc:	0800a11d 	.word	0x0800a11d
 800a100:	0800a123 	.word	0x0800a123
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a12f 	.word	0x0800a12f
 800a10c:	0800a135 	.word	0x0800a135
 800a110:	0800a13b 	.word	0x0800a13b
 800a114:	0800a141 	.word	0x0800a141
 800a118:	0800a147 	.word	0x0800a147
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <reset_cause_get_name+0x80>)
 800a11e:	60fb      	str	r3, [r7, #12]
            break;
 800a120:	e014      	b.n	800a14c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800a122:	4b10      	ldr	r3, [pc, #64]	; (800a164 <reset_cause_get_name+0x84>)
 800a124:	60fb      	str	r3, [r7, #12]
            break;
 800a126:	e011      	b.n	800a14c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800a128:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <reset_cause_get_name+0x88>)
 800a12a:	60fb      	str	r3, [r7, #12]
            break;
 800a12c:	e00e      	b.n	800a14c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800a12e:	4b0f      	ldr	r3, [pc, #60]	; (800a16c <reset_cause_get_name+0x8c>)
 800a130:	60fb      	str	r3, [r7, #12]
            break;
 800a132:	e00b      	b.n	800a14c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800a134:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <reset_cause_get_name+0x90>)
 800a136:	60fb      	str	r3, [r7, #12]
            break;
 800a138:	e008      	b.n	800a14c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800a13a:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <reset_cause_get_name+0x94>)
 800a13c:	60fb      	str	r3, [r7, #12]
            break;
 800a13e:	e005      	b.n	800a14c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800a140:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <reset_cause_get_name+0x98>)
 800a142:	60fb      	str	r3, [r7, #12]
            break;
 800a144:	e002      	b.n	800a14c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800a146:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <reset_cause_get_name+0x9c>)
 800a148:	60fb      	str	r3, [r7, #12]
            break;
 800a14a:	bf00      	nop
    }

    return reset_cause_name;
 800a14c:	68fb      	ldr	r3, [r7, #12]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	080280f0 	.word	0x080280f0
 800a160:	080280f4 	.word	0x080280f4
 800a164:	080280fc 	.word	0x080280fc
 800a168:	0802810c 	.word	0x0802810c
 800a16c:	08028124 	.word	0x08028124
 800a170:	08028140 	.word	0x08028140
 800a174:	08028150 	.word	0x08028150
 800a178:	08028180 	.word	0x08028180
 800a17c:	0802819c 	.word	0x0802819c

0800a180 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800a184:	f00d f89e 	bl	80172c4 <Print_BuildDat_Details>

		readCanToStructs();
 800a188:	f007 f888 	bl	801129c <readCanToStructs>

		Feed_wdt();
 800a18c:	f00a fe26 	bl	8014ddc <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800a190:	480f      	ldr	r0, [pc, #60]	; (800a1d0 <Process_Medha_EI+0x50>)
 800a192:	f011 fc41 	bl	801ba18 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800a196:	f000 f91d 	bl	800a3d4 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800a19a:	f000 fef5 	bl	800af88 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800a19e:	f000 ff5b 	bl	800b058 <Process_Clear_Relays>

		Send_Data_to_Other();
 800a1a2:	f001 f83f 	bl	800b224 <Send_Data_to_Other>

		Process_Data_from_Other();
 800a1a6:	f001 f897 	bl	800b2d8 <Process_Data_from_Other>

		CheckforMedhaCMD();
 800a1aa:	f001 fa6b 	bl	800b684 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 800a1ae:	4b09      	ldr	r3, [pc, #36]	; (800a1d4 <Process_Medha_EI+0x54>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 800a1b6:	4b08      	ldr	r3, [pc, #32]	; (800a1d8 <Process_Medha_EI+0x58>)
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	701a      	strb	r2, [r3, #0]
			break;
 800a1bc:	e002      	b.n	800a1c4 <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 800a1be:	f00d feb3 	bl	8017f28 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800a1c2:	e7df      	b.n	800a184 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800a1c4:	4802      	ldr	r0, [pc, #8]	; (800a1d0 <Process_Medha_EI+0x50>)
 800a1c6:	f011 fc27 	bl	801ba18 <HAL_IWDG_Refresh>
		Data_Processing();
 800a1ca:	f00c ff79 	bl	80170c0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800a1ce:	e7f9      	b.n	800a1c4 <Process_Medha_EI+0x44>
 800a1d0:	2000a160 	.word	0x2000a160
 800a1d4:	200009b4 	.word	0x200009b4
 800a1d8:	20000db9 	.word	0x20000db9

0800a1dc <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	6039      	str	r1, [r7, #0]
 800a1e6:	71fb      	strb	r3, [r7, #7]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 800a1f4:	e0d0      	b.n	800a398 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f00d fd7f 	bl	8017cfc <Com_Get_Byte>
 800a1fe:	4603      	mov	r3, r0
 800a200:	461a      	mov	r2, r3
 800a202:	4b6c      	ldr	r3, [pc, #432]	; (800a3b4 <Get_Medha_EI_Message+0x1d8>)
 800a204:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800a206:	4b6c      	ldr	r3, [pc, #432]	; (800a3b8 <Get_Medha_EI_Message+0x1dc>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	f200 80c2 	bhi.w	800a396 <Get_Medha_EI_Message+0x1ba>
 800a212:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <Get_Medha_EI_Message+0x3c>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a22d 	.word	0x0800a22d
 800a21c:	0800a245 	.word	0x0800a245
 800a220:	0800a397 	.word	0x0800a397
 800a224:	0800a291 	.word	0x0800a291
 800a228:	0800a2e9 	.word	0x0800a2e9
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800a22c:	4b61      	ldr	r3, [pc, #388]	; (800a3b4 <Get_Medha_EI_Message+0x1d8>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b53      	cmp	r3, #83	; 0x53
 800a232:	f040 80b1 	bne.w	800a398 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800a236:	4b61      	ldr	r3, [pc, #388]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a238:	2201      	movs	r2, #1
 800a23a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800a23c:	4b5e      	ldr	r3, [pc, #376]	; (800a3b8 <Get_Medha_EI_Message+0x1dc>)
 800a23e:	2202      	movs	r2, #2
 800a240:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a242:	e0a9      	b.n	800a398 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800a244:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d111      	bne.n	800a270 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800a24c:	4b5b      	ldr	r3, [pc, #364]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	4413      	add	r3, r2
 800a256:	4a57      	ldr	r2, [pc, #348]	; (800a3b4 <Get_Medha_EI_Message+0x1d8>)
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	701a      	strb	r2, [r3, #0]
					i++;
 800a25c:	4b57      	ldr	r3, [pc, #348]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	3301      	adds	r3, #1
 800a262:	b29a      	uxth	r2, r3
 800a264:	4b55      	ldr	r3, [pc, #340]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a266:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 800a268:	4b53      	ldr	r3, [pc, #332]	; (800a3b8 <Get_Medha_EI_Message+0x1dc>)
 800a26a:	2204      	movs	r2, #4
 800a26c:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800a26e:	e00d      	b.n	800a28c <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800a270:	4b52      	ldr	r3, [pc, #328]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	4413      	add	r3, r2
 800a27a:	4a4e      	ldr	r2, [pc, #312]	; (800a3b4 <Get_Medha_EI_Message+0x1d8>)
 800a27c:	7812      	ldrb	r2, [r2, #0]
 800a27e:	701a      	strb	r2, [r3, #0]
					i++;
 800a280:	4b4e      	ldr	r3, [pc, #312]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	3301      	adds	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	4b4c      	ldr	r3, [pc, #304]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a28a:	801a      	strh	r2, [r3, #0]
				break;
 800a28c:	bf00      	nop
			}
			break;
 800a28e:	e083      	b.n	800a398 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800a290:	4b4a      	ldr	r3, [pc, #296]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	3b02      	subs	r3, #2
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	4413      	add	r3, r2
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 800a2a0:	4b47      	ldr	r3, [pc, #284]	; (800a3c0 <Get_Medha_EI_Message+0x1e4>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	801a      	strh	r2, [r3, #0]
				j=1;
 800a2a6:	4b47      	ldr	r3, [pc, #284]	; (800a3c4 <Get_Medha_EI_Message+0x1e8>)
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800a2ac:	4b43      	ldr	r3, [pc, #268]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4a3f      	ldr	r2, [pc, #252]	; (800a3b4 <Get_Medha_EI_Message+0x1d8>)
 800a2b8:	7812      	ldrb	r2, [r2, #0]
 800a2ba:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 800a2bc:	4b40      	ldr	r3, [pc, #256]	; (800a3c0 <Get_Medha_EI_Message+0x1e4>)
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	4b3e      	ldr	r3, [pc, #248]	; (800a3c0 <Get_Medha_EI_Message+0x1e4>)
 800a2c6:	801a      	strh	r2, [r3, #0]
				i++;
 800a2c8:	4b3c      	ldr	r3, [pc, #240]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	4b3a      	ldr	r3, [pc, #232]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a2d2:	801a      	strh	r2, [r3, #0]
				j++;
 800a2d4:	4b3b      	ldr	r3, [pc, #236]	; (800a3c4 <Get_Medha_EI_Message+0x1e8>)
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	4b39      	ldr	r3, [pc, #228]	; (800a3c4 <Get_Medha_EI_Message+0x1e8>)
 800a2de:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 800a2e0:	4b35      	ldr	r3, [pc, #212]	; (800a3b8 <Get_Medha_EI_Message+0x1dc>)
 800a2e2:	2205      	movs	r2, #5
 800a2e4:	701a      	strb	r2, [r3, #0]
				break;
 800a2e6:	e057      	b.n	800a398 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 800a2e8:	4b34      	ldr	r3, [pc, #208]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	4a30      	ldr	r2, [pc, #192]	; (800a3b4 <Get_Medha_EI_Message+0x1d8>)
 800a2f4:	7812      	ldrb	r2, [r2, #0]
 800a2f6:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 800a2f8:	89ba      	ldrh	r2, [r7, #12]
 800a2fa:	4b31      	ldr	r3, [pc, #196]	; (800a3c0 <Get_Medha_EI_Message+0x1e4>)
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d940      	bls.n	800a384 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800a302:	4b2f      	ldr	r3, [pc, #188]	; (800a3c0 <Get_Medha_EI_Message+0x1e4>)
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	3301      	adds	r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	4b2d      	ldr	r3, [pc, #180]	; (800a3c0 <Get_Medha_EI_Message+0x1e4>)
 800a30c:	801a      	strh	r2, [r3, #0]
					i++;
 800a30e:	4b2b      	ldr	r3, [pc, #172]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	4b29      	ldr	r3, [pc, #164]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a318:	801a      	strh	r2, [r3, #0]
					j++;
 800a31a:	4b2a      	ldr	r3, [pc, #168]	; (800a3c4 <Get_Medha_EI_Message+0x1e8>)
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	3301      	adds	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	4b28      	ldr	r3, [pc, #160]	; (800a3c4 <Get_Medha_EI_Message+0x1e8>)
 800a324:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 800a326:	89ba      	ldrh	r2, [r7, #12]
 800a328:	4b25      	ldr	r3, [pc, #148]	; (800a3c0 <Get_Medha_EI_Message+0x1e4>)
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d133      	bne.n	800a398 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800a330:	4b22      	ldr	r3, [pc, #136]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	3b04      	subs	r3, #4
 800a336:	b29a      	uxth	r2, r3
 800a338:	4b23      	ldr	r3, [pc, #140]	; (800a3c8 <Get_Medha_EI_Message+0x1ec>)
 800a33a:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800a33c:	4b22      	ldr	r3, [pc, #136]	; (800a3c8 <Get_Medha_EI_Message+0x1ec>)
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800a342:	4b1e      	ldr	r3, [pc, #120]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a344:	2200      	movs	r2, #0
 800a346:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800a348:	4b1b      	ldr	r3, [pc, #108]	; (800a3b8 <Get_Medha_EI_Message+0x1dc>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800a352:	89fb      	ldrh	r3, [r7, #14]
 800a354:	2b04      	cmp	r3, #4
 800a356:	d804      	bhi.n	800a362 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800a358:	481c      	ldr	r0, [pc, #112]	; (800a3cc <Get_Medha_EI_Message+0x1f0>)
 800a35a:	f01b f89d 	bl	8025498 <puts>
							return ZERO;
 800a35e:	2300      	movs	r3, #0
 800a360:	e023      	b.n	800a3aa <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800a362:	4b19      	ldr	r3, [pc, #100]	; (800a3c8 <Get_Medha_EI_Message+0x1ec>)
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	2000      	movs	r0, #0
 800a36c:	f001 fc4c 	bl	800bc08 <CheckCRC32>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800a376:	89fb      	ldrh	r3, [r7, #14]
 800a378:	e017      	b.n	800a3aa <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800a37a:	4815      	ldr	r0, [pc, #84]	; (800a3d0 <Get_Medha_EI_Message+0x1f4>)
 800a37c:	f01b f88c 	bl	8025498 <puts>
							return ZERO;
 800a380:	2300      	movs	r3, #0
 800a382:	e012      	b.n	800a3aa <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800a384:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <Get_Medha_EI_Message+0x1e0>)
 800a386:	2200      	movs	r2, #0
 800a388:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800a38a:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <Get_Medha_EI_Message+0x1dc>)
 800a38c:	2201      	movs	r2, #1
 800a38e:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800a394:	e000      	b.n	800a398 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800a396:	bf00      	nop
	while(Com_DataReady(ComPort))
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f00d fc6e 	bl	8017c7c <Com_DataReady>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f47f af27 	bne.w	800a1f6 <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20002ca4 	.word	0x20002ca4
 800a3b8:	20000116 	.word	0x20000116
 800a3bc:	20002ca6 	.word	0x20002ca6
 800a3c0:	20002ca8 	.word	0x20002ca8
 800a3c4:	20002caa 	.word	0x20002caa
 800a3c8:	20002cac 	.word	0x20002cac
 800a3cc:	080281b4 	.word	0x080281b4
 800a3d0:	080281bc 	.word	0x080281bc

0800a3d4 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800a3d4:	b5b0      	push	{r4, r5, r7, lr}
 800a3d6:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800a3da:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 800a3e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a3e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f01a feca 	bl	8025190 <memset>
	uint16_t NoOfInputs 		= 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800a402:	2300      	movs	r3, #0
 800a404:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 800a408:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a40c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	3304      	adds	r3, #4
 800a416:	227c      	movs	r2, #124	; 0x7c
 800a418:	2100      	movs	r1, #0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f01a feb8 	bl	8025190 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800a420:	2300      	movs	r3, #0
 800a422:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 800a426:	2300      	movs	r3, #0
 800a428:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800a42c:	4bc8      	ldr	r3, [pc, #800]	; (800a750 <Medha_EI_Analyser+0x37c>)
 800a42e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a432:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800a436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fece 	bl	800a1dc <Get_Medha_EI_Message>
 800a440:	4603      	mov	r3, r0
 800a442:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800a446:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d939      	bls.n	800a4c2 <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800a44e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a452:	48c0      	ldr	r0, [pc, #768]	; (800a754 <Medha_EI_Analyser+0x380>)
 800a454:	f010 fc63 	bl	801ad1e <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 800a458:	48bf      	ldr	r0, [pc, #764]	; (800a758 <Medha_EI_Analyser+0x384>)
 800a45a:	f01b f81d 	bl	8025498 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800a45e:	2300      	movs	r3, #0
 800a460:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800a464:	e024      	b.n	800a4b0 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 800a466:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d010      	beq.n	800a490 <Medha_EI_Analyser+0xbc>
 800a46e:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800a472:	4bba      	ldr	r3, [pc, #744]	; (800a75c <Medha_EI_Analyser+0x388>)
 800a474:	fba3 1302 	umull	r1, r3, r3, r2
 800a478:	08d9      	lsrs	r1, r3, #3
 800a47a:	460b      	mov	r3, r1
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	440b      	add	r3, r1
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d102      	bne.n	800a490 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800a48a:	200a      	movs	r0, #10
 800a48c:	f01a ff80 	bl	8025390 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800a490:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a494:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a498:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a49c:	5cd3      	ldrb	r3, [r2, r3]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	48af      	ldr	r0, [pc, #700]	; (800a760 <Medha_EI_Analyser+0x38c>)
 800a4a2:	f01a ff5d 	bl	8025360 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800a4a6:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800a4b0:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800a4b4:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d3d4      	bcc.n	800a466 <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 800a4bc:	200a      	movs	r0, #10
 800a4be:	f01a ff67 	bl	8025390 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 800a4c2:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 83d5 	beq.w	800ac76 <Medha_EI_Analyser+0x8a2>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f01a fe5b 	bl	8025190 <memset>

		BYTEINIT(0);
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800a4e0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a4e4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a4e8:	4413      	add	r3, r2
 800a4ea:	781a      	ldrb	r2, [r3, #0]
 800a4ec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a4f0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a4f4:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 800a4f6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800a500:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a504:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a508:	4413      	add	r3, r2
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a512:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a516:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800a518:	4b8d      	ldr	r3, [pc, #564]	; (800a750 <Medha_EI_Analyser+0x37c>)
 800a51a:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 800a51e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a522:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a526:	889b      	ldrh	r3, [r3, #4]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d017      	beq.n	800a55c <Medha_EI_Analyser+0x188>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800a52c:	488d      	ldr	r0, [pc, #564]	; (800a764 <Medha_EI_Analyser+0x390>)
 800a52e:	f01a ffb3 	bl	8025498 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 800a532:	4b87      	ldr	r3, [pc, #540]	; (800a750 <Medha_EI_Analyser+0x37c>)
 800a534:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a538:	4619      	mov	r1, r3
 800a53a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a53e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a542:	889b      	ldrh	r3, [r3, #4]
 800a544:	461a      	mov	r2, r3
 800a546:	4888      	ldr	r0, [pc, #544]	; (800a768 <Medha_EI_Analyser+0x394>)
 800a548:	f01a ff0a 	bl	8025360 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800a54c:	4987      	ldr	r1, [pc, #540]	; (800a76c <Medha_EI_Analyser+0x398>)
 800a54e:	4888      	ldr	r0, [pc, #544]	; (800a770 <Medha_EI_Analyser+0x39c>)
 800a550:	f7f5 fe76 	bl	8000240 <strcmp>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 838f 	bne.w	800ac7a <Medha_EI_Analyser+0x8a6>
			{
				return;
			}
		}
		BYTEINC(2);
 800a55c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a560:	3302      	adds	r3, #2
 800a562:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800a566:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a56a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a56e:	4413      	add	r3, r2
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	b29a      	uxth	r2, r3
 800a574:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a578:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a57c:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800a57e:	4b74      	ldr	r3, [pc, #464]	; (800a750 <Medha_EI_Analyser+0x37c>)
 800a580:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800a584:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a588:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a58c:	885b      	ldrh	r3, [r3, #2]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d017      	beq.n	800a5c2 <Medha_EI_Analyser+0x1ee>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800a592:	4878      	ldr	r0, [pc, #480]	; (800a774 <Medha_EI_Analyser+0x3a0>)
 800a594:	f01a ff80 	bl	8025498 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800a598:	4b6d      	ldr	r3, [pc, #436]	; (800a750 <Medha_EI_Analyser+0x37c>)
 800a59a:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a59e:	4619      	mov	r1, r3
 800a5a0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a5a4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a5a8:	885b      	ldrh	r3, [r3, #2]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	486e      	ldr	r0, [pc, #440]	; (800a768 <Medha_EI_Analyser+0x394>)
 800a5ae:	f01a fed7 	bl	8025360 <iprintf>
			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800a5b2:	496e      	ldr	r1, [pc, #440]	; (800a76c <Medha_EI_Analyser+0x398>)
 800a5b4:	486e      	ldr	r0, [pc, #440]	; (800a770 <Medha_EI_Analyser+0x39c>)
 800a5b6:	f7f5 fe43 	bl	8000240 <strcmp>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 835e 	bne.w	800ac7e <Medha_EI_Analyser+0x8aa>
			{
				return;
			}		}
		BYTEINC(2);
 800a5c2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800a5cc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a5d0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a5d4:	4413      	add	r3, r2
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a5dc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a5e0:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 800a5e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a5e6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a5ea:	799b      	ldrb	r3, [r3, #6]
 800a5ec:	2baa      	cmp	r3, #170	; 0xaa
 800a5ee:	d010      	beq.n	800a612 <Medha_EI_Analyser+0x23e>
 800a5f0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a5f4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a5f8:	799b      	ldrb	r3, [r3, #6]
 800a5fa:	2bbb      	cmp	r3, #187	; 0xbb
 800a5fc:	d009      	beq.n	800a612 <Medha_EI_Analyser+0x23e>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 800a5fe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a602:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a606:	799b      	ldrb	r3, [r3, #6]
 800a608:	4619      	mov	r1, r3
 800a60a:	485b      	ldr	r0, [pc, #364]	; (800a778 <Medha_EI_Analyser+0x3a4>)
 800a60c:	f01a fea8 	bl	8025360 <iprintf>
			return;
 800a610:	e336      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(1);
 800a612:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a616:	3301      	adds	r3, #1
 800a618:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800a61c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a620:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a624:	4413      	add	r3, r2
 800a626:	781a      	ldrb	r2, [r3, #0]
 800a628:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a62c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a630:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 800a632:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a636:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a63a:	79db      	ldrb	r3, [r3, #7]
 800a63c:	2be1      	cmp	r3, #225	; 0xe1
 800a63e:	d009      	beq.n	800a654 <Medha_EI_Analyser+0x280>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800a640:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a644:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a648:	79db      	ldrb	r3, [r3, #7]
 800a64a:	4619      	mov	r1, r3
 800a64c:	484b      	ldr	r0, [pc, #300]	; (800a77c <Medha_EI_Analyser+0x3a8>)
 800a64e:	f01a fe87 	bl	8025360 <iprintf>
			return;
 800a652:	e315      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800a654:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a658:	3301      	adds	r3, #1
 800a65a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 800a65e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a662:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a666:	4413      	add	r3, r2
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a670:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a674:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800a676:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a67a:	3302      	adds	r3, #2
 800a67c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800a680:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a684:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a688:	4413      	add	r3, r2
 800a68a:	781a      	ldrb	r2, [r3, #0]
 800a68c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a690:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a694:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800a696:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a69a:	3301      	adds	r3, #1
 800a69c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800a6a0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a6a4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a6a8:	441a      	add	r2, r3
 800a6aa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a6ae:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a6b2:	330b      	adds	r3, #11
 800a6b4:	6811      	ldr	r1, [r2, #0]
 800a6b6:	6019      	str	r1, [r3, #0]
 800a6b8:	8891      	ldrh	r1, [r2, #4]
 800a6ba:	7992      	ldrb	r2, [r2, #6]
 800a6bc:	8099      	strh	r1, [r3, #4]
 800a6be:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 800a6c0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a6c4:	3307      	adds	r3, #7
 800a6c6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800a6ca:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a6ce:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a6d2:	4413      	add	r3, r2
 800a6d4:	781a      	ldrb	r2, [r3, #0]
 800a6d6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a6da:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a6de:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 800a6e0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a6e4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a6e8:	7c9b      	ldrb	r3, [r3, #18]
 800a6ea:	2b11      	cmp	r3, #17
 800a6ec:	d009      	beq.n	800a702 <Medha_EI_Analyser+0x32e>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 800a6ee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a6f2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a6f6:	7c9b      	ldrb	r3, [r3, #18]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4821      	ldr	r0, [pc, #132]	; (800a780 <Medha_EI_Analyser+0x3ac>)
 800a6fc:	f01a fe30 	bl	8025360 <iprintf>
			return;
 800a700:	e2be      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800a702:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a706:	3301      	adds	r3, #1
 800a708:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 800a70c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a710:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 800a714:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a718:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a71c:	4413      	add	r3, r2
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29a      	uxth	r2, r3
 800a722:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a726:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a72a:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800a72c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a730:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a73a:	d925      	bls.n	800a788 <Medha_EI_Analyser+0x3b4>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%lu\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800a73c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a740:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	4619      	mov	r1, r3
 800a748:	480e      	ldr	r0, [pc, #56]	; (800a784 <Medha_EI_Analyser+0x3b0>)
 800a74a:	f01a fe09 	bl	8025360 <iprintf>
			return;
 800a74e:	e297      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
 800a750:	20000304 	.word	0x20000304
 800a754:	40021c00 	.word	0x40021c00
 800a758:	080281c4 	.word	0x080281c4
 800a75c:	cccccccd 	.word	0xcccccccd
 800a760:	080281d0 	.word	0x080281d0
 800a764:	080281d8 	.word	0x080281d8
 800a768:	0802820c 	.word	0x0802820c
 800a76c:	08028230 	.word	0x08028230
 800a770:	20000305 	.word	0x20000305
 800a774:	0802823c 	.word	0x0802823c
 800a778:	0802826c 	.word	0x0802826c
 800a77c:	080282a4 	.word	0x080282a4
 800a780:	080282dc 	.word	0x080282dc
 800a784:	08028320 	.word	0x08028320
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 800a788:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a78c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a790:	695a      	ldr	r2, [r3, #20]
 800a792:	4baa      	ldr	r3, [pc, #680]	; (800aa3c <Medha_EI_Analyser+0x668>)
 800a794:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800a798:	429a      	cmp	r2, r3
 800a79a:	d01b      	beq.n	800a7d4 <Medha_EI_Analyser+0x400>
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800a79c:	49a8      	ldr	r1, [pc, #672]	; (800aa40 <Medha_EI_Analyser+0x66c>)
 800a79e:	48a9      	ldr	r0, [pc, #676]	; (800aa44 <Medha_EI_Analyser+0x670>)
 800a7a0:	f7f5 fd4e 	bl	8000240 <strcmp>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00c      	beq.n	800a7c4 <Medha_EI_Analyser+0x3f0>
			{
				printf("No of Relays Not Matching...\nConfigured:%lu - Received:%lu\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 800a7aa:	4ba4      	ldr	r3, [pc, #656]	; (800aa3c <Medha_EI_Analyser+0x668>)
 800a7ac:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 800a7b0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a7b4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	48a2      	ldr	r0, [pc, #648]	; (800aa48 <Medha_EI_Analyser+0x674>)
 800a7be:	f01a fdcf 	bl	8025360 <iprintf>
				return;
 800a7c2:	e25d      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
			}
			else
			{
				EI_data.Medha_Prms_st.NoofRelays = Medha_EI_Temp_Rx_st.NoofRelays;
 800a7c4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a7c8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	4a9b      	ldr	r2, [pc, #620]	; (800aa3c <Medha_EI_Analyser+0x668>)
 800a7d0:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
			}
		}

		BYTEINC(2);
 800a7d4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a7d8:	3302      	adds	r3, #2
 800a7da:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800a7de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a7e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	f003 0307 	and.w	r3, r3, #7
 800a7ee:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800a7f2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00a      	beq.n	800a810 <Medha_EI_Analyser+0x43c>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 800a7fa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a7fe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	08db      	lsrs	r3, r3, #3
 800a806:	b29b      	uxth	r3, r3
 800a808:	3301      	adds	r3, #1
 800a80a:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 800a80e:	e007      	b.n	800a820 <Medha_EI_Analyser+0x44c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 800a810:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a814:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	08db      	lsrs	r3, r3, #3
 800a81c:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a820:	2300      	movs	r3, #0
 800a822:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a826:	e02a      	b.n	800a87e <Medha_EI_Analyser+0x4aa>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 800a828:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800a82c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a830:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800a834:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800a838:	5c89      	ldrb	r1, [r1, r2]
 800a83a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a83e:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800a842:	4413      	add	r3, r2
 800a844:	460a      	mov	r2, r1
 800a846:	761a      	strb	r2, [r3, #24]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800a848:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a84c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a850:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800a854:	4413      	add	r3, r2
 800a856:	7e1a      	ldrb	r2, [r3, #24]
 800a858:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a85c:	43d2      	mvns	r2, r2
 800a85e:	b2d1      	uxtb	r1, r2
 800a860:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a864:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800a868:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 800a86a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a86e:	3301      	adds	r3, #1
 800a870:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a874:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a878:	3301      	adds	r3, #1
 800a87a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a87e:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a882:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a886:	429a      	cmp	r2, r3
 800a888:	d3ce      	bcc.n	800a828 <Medha_EI_Analyser+0x454>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a88a:	2300      	movs	r3, #0
 800a88c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a890:	e01a      	b.n	800a8c8 <Medha_EI_Analyser+0x4f4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800a892:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800a896:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a89a:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800a89e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800a8a2:	5c89      	ldrb	r1, [r1, r2]
 800a8a4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a8a8:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800a8ac:	4413      	add	r3, r2
 800a8ae:	460a      	mov	r2, r1
 800a8b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			BYTEINC(1);
 800a8b4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800a8be:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a8c8:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a8cc:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d3de      	bcc.n	800a892 <Medha_EI_Analyser+0x4be>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 800a8d4:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 800a8d8:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800a8dc:	463b      	mov	r3, r7
 800a8de:	3398      	adds	r3, #152	; 0x98
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f01a fc1d 	bl	8025120 <memcmp>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d03f      	beq.n	800a96c <Medha_EI_Analyser+0x598>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 800a8ec:	4857      	ldr	r0, [pc, #348]	; (800aa4c <Medha_EI_Analyser+0x678>)
 800a8ee:	f01a fdd3 	bl	8025498 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a8f8:	e011      	b.n	800a91e <Medha_EI_Analyser+0x54a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 800a8fa:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a8fe:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a902:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800a906:	4413      	add	r3, r2
 800a908:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a90c:	4619      	mov	r1, r3
 800a90e:	4850      	ldr	r0, [pc, #320]	; (800aa50 <Medha_EI_Analyser+0x67c>)
 800a910:	f01a fd26 	bl	8025360 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800a914:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a918:	3301      	adds	r3, #1
 800a91a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a91e:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a922:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a926:	429a      	cmp	r2, r3
 800a928:	d3e7      	bcc.n	800a8fa <Medha_EI_Analyser+0x526>
			}

			printf("\nExpected Compliment Relay Status:\n");
 800a92a:	484a      	ldr	r0, [pc, #296]	; (800aa54 <Medha_EI_Analyser+0x680>)
 800a92c:	f01a fdb4 	bl	8025498 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800a930:	2300      	movs	r3, #0
 800a932:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a936:	e00f      	b.n	800a958 <Medha_EI_Analyser+0x584>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800a938:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a93c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a940:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800a944:	5cd3      	ldrb	r3, [r2, r3]
 800a946:	4619      	mov	r1, r3
 800a948:	4841      	ldr	r0, [pc, #260]	; (800aa50 <Medha_EI_Analyser+0x67c>)
 800a94a:	f01a fd09 	bl	8025360 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800a94e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800a952:	3301      	adds	r3, #1
 800a954:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800a958:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800a95c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800a960:	429a      	cmp	r2, r3
 800a962:	d3e9      	bcc.n	800a938 <Medha_EI_Analyser+0x564>
			}

			printf("\nPACKET Rejected\n");
 800a964:	483c      	ldr	r0, [pc, #240]	; (800aa58 <Medha_EI_Analyser+0x684>)
 800a966:	f01a fd97 	bl	8025498 <puts>
			return;
 800a96a:	e189      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 800a96c:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800a970:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800a974:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800a978:	4618      	mov	r0, r3
 800a97a:	f001 f911 	bl	800bba0 <GetCRC32>
 800a97e:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800a982:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a986:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a98a:	4413      	add	r3, r2
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a994:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a998:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 800a99c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9a0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9a4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a9a8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d00c      	beq.n	800a9ca <Medha_EI_Analyser+0x5f6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800a9b0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9b4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9b8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800a9c2:	4826      	ldr	r0, [pc, #152]	; (800aa5c <Medha_EI_Analyser+0x688>)
 800a9c4:	f01a fccc 	bl	8025360 <iprintf>
			return;
 800a9c8:	e15a      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(4);
 800a9ca:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800a9d4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9d8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a9dc:	4413      	add	r3, r2
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9e6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9ea:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800a9ee:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 800a9f8:	f00d fca8 	bl	801834c <HAL_GetTick>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	4a18      	ldr	r2, [pc, #96]	; (800aa60 <Medha_EI_Analyser+0x68c>)
 800aa00:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800aa02:	4a18      	ldr	r2, [pc, #96]	; (800aa64 <Medha_EI_Analyser+0x690>)
 800aa04:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa08:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	4619      	mov	r1, r3
 800aa10:	f44f 7392 	mov.w	r3, #292	; 0x124
 800aa14:	461a      	mov	r2, r3
 800aa16:	f01a fb93 	bl	8025140 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 800aa1a:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <Medha_EI_Analyser+0x694>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800aa20:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <Medha_EI_Analyser+0x690>)
 800aa22:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800aa26:	4a10      	ldr	r2, [pc, #64]	; (800aa68 <Medha_EI_Analyser+0x694>)
 800aa28:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 800aa2a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 f956 	bl	800ace0 <Send_Medha_EI_Reply>
//				Medha_Cur_Relay_Status_st.Relay_Status[Traverser++] = (Medha_EI_Temp_Rx_st.RelayStatus[i]);
//			}
//		}
//		else
		{
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800aa34:	2300      	movs	r3, #0
 800aa36:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800aa3a:	e028      	b.n	800aa8e <Medha_EI_Analyser+0x6ba>
 800aa3c:	20000304 	.word	0x20000304
 800aa40:	08028230 	.word	0x08028230
 800aa44:	20000305 	.word	0x20000305
 800aa48:	08028374 	.word	0x08028374
 800aa4c:	080283b0 	.word	0x080283b0
 800aa50:	080281d0 	.word	0x080281d0
 800aa54:	080283fc 	.word	0x080283fc
 800aa58:	08028420 	.word	0x08028420
 800aa5c:	08028434 	.word	0x08028434
 800aa60:	20002af0 	.word	0x20002af0
 800aa64:	20002998 	.word	0x20002998
 800aa68:	20002b00 	.word	0x20002b00
			{
				//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
				Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800aa6c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800aa70:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800aa74:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800aa78:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 800aa7c:	440a      	add	r2, r1
 800aa7e:	7e11      	ldrb	r1, [r2, #24]
 800aa80:	4a81      	ldr	r2, [pc, #516]	; (800ac88 <Medha_EI_Analyser+0x8b4>)
 800aa82:	54d1      	strb	r1, [r2, r3]
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800aa84:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800aa88:	3301      	adds	r3, #1
 800aa8a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800aa8e:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800aa92:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d3e8      	bcc.n	800aa6c <Medha_EI_Analyser+0x698>





		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800aa9a:	4b7c      	ldr	r3, [pc, #496]	; (800ac8c <Medha_EI_Analyser+0x8b8>)
 800aa9c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800aaa0:	4a79      	ldr	r2, [pc, #484]	; (800ac88 <Medha_EI_Analyser+0x8b4>)
 800aaa2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800aaa6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800aaaa:	461a      	mov	r2, r3
 800aaac:	4976      	ldr	r1, [pc, #472]	; (800ac88 <Medha_EI_Analyser+0x8b4>)
 800aaae:	4878      	ldr	r0, [pc, #480]	; (800ac90 <Medha_EI_Analyser+0x8bc>)
 800aab0:	f01a fb36 	bl	8025120 <memcmp>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d030      	beq.n	800ab1c <Medha_EI_Analyser+0x748>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800aaba:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800aabe:	461a      	mov	r2, r3
 800aac0:	4971      	ldr	r1, [pc, #452]	; (800ac88 <Medha_EI_Analyser+0x8b4>)
 800aac2:	4873      	ldr	r0, [pc, #460]	; (800ac90 <Medha_EI_Analyser+0x8bc>)
 800aac4:	f01a fb3c 	bl	8025140 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800aac8:	4b6f      	ldr	r3, [pc, #444]	; (800ac88 <Medha_EI_Analyser+0x8b4>)
 800aaca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aace:	4a70      	ldr	r2, [pc, #448]	; (800ac90 <Medha_EI_Analyser+0x8bc>)
 800aad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 800aad4:	2230      	movs	r2, #48	; 0x30
 800aad6:	2100      	movs	r1, #0
 800aad8:	486e      	ldr	r0, [pc, #440]	; (800ac94 <Medha_EI_Analyser+0x8c0>)
 800aada:	f01a fb59 	bl	8025190 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800aade:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800aae2:	461a      	mov	r2, r3
 800aae4:	4968      	ldr	r1, [pc, #416]	; (800ac88 <Medha_EI_Analyser+0x8b4>)
 800aae6:	486b      	ldr	r0, [pc, #428]	; (800ac94 <Medha_EI_Analyser+0x8c0>)
 800aae8:	f01a fb2a 	bl	8025140 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 800aaec:	f240 1019 	movw	r0, #281	; 0x119
 800aaf0:	f005 fe7a 	bl	80107e8 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800aaf4:	f00d fc2a 	bl	801834c <HAL_GetTick>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	4a67      	ldr	r2, [pc, #412]	; (800ac98 <Medha_EI_Analyser+0x8c4>)
 800aafc:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800aafe:	4867      	ldr	r0, [pc, #412]	; (800ac9c <Medha_EI_Analyser+0x8c8>)
 800ab00:	f01a fcca 	bl	8025498 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 800ab04:	f240 2001 	movw	r0, #513	; 0x201
 800ab08:	f005 fe6e 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800ab0c:	4b64      	ldr	r3, [pc, #400]	; (800aca0 <Medha_EI_Analyser+0x8cc>)
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d103      	bne.n	800ab1c <Medha_EI_Analyser+0x748>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800ab14:	f240 2007 	movw	r0, #519	; 0x207
 800ab18:	f005 fe66 	bl	80107e8 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800ab1c:	4861      	ldr	r0, [pc, #388]	; (800aca4 <Medha_EI_Analyser+0x8d0>)
 800ab1e:	f01a fcbb 	bl	8025498 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 800ab22:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab26:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab2a:	889b      	ldrh	r3, [r3, #4]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	485e      	ldr	r0, [pc, #376]	; (800aca8 <Medha_EI_Analyser+0x8d4>)
 800ab30:	f01a fc16 	bl	8025360 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 800ab34:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab38:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab3c:	885b      	ldrh	r3, [r3, #2]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	485a      	ldr	r0, [pc, #360]	; (800acac <Medha_EI_Analyser+0x8d8>)
 800ab42:	f01a fc0d 	bl	8025360 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 800ab46:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab4a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab4e:	799b      	ldrb	r3, [r3, #6]
 800ab50:	4619      	mov	r1, r3
 800ab52:	4857      	ldr	r0, [pc, #348]	; (800acb0 <Medha_EI_Analyser+0x8dc>)
 800ab54:	f01a fc04 	bl	8025360 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 800ab58:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab5c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab60:	79db      	ldrb	r3, [r3, #7]
 800ab62:	4619      	mov	r1, r3
 800ab64:	4853      	ldr	r0, [pc, #332]	; (800acb4 <Medha_EI_Analyser+0x8e0>)
 800ab66:	f01a fbfb 	bl	8025360 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800ab6a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab6e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab72:	891b      	ldrh	r3, [r3, #8]
 800ab74:	4619      	mov	r1, r3
 800ab76:	4850      	ldr	r0, [pc, #320]	; (800acb8 <Medha_EI_Analyser+0x8e4>)
 800ab78:	f01a fbf2 	bl	8025360 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 800ab7c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab80:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab84:	7a9b      	ldrb	r3, [r3, #10]
 800ab86:	4619      	mov	r1, r3
 800ab88:	484c      	ldr	r0, [pc, #304]	; (800acbc <Medha_EI_Analyser+0x8e8>)
 800ab8a:	f01a fbe9 	bl	8025360 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800ab8e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab92:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab96:	7b9b      	ldrb	r3, [r3, #14]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab9e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aba2:	7b5b      	ldrb	r3, [r3, #13]
 800aba4:	461c      	mov	r4, r3
 800aba6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abaa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abae:	7b1b      	ldrb	r3, [r3, #12]
 800abb0:	461d      	mov	r5, r3
 800abb2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abb6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abba:	7bdb      	ldrb	r3, [r3, #15]
 800abbc:	461a      	mov	r2, r3
 800abbe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abc2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abc6:	7c1b      	ldrb	r3, [r3, #16]
 800abc8:	4619      	mov	r1, r3
 800abca:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abce:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abd2:	7c5b      	ldrb	r3, [r3, #17]
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	9101      	str	r1, [sp, #4]
 800abd8:	9200      	str	r2, [sp, #0]
 800abda:	462b      	mov	r3, r5
 800abdc:	4622      	mov	r2, r4
 800abde:	4601      	mov	r1, r0
 800abe0:	4837      	ldr	r0, [pc, #220]	; (800acc0 <Medha_EI_Analyser+0x8ec>)
 800abe2:	f01a fbbd 	bl	8025360 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800abe6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abea:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abee:	7c9b      	ldrb	r3, [r3, #18]
 800abf0:	4619      	mov	r1, r3
 800abf2:	4834      	ldr	r0, [pc, #208]	; (800acc4 <Medha_EI_Analyser+0x8f0>)
 800abf4:	f01a fbb4 	bl	8025360 <iprintf>
		printf("RC:%5lu\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800abf8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abfc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	4619      	mov	r1, r3
 800ac04:	4830      	ldr	r0, [pc, #192]	; (800acc8 <Medha_EI_Analyser+0x8f4>)
 800ac06:	f01a fbab 	bl	8025360 <iprintf>
		printf("SIGNAL DATA       :");
 800ac0a:	4830      	ldr	r0, [pc, #192]	; (800accc <Medha_EI_Analyser+0x8f8>)
 800ac0c:	f01a fba8 	bl	8025360 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ac10:	2300      	movs	r3, #0
 800ac12:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac16:	e021      	b.n	800ac5c <Medha_EI_Analyser+0x888>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 800ac18:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d010      	beq.n	800ac42 <Medha_EI_Analyser+0x86e>
 800ac20:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ac24:	4b2a      	ldr	r3, [pc, #168]	; (800acd0 <Medha_EI_Analyser+0x8fc>)
 800ac26:	fba3 1302 	umull	r1, r3, r3, r2
 800ac2a:	08d9      	lsrs	r1, r3, #3
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	440b      	add	r3, r1
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <Medha_EI_Analyser+0x86e>
			{
				printf("\n                   ");
 800ac3c:	4825      	ldr	r0, [pc, #148]	; (800acd4 <Medha_EI_Analyser+0x900>)
 800ac3e:	f01a fb8f 	bl	8025360 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800ac42:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac46:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <Medha_EI_Analyser+0x8b4>)
 800ac48:	5cd3      	ldrb	r3, [r2, r3]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4822      	ldr	r0, [pc, #136]	; (800acd8 <Medha_EI_Analyser+0x904>)
 800ac4e:	f01a fb87 	bl	8025360 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ac52:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac56:	3301      	adds	r3, #1
 800ac58:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac5c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ac60:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d3d7      	bcc.n	800ac18 <Medha_EI_Analyser+0x844>
		}
		printf("\n");
 800ac68:	200a      	movs	r0, #10
 800ac6a:	f01a fb91 	bl	8025390 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800ac6e:	481b      	ldr	r0, [pc, #108]	; (800acdc <Medha_EI_Analyser+0x908>)
 800ac70:	f01a fc12 	bl	8025498 <puts>
		return;
 800ac74:	e004      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
	}
	else
	{
		return;
 800ac76:	bf00      	nop
 800ac78:	e002      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
				return;
 800ac7a:	bf00      	nop
 800ac7c:	e000      	b.n	800ac80 <Medha_EI_Analyser+0x8ac>
				return;
 800ac7e:	bf00      	nop
	}
}
 800ac80:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bdb0      	pop	{r4, r5, r7, pc}
 800ac88:	20002b18 	.word	0x20002b18
 800ac8c:	20002998 	.word	0x20002998
 800ac90:	20002c20 	.word	0x20002c20
 800ac94:	20002abe 	.word	0x20002abe
 800ac98:	20002af0 	.word	0x20002af0
 800ac9c:	08028474 	.word	0x08028474
 800aca0:	20002b08 	.word	0x20002b08
 800aca4:	0802848c 	.word	0x0802848c
 800aca8:	080284b4 	.word	0x080284b4
 800acac:	080284bc 	.word	0x080284bc
 800acb0:	080284c4 	.word	0x080284c4
 800acb4:	080284d0 	.word	0x080284d0
 800acb8:	080284dc 	.word	0x080284dc
 800acbc:	080284e4 	.word	0x080284e4
 800acc0:	080284ec 	.word	0x080284ec
 800acc4:	08028510 	.word	0x08028510
 800acc8:	0802851c 	.word	0x0802851c
 800accc:	08028528 	.word	0x08028528
 800acd0:	cccccccd 	.word	0xcccccccd
 800acd4:	0802853c 	.word	0x0802853c
 800acd8:	080281d0 	.word	0x080281d0
 800acdc:	08028554 	.word	0x08028554

0800ace0 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b0d2      	sub	sp, #328	; 0x148
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4602      	mov	r2, r0
 800ace8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acec:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800acf0:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 800acf2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800acf6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800acfa:	2200      	movs	r2, #0
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	3304      	adds	r3, #4
 800ad00:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f01a fa42 	bl	8025190 <memset>
	uint32_t Cal_Crc =0;
 800ad0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad10:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 800ad1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ad22:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ad26:	2200      	movs	r2, #0
 800ad28:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 800ad30:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad34:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800ad38:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800ad3c:	2153      	movs	r1, #83	; 0x53
 800ad3e:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800ad40:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad44:	3301      	adds	r3, #1
 800ad46:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800ad4a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad4e:	f107 0214 	add.w	r2, r7, #20
 800ad52:	4413      	add	r3, r2
 800ad54:	4a88      	ldr	r2, [pc, #544]	; (800af78 <Send_Medha_EI_Reply+0x298>)
 800ad56:	8852      	ldrh	r2, [r2, #2]
 800ad58:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800ad5a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad5e:	3302      	adds	r3, #2
 800ad60:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800ad64:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad68:	f107 0214 	add.w	r2, r7, #20
 800ad6c:	4413      	add	r3, r2
 800ad6e:	4a82      	ldr	r2, [pc, #520]	; (800af78 <Send_Medha_EI_Reply+0x298>)
 800ad70:	8892      	ldrh	r2, [r2, #4]
 800ad72:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800ad74:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad78:	3302      	adds	r3, #2
 800ad7a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800ad7e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad82:	f107 0214 	add.w	r2, r7, #20
 800ad86:	4413      	add	r3, r2
 800ad88:	4a7b      	ldr	r2, [pc, #492]	; (800af78 <Send_Medha_EI_Reply+0x298>)
 800ad8a:	7992      	ldrb	r2, [r2, #6]
 800ad8c:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800ad8e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad92:	3301      	adds	r3, #1
 800ad94:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800ad98:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ad9c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800ada0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800ada4:	21e2      	movs	r1, #226	; 0xe2
 800ada6:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800ada8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800adac:	3301      	adds	r3, #1
 800adae:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800adb2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800adb6:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800adba:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800adbe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800adc2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800adc6:	2100      	movs	r1, #0
 800adc8:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800adca:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800adce:	3301      	adds	r3, #1
 800add0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800add4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800add8:	2100      	movs	r1, #0
 800adda:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800addc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ade0:	3302      	adds	r3, #2
 800ade2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800ade6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800adea:	f107 0214 	add.w	r2, r7, #20
 800adee:	4413      	add	r3, r2
 800adf0:	4a61      	ldr	r2, [pc, #388]	; (800af78 <Send_Medha_EI_Reply+0x298>)
 800adf2:	7a92      	ldrb	r2, [r2, #10]
 800adf4:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800adf6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800adfa:	3301      	adds	r3, #1
 800adfc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800ae00:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ae04:	f107 0214 	add.w	r2, r7, #20
 800ae08:	441a      	add	r2, r3
 800ae0a:	4b5b      	ldr	r3, [pc, #364]	; (800af78 <Send_Medha_EI_Reply+0x298>)
 800ae0c:	330b      	adds	r3, #11
 800ae0e:	6819      	ldr	r1, [r3, #0]
 800ae10:	6011      	str	r1, [r2, #0]
 800ae12:	8899      	ldrh	r1, [r3, #4]
 800ae14:	799b      	ldrb	r3, [r3, #6]
 800ae16:	8091      	strh	r1, [r2, #4]
 800ae18:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800ae1a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ae1e:	3307      	adds	r3, #7
 800ae20:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800ae24:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ae28:	f107 0214 	add.w	r2, r7, #20
 800ae2c:	4413      	add	r3, r2
 800ae2e:	4a52      	ldr	r2, [pc, #328]	; (800af78 <Send_Medha_EI_Reply+0x298>)
 800ae30:	8a92      	ldrh	r2, [r2, #20]
 800ae32:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800ae34:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ae38:	3302      	adds	r3, #2
 800ae3a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800ae3e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ae42:	f107 0214 	add.w	r2, r7, #20
 800ae46:	18d0      	adds	r0, r2, r3
 800ae48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae4c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	4949      	ldr	r1, [pc, #292]	; (800af7c <Send_Medha_EI_Reply+0x29c>)
 800ae56:	f01a f973 	bl	8025140 <memcpy>
	BYTEINC(Outputs);
 800ae5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae5e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800ae62:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	4413      	add	r3, r2
 800ae6a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800ae6e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800ae72:	f107 0214 	add.w	r2, r7, #20
 800ae76:	18d0      	adds	r0, r2, r3
 800ae78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae7c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	493e      	ldr	r1, [pc, #248]	; (800af80 <Send_Medha_EI_Reply+0x2a0>)
 800ae86:	f01a f95b 	bl	8025140 <memcpy>
	BYTEINC(Outputs);
 800ae8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ae8e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800ae92:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800ae9e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800aea2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800aea6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800aeaa:	2100      	movs	r1, #0
 800aeac:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800aeae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800aeb2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800aeb6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800aeba:	2100      	movs	r1, #0
 800aebc:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800aebe:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800aec2:	3302      	adds	r3, #2
 800aec4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800aec8:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	3302      	adds	r3, #2
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aede:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800aee2:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800aee4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800aee8:	f107 0214 	add.w	r2, r7, #20
 800aeec:	4413      	add	r3, r2
 800aeee:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800aef2:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800aef6:	8812      	ldrh	r2, [r2, #0]
 800aef8:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800aefa:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800aefe:	f107 0314 	add.w	r3, r7, #20
 800af02:	4619      	mov	r1, r3
 800af04:	2000      	movs	r0, #0
 800af06:	f000 fe4b 	bl	800bba0 <GetCRC32>
 800af0a:	4602      	mov	r2, r0
 800af0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800af10:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800af14:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800af16:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800af1a:	f107 0214 	add.w	r2, r7, #20
 800af1e:	4413      	add	r3, r2
 800af20:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800af24:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800af28:	6812      	ldr	r2, [r2, #0]
 800af2a:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800af2c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800af30:	3304      	adds	r3, #4
 800af32:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800af36:	2300      	movs	r3, #0
 800af38:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800af3c:	e011      	b.n	800af62 <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800af3e:	4b11      	ldr	r3, [pc, #68]	; (800af84 <Send_Medha_EI_Reply+0x2a4>)
 800af40:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800af44:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800af48:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800af4c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800af50:	5cd3      	ldrb	r3, [r2, r3]
 800af52:	4619      	mov	r1, r3
 800af54:	f00c ffa2 	bl	8017e9c <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800af58:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800af5c:	3301      	adds	r3, #1
 800af5e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800af62:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800af66:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d3e7      	bcc.n	800af3e <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800af6e:	bf00      	nop
}
 800af70:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	20002998 	.word	0x20002998
 800af7c:	200029b0 	.word	0x200029b0
 800af80:	20002a30 	.word	0x20002a30
 800af84:	20000304 	.word	0x20000304

0800af88 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800af8e:	4b2c      	ldr	r3, [pc, #176]	; (800b040 <Send_Relay_Statuses_2_MIE+0xb8>)
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	4618      	mov	r0, r3
 800af94:	f004 fe74 	bl	800fc80 <HAL_Elaps_Ticks>
 800af98:	4602      	mov	r2, r0
 800af9a:	4b2a      	ldr	r3, [pc, #168]	; (800b044 <Send_Relay_Statuses_2_MIE+0xbc>)
 800af9c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d349      	bcc.n	800b038 <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800afa8:	4b26      	ldr	r3, [pc, #152]	; (800b044 <Send_Relay_Statuses_2_MIE+0xbc>)
 800afaa:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d007      	beq.n	800afc6 <Send_Relay_Statuses_2_MIE+0x3e>
 800afb6:	4b23      	ldr	r3, [pc, #140]	; (800b044 <Send_Relay_Statuses_2_MIE+0xbc>)
 800afb8:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800afbc:	08db      	lsrs	r3, r3, #3
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	3301      	adds	r3, #1
 800afc2:	80fb      	strh	r3, [r7, #6]
 800afc4:	e004      	b.n	800afd0 <Send_Relay_Statuses_2_MIE+0x48>
 800afc6:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <Send_Relay_Statuses_2_MIE+0xbc>)
 800afc8:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800afcc:	08db      	lsrs	r3, r3, #3
 800afce:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800afd0:	f00d f9bc 	bl	801834c <HAL_GetTick>
 800afd4:	4603      	mov	r3, r0
 800afd6:	4a1a      	ldr	r2, [pc, #104]	; (800b040 <Send_Relay_Statuses_2_MIE+0xb8>)
 800afd8:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800afda:	481b      	ldr	r0, [pc, #108]	; (800b048 <Send_Relay_Statuses_2_MIE+0xc0>)
 800afdc:	f01a fa5c 	bl	8025498 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800afe0:	2300      	movs	r3, #0
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	e01d      	b.n	800b022 <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00e      	beq.n	800b00a <Send_Relay_Statuses_2_MIE+0x82>
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	4b17      	ldr	r3, [pc, #92]	; (800b04c <Send_Relay_Statuses_2_MIE+0xc4>)
 800aff0:	fba3 2301 	umull	r2, r3, r3, r1
 800aff4:	091a      	lsrs	r2, r3, #4
 800aff6:	4613      	mov	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	1aca      	subs	r2, r1, r3
 800b000:	2a00      	cmp	r2, #0
 800b002:	d102      	bne.n	800b00a <Send_Relay_Statuses_2_MIE+0x82>
			{
				printf("\n");
 800b004:	200a      	movs	r0, #10
 800b006:	f01a f9c3 	bl	8025390 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800b00a:	4a11      	ldr	r2, [pc, #68]	; (800b050 <Send_Relay_Statuses_2_MIE+0xc8>)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	4413      	add	r3, r2
 800b010:	3302      	adds	r3, #2
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	4619      	mov	r1, r3
 800b016:	480f      	ldr	r0, [pc, #60]	; (800b054 <Send_Relay_Statuses_2_MIE+0xcc>)
 800b018:	f01a f9a2 	bl	8025360 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	3301      	adds	r3, #1
 800b020:	603b      	str	r3, [r7, #0]
 800b022:	88fb      	ldrh	r3, [r7, #6]
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d3dd      	bcc.n	800afe6 <Send_Relay_Statuses_2_MIE+0x5e>
		}
		printf("\n");
 800b02a:	200a      	movs	r0, #10
 800b02c:	f01a f9b0 	bl	8025390 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800b030:	f240 1019 	movw	r0, #281	; 0x119
 800b034:	f005 fbd8 	bl	80107e8 <TransmitCanPkt>
#endif
	}
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20002af0 	.word	0x20002af0
 800b044:	20000304 	.word	0x20000304
 800b048:	0802857c 	.word	0x0802857c
 800b04c:	cccccccd 	.word	0xcccccccd
 800b050:	20002abc 	.word	0x20002abc
 800b054:	080281d0 	.word	0x080281d0

0800b058 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800b05e:	4b61      	ldr	r3, [pc, #388]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	4618      	mov	r0, r3
 800b064:	f004 fe0c 	bl	800fc80 <HAL_Elaps_Ticks>
 800b068:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b06a:	4b5f      	ldr	r3, [pc, #380]	; (800b1e8 <Process_Clear_Relays+0x190>)
 800b06c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b070:	4a5d      	ldr	r2, [pc, #372]	; (800b1e8 <Process_Clear_Relays+0x190>)
 800b072:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800b076:	fb02 f303 	mul.w	r3, r2, r3
 800b07a:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800b07c:	495b      	ldr	r1, [pc, #364]	; (800b1ec <Process_Clear_Relays+0x194>)
 800b07e:	485c      	ldr	r0, [pc, #368]	; (800b1f0 <Process_Clear_Relays+0x198>)
 800b080:	f7f5 f8de 	bl	8000240 <strcmp>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 80a7 	beq.w	800b1da <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d30c      	bcc.n	800b0ae <Process_Clear_Relays+0x56>
 800b094:	4b53      	ldr	r3, [pc, #332]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	4b56      	ldr	r3, [pc, #344]	; (800b1f4 <Process_Clear_Relays+0x19c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d006      	beq.n	800b0ae <Process_Clear_Relays+0x56>
 800b0a0:	4b55      	ldr	r3, [pc, #340]	; (800b1f8 <Process_Clear_Relays+0x1a0>)
 800b0a2:	785a      	ldrb	r2, [r3, #1]
 800b0a4:	4b50      	ldr	r3, [pc, #320]	; (800b1e8 <Process_Clear_Relays+0x190>)
 800b0a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d808      	bhi.n	800b0c0 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800b0ae:	4b4d      	ldr	r3, [pc, #308]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d049      	beq.n	800b14a <Process_Clear_Relays+0xf2>
 800b0b6:	4b51      	ldr	r3, [pc, #324]	; (800b1fc <Process_Clear_Relays+0x1a4>)
 800b0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d044      	beq.n	800b14a <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b0c0:	4b48      	ldr	r3, [pc, #288]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	484e      	ldr	r0, [pc, #312]	; (800b200 <Process_Clear_Relays+0x1a8>)
 800b0c8:	f01a f94a 	bl	8025360 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b0cc:	4b45      	ldr	r3, [pc, #276]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d006      	beq.n	800b0e6 <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b0d8:	4b42      	ldr	r3, [pc, #264]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	f023 0301 	bic.w	r3, r3, #1
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	4b40      	ldr	r3, [pc, #256]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0e4:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b0e6:	4b3f      	ldr	r3, [pc, #252]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d006      	beq.n	800b100 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b0f2:	4b3c      	ldr	r3, [pc, #240]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	f023 0302 	bic.w	r3, r3, #2
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	4b39      	ldr	r3, [pc, #228]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b0fe:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b100:	2284      	movs	r2, #132	; 0x84
 800b102:	2100      	movs	r1, #0
 800b104:	483d      	ldr	r0, [pc, #244]	; (800b1fc <Process_Clear_Relays+0x1a4>)
 800b106:	f01a f843 	bl	8025190 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b10a:	2232      	movs	r2, #50	; 0x32
 800b10c:	2100      	movs	r1, #0
 800b10e:	483d      	ldr	r0, [pc, #244]	; (800b204 <Process_Clear_Relays+0x1ac>)
 800b110:	f01a f83e 	bl	8025190 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b114:	2284      	movs	r2, #132	; 0x84
 800b116:	2100      	movs	r1, #0
 800b118:	483b      	ldr	r0, [pc, #236]	; (800b208 <Process_Clear_Relays+0x1b0>)
 800b11a:	f01a f839 	bl	8025190 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b11e:	2208      	movs	r2, #8
 800b120:	2100      	movs	r1, #0
 800b122:	483a      	ldr	r0, [pc, #232]	; (800b20c <Process_Clear_Relays+0x1b4>)
 800b124:	f01a f834 	bl	8025190 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b128:	2208      	movs	r2, #8
 800b12a:	2100      	movs	r1, #0
 800b12c:	4832      	ldr	r0, [pc, #200]	; (800b1f8 <Process_Clear_Relays+0x1a0>)
 800b12e:	f01a f82f 	bl	8025190 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b132:	2208      	movs	r2, #8
 800b134:	2100      	movs	r1, #0
 800b136:	4836      	ldr	r0, [pc, #216]	; (800b210 <Process_Clear_Relays+0x1b8>)
 800b138:	f01a f82a 	bl	8025190 <memset>
		printf("Cleared Relay Statuses\n");
 800b13c:	4835      	ldr	r0, [pc, #212]	; (800b214 <Process_Clear_Relays+0x1bc>)
 800b13e:	f01a f9ab 	bl	8025498 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b142:	4b28      	ldr	r3, [pc, #160]	; (800b1e4 <Process_Clear_Relays+0x18c>)
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4a2b      	ldr	r2, [pc, #172]	; (800b1f4 <Process_Clear_Relays+0x19c>)
 800b148:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800b14a:	4b33      	ldr	r3, [pc, #204]	; (800b218 <Process_Clear_Relays+0x1c0>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4618      	mov	r0, r3
 800b150:	f004 fd96 	bl	800fc80 <HAL_Elaps_Ticks>
 800b154:	4602      	mov	r2, r0
 800b156:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <Process_Clear_Relays+0x190>)
 800b158:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d92a      	bls.n	800b1b6 <Process_Clear_Relays+0x15e>
 800b160:	4b2e      	ldr	r3, [pc, #184]	; (800b21c <Process_Clear_Relays+0x1c4>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d126      	bne.n	800b1b6 <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800b168:	482d      	ldr	r0, [pc, #180]	; (800b220 <Process_Clear_Relays+0x1c8>)
 800b16a:	f01a f995 	bl	8025498 <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800b16e:	4b2b      	ldr	r3, [pc, #172]	; (800b21c <Process_Clear_Relays+0x1c4>)
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b174:	2284      	movs	r2, #132	; 0x84
 800b176:	2100      	movs	r1, #0
 800b178:	4820      	ldr	r0, [pc, #128]	; (800b1fc <Process_Clear_Relays+0x1a4>)
 800b17a:	f01a f809 	bl	8025190 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b17e:	2232      	movs	r2, #50	; 0x32
 800b180:	2100      	movs	r1, #0
 800b182:	4820      	ldr	r0, [pc, #128]	; (800b204 <Process_Clear_Relays+0x1ac>)
 800b184:	f01a f804 	bl	8025190 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b188:	2284      	movs	r2, #132	; 0x84
 800b18a:	2100      	movs	r1, #0
 800b18c:	481e      	ldr	r0, [pc, #120]	; (800b208 <Process_Clear_Relays+0x1b0>)
 800b18e:	f019 ffff 	bl	8025190 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b192:	2208      	movs	r2, #8
 800b194:	2100      	movs	r1, #0
 800b196:	481d      	ldr	r0, [pc, #116]	; (800b20c <Process_Clear_Relays+0x1b4>)
 800b198:	f019 fffa 	bl	8025190 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b19c:	2208      	movs	r2, #8
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4815      	ldr	r0, [pc, #84]	; (800b1f8 <Process_Clear_Relays+0x1a0>)
 800b1a2:	f019 fff5 	bl	8025190 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b1a6:	2208      	movs	r2, #8
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4819      	ldr	r0, [pc, #100]	; (800b210 <Process_Clear_Relays+0x1b8>)
 800b1ac:	f019 fff0 	bl	8025190 <memset>
		printf("Cleared Relay Statuses\n");
 800b1b0:	4818      	ldr	r0, [pc, #96]	; (800b214 <Process_Clear_Relays+0x1bc>)
 800b1b2:	f01a f971 	bl	8025498 <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800b1b6:	4b18      	ldr	r3, [pc, #96]	; (800b218 <Process_Clear_Relays+0x1c0>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f004 fd60 	bl	800fc80 <HAL_Elaps_Ticks>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <Process_Clear_Relays+0x190>)
 800b1c4:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d207      	bcs.n	800b1dc <Process_Clear_Relays+0x184>
 800b1cc:	4b13      	ldr	r3, [pc, #76]	; (800b21c <Process_Clear_Relays+0x1c4>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d103      	bne.n	800b1dc <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800b1d4:	f009 fe1e 	bl	8014e14 <Blink_S2>
 800b1d8:	e000      	b.n	800b1dc <Process_Clear_Relays+0x184>
		return;
 800b1da:	bf00      	nop
	}


}
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20002af0 	.word	0x20002af0
 800b1e8:	20000304 	.word	0x20000304
 800b1ec:	08028230 	.word	0x08028230
 800b1f0:	20000305 	.word	0x20000305
 800b1f4:	20002cb0 	.word	0x20002cb0
 800b1f8:	20002b08 	.word	0x20002b08
 800b1fc:	20002b18 	.word	0x20002b18
 800b200:	08028590 	.word	0x08028590
 800b204:	20002abc 	.word	0x20002abc
 800b208:	20002c20 	.word	0x20002c20
 800b20c:	20002b00 	.word	0x20002b00
 800b210:	20002b10 	.word	0x20002b10
 800b214:	080285c0 	.word	0x080285c0
 800b218:	200025a8 	.word	0x200025a8
 800b21c:	200025a4 	.word	0x200025a4
 800b220:	080285d8 	.word	0x080285d8

0800b224 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800b228:	4b26      	ldr	r3, [pc, #152]	; (800b2c4 <Send_Data_to_Other+0xa0>)
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f004 fd27 	bl	800fc80 <HAL_Elaps_Ticks>
 800b232:	4602      	mov	r2, r0
 800b234:	4b24      	ldr	r3, [pc, #144]	; (800b2c8 <Send_Data_to_Other+0xa4>)
 800b236:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b23a:	4923      	ldr	r1, [pc, #140]	; (800b2c8 <Send_Data_to_Other+0xa4>)
 800b23c:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800b240:	fb01 f303 	mul.w	r3, r1, r3
 800b244:	429a      	cmp	r2, r3
 800b246:	d306      	bcc.n	800b256 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800b248:	4b20      	ldr	r3, [pc, #128]	; (800b2cc <Send_Data_to_Other+0xa8>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800b250:	4b1e      	ldr	r3, [pc, #120]	; (800b2cc <Send_Data_to_Other+0xa8>)
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800b256:	4b1b      	ldr	r3, [pc, #108]	; (800b2c4 <Send_Data_to_Other+0xa0>)
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f004 fd10 	bl	800fc80 <HAL_Elaps_Ticks>
 800b260:	4602      	mov	r2, r0
 800b262:	4b19      	ldr	r3, [pc, #100]	; (800b2c8 <Send_Data_to_Other+0xa4>)
 800b264:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b268:	429a      	cmp	r2, r3
 800b26a:	d90e      	bls.n	800b28a <Send_Data_to_Other+0x66>
 800b26c:	4b15      	ldr	r3, [pc, #84]	; (800b2c4 <Send_Data_to_Other+0xa0>)
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <Send_Data_to_Other+0xac>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	429a      	cmp	r2, r3
 800b276:	d008      	beq.n	800b28a <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b278:	4b12      	ldr	r3, [pc, #72]	; (800b2c4 <Send_Data_to_Other+0xa0>)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	4a14      	ldr	r2, [pc, #80]	; (800b2d0 <Send_Data_to_Other+0xac>)
 800b27e:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800b280:	f240 2001 	movw	r0, #513	; 0x201
 800b284:	f005 fab0 	bl	80107e8 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800b288:	e01a      	b.n	800b2c0 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <Send_Data_to_Other+0xb0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4618      	mov	r0, r3
 800b290:	f004 fcf6 	bl	800fc80 <HAL_Elaps_Ticks>
 800b294:	4603      	mov	r3, r0
 800b296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b29a:	d911      	bls.n	800b2c0 <Send_Data_to_Other+0x9c>
 800b29c:	4b09      	ldr	r3, [pc, #36]	; (800b2c4 <Send_Data_to_Other+0xa0>)
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f004 fced 	bl	800fc80 <HAL_Elaps_Ticks>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b2ac:	d908      	bls.n	800b2c0 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800b2ae:	f00d f84d 	bl	801834c <HAL_GetTick>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	4a07      	ldr	r2, [pc, #28]	; (800b2d4 <Send_Data_to_Other+0xb0>)
 800b2b6:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800b2b8:	f240 2001 	movw	r0, #513	; 0x201
 800b2bc:	f005 fa94 	bl	80107e8 <TransmitCanPkt>
}
 800b2c0:	bf00      	nop
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20002af0 	.word	0x20002af0
 800b2c8:	20000304 	.word	0x20000304
 800b2cc:	20002b00 	.word	0x20002b00
 800b2d0:	20002cb4 	.word	0x20002cb4
 800b2d4:	20002cb8 	.word	0x20002cb8

0800b2d8 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800b2d8:	b5b0      	push	{r4, r5, r7, lr}
 800b2da:	af00      	add	r7, sp, #0


	if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 800b2dc:	499a      	ldr	r1, [pc, #616]	; (800b548 <Process_Data_from_Other+0x270>)
 800b2de:	489b      	ldr	r0, [pc, #620]	; (800b54c <Process_Data_from_Other+0x274>)
 800b2e0:	f7f4 ffae 	bl	8000240 <strcmp>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 812b 	beq.w	800b542 <Process_Data_from_Other+0x26a>
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800b2ec:	4b98      	ldr	r3, [pc, #608]	; (800b550 <Process_Data_from_Other+0x278>)
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	4b98      	ldr	r3, [pc, #608]	; (800b554 <Process_Data_from_Other+0x27c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d109      	bne.n	800b30c <Process_Data_from_Other+0x34>
 800b2f8:	4b95      	ldr	r3, [pc, #596]	; (800b550 <Process_Data_from_Other+0x278>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f004 fcbf 	bl	800fc80 <HAL_Elaps_Ticks>
 800b302:	4603      	mov	r3, r0
 800b304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b308:	f0c0 80e4 	bcc.w	800b4d4 <Process_Data_from_Other+0x1fc>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800b30c:	f00d f81e 	bl	801834c <HAL_GetTick>
 800b310:	4603      	mov	r3, r0
 800b312:	4a8f      	ldr	r2, [pc, #572]	; (800b550 <Process_Data_from_Other+0x278>)
 800b314:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800b316:	4b90      	ldr	r3, [pc, #576]	; (800b558 <Process_Data_from_Other+0x280>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d007      	beq.n	800b32e <Process_Data_from_Other+0x56>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800b31e:	4b8f      	ldr	r3, [pc, #572]	; (800b55c <Process_Data_from_Other+0x284>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	f043 0301 	orr.w	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	4b8c      	ldr	r3, [pc, #560]	; (800b55c <Process_Data_from_Other+0x284>)
 800b32a:	701a      	strb	r2, [r3, #0]
 800b32c:	e006      	b.n	800b33c <Process_Data_from_Other+0x64>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800b32e:	4b8b      	ldr	r3, [pc, #556]	; (800b55c <Process_Data_from_Other+0x284>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	f023 0301 	bic.w	r3, r3, #1
 800b336:	b2da      	uxtb	r2, r3
 800b338:	4b88      	ldr	r3, [pc, #544]	; (800b55c <Process_Data_from_Other+0x284>)
 800b33a:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800b33c:	4b88      	ldr	r3, [pc, #544]	; (800b560 <Process_Data_from_Other+0x288>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d007      	beq.n	800b354 <Process_Data_from_Other+0x7c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800b344:	4b85      	ldr	r3, [pc, #532]	; (800b55c <Process_Data_from_Other+0x284>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	f043 0302 	orr.w	r3, r3, #2
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	4b83      	ldr	r3, [pc, #524]	; (800b55c <Process_Data_from_Other+0x284>)
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e006      	b.n	800b362 <Process_Data_from_Other+0x8a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800b354:	4b81      	ldr	r3, [pc, #516]	; (800b55c <Process_Data_from_Other+0x284>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	f023 0302 	bic.w	r3, r3, #2
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	4b7f      	ldr	r3, [pc, #508]	; (800b55c <Process_Data_from_Other+0x284>)
 800b360:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800b362:	4b7e      	ldr	r3, [pc, #504]	; (800b55c <Process_Data_from_Other+0x284>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2b03      	cmp	r3, #3
 800b368:	f200 809a 	bhi.w	800b4a0 <Process_Data_from_Other+0x1c8>
 800b36c:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <Process_Data_from_Other+0x9c>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b415 	.word	0x0800b415
 800b37c:	0800b393 	.word	0x0800b393
 800b380:	0800b465 	.word	0x0800b465
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b384:	4b74      	ldr	r3, [pc, #464]	; (800b558 <Process_Data_from_Other+0x280>)
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	3301      	adds	r3, #1
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	4b72      	ldr	r3, [pc, #456]	; (800b558 <Process_Data_from_Other+0x280>)
 800b38e:	705a      	strb	r2, [r3, #1]
			break;
 800b390:	e086      	b.n	800b4a0 <Process_Data_from_Other+0x1c8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b392:	4b73      	ldr	r3, [pc, #460]	; (800b560 <Process_Data_from_Other+0x288>)
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	4b70      	ldr	r3, [pc, #448]	; (800b558 <Process_Data_from_Other+0x280>)
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d02f      	beq.n	800b3fe <Process_Data_from_Other+0x126>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800b39e:	4b71      	ldr	r3, [pc, #452]	; (800b564 <Process_Data_from_Other+0x28c>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d179      	bne.n	800b49a <Process_Data_from_Other+0x1c2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800b3a6:	4b6c      	ldr	r3, [pc, #432]	; (800b558 <Process_Data_from_Other+0x280>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	486e      	ldr	r0, [pc, #440]	; (800b568 <Process_Data_from_Other+0x290>)
 800b3ae:	f019 ffd7 	bl	8025360 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800b3b2:	4b6b      	ldr	r3, [pc, #428]	; (800b560 <Process_Data_from_Other+0x288>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	486c      	ldr	r0, [pc, #432]	; (800b56c <Process_Data_from_Other+0x294>)
 800b3ba:	f019 ffd1 	bl	8025360 <iprintf>
					Received_CAN_Relay_Status=NO;
 800b3be:	4b69      	ldr	r3, [pc, #420]	; (800b564 <Process_Data_from_Other+0x28c>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800b3c4:	486a      	ldr	r0, [pc, #424]	; (800b570 <Process_Data_from_Other+0x298>)
 800b3c6:	f01a f867 	bl	8025498 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b3ca:	4a6a      	ldr	r2, [pc, #424]	; (800b574 <Process_Data_from_Other+0x29c>)
 800b3cc:	4b6a      	ldr	r3, [pc, #424]	; (800b578 <Process_Data_from_Other+0x2a0>)
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	2384      	movs	r3, #132	; 0x84
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	f019 feb3 	bl	8025140 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800b3da:	4a68      	ldr	r2, [pc, #416]	; (800b57c <Process_Data_from_Other+0x2a4>)
 800b3dc:	4b65      	ldr	r3, [pc, #404]	; (800b574 <Process_Data_from_Other+0x29c>)
 800b3de:	4614      	mov	r4, r2
 800b3e0:	461d      	mov	r5, r3
 800b3e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800b3f2:	4b60      	ldr	r3, [pc, #384]	; (800b574 <Process_Data_from_Other+0x29c>)
 800b3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3f8:	4a57      	ldr	r2, [pc, #348]	; (800b558 <Process_Data_from_Other+0x280>)
 800b3fa:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800b3fc:	e04d      	b.n	800b49a <Process_Data_from_Other+0x1c2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800b3fe:	4b56      	ldr	r3, [pc, #344]	; (800b558 <Process_Data_from_Other+0x280>)
 800b400:	2200      	movs	r2, #0
 800b402:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b404:	4b5e      	ldr	r3, [pc, #376]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	f023 0301 	bic.w	r3, r3, #1
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	4b5c      	ldr	r3, [pc, #368]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b410:	701a      	strb	r2, [r3, #0]
			break;
 800b412:	e042      	b.n	800b49a <Process_Data_from_Other+0x1c2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b414:	4b52      	ldr	r3, [pc, #328]	; (800b560 <Process_Data_from_Other+0x288>)
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	4b4f      	ldr	r3, [pc, #316]	; (800b558 <Process_Data_from_Other+0x280>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d016      	beq.n	800b44e <Process_Data_from_Other+0x176>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800b420:	4858      	ldr	r0, [pc, #352]	; (800b584 <Process_Data_from_Other+0x2ac>)
 800b422:	f01a f839 	bl	8025498 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b426:	4b4c      	ldr	r3, [pc, #304]	; (800b558 <Process_Data_from_Other+0x280>)
 800b428:	785b      	ldrb	r3, [r3, #1]
 800b42a:	3301      	adds	r3, #1
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	4b4a      	ldr	r3, [pc, #296]	; (800b558 <Process_Data_from_Other+0x280>)
 800b430:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800b432:	4b49      	ldr	r3, [pc, #292]	; (800b558 <Process_Data_from_Other+0x280>)
 800b434:	785b      	ldrb	r3, [r3, #1]
 800b436:	2b02      	cmp	r3, #2
 800b438:	d931      	bls.n	800b49e <Process_Data_from_Other+0x1c6>
 800b43a:	4b4e      	ldr	r3, [pc, #312]	; (800b574 <Process_Data_from_Other+0x29c>)
 800b43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b440:	2b00      	cmp	r3, #0
 800b442:	d02c      	beq.n	800b49e <Process_Data_from_Other+0x1c6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800b444:	f240 2007 	movw	r0, #519	; 0x207
 800b448:	f005 f9ce 	bl	80107e8 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800b44c:	e027      	b.n	800b49e <Process_Data_from_Other+0x1c6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b44e:	4b4c      	ldr	r3, [pc, #304]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	f023 0301 	bic.w	r3, r3, #1
 800b456:	b2da      	uxtb	r2, r3
 800b458:	4b49      	ldr	r3, [pc, #292]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b45a:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800b45c:	4b3e      	ldr	r3, [pc, #248]	; (800b558 <Process_Data_from_Other+0x280>)
 800b45e:	2200      	movs	r2, #0
 800b460:	705a      	strb	r2, [r3, #1]
			break;
 800b462:	e01c      	b.n	800b49e <Process_Data_from_Other+0x1c6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b464:	4b3e      	ldr	r3, [pc, #248]	; (800b560 <Process_Data_from_Other+0x288>)
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	4b3b      	ldr	r3, [pc, #236]	; (800b558 <Process_Data_from_Other+0x280>)
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d009      	beq.n	800b484 <Process_Data_from_Other+0x1ac>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800b470:	4844      	ldr	r0, [pc, #272]	; (800b584 <Process_Data_from_Other+0x2ac>)
 800b472:	f01a f811 	bl	8025498 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b476:	4b38      	ldr	r3, [pc, #224]	; (800b558 <Process_Data_from_Other+0x280>)
 800b478:	785b      	ldrb	r3, [r3, #1]
 800b47a:	3301      	adds	r3, #1
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	4b36      	ldr	r3, [pc, #216]	; (800b558 <Process_Data_from_Other+0x280>)
 800b480:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800b482:	e00d      	b.n	800b4a0 <Process_Data_from_Other+0x1c8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b484:	4b3e      	ldr	r3, [pc, #248]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	f023 0301 	bic.w	r3, r3, #1
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	4b3c      	ldr	r3, [pc, #240]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b490:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800b492:	4b31      	ldr	r3, [pc, #196]	; (800b558 <Process_Data_from_Other+0x280>)
 800b494:	2200      	movs	r2, #0
 800b496:	705a      	strb	r2, [r3, #1]
			break;
 800b498:	e002      	b.n	800b4a0 <Process_Data_from_Other+0x1c8>
			break;
 800b49a:	bf00      	nop
 800b49c:	e000      	b.n	800b4a0 <Process_Data_from_Other+0x1c8>
			break;
 800b49e:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800b4a0:	4b2d      	ldr	r3, [pc, #180]	; (800b558 <Process_Data_from_Other+0x280>)
 800b4a2:	785a      	ldrb	r2, [r3, #1]
 800b4a4:	4b38      	ldr	r3, [pc, #224]	; (800b588 <Process_Data_from_Other+0x2b0>)
 800b4a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d312      	bcc.n	800b4d4 <Process_Data_from_Other+0x1fc>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800b4ae:	4b34      	ldr	r3, [pc, #208]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10c      	bne.n	800b4d4 <Process_Data_from_Other+0x1fc>
			{
				printf("MisMatch Count Reached\n");
 800b4ba:	4834      	ldr	r0, [pc, #208]	; (800b58c <Process_Data_from_Other+0x2b4>)
 800b4bc:	f019 ffec 	bl	8025498 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800b4c0:	4b25      	ldr	r3, [pc, #148]	; (800b558 <Process_Data_from_Other+0x280>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b4c6:	4b2e      	ldr	r3, [pc, #184]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	f043 0301 	orr.w	r3, r3, #1
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	4b2b      	ldr	r3, [pc, #172]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b4d2:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800b4d4:	4b1f      	ldr	r3, [pc, #124]	; (800b554 <Process_Data_from_Other+0x27c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f004 fbd1 	bl	800fc80 <HAL_Elaps_Ticks>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	4b29      	ldr	r3, [pc, #164]	; (800b588 <Process_Data_from_Other+0x2b0>)
 800b4e2:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d92c      	bls.n	800b544 <Process_Data_from_Other+0x26c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800b4ea:	4b29      	ldr	r3, [pc, #164]	; (800b590 <Process_Data_from_Other+0x2b8>)
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	4b19      	ldr	r3, [pc, #100]	; (800b554 <Process_Data_from_Other+0x27c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d026      	beq.n	800b544 <Process_Data_from_Other+0x26c>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800b4f6:	4b17      	ldr	r3, [pc, #92]	; (800b554 <Process_Data_from_Other+0x27c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a25      	ldr	r2, [pc, #148]	; (800b590 <Process_Data_from_Other+0x2b8>)
 800b4fc:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800b4fe:	4b15      	ldr	r3, [pc, #84]	; (800b554 <Process_Data_from_Other+0x27c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f004 fbbc 	bl	800fc80 <HAL_Elaps_Ticks>
 800b508:	4603      	mov	r3, r0
 800b50a:	4a22      	ldr	r2, [pc, #136]	; (800b594 <Process_Data_from_Other+0x2bc>)
 800b50c:	fba2 2303 	umull	r2, r3, r2, r3
 800b510:	099b      	lsrs	r3, r3, #6
 800b512:	4619      	mov	r1, r3
 800b514:	4820      	ldr	r0, [pc, #128]	; (800b598 <Process_Data_from_Other+0x2c0>)
 800b516:	f019 ff23 	bl	8025360 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800b51a:	4b0e      	ldr	r3, [pc, #56]	; (800b554 <Process_Data_from_Other+0x27c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4619      	mov	r1, r3
 800b520:	481e      	ldr	r0, [pc, #120]	; (800b59c <Process_Data_from_Other+0x2c4>)
 800b522:	f019 ff1d 	bl	8025360 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800b526:	4b16      	ldr	r3, [pc, #88]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	f003 0302 	and.w	r3, r3, #2
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d108      	bne.n	800b544 <Process_Data_from_Other+0x26c>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b532:	4b13      	ldr	r3, [pc, #76]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	f043 0302 	orr.w	r3, r3, #2
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	4b10      	ldr	r3, [pc, #64]	; (800b580 <Process_Data_from_Other+0x2a8>)
 800b53e:	701a      	strb	r2, [r3, #0]
 800b540:	e000      	b.n	800b544 <Process_Data_from_Other+0x26c>
		return;
 800b542:	bf00      	nop
			}
		}
	}
}
 800b544:	bdb0      	pop	{r4, r5, r7, pc}
 800b546:	bf00      	nop
 800b548:	08028230 	.word	0x08028230
 800b54c:	20000305 	.word	0x20000305
 800b550:	20002cbc 	.word	0x20002cbc
 800b554:	200025a8 	.word	0x200025a8
 800b558:	20002b00 	.word	0x20002b00
 800b55c:	200025a6 	.word	0x200025a6
 800b560:	20002b08 	.word	0x20002b08
 800b564:	200025a5 	.word	0x200025a5
 800b568:	080285f8 	.word	0x080285f8
 800b56c:	08028610 	.word	0x08028610
 800b570:	08028628 	.word	0x08028628
 800b574:	20002b18 	.word	0x20002b18
 800b578:	20002b9c 	.word	0x20002b9c
 800b57c:	20002abc 	.word	0x20002abc
 800b580:	20002af0 	.word	0x20002af0
 800b584:	0802865c 	.word	0x0802865c
 800b588:	20000304 	.word	0x20000304
 800b58c:	08028680 	.word	0x08028680
 800b590:	20002cc0 	.word	0x20002cc0
 800b594:	10624dd3 	.word	0x10624dd3
 800b598:	08028698 	.word	0x08028698
 800b59c:	080286c8 	.word	0x080286c8

0800b5a0 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800b5a4:	482a      	ldr	r0, [pc, #168]	; (800b650 <Print_Medha_Self_Details+0xb0>)
 800b5a6:	f019 ff77 	bl	8025498 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800b5aa:	4b2a      	ldr	r3, [pc, #168]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b5ac:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	4829      	ldr	r0, [pc, #164]	; (800b658 <Print_Medha_Self_Details+0xb8>)
 800b5b4:	f019 fed4 	bl	8025360 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800b5b8:	4b26      	ldr	r3, [pc, #152]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b5ba:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4826      	ldr	r0, [pc, #152]	; (800b65c <Print_Medha_Self_Details+0xbc>)
 800b5c2:	f019 fecd 	bl	8025360 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800b5c6:	4b23      	ldr	r3, [pc, #140]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b5c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4824      	ldr	r0, [pc, #144]	; (800b660 <Print_Medha_Self_Details+0xc0>)
 800b5d0:	f019 fec6 	bl	8025360 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800b5d4:	4b1f      	ldr	r3, [pc, #124]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b5d6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4821      	ldr	r0, [pc, #132]	; (800b664 <Print_Medha_Self_Details+0xc4>)
 800b5de:	f019 febf 	bl	8025360 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800b5e2:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b5e4:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	481f      	ldr	r0, [pc, #124]	; (800b668 <Print_Medha_Self_Details+0xc8>)
 800b5ec:	f019 feb8 	bl	8025360 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800b5f0:	4b18      	ldr	r3, [pc, #96]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b5f2:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	481c      	ldr	r0, [pc, #112]	; (800b66c <Print_Medha_Self_Details+0xcc>)
 800b5fa:	f019 feb1 	bl	8025360 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800b5fe:	4b15      	ldr	r3, [pc, #84]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b600:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b604:	4619      	mov	r1, r3
 800b606:	481a      	ldr	r0, [pc, #104]	; (800b670 <Print_Medha_Self_Details+0xd0>)
 800b608:	f019 feaa 	bl	8025360 <iprintf>
	printf("NoofRelays                    :%lu\n",EI_data.Medha_Prms_st.NoofRelays);
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b60e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b612:	4619      	mov	r1, r3
 800b614:	4817      	ldr	r0, [pc, #92]	; (800b674 <Print_Medha_Self_Details+0xd4>)
 800b616:	f019 fea3 	bl	8025360 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800b61a:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b61c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b620:	4619      	mov	r1, r3
 800b622:	4815      	ldr	r0, [pc, #84]	; (800b678 <Print_Medha_Self_Details+0xd8>)
 800b624:	f019 fe9c 	bl	8025360 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b628:	4b0a      	ldr	r3, [pc, #40]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b62a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800b62e:	4619      	mov	r1, r3
 800b630:	4812      	ldr	r0, [pc, #72]	; (800b67c <Print_Medha_Self_Details+0xdc>)
 800b632:	f019 fe95 	bl	8025360 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800b636:	4b07      	ldr	r3, [pc, #28]	; (800b654 <Print_Medha_Self_Details+0xb4>)
 800b638:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b63c:	4619      	mov	r1, r3
 800b63e:	4810      	ldr	r0, [pc, #64]	; (800b680 <Print_Medha_Self_Details+0xe0>)
 800b640:	f019 fe8e 	bl	8025360 <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800b644:	4802      	ldr	r0, [pc, #8]	; (800b650 <Print_Medha_Self_Details+0xb0>)
 800b646:	f019 ff27 	bl	8025498 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800b64a:	bf00      	nop
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	080286f0 	.word	0x080286f0
 800b654:	20000304 	.word	0x20000304
 800b658:	08028744 	.word	0x08028744
 800b65c:	08028768 	.word	0x08028768
 800b660:	0802878c 	.word	0x0802878c
 800b664:	080287b0 	.word	0x080287b0
 800b668:	080287d4 	.word	0x080287d4
 800b66c:	080287f8 	.word	0x080287f8
 800b670:	0802881c 	.word	0x0802881c
 800b674:	08028840 	.word	0x08028840
 800b678:	08028864 	.word	0x08028864
 800b67c:	08028888 	.word	0x08028888
 800b680:	080288ac 	.word	0x080288ac

0800b684 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b09a      	sub	sp, #104	; 0x68
 800b688:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800b68a:	2300      	movs	r3, #0
 800b68c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800b69c:	2300      	movs	r3, #0
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	1d3b      	adds	r3, r7, #4
 800b6a2:	2260      	movs	r2, #96	; 0x60
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f019 fd72 	bl	8025190 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800b6ac:	4bb9      	ldr	r3, [pc, #740]	; (800b994 <CheckforMedhaCMD+0x310>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f004 fae5 	bl	800fc80 <HAL_Elaps_Ticks>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b09      	cmp	r3, #9
 800b6ba:	f240 81ad 	bls.w	800ba18 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800b6be:	e010      	b.n	800b6e2 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f00c fb1b 	bl	8017cfc <Com_Get_Byte>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800b6cc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800b6d6:	3368      	adds	r3, #104	; 0x68
 800b6d8:	443b      	add	r3, r7
 800b6da:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800b6de:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	f00c faca 	bl	8017c7c <Com_DataReady>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e8      	bne.n	800b6c0 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800b6ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 8144 	beq.w	800b980 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800b6f8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b6fc:	3368      	adds	r3, #104	; 0x68
 800b6fe:	443b      	add	r3, r7
 800b700:	2200      	movs	r2, #0
 800b702:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800b706:	463b      	mov	r3, r7
 800b708:	4619      	mov	r1, r3
 800b70a:	48a3      	ldr	r0, [pc, #652]	; (800b998 <CheckforMedhaCMD+0x314>)
 800b70c:	f019 fe28 	bl	8025360 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800b710:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800b714:	463b      	mov	r3, r7
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fa0d 	bl	800bb38 <Is_MedhaCommand_Valid>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b0c      	cmp	r3, #12
 800b722:	f200 8129 	bhi.w	800b978 <CheckforMedhaCMD+0x2f4>
 800b726:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <CheckforMedhaCMD+0xa8>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b761 	.word	0x0800b761
 800b730:	0800b76f 	.word	0x0800b76f
 800b734:	0800b7d3 	.word	0x0800b7d3
 800b738:	0800b7f5 	.word	0x0800b7f5
 800b73c:	0800b81d 	.word	0x0800b81d
 800b740:	0800b845 	.word	0x0800b845
 800b744:	0800b86d 	.word	0x0800b86d
 800b748:	0800b895 	.word	0x0800b895
 800b74c:	0800b8bd 	.word	0x0800b8bd
 800b750:	0800b8e5 	.word	0x0800b8e5
 800b754:	0800b90d 	.word	0x0800b90d
 800b758:	0800b935 	.word	0x0800b935
 800b75c:	0800b95d 	.word	0x0800b95d
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800b760:	4b8e      	ldr	r3, [pc, #568]	; (800b99c <CheckforMedhaCMD+0x318>)
 800b762:	2201      	movs	r2, #1
 800b764:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800b766:	488e      	ldr	r0, [pc, #568]	; (800b9a0 <CheckforMedhaCMD+0x31c>)
 800b768:	f019 fe96 	bl	8025498 <puts>
				break;
 800b76c:	e109      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800b76e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b772:	3b01      	subs	r3, #1
 800b774:	3368      	adds	r3, #104	; 0x68
 800b776:	443b      	add	r3, r7
 800b778:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800b77c:	3b30      	subs	r3, #48	; 0x30
 800b77e:	461a      	mov	r2, r3
 800b780:	4988      	ldr	r1, [pc, #544]	; (800b9a4 <CheckforMedhaCMD+0x320>)
 800b782:	4889      	ldr	r0, [pc, #548]	; (800b9a8 <CheckforMedhaCMD+0x324>)
 800b784:	f019 fdec 	bl	8025360 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800b788:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b78c:	3b01      	subs	r3, #1
 800b78e:	3368      	adds	r3, #104	; 0x68
 800b790:	443b      	add	r3, r7
 800b792:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800b796:	2b2f      	cmp	r3, #47	; 0x2f
 800b798:	d914      	bls.n	800b7c4 <CheckforMedhaCMD+0x140>
 800b79a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	3368      	adds	r3, #104	; 0x68
 800b7a2:	443b      	add	r3, r7
 800b7a4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800b7a8:	2b32      	cmp	r3, #50	; 0x32
 800b7aa:	d80b      	bhi.n	800b7c4 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800b7ac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	3368      	adds	r3, #104	; 0x68
 800b7b4:	443b      	add	r3, r7
 800b7b6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800b7ba:	3b30      	subs	r3, #48	; 0x30
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	4b7b      	ldr	r3, [pc, #492]	; (800b9ac <CheckforMedhaCMD+0x328>)
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	e002      	b.n	800b7ca <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800b7c4:	487a      	ldr	r0, [pc, #488]	; (800b9b0 <CheckforMedhaCMD+0x32c>)
 800b7c6:	f019 fe67 	bl	8025498 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b7d0:	e0d7      	b.n	800b982 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800b7d2:	4978      	ldr	r1, [pc, #480]	; (800b9b4 <CheckforMedhaCMD+0x330>)
 800b7d4:	4878      	ldr	r0, [pc, #480]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b7d6:	f019 fdc3 	bl	8025360 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800b7da:	4878      	ldr	r0, [pc, #480]	; (800b9bc <CheckforMedhaCMD+0x338>)
 800b7dc:	f019 fe5c 	bl	8025498 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b7e0:	4b77      	ldr	r3, [pc, #476]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f043 0301 	orr.w	r3, r3, #1
 800b7e8:	4a75      	ldr	r2, [pc, #468]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b7ea:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b7f2:	e0c6      	b.n	800b982 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800b7f4:	4973      	ldr	r1, [pc, #460]	; (800b9c4 <CheckforMedhaCMD+0x340>)
 800b7f6:	4870      	ldr	r0, [pc, #448]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b7f8:	f019 fdb2 	bl	8025360 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800b7fc:	4872      	ldr	r0, [pc, #456]	; (800b9c8 <CheckforMedhaCMD+0x344>)
 800b7fe:	f019 fe4b 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b802:	4b6f      	ldr	r3, [pc, #444]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b804:	2200      	movs	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b808:	4b6d      	ldr	r3, [pc, #436]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f043 0302 	orr.w	r3, r3, #2
 800b810:	4a6b      	ldr	r2, [pc, #428]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b812:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b814:	2301      	movs	r3, #1
 800b816:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b81a:	e0b2      	b.n	800b982 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800b81c:	496b      	ldr	r1, [pc, #428]	; (800b9cc <CheckforMedhaCMD+0x348>)
 800b81e:	4866      	ldr	r0, [pc, #408]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b820:	f019 fd9e 	bl	8025360 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800b824:	486a      	ldr	r0, [pc, #424]	; (800b9d0 <CheckforMedhaCMD+0x34c>)
 800b826:	f019 fe37 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b82a:	4b65      	ldr	r3, [pc, #404]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b830:	4b63      	ldr	r3, [pc, #396]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f043 0304 	orr.w	r3, r3, #4
 800b838:	4a61      	ldr	r2, [pc, #388]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b83a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b83c:	2301      	movs	r3, #1
 800b83e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b842:	e09e      	b.n	800b982 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800b844:	4963      	ldr	r1, [pc, #396]	; (800b9d4 <CheckforMedhaCMD+0x350>)
 800b846:	485c      	ldr	r0, [pc, #368]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b848:	f019 fd8a 	bl	8025360 <iprintf>
				printf("INVALID_DES_PORT\n");
 800b84c:	4862      	ldr	r0, [pc, #392]	; (800b9d8 <CheckforMedhaCMD+0x354>)
 800b84e:	f019 fe23 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b852:	4b5b      	ldr	r3, [pc, #364]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b858:	4b59      	ldr	r3, [pc, #356]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f043 0308 	orr.w	r3, r3, #8
 800b860:	4a57      	ldr	r2, [pc, #348]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b862:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b864:	2301      	movs	r3, #1
 800b866:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b86a:	e08a      	b.n	800b982 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800b86c:	495b      	ldr	r1, [pc, #364]	; (800b9dc <CheckforMedhaCMD+0x358>)
 800b86e:	4852      	ldr	r0, [pc, #328]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b870:	f019 fd76 	bl	8025360 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800b874:	485a      	ldr	r0, [pc, #360]	; (800b9e0 <CheckforMedhaCMD+0x35c>)
 800b876:	f019 fe0f 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b87a:	4b51      	ldr	r3, [pc, #324]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b880:	4b4f      	ldr	r3, [pc, #316]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f043 0310 	orr.w	r3, r3, #16
 800b888:	4a4d      	ldr	r2, [pc, #308]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b88a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b88c:	2301      	movs	r3, #1
 800b88e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b892:	e076      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800b894:	4953      	ldr	r1, [pc, #332]	; (800b9e4 <CheckforMedhaCMD+0x360>)
 800b896:	4848      	ldr	r0, [pc, #288]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b898:	f019 fd62 	bl	8025360 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800b89c:	4852      	ldr	r0, [pc, #328]	; (800b9e8 <CheckforMedhaCMD+0x364>)
 800b89e:	f019 fdfb 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b8a2:	4b47      	ldr	r3, [pc, #284]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b8a8:	4b45      	ldr	r3, [pc, #276]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f043 0320 	orr.w	r3, r3, #32
 800b8b0:	4a43      	ldr	r2, [pc, #268]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8b2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b8ba:	e062      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800b8bc:	494b      	ldr	r1, [pc, #300]	; (800b9ec <CheckforMedhaCMD+0x368>)
 800b8be:	484c      	ldr	r0, [pc, #304]	; (800b9f0 <CheckforMedhaCMD+0x36c>)
 800b8c0:	f019 fd4e 	bl	8025360 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800b8c4:	484b      	ldr	r0, [pc, #300]	; (800b9f4 <CheckforMedhaCMD+0x370>)
 800b8c6:	f019 fde7 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b8ca:	4b3d      	ldr	r3, [pc, #244]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b8d0:	4b3b      	ldr	r3, [pc, #236]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d8:	4a39      	ldr	r2, [pc, #228]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8da:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b8e2:	e04e      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800b8e4:	4944      	ldr	r1, [pc, #272]	; (800b9f8 <CheckforMedhaCMD+0x374>)
 800b8e6:	4834      	ldr	r0, [pc, #208]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b8e8:	f019 fd3a 	bl	8025360 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800b8ec:	4843      	ldr	r0, [pc, #268]	; (800b9fc <CheckforMedhaCMD+0x378>)
 800b8ee:	f019 fdd3 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b8f2:	4b33      	ldr	r3, [pc, #204]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b8f8:	4b31      	ldr	r3, [pc, #196]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b900:	4a2f      	ldr	r2, [pc, #188]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b902:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b904:	2301      	movs	r3, #1
 800b906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b90a:	e03a      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800b90c:	493c      	ldr	r1, [pc, #240]	; (800ba00 <CheckforMedhaCMD+0x37c>)
 800b90e:	482a      	ldr	r0, [pc, #168]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b910:	f019 fd26 	bl	8025360 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b914:	483b      	ldr	r0, [pc, #236]	; (800ba04 <CheckforMedhaCMD+0x380>)
 800b916:	f019 fdbf 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b91a:	4b29      	ldr	r3, [pc, #164]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b920:	4b27      	ldr	r3, [pc, #156]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b928:	4a25      	ldr	r2, [pc, #148]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b92a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b92c:	2301      	movs	r3, #1
 800b92e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b932:	e026      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800b934:	4934      	ldr	r1, [pc, #208]	; (800ba08 <CheckforMedhaCMD+0x384>)
 800b936:	4820      	ldr	r0, [pc, #128]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b938:	f019 fd12 	bl	8025360 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800b93c:	4833      	ldr	r0, [pc, #204]	; (800ba0c <CheckforMedhaCMD+0x388>)
 800b93e:	f019 fdab 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b942:	4b1f      	ldr	r3, [pc, #124]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b944:	2200      	movs	r2, #0
 800b946:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800b948:	4b1d      	ldr	r3, [pc, #116]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b950:	4a1b      	ldr	r2, [pc, #108]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b952:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800b954:	2301      	movs	r3, #1
 800b956:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b95a:	e012      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800b95c:	492c      	ldr	r1, [pc, #176]	; (800ba10 <CheckforMedhaCMD+0x38c>)
 800b95e:	4816      	ldr	r0, [pc, #88]	; (800b9b8 <CheckforMedhaCMD+0x334>)
 800b960:	f019 fcfe 	bl	8025360 <iprintf>
				printf("CLEAR ALL\n");
 800b964:	482b      	ldr	r0, [pc, #172]	; (800ba14 <CheckforMedhaCMD+0x390>)
 800b966:	f019 fd97 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800b96a:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <CheckforMedhaCMD+0x33c>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800b970:	2301      	movs	r3, #1
 800b972:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800b976:	e004      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800b978:	480d      	ldr	r0, [pc, #52]	; (800b9b0 <CheckforMedhaCMD+0x32c>)
 800b97a:	f019 fd8d 	bl	8025498 <puts>
 800b97e:	e000      	b.n	800b982 <CheckforMedhaCMD+0x2fe>
			}
		}
 800b980:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800b982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b986:	2b01      	cmp	r3, #1
 800b988:	d147      	bne.n	800ba1a <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800b98a:	f240 2005 	movw	r0, #517	; 0x205
 800b98e:	f004 ff2b 	bl	80107e8 <TransmitCanPkt>
 800b992:	e042      	b.n	800ba1a <CheckforMedhaCMD+0x396>
 800b994:	2000ad68 	.word	0x2000ad68
 800b998:	080288d0 	.word	0x080288d0
 800b99c:	200009b4 	.word	0x200009b4
 800b9a0:	080288e8 	.word	0x080288e8
 800b9a4:	200025de 	.word	0x200025de
 800b9a8:	08028928 	.word	0x08028928
 800b9ac:	200009b5 	.word	0x200009b5
 800b9b0:	0802893c 	.word	0x0802893c
 800b9b4:	20002610 	.word	0x20002610
 800b9b8:	08028958 	.word	0x08028958
 800b9bc:	08028968 	.word	0x08028968
 800b9c0:	20003968 	.word	0x20003968
 800b9c4:	20002642 	.word	0x20002642
 800b9c8:	08028980 	.word	0x08028980
 800b9cc:	20002674 	.word	0x20002674
 800b9d0:	08028998 	.word	0x08028998
 800b9d4:	200026a6 	.word	0x200026a6
 800b9d8:	080289ac 	.word	0x080289ac
 800b9dc:	200026d8 	.word	0x200026d8
 800b9e0:	080289c0 	.word	0x080289c0
 800b9e4:	2000270a 	.word	0x2000270a
 800b9e8:	080289d4 	.word	0x080289d4
 800b9ec:	2000273c 	.word	0x2000273c
 800b9f0:	080289f0 	.word	0x080289f0
 800b9f4:	08028a08 	.word	0x08028a08
 800b9f8:	2000276e 	.word	0x2000276e
 800b9fc:	08028a1c 	.word	0x08028a1c
 800ba00:	200027a0 	.word	0x200027a0
 800ba04:	08028a34 	.word	0x08028a34
 800ba08:	200027d2 	.word	0x200027d2
 800ba0c:	08028a54 	.word	0x08028a54
 800ba10:	20002804 	.word	0x20002804
 800ba14:	08028a74 	.word	0x08028a74
		return;
 800ba18:	bf00      	nop
		}
	}
}
 800ba1a:	3768      	adds	r7, #104	; 0x68
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
 800ba2c:	4a3d      	ldr	r2, [pc, #244]	; (800bb24 <Update_MedhaCommands+0x104>)
 800ba2e:	2132      	movs	r1, #50	; 0x32
 800ba30:	fb01 f303 	mul.w	r3, r1, r3
 800ba34:	4413      	add	r3, r2
 800ba36:	2224      	movs	r2, #36	; 0x24
 800ba38:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	4a39      	ldr	r2, [pc, #228]	; (800bb24 <Update_MedhaCommands+0x104>)
 800ba3e:	2132      	movs	r1, #50	; 0x32
 800ba40:	fb01 f303 	mul.w	r3, r1, r3
 800ba44:	4413      	add	r3, r2
 800ba46:	3301      	adds	r3, #1
 800ba48:	2201      	movs	r2, #1
 800ba4a:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800ba4c:	79fb      	ldrb	r3, [r7, #7]
 800ba4e:	4a35      	ldr	r2, [pc, #212]	; (800bb24 <Update_MedhaCommands+0x104>)
 800ba50:	2132      	movs	r1, #50	; 0x32
 800ba52:	fb01 f303 	mul.w	r3, r1, r3
 800ba56:	4413      	add	r3, r2
 800ba58:	3302      	adds	r3, #2
 800ba5a:	2230      	movs	r2, #48	; 0x30
 800ba5c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	4a30      	ldr	r2, [pc, #192]	; (800bb24 <Update_MedhaCommands+0x104>)
 800ba62:	2132      	movs	r1, #50	; 0x32
 800ba64:	fb01 f303 	mul.w	r3, r1, r3
 800ba68:	4413      	add	r3, r2
 800ba6a:	3303      	adds	r3, #3
 800ba6c:	2240      	movs	r2, #64	; 0x40
 800ba6e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	4a2c      	ldr	r2, [pc, #176]	; (800bb24 <Update_MedhaCommands+0x104>)
 800ba74:	2132      	movs	r1, #50	; 0x32
 800ba76:	fb01 f303 	mul.w	r3, r1, r3
 800ba7a:	4413      	add	r3, r2
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	22c0      	movs	r2, #192	; 0xc0
 800ba80:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800ba82:	79fb      	ldrb	r3, [r7, #7]
 800ba84:	4a27      	ldr	r2, [pc, #156]	; (800bb24 <Update_MedhaCommands+0x104>)
 800ba86:	2132      	movs	r1, #50	; 0x32
 800ba88:	fb01 f303 	mul.w	r3, r1, r3
 800ba8c:	4413      	add	r3, r2
 800ba8e:	3305      	adds	r3, #5
 800ba90:	224e      	movs	r2, #78	; 0x4e
 800ba92:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	4a23      	ldr	r2, [pc, #140]	; (800bb24 <Update_MedhaCommands+0x104>)
 800ba98:	2132      	movs	r1, #50	; 0x32
 800ba9a:	fb01 f303 	mul.w	r3, r1, r3
 800ba9e:	4413      	add	r3, r2
 800baa0:	3306      	adds	r3, #6
 800baa2:	2226      	movs	r2, #38	; 0x26
 800baa4:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	3301      	adds	r3, #1
 800baaa:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800baac:	79fb      	ldrb	r3, [r7, #7]
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	71fa      	strb	r2, [r7, #7]
 800bab2:	461a      	mov	r2, r3
 800bab4:	2332      	movs	r3, #50	; 0x32
 800bab6:	fb02 f303 	mul.w	r3, r2, r3
 800baba:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <Update_MedhaCommands+0x104>)
 800babc:	4413      	add	r3, r2
 800babe:	491a      	ldr	r1, [pc, #104]	; (800bb28 <Update_MedhaCommands+0x108>)
 800bac0:	461a      	mov	r2, r3
 800bac2:	460b      	mov	r3, r1
 800bac4:	cb03      	ldmia	r3!, {r0, r1}
 800bac6:	6010      	str	r0, [r2, #0]
 800bac8:	6051      	str	r1, [r2, #4]
 800baca:	8819      	ldrh	r1, [r3, #0]
 800bacc:	789b      	ldrb	r3, [r3, #2]
 800bace:	8111      	strh	r1, [r2, #8]
 800bad0:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	71fa      	strb	r2, [r7, #7]
 800bad8:	461a      	mov	r2, r3
 800bada:	2332      	movs	r3, #50	; 0x32
 800badc:	fb02 f303 	mul.w	r3, r2, r3
 800bae0:	4a10      	ldr	r2, [pc, #64]	; (800bb24 <Update_MedhaCommands+0x104>)
 800bae2:	4413      	add	r3, r2
 800bae4:	4911      	ldr	r1, [pc, #68]	; (800bb2c <Update_MedhaCommands+0x10c>)
 800bae6:	461a      	mov	r2, r3
 800bae8:	460b      	mov	r3, r1
 800baea:	cb03      	ldmia	r3!, {r0, r1}
 800baec:	6010      	str	r0, [r2, #0]
 800baee:	6051      	str	r1, [r2, #4]
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	71fa      	strb	r2, [r7, #7]
 800bafa:	461a      	mov	r2, r3
 800bafc:	2332      	movs	r3, #50	; 0x32
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
 800bb02:	4a08      	ldr	r2, [pc, #32]	; (800bb24 <Update_MedhaCommands+0x104>)
 800bb04:	4413      	add	r3, r2
 800bb06:	4a0a      	ldr	r2, [pc, #40]	; (800bb30 <Update_MedhaCommands+0x110>)
 800bb08:	6810      	ldr	r0, [r2, #0]
 800bb0a:	6018      	str	r0, [r3, #0]
 800bb0c:	7912      	ldrb	r2, [r2, #4]
 800bb0e:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800bb10:	4a08      	ldr	r2, [pc, #32]	; (800bb34 <Update_MedhaCommands+0x114>)
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	7013      	strb	r3, [r2, #0]
}
 800bb16:	bf00      	nop
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	200025ac 	.word	0x200025ac
 800bb28:	08028a80 	.word	0x08028a80
 800bb2c:	08028a8c 	.word	0x08028a8c
 800bb30:	08028a98 	.word	0x08028a98
 800bb34:	20002994 	.word	0x20002994

0800bb38 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800bb38:	b590      	push	{r4, r7, lr}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]
 800bb48:	e01c      	b.n	800bb84 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
 800bb4c:	2232      	movs	r2, #50	; 0x32
 800bb4e:	fb02 f303 	mul.w	r3, r2, r3
 800bb52:	4a11      	ldr	r2, [pc, #68]	; (800bb98 <Is_MedhaCommand_Valid+0x60>)
 800bb54:	189c      	adds	r4, r3, r2
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	2232      	movs	r2, #50	; 0x32
 800bb5a:	fb02 f303 	mul.w	r3, r2, r3
 800bb5e:	4a0e      	ldr	r2, [pc, #56]	; (800bb98 <Is_MedhaCommand_Valid+0x60>)
 800bb60:	4413      	add	r3, r2
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7f4 fb76 	bl	8000254 <strlen>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f019 fad6 	bl	8025120 <memcmp>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	e008      	b.n	800bb90 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	3301      	adds	r3, #1
 800bb82:	73fb      	strb	r3, [r7, #15]
 800bb84:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <Is_MedhaCommand_Valid+0x64>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	7bfa      	ldrb	r2, [r7, #15]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d3dd      	bcc.n	800bb4a <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800bb8e:	23ff      	movs	r3, #255	; 0xff
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd90      	pop	{r4, r7, pc}
 800bb98:	200025ac 	.word	0x200025ac
 800bb9c:	20002994 	.word	0x20002994

0800bba0 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	6039      	str	r1, [r7, #0]
 800bbaa:	80fb      	strh	r3, [r7, #6]
 800bbac:	4613      	mov	r3, r2
 800bbae:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800bbbc:	88fb      	ldrh	r3, [r7, #6]
 800bbbe:	613b      	str	r3, [r7, #16]
 800bbc0:	e015      	b.n	800bbee <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	6839      	ldr	r1, [r7, #0]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	440b      	add	r3, r1
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	4053      	eors	r3, r2
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	0a1b      	lsrs	r3, r3, #8
 800bbd8:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800bbda:	4a0a      	ldr	r2, [pc, #40]	; (800bc04 <GetCRC32+0x64>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	4053      	eors	r3, r2
 800bbe6:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	3301      	adds	r3, #1
 800bbec:	613b      	str	r3, [r7, #16]
 800bbee:	88bb      	ldrh	r3, [r7, #4]
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d3e5      	bcc.n	800bbc2 <GetCRC32+0x22>
	}

	return Crc;
 800bbf6:	697b      	ldr	r3, [r7, #20]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	371c      	adds	r7, #28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	0802be50 	.word	0x0802be50

0800bc08 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	6039      	str	r1, [r7, #0]
 800bc12:	80fb      	strh	r3, [r7, #6]
 800bc14:	4613      	mov	r3, r2
 800bc16:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800bc20:	88ba      	ldrh	r2, [r7, #4]
 800bc22:	88fb      	ldrh	r3, [r7, #6]
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff ffba 	bl	800bba0 <GetCRC32>
 800bc2c:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800bc2e:	88bb      	ldrh	r3, [r7, #4]
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	4413      	add	r3, r2
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d101      	bne.n	800bc44 <CheckCRC32+0x3c>
	{
		return OK;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e009      	b.n	800bc58 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	4619      	mov	r1, r3
 800bc48:	4805      	ldr	r0, [pc, #20]	; (800bc60 <CheckCRC32+0x58>)
 800bc4a:	f019 fb89 	bl	8025360 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800bc4e:	68f9      	ldr	r1, [r7, #12]
 800bc50:	4804      	ldr	r0, [pc, #16]	; (800bc64 <CheckCRC32+0x5c>)
 800bc52:	f019 fb85 	bl	8025360 <iprintf>
		return NOT_OK;
 800bc56:	2300      	movs	r3, #0
	}

}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	08028aa0 	.word	0x08028aa0
 800bc64:	08028ab8 	.word	0x08028ab8

0800bc68 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	f107 0310 	add.w	r3, r7, #16
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	f107 010c 	add.w	r1, r7, #12
 800bc88:	220a      	movs	r2, #10
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f846 	bl	800bd1c <ReadAndFormMsg>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dd34      	ble.n	800bd00 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800bc96:	7b7b      	ldrb	r3, [r7, #13]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d115      	bne.n	800bcc8 <CheckForRqst+0x60>
 800bc9c:	7bbb      	ldrb	r3, [r7, #14]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d112      	bne.n	800bcc8 <CheckForRqst+0x60>
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d10f      	bne.n	800bcc8 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800bca8:	4818      	ldr	r0, [pc, #96]	; (800bd0c <CheckForRqst+0xa4>)
 800bcaa:	f019 fbf5 	bl	8025498 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 f933 	bl	800bf20 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800bcba:	f00c fb47 	bl	801834c <HAL_GetTick>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4a13      	ldr	r2, [pc, #76]	; (800bd10 <CheckForRqst+0xa8>)
 800bcc2:	6013      	str	r3, [r2, #0]
			return 0x01;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e01c      	b.n	800bd02 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800bcc8:	7b7b      	ldrb	r3, [r7, #13]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d115      	bne.n	800bcfa <CheckForRqst+0x92>
 800bcce:	7bbb      	ldrb	r3, [r7, #14]
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d112      	bne.n	800bcfa <CheckForRqst+0x92>
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d10f      	bne.n	800bcfa <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800bcda:	480e      	ldr	r0, [pc, #56]	; (800bd14 <CheckForRqst+0xac>)
 800bcdc:	f019 fbdc 	bl	8025498 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	2202      	movs	r2, #2
 800bce4:	2102      	movs	r1, #2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 f91a 	bl	800bf20 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800bcec:	f00c fb2e 	bl	801834c <HAL_GetTick>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	4a07      	ldr	r2, [pc, #28]	; (800bd10 <CheckForRqst+0xa8>)
 800bcf4:	6013      	str	r3, [r2, #0]
			return 0x02;
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	e003      	b.n	800bd02 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800bcfa:	4807      	ldr	r0, [pc, #28]	; (800bd18 <CheckForRqst+0xb0>)
 800bcfc:	f019 fbcc 	bl	8025498 <puts>
	}
	return 0x00;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	08028ad0 	.word	0x08028ad0
 800bd10:	20000dbc 	.word	0x20000dbc
 800bd14:	08028ae8 	.word	0x08028ae8
 800bd18:	08028b00 	.word	0x08028b00

0800bd1c <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800bd1c:	b590      	push	{r4, r7, lr}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af02      	add	r7, sp, #8
 800bd22:	4603      	mov	r3, r0
 800bd24:	6039      	str	r1, [r7, #0]
 800bd26:	80fb      	strh	r3, [r7, #6]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800bd30:	2300      	movs	r3, #0
 800bd32:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800bd34:	2300      	movs	r3, #0
 800bd36:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800bd38:	e0d4      	b.n	800bee4 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800bd3a:	4b71      	ldr	r3, [pc, #452]	; (800bf00 <ReadAndFormMsg+0x1e4>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800bd40:	4870      	ldr	r0, [pc, #448]	; (800bf04 <ReadAndFormMsg+0x1e8>)
 800bd42:	f00f fe69 	bl	801ba18 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f00b ffd6 	bl	8017cfc <Com_Get_Byte>
 800bd50:	4603      	mov	r3, r0
 800bd52:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800bd54:	f00c f8e8 	bl	8017f28 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800bd58:	4b6b      	ldr	r3, [pc, #428]	; (800bf08 <ReadAndFormMsg+0x1ec>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	f000 8099 	beq.w	800be94 <ReadAndFormMsg+0x178>
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	f300 80b0 	bgt.w	800bec8 <ReadAndFormMsg+0x1ac>
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d002      	beq.n	800bd72 <ReadAndFormMsg+0x56>
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d00e      	beq.n	800bd8e <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800bd70:	e0aa      	b.n	800bec8 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
 800bd74:	2b24      	cmp	r3, #36	; 0x24
 800bd76:	f040 80a9 	bne.w	800becc <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	7bfa      	ldrb	r2, [r7, #15]
 800bd7e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800bd80:	4b62      	ldr	r3, [pc, #392]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bd82:	2201      	movs	r2, #1
 800bd84:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800bd86:	4b60      	ldr	r3, [pc, #384]	; (800bf08 <ReadAndFormMsg+0x1ec>)
 800bd88:	2202      	movs	r2, #2
 800bd8a:	701a      	strb	r2, [r3, #0]
			break;
 800bd8c:	e09e      	b.n	800becc <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	2b26      	cmp	r3, #38	; 0x26
 800bd92:	d006      	beq.n	800bda2 <ReadAndFormMsg+0x86>
 800bd94:	2b26      	cmp	r3, #38	; 0x26
 800bd96:	dc6e      	bgt.n	800be76 <ReadAndFormMsg+0x15a>
 800bd98:	2b05      	cmp	r3, #5
 800bd9a:	d068      	beq.n	800be6e <ReadAndFormMsg+0x152>
 800bd9c:	2b24      	cmp	r3, #36	; 0x24
 800bd9e:	d05c      	beq.n	800be5a <ReadAndFormMsg+0x13e>
 800bda0:	e069      	b.n	800be76 <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800bda2:	4b5a      	ldr	r3, [pc, #360]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bda4:	881b      	ldrh	r3, [r3, #0]
 800bda6:	3b02      	subs	r3, #2
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800bdac:	4b57      	ldr	r3, [pc, #348]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800bdb2:	4b56      	ldr	r3, [pc, #344]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800bdb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da01      	bge.n	800bdc4 <ReadAndFormMsg+0xa8>
					return 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e099      	b.n	800bef8 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800bdc4:	4b50      	ldr	r3, [pc, #320]	; (800bf08 <ReadAndFormMsg+0x1ec>)
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800bdca:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800bdce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800bdd8:	461c      	mov	r4, r3
 800bdda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bdde:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800bde0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bde4:	3301      	adds	r3, #1
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	4413      	add	r3, r2
 800bdea:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	4603      	mov	r3, r0
 800bdf0:	4622      	mov	r2, r4
 800bdf2:	4847      	ldr	r0, [pc, #284]	; (800bf10 <ReadAndFormMsg+0x1f4>)
 800bdf4:	f019 fab4 	bl	8025360 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800bdf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6838      	ldr	r0, [r7, #0]
 800be00:	f008 fc4a 	bl	8014698 <CheckCRC>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d012      	beq.n	800be30 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800be0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	4413      	add	r3, r2
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	4619      	mov	r1, r3
 800be16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800be1a:	3301      	adds	r3, #1
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	4413      	add	r3, r2
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	461a      	mov	r2, r3
 800be24:	483b      	ldr	r0, [pc, #236]	; (800bf14 <ReadAndFormMsg+0x1f8>)
 800be26:	f019 fa9b 	bl	8025360 <iprintf>
					return us_ReturnBytes;
 800be2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800be2e:	e063      	b.n	800bef8 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800be30:	4839      	ldr	r0, [pc, #228]	; (800bf18 <ReadAndFormMsg+0x1fc>)
 800be32:	f019 fa95 	bl	8025360 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800be36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	4413      	add	r3, r2
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	4619      	mov	r1, r3
 800be42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800be46:	3301      	adds	r3, #1
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	4413      	add	r3, r2
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	4832      	ldr	r0, [pc, #200]	; (800bf1c <ReadAndFormMsg+0x200>)
 800be52:	f019 fa85 	bl	8025360 <iprintf>
					return 0;
 800be56:	2300      	movs	r3, #0
 800be58:	e04e      	b.n	800bef8 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	7bfa      	ldrb	r2, [r7, #15]
 800be5e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800be60:	4b2a      	ldr	r3, [pc, #168]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800be62:	2201      	movs	r2, #1
 800be64:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800be66:	4b28      	ldr	r3, [pc, #160]	; (800bf08 <ReadAndFormMsg+0x1ec>)
 800be68:	2202      	movs	r2, #2
 800be6a:	701a      	strb	r2, [r3, #0]
				break;
 800be6c:	e011      	b.n	800be92 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800be6e:	4b26      	ldr	r3, [pc, #152]	; (800bf08 <ReadAndFormMsg+0x1ec>)
 800be70:	2203      	movs	r2, #3
 800be72:	701a      	strb	r2, [r3, #0]
				break;
 800be74:	e00d      	b.n	800be92 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800be76:	4b25      	ldr	r3, [pc, #148]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	4413      	add	r3, r2
 800be80:	7bfa      	ldrb	r2, [r7, #15]
 800be82:	701a      	strb	r2, [r3, #0]
				j++;
 800be84:	4b21      	ldr	r3, [pc, #132]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	3301      	adds	r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	4b1f      	ldr	r3, [pc, #124]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800be8e:	801a      	strh	r2, [r3, #0]
				break;
 800be90:	bf00      	nop
			break;
 800be92:	e01c      	b.n	800bece <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	2b24      	cmp	r3, #36	; 0x24
 800be98:	d005      	beq.n	800bea6 <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	2b26      	cmp	r3, #38	; 0x26
 800be9e:	d002      	beq.n	800bea6 <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	2b05      	cmp	r3, #5
 800bea4:	d10c      	bne.n	800bec0 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800bea6:	4b19      	ldr	r3, [pc, #100]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	4413      	add	r3, r2
 800beb0:	7bfa      	ldrb	r2, [r7, #15]
 800beb2:	701a      	strb	r2, [r3, #0]
					j++;
 800beb4:	4b15      	ldr	r3, [pc, #84]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	3301      	adds	r3, #1
 800beba:	b29a      	uxth	r2, r3
 800bebc:	4b13      	ldr	r3, [pc, #76]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bebe:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800bec0:	4b11      	ldr	r3, [pc, #68]	; (800bf08 <ReadAndFormMsg+0x1ec>)
 800bec2:	2202      	movs	r2, #2
 800bec4:	701a      	strb	r2, [r3, #0]
				break;
 800bec6:	e002      	b.n	800bece <ReadAndFormMsg+0x1b2>
				break;
 800bec8:	bf00      	nop
 800beca:	e000      	b.n	800bece <ReadAndFormMsg+0x1b2>
			break;
 800becc:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800bece:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	88ba      	ldrh	r2, [r7, #4]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d805      	bhi.n	800bee4 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800bed8:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <ReadAndFormMsg+0x1ec>)
 800beda:	2201      	movs	r2, #1
 800bedc:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800bede:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <ReadAndFormMsg+0x1f0>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800bee4:	88fb      	ldrh	r3, [r7, #6]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	4618      	mov	r0, r3
 800beea:	f00b fec7 	bl	8017c7c <Com_DataReady>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f47f af22 	bne.w	800bd3a <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	bd90      	pop	{r4, r7, pc}
 800bf00:	20000dba 	.word	0x20000dba
 800bf04:	2000a160 	.word	0x2000a160
 800bf08:	20000117 	.word	0x20000117
 800bf0c:	20002cc4 	.word	0x20002cc4
 800bf10:	08028b10 	.word	0x08028b10
 800bf14:	08028b38 	.word	0x08028b38
 800bf18:	08028b4c 	.word	0x08028b4c
 800bf1c:	08028b58 	.word	0x08028b58

0800bf20 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	71bb      	strb	r3, [r7, #6]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800bf36:	2300      	movs	r3, #0
 800bf38:	60bb      	str	r3, [r7, #8]
 800bf3a:	f107 030c 	add.w	r3, r7, #12
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800bf44:	2324      	movs	r3, #36	; 0x24
 800bf46:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800bf48:	79bb      	ldrb	r3, [r7, #6]
 800bf4a:	121b      	asrs	r3, r3, #8
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800bf50:	79bb      	ldrb	r3, [r7, #6]
 800bf52:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800bf54:	797b      	ldrb	r3, [r7, #5]
 800bf56:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800bf58:	f107 0308 	add.w	r3, r7, #8
 800bf5c:	2104      	movs	r1, #4
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f008 fc44 	bl	80147ec <ComputeCRC>
	puc_Message[6]= '&';
 800bf64:	2326      	movs	r3, #38	; 0x26
 800bf66:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800bf68:	7b3b      	ldrb	r3, [r7, #12]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	7b7b      	ldrb	r3, [r7, #13]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	480f      	ldr	r0, [pc, #60]	; (800bfb0 <SendAck+0x90>)
 800bf72:	f019 f9f5 	bl	8025360 <iprintf>

	AckTim=HAL_GetTick();
 800bf76:	f00c f9e9 	bl	801834c <HAL_GetTick>
 800bf7a:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800bf7c:	e002      	b.n	800bf84 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800bf7e:	480d      	ldr	r0, [pc, #52]	; (800bfb4 <SendAck+0x94>)
 800bf80:	f00f fd4a 	bl	801ba18 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800bf84:	6978      	ldr	r0, [r7, #20]
 800bf86:	f003 fe7b 	bl	800fc80 <HAL_Elaps_Ticks>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f240 52db 	movw	r2, #1499	; 0x5db
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d9f4      	bls.n	800bf7e <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800bf94:	f107 0108 	add.w	r1, r7, #8
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	2206      	movs	r2, #6
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f00b ff2d 	bl	8017dfc <CommTransmitMessage>

	AckTim = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	617b      	str	r3, [r7, #20]
}
 800bfa6:	bf00      	nop
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	08028b64 	.word	0x08028b64
 800bfb4:	2000a160 	.word	0x2000a160

0800bfb8 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	6039      	str	r1, [r7, #0]
 800bfc2:	80fb      	strh	r3, [r7, #6]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800bfd4:	e0ba      	b.n	800c14c <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800bfd6:	88fb      	ldrh	r3, [r7, #6]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f00b fe8e 	bl	8017cfc <Com_Get_Byte>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800bfe4:	f00b ffa0 	bl	8017f28 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800bfe8:	485f      	ldr	r0, [pc, #380]	; (800c168 <ReadAndFormConfig+0x1b0>)
 800bfea:	f00f fd15 	bl	801ba18 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800bfee:	4b5f      	ldr	r3, [pc, #380]	; (800c16c <ReadAndFormConfig+0x1b4>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	f000 8082 	beq.w	800c0fc <ReadAndFormConfig+0x144>
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	f300 8099 	bgt.w	800c130 <ReadAndFormConfig+0x178>
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d002      	beq.n	800c008 <ReadAndFormConfig+0x50>
 800c002:	2b02      	cmp	r3, #2
 800c004:	d00e      	beq.n	800c024 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c006:	e093      	b.n	800c130 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	2b24      	cmp	r3, #36	; 0x24
 800c00c:	f040 8092 	bne.w	800c134 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	7bfa      	ldrb	r2, [r7, #15]
 800c014:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c016:	4b56      	ldr	r3, [pc, #344]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c018:	2201      	movs	r2, #1
 800c01a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c01c:	4b53      	ldr	r3, [pc, #332]	; (800c16c <ReadAndFormConfig+0x1b4>)
 800c01e:	2202      	movs	r2, #2
 800c020:	701a      	strb	r2, [r3, #0]
			break;
 800c022:	e087      	b.n	800c134 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	2b26      	cmp	r3, #38	; 0x26
 800c028:	d006      	beq.n	800c038 <ReadAndFormConfig+0x80>
 800c02a:	2b26      	cmp	r3, #38	; 0x26
 800c02c:	dc57      	bgt.n	800c0de <ReadAndFormConfig+0x126>
 800c02e:	2b05      	cmp	r3, #5
 800c030:	d051      	beq.n	800c0d6 <ReadAndFormConfig+0x11e>
 800c032:	2b24      	cmp	r3, #36	; 0x24
 800c034:	d045      	beq.n	800c0c2 <ReadAndFormConfig+0x10a>
 800c036:	e052      	b.n	800c0de <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800c038:	4b4d      	ldr	r3, [pc, #308]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	3b02      	subs	r3, #2
 800c03e:	b29b      	uxth	r3, r3
 800c040:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800c042:	4b4b      	ldr	r3, [pc, #300]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800c048:	4b49      	ldr	r3, [pc, #292]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c04e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	da01      	bge.n	800c05a <ReadAndFormConfig+0xa2>
					return 0;
 800c056:	2300      	movs	r3, #0
 800c058:	e082      	b.n	800c160 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800c05a:	4b44      	ldr	r3, [pc, #272]	; (800c16c <ReadAndFormConfig+0x1b4>)
 800c05c:	2201      	movs	r2, #1
 800c05e:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c064:	4619      	mov	r1, r3
 800c066:	6838      	ldr	r0, [r7, #0]
 800c068:	f008 fb16 	bl	8014698 <CheckCRC>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d012      	beq.n	800c098 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c072:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	4413      	add	r3, r2
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	4619      	mov	r1, r3
 800c07e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c082:	3301      	adds	r3, #1
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	4413      	add	r3, r2
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	4839      	ldr	r0, [pc, #228]	; (800c174 <ReadAndFormConfig+0x1bc>)
 800c08e:	f019 f967 	bl	8025360 <iprintf>
					return us_ReturnBytes;
 800c092:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c096:	e063      	b.n	800c160 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800c098:	4837      	ldr	r0, [pc, #220]	; (800c178 <ReadAndFormConfig+0x1c0>)
 800c09a:	f019 f961 	bl	8025360 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c09e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c0a2:	683a      	ldr	r2, [r7, #0]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4830      	ldr	r0, [pc, #192]	; (800c17c <ReadAndFormConfig+0x1c4>)
 800c0ba:	f019 f951 	bl	8025360 <iprintf>
					return 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e04e      	b.n	800c160 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	7bfa      	ldrb	r2, [r7, #15]
 800c0c6:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c0c8:	4b29      	ldr	r3, [pc, #164]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c0ce:	4b27      	ldr	r3, [pc, #156]	; (800c16c <ReadAndFormConfig+0x1b4>)
 800c0d0:	2202      	movs	r2, #2
 800c0d2:	701a      	strb	r2, [r3, #0]
				break;
 800c0d4:	e011      	b.n	800c0fa <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800c0d6:	4b25      	ldr	r3, [pc, #148]	; (800c16c <ReadAndFormConfig+0x1b4>)
 800c0d8:	2203      	movs	r2, #3
 800c0da:	701a      	strb	r2, [r3, #0]
				break;
 800c0dc:	e00d      	b.n	800c0fa <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800c0de:	4b24      	ldr	r3, [pc, #144]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	7bfa      	ldrb	r2, [r7, #15]
 800c0ea:	701a      	strb	r2, [r3, #0]
				i++;
 800c0ec:	4b20      	ldr	r3, [pc, #128]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c0ee:	881b      	ldrh	r3, [r3, #0]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	4b1e      	ldr	r3, [pc, #120]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c0f6:	801a      	strh	r2, [r3, #0]
				break;
 800c0f8:	bf00      	nop
			break;
 800c0fa:	e01c      	b.n	800c136 <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	2b24      	cmp	r3, #36	; 0x24
 800c100:	d005      	beq.n	800c10e <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800c102:	7bfb      	ldrb	r3, [r7, #15]
 800c104:	2b26      	cmp	r3, #38	; 0x26
 800c106:	d002      	beq.n	800c10e <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	2b05      	cmp	r3, #5
 800c10c:	d10c      	bne.n	800c128 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800c10e:	4b18      	ldr	r3, [pc, #96]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	4413      	add	r3, r2
 800c118:	7bfa      	ldrb	r2, [r7, #15]
 800c11a:	701a      	strb	r2, [r3, #0]
					i++;
 800c11c:	4b14      	ldr	r3, [pc, #80]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	3301      	adds	r3, #1
 800c122:	b29a      	uxth	r2, r3
 800c124:	4b12      	ldr	r3, [pc, #72]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c126:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c128:	4b10      	ldr	r3, [pc, #64]	; (800c16c <ReadAndFormConfig+0x1b4>)
 800c12a:	2202      	movs	r2, #2
 800c12c:	701a      	strb	r2, [r3, #0]
				break;
 800c12e:	e002      	b.n	800c136 <ReadAndFormConfig+0x17e>
				break;
 800c130:	bf00      	nop
 800c132:	e000      	b.n	800c136 <ReadAndFormConfig+0x17e>
			break;
 800c134:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800c136:	4b0e      	ldr	r3, [pc, #56]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	88ba      	ldrh	r2, [r7, #4]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d805      	bhi.n	800c14c <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800c140:	4b0a      	ldr	r3, [pc, #40]	; (800c16c <ReadAndFormConfig+0x1b4>)
 800c142:	2201      	movs	r2, #1
 800c144:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800c146:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <ReadAndFormConfig+0x1b8>)
 800c148:	2200      	movs	r2, #0
 800c14a:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c14c:	88fb      	ldrh	r3, [r7, #6]
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	4618      	mov	r0, r3
 800c152:	f00b fd93 	bl	8017c7c <Com_DataReady>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f47f af3c 	bne.w	800bfd6 <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	2000a160 	.word	0x2000a160
 800c16c:	20000118 	.word	0x20000118
 800c170:	20002cc6 	.word	0x20002cc6
 800c174:	08028b80 	.word	0x08028b80
 800c178:	08028b4c 	.word	0x08028b4c
 800c17c:	08028b94 	.word	0x08028b94

0800c180 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800c18a:	79fb      	ldrb	r3, [r7, #7]
 800c18c:	091b      	lsrs	r3, r3, #4
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	0092      	lsls	r2, r2, #2
 800c194:	4413      	add	r3, r2
 800c196:	005b      	lsls	r3, r3, #1
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	79fb      	ldrb	r3, [r7, #7]
 800c19c:	f003 030f 	and.w	r3, r3, #15
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	4413      	add	r3, r2
 800c1a4:	b2db      	uxtb	r3, r3
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
	...

0800c1b4 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800c1be:	79fb      	ldrb	r3, [r7, #7]
 800c1c0:	4a0d      	ldr	r2, [pc, #52]	; (800c1f8 <Dec_to_BCD+0x44>)
 800c1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c6:	08db      	lsrs	r3, r3, #3
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	011b      	lsls	r3, r3, #4
 800c1cc:	b2d8      	uxtb	r0, r3
 800c1ce:	79fa      	ldrb	r2, [r7, #7]
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <Dec_to_BCD+0x44>)
 800c1d2:	fba3 1302 	umull	r1, r3, r3, r2
 800c1d6:	08d9      	lsrs	r1, r3, #3
 800c1d8:	460b      	mov	r3, r1
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	440b      	add	r3, r1
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	4403      	add	r3, r0
 800c1e6:	71fb      	strb	r3, [r7, #7]
	return c;
 800c1e8:	79fb      	ldrb	r3, [r7, #7]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	cccccccd 	.word	0xcccccccd

0800c1fc <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <Is_GPS_Valid+0x34>)
 800c202:	795b      	ldrb	r3, [r3, #5]
 800c204:	2b09      	cmp	r3, #9
 800c206:	d801      	bhi.n	800c20c <Is_GPS_Valid+0x10>
	{
		return 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	e00c      	b.n	800c226 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800c20c:	4b08      	ldr	r3, [pc, #32]	; (800c230 <Is_GPS_Valid+0x34>)
 800c20e:	791b      	ldrb	r3, [r3, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800c214:	2300      	movs	r3, #0
 800c216:	e006      	b.n	800c226 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <Is_GPS_Valid+0x34>)
 800c21a:	78db      	ldrb	r3, [r3, #3]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <Is_GPS_Valid+0x28>
	{
		return 0;
 800c220:	2300      	movs	r3, #0
 800c222:	e000      	b.n	800c226 <Is_GPS_Valid+0x2a>
	}
	return 1;
 800c224:	2301      	movs	r3, #1
}
 800c226:	4618      	mov	r0, r3
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	20002cc8 	.word	0x20002cc8

0800c234 <Write_RTC>:


void Write_RTC(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800c23a:	2300      	movs	r3, #0
 800c23c:	603b      	str	r3, [r7, #0]
 800c23e:	1d3b      	adds	r3, r7, #4
 800c240:	2100      	movs	r1, #0
 800c242:	460a      	mov	r2, r1
 800c244:	801a      	strh	r2, [r3, #0]
 800c246:	460a      	mov	r2, r1
 800c248:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800c24a:	f7ff ffd7 	bl	800c1fc <Is_GPS_Valid>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d103      	bne.n	800c25c <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800c254:	4844      	ldr	r0, [pc, #272]	; (800c368 <Write_RTC+0x134>)
 800c256:	f019 f91f 	bl	8025498 <puts>
 800c25a:	e081      	b.n	800c360 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800c25c:	4b43      	ldr	r3, [pc, #268]	; (800c36c <Write_RTC+0x138>)
 800c25e:	2201      	movs	r2, #1
 800c260:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800c262:	4b43      	ldr	r3, [pc, #268]	; (800c370 <Write_RTC+0x13c>)
 800c264:	789b      	ldrb	r3, [r3, #2]
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff ffa4 	bl	800c1b4 <Dec_to_BCD>
 800c26c:	4603      	mov	r3, r0
 800c26e:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800c270:	4b3f      	ldr	r3, [pc, #252]	; (800c370 <Write_RTC+0x13c>)
 800c272:	785b      	ldrb	r3, [r3, #1]
 800c274:	4618      	mov	r0, r3
 800c276:	f7ff ff9d 	bl	800c1b4 <Dec_to_BCD>
 800c27a:	4603      	mov	r3, r0
 800c27c:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800c27e:	4b3c      	ldr	r3, [pc, #240]	; (800c370 <Write_RTC+0x13c>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff ff96 	bl	800c1b4 <Dec_to_BCD>
 800c288:	4603      	mov	r3, r0
 800c28a:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800c28c:	4b38      	ldr	r3, [pc, #224]	; (800c370 <Write_RTC+0x13c>)
 800c28e:	78db      	ldrb	r3, [r3, #3]
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff ff8f 	bl	800c1b4 <Dec_to_BCD>
 800c296:	4603      	mov	r3, r0
 800c298:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800c29a:	4b35      	ldr	r3, [pc, #212]	; (800c370 <Write_RTC+0x13c>)
 800c29c:	791b      	ldrb	r3, [r3, #4]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff ff88 	bl	800c1b4 <Dec_to_BCD>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800c2a8:	4b31      	ldr	r3, [pc, #196]	; (800c370 <Write_RTC+0x13c>)
 800c2aa:	795b      	ldrb	r3, [r3, #5]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff ff81 	bl	800c1b4 <Dec_to_BCD>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800c2b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	2301      	movs	r3, #1
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	463b      	mov	r3, r7
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	21d0      	movs	r1, #208	; 0xd0
 800c2ca:	482a      	ldr	r0, [pc, #168]	; (800c374 <Write_RTC+0x140>)
 800c2cc:	f00e fdf6 	bl	801aebc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800c2d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	463b      	mov	r3, r7
 800c2dc:	3301      	adds	r3, #1
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	21d0      	movs	r1, #208	; 0xd0
 800c2e6:	4823      	ldr	r0, [pc, #140]	; (800c374 <Write_RTC+0x140>)
 800c2e8:	f00e fde8 	bl	801aebc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800c2ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c2f0:	9302      	str	r3, [sp, #8]
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	463b      	mov	r3, r7
 800c2f8:	3302      	adds	r3, #2
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	2202      	movs	r2, #2
 800c300:	21d0      	movs	r1, #208	; 0xd0
 800c302:	481c      	ldr	r0, [pc, #112]	; (800c374 <Write_RTC+0x140>)
 800c304:	f00e fdda 	bl	801aebc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800c308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c30c:	9302      	str	r3, [sp, #8]
 800c30e:	2301      	movs	r3, #1
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	463b      	mov	r3, r7
 800c314:	3303      	adds	r3, #3
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	2301      	movs	r3, #1
 800c31a:	2204      	movs	r2, #4
 800c31c:	21d0      	movs	r1, #208	; 0xd0
 800c31e:	4815      	ldr	r0, [pc, #84]	; (800c374 <Write_RTC+0x140>)
 800c320:	f00e fdcc 	bl	801aebc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800c324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c328:	9302      	str	r3, [sp, #8]
 800c32a:	2301      	movs	r3, #1
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	463b      	mov	r3, r7
 800c330:	3304      	adds	r3, #4
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	2301      	movs	r3, #1
 800c336:	2205      	movs	r2, #5
 800c338:	21d0      	movs	r1, #208	; 0xd0
 800c33a:	480e      	ldr	r0, [pc, #56]	; (800c374 <Write_RTC+0x140>)
 800c33c:	f00e fdbe 	bl	801aebc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800c340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	2301      	movs	r3, #1
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	463b      	mov	r3, r7
 800c34c:	3305      	adds	r3, #5
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	2301      	movs	r3, #1
 800c352:	2206      	movs	r2, #6
 800c354:	21d0      	movs	r1, #208	; 0xd0
 800c356:	4807      	ldr	r0, [pc, #28]	; (800c374 <Write_RTC+0x140>)
 800c358:	f00e fdb0 	bl	801aebc <HAL_I2C_Mem_Write>

	Get_time();
 800c35c:	f000 f80c 	bl	800c378 <Get_time>

}
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	08028bf4 	.word	0x08028bf4
 800c36c:	200011dc 	.word	0x200011dc
 800c370:	20002cc8 	.word	0x20002cc8
 800c374:	2000a0b8 	.word	0x2000a0b8

0800c378 <Get_time>:


void Get_time(void)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800c37e:	463b      	mov	r3, r7
 800c380:	2207      	movs	r2, #7
 800c382:	2100      	movs	r1, #0
 800c384:	4618      	mov	r0, r3
 800c386:	f018 ff03 	bl	8025190 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800c38a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c38e:	9302      	str	r3, [sp, #8]
 800c390:	2307      	movs	r3, #7
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	463b      	mov	r3, r7
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	2301      	movs	r3, #1
 800c39a:	2200      	movs	r2, #0
 800c39c:	21d0      	movs	r1, #208	; 0xd0
 800c39e:	4824      	ldr	r0, [pc, #144]	; (800c430 <Get_time+0xb8>)
 800c3a0:	f00e fea0 	bl	801b0e4 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800c3a4:	783b      	ldrb	r3, [r7, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff feea 	bl	800c180 <bcdToDec>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	4b20      	ldr	r3, [pc, #128]	; (800c434 <Get_time+0xbc>)
 800c3b2:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800c3b4:	787b      	ldrb	r3, [r7, #1]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff fee2 	bl	800c180 <bcdToDec>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4b1c      	ldr	r3, [pc, #112]	; (800c434 <Get_time+0xbc>)
 800c3c2:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800c3c4:	78bb      	ldrb	r3, [r7, #2]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff feda 	bl	800c180 <bcdToDec>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	4b18      	ldr	r3, [pc, #96]	; (800c434 <Get_time+0xbc>)
 800c3d2:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800c3d4:	793b      	ldrb	r3, [r7, #4]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fed2 	bl	800c180 <bcdToDec>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	461a      	mov	r2, r3
 800c3e0:	4b14      	ldr	r3, [pc, #80]	; (800c434 <Get_time+0xbc>)
 800c3e2:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800c3e4:	797b      	ldrb	r3, [r7, #5]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff feca 	bl	800c180 <bcdToDec>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	4b10      	ldr	r3, [pc, #64]	; (800c434 <Get_time+0xbc>)
 800c3f2:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800c3f4:	79bb      	ldrb	r3, [r7, #6]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff fec2 	bl	800c180 <bcdToDec>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	461a      	mov	r2, r3
 800c400:	4b0c      	ldr	r3, [pc, #48]	; (800c434 <Get_time+0xbc>)
 800c402:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800c404:	783a      	ldrb	r2, [r7, #0]
 800c406:	4b0c      	ldr	r3, [pc, #48]	; (800c438 <Get_time+0xc0>)
 800c408:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800c40a:	787a      	ldrb	r2, [r7, #1]
 800c40c:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <Get_time+0xc0>)
 800c40e:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800c410:	78ba      	ldrb	r2, [r7, #2]
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <Get_time+0xc0>)
 800c414:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800c416:	793a      	ldrb	r2, [r7, #4]
 800c418:	4b07      	ldr	r3, [pc, #28]	; (800c438 <Get_time+0xc0>)
 800c41a:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800c41c:	797a      	ldrb	r2, [r7, #5]
 800c41e:	4b06      	ldr	r3, [pc, #24]	; (800c438 <Get_time+0xc0>)
 800c420:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800c422:	79ba      	ldrb	r2, [r7, #6]
 800c424:	4b04      	ldr	r3, [pc, #16]	; (800c438 <Get_time+0xc0>)
 800c426:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800c428:	bf00      	nop
}
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	2000a0b8 	.word	0x2000a0b8
 800c434:	20002cd8 	.word	0x20002cd8
 800c438:	20002ce0 	.word	0x20002ce0

0800c43c <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800c440:	4b09      	ldr	r3, [pc, #36]	; (800c468 <Update_Time_Every_Sec+0x2c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4618      	mov	r0, r3
 800c446:	f003 fc1b 	bl	800fc80 <HAL_Elaps_Ticks>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c450:	d307      	bcc.n	800c462 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800c452:	f7ff ff91 	bl	800c378 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800c456:	f00b ff79 	bl	801834c <HAL_GetTick>
 800c45a:	4603      	mov	r3, r0
 800c45c:	4a02      	ldr	r2, [pc, #8]	; (800c468 <Update_Time_Every_Sec+0x2c>)
 800c45e:	6013      	str	r3, [r2, #0]
	}
	return;
 800c460:	bf00      	nop
 800c462:	bf00      	nop
}
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20002ce8 	.word	0x20002ce8

0800c46c <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800c470:	f013 fa5a 	bl	801f928 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800c474:	4813      	ldr	r0, [pc, #76]	; (800c4c4 <Process_SiemensEI+0x58>)
 800c476:	f00f facf 	bl	801ba18 <HAL_IWDG_Refresh>

		Feed_wdt();
 800c47a:	f008 fcaf 	bl	8014ddc <Feed_wdt>

		readCanToStructs();
 800c47e:	f004 ff0d 	bl	801129c <readCanToStructs>

		Chech_forSiemensCMD();
 800c482:	f001 fe27 	bl	800e0d4 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800c486:	f001 fb85 	bl	800db94 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800c48a:	f001 fc6b 	bl	800dd64 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800c48e:	f000 f81f 	bl	800c4d0 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800c492:	f001 fc89 	bl	800dda8 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800c496:	f001 fccb 	bl	800de30 <SendRelays2Other>

		CheckRelayMisMatch();
 800c49a:	f001 fce1 	bl	800de60 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800c49e:	f001 fd19 	bl	800ded4 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800c4a2:	f00a ff0f 	bl	80172c4 <Print_BuildDat_Details>

		GetTimeStamp();
 800c4a6:	f002 fd9f 	bl	800efe8 <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800c4aa:	4b07      	ldr	r3, [pc, #28]	; (800c4c8 <Process_SiemensEI+0x5c>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0de      	beq.n	800c470 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800c4b2:	4b06      	ldr	r3, [pc, #24]	; (800c4cc <Process_SiemensEI+0x60>)
 800c4b4:	2203      	movs	r2, #3
 800c4b6:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800c4b8:	f00a fe02 	bl	80170c0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800c4bc:	4801      	ldr	r0, [pc, #4]	; (800c4c4 <Process_SiemensEI+0x58>)
 800c4be:	f00f faab 	bl	801ba18 <HAL_IWDG_Refresh>
		Data_Processing();
 800c4c2:	e7f9      	b.n	800c4b8 <Process_SiemensEI+0x4c>
 800c4c4:	2000a160 	.word	0x2000a160
 800c4c8:	200009b4 	.word	0x200009b4
 800c4cc:	20000db9 	.word	0x20000db9

0800c4d0 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800c4d6:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800c502:	2300      	movs	r3, #0
 800c504:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800c514:	2300      	movs	r3, #0
 800c516:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800c526:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c52a:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	3304      	adds	r3, #4
 800c534:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c538:	2100      	movs	r1, #0
 800c53a:	4618      	mov	r0, r3
 800c53c:	f018 fe28 	bl	8025190 <memset>
	uint16_t Size = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800c54c:	4b7c      	ldr	r3, [pc, #496]	; (800c740 <Siemens_Data_Analyser+0x270>)
 800c54e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c552:	2b0a      	cmp	r3, #10
 800c554:	f240 86dc 	bls.w	800d310 <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800c558:	4b79      	ldr	r3, [pc, #484]	; (800c740 <Siemens_Data_Analyser+0x270>)
 800c55a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c55e:	461a      	mov	r2, r3
 800c560:	f107 030c 	add.w	r3, r7, #12
 800c564:	4976      	ldr	r1, [pc, #472]	; (800c740 <Siemens_Data_Analyser+0x270>)
 800c566:	4618      	mov	r0, r3
 800c568:	f018 fdea 	bl	8025140 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800c56c:	4b74      	ldr	r3, [pc, #464]	; (800c740 <Siemens_Data_Analyser+0x270>)
 800c56e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c572:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800c576:	f240 6204 	movw	r2, #1540	; 0x604
 800c57a:	2100      	movs	r1, #0
 800c57c:	4870      	ldr	r0, [pc, #448]	; (800c740 <Siemens_Data_Analyser+0x270>)
 800c57e:	f018 fe07 	bl	8025190 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c582:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c586:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f018 fdff 	bl	8025190 <memset>


	BITSTUFFINIT(0,0);
 800c592:	2300      	movs	r3, #0
 800c594:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c598:	2300      	movs	r3, #0
 800c59a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800c59e:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c5a2:	085b      	lsrs	r3, r3, #1
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	3b02      	subs	r3, #2
 800c5a8:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800c5ac:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c5b0:	085b      	lsrs	r3, r3, #1
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	3b02      	subs	r3, #2
 800c5b6:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800c5ba:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c5be:	3b02      	subs	r3, #2
 800c5c0:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800c5c4:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c5c8:	085b      	lsrs	r3, r3, #1
 800c5ca:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800c5ce:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800c5d2:	f107 030c 	add.w	r3, r7, #12
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f002 fbeb 	bl	800edb4 <Data_Compliment>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d004      	beq.n	800c5ee <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800c5e4:	4857      	ldr	r0, [pc, #348]	; (800c744 <Siemens_Data_Analyser+0x274>)
 800c5e6:	f018 ff57 	bl	8025498 <puts>
		return ;
 800c5ea:	f000 be94 	b.w	800d316 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800c5ee:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800c5f2:	f107 020c 	add.w	r2, r7, #12
 800c5f6:	4413      	add	r3, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	2110      	movs	r1, #16
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	f7f4 f809 	bl	8000614 <ExtractBits>
 800c602:	4603      	mov	r3, r0
 800c604:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800c608:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c60c:	f107 030c 	add.w	r3, r7, #12
 800c610:	4611      	mov	r1, r2
 800c612:	4618      	mov	r0, r3
 800c614:	f002 f8d2 	bl	800e7bc <Siemens_CRC>
 800c618:	4603      	mov	r3, r0
 800c61a:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c61e:	4b4a      	ldr	r3, [pc, #296]	; (800c748 <Siemens_Data_Analyser+0x278>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	095b      	lsrs	r3, r3, #5
 800c624:	f003 0301 	and.w	r3, r3, #1
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01c      	beq.n	800c666 <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c62c:	4847      	ldr	r0, [pc, #284]	; (800c74c <Siemens_Data_Analyser+0x27c>)
 800c62e:	f018 ff33 	bl	8025498 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c632:	4847      	ldr	r0, [pc, #284]	; (800c750 <Siemens_Data_Analyser+0x280>)
 800c634:	f010 fb3c 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800c638:	4601      	mov	r1, r0
 800c63a:	4b46      	ldr	r3, [pc, #280]	; (800c754 <Siemens_Data_Analyser+0x284>)
 800c63c:	fba3 2301 	umull	r2, r3, r3, r1
 800c640:	0bda      	lsrs	r2, r3, #15
 800c642:	4613      	mov	r3, r2
 800c644:	041b      	lsls	r3, r3, #16
 800c646:	1a9b      	subs	r3, r3, r2
 800c648:	1aca      	subs	r2, r1, r3
 800c64a:	4613      	mov	r3, r2
 800c64c:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800c650:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800c654:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800c658:	429a      	cmp	r2, r3
 800c65a:	d104      	bne.n	800c666 <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800c65c:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800c660:	3304      	adds	r3, #4
 800c662:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800c666:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800c66a:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800c66e:	429a      	cmp	r2, r3
 800c670:	d010      	beq.n	800c694 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800c672:	4839      	ldr	r0, [pc, #228]	; (800c758 <Siemens_Data_Analyser+0x288>)
 800c674:	f018 ff10 	bl	8025498 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800c678:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800c67c:	4619      	mov	r1, r3
 800c67e:	4837      	ldr	r0, [pc, #220]	; (800c75c <Siemens_Data_Analyser+0x28c>)
 800c680:	f018 fe6e 	bl	8025360 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800c684:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800c688:	4619      	mov	r1, r3
 800c68a:	4835      	ldr	r0, [pc, #212]	; (800c760 <Siemens_Data_Analyser+0x290>)
 800c68c:	f018 fe68 	bl	8025360 <iprintf>
		return;
 800c690:	f000 be41 	b.w	800d316 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800c694:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800c698:	f107 020c 	add.w	r2, r7, #12
 800c69c:	4413      	add	r3, r2
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2110      	movs	r1, #16
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	f7f3 ffb6 	bl	8000614 <ExtractBits>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800c6ae:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800c6b2:	f107 020c 	add.w	r2, r7, #12
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f002 f87c 	bl	800e7bc <Siemens_CRC>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c6ca:	4b1f      	ldr	r3, [pc, #124]	; (800c748 <Siemens_Data_Analyser+0x278>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	0a1b      	lsrs	r3, r3, #8
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d01c      	beq.n	800c712 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800c6d8:	4822      	ldr	r0, [pc, #136]	; (800c764 <Siemens_Data_Analyser+0x294>)
 800c6da:	f018 fedd 	bl	8025498 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c6de:	481c      	ldr	r0, [pc, #112]	; (800c750 <Siemens_Data_Analyser+0x280>)
 800c6e0:	f010 fae6 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	4b1b      	ldr	r3, [pc, #108]	; (800c754 <Siemens_Data_Analyser+0x284>)
 800c6e8:	fba3 2301 	umull	r2, r3, r3, r1
 800c6ec:	0bda      	lsrs	r2, r3, #15
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	041b      	lsls	r3, r3, #16
 800c6f2:	1a9b      	subs	r3, r3, r2
 800c6f4:	1aca      	subs	r2, r1, r3
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800c6fc:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800c700:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800c704:	429a      	cmp	r2, r3
 800c706:	d104      	bne.n	800c712 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800c708:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800c70c:	3304      	adds	r3, #4
 800c70e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800c712:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800c716:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d02a      	beq.n	800c774 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800c71e:	4812      	ldr	r0, [pc, #72]	; (800c768 <Siemens_Data_Analyser+0x298>)
 800c720:	f018 feba 	bl	8025498 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800c724:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800c728:	4619      	mov	r1, r3
 800c72a:	4810      	ldr	r0, [pc, #64]	; (800c76c <Siemens_Data_Analyser+0x29c>)
 800c72c:	f018 fe18 	bl	8025360 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800c730:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800c734:	4619      	mov	r1, r3
 800c736:	480e      	ldr	r0, [pc, #56]	; (800c770 <Siemens_Data_Analyser+0x2a0>)
 800c738:	f018 fe12 	bl	8025360 <iprintf>
		return;
 800c73c:	f000 bdeb 	b.w	800d316 <Siemens_Data_Analyser+0xe46>
 800c740:	200050a4 	.word	0x200050a4
 800c744:	08028c14 	.word	0x08028c14
 800c748:	20003968 	.word	0x20003968
 800c74c:	08028c34 	.word	0x08028c34
 800c750:	2000a9e0 	.word	0x2000a9e0
 800c754:	80008001 	.word	0x80008001
 800c758:	08028c5c 	.word	0x08028c5c
 800c75c:	08028c6c 	.word	0x08028c6c
 800c760:	08028c80 	.word	0x08028c80
 800c764:	08028c94 	.word	0x08028c94
 800c768:	08028cc0 	.word	0x08028cc0
 800c76c:	08028cd0 	.word	0x08028cd0
 800c770:	08028cec 	.word	0x08028cec
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800c774:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c778:	b2d8      	uxtb	r0, r3
 800c77a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c77e:	f107 020c 	add.w	r2, r7, #12
 800c782:	441a      	add	r2, r3
 800c784:	2301      	movs	r3, #1
 800c786:	2108      	movs	r1, #8
 800c788:	f002 f86c 	bl	800e864 <Extract_Parity_Data>
 800c78c:	4603      	mov	r3, r0
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c794:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c798:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c79a:	4b56      	ldr	r3, [pc, #344]	; (800c8f4 <Siemens_Data_Analyser+0x424>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d02a      	beq.n	800c7fc <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800c7a6:	4854      	ldr	r0, [pc, #336]	; (800c8f8 <Siemens_Data_Analyser+0x428>)
 800c7a8:	f018 fe76 	bl	8025498 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c7ac:	4853      	ldr	r0, [pc, #332]	; (800c8fc <Siemens_Data_Analyser+0x42c>)
 800c7ae:	f010 fa7f 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	4b52      	ldr	r3, [pc, #328]	; (800c900 <Siemens_Data_Analyser+0x430>)
 800c7b6:	fba3 2301 	umull	r2, r3, r3, r1
 800c7ba:	09da      	lsrs	r2, r3, #7
 800c7bc:	4613      	mov	r3, r2
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	1a9b      	subs	r3, r3, r2
 800c7c2:	1aca      	subs	r2, r1, r3
 800c7c4:	b2d2      	uxtb	r2, r2
 800c7c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c7ca:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c7ce:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800c7d0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c7d4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c7d8:	781a      	ldrb	r2, [r3, #0]
 800c7da:	4b4a      	ldr	r3, [pc, #296]	; (800c904 <Siemens_Data_Analyser+0x434>)
 800c7dc:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d10b      	bne.n	800c7fc <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800c7e4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c7e8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c7f6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c7fa:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800c7fc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c800:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c804:	781a      	ldrb	r2, [r3, #0]
 800c806:	4b3f      	ldr	r3, [pc, #252]	; (800c904 <Siemens_Data_Analyser+0x434>)
 800c808:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d015      	beq.n	800c83c <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800c810:	483d      	ldr	r0, [pc, #244]	; (800c908 <Siemens_Data_Analyser+0x438>)
 800c812:	f018 fe41 	bl	8025498 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800c816:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c81a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	4619      	mov	r1, r3
 800c822:	483a      	ldr	r0, [pc, #232]	; (800c90c <Siemens_Data_Analyser+0x43c>)
 800c824:	f018 fd9c 	bl	8025360 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800c828:	4b36      	ldr	r3, [pc, #216]	; (800c904 <Siemens_Data_Analyser+0x434>)
 800c82a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800c82e:	4619      	mov	r1, r3
 800c830:	4837      	ldr	r0, [pc, #220]	; (800c910 <Siemens_Data_Analyser+0x440>)
 800c832:	f018 fd95 	bl	8025360 <iprintf>
		RejectPacketFlag = 1;
 800c836:	2301      	movs	r3, #1
 800c838:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800c83c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c840:	3308      	adds	r3, #8
 800c842:	2b00      	cmp	r3, #0
 800c844:	da00      	bge.n	800c848 <Siemens_Data_Analyser+0x378>
 800c846:	3307      	adds	r3, #7
 800c848:	10db      	asrs	r3, r3, #3
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c850:	4413      	add	r3, r2
 800c852:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c856:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c85a:	3308      	adds	r3, #8
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	b21b      	sxth	r3, r3
 800c860:	425a      	negs	r2, r3
 800c862:	f003 0307 	and.w	r3, r3, #7
 800c866:	f002 0207 	and.w	r2, r2, #7
 800c86a:	bf58      	it	pl
 800c86c:	4253      	negpl	r3, r2
 800c86e:	b21b      	sxth	r3, r3
 800c870:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800c874:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c878:	b2d8      	uxtb	r0, r3
 800c87a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c87e:	f107 020c 	add.w	r2, r7, #12
 800c882:	441a      	add	r2, r3
 800c884:	2300      	movs	r3, #0
 800c886:	2118      	movs	r1, #24
 800c888:	f001 ffec 	bl	800e864 <Extract_Parity_Data>
 800c88c:	4603      	mov	r3, r0
 800c88e:	461a      	mov	r2, r3
 800c890:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c894:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c898:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800c89a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c89e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a8:	d036      	beq.n	800c918 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800c8aa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c8ae:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800c8b2:	4a18      	ldr	r2, [pc, #96]	; (800c914 <Siemens_Data_Analyser+0x444>)
 800c8b4:	8812      	ldrh	r2, [r2, #0]
 800c8b6:	801a      	strh	r2, [r3, #0]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800c8bc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c8c0:	f107 020c 	add.w	r2, r7, #12
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f107 0208 	add.w	r2, r7, #8
 800c8ca:	2103      	movs	r1, #3
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fd4d 	bl	800d36c <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800c8d2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c8d6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c8da:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800c8de:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800c8e2:	3308      	adds	r3, #8
 800c8e4:	6812      	ldr	r2, [r2, #0]
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	8019      	strh	r1, [r3, #0]
 800c8ea:	3302      	adds	r3, #2
 800c8ec:	0c12      	lsrs	r2, r2, #16
 800c8ee:	701a      	strb	r2, [r3, #0]
 800c8f0:	e015      	b.n	800c91e <Siemens_Data_Analyser+0x44e>
 800c8f2:	bf00      	nop
 800c8f4:	20003968 	.word	0x20003968
 800c8f8:	08028d08 	.word	0x08028d08
 800c8fc:	2000a9e0 	.word	0x2000a9e0
 800c900:	80808081 	.word	0x80808081
 800c904:	20000304 	.word	0x20000304
 800c908:	08028d28 	.word	0x08028d28
 800c90c:	08028d4c 	.word	0x08028d4c
 800c910:	08028d5c 	.word	0x08028d5c
 800c914:	08028ee0 	.word	0x08028ee0
	}
	else
	{
		RejectPacketFlag = 1;
 800c918:	2301      	movs	r3, #1
 800c91a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800c91e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c922:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	4bbf      	ldr	r3, [pc, #764]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800c92a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800c92e:	429a      	cmp	r2, r3
 800c930:	d015      	beq.n	800c95e <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800c932:	48be      	ldr	r0, [pc, #760]	; (800cc2c <Siemens_Data_Analyser+0x75c>)
 800c934:	f018 fdb0 	bl	8025498 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800c938:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c93c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	4619      	mov	r1, r3
 800c944:	48ba      	ldr	r0, [pc, #744]	; (800cc30 <Siemens_Data_Analyser+0x760>)
 800c946:	f018 fd0b 	bl	8025360 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800c94a:	4bb7      	ldr	r3, [pc, #732]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800c94c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800c950:	4619      	mov	r1, r3
 800c952:	48b8      	ldr	r0, [pc, #736]	; (800cc34 <Siemens_Data_Analyser+0x764>)
 800c954:	f018 fd04 	bl	8025360 <iprintf>
		RejectPacketFlag = 1;
 800c958:	2301      	movs	r3, #1
 800c95a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800c95e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c962:	3318      	adds	r3, #24
 800c964:	2b00      	cmp	r3, #0
 800c966:	da00      	bge.n	800c96a <Siemens_Data_Analyser+0x49a>
 800c968:	3307      	adds	r3, #7
 800c96a:	10db      	asrs	r3, r3, #3
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c972:	4413      	add	r3, r2
 800c974:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c978:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c97c:	3318      	adds	r3, #24
 800c97e:	b29b      	uxth	r3, r3
 800c980:	b21b      	sxth	r3, r3
 800c982:	425a      	negs	r2, r3
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	f002 0207 	and.w	r2, r2, #7
 800c98c:	bf58      	it	pl
 800c98e:	4253      	negpl	r3, r2
 800c990:	b21b      	sxth	r3, r3
 800c992:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800c996:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c99a:	b2d8      	uxtb	r0, r3
 800c99c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c9a0:	f107 020c 	add.w	r2, r7, #12
 800c9a4:	441a      	add	r2, r3
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	2108      	movs	r1, #8
 800c9aa:	f001 ff5b 	bl	800e864 <Extract_Parity_Data>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c9b6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c9ba:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c9bc:	4b9e      	ldr	r3, [pc, #632]	; (800cc38 <Siemens_Data_Analyser+0x768>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	085b      	lsrs	r3, r3, #1
 800c9c2:	f003 0301 	and.w	r3, r3, #1
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d02a      	beq.n	800ca20 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800c9ca:	489c      	ldr	r0, [pc, #624]	; (800cc3c <Siemens_Data_Analyser+0x76c>)
 800c9cc:	f018 fd64 	bl	8025498 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c9d0:	489b      	ldr	r0, [pc, #620]	; (800cc40 <Siemens_Data_Analyser+0x770>)
 800c9d2:	f010 f96d 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800c9d6:	4601      	mov	r1, r0
 800c9d8:	4b9a      	ldr	r3, [pc, #616]	; (800cc44 <Siemens_Data_Analyser+0x774>)
 800c9da:	fba3 2301 	umull	r2, r3, r3, r1
 800c9de:	09da      	lsrs	r2, r3, #7
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	021b      	lsls	r3, r3, #8
 800c9e4:	1a9b      	subs	r3, r3, r2
 800c9e6:	1aca      	subs	r2, r1, r3
 800c9e8:	b2d2      	uxtb	r2, r2
 800c9ea:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c9ee:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c9f2:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800c9f4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c9f8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c9fc:	7b1a      	ldrb	r2, [r3, #12]
 800c9fe:	4b8a      	ldr	r3, [pc, #552]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800ca00:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d10b      	bne.n	800ca20 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800ca08:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ca0c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ca10:	7b1b      	ldrb	r3, [r3, #12]
 800ca12:	3304      	adds	r3, #4
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ca1a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ca1e:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800ca20:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ca24:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ca28:	7b1a      	ldrb	r2, [r3, #12]
 800ca2a:	4b7f      	ldr	r3, [pc, #508]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800ca2c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d015      	beq.n	800ca60 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800ca34:	4884      	ldr	r0, [pc, #528]	; (800cc48 <Siemens_Data_Analyser+0x778>)
 800ca36:	f018 fd2f 	bl	8025498 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800ca3a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ca3e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ca42:	7b1b      	ldrb	r3, [r3, #12]
 800ca44:	4619      	mov	r1, r3
 800ca46:	4881      	ldr	r0, [pc, #516]	; (800cc4c <Siemens_Data_Analyser+0x77c>)
 800ca48:	f018 fc8a 	bl	8025360 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800ca4c:	4b76      	ldr	r3, [pc, #472]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800ca4e:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ca52:	4619      	mov	r1, r3
 800ca54:	487e      	ldr	r0, [pc, #504]	; (800cc50 <Siemens_Data_Analyser+0x780>)
 800ca56:	f018 fc83 	bl	8025360 <iprintf>
		RejectPacketFlag = 1;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800ca60:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ca64:	3308      	adds	r3, #8
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	da00      	bge.n	800ca6c <Siemens_Data_Analyser+0x59c>
 800ca6a:	3307      	adds	r3, #7
 800ca6c:	10db      	asrs	r3, r3, #3
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ca74:	4413      	add	r3, r2
 800ca76:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ca7a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ca7e:	3308      	adds	r3, #8
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	b21b      	sxth	r3, r3
 800ca84:	425a      	negs	r2, r3
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	f002 0207 	and.w	r2, r2, #7
 800ca8e:	bf58      	it	pl
 800ca90:	4253      	negpl	r3, r2
 800ca92:	b21b      	sxth	r3, r3
 800ca94:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800ca98:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ca9c:	b2d8      	uxtb	r0, r3
 800ca9e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800caa2:	f107 020c 	add.w	r2, r7, #12
 800caa6:	441a      	add	r2, r3
 800caa8:	2300      	movs	r3, #0
 800caaa:	2118      	movs	r1, #24
 800caac:	f001 feda 	bl	800e864 <Extract_Parity_Data>
 800cab0:	4603      	mov	r3, r0
 800cab2:	461a      	mov	r2, r3
 800cab4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cab8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cabc:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800cabe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cac2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cacc:	d021      	beq.n	800cb12 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800cace:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cad2:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800cad6:	4a5f      	ldr	r2, [pc, #380]	; (800cc54 <Siemens_Data_Analyser+0x784>)
 800cad8:	8812      	ldrh	r2, [r2, #0]
 800cada:	801a      	strh	r2, [r3, #0]
 800cadc:	2200      	movs	r2, #0
 800cade:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800cae0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cae4:	f107 020c 	add.w	r2, r7, #12
 800cae8:	4413      	add	r3, r2
 800caea:	1d3a      	adds	r2, r7, #4
 800caec:	2103      	movs	r1, #3
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fc3c 	bl	800d36c <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800caf4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800caf8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cafc:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800cb00:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800cb04:	3314      	adds	r3, #20
 800cb06:	6812      	ldr	r2, [r2, #0]
 800cb08:	4611      	mov	r1, r2
 800cb0a:	8019      	strh	r1, [r3, #0]
 800cb0c:	3302      	adds	r3, #2
 800cb0e:	0c12      	lsrs	r2, r2, #16
 800cb10:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cb12:	4b49      	ldr	r3, [pc, #292]	; (800cc38 <Siemens_Data_Analyser+0x768>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	089b      	lsrs	r3, r3, #2
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d02c      	beq.n	800cb7a <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800cb20:	484d      	ldr	r0, [pc, #308]	; (800cc58 <Siemens_Data_Analyser+0x788>)
 800cb22:	f018 fcb9 	bl	8025498 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800cb26:	4846      	ldr	r0, [pc, #280]	; (800cc40 <Siemens_Data_Analyser+0x770>)
 800cb28:	f010 f8c2 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800cb2c:	4601      	mov	r1, r0
 800cb2e:	f240 1301 	movw	r3, #257	; 0x101
 800cb32:	fba3 2301 	umull	r2, r3, r3, r1
 800cb36:	1aca      	subs	r2, r1, r3
 800cb38:	0852      	lsrs	r2, r2, #1
 800cb3a:	4413      	add	r3, r2
 800cb3c:	0dda      	lsrs	r2, r3, #23
 800cb3e:	4613      	mov	r3, r2
 800cb40:	061b      	lsls	r3, r3, #24
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	1aca      	subs	r2, r1, r3
 800cb46:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb4a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb4e:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800cb50:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb54:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb58:	695a      	ldr	r2, [r3, #20]
 800cb5a:	4b33      	ldr	r3, [pc, #204]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800cb5c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d10a      	bne.n	800cb7a <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800cb64:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb68:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	1d1a      	adds	r2, r3, #4
 800cb70:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb74:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb78:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800cb7a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb7e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb82:	695a      	ldr	r2, [r3, #20]
 800cb84:	4b28      	ldr	r3, [pc, #160]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800cb86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d015      	beq.n	800cbba <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800cb8e:	4833      	ldr	r0, [pc, #204]	; (800cc5c <Siemens_Data_Analyser+0x78c>)
 800cb90:	f018 fc82 	bl	8025498 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800cb94:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb98:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4823      	ldr	r0, [pc, #140]	; (800cc30 <Siemens_Data_Analyser+0x760>)
 800cba2:	f018 fbdd 	bl	8025360 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800cba6:	4b20      	ldr	r3, [pc, #128]	; (800cc28 <Siemens_Data_Analyser+0x758>)
 800cba8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cbac:	4619      	mov	r1, r3
 800cbae:	4821      	ldr	r0, [pc, #132]	; (800cc34 <Siemens_Data_Analyser+0x764>)
 800cbb0:	f018 fbd6 	bl	8025360 <iprintf>
		RejectPacketFlag = 1;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800cbba:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cbbe:	3318      	adds	r3, #24
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	da00      	bge.n	800cbc6 <Siemens_Data_Analyser+0x6f6>
 800cbc4:	3307      	adds	r3, #7
 800cbc6:	10db      	asrs	r3, r3, #3
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cbce:	4413      	add	r3, r2
 800cbd0:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cbd4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cbd8:	3318      	adds	r3, #24
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	b21b      	sxth	r3, r3
 800cbde:	425a      	negs	r2, r3
 800cbe0:	f003 0307 	and.w	r3, r3, #7
 800cbe4:	f002 0207 	and.w	r2, r2, #7
 800cbe8:	bf58      	it	pl
 800cbea:	4253      	negpl	r3, r2
 800cbec:	b21b      	sxth	r3, r3
 800cbee:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800cbf2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cbf6:	b2d8      	uxtb	r0, r3
 800cbf8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cbfc:	f107 020c 	add.w	r2, r7, #12
 800cc00:	441a      	add	r2, r3
 800cc02:	2300      	movs	r3, #0
 800cc04:	2108      	movs	r1, #8
 800cc06:	f001 fe2d 	bl	800e864 <Extract_Parity_Data>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc12:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc16:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800cc18:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cc1c:	3308      	adds	r3, #8
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	da1e      	bge.n	800cc60 <Siemens_Data_Analyser+0x790>
 800cc22:	3307      	adds	r3, #7
 800cc24:	e01c      	b.n	800cc60 <Siemens_Data_Analyser+0x790>
 800cc26:	bf00      	nop
 800cc28:	20000304 	.word	0x20000304
 800cc2c:	08028d6c 	.word	0x08028d6c
 800cc30:	08028d8c 	.word	0x08028d8c
 800cc34:	08028d9c 	.word	0x08028d9c
 800cc38:	20003968 	.word	0x20003968
 800cc3c:	08028dac 	.word	0x08028dac
 800cc40:	2000a9e0 	.word	0x2000a9e0
 800cc44:	80808081 	.word	0x80808081
 800cc48:	08028dcc 	.word	0x08028dcc
 800cc4c:	08028d4c 	.word	0x08028d4c
 800cc50:	08028d5c 	.word	0x08028d5c
 800cc54:	08028ee0 	.word	0x08028ee0
 800cc58:	08028dec 	.word	0x08028dec
 800cc5c:	08028e08 	.word	0x08028e08
 800cc60:	10db      	asrs	r3, r3, #3
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cc68:	4413      	add	r3, r2
 800cc6a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cc6e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cc72:	3308      	adds	r3, #8
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	b21b      	sxth	r3, r3
 800cc78:	425a      	negs	r2, r3
 800cc7a:	f003 0307 	and.w	r3, r3, #7
 800cc7e:	f002 0207 	and.w	r2, r2, #7
 800cc82:	bf58      	it	pl
 800cc84:	4253      	negpl	r3, r2
 800cc86:	b21b      	sxth	r3, r3
 800cc88:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800cc8c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cc90:	b2d8      	uxtb	r0, r3
 800cc92:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cc96:	f107 020c 	add.w	r2, r7, #12
 800cc9a:	441a      	add	r2, r3
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	2108      	movs	r1, #8
 800cca0:	f001 fde0 	bl	800e864 <Extract_Parity_Data>
 800cca4:	4603      	mov	r3, r0
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ccac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ccb0:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800ccb2:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ccb6:	3308      	adds	r3, #8
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	da00      	bge.n	800ccbe <Siemens_Data_Analyser+0x7ee>
 800ccbc:	3307      	adds	r3, #7
 800ccbe:	10db      	asrs	r3, r3, #3
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ccc6:	4413      	add	r3, r2
 800ccc8:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cccc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	b21b      	sxth	r3, r3
 800ccd6:	425a      	negs	r2, r3
 800ccd8:	f003 0307 	and.w	r3, r3, #7
 800ccdc:	f002 0207 	and.w	r2, r2, #7
 800cce0:	bf58      	it	pl
 800cce2:	4253      	negpl	r3, r2
 800cce4:	b21b      	sxth	r3, r3
 800cce6:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800ccea:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ccee:	b2d8      	uxtb	r0, r3
 800ccf0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ccf4:	f107 020c 	add.w	r2, r7, #12
 800ccf8:	441a      	add	r2, r3
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	2108      	movs	r1, #8
 800ccfe:	f001 fdb1 	bl	800e864 <Extract_Parity_Data>
 800cd02:	4603      	mov	r3, r0
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd0a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd0e:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd10:	4bab      	ldr	r3, [pc, #684]	; (800cfc0 <Siemens_Data_Analyser+0xaf0>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	08db      	lsrs	r3, r3, #3
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d02a      	beq.n	800cd74 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800cd1e:	48a9      	ldr	r0, [pc, #676]	; (800cfc4 <Siemens_Data_Analyser+0xaf4>)
 800cd20:	f018 fbba 	bl	8025498 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800cd24:	48a8      	ldr	r0, [pc, #672]	; (800cfc8 <Siemens_Data_Analyser+0xaf8>)
 800cd26:	f00f ffc3 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800cd2a:	4601      	mov	r1, r0
 800cd2c:	4ba7      	ldr	r3, [pc, #668]	; (800cfcc <Siemens_Data_Analyser+0xafc>)
 800cd2e:	fba3 2301 	umull	r2, r3, r3, r1
 800cd32:	09da      	lsrs	r2, r3, #7
 800cd34:	4613      	mov	r3, r2
 800cd36:	021b      	lsls	r3, r3, #8
 800cd38:	1a9b      	subs	r3, r3, r2
 800cd3a:	1aca      	subs	r2, r1, r3
 800cd3c:	b2d2      	uxtb	r2, r2
 800cd3e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd42:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd46:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800cd48:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd4c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd50:	7e9a      	ldrb	r2, [r3, #26]
 800cd52:	4b9f      	ldr	r3, [pc, #636]	; (800cfd0 <Siemens_Data_Analyser+0xb00>)
 800cd54:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d10b      	bne.n	800cd74 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800cd5c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd60:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd64:	7e9b      	ldrb	r3, [r3, #26]
 800cd66:	3304      	adds	r3, #4
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd6e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd72:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800cd74:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd7c:	7e9a      	ldrb	r2, [r3, #26]
 800cd7e:	4b94      	ldr	r3, [pc, #592]	; (800cfd0 <Siemens_Data_Analyser+0xb00>)
 800cd80:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d015      	beq.n	800cdb4 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800cd88:	4892      	ldr	r0, [pc, #584]	; (800cfd4 <Siemens_Data_Analyser+0xb04>)
 800cd8a:	f018 fb85 	bl	8025498 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800cd8e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd92:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd96:	7e9b      	ldrb	r3, [r3, #26]
 800cd98:	4619      	mov	r1, r3
 800cd9a:	488f      	ldr	r0, [pc, #572]	; (800cfd8 <Siemens_Data_Analyser+0xb08>)
 800cd9c:	f018 fae0 	bl	8025360 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800cda0:	4b8b      	ldr	r3, [pc, #556]	; (800cfd0 <Siemens_Data_Analyser+0xb00>)
 800cda2:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800cda6:	4619      	mov	r1, r3
 800cda8:	488c      	ldr	r0, [pc, #560]	; (800cfdc <Siemens_Data_Analyser+0xb0c>)
 800cdaa:	f018 fad9 	bl	8025360 <iprintf>
		RejectPacketFlag = 1;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800cdb4:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cdb8:	3308      	adds	r3, #8
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	da00      	bge.n	800cdc0 <Siemens_Data_Analyser+0x8f0>
 800cdbe:	3307      	adds	r3, #7
 800cdc0:	10db      	asrs	r3, r3, #3
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cdc8:	4413      	add	r3, r2
 800cdca:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cdce:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cdd2:	3308      	adds	r3, #8
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	b21b      	sxth	r3, r3
 800cdd8:	425a      	negs	r2, r3
 800cdda:	f003 0307 	and.w	r3, r3, #7
 800cdde:	f002 0207 	and.w	r2, r2, #7
 800cde2:	bf58      	it	pl
 800cde4:	4253      	negpl	r3, r2
 800cde6:	b21b      	sxth	r3, r3
 800cde8:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800cdec:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cdf0:	b2d8      	uxtb	r0, r3
 800cdf2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cdf6:	f107 020c 	add.w	r2, r7, #12
 800cdfa:	441a      	add	r2, r3
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	2108      	movs	r1, #8
 800ce00:	f001 fd30 	bl	800e864 <Extract_Parity_Data>
 800ce04:	4603      	mov	r3, r0
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce0c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce10:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ce12:	4b6b      	ldr	r3, [pc, #428]	; (800cfc0 <Siemens_Data_Analyser+0xaf0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	091b      	lsrs	r3, r3, #4
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d02a      	beq.n	800ce76 <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800ce20:	486f      	ldr	r0, [pc, #444]	; (800cfe0 <Siemens_Data_Analyser+0xb10>)
 800ce22:	f018 fb39 	bl	8025498 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800ce26:	4868      	ldr	r0, [pc, #416]	; (800cfc8 <Siemens_Data_Analyser+0xaf8>)
 800ce28:	f00f ff42 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	4b67      	ldr	r3, [pc, #412]	; (800cfcc <Siemens_Data_Analyser+0xafc>)
 800ce30:	fba3 2301 	umull	r2, r3, r3, r1
 800ce34:	09da      	lsrs	r2, r3, #7
 800ce36:	4613      	mov	r3, r2
 800ce38:	021b      	lsls	r3, r3, #8
 800ce3a:	1a9b      	subs	r3, r3, r2
 800ce3c:	1aca      	subs	r2, r1, r3
 800ce3e:	b2d2      	uxtb	r2, r2
 800ce40:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce44:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce48:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800ce4a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce4e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce52:	7eda      	ldrb	r2, [r3, #27]
 800ce54:	4b5e      	ldr	r3, [pc, #376]	; (800cfd0 <Siemens_Data_Analyser+0xb00>)
 800ce56:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d10b      	bne.n	800ce76 <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800ce5e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce62:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce66:	7edb      	ldrb	r3, [r3, #27]
 800ce68:	3304      	adds	r3, #4
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce70:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce74:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800ce76:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce7a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce7e:	7eda      	ldrb	r2, [r3, #27]
 800ce80:	4b53      	ldr	r3, [pc, #332]	; (800cfd0 <Siemens_Data_Analyser+0xb00>)
 800ce82:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d015      	beq.n	800ceb6 <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800ce8a:	4856      	ldr	r0, [pc, #344]	; (800cfe4 <Siemens_Data_Analyser+0xb14>)
 800ce8c:	f018 fb04 	bl	8025498 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800ce90:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce94:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce98:	7edb      	ldrb	r3, [r3, #27]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	484e      	ldr	r0, [pc, #312]	; (800cfd8 <Siemens_Data_Analyser+0xb08>)
 800ce9e:	f018 fa5f 	bl	8025360 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800cea2:	4b4b      	ldr	r3, [pc, #300]	; (800cfd0 <Siemens_Data_Analyser+0xb00>)
 800cea4:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800cea8:	4619      	mov	r1, r3
 800ceaa:	484c      	ldr	r0, [pc, #304]	; (800cfdc <Siemens_Data_Analyser+0xb0c>)
 800ceac:	f018 fa58 	bl	8025360 <iprintf>
		RejectPacketFlag = 1;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800ceb6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ceba:	3308      	adds	r3, #8
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da00      	bge.n	800cec2 <Siemens_Data_Analyser+0x9f2>
 800cec0:	3307      	adds	r3, #7
 800cec2:	10db      	asrs	r3, r3, #3
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ceca:	4413      	add	r3, r2
 800cecc:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ced0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ced4:	3308      	adds	r3, #8
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	b21b      	sxth	r3, r3
 800ceda:	425a      	negs	r2, r3
 800cedc:	f003 0307 	and.w	r3, r3, #7
 800cee0:	f002 0207 	and.w	r2, r2, #7
 800cee4:	bf58      	it	pl
 800cee6:	4253      	negpl	r3, r2
 800cee8:	b21b      	sxth	r3, r3
 800ceea:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800ceee:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cef2:	b2d8      	uxtb	r0, r3
 800cef4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cef8:	f107 020c 	add.w	r2, r7, #12
 800cefc:	441a      	add	r2, r3
 800cefe:	2302      	movs	r3, #2
 800cf00:	2120      	movs	r1, #32
 800cf02:	f001 fcaf 	bl	800e864 <Extract_Parity_Data>
 800cf06:	4603      	mov	r3, r0
 800cf08:	461a      	mov	r2, r3
 800cf0a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf0e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf12:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800cf14:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cf18:	3320      	adds	r3, #32
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	da00      	bge.n	800cf20 <Siemens_Data_Analyser+0xa50>
 800cf1e:	3307      	adds	r3, #7
 800cf20:	10db      	asrs	r3, r3, #3
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cf28:	4413      	add	r3, r2
 800cf2a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cf2e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cf32:	3320      	adds	r3, #32
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	b21b      	sxth	r3, r3
 800cf38:	425a      	negs	r2, r3
 800cf3a:	f003 0307 	and.w	r3, r3, #7
 800cf3e:	f002 0207 	and.w	r2, r2, #7
 800cf42:	bf58      	it	pl
 800cf44:	4253      	negpl	r3, r2
 800cf46:	b21b      	sxth	r3, r3
 800cf48:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800cf4c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cf50:	b2d8      	uxtb	r0, r3
 800cf52:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cf56:	f107 020c 	add.w	r2, r7, #12
 800cf5a:	441a      	add	r2, r3
 800cf5c:	2302      	movs	r3, #2
 800cf5e:	2120      	movs	r1, #32
 800cf60:	f001 fc80 	bl	800e864 <Extract_Parity_Data>
 800cf64:	4603      	mov	r3, r0
 800cf66:	461a      	mov	r2, r3
 800cf68:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf6c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf70:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800cf72:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cf76:	3320      	adds	r3, #32
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	da00      	bge.n	800cf7e <Siemens_Data_Analyser+0xaae>
 800cf7c:	3307      	adds	r3, #7
 800cf7e:	10db      	asrs	r3, r3, #3
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cf86:	4413      	add	r3, r2
 800cf88:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cf8c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cf90:	3320      	adds	r3, #32
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	b21b      	sxth	r3, r3
 800cf96:	425a      	negs	r2, r3
 800cf98:	f003 0307 	and.w	r3, r3, #7
 800cf9c:	f002 0207 	and.w	r2, r2, #7
 800cfa0:	bf58      	it	pl
 800cfa2:	4253      	negpl	r3, r2
 800cfa4:	b21b      	sxth	r3, r3
 800cfa6:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800cfb0:	200a      	movs	r0, #10
 800cfb2:	f018 f9ed 	bl	8025390 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800cfb6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cfba:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800cfbe:	e052      	b.n	800d066 <Siemens_Data_Analyser+0xb96>
 800cfc0:	20003968 	.word	0x20003968
 800cfc4:	08028e24 	.word	0x08028e24
 800cfc8:	2000a9e0 	.word	0x2000a9e0
 800cfcc:	80808081 	.word	0x80808081
 800cfd0:	20000304 	.word	0x20000304
 800cfd4:	08028e40 	.word	0x08028e40
 800cfd8:	08028d4c 	.word	0x08028d4c
 800cfdc:	08028d5c 	.word	0x08028d5c
 800cfe0:	08028e60 	.word	0x08028e60
 800cfe4:	08028e7c 	.word	0x08028e7c
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800cfe8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cfec:	b2d8      	uxtb	r0, r3
 800cfee:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800cff2:	f107 020c 	add.w	r2, r7, #12
 800cff6:	441a      	add	r2, r3
 800cff8:	2300      	movs	r3, #0
 800cffa:	2108      	movs	r1, #8
 800cffc:	f001 fc32 	bl	800e864 <Extract_Parity_Data>
 800d000:	4601      	mov	r1, r0
 800d002:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800d00c:	461a      	mov	r2, r3
 800d00e:	b2c9      	uxtb	r1, r1
 800d010:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d014:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d018:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800d01a:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800d01e:	3301      	adds	r3, #1
 800d020:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800d024:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d028:	3308      	adds	r3, #8
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	da00      	bge.n	800d030 <Siemens_Data_Analyser+0xb60>
 800d02e:	3307      	adds	r3, #7
 800d030:	10db      	asrs	r3, r3, #3
 800d032:	b29a      	uxth	r2, r3
 800d034:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d038:	4413      	add	r3, r2
 800d03a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d03e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d042:	3308      	adds	r3, #8
 800d044:	b29b      	uxth	r3, r3
 800d046:	b21b      	sxth	r3, r3
 800d048:	425a      	negs	r2, r3
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	f002 0207 	and.w	r2, r2, #7
 800d052:	bf58      	it	pl
 800d054:	4253      	negpl	r3, r2
 800d056:	b21b      	sxth	r3, r3
 800d058:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d05c:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d060:	3301      	adds	r3, #1
 800d062:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d066:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800d070:	429a      	cmp	r2, r3
 800d072:	d8b9      	bhi.n	800cfe8 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800d074:	200a      	movs	r0, #10
 800d076:	f018 f98b 	bl	8025390 <putchar>


	//	printf("App_data_Size:%u\n",App_data_Size);
	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800d07a:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d07e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d082:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800d086:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 f96e 	bl	800d36c <ExtractAppData>
 800d090:	4603      	mov	r3, r0
 800d092:	461a      	mov	r2, r3
 800d094:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d098:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d09c:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800d09e:	4ba0      	ldr	r3, [pc, #640]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d0a0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d0a4:	f003 0307 	and.w	r3, r3, #7
 800d0a8:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800d0ac:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d008      	beq.n	800d0c6 <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800d0b4:	4b9a      	ldr	r3, [pc, #616]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d0b6:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d0ba:	08db      	lsrs	r3, r3, #3
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	3301      	adds	r3, #1
 800d0c0:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800d0c4:	e005      	b.n	800d0d2 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800d0c6:	4b96      	ldr	r3, [pc, #600]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d0c8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d0cc:	08db      	lsrs	r3, r3, #3
 800d0ce:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800d0d2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0d6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d0dc:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d02c      	beq.n	800d13e <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800d0e4:	488f      	ldr	r0, [pc, #572]	; (800d324 <Siemens_Data_Analyser+0xe54>)
 800d0e6:	f018 f9d7 	bl	8025498 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800d0ea:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0ee:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	488c      	ldr	r0, [pc, #560]	; (800d328 <Siemens_Data_Analyser+0xe58>)
 800d0f8:	f018 f932 	bl	8025360 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800d0fc:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d100:	4619      	mov	r1, r3
 800d102:	488a      	ldr	r0, [pc, #552]	; (800d32c <Siemens_Data_Analyser+0xe5c>)
 800d104:	f018 f92c 	bl	8025360 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800d108:	4989      	ldr	r1, [pc, #548]	; (800d330 <Siemens_Data_Analyser+0xe60>)
 800d10a:	488a      	ldr	r0, [pc, #552]	; (800d334 <Siemens_Data_Analyser+0xe64>)
 800d10c:	f7f3 f898 	bl	8000240 <strcmp>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800d116:	2301      	movs	r3, #1
 800d118:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800d11c:	4984      	ldr	r1, [pc, #528]	; (800d330 <Siemens_Data_Analyser+0xe60>)
 800d11e:	4885      	ldr	r0, [pc, #532]	; (800d334 <Siemens_Data_Analyser+0xe64>)
 800d120:	f7f3 f88e 	bl	8000240 <strcmp>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d109      	bne.n	800d13e <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800d12a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d12e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d132:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	b29a      	uxth	r2, r3
 800d138:	4b79      	ldr	r3, [pc, #484]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d13a:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800d13e:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800d142:	2b01      	cmp	r3, #1
 800d144:	f000 80e6 	beq.w	800d314 <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800d148:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800d14c:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d150:	3326      	adds	r3, #38	; 0x26
 800d152:	4619      	mov	r1, r3
 800d154:	2000      	movs	r0, #0
 800d156:	f007 faf3 	bl	8014740 <GetCRC16>
 800d15a:	4603      	mov	r3, r0
 800d15c:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800d160:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d164:	f107 020c 	add.w	r2, r7, #12
 800d168:	4413      	add	r3, r2
 800d16a:	461a      	mov	r2, r3
 800d16c:	2110      	movs	r1, #16
 800d16e:	2000      	movs	r0, #0
 800d170:	f7f3 fa50 	bl	8000614 <ExtractBits>
 800d174:	4603      	mov	r3, r0
 800d176:	b29a      	uxth	r2, r3
 800d178:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d17c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d180:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800d184:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d188:	2100      	movs	r1, #0
 800d18a:	486b      	ldr	r0, [pc, #428]	; (800d338 <Siemens_Data_Analyser+0xe68>)
 800d18c:	f018 f800 	bl	8025190 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800d190:	4a69      	ldr	r2, [pc, #420]	; (800d338 <Siemens_Data_Analyser+0xe68>)
 800d192:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d196:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d19a:	4610      	mov	r0, r2
 800d19c:	4619      	mov	r1, r3
 800d19e:	f44f 730a 	mov.w	r3, #552	; 0x228
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f017 ffcc 	bl	8025140 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800d1a8:	f000 f936 	bl	800d418 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d1ac:	4b63      	ldr	r3, [pc, #396]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d1ae:	881b      	ldrh	r3, [r3, #0]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	4b5b      	ldr	r3, [pc, #364]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d1b4:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	bfb8      	it	lt
 800d1be:	425b      	neglt	r3, r3
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	4b57      	ldr	r3, [pc, #348]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d1c4:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d871      	bhi.n	800d2b0 <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800d1cc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1d0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1d4:	69da      	ldr	r2, [r3, #28]
 800d1d6:	4b5a      	ldr	r3, [pc, #360]	; (800d340 <Siemens_Data_Analyser+0xe70>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d04c      	beq.n	800d278 <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800d1de:	f00b f8b5 	bl	801834c <HAL_GetTick>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	4a57      	ldr	r2, [pc, #348]	; (800d344 <Siemens_Data_Analyser+0xe74>)
 800d1e6:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800d1e8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1ec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	4a53      	ldr	r2, [pc, #332]	; (800d340 <Siemens_Data_Analyser+0xe70>)
 800d1f4:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800d1f6:	4b51      	ldr	r3, [pc, #324]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800d1fc:	4b52      	ldr	r3, [pc, #328]	; (800d348 <Siemens_Data_Analyser+0xe78>)
 800d1fe:	885b      	ldrh	r3, [r3, #2]
 800d200:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800d204:	429a      	cmp	r2, r3
 800d206:	d053      	beq.n	800d2b0 <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800d208:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d20c:	2100      	movs	r1, #0
 800d20e:	484e      	ldr	r0, [pc, #312]	; (800d348 <Siemens_Data_Analyser+0xe78>)
 800d210:	f017 ffbe 	bl	8025190 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800d214:	f240 2202 	movw	r2, #514	; 0x202
 800d218:	2100      	movs	r1, #0
 800d21a:	484c      	ldr	r0, [pc, #304]	; (800d34c <Siemens_Data_Analyser+0xe7c>)
 800d21c:	f017 ffb8 	bl	8025190 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800d220:	4a49      	ldr	r2, [pc, #292]	; (800d348 <Siemens_Data_Analyser+0xe78>)
 800d222:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800d226:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d228:	4b43      	ldr	r3, [pc, #268]	; (800d338 <Siemens_Data_Analyser+0xe68>)
 800d22a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d22c:	4b46      	ldr	r3, [pc, #280]	; (800d348 <Siemens_Data_Analyser+0xe78>)
 800d22e:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d230:	4b41      	ldr	r3, [pc, #260]	; (800d338 <Siemens_Data_Analyser+0xe68>)
 800d232:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d234:	461a      	mov	r2, r3
 800d236:	4946      	ldr	r1, [pc, #280]	; (800d350 <Siemens_Data_Analyser+0xe80>)
 800d238:	4846      	ldr	r0, [pc, #280]	; (800d354 <Siemens_Data_Analyser+0xe84>)
 800d23a:	f017 ff81 	bl	8025140 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d23e:	4b3e      	ldr	r3, [pc, #248]	; (800d338 <Siemens_Data_Analyser+0xe68>)
 800d240:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d242:	4b42      	ldr	r3, [pc, #264]	; (800d34c <Siemens_Data_Analyser+0xe7c>)
 800d244:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d246:	4b3c      	ldr	r3, [pc, #240]	; (800d338 <Siemens_Data_Analyser+0xe68>)
 800d248:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d24a:	461a      	mov	r2, r3
 800d24c:	4940      	ldr	r1, [pc, #256]	; (800d350 <Siemens_Data_Analyser+0xe80>)
 800d24e:	4842      	ldr	r0, [pc, #264]	; (800d358 <Siemens_Data_Analyser+0xe88>)
 800d250:	f017 ff76 	bl	8025140 <memcpy>

				if(SiemensClocks_st.MisMatchFlag == RESET)
 800d254:	4b3b      	ldr	r3, [pc, #236]	; (800d344 <Siemens_Data_Analyser+0xe74>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d103      	bne.n	800d264 <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800d25c:	f240 1019 	movw	r0, #281	; 0x119
 800d260:	f003 fac2 	bl	80107e8 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800d264:	f240 2007 	movw	r0, #519	; 0x207
 800d268:	f003 fabe 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d26c:	f00b f86e 	bl	801834c <HAL_GetTick>
 800d270:	4603      	mov	r3, r0
 800d272:	4a34      	ldr	r2, [pc, #208]	; (800d344 <Siemens_Data_Analyser+0xe74>)
 800d274:	6113      	str	r3, [r2, #16]
 800d276:	e01b      	b.n	800d2b0 <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800d278:	4b30      	ldr	r3, [pc, #192]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d27a:	881b      	ldrh	r3, [r3, #0]
 800d27c:	3301      	adds	r3, #1
 800d27e:	b29a      	uxth	r2, r3
 800d280:	4b2e      	ldr	r3, [pc, #184]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d282:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d284:	4b2d      	ldr	r3, [pc, #180]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d286:	881b      	ldrh	r3, [r3, #0]
 800d288:	461a      	mov	r2, r3
 800d28a:	4b25      	ldr	r3, [pc, #148]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d28c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d290:	429a      	cmp	r2, r3
 800d292:	d90d      	bls.n	800d2b0 <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800d294:	4b29      	ldr	r3, [pc, #164]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	4619      	mov	r1, r3
 800d29a:	4830      	ldr	r0, [pc, #192]	; (800d35c <Siemens_Data_Analyser+0xe8c>)
 800d29c:	f018 f860 	bl	8025360 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800d2a0:	4b1f      	ldr	r3, [pc, #124]	; (800d320 <Siemens_Data_Analyser+0xe50>)
 800d2a2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	4b23      	ldr	r3, [pc, #140]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d2ae:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800d2b0:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800d2b4:	f107 010c 	add.w	r1, r7, #12
 800d2b8:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800d2bc:	2302      	movs	r3, #2
 800d2be:	f000 fe43 	bl	800df48 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800d2c2:	4b27      	ldr	r3, [pc, #156]	; (800d360 <Siemens_Data_Analyser+0xe90>)
 800d2c4:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00d      	beq.n	800d2e8 <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800d2cc:	4b24      	ldr	r3, [pc, #144]	; (800d360 <Siemens_Data_Analyser+0xe90>)
 800d2ce:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4922      	ldr	r1, [pc, #136]	; (800d360 <Siemens_Data_Analyser+0xe90>)
 800d2d6:	4823      	ldr	r0, [pc, #140]	; (800d364 <Siemens_Data_Analyser+0xe94>)
 800d2d8:	f000 fe36 	bl	800df48 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800d2dc:	f240 6202 	movw	r2, #1538	; 0x602
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	481f      	ldr	r0, [pc, #124]	; (800d360 <Siemens_Data_Analyser+0xe90>)
 800d2e4:	f017 ff54 	bl	8025190 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800d2e8:	4b14      	ldr	r3, [pc, #80]	; (800d33c <Siemens_Data_Analyser+0xe6c>)
 800d2ea:	881a      	ldrh	r2, [r3, #0]
 800d2ec:	4b1e      	ldr	r3, [pc, #120]	; (800d368 <Siemens_Data_Analyser+0xe98>)
 800d2ee:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800d2f0:	4b1d      	ldr	r3, [pc, #116]	; (800d368 <Siemens_Data_Analyser+0xe98>)
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800d2f6:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <Siemens_Data_Analyser+0xe98>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800d2fc:	f240 2001 	movw	r0, #513	; 0x201
 800d300:	f003 fa72 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800d304:	f00b f822 	bl	801834c <HAL_GetTick>
 800d308:	4603      	mov	r3, r0
 800d30a:	4a0e      	ldr	r2, [pc, #56]	; (800d344 <Siemens_Data_Analyser+0xe74>)
 800d30c:	6093      	str	r3, [r2, #8]

	return;
 800d30e:	e002      	b.n	800d316 <Siemens_Data_Analyser+0xe46>
		return;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <Siemens_Data_Analyser+0xe46>
		return;
 800d314:	bf00      	nop
}
 800d316:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	20000304 	.word	0x20000304
 800d324:	08028e94 	.word	0x08028e94
 800d328:	08028d4c 	.word	0x08028d4c
 800d32c:	08028d5c 	.word	0x08028d5c
 800d330:	08028eb4 	.word	0x08028eb4
 800d334:	20000305 	.word	0x20000305
 800d338:	20002cec 	.word	0x20002cec
 800d33c:	200041ac 	.word	0x200041ac
 800d340:	200041a8 	.word	0x200041a8
 800d344:	2000397c 	.word	0x2000397c
 800d348:	20003b9c 	.word	0x20003b9c
 800d34c:	20003998 	.word	0x20003998
 800d350:	20002d12 	.word	0x20002d12
 800d354:	20003ba0 	.word	0x20003ba0
 800d358:	2000399a 	.word	0x2000399a
 800d35c:	08028ec0 	.word	0x08028ec0
 800d360:	20003364 	.word	0x20003364
 800d364:	2000313c 	.word	0x2000313c
 800d368:	20003970 	.word	0x20003970

0800d36c <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b089      	sub	sp, #36	; 0x24
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	460b      	mov	r3, r1
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800d382:	897b      	ldrh	r3, [r7, #10]
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800d388:	2300      	movs	r3, #0
 800d38a:	837b      	strh	r3, [r7, #26]
 800d38c:	e039      	b.n	800d402 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800d38e:	8b7b      	ldrh	r3, [r7, #26]
 800d390:	08db      	lsrs	r3, r3, #3
 800d392:	b29b      	uxth	r3, r3
 800d394:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800d396:	8b7b      	ldrh	r3, [r7, #26]
 800d398:	f003 0307 	and.w	r3, r3, #7
 800d39c:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2b07      	cmp	r3, #7
 800d3a2:	d02a      	beq.n	800d3fa <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	8b7b      	ldrh	r3, [r7, #26]
 800d3b0:	f003 0307 	and.w	r3, r3, #7
 800d3b4:	fa42 f303 	asr.w	r3, r2, r3
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d010      	beq.n	800d3e2 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800d3c0:	8bfb      	ldrh	r3, [r7, #30]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	b25a      	sxtb	r2, r3
 800d3ca:	7f7b      	ldrb	r3, [r7, #29]
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d3d2:	b25b      	sxtb	r3, r3
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	b259      	sxtb	r1, r3
 800d3d8:	8bfb      	ldrh	r3, [r7, #30]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	4413      	add	r3, r2
 800d3de:	b2ca      	uxtb	r2, r1
 800d3e0:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800d3e2:	7f7b      	ldrb	r3, [r7, #29]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800d3e8:	7f7b      	ldrb	r3, [r7, #29]
 800d3ea:	2b08      	cmp	r3, #8
 800d3ec:	d106      	bne.n	800d3fc <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800d3f2:	8bfb      	ldrh	r3, [r7, #30]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	83fb      	strh	r3, [r7, #30]
 800d3f8:	e000      	b.n	800d3fc <ExtractAppData+0x90>
			continue;
 800d3fa:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800d3fc:	8b7b      	ldrh	r3, [r7, #26]
 800d3fe:	3301      	adds	r3, #1
 800d400:	837b      	strh	r3, [r7, #26]
 800d402:	8b7a      	ldrh	r2, [r7, #26]
 800d404:	8b3b      	ldrh	r3, [r7, #24]
 800d406:	429a      	cmp	r2, r3
 800d408:	d3c1      	bcc.n	800d38e <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800d40a:	8bfb      	ldrh	r3, [r7, #30]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3724      	adds	r7, #36	; 0x24
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800d418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d41c:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800d420:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800d422:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800d426:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800d42a:	2300      	movs	r3, #0
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	1d10      	adds	r0, r2, #4
 800d430:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800d434:	461a      	mov	r2, r3
 800d436:	2100      	movs	r1, #0
 800d438:	f017 feaa 	bl	8025190 <memset>
	uint16_t App_data_Traverser = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800d442:	2300      	movs	r3, #0
 800d444:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800d454:	2300      	movs	r3, #0
 800d456:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d45a:	2300      	movs	r3, #0
 800d45c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800d460:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d464:	2100      	movs	r1, #0
 800d466:	48ba      	ldr	r0, [pc, #744]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d468:	f017 fe92 	bl	8025190 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800d46c:	4bb9      	ldr	r3, [pc, #740]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d46e:	7b1b      	ldrb	r3, [r3, #12]
 800d470:	4ab7      	ldr	r2, [pc, #732]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d472:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800d474:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d478:	b2d8      	uxtb	r0, r3
 800d47a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d47e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d482:	1899      	adds	r1, r3, r2
 800d484:	4bb2      	ldr	r3, [pc, #712]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2200      	movs	r2, #0
 800d48c:	461c      	mov	r4, r3
 800d48e:	4615      	mov	r5, r2
 800d490:	2301      	movs	r3, #1
 800d492:	9302      	str	r3, [sp, #8]
 800d494:	e9cd 4500 	strd	r4, r5, [sp]
 800d498:	460a      	mov	r2, r1
 800d49a:	2108      	movs	r1, #8
 800d49c:	f001 fb24 	bl	800eae8 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d4a0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	da00      	bge.n	800d4ac <Form_Siemens_Reply+0x94>
 800d4aa:	3307      	adds	r3, #7
 800d4ac:	10db      	asrs	r3, r3, #3
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d4ba:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d4be:	3308      	adds	r3, #8
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	b21b      	sxth	r3, r3
 800d4c4:	425a      	negs	r2, r3
 800d4c6:	f003 0107 	and.w	r1, r3, #7
 800d4ca:	f002 0307 	and.w	r3, r2, #7
 800d4ce:	bf58      	it	pl
 800d4d0:	4259      	negpl	r1, r3
 800d4d2:	b20b      	sxth	r3, r1
 800d4d4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800d4d8:	4b9e      	ldr	r3, [pc, #632]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d4da:	691a      	ldr	r2, [r3, #16]
 800d4dc:	4b9c      	ldr	r3, [pc, #624]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d4de:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800d4e0:	4b9c      	ldr	r3, [pc, #624]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d4e2:	695a      	ldr	r2, [r3, #20]
 800d4e4:	4b9a      	ldr	r3, [pc, #616]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d4e6:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800d4e8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d4ec:	b2d8      	uxtb	r0, r3
 800d4ee:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d4f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d4f6:	1899      	adds	r1, r3, r2
 800d4f8:	4b95      	ldr	r3, [pc, #596]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	4698      	mov	r8, r3
 800d500:	4691      	mov	r9, r2
 800d502:	2300      	movs	r3, #0
 800d504:	9302      	str	r3, [sp, #8]
 800d506:	e9cd 8900 	strd	r8, r9, [sp]
 800d50a:	460a      	mov	r2, r1
 800d50c:	2118      	movs	r1, #24
 800d50e:	f001 faeb 	bl	800eae8 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800d512:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d516:	3318      	adds	r3, #24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	da00      	bge.n	800d51e <Form_Siemens_Reply+0x106>
 800d51c:	3307      	adds	r3, #7
 800d51e:	10db      	asrs	r3, r3, #3
 800d520:	b29a      	uxth	r2, r3
 800d522:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d526:	4413      	add	r3, r2
 800d528:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d52c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d530:	3318      	adds	r3, #24
 800d532:	b29b      	uxth	r3, r3
 800d534:	b21b      	sxth	r3, r3
 800d536:	425a      	negs	r2, r3
 800d538:	f003 0107 	and.w	r1, r3, #7
 800d53c:	f002 0307 	and.w	r3, r2, #7
 800d540:	bf58      	it	pl
 800d542:	4259      	negpl	r1, r3
 800d544:	b20b      	sxth	r3, r1
 800d546:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800d54a:	4b82      	ldr	r3, [pc, #520]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	4a80      	ldr	r2, [pc, #512]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d550:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800d552:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d556:	b2d8      	uxtb	r0, r3
 800d558:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d55c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d560:	1899      	adds	r1, r3, r2
 800d562:	4b7b      	ldr	r3, [pc, #492]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d564:	7b1b      	ldrb	r3, [r3, #12]
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2200      	movs	r2, #0
 800d56a:	469a      	mov	sl, r3
 800d56c:	4693      	mov	fp, r2
 800d56e:	2301      	movs	r3, #1
 800d570:	9302      	str	r3, [sp, #8]
 800d572:	e9cd ab00 	strd	sl, fp, [sp]
 800d576:	460a      	mov	r2, r1
 800d578:	2108      	movs	r1, #8
 800d57a:	f001 fab5 	bl	800eae8 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d57e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d582:	3308      	adds	r3, #8
 800d584:	2b00      	cmp	r3, #0
 800d586:	da00      	bge.n	800d58a <Form_Siemens_Reply+0x172>
 800d588:	3307      	adds	r3, #7
 800d58a:	10db      	asrs	r3, r3, #3
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d592:	4413      	add	r3, r2
 800d594:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d598:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d59c:	3308      	adds	r3, #8
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	b21b      	sxth	r3, r3
 800d5a2:	425a      	negs	r2, r3
 800d5a4:	f003 0107 	and.w	r1, r3, #7
 800d5a8:	f002 0307 	and.w	r3, r2, #7
 800d5ac:	bf58      	it	pl
 800d5ae:	4259      	negpl	r1, r3
 800d5b0:	b20b      	sxth	r3, r1
 800d5b2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800d5b6:	4b67      	ldr	r3, [pc, #412]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	4b65      	ldr	r3, [pc, #404]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d5bc:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800d5be:	4b65      	ldr	r3, [pc, #404]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d5c0:	689a      	ldr	r2, [r3, #8]
 800d5c2:	4b63      	ldr	r3, [pc, #396]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d5c4:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800d5c6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d5ca:	b2d8      	uxtb	r0, r3
 800d5cc:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d5d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5d4:	1899      	adds	r1, r3, r2
 800d5d6:	4b5e      	ldr	r3, [pc, #376]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	643b      	str	r3, [r7, #64]	; 0x40
 800d5de:	647a      	str	r2, [r7, #68]	; 0x44
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9302      	str	r3, [sp, #8]
 800d5e4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d5e8:	e9cd 3400 	strd	r3, r4, [sp]
 800d5ec:	460a      	mov	r2, r1
 800d5ee:	2118      	movs	r1, #24
 800d5f0:	f001 fa7a 	bl	800eae8 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800d5f4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d5f8:	3318      	adds	r3, #24
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	da00      	bge.n	800d600 <Form_Siemens_Reply+0x1e8>
 800d5fe:	3307      	adds	r3, #7
 800d600:	10db      	asrs	r3, r3, #3
 800d602:	b29a      	uxth	r2, r3
 800d604:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d608:	4413      	add	r3, r2
 800d60a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d60e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d612:	3318      	adds	r3, #24
 800d614:	b29b      	uxth	r3, r3
 800d616:	b21b      	sxth	r3, r3
 800d618:	425a      	negs	r2, r3
 800d61a:	f003 0107 	and.w	r1, r3, #7
 800d61e:	f002 0307 	and.w	r3, r2, #7
 800d622:	bf58      	it	pl
 800d624:	4259      	negpl	r1, r3
 800d626:	b20b      	sxth	r3, r1
 800d628:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	//	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
	Siemens_TX_st.ProdDataVer = Siemens_RX_st.ProdDataVer; //Self Product Version
 800d62c:	4b49      	ldr	r3, [pc, #292]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d62e:	7e1b      	ldrb	r3, [r3, #24]
 800d630:	4a47      	ldr	r2, [pc, #284]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d632:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800d634:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d638:	b2d8      	uxtb	r0, r3
 800d63a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d63e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d642:	1899      	adds	r1, r3, r2
 800d644:	4b42      	ldr	r3, [pc, #264]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d646:	7e1b      	ldrb	r3, [r3, #24]
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	2200      	movs	r2, #0
 800d64c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d64e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d650:	2300      	movs	r3, #0
 800d652:	9302      	str	r3, [sp, #8]
 800d654:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d658:	e9cd 3400 	strd	r3, r4, [sp]
 800d65c:	460a      	mov	r2, r1
 800d65e:	2108      	movs	r1, #8
 800d660:	f001 fa42 	bl	800eae8 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d664:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d668:	3308      	adds	r3, #8
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	da00      	bge.n	800d670 <Form_Siemens_Reply+0x258>
 800d66e:	3307      	adds	r3, #7
 800d670:	10db      	asrs	r3, r3, #3
 800d672:	b29a      	uxth	r2, r3
 800d674:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d678:	4413      	add	r3, r2
 800d67a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d67e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d682:	3308      	adds	r3, #8
 800d684:	b29b      	uxth	r3, r3
 800d686:	b21b      	sxth	r3, r3
 800d688:	425a      	negs	r2, r3
 800d68a:	f003 0107 	and.w	r1, r3, #7
 800d68e:	f002 0307 	and.w	r3, r2, #7
 800d692:	bf58      	it	pl
 800d694:	4259      	negpl	r1, r3
 800d696:	b20b      	sxth	r3, r1
 800d698:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800d69c:	4a2c      	ldr	r2, [pc, #176]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d69e:	2301      	movs	r3, #1
 800d6a0:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800d6a2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d6a6:	b2d8      	uxtb	r0, r3
 800d6a8:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d6ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6b0:	1899      	adds	r1, r3, r2
 800d6b2:	4b27      	ldr	r3, [pc, #156]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d6b4:	7e5b      	ldrb	r3, [r3, #25]
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	633b      	str	r3, [r7, #48]	; 0x30
 800d6bc:	637a      	str	r2, [r7, #52]	; 0x34
 800d6be:	2301      	movs	r3, #1
 800d6c0:	9302      	str	r3, [sp, #8]
 800d6c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d6c6:	e9cd 3400 	strd	r3, r4, [sp]
 800d6ca:	460a      	mov	r2, r1
 800d6cc:	2108      	movs	r1, #8
 800d6ce:	f001 fa0b 	bl	800eae8 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d6d2:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	da00      	bge.n	800d6de <Form_Siemens_Reply+0x2c6>
 800d6dc:	3307      	adds	r3, #7
 800d6de:	10db      	asrs	r3, r3, #3
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d6ec:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	b21b      	sxth	r3, r3
 800d6f6:	425a      	negs	r2, r3
 800d6f8:	f003 0307 	and.w	r3, r3, #7
 800d6fc:	f002 0207 	and.w	r2, r2, #7
 800d700:	bf58      	it	pl
 800d702:	4253      	negpl	r3, r2
 800d704:	b21b      	sxth	r3, r3
 800d706:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800d70a:	4b12      	ldr	r3, [pc, #72]	; (800d754 <Form_Siemens_Reply+0x33c>)
 800d70c:	7edb      	ldrb	r3, [r3, #27]
 800d70e:	4a10      	ldr	r2, [pc, #64]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d710:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800d712:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d716:	b2d8      	uxtb	r0, r3
 800d718:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d71c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d720:	1899      	adds	r1, r3, r2
 800d722:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <Form_Siemens_Reply+0x338>)
 800d724:	7e9b      	ldrb	r3, [r3, #26]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2200      	movs	r2, #0
 800d72a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d72c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d72e:	2302      	movs	r3, #2
 800d730:	9302      	str	r3, [sp, #8]
 800d732:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d736:	e9cd 3400 	strd	r3, r4, [sp]
 800d73a:	460a      	mov	r2, r1
 800d73c:	2108      	movs	r1, #8
 800d73e:	f001 f9d3 	bl	800eae8 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d742:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d746:	3308      	adds	r3, #8
 800d748:	2b00      	cmp	r3, #0
 800d74a:	da05      	bge.n	800d758 <Form_Siemens_Reply+0x340>
 800d74c:	3307      	adds	r3, #7
 800d74e:	e003      	b.n	800d758 <Form_Siemens_Reply+0x340>
 800d750:	20002f14 	.word	0x20002f14
 800d754:	20002cec 	.word	0x20002cec
 800d758:	10db      	asrs	r3, r3, #3
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d760:	4413      	add	r3, r2
 800d762:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d766:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d76a:	3308      	adds	r3, #8
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	b21b      	sxth	r3, r3
 800d770:	425a      	negs	r2, r3
 800d772:	f003 0307 	and.w	r3, r3, #7
 800d776:	f002 0207 	and.w	r2, r2, #7
 800d77a:	bf58      	it	pl
 800d77c:	4253      	negpl	r3, r2
 800d77e:	b21b      	sxth	r3, r3
 800d780:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800d784:	4bc4      	ldr	r3, [pc, #784]	; (800da98 <Form_Siemens_Reply+0x680>)
 800d786:	7e9a      	ldrb	r2, [r3, #26]
 800d788:	4bc4      	ldr	r3, [pc, #784]	; (800da9c <Form_Siemens_Reply+0x684>)
 800d78a:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800d78c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d790:	b2d8      	uxtb	r0, r3
 800d792:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d796:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d79a:	441a      	add	r2, r3
 800d79c:	4bbf      	ldr	r3, [pc, #764]	; (800da9c <Form_Siemens_Reply+0x684>)
 800d79e:	7edb      	ldrb	r3, [r3, #27]
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	623b      	str	r3, [r7, #32]
 800d7a6:	6279      	str	r1, [r7, #36]	; 0x24
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	9302      	str	r3, [sp, #8]
 800d7ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d7b0:	e9cd 3400 	strd	r3, r4, [sp]
 800d7b4:	2108      	movs	r1, #8
 800d7b6:	f001 f997 	bl	800eae8 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d7ba:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d7be:	3308      	adds	r3, #8
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	da00      	bge.n	800d7c6 <Form_Siemens_Reply+0x3ae>
 800d7c4:	3307      	adds	r3, #7
 800d7c6:	10db      	asrs	r3, r3, #3
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d7d4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d7d8:	3308      	adds	r3, #8
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	b21b      	sxth	r3, r3
 800d7de:	425a      	negs	r2, r3
 800d7e0:	f003 0307 	and.w	r3, r3, #7
 800d7e4:	f002 0207 	and.w	r2, r2, #7
 800d7e8:	bf58      	it	pl
 800d7ea:	4253      	negpl	r3, r2
 800d7ec:	b21b      	sxth	r3, r3
 800d7ee:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800d7f2:	4ba9      	ldr	r3, [pc, #676]	; (800da98 <Form_Siemens_Reply+0x680>)
 800d7f4:	6a1b      	ldr	r3, [r3, #32]
 800d7f6:	4aa9      	ldr	r2, [pc, #676]	; (800da9c <Form_Siemens_Reply+0x684>)
 800d7f8:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800d7fa:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d7fe:	b2d8      	uxtb	r0, r3
 800d800:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d804:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d808:	4413      	add	r3, r2
 800d80a:	4aa4      	ldr	r2, [pc, #656]	; (800da9c <Form_Siemens_Reply+0x684>)
 800d80c:	69d2      	ldr	r2, [r2, #28]
 800d80e:	2100      	movs	r1, #0
 800d810:	61ba      	str	r2, [r7, #24]
 800d812:	61f9      	str	r1, [r7, #28]
 800d814:	2202      	movs	r2, #2
 800d816:	9202      	str	r2, [sp, #8]
 800d818:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d81c:	e9cd 1200 	strd	r1, r2, [sp]
 800d820:	461a      	mov	r2, r3
 800d822:	2120      	movs	r1, #32
 800d824:	f001 f960 	bl	800eae8 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800d828:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d82c:	3320      	adds	r3, #32
 800d82e:	2b00      	cmp	r3, #0
 800d830:	da00      	bge.n	800d834 <Form_Siemens_Reply+0x41c>
 800d832:	3307      	adds	r3, #7
 800d834:	10db      	asrs	r3, r3, #3
 800d836:	b29a      	uxth	r2, r3
 800d838:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d83c:	4413      	add	r3, r2
 800d83e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d842:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d846:	3320      	adds	r3, #32
 800d848:	b29b      	uxth	r3, r3
 800d84a:	b21b      	sxth	r3, r3
 800d84c:	425a      	negs	r2, r3
 800d84e:	f003 0307 	and.w	r3, r3, #7
 800d852:	f002 0207 	and.w	r2, r2, #7
 800d856:	bf58      	it	pl
 800d858:	4253      	negpl	r3, r2
 800d85a:	b21b      	sxth	r3, r3
 800d85c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800d860:	4b8f      	ldr	r3, [pc, #572]	; (800daa0 <Form_Siemens_Reply+0x688>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a8d      	ldr	r2, [pc, #564]	; (800da9c <Form_Siemens_Reply+0x684>)
 800d866:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800d868:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d86c:	b2d8      	uxtb	r0, r3
 800d86e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d872:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d876:	4413      	add	r3, r2
 800d878:	4a88      	ldr	r2, [pc, #544]	; (800da9c <Form_Siemens_Reply+0x684>)
 800d87a:	6a12      	ldr	r2, [r2, #32]
 800d87c:	2100      	movs	r1, #0
 800d87e:	613a      	str	r2, [r7, #16]
 800d880:	6179      	str	r1, [r7, #20]
 800d882:	2202      	movs	r2, #2
 800d884:	9202      	str	r2, [sp, #8]
 800d886:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d88a:	e9cd 1200 	strd	r1, r2, [sp]
 800d88e:	461a      	mov	r2, r3
 800d890:	2120      	movs	r1, #32
 800d892:	f001 f929 	bl	800eae8 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800d896:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d89a:	3320      	adds	r3, #32
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	da00      	bge.n	800d8a2 <Form_Siemens_Reply+0x48a>
 800d8a0:	3307      	adds	r3, #7
 800d8a2:	10db      	asrs	r3, r3, #3
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d8b0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d8b4:	3320      	adds	r3, #32
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	b21b      	sxth	r3, r3
 800d8ba:	425a      	negs	r2, r3
 800d8bc:	f003 0307 	and.w	r3, r3, #7
 800d8c0:	f002 0207 	and.w	r2, r2, #7
 800d8c4:	bf58      	it	pl
 800d8c6:	4253      	negpl	r3, r2
 800d8c8:	b21b      	sxth	r3, r3
 800d8ca:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800d8ce:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800d8d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f001 fa6b 	bl	800edb4 <Data_Compliment>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800d8e4:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d8e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f000 ff64 	bl	800e7bc <Siemens_CRC>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d8fa:	4b6a      	ldr	r3, [pc, #424]	; (800daa4 <Form_Siemens_Reply+0x68c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	09db      	lsrs	r3, r3, #7
 800d900:	f003 0301 	and.w	r3, r3, #1
 800d904:	2b00      	cmp	r3, #0
 800d906:	d02c      	beq.n	800d962 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800d908:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800d90c:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800d910:	4865      	ldr	r0, [pc, #404]	; (800daa8 <Form_Siemens_Reply+0x690>)
 800d912:	f017 fdc1 	bl	8025498 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800d916:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800d91a:	4619      	mov	r1, r3
 800d91c:	4863      	ldr	r0, [pc, #396]	; (800daac <Form_Siemens_Reply+0x694>)
 800d91e:	f017 fd1f 	bl	8025360 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800d922:	4863      	ldr	r0, [pc, #396]	; (800dab0 <Form_Siemens_Reply+0x698>)
 800d924:	f00f f9c4 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800d928:	4601      	mov	r1, r0
 800d92a:	4b62      	ldr	r3, [pc, #392]	; (800dab4 <Form_Siemens_Reply+0x69c>)
 800d92c:	fba3 2301 	umull	r2, r3, r3, r1
 800d930:	0bda      	lsrs	r2, r3, #15
 800d932:	4613      	mov	r3, r2
 800d934:	041b      	lsls	r3, r3, #16
 800d936:	1a9b      	subs	r3, r3, r2
 800d938:	1aca      	subs	r2, r1, r3
 800d93a:	4613      	mov	r3, r2
 800d93c:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800d940:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800d944:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800d948:	429a      	cmp	r2, r3
 800d94a:	d104      	bne.n	800d956 <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800d94c:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800d950:	3304      	adds	r3, #4
 800d952:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800d956:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800d95a:	4619      	mov	r1, r3
 800d95c:	4856      	ldr	r0, [pc, #344]	; (800dab8 <Form_Siemens_Reply+0x6a0>)
 800d95e:	f017 fcff 	bl	8025360 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800d962:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d966:	b2d8      	uxtb	r0, r3
 800d968:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d96c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d970:	4413      	add	r3, r2
 800d972:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800d976:	2100      	movs	r1, #0
 800d978:	60ba      	str	r2, [r7, #8]
 800d97a:	60f9      	str	r1, [r7, #12]
 800d97c:	2202      	movs	r2, #2
 800d97e:	9202      	str	r2, [sp, #8]
 800d980:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d984:	e9cd 1200 	strd	r1, r2, [sp]
 800d988:	461a      	mov	r2, r3
 800d98a:	2110      	movs	r1, #16
 800d98c:	f001 f8ac 	bl	800eae8 <Insert_cal_parity>
	BITSTUFFINC(16);
 800d990:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d994:	3310      	adds	r3, #16
 800d996:	2b00      	cmp	r3, #0
 800d998:	da00      	bge.n	800d99c <Form_Siemens_Reply+0x584>
 800d99a:	3307      	adds	r3, #7
 800d99c:	10db      	asrs	r3, r3, #3
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d9aa:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d9ae:	3310      	adds	r3, #16
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	b21b      	sxth	r3, r3
 800d9b4:	425a      	negs	r2, r3
 800d9b6:	f003 0307 	and.w	r3, r3, #7
 800d9ba:	f002 0207 	and.w	r2, r2, #7
 800d9be:	bf58      	it	pl
 800d9c0:	4253      	negpl	r3, r2
 800d9c2:	b21b      	sxth	r3, r3
 800d9c4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800d9c8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d9cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d9d0:	441a      	add	r2, r3
 800d9d2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d9d6:	3b02      	subs	r3, #2
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	4619      	mov	r1, r3
 800d9dc:	4610      	mov	r0, r2
 800d9de:	f000 feed 	bl	800e7bc <Siemens_CRC>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d9e8:	4b2e      	ldr	r3, [pc, #184]	; (800daa4 <Form_Siemens_Reply+0x68c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	0a5b      	lsrs	r3, r3, #9
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d02c      	beq.n	800da50 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800d9f6:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800d9fa:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800d9fe:	482a      	ldr	r0, [pc, #168]	; (800daa8 <Form_Siemens_Reply+0x690>)
 800da00:	f017 fd4a 	bl	8025498 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800da04:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800da08:	4619      	mov	r1, r3
 800da0a:	482c      	ldr	r0, [pc, #176]	; (800dabc <Form_Siemens_Reply+0x6a4>)
 800da0c:	f017 fca8 	bl	8025360 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800da10:	4827      	ldr	r0, [pc, #156]	; (800dab0 <Form_Siemens_Reply+0x698>)
 800da12:	f00f f94d 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 800da16:	4601      	mov	r1, r0
 800da18:	4b26      	ldr	r3, [pc, #152]	; (800dab4 <Form_Siemens_Reply+0x69c>)
 800da1a:	fba3 2301 	umull	r2, r3, r3, r1
 800da1e:	0bda      	lsrs	r2, r3, #15
 800da20:	4613      	mov	r3, r2
 800da22:	041b      	lsls	r3, r3, #16
 800da24:	1a9b      	subs	r3, r3, r2
 800da26:	1aca      	subs	r2, r1, r3
 800da28:	4613      	mov	r3, r2
 800da2a:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800da2e:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800da32:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800da36:	429a      	cmp	r2, r3
 800da38:	d104      	bne.n	800da44 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800da3a:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800da3e:	3304      	adds	r3, #4
 800da40:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800da44:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800da48:	4619      	mov	r1, r3
 800da4a:	481d      	ldr	r0, [pc, #116]	; (800dac0 <Form_Siemens_Reply+0x6a8>)
 800da4c:	f017 fc88 	bl	8025360 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800da50:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800da5a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800da5e:	b2d8      	uxtb	r0, r3
 800da60:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800da64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800da68:	4413      	add	r3, r2
 800da6a:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800da6e:	2100      	movs	r1, #0
 800da70:	603a      	str	r2, [r7, #0]
 800da72:	6079      	str	r1, [r7, #4]
 800da74:	2202      	movs	r2, #2
 800da76:	9202      	str	r2, [sp, #8]
 800da78:	e9d7 1200 	ldrd	r1, r2, [r7]
 800da7c:	e9cd 1200 	strd	r1, r2, [sp]
 800da80:	461a      	mov	r2, r3
 800da82:	2110      	movs	r1, #16
 800da84:	f001 f830 	bl	800eae8 <Insert_cal_parity>
	BITSTUFFINC(16);
 800da88:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800da8c:	3310      	adds	r3, #16
 800da8e:	2b00      	cmp	r3, #0
 800da90:	da18      	bge.n	800dac4 <Form_Siemens_Reply+0x6ac>
 800da92:	3307      	adds	r3, #7
 800da94:	e016      	b.n	800dac4 <Form_Siemens_Reply+0x6ac>
 800da96:	bf00      	nop
 800da98:	20002cec 	.word	0x20002cec
 800da9c:	20002f14 	.word	0x20002f14
 800daa0:	200041b0 	.word	0x200041b0
 800daa4:	20003968 	.word	0x20003968
 800daa8:	08028c34 	.word	0x08028c34
 800daac:	08028ee4 	.word	0x08028ee4
 800dab0:	2000a9e0 	.word	0x2000a9e0
 800dab4:	80008001 	.word	0x80008001
 800dab8:	08028ef8 	.word	0x08028ef8
 800dabc:	08028f0c 	.word	0x08028f0c
 800dac0:	08028f28 	.word	0x08028f28
 800dac4:	10db      	asrs	r3, r3, #3
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dacc:	4413      	add	r3, r2
 800dace:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dad2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dad6:	3310      	adds	r3, #16
 800dad8:	b29b      	uxth	r3, r3
 800dada:	b21b      	sxth	r3, r3
 800dadc:	425a      	negs	r2, r3
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	f002 0207 	and.w	r2, r2, #7
 800dae6:	bf58      	it	pl
 800dae8:	4253      	negpl	r3, r2
 800daea:	b21b      	sxth	r3, r3
 800daec:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800daf0:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800daf4:	3302      	adds	r3, #2
 800daf6:	461a      	mov	r2, r3
 800daf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dafc:	4619      	mov	r1, r3
 800dafe:	481e      	ldr	r0, [pc, #120]	; (800db78 <Form_Siemens_Reply+0x760>)
 800db00:	f017 fb1e 	bl	8025140 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800db04:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800db08:	3302      	adds	r3, #2
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	4b1a      	ldr	r3, [pc, #104]	; (800db78 <Form_Siemens_Reply+0x760>)
 800db0e:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800db12:	f001 f9bb 	bl	800ee8c <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800db16:	4b19      	ldr	r3, [pc, #100]	; (800db7c <Form_Siemens_Reply+0x764>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	099b      	lsrs	r3, r3, #6
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	d003      	beq.n	800db2c <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800db24:	4816      	ldr	r0, [pc, #88]	; (800db80 <Form_Siemens_Reply+0x768>)
 800db26:	f017 fcb7 	bl	8025498 <puts>
 800db2a:	e00f      	b.n	800db4c <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800db2c:	4b15      	ldr	r3, [pc, #84]	; (800db84 <Form_Siemens_Reply+0x76c>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d10b      	bne.n	800db4c <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800db34:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	3302      	adds	r3, #2
 800db3c:	b2d9      	uxtb	r1, r3
 800db3e:	4a12      	ldr	r2, [pc, #72]	; (800db88 <Form_Siemens_Reply+0x770>)
 800db40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db44:	6812      	ldr	r2, [r2, #0]
 800db46:	4618      	mov	r0, r3
 800db48:	f002 fc0a 	bl	8010360 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800db4c:	f44f 720a 	mov.w	r2, #552	; 0x228
 800db50:	2100      	movs	r1, #0
 800db52:	480e      	ldr	r0, [pc, #56]	; (800db8c <Form_Siemens_Reply+0x774>)
 800db54:	f017 fb1c 	bl	8025190 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800db58:	4a0c      	ldr	r2, [pc, #48]	; (800db8c <Form_Siemens_Reply+0x774>)
 800db5a:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <Form_Siemens_Reply+0x778>)
 800db5c:	4610      	mov	r0, r2
 800db5e:	4619      	mov	r1, r3
 800db60:	f44f 730a 	mov.w	r3, #552	; 0x228
 800db64:	461a      	mov	r2, r3
 800db66:	f017 faeb 	bl	8025140 <memcpy>
	UNUSED(App_data_Traverser);
}
 800db6a:	bf00      	nop
 800db6c:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800db70:	46bd      	mov	sp, r7
 800db72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db76:	bf00      	nop
 800db78:	20003364 	.word	0x20003364
 800db7c:	20003968 	.word	0x20003968
 800db80:	08028f48 	.word	0x08028f48
 800db84:	20005091 	.word	0x20005091
 800db88:	200056f8 	.word	0x200056f8
 800db8c:	2000313c 	.word	0x2000313c
 800db90:	20002f14 	.word	0x20002f14

0800db94 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800db9a:	4b64      	ldr	r3, [pc, #400]	; (800dd2c <ProcessSendingSignals2MIE+0x198>)
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f002 f86e 	bl	800fc80 <HAL_Elaps_Ticks>
 800dba4:	4602      	mov	r2, r0
 800dba6:	4b62      	ldr	r3, [pc, #392]	; (800dd30 <ProcessSendingSignals2MIE+0x19c>)
 800dba8:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800dbac:	429a      	cmp	r2, r3
 800dbae:	f240 80b9 	bls.w	800dd24 <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800dbb2:	4b5e      	ldr	r3, [pc, #376]	; (800dd2c <ProcessSendingSignals2MIE+0x198>)
 800dbb4:	781b      	ldrb	r3, [r3, #0]
		if(
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d113      	bne.n	800dbe2 <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800dbba:	4b5c      	ldr	r3, [pc, #368]	; (800dd2c <ProcessSendingSignals2MIE+0x198>)
 800dbbc:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d10f      	bne.n	800dbe2 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800dbc2:	4b5c      	ldr	r3, [pc, #368]	; (800dd34 <ProcessSendingSignals2MIE+0x1a0>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d10b      	bne.n	800dbe2 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800dbca:	4b5b      	ldr	r3, [pc, #364]	; (800dd38 <ProcessSendingSignals2MIE+0x1a4>)
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d107      	bne.n	800dbe2 <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800dbd2:	4b5a      	ldr	r3, [pc, #360]	; (800dd3c <ProcessSendingSignals2MIE+0x1a8>)
 800dbd4:	881b      	ldrh	r3, [r3, #0]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	4959      	ldr	r1, [pc, #356]	; (800dd40 <ProcessSendingSignals2MIE+0x1ac>)
 800dbda:	485a      	ldr	r0, [pc, #360]	; (800dd44 <ProcessSendingSignals2MIE+0x1b0>)
 800dbdc:	f017 fab0 	bl	8025140 <memcpy>
 800dbe0:	e02d      	b.n	800dc3e <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800dbe2:	4b54      	ldr	r3, [pc, #336]	; (800dd34 <ProcessSendingSignals2MIE+0x1a0>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d10f      	bne.n	800dc0a <ProcessSendingSignals2MIE+0x76>
 800dbea:	4b53      	ldr	r3, [pc, #332]	; (800dd38 <ProcessSendingSignals2MIE+0x1a4>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10b      	bne.n	800dc0a <ProcessSendingSignals2MIE+0x76>
 800dbf2:	4b4e      	ldr	r3, [pc, #312]	; (800dd2c <ProcessSendingSignals2MIE+0x198>)
 800dbf4:	785b      	ldrb	r3, [r3, #1]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d107      	bne.n	800dc0a <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800dbfa:	4b53      	ldr	r3, [pc, #332]	; (800dd48 <ProcessSendingSignals2MIE+0x1b4>)
 800dbfc:	881b      	ldrh	r3, [r3, #0]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	4952      	ldr	r1, [pc, #328]	; (800dd4c <ProcessSendingSignals2MIE+0x1b8>)
 800dc02:	4850      	ldr	r0, [pc, #320]	; (800dd44 <ProcessSendingSignals2MIE+0x1b0>)
 800dc04:	f017 fa9c 	bl	8025140 <memcpy>
 800dc08:	e019      	b.n	800dc3e <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800dc0a:	4b4b      	ldr	r3, [pc, #300]	; (800dd38 <ProcessSendingSignals2MIE+0x1a4>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d10f      	bne.n	800dc32 <ProcessSendingSignals2MIE+0x9e>
 800dc12:	4b48      	ldr	r3, [pc, #288]	; (800dd34 <ProcessSendingSignals2MIE+0x1a0>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10b      	bne.n	800dc32 <ProcessSendingSignals2MIE+0x9e>
 800dc1a:	4b44      	ldr	r3, [pc, #272]	; (800dd2c <ProcessSendingSignals2MIE+0x198>)
 800dc1c:	785b      	ldrb	r3, [r3, #1]
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d107      	bne.n	800dc32 <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800dc22:	4b46      	ldr	r3, [pc, #280]	; (800dd3c <ProcessSendingSignals2MIE+0x1a8>)
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	4945      	ldr	r1, [pc, #276]	; (800dd40 <ProcessSendingSignals2MIE+0x1ac>)
 800dc2a:	4846      	ldr	r0, [pc, #280]	; (800dd44 <ProcessSendingSignals2MIE+0x1b0>)
 800dc2c:	f017 fa88 	bl	8025140 <memcpy>
 800dc30:	e005      	b.n	800dc3e <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800dc32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc36:	2100      	movs	r1, #0
 800dc38:	4842      	ldr	r0, [pc, #264]	; (800dd44 <ProcessSendingSignals2MIE+0x1b0>)
 800dc3a:	f017 faa9 	bl	8025190 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800dc3e:	4b3e      	ldr	r3, [pc, #248]	; (800dd38 <ProcessSendingSignals2MIE+0x1a4>)
 800dc40:	885b      	ldrh	r3, [r3, #2]
 800dc42:	461a      	mov	r2, r3
 800dc44:	4b3a      	ldr	r3, [pc, #232]	; (800dd30 <ProcessSendingSignals2MIE+0x19c>)
 800dc46:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d30d      	bcc.n	800dc6a <ProcessSendingSignals2MIE+0xd6>
 800dc4e:	4b39      	ldr	r3, [pc, #228]	; (800dd34 <ProcessSendingSignals2MIE+0x1a0>)
 800dc50:	885b      	ldrh	r3, [r3, #2]
 800dc52:	461a      	mov	r2, r3
 800dc54:	4b36      	ldr	r3, [pc, #216]	; (800dd30 <ProcessSendingSignals2MIE+0x19c>)
 800dc56:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d305      	bcc.n	800dc6a <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800dc5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc62:	2100      	movs	r1, #0
 800dc64:	4837      	ldr	r0, [pc, #220]	; (800dd44 <ProcessSendingSignals2MIE+0x1b0>)
 800dc66:	f017 fa93 	bl	8025190 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800dc6a:	4b31      	ldr	r3, [pc, #196]	; (800dd30 <ProcessSendingSignals2MIE+0x19c>)
 800dc6c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800dc70:	f003 0307 	and.w	r3, r3, #7
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	4b36      	ldr	r3, [pc, #216]	; (800dd50 <ProcessSendingSignals2MIE+0x1bc>)
 800dc78:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800dc7a:	4b35      	ldr	r3, [pc, #212]	; (800dd50 <ProcessSendingSignals2MIE+0x1bc>)
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d009      	beq.n	800dc96 <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800dc82:	4b2b      	ldr	r3, [pc, #172]	; (800dd30 <ProcessSendingSignals2MIE+0x19c>)
 800dc84:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800dc88:	08db      	lsrs	r3, r3, #3
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	4b2f      	ldr	r3, [pc, #188]	; (800dd50 <ProcessSendingSignals2MIE+0x1bc>)
 800dc92:	801a      	strh	r2, [r3, #0]
 800dc94:	e006      	b.n	800dca4 <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800dc96:	4b26      	ldr	r3, [pc, #152]	; (800dd30 <ProcessSendingSignals2MIE+0x19c>)
 800dc98:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800dc9c:	08db      	lsrs	r3, r3, #3
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	4b2b      	ldr	r3, [pc, #172]	; (800dd50 <ProcessSendingSignals2MIE+0x1bc>)
 800dca2:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800dca4:	492b      	ldr	r1, [pc, #172]	; (800dd54 <ProcessSendingSignals2MIE+0x1c0>)
 800dca6:	482c      	ldr	r0, [pc, #176]	; (800dd58 <ProcessSendingSignals2MIE+0x1c4>)
 800dca8:	f7f2 faca 	bl	8000240 <strcmp>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d008      	beq.n	800dcc4 <ProcessSendingSignals2MIE+0x130>
 800dcb2:	4b1e      	ldr	r3, [pc, #120]	; (800dd2c <ProcessSendingSignals2MIE+0x198>)
 800dcb4:	785b      	ldrb	r3, [r3, #1]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d104      	bne.n	800dcc4 <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800dcba:	f240 1019 	movw	r0, #281	; 0x119
 800dcbe:	f002 fd93 	bl	80107e8 <TransmitCanPkt>
 800dcc2:	e011      	b.n	800dce8 <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800dcc4:	4923      	ldr	r1, [pc, #140]	; (800dd54 <ProcessSendingSignals2MIE+0x1c0>)
 800dcc6:	4824      	ldr	r0, [pc, #144]	; (800dd58 <ProcessSendingSignals2MIE+0x1c4>)
 800dcc8:	f7f2 faba 	bl	8000240 <strcmp>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d106      	bne.n	800dce0 <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800dcd2:	4b1a      	ldr	r3, [pc, #104]	; (800dd3c <ProcessSendingSignals2MIE+0x1a8>)
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	4919      	ldr	r1, [pc, #100]	; (800dd40 <ProcessSendingSignals2MIE+0x1ac>)
 800dcda:	481a      	ldr	r0, [pc, #104]	; (800dd44 <ProcessSendingSignals2MIE+0x1b0>)
 800dcdc:	f017 fa30 	bl	8025140 <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800dce0:	f240 1019 	movw	r0, #281	; 0x119
 800dce4:	f002 fd80 	bl	80107e8 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800dce8:	481c      	ldr	r0, [pc, #112]	; (800dd5c <ProcessSendingSignals2MIE+0x1c8>)
 800dcea:	f017 fb39 	bl	8025360 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800dcee:	2300      	movs	r3, #0
 800dcf0:	80fb      	strh	r3, [r7, #6]
 800dcf2:	e00a      	b.n	800dd0a <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800dcf4:	88fb      	ldrh	r3, [r7, #6]
 800dcf6:	4a16      	ldr	r2, [pc, #88]	; (800dd50 <ProcessSendingSignals2MIE+0x1bc>)
 800dcf8:	4413      	add	r3, r2
 800dcfa:	789b      	ldrb	r3, [r3, #2]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	4818      	ldr	r0, [pc, #96]	; (800dd60 <ProcessSendingSignals2MIE+0x1cc>)
 800dd00:	f017 fb2e 	bl	8025360 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800dd04:	88fb      	ldrh	r3, [r7, #6]
 800dd06:	3301      	adds	r3, #1
 800dd08:	80fb      	strh	r3, [r7, #6]
 800dd0a:	4b11      	ldr	r3, [pc, #68]	; (800dd50 <ProcessSendingSignals2MIE+0x1bc>)
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	88fa      	ldrh	r2, [r7, #6]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d3ef      	bcc.n	800dcf4 <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800dd14:	200a      	movs	r0, #10
 800dd16:	f017 fb3b 	bl	8025390 <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800dd1a:	f00a fb17 	bl	801834c <HAL_GetTick>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4a02      	ldr	r2, [pc, #8]	; (800dd2c <ProcessSendingSignals2MIE+0x198>)
 800dd22:	6053      	str	r3, [r2, #4]
	}
}
 800dd24:	bf00      	nop
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	2000397c 	.word	0x2000397c
 800dd30:	20000304 	.word	0x20000304
 800dd34:	20003974 	.word	0x20003974
 800dd38:	20003970 	.word	0x20003970
 800dd3c:	20003b9c 	.word	0x20003b9c
 800dd40:	20003ba0 	.word	0x20003ba0
 800dd44:	2000399a 	.word	0x2000399a
 800dd48:	20003da0 	.word	0x20003da0
 800dd4c:	20003da4 	.word	0x20003da4
 800dd50:	20003998 	.word	0x20003998
 800dd54:	08028eb4 	.word	0x08028eb4
 800dd58:	20000305 	.word	0x20000305
 800dd5c:	08028f70 	.word	0x08028f70
 800dd60:	08028f88 	.word	0x08028f88

0800dd64 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <ProcessSelfSharing+0x38>)
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f001 ff87 	bl	800fc80 <HAL_Elaps_Ticks>
 800dd72:	4602      	mov	r2, r0
 800dd74:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <ProcessSelfSharing+0x3c>)
 800dd76:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d90b      	bls.n	800dd96 <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800dd7e:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <ProcessSelfSharing+0x40>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800dd84:	f240 2001 	movw	r0, #513	; 0x201
 800dd88:	f002 fd2e 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800dd8c:	f00a fade 	bl	801834c <HAL_GetTick>
 800dd90:	4603      	mov	r3, r0
 800dd92:	4a02      	ldr	r2, [pc, #8]	; (800dd9c <ProcessSelfSharing+0x38>)
 800dd94:	6093      	str	r3, [r2, #8]
	}
}
 800dd96:	bf00      	nop
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	2000397c 	.word	0x2000397c
 800dda0:	20000304 	.word	0x20000304
 800dda4:	20003970 	.word	0x20003970

0800dda8 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800ddac:	4b1a      	ldr	r3, [pc, #104]	; (800de18 <ProcessDetectNoValidDataReceive+0x70>)
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d014      	beq.n	800ddde <ProcessDetectNoValidDataReceive+0x36>
 800ddb4:	4b18      	ldr	r3, [pc, #96]	; (800de18 <ProcessDetectNoValidDataReceive+0x70>)
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f001 ff61 	bl	800fc80 <HAL_Elaps_Ticks>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	4b16      	ldr	r3, [pc, #88]	; (800de1c <ProcessDetectNoValidDataReceive+0x74>)
 800ddc2:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d909      	bls.n	800ddde <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800ddca:	4b15      	ldr	r3, [pc, #84]	; (800de20 <ProcessDetectNoValidDataReceive+0x78>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d005      	beq.n	800ddde <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800ddd2:	4814      	ldr	r0, [pc, #80]	; (800de24 <ProcessDetectNoValidDataReceive+0x7c>)
 800ddd4:	f017 fb60 	bl	8025498 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800ddd8:	4b11      	ldr	r3, [pc, #68]	; (800de20 <ProcessDetectNoValidDataReceive+0x78>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800ddde:	4b10      	ldr	r3, [pc, #64]	; (800de20 <ProcessDetectNoValidDataReceive+0x78>)
 800dde0:	885b      	ldrh	r3, [r3, #2]
 800dde2:	461a      	mov	r2, r3
 800dde4:	4b0d      	ldr	r3, [pc, #52]	; (800de1c <ProcessDetectNoValidDataReceive+0x74>)
 800dde6:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d911      	bls.n	800de12 <ProcessDetectNoValidDataReceive+0x6a>
 800ddee:	4b0e      	ldr	r3, [pc, #56]	; (800de28 <ProcessDetectNoValidDataReceive+0x80>)
 800ddf0:	885b      	ldrh	r3, [r3, #2]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	4b09      	ldr	r3, [pc, #36]	; (800de1c <ProcessDetectNoValidDataReceive+0x74>)
 800ddf6:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d909      	bls.n	800de12 <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800ddfe:	4b08      	ldr	r3, [pc, #32]	; (800de20 <ProcessDetectNoValidDataReceive+0x78>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d005      	beq.n	800de12 <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800de06:	4809      	ldr	r0, [pc, #36]	; (800de2c <ProcessDetectNoValidDataReceive+0x84>)
 800de08:	f017 fb46 	bl	8025498 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800de0c:	4b04      	ldr	r3, [pc, #16]	; (800de20 <ProcessDetectNoValidDataReceive+0x78>)
 800de0e:	2200      	movs	r2, #0
 800de10:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800de12:	bf00      	nop
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	2000397c 	.word	0x2000397c
 800de1c:	20000304 	.word	0x20000304
 800de20:	20003970 	.word	0x20003970
 800de24:	08028f90 	.word	0x08028f90
 800de28:	20003974 	.word	0x20003974
 800de2c:	08028fb0 	.word	0x08028fb0

0800de30 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800de34:	4b09      	ldr	r3, [pc, #36]	; (800de5c <SendRelays2Other+0x2c>)
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	4618      	mov	r0, r3
 800de3a:	f001 ff21 	bl	800fc80 <HAL_Elaps_Ticks>
 800de3e:	4603      	mov	r3, r0
 800de40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de44:	d908      	bls.n	800de58 <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800de46:	f240 2007 	movw	r0, #519	; 0x207
 800de4a:	f002 fccd 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800de4e:	f00a fa7d 	bl	801834c <HAL_GetTick>
 800de52:	4603      	mov	r3, r0
 800de54:	4a01      	ldr	r2, [pc, #4]	; (800de5c <SendRelays2Other+0x2c>)
 800de56:	6113      	str	r3, [r2, #16]

	}
}
 800de58:	bf00      	nop
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	2000397c 	.word	0x2000397c

0800de60 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800de64:	4b16      	ldr	r3, [pc, #88]	; (800dec0 <CheckRelayMisMatch+0x60>)
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	4618      	mov	r0, r3
 800de6a:	f001 ff09 	bl	800fc80 <HAL_Elaps_Ticks>
 800de6e:	4603      	mov	r3, r0
 800de70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800de74:	d922      	bls.n	800debc <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800de76:	4b13      	ldr	r3, [pc, #76]	; (800dec4 <CheckRelayMisMatch+0x64>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10c      	bne.n	800de98 <CheckRelayMisMatch+0x38>
 800de7e:	4b12      	ldr	r3, [pc, #72]	; (800dec8 <CheckRelayMisMatch+0x68>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d108      	bne.n	800de98 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800de86:	4a11      	ldr	r2, [pc, #68]	; (800decc <CheckRelayMisMatch+0x6c>)
 800de88:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <CheckRelayMisMatch+0x70>)
 800de8a:	4610      	mov	r0, r2
 800de8c:	4619      	mov	r1, r3
 800de8e:	f44f 7301 	mov.w	r3, #516	; 0x204
 800de92:	461a      	mov	r2, r3
 800de94:	f017 f954 	bl	8025140 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800de98:	4b0d      	ldr	r3, [pc, #52]	; (800ded0 <CheckRelayMisMatch+0x70>)
 800de9a:	885a      	ldrh	r2, [r3, #2]
 800de9c:	4b0b      	ldr	r3, [pc, #44]	; (800decc <CheckRelayMisMatch+0x6c>)
 800de9e:	885b      	ldrh	r3, [r3, #2]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d003      	beq.n	800deac <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800dea4:	4b06      	ldr	r3, [pc, #24]	; (800dec0 <CheckRelayMisMatch+0x60>)
 800dea6:	2201      	movs	r2, #1
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	e002      	b.n	800deb2 <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = RESET;
 800deac:	4b04      	ldr	r3, [pc, #16]	; (800dec0 <CheckRelayMisMatch+0x60>)
 800deae:	2200      	movs	r2, #0
 800deb0:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800deb2:	f00a fa4b 	bl	801834c <HAL_GetTick>
 800deb6:	4603      	mov	r3, r0
 800deb8:	4a01      	ldr	r2, [pc, #4]	; (800dec0 <CheckRelayMisMatch+0x60>)
 800deba:	6153      	str	r3, [r2, #20]
	}
}
 800debc:	bf00      	nop
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	2000397c 	.word	0x2000397c
 800dec4:	20003970 	.word	0x20003970
 800dec8:	20003974 	.word	0x20003974
 800decc:	20003b9c 	.word	0x20003b9c
 800ded0:	20003da0 	.word	0x20003da0

0800ded4 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800ded8:	4b16      	ldr	r3, [pc, #88]	; (800df34 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800deda:	785b      	ldrb	r3, [r3, #1]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d101      	bne.n	800dee4 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800dee0:	f006 ff98 	bl	8014e14 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800dee4:	4b13      	ldr	r3, [pc, #76]	; (800df34 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	4618      	mov	r0, r3
 800deea:	f001 fec9 	bl	800fc80 <HAL_Elaps_Ticks>
 800deee:	4602      	mov	r2, r0
 800def0:	4b11      	ldr	r3, [pc, #68]	; (800df38 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800def2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800def6:	429a      	cmp	r2, r3
 800def8:	d31a      	bcc.n	800df30 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800defa:	4b0e      	ldr	r3, [pc, #56]	; (800df34 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800defc:	699a      	ldr	r2, [r3, #24]
 800defe:	4b0f      	ldr	r3, [pc, #60]	; (800df3c <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	429a      	cmp	r2, r3
 800df04:	d014      	beq.n	800df30 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800df06:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800df08:	2200      	movs	r2, #0
 800df0a:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800df0c:	4b09      	ldr	r3, [pc, #36]	; (800df34 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	4a0a      	ldr	r2, [pc, #40]	; (800df3c <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800df12:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800df14:	4b07      	ldr	r3, [pc, #28]	; (800df34 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800df16:	699b      	ldr	r3, [r3, #24]
 800df18:	4618      	mov	r0, r3
 800df1a:	f001 feb1 	bl	800fc80 <HAL_Elaps_Ticks>
 800df1e:	4603      	mov	r3, r0
 800df20:	4a07      	ldr	r2, [pc, #28]	; (800df40 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800df22:	fba2 2303 	umull	r2, r3, r2, r3
 800df26:	099b      	lsrs	r3, r3, #6
 800df28:	4619      	mov	r1, r3
 800df2a:	4806      	ldr	r0, [pc, #24]	; (800df44 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800df2c:	f017 fa18 	bl	8025360 <iprintf>
		}
	}
}
 800df30:	bf00      	nop
 800df32:	bd80      	pop	{r7, pc}
 800df34:	2000397c 	.word	0x2000397c
 800df38:	20000304 	.word	0x20000304
 800df3c:	20005094 	.word	0x20005094
 800df40:	10624dd3 	.word	0x10624dd3
 800df44:	08028fd4 	.word	0x08028fd4

0800df48 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	4611      	mov	r1, r2
 800df54:	461a      	mov	r2, r3
 800df56:	460b      	mov	r3, r1
 800df58:	80fb      	strh	r3, [r7, #6]
 800df5a:	4613      	mov	r3, r2
 800df5c:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800df5e:	484d      	ldr	r0, [pc, #308]	; (800e094 <Print_Siemens_MSG+0x14c>)
 800df60:	f017 f9fe 	bl	8025360 <iprintf>
	if(TX_RX == TX)
 800df64:	797b      	ldrb	r3, [r7, #5]
 800df66:	2b01      	cmp	r3, #1
 800df68:	d103      	bne.n	800df72 <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800df6a:	484b      	ldr	r0, [pc, #300]	; (800e098 <Print_Siemens_MSG+0x150>)
 800df6c:	f017 f9f8 	bl	8025360 <iprintf>
 800df70:	e005      	b.n	800df7e <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800df72:	797b      	ldrb	r3, [r7, #5]
 800df74:	2b02      	cmp	r3, #2
 800df76:	d102      	bne.n	800df7e <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800df78:	4848      	ldr	r0, [pc, #288]	; (800e09c <Print_Siemens_MSG+0x154>)
 800df7a:	f017 f9f1 	bl	8025360 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	4619      	mov	r1, r3
 800df84:	4846      	ldr	r0, [pc, #280]	; (800e0a0 <Print_Siemens_MSG+0x158>)
 800df86:	f017 f9eb 	bl	8025360 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	4619      	mov	r1, r3
 800df90:	4844      	ldr	r0, [pc, #272]	; (800e0a4 <Print_Siemens_MSG+0x15c>)
 800df92:	f017 f9e5 	bl	8025360 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	7b1b      	ldrb	r3, [r3, #12]
 800df9a:	4619      	mov	r1, r3
 800df9c:	4842      	ldr	r0, [pc, #264]	; (800e0a8 <Print_Siemens_MSG+0x160>)
 800df9e:	f017 f9df 	bl	8025360 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	695b      	ldr	r3, [r3, #20]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4840      	ldr	r0, [pc, #256]	; (800e0ac <Print_Siemens_MSG+0x164>)
 800dfaa:	f017 f9d9 	bl	8025360 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	7e1b      	ldrb	r3, [r3, #24]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	483e      	ldr	r0, [pc, #248]	; (800e0b0 <Print_Siemens_MSG+0x168>)
 800dfb6:	f017 f9d3 	bl	8025360 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	7e5b      	ldrb	r3, [r3, #25]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	483c      	ldr	r0, [pc, #240]	; (800e0b4 <Print_Siemens_MSG+0x16c>)
 800dfc2:	f017 f9cd 	bl	8025360 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	7e9b      	ldrb	r3, [r3, #26]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	483a      	ldr	r0, [pc, #232]	; (800e0b8 <Print_Siemens_MSG+0x170>)
 800dfce:	f017 f9c7 	bl	8025360 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	7edb      	ldrb	r3, [r3, #27]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4838      	ldr	r0, [pc, #224]	; (800e0bc <Print_Siemens_MSG+0x174>)
 800dfda:	f017 f9c1 	bl	8025360 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	69db      	ldr	r3, [r3, #28]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	4836      	ldr	r0, [pc, #216]	; (800e0c0 <Print_Siemens_MSG+0x178>)
 800dfe6:	f017 f9bb 	bl	8025360 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	4619      	mov	r1, r3
 800dff0:	4834      	ldr	r0, [pc, #208]	; (800e0c4 <Print_Siemens_MSG+0x17c>)
 800dff2:	f017 f9b5 	bl	8025360 <iprintf>
	if(TX_RX == RX)
 800dff6:	797b      	ldrb	r3, [r7, #5]
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d122      	bne.n	800e042 <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e000:	4619      	mov	r1, r3
 800e002:	4831      	ldr	r0, [pc, #196]	; (800e0c8 <Print_Siemens_MSG+0x180>)
 800e004:	f017 f9ac 	bl	8025360 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e008:	2300      	movs	r3, #0
 800e00a:	82fb      	strh	r3, [r7, #22]
 800e00c:	e00b      	b.n	800e026 <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800e00e:	8afb      	ldrh	r3, [r7, #22]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	4413      	add	r3, r2
 800e014:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e018:	4619      	mov	r1, r3
 800e01a:	482c      	ldr	r0, [pc, #176]	; (800e0cc <Print_Siemens_MSG+0x184>)
 800e01c:	f017 f9a0 	bl	8025360 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e020:	8afb      	ldrh	r3, [r7, #22]
 800e022:	3301      	adds	r3, #1
 800e024:	82fb      	strh	r3, [r7, #22]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e02a:	8afa      	ldrh	r2, [r7, #22]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d3ee      	bcc.n	800e00e <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800e030:	200a      	movs	r0, #10
 800e032:	f017 f9ad 	bl	8025390 <putchar>

		if(Debug_flag == 2)
 800e036:	4b26      	ldr	r3, [pc, #152]	; (800e0d0 <Print_Siemens_MSG+0x188>)
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	d101      	bne.n	800e042 <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800e03e:	f000 ff65 	bl	800ef0c <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800e042:	4b23      	ldr	r3, [pc, #140]	; (800e0d0 <Print_Siemens_MSG+0x188>)
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d120      	bne.n	800e08c <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e04a:	2300      	movs	r3, #0
 800e04c:	82bb      	strh	r3, [r7, #20]
 800e04e:	e016      	b.n	800e07e <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800e050:	8abb      	ldrh	r3, [r7, #20]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d008      	beq.n	800e068 <Print_Siemens_MSG+0x120>
 800e056:	8abb      	ldrh	r3, [r7, #20]
 800e058:	f003 031f 	and.w	r3, r3, #31
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d102      	bne.n	800e068 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800e062:	200a      	movs	r0, #10
 800e064:	f017 f994 	bl	8025390 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800e068:	8abb      	ldrh	r3, [r7, #20]
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	4413      	add	r3, r2
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	4619      	mov	r1, r3
 800e072:	4816      	ldr	r0, [pc, #88]	; (800e0cc <Print_Siemens_MSG+0x184>)
 800e074:	f017 f974 	bl	8025360 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e078:	8abb      	ldrh	r3, [r7, #20]
 800e07a:	3301      	adds	r3, #1
 800e07c:	82bb      	strh	r3, [r7, #20]
 800e07e:	8aba      	ldrh	r2, [r7, #20]
 800e080:	88fb      	ldrh	r3, [r7, #6]
 800e082:	429a      	cmp	r2, r3
 800e084:	d3e4      	bcc.n	800e050 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800e086:	200a      	movs	r0, #10
 800e088:	f017 f982 	bl	8025390 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800e08c:	bf00      	nop
 800e08e:	3718      	adds	r7, #24
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	08029004 	.word	0x08029004
 800e098:	0802900c 	.word	0x0802900c
 800e09c:	08029010 	.word	0x08029010
 800e0a0:	08029014 	.word	0x08029014
 800e0a4:	0802901c 	.word	0x0802901c
 800e0a8:	08029024 	.word	0x08029024
 800e0ac:	0802902c 	.word	0x0802902c
 800e0b0:	08029034 	.word	0x08029034
 800e0b4:	08029040 	.word	0x08029040
 800e0b8:	08029048 	.word	0x08029048
 800e0bc:	08029050 	.word	0x08029050
 800e0c0:	08029058 	.word	0x08029058
 800e0c4:	08029064 	.word	0x08029064
 800e0c8:	08029070 	.word	0x08029070
 800e0cc:	08028f88 	.word	0x08028f88
 800e0d0:	200009b5 	.word	0x200009b5

0800e0d4 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b09a      	sub	sp, #104	; 0x68
 800e0d8:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	603b      	str	r3, [r7, #0]
 800e0f0:	1d3b      	adds	r3, r7, #4
 800e0f2:	2260      	movs	r2, #96	; 0x60
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f017 f84a 	bl	8025190 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800e0fc:	4bb9      	ldr	r3, [pc, #740]	; (800e3e4 <Chech_forSiemensCMD+0x310>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4618      	mov	r0, r3
 800e102:	f001 fdbd 	bl	800fc80 <HAL_Elaps_Ticks>
 800e106:	4603      	mov	r3, r0
 800e108:	2b09      	cmp	r3, #9
 800e10a:	f240 81ad 	bls.w	800e468 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800e10e:	e010      	b.n	800e132 <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800e110:	2000      	movs	r0, #0
 800e112:	f009 fdf3 	bl	8017cfc <Com_Get_Byte>
 800e116:	4603      	mov	r3, r0
 800e118:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800e11c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e120:	1c5a      	adds	r2, r3, #1
 800e122:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800e126:	3368      	adds	r3, #104	; 0x68
 800e128:	443b      	add	r3, r7
 800e12a:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e12e:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800e132:	2000      	movs	r0, #0
 800e134:	f009 fda2 	bl	8017c7c <Com_DataReady>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1e8      	bne.n	800e110 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800e13e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 8144 	beq.w	800e3d0 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800e148:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e14c:	3368      	adds	r3, #104	; 0x68
 800e14e:	443b      	add	r3, r7
 800e150:	2200      	movs	r2, #0
 800e152:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800e156:	463b      	mov	r3, r7
 800e158:	4619      	mov	r1, r3
 800e15a:	48a3      	ldr	r0, [pc, #652]	; (800e3e8 <Chech_forSiemensCMD+0x314>)
 800e15c:	f017 f900 	bl	8025360 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800e160:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800e164:	463b      	mov	r3, r7
 800e166:	4611      	mov	r1, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 faf3 	bl	800e754 <Is_SiemensCommand_Valid>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b0c      	cmp	r3, #12
 800e172:	f200 8129 	bhi.w	800e3c8 <Chech_forSiemensCMD+0x2f4>
 800e176:	a201      	add	r2, pc, #4	; (adr r2, 800e17c <Chech_forSiemensCMD+0xa8>)
 800e178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e17c:	0800e1b1 	.word	0x0800e1b1
 800e180:	0800e1bf 	.word	0x0800e1bf
 800e184:	0800e223 	.word	0x0800e223
 800e188:	0800e245 	.word	0x0800e245
 800e18c:	0800e26d 	.word	0x0800e26d
 800e190:	0800e295 	.word	0x0800e295
 800e194:	0800e2bd 	.word	0x0800e2bd
 800e198:	0800e2e5 	.word	0x0800e2e5
 800e19c:	0800e30d 	.word	0x0800e30d
 800e1a0:	0800e335 	.word	0x0800e335
 800e1a4:	0800e35d 	.word	0x0800e35d
 800e1a8:	0800e385 	.word	0x0800e385
 800e1ac:	0800e3ad 	.word	0x0800e3ad
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800e1b0:	4b8e      	ldr	r3, [pc, #568]	; (800e3ec <Chech_forSiemensCMD+0x318>)
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800e1b6:	488e      	ldr	r0, [pc, #568]	; (800e3f0 <Chech_forSiemensCMD+0x31c>)
 800e1b8:	f017 f96e 	bl	8025498 <puts>
				break;
 800e1bc:	e109      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800e1be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	3368      	adds	r3, #104	; 0x68
 800e1c6:	443b      	add	r3, r7
 800e1c8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e1cc:	3b30      	subs	r3, #48	; 0x30
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4988      	ldr	r1, [pc, #544]	; (800e3f4 <Chech_forSiemensCMD+0x320>)
 800e1d2:	4889      	ldr	r0, [pc, #548]	; (800e3f8 <Chech_forSiemensCMD+0x324>)
 800e1d4:	f017 f8c4 	bl	8025360 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800e1d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	3368      	adds	r3, #104	; 0x68
 800e1e0:	443b      	add	r3, r7
 800e1e2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e1e6:	2b2f      	cmp	r3, #47	; 0x2f
 800e1e8:	d914      	bls.n	800e214 <Chech_forSiemensCMD+0x140>
 800e1ea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	3368      	adds	r3, #104	; 0x68
 800e1f2:	443b      	add	r3, r7
 800e1f4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e1f8:	2b32      	cmp	r3, #50	; 0x32
 800e1fa:	d80b      	bhi.n	800e214 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800e1fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e200:	3b01      	subs	r3, #1
 800e202:	3368      	adds	r3, #104	; 0x68
 800e204:	443b      	add	r3, r7
 800e206:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e20a:	3b30      	subs	r3, #48	; 0x30
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	4b7b      	ldr	r3, [pc, #492]	; (800e3fc <Chech_forSiemensCMD+0x328>)
 800e210:	701a      	strb	r2, [r3, #0]
 800e212:	e002      	b.n	800e21a <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800e214:	487a      	ldr	r0, [pc, #488]	; (800e400 <Chech_forSiemensCMD+0x32c>)
 800e216:	f017 f93f 	bl	8025498 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800e21a:	2301      	movs	r3, #1
 800e21c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e220:	e0d7      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800e222:	4978      	ldr	r1, [pc, #480]	; (800e404 <Chech_forSiemensCMD+0x330>)
 800e224:	4878      	ldr	r0, [pc, #480]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e226:	f017 f89b 	bl	8025360 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800e22a:	4878      	ldr	r0, [pc, #480]	; (800e40c <Chech_forSiemensCMD+0x338>)
 800e22c:	f017 f934 	bl	8025498 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e230:	4b77      	ldr	r3, [pc, #476]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f043 0301 	orr.w	r3, r3, #1
 800e238:	4a75      	ldr	r2, [pc, #468]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e23a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e23c:	2301      	movs	r3, #1
 800e23e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e242:	e0c6      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800e244:	4973      	ldr	r1, [pc, #460]	; (800e414 <Chech_forSiemensCMD+0x340>)
 800e246:	4870      	ldr	r0, [pc, #448]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e248:	f017 f88a 	bl	8025360 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800e24c:	4872      	ldr	r0, [pc, #456]	; (800e418 <Chech_forSiemensCMD+0x344>)
 800e24e:	f017 f923 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e252:	4b6f      	ldr	r3, [pc, #444]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e254:	2200      	movs	r2, #0
 800e256:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e258:	4b6d      	ldr	r3, [pc, #436]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f043 0302 	orr.w	r3, r3, #2
 800e260:	4a6b      	ldr	r2, [pc, #428]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e262:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e264:	2301      	movs	r3, #1
 800e266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e26a:	e0b2      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800e26c:	496b      	ldr	r1, [pc, #428]	; (800e41c <Chech_forSiemensCMD+0x348>)
 800e26e:	4866      	ldr	r0, [pc, #408]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e270:	f017 f876 	bl	8025360 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800e274:	486a      	ldr	r0, [pc, #424]	; (800e420 <Chech_forSiemensCMD+0x34c>)
 800e276:	f017 f90f 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e27a:	4b65      	ldr	r3, [pc, #404]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e280:	4b63      	ldr	r3, [pc, #396]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f043 0304 	orr.w	r3, r3, #4
 800e288:	4a61      	ldr	r2, [pc, #388]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e28a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e28c:	2301      	movs	r3, #1
 800e28e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e292:	e09e      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800e294:	4963      	ldr	r1, [pc, #396]	; (800e424 <Chech_forSiemensCMD+0x350>)
 800e296:	485c      	ldr	r0, [pc, #368]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e298:	f017 f862 	bl	8025360 <iprintf>
				printf("INVALID_DES_PORT\n");
 800e29c:	4862      	ldr	r0, [pc, #392]	; (800e428 <Chech_forSiemensCMD+0x354>)
 800e29e:	f017 f8fb 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e2a2:	4b5b      	ldr	r3, [pc, #364]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e2a8:	4b59      	ldr	r3, [pc, #356]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f043 0308 	orr.w	r3, r3, #8
 800e2b0:	4a57      	ldr	r2, [pc, #348]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2b2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e2ba:	e08a      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800e2bc:	495b      	ldr	r1, [pc, #364]	; (800e42c <Chech_forSiemensCMD+0x358>)
 800e2be:	4852      	ldr	r0, [pc, #328]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e2c0:	f017 f84e 	bl	8025360 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800e2c4:	485a      	ldr	r0, [pc, #360]	; (800e430 <Chech_forSiemensCMD+0x35c>)
 800e2c6:	f017 f8e7 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e2ca:	4b51      	ldr	r3, [pc, #324]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e2d0:	4b4f      	ldr	r3, [pc, #316]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f043 0310 	orr.w	r3, r3, #16
 800e2d8:	4a4d      	ldr	r2, [pc, #308]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2da:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e2e2:	e076      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800e2e4:	4953      	ldr	r1, [pc, #332]	; (800e434 <Chech_forSiemensCMD+0x360>)
 800e2e6:	4848      	ldr	r0, [pc, #288]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e2e8:	f017 f83a 	bl	8025360 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800e2ec:	4852      	ldr	r0, [pc, #328]	; (800e438 <Chech_forSiemensCMD+0x364>)
 800e2ee:	f017 f8d3 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e2f2:	4b47      	ldr	r3, [pc, #284]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e2f8:	4b45      	ldr	r3, [pc, #276]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f043 0320 	orr.w	r3, r3, #32
 800e300:	4a43      	ldr	r2, [pc, #268]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e302:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e304:	2301      	movs	r3, #1
 800e306:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e30a:	e062      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800e30c:	494b      	ldr	r1, [pc, #300]	; (800e43c <Chech_forSiemensCMD+0x368>)
 800e30e:	484c      	ldr	r0, [pc, #304]	; (800e440 <Chech_forSiemensCMD+0x36c>)
 800e310:	f017 f826 	bl	8025360 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800e314:	484b      	ldr	r0, [pc, #300]	; (800e444 <Chech_forSiemensCMD+0x370>)
 800e316:	f017 f8bf 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e31a:	4b3d      	ldr	r3, [pc, #244]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e320:	4b3b      	ldr	r3, [pc, #236]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e328:	4a39      	ldr	r2, [pc, #228]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e32a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e32c:	2301      	movs	r3, #1
 800e32e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e332:	e04e      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800e334:	4944      	ldr	r1, [pc, #272]	; (800e448 <Chech_forSiemensCMD+0x374>)
 800e336:	4834      	ldr	r0, [pc, #208]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e338:	f017 f812 	bl	8025360 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800e33c:	4843      	ldr	r0, [pc, #268]	; (800e44c <Chech_forSiemensCMD+0x378>)
 800e33e:	f017 f8ab 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e342:	4b33      	ldr	r3, [pc, #204]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e344:	2200      	movs	r2, #0
 800e346:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e348:	4b31      	ldr	r3, [pc, #196]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e350:	4a2f      	ldr	r2, [pc, #188]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e352:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e354:	2301      	movs	r3, #1
 800e356:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e35a:	e03a      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800e35c:	493c      	ldr	r1, [pc, #240]	; (800e450 <Chech_forSiemensCMD+0x37c>)
 800e35e:	482a      	ldr	r0, [pc, #168]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e360:	f016 fffe 	bl	8025360 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800e364:	483b      	ldr	r0, [pc, #236]	; (800e454 <Chech_forSiemensCMD+0x380>)
 800e366:	f017 f897 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e36a:	4b29      	ldr	r3, [pc, #164]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e370:	4b27      	ldr	r3, [pc, #156]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e378:	4a25      	ldr	r2, [pc, #148]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e37a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e37c:	2301      	movs	r3, #1
 800e37e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e382:	e026      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800e384:	4934      	ldr	r1, [pc, #208]	; (800e458 <Chech_forSiemensCMD+0x384>)
 800e386:	4820      	ldr	r0, [pc, #128]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e388:	f016 ffea 	bl	8025360 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800e38c:	4833      	ldr	r0, [pc, #204]	; (800e45c <Chech_forSiemensCMD+0x388>)
 800e38e:	f017 f883 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e392:	4b1f      	ldr	r3, [pc, #124]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e394:	2200      	movs	r2, #0
 800e396:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e398:	4b1d      	ldr	r3, [pc, #116]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e3a0:	4a1b      	ldr	r2, [pc, #108]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e3a2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e3aa:	e012      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800e3ac:	492c      	ldr	r1, [pc, #176]	; (800e460 <Chech_forSiemensCMD+0x38c>)
 800e3ae:	4816      	ldr	r0, [pc, #88]	; (800e408 <Chech_forSiemensCMD+0x334>)
 800e3b0:	f016 ffd6 	bl	8025360 <iprintf>
				printf("CLEAR ALL\n");
 800e3b4:	482b      	ldr	r0, [pc, #172]	; (800e464 <Chech_forSiemensCMD+0x390>)
 800e3b6:	f017 f86f 	bl	8025498 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e3ba:	4b15      	ldr	r3, [pc, #84]	; (800e410 <Chech_forSiemensCMD+0x33c>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e3c6:	e004      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800e3c8:	480d      	ldr	r0, [pc, #52]	; (800e400 <Chech_forSiemensCMD+0x32c>)
 800e3ca:	f017 f865 	bl	8025498 <puts>
 800e3ce:	e000      	b.n	800e3d2 <Chech_forSiemensCMD+0x2fe>
			}
		}
 800e3d0:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800e3d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d147      	bne.n	800e46a <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800e3da:	f240 2005 	movw	r0, #517	; 0x205
 800e3de:	f002 fa03 	bl	80107e8 <TransmitCanPkt>
 800e3e2:	e042      	b.n	800e46a <Chech_forSiemensCMD+0x396>
 800e3e4:	2000ad68 	.word	0x2000ad68
 800e3e8:	08029078 	.word	0x08029078
 800e3ec:	200009b4 	.word	0x200009b4
 800e3f0:	08029090 	.word	0x08029090
 800e3f4:	20004cda 	.word	0x20004cda
 800e3f8:	080290d0 	.word	0x080290d0
 800e3fc:	200009b5 	.word	0x200009b5
 800e400:	080290e4 	.word	0x080290e4
 800e404:	20004d0c 	.word	0x20004d0c
 800e408:	08029100 	.word	0x08029100
 800e40c:	08029110 	.word	0x08029110
 800e410:	20003968 	.word	0x20003968
 800e414:	20004d3e 	.word	0x20004d3e
 800e418:	08029128 	.word	0x08029128
 800e41c:	20004d70 	.word	0x20004d70
 800e420:	08029140 	.word	0x08029140
 800e424:	20004da2 	.word	0x20004da2
 800e428:	08029154 	.word	0x08029154
 800e42c:	20004dd4 	.word	0x20004dd4
 800e430:	08029168 	.word	0x08029168
 800e434:	20004e06 	.word	0x20004e06
 800e438:	0802917c 	.word	0x0802917c
 800e43c:	20004e38 	.word	0x20004e38
 800e440:	08029198 	.word	0x08029198
 800e444:	080291b0 	.word	0x080291b0
 800e448:	20004e6a 	.word	0x20004e6a
 800e44c:	080291c4 	.word	0x080291c4
 800e450:	20004e9c 	.word	0x20004e9c
 800e454:	080291dc 	.word	0x080291dc
 800e458:	20004ece 	.word	0x20004ece
 800e45c:	080291fc 	.word	0x080291fc
 800e460:	20004f00 	.word	0x20004f00
 800e464:	0802921c 	.word	0x0802921c
		return;
 800e468:	bf00      	nop
		}
	}
}
 800e46a:	3768      	adds	r7, #104	; 0x68
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800e470:	b4b0      	push	{r4, r5, r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800e476:	2300      	movs	r3, #0
 800e478:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800e47a:	79fb      	ldrb	r3, [r7, #7]
 800e47c:	4aa6      	ldr	r2, [pc, #664]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e47e:	2132      	movs	r1, #50	; 0x32
 800e480:	fb01 f303 	mul.w	r3, r1, r3
 800e484:	4413      	add	r3, r2
 800e486:	2224      	movs	r2, #36	; 0x24
 800e488:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800e48a:	79fb      	ldrb	r3, [r7, #7]
 800e48c:	4aa2      	ldr	r2, [pc, #648]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e48e:	2132      	movs	r1, #50	; 0x32
 800e490:	fb01 f303 	mul.w	r3, r1, r3
 800e494:	4413      	add	r3, r2
 800e496:	3301      	adds	r3, #1
 800e498:	2201      	movs	r2, #1
 800e49a:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800e49c:	79fb      	ldrb	r3, [r7, #7]
 800e49e:	4a9e      	ldr	r2, [pc, #632]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e4a0:	2132      	movs	r1, #50	; 0x32
 800e4a2:	fb01 f303 	mul.w	r3, r1, r3
 800e4a6:	4413      	add	r3, r2
 800e4a8:	3302      	adds	r3, #2
 800e4aa:	2230      	movs	r2, #48	; 0x30
 800e4ac:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	4a99      	ldr	r2, [pc, #612]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e4b2:	2132      	movs	r1, #50	; 0x32
 800e4b4:	fb01 f303 	mul.w	r3, r1, r3
 800e4b8:	4413      	add	r3, r2
 800e4ba:	3303      	adds	r3, #3
 800e4bc:	2240      	movs	r2, #64	; 0x40
 800e4be:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	4a95      	ldr	r2, [pc, #596]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e4c4:	2132      	movs	r1, #50	; 0x32
 800e4c6:	fb01 f303 	mul.w	r3, r1, r3
 800e4ca:	4413      	add	r3, r2
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	22c0      	movs	r2, #192	; 0xc0
 800e4d0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800e4d2:	79fb      	ldrb	r3, [r7, #7]
 800e4d4:	4a90      	ldr	r2, [pc, #576]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e4d6:	2132      	movs	r1, #50	; 0x32
 800e4d8:	fb01 f303 	mul.w	r3, r1, r3
 800e4dc:	4413      	add	r3, r2
 800e4de:	3305      	adds	r3, #5
 800e4e0:	224e      	movs	r2, #78	; 0x4e
 800e4e2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800e4e4:	79fb      	ldrb	r3, [r7, #7]
 800e4e6:	4a8c      	ldr	r2, [pc, #560]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e4e8:	2132      	movs	r1, #50	; 0x32
 800e4ea:	fb01 f303 	mul.w	r3, r1, r3
 800e4ee:	4413      	add	r3, r2
 800e4f0:	3306      	adds	r3, #6
 800e4f2:	2226      	movs	r2, #38	; 0x26
 800e4f4:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800e4fc:	79fb      	ldrb	r3, [r7, #7]
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	71fa      	strb	r2, [r7, #7]
 800e502:	461a      	mov	r2, r3
 800e504:	2332      	movs	r3, #50	; 0x32
 800e506:	fb02 f303 	mul.w	r3, r2, r3
 800e50a:	4a83      	ldr	r2, [pc, #524]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e50c:	4413      	add	r3, r2
 800e50e:	4983      	ldr	r1, [pc, #524]	; (800e71c <Update_SiemensCommands+0x2ac>)
 800e510:	461a      	mov	r2, r3
 800e512:	460b      	mov	r3, r1
 800e514:	cb03      	ldmia	r3!, {r0, r1}
 800e516:	6010      	str	r0, [r2, #0]
 800e518:	6051      	str	r1, [r2, #4]
 800e51a:	8819      	ldrh	r1, [r3, #0]
 800e51c:	789b      	ldrb	r3, [r3, #2]
 800e51e:	8111      	strh	r1, [r2, #8]
 800e520:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800e522:	79fb      	ldrb	r3, [r7, #7]
 800e524:	1c5a      	adds	r2, r3, #1
 800e526:	71fa      	strb	r2, [r7, #7]
 800e528:	461a      	mov	r2, r3
 800e52a:	2332      	movs	r3, #50	; 0x32
 800e52c:	fb02 f303 	mul.w	r3, r2, r3
 800e530:	4a79      	ldr	r2, [pc, #484]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e532:	4413      	add	r3, r2
 800e534:	4a7a      	ldr	r2, [pc, #488]	; (800e720 <Update_SiemensCommands+0x2b0>)
 800e536:	461d      	mov	r5, r3
 800e538:	4614      	mov	r4, r2
 800e53a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e53c:	6028      	str	r0, [r5, #0]
 800e53e:	6069      	str	r1, [r5, #4]
 800e540:	60aa      	str	r2, [r5, #8]
 800e542:	60eb      	str	r3, [r5, #12]
 800e544:	6820      	ldr	r0, [r4, #0]
 800e546:	6128      	str	r0, [r5, #16]
 800e548:	7923      	ldrb	r3, [r4, #4]
 800e54a:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800e54c:	79fb      	ldrb	r3, [r7, #7]
 800e54e:	1c5a      	adds	r2, r3, #1
 800e550:	71fa      	strb	r2, [r7, #7]
 800e552:	461a      	mov	r2, r3
 800e554:	2332      	movs	r3, #50	; 0x32
 800e556:	fb02 f303 	mul.w	r3, r2, r3
 800e55a:	4a6f      	ldr	r2, [pc, #444]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e55c:	4413      	add	r3, r2
 800e55e:	4a71      	ldr	r2, [pc, #452]	; (800e724 <Update_SiemensCommands+0x2b4>)
 800e560:	461d      	mov	r5, r3
 800e562:	4614      	mov	r4, r2
 800e564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e566:	6028      	str	r0, [r5, #0]
 800e568:	6069      	str	r1, [r5, #4]
 800e56a:	60aa      	str	r2, [r5, #8]
 800e56c:	60eb      	str	r3, [r5, #12]
 800e56e:	6820      	ldr	r0, [r4, #0]
 800e570:	6128      	str	r0, [r5, #16]
 800e572:	7923      	ldrb	r3, [r4, #4]
 800e574:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	71fa      	strb	r2, [r7, #7]
 800e57c:	461a      	mov	r2, r3
 800e57e:	2332      	movs	r3, #50	; 0x32
 800e580:	fb02 f303 	mul.w	r3, r2, r3
 800e584:	4a64      	ldr	r2, [pc, #400]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e586:	4413      	add	r3, r2
 800e588:	4a67      	ldr	r2, [pc, #412]	; (800e728 <Update_SiemensCommands+0x2b8>)
 800e58a:	461d      	mov	r5, r3
 800e58c:	4614      	mov	r4, r2
 800e58e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e590:	6028      	str	r0, [r5, #0]
 800e592:	6069      	str	r1, [r5, #4]
 800e594:	60aa      	str	r2, [r5, #8]
 800e596:	60eb      	str	r3, [r5, #12]
 800e598:	7823      	ldrb	r3, [r4, #0]
 800e59a:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	71fa      	strb	r2, [r7, #7]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	2332      	movs	r3, #50	; 0x32
 800e5a6:	fb02 f303 	mul.w	r3, r2, r3
 800e5aa:	4a5b      	ldr	r2, [pc, #364]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e5ac:	4413      	add	r3, r2
 800e5ae:	4a5f      	ldr	r2, [pc, #380]	; (800e72c <Update_SiemensCommands+0x2bc>)
 800e5b0:	461d      	mov	r5, r3
 800e5b2:	4614      	mov	r4, r2
 800e5b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5b6:	6028      	str	r0, [r5, #0]
 800e5b8:	6069      	str	r1, [r5, #4]
 800e5ba:	60aa      	str	r2, [r5, #8]
 800e5bc:	60eb      	str	r3, [r5, #12]
 800e5be:	7823      	ldrb	r3, [r4, #0]
 800e5c0:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800e5c2:	79fb      	ldrb	r3, [r7, #7]
 800e5c4:	1c5a      	adds	r2, r3, #1
 800e5c6:	71fa      	strb	r2, [r7, #7]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	2332      	movs	r3, #50	; 0x32
 800e5cc:	fb02 f303 	mul.w	r3, r2, r3
 800e5d0:	4a51      	ldr	r2, [pc, #324]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e5d2:	4413      	add	r3, r2
 800e5d4:	4a56      	ldr	r2, [pc, #344]	; (800e730 <Update_SiemensCommands+0x2c0>)
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	4614      	mov	r4, r2
 800e5da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5dc:	6028      	str	r0, [r5, #0]
 800e5de:	6069      	str	r1, [r5, #4]
 800e5e0:	60aa      	str	r2, [r5, #8]
 800e5e2:	60eb      	str	r3, [r5, #12]
 800e5e4:	7823      	ldrb	r3, [r4, #0]
 800e5e6:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800e5e8:	79fb      	ldrb	r3, [r7, #7]
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	71fa      	strb	r2, [r7, #7]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	2332      	movs	r3, #50	; 0x32
 800e5f2:	fb02 f303 	mul.w	r3, r2, r3
 800e5f6:	4a48      	ldr	r2, [pc, #288]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e5f8:	4413      	add	r3, r2
 800e5fa:	4a4e      	ldr	r2, [pc, #312]	; (800e734 <Update_SiemensCommands+0x2c4>)
 800e5fc:	461d      	mov	r5, r3
 800e5fe:	4614      	mov	r4, r2
 800e600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e602:	6028      	str	r0, [r5, #0]
 800e604:	6069      	str	r1, [r5, #4]
 800e606:	60aa      	str	r2, [r5, #8]
 800e608:	60eb      	str	r3, [r5, #12]
 800e60a:	cc03      	ldmia	r4!, {r0, r1}
 800e60c:	6128      	str	r0, [r5, #16]
 800e60e:	6169      	str	r1, [r5, #20]
 800e610:	8823      	ldrh	r3, [r4, #0]
 800e612:	78a2      	ldrb	r2, [r4, #2]
 800e614:	832b      	strh	r3, [r5, #24]
 800e616:	4613      	mov	r3, r2
 800e618:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	71fa      	strb	r2, [r7, #7]
 800e620:	461a      	mov	r2, r3
 800e622:	2332      	movs	r3, #50	; 0x32
 800e624:	fb02 f303 	mul.w	r3, r2, r3
 800e628:	4a3b      	ldr	r2, [pc, #236]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e62a:	4413      	add	r3, r2
 800e62c:	4a42      	ldr	r2, [pc, #264]	; (800e738 <Update_SiemensCommands+0x2c8>)
 800e62e:	461d      	mov	r5, r3
 800e630:	4614      	mov	r4, r2
 800e632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e634:	6028      	str	r0, [r5, #0]
 800e636:	6069      	str	r1, [r5, #4]
 800e638:	60aa      	str	r2, [r5, #8]
 800e63a:	60eb      	str	r3, [r5, #12]
 800e63c:	8823      	ldrh	r3, [r4, #0]
 800e63e:	78a2      	ldrb	r2, [r4, #2]
 800e640:	822b      	strh	r3, [r5, #16]
 800e642:	4613      	mov	r3, r2
 800e644:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800e646:	79fb      	ldrb	r3, [r7, #7]
 800e648:	1c5a      	adds	r2, r3, #1
 800e64a:	71fa      	strb	r2, [r7, #7]
 800e64c:	461a      	mov	r2, r3
 800e64e:	2332      	movs	r3, #50	; 0x32
 800e650:	fb02 f303 	mul.w	r3, r2, r3
 800e654:	4a30      	ldr	r2, [pc, #192]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e656:	4413      	add	r3, r2
 800e658:	4a38      	ldr	r2, [pc, #224]	; (800e73c <Update_SiemensCommands+0x2cc>)
 800e65a:	461d      	mov	r5, r3
 800e65c:	4614      	mov	r4, r2
 800e65e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e660:	6028      	str	r0, [r5, #0]
 800e662:	6069      	str	r1, [r5, #4]
 800e664:	60aa      	str	r2, [r5, #8]
 800e666:	60eb      	str	r3, [r5, #12]
 800e668:	cc03      	ldmia	r4!, {r0, r1}
 800e66a:	6128      	str	r0, [r5, #16]
 800e66c:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800e66e:	79fb      	ldrb	r3, [r7, #7]
 800e670:	1c5a      	adds	r2, r3, #1
 800e672:	71fa      	strb	r2, [r7, #7]
 800e674:	461a      	mov	r2, r3
 800e676:	2332      	movs	r3, #50	; 0x32
 800e678:	fb02 f303 	mul.w	r3, r2, r3
 800e67c:	4a26      	ldr	r2, [pc, #152]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e67e:	4413      	add	r3, r2
 800e680:	4a2f      	ldr	r2, [pc, #188]	; (800e740 <Update_SiemensCommands+0x2d0>)
 800e682:	461c      	mov	r4, r3
 800e684:	4615      	mov	r5, r2
 800e686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e688:	6020      	str	r0, [r4, #0]
 800e68a:	6061      	str	r1, [r4, #4]
 800e68c:	60a2      	str	r2, [r4, #8]
 800e68e:	60e3      	str	r3, [r4, #12]
 800e690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e692:	6120      	str	r0, [r4, #16]
 800e694:	6161      	str	r1, [r4, #20]
 800e696:	61a2      	str	r2, [r4, #24]
 800e698:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800e69a:	79fb      	ldrb	r3, [r7, #7]
 800e69c:	1c5a      	adds	r2, r3, #1
 800e69e:	71fa      	strb	r2, [r7, #7]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	2332      	movs	r3, #50	; 0x32
 800e6a4:	fb02 f303 	mul.w	r3, r2, r3
 800e6a8:	4a1b      	ldr	r2, [pc, #108]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e6aa:	4413      	add	r3, r2
 800e6ac:	4a25      	ldr	r2, [pc, #148]	; (800e744 <Update_SiemensCommands+0x2d4>)
 800e6ae:	461d      	mov	r5, r3
 800e6b0:	4614      	mov	r4, r2
 800e6b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6b4:	6028      	str	r0, [r5, #0]
 800e6b6:	6069      	str	r1, [r5, #4]
 800e6b8:	60aa      	str	r2, [r5, #8]
 800e6ba:	60eb      	str	r3, [r5, #12]
 800e6bc:	cc07      	ldmia	r4!, {r0, r1, r2}
 800e6be:	6128      	str	r0, [r5, #16]
 800e6c0:	6169      	str	r1, [r5, #20]
 800e6c2:	61aa      	str	r2, [r5, #24]
 800e6c4:	7823      	ldrb	r3, [r4, #0]
 800e6c6:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	1c5a      	adds	r2, r3, #1
 800e6cc:	71fa      	strb	r2, [r7, #7]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	2332      	movs	r3, #50	; 0x32
 800e6d2:	fb02 f303 	mul.w	r3, r2, r3
 800e6d6:	4a10      	ldr	r2, [pc, #64]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e6d8:	4413      	add	r3, r2
 800e6da:	491b      	ldr	r1, [pc, #108]	; (800e748 <Update_SiemensCommands+0x2d8>)
 800e6dc:	461a      	mov	r2, r3
 800e6de:	460b      	mov	r3, r1
 800e6e0:	cb03      	ldmia	r3!, {r0, r1}
 800e6e2:	6010      	str	r0, [r2, #0]
 800e6e4:	6051      	str	r1, [r2, #4]
 800e6e6:	881b      	ldrh	r3, [r3, #0]
 800e6e8:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	71fa      	strb	r2, [r7, #7]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	2332      	movs	r3, #50	; 0x32
 800e6f4:	fb02 f303 	mul.w	r3, r2, r3
 800e6f8:	4a07      	ldr	r2, [pc, #28]	; (800e718 <Update_SiemensCommands+0x2a8>)
 800e6fa:	4413      	add	r3, r2
 800e6fc:	4a13      	ldr	r2, [pc, #76]	; (800e74c <Update_SiemensCommands+0x2dc>)
 800e6fe:	6810      	ldr	r0, [r2, #0]
 800e700:	6018      	str	r0, [r3, #0]
 800e702:	7912      	ldrb	r2, [r2, #4]
 800e704:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800e706:	4a12      	ldr	r2, [pc, #72]	; (800e750 <Update_SiemensCommands+0x2e0>)
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	7013      	strb	r3, [r2, #0]
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	bcb0      	pop	{r4, r5, r7}
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	20004ca8 	.word	0x20004ca8
 800e71c:	08029228 	.word	0x08029228
 800e720:	08029110 	.word	0x08029110
 800e724:	08029128 	.word	0x08029128
 800e728:	08029140 	.word	0x08029140
 800e72c:	08029154 	.word	0x08029154
 800e730:	08029168 	.word	0x08029168
 800e734:	08029234 	.word	0x08029234
 800e738:	080291b0 	.word	0x080291b0
 800e73c:	080291c4 	.word	0x080291c4
 800e740:	080291dc 	.word	0x080291dc
 800e744:	080291fc 	.word	0x080291fc
 800e748:	08029250 	.word	0x08029250
 800e74c:	0802925c 	.word	0x0802925c
 800e750:	20005090 	.word	0x20005090

0800e754 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800e754:	b590      	push	{r4, r7, lr}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800e760:	2300      	movs	r3, #0
 800e762:	73fb      	strb	r3, [r7, #15]
 800e764:	e01c      	b.n	800e7a0 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800e766:	7bfb      	ldrb	r3, [r7, #15]
 800e768:	2232      	movs	r2, #50	; 0x32
 800e76a:	fb02 f303 	mul.w	r3, r2, r3
 800e76e:	4a11      	ldr	r2, [pc, #68]	; (800e7b4 <Is_SiemensCommand_Valid+0x60>)
 800e770:	189c      	adds	r4, r3, r2
 800e772:	7bfb      	ldrb	r3, [r7, #15]
 800e774:	2232      	movs	r2, #50	; 0x32
 800e776:	fb02 f303 	mul.w	r3, r2, r3
 800e77a:	4a0e      	ldr	r2, [pc, #56]	; (800e7b4 <Is_SiemensCommand_Valid+0x60>)
 800e77c:	4413      	add	r3, r2
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f1 fd68 	bl	8000254 <strlen>
 800e784:	4603      	mov	r3, r0
 800e786:	461a      	mov	r2, r3
 800e788:	4621      	mov	r1, r4
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f016 fcc8 	bl	8025120 <memcmp>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d101      	bne.n	800e79a <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800e796:	7bfb      	ldrb	r3, [r7, #15]
 800e798:	e008      	b.n	800e7ac <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800e79a:	7bfb      	ldrb	r3, [r7, #15]
 800e79c:	3301      	adds	r3, #1
 800e79e:	73fb      	strb	r3, [r7, #15]
 800e7a0:	4b05      	ldr	r3, [pc, #20]	; (800e7b8 <Is_SiemensCommand_Valid+0x64>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	7bfa      	ldrb	r2, [r7, #15]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d3dd      	bcc.n	800e766 <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800e7aa:	23ff      	movs	r3, #255	; 0xff
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd90      	pop	{r4, r7, pc}
 800e7b4:	20004ca8 	.word	0x20004ca8
 800e7b8:	20005090 	.word	0x20005090

0800e7bc <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b087      	sub	sp, #28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800e7c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e7cc:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	82bb      	strh	r3, [r7, #20]
 800e7da:	e022      	b.n	800e822 <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800e7dc:	8abb      	ldrh	r3, [r7, #20]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	8afb      	ldrh	r3, [r7, #22]
 800e7e8:	4053      	eors	r3, r2
 800e7ea:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	613b      	str	r3, [r7, #16]
 800e7f0:	e011      	b.n	800e816 <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800e7f2:	8afb      	ldrh	r3, [r7, #22]
 800e7f4:	f003 0301 	and.w	r3, r3, #1
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d006      	beq.n	800e80a <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800e7fc:	8afb      	ldrh	r3, [r7, #22]
 800e7fe:	085b      	lsrs	r3, r3, #1
 800e800:	b29a      	uxth	r2, r3
 800e802:	4b17      	ldr	r3, [pc, #92]	; (800e860 <Siemens_CRC+0xa4>)
 800e804:	4053      	eors	r3, r2
 800e806:	82fb      	strh	r3, [r7, #22]
 800e808:	e002      	b.n	800e810 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800e80a:	8afb      	ldrh	r3, [r7, #22]
 800e80c:	085b      	lsrs	r3, r3, #1
 800e80e:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	3301      	adds	r3, #1
 800e814:	613b      	str	r3, [r7, #16]
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	2b07      	cmp	r3, #7
 800e81a:	ddea      	ble.n	800e7f2 <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800e81c:	8abb      	ldrh	r3, [r7, #20]
 800e81e:	3301      	adds	r3, #1
 800e820:	82bb      	strh	r3, [r7, #20]
 800e822:	8aba      	ldrh	r2, [r7, #20]
 800e824:	887b      	ldrh	r3, [r7, #2]
 800e826:	429a      	cmp	r2, r3
 800e828:	d3d8      	bcc.n	800e7dc <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800e82a:	8afb      	ldrh	r3, [r7, #22]
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800e830:	8afb      	ldrh	r3, [r7, #22]
 800e832:	0a1b      	lsrs	r3, r3, #8
 800e834:	b29b      	uxth	r3, r3
 800e836:	b2db      	uxtb	r3, r3
 800e838:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800e83a:	7b3b      	ldrb	r3, [r7, #12]
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	b21a      	sxth	r2, r3
 800e840:	7b7b      	ldrb	r3, [r7, #13]
 800e842:	b21b      	sxth	r3, r3
 800e844:	4313      	orrs	r3, r2
 800e846:	b21b      	sxth	r3, r3
 800e848:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800e84a:	8afb      	ldrh	r3, [r7, #22]
 800e84c:	43db      	mvns	r3, r3
 800e84e:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800e850:	8afb      	ldrh	r3, [r7, #22]
}
 800e852:	4618      	mov	r0, r3
 800e854:	371c      	adds	r7, #28
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	ffff8408 	.word	0xffff8408

0800e864 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	603a      	str	r2, [r7, #0]
 800e86c:	461a      	mov	r2, r3
 800e86e:	4603      	mov	r3, r0
 800e870:	71fb      	strb	r3, [r7, #7]
 800e872:	460b      	mov	r3, r1
 800e874:	71bb      	strb	r3, [r7, #6]
 800e876:	4613      	mov	r3, r2
 800e878:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800e882:	797b      	ldrb	r3, [r7, #5]
 800e884:	2b02      	cmp	r3, #2
 800e886:	d010      	beq.n	800e8aa <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800e888:	79bb      	ldrb	r3, [r7, #6]
 800e88a:	08db      	lsrs	r3, r3, #3
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	797a      	ldrb	r2, [r7, #5]
 800e890:	4619      	mov	r1, r3
 800e892:	6838      	ldr	r0, [r7, #0]
 800e894:	f000 f8d0 	bl	800ea38 <Verify_parity>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d110      	bne.n	800e8c0 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800e89e:	4840      	ldr	r0, [pc, #256]	; (800e9a0 <Extract_Parity_Data+0x13c>)
 800e8a0:	f016 fdfa 	bl	8025498 <puts>
			return -1;
 800e8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a8:	e075      	b.n	800e996 <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800e8aa:	79fb      	ldrb	r3, [r7, #7]
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	79ba      	ldrb	r2, [r7, #6]
 800e8b0:	b291      	uxth	r1, r2
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7f1 fead 	bl	8000614 <ExtractBits>
 800e8ba:	6138      	str	r0, [r7, #16]
		return Return_value;
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	e06a      	b.n	800e996 <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800e8c0:	79bb      	ldrb	r3, [r7, #6]
 800e8c2:	2b08      	cmp	r3, #8
 800e8c4:	d108      	bne.n	800e8d8 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8d2:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800e8d4:	7dfb      	ldrb	r3, [r7, #23]
 800e8d6:	e05e      	b.n	800e996 <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800e8d8:	79bb      	ldrb	r3, [r7, #6]
 800e8da:	2b18      	cmp	r3, #24
 800e8dc:	d15a      	bne.n	800e994 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800e8e4:	7dfb      	ldrb	r3, [r7, #23]
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800e8ec:	7dfb      	ldrb	r3, [r7, #23]
 800e8ee:	085b      	lsrs	r3, r3, #1
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	f003 0301 	and.w	r3, r3, #1
 800e8f6:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800e8f8:	7dfb      	ldrb	r3, [r7, #23]
 800e8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8fe:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800e900:	7dfb      	ldrb	r3, [r7, #23]
 800e902:	089b      	lsrs	r3, r3, #2
 800e904:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800e906:	7dfb      	ldrb	r3, [r7, #23]
 800e908:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	785b      	ldrb	r3, [r3, #1]
 800e90e:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800e910:	7dfb      	ldrb	r3, [r7, #23]
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800e918:	7dfb      	ldrb	r3, [r7, #23]
 800e91a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e91e:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800e920:	7dfb      	ldrb	r3, [r7, #23]
 800e922:	085b      	lsrs	r3, r3, #1
 800e924:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800e926:	7bbb      	ldrb	r3, [r7, #14]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d104      	bne.n	800e936 <Extract_Parity_Data+0xd2>
 800e92c:	7dfb      	ldrb	r3, [r7, #23]
 800e92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e932:	75fb      	strb	r3, [r7, #23]
 800e934:	e003      	b.n	800e93e <Extract_Parity_Data+0xda>
 800e936:	7dfb      	ldrb	r3, [r7, #23]
 800e938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e93c:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800e93e:	7bfb      	ldrb	r3, [r7, #15]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d104      	bne.n	800e94e <Extract_Parity_Data+0xea>
 800e944:	7dfb      	ldrb	r3, [r7, #23]
 800e946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e94a:	75fb      	strb	r3, [r7, #23]
 800e94c:	e003      	b.n	800e956 <Extract_Parity_Data+0xf2>
 800e94e:	7dfb      	ldrb	r3, [r7, #23]
 800e950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e954:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	021b      	lsls	r3, r3, #8
 800e95a:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800e95c:	7dfb      	ldrb	r3, [r7, #23]
 800e95e:	693a      	ldr	r2, [r7, #16]
 800e960:	4413      	add	r3, r2
 800e962:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	789b      	ldrb	r3, [r3, #2]
 800e968:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800e96a:	7b7b      	ldrb	r3, [r7, #13]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d104      	bne.n	800e97a <Extract_Parity_Data+0x116>
 800e970:	7dfb      	ldrb	r3, [r7, #23]
 800e972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e976:	75fb      	strb	r3, [r7, #23]
 800e978:	e003      	b.n	800e982 <Extract_Parity_Data+0x11e>
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
 800e97c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e980:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	021b      	lsls	r3, r3, #8
 800e986:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	4413      	add	r3, r2
 800e98e:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	e000      	b.n	800e996 <Extract_Parity_Data+0x132>
	}
	return 0;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	08029264 	.word	0x08029264

0800e9a4 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	460a      	mov	r2, r1
 800e9ae:	71fb      	strb	r3, [r7, #7]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800e9bc:	2306      	movs	r3, #6
 800e9be:	73fb      	strb	r3, [r7, #15]
 800e9c0:	e014      	b.n	800e9ec <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800e9c2:	79fa      	ldrb	r2, [r7, #7]
 800e9c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9c8:	fa42 f303 	asr.w	r3, r2, r3
 800e9cc:	f003 0301 	and.w	r3, r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d005      	beq.n	800e9e0 <Calculate_Parity+0x3c>
		{
			count++;
 800e9d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	3301      	adds	r3, #1
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800e9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	3b01      	subs	r3, #1
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	73fb      	strb	r3, [r7, #15]
 800e9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	dae6      	bge.n	800e9c2 <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800e9f4:	79bb      	ldrb	r3, [r7, #6]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d109      	bne.n	800ea0e <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800e9fa:	7bbb      	ldrb	r3, [r7, #14]
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <Calculate_Parity+0x66>
		{
			return 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	e00f      	b.n	800ea2a <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e00d      	b.n	800ea2a <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800ea0e:	79bb      	ldrb	r3, [r7, #6]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d109      	bne.n	800ea28 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800ea14:	7bbb      	ldrb	r3, [r7, #14]
 800ea16:	f003 0301 	and.w	r3, r3, #1
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <Calculate_Parity+0x80>
		{
			return 1;
 800ea20:	2301      	movs	r3, #1
 800ea22:	e002      	b.n	800ea2a <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800ea24:	2300      	movs	r3, #0
 800ea26:	e000      	b.n	800ea2a <Calculate_Parity+0x86>
		}
	}
	return 0;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3714      	adds	r7, #20
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
	...

0800ea38 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	460b      	mov	r3, r1
 800ea42:	70fb      	strb	r3, [r7, #3]
 800ea44:	4613      	mov	r3, r2
 800ea46:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	73fb      	strb	r3, [r7, #15]
 800ea50:	e03b      	b.n	800eaca <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	4413      	add	r3, r2
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	78ba      	ldrb	r2, [r7, #2]
 800ea5c:	4611      	mov	r1, r2
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7ff ffa0 	bl	800e9a4 <Calculate_Parity>
 800ea64:	4603      	mov	r3, r0
 800ea66:	4619      	mov	r1, r3
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	09db      	lsrs	r3, r3, #7
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	4299      	cmp	r1, r3
 800ea7a:	d023      	beq.n	800eac4 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800ea7c:	7bfb      	ldrb	r3, [r7, #15]
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	4413      	add	r3, r2
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	4619      	mov	r1, r3
 800ea86:	4815      	ldr	r0, [pc, #84]	; (800eadc <Verify_parity+0xa4>)
 800ea88:	f016 fc6a 	bl	8025360 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	4413      	add	r3, r2
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	78ba      	ldrb	r2, [r7, #2]
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff ff83 	bl	800e9a4 <Calculate_Parity>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	480f      	ldr	r0, [pc, #60]	; (800eae0 <Verify_parity+0xa8>)
 800eaa4:	f016 fc5c 	bl	8025360 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	4413      	add	r3, r2
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	09db      	lsrs	r3, r3, #7
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	f003 0301 	and.w	r3, r3, #1
 800eab8:	4619      	mov	r1, r3
 800eaba:	480a      	ldr	r0, [pc, #40]	; (800eae4 <Verify_parity+0xac>)
 800eabc:	f016 fc50 	bl	8025360 <iprintf>
			return 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	e007      	b.n	800ead4 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
 800eac6:	3301      	adds	r3, #1
 800eac8:	73fb      	strb	r3, [r7, #15]
 800eaca:	7bfa      	ldrb	r2, [r7, #15]
 800eacc:	78fb      	ldrb	r3, [r7, #3]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d3bf      	bcc.n	800ea52 <Verify_parity+0x1a>
		}
	}
	return 1;
 800ead2:	2301      	movs	r3, #1
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	08029280 	.word	0x08029280
 800eae0:	08029298 	.word	0x08029298
 800eae4:	080292ac 	.word	0x080292ac

0800eae8 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaec:	b089      	sub	sp, #36	; 0x24
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	60ba      	str	r2, [r7, #8]
 800eaf4:	73fb      	strb	r3, [r7, #15]
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	83fb      	strh	r3, [r7, #30]
 800eafe:	2300      	movs	r3, #0
 800eb00:	83bb      	strh	r3, [r7, #28]
 800eb02:	2300      	movs	r3, #0
 800eb04:	833b      	strh	r3, [r7, #24]
 800eb06:	2300      	movs	r3, #0
 800eb08:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800eb0e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d108      	bne.n	800eb28 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800eb16:	7bfb      	ldrb	r3, [r7, #15]
 800eb18:	b298      	uxth	r0, r3
 800eb1a:	7bbb      	ldrb	r3, [r7, #14]
 800eb1c:	b299      	uxth	r1, r3
 800eb1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb20:	68ba      	ldr	r2, [r7, #8]
 800eb22:	f7f1 fe03 	bl	800072c <InsertBits>
		return;
 800eb26:	e13b      	b.n	800eda0 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800eb28:	7bbb      	ldrb	r3, [r7, #14]
 800eb2a:	2b08      	cmp	r3, #8
 800eb2c:	d12c      	bne.n	800eb88 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800eb2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eb32:	2a80      	cmp	r2, #128	; 0x80
 800eb34:	f173 0300 	sbcs.w	r3, r3, #0
 800eb38:	d303      	bcc.n	800eb42 <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800eb3a:	489b      	ldr	r0, [pc, #620]	; (800eda8 <Insert_cal_parity+0x2c0>)
 800eb3c:	f016 fcac 	bl	8025498 <puts>
			return;
 800eb40:	e12e      	b.n	800eda0 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800eb42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800eb46:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff ff29 	bl	800e9a4 <Calculate_Parity>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d10b      	bne.n	800eb70 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800eb58:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	701a      	strb	r2, [r3, #0]
 800eb6e:	e117      	b.n	800eda0 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800eb70:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb80:	b2da      	uxtb	r2, r3
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	701a      	strb	r2, [r3, #0]
 800eb86:	e10b      	b.n	800eda0 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800eb88:	7bbb      	ldrb	r3, [r7, #14]
 800eb8a:	2b18      	cmp	r3, #24
 800eb8c:	f040 8104 	bne.w	800ed98 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800eb90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eb94:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800eb98:	f173 0300 	sbcs.w	r3, r3, #0
 800eb9c:	d303      	bcc.n	800eba6 <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800eb9e:	4883      	ldr	r0, [pc, #524]	; (800edac <Insert_cal_parity+0x2c4>)
 800eba0:	f016 fc7a 	bl	8025498 <puts>
			return;
 800eba4:	e0fc      	b.n	800eda0 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800ebaa:	2300      	movs	r3, #0
 800ebac:	76bb      	strb	r3, [r7, #26]
 800ebae:	e0ee      	b.n	800ed8e <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800ebb0:	7ebb      	ldrb	r3, [r7, #26]
 800ebb2:	00d9      	lsls	r1, r3, #3
 800ebb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ebb8:	f1c1 0620 	rsb	r6, r1, #32
 800ebbc:	f1a1 0c20 	sub.w	ip, r1, #32
 800ebc0:	fa22 f001 	lsr.w	r0, r2, r1
 800ebc4:	6038      	str	r0, [r7, #0]
 800ebc6:	fa03 f606 	lsl.w	r6, r3, r6
 800ebca:	6838      	ldr	r0, [r7, #0]
 800ebcc:	4330      	orrs	r0, r6
 800ebce:	6038      	str	r0, [r7, #0]
 800ebd0:	fa23 fc0c 	lsr.w	ip, r3, ip
 800ebd4:	6838      	ldr	r0, [r7, #0]
 800ebd6:	ea40 000c 	orr.w	r0, r0, ip
 800ebda:	6038      	str	r0, [r7, #0]
 800ebdc:	40cb      	lsrs	r3, r1
 800ebde:	607b      	str	r3, [r7, #4]
 800ebe0:	783b      	ldrb	r3, [r7, #0]
 800ebe2:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800ebe4:	7ebb      	ldrb	r3, [r7, #26]
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d07a      	beq.n	800ece0 <Insert_cal_parity+0x1f8>
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	f300 8094 	bgt.w	800ed18 <Insert_cal_parity+0x230>
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <Insert_cal_parity+0x112>
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d01f      	beq.n	800ec38 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800ebf8:	e08e      	b.n	800ed18 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800ebfa:	7ebb      	ldrb	r3, [r7, #26]
 800ebfc:	00d9      	lsls	r1, r3, #3
 800ebfe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ec02:	f1c1 0620 	rsb	r6, r1, #32
 800ec06:	f1a1 0020 	sub.w	r0, r1, #32
 800ec0a:	fa22 f401 	lsr.w	r4, r2, r1
 800ec0e:	fa03 f606 	lsl.w	r6, r3, r6
 800ec12:	4334      	orrs	r4, r6
 800ec14:	fa23 f000 	lsr.w	r0, r3, r0
 800ec18:	4304      	orrs	r4, r0
 800ec1a:	fa23 f501 	lsr.w	r5, r3, r1
 800ec1e:	f04f 0200 	mov.w	r2, #0
 800ec22:	f04f 0300 	mov.w	r3, #0
 800ec26:	09e2      	lsrs	r2, r4, #7
 800ec28:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800ec2c:	09eb      	lsrs	r3, r5, #7
 800ec2e:	b293      	uxth	r3, r2
 800ec30:	f003 0301 	and.w	r3, r3, #1
 800ec34:	83fb      	strh	r3, [r7, #30]
					break;
 800ec36:	e070      	b.n	800ed1a <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800ec38:	7efb      	ldrb	r3, [r7, #27]
 800ec3a:	005b      	lsls	r3, r3, #1
 800ec3c:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800ec3e:	8bfb      	ldrh	r3, [r7, #30]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d104      	bne.n	800ec4e <Insert_cal_parity+0x166>
 800ec44:	7efb      	ldrb	r3, [r7, #27]
 800ec46:	f023 0301 	bic.w	r3, r3, #1
 800ec4a:	76fb      	strb	r3, [r7, #27]
 800ec4c:	e003      	b.n	800ec56 <Insert_cal_parity+0x16e>
 800ec4e:	7efb      	ldrb	r3, [r7, #27]
 800ec50:	f043 0301 	orr.w	r3, r3, #1
 800ec54:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800ec56:	7ebb      	ldrb	r3, [r7, #26]
 800ec58:	00d9      	lsls	r1, r3, #3
 800ec5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ec5e:	f1c1 0620 	rsb	r6, r1, #32
 800ec62:	f1a1 0020 	sub.w	r0, r1, #32
 800ec66:	fa22 f801 	lsr.w	r8, r2, r1
 800ec6a:	fa03 f606 	lsl.w	r6, r3, r6
 800ec6e:	ea48 0806 	orr.w	r8, r8, r6
 800ec72:	fa23 f000 	lsr.w	r0, r3, r0
 800ec76:	ea48 0800 	orr.w	r8, r8, r0
 800ec7a:	fa23 f901 	lsr.w	r9, r3, r1
 800ec7e:	f04f 0200 	mov.w	r2, #0
 800ec82:	f04f 0300 	mov.w	r3, #0
 800ec86:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800ec8a:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800ec8e:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800ec92:	b293      	uxth	r3, r2
 800ec94:	f003 0301 	and.w	r3, r3, #1
 800ec98:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800ec9a:	7ebb      	ldrb	r3, [r7, #26]
 800ec9c:	00d9      	lsls	r1, r3, #3
 800ec9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eca2:	f1c1 0620 	rsb	r6, r1, #32
 800eca6:	f1a1 0020 	sub.w	r0, r1, #32
 800ecaa:	fa22 fa01 	lsr.w	sl, r2, r1
 800ecae:	fa03 f606 	lsl.w	r6, r3, r6
 800ecb2:	ea4a 0a06 	orr.w	sl, sl, r6
 800ecb6:	fa23 f000 	lsr.w	r0, r3, r0
 800ecba:	ea4a 0a00 	orr.w	sl, sl, r0
 800ecbe:	fa23 fb01 	lsr.w	fp, r3, r1
 800ecc2:	f04f 0200 	mov.w	r2, #0
 800ecc6:	f04f 0300 	mov.w	r3, #0
 800ecca:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800ecce:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800ecd2:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800ecd6:	b293      	uxth	r3, r2
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	83bb      	strh	r3, [r7, #28]
					break;
 800ecde:	e01c      	b.n	800ed1a <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800ece0:	7efb      	ldrb	r3, [r7, #27]
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800ece6:	8bbb      	ldrh	r3, [r7, #28]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d104      	bne.n	800ecf6 <Insert_cal_parity+0x20e>
 800ecec:	7efb      	ldrb	r3, [r7, #27]
 800ecee:	f023 0301 	bic.w	r3, r3, #1
 800ecf2:	76fb      	strb	r3, [r7, #27]
 800ecf4:	e003      	b.n	800ecfe <Insert_cal_parity+0x216>
 800ecf6:	7efb      	ldrb	r3, [r7, #27]
 800ecf8:	f043 0301 	orr.w	r3, r3, #1
 800ecfc:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800ecfe:	8bfb      	ldrh	r3, [r7, #30]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d104      	bne.n	800ed0e <Insert_cal_parity+0x226>
 800ed04:	7efb      	ldrb	r3, [r7, #27]
 800ed06:	f023 0302 	bic.w	r3, r3, #2
 800ed0a:	76fb      	strb	r3, [r7, #27]
					break;
 800ed0c:	e005      	b.n	800ed1a <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800ed0e:	7efb      	ldrb	r3, [r7, #27]
 800ed10:	f043 0302 	orr.w	r3, r3, #2
 800ed14:	76fb      	strb	r3, [r7, #27]
					break;
 800ed16:	e000      	b.n	800ed1a <Insert_cal_parity+0x232>
					break;
 800ed18:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800ed1a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ed1e:	7efb      	ldrb	r3, [r7, #27]
 800ed20:	4611      	mov	r1, r2
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7ff fe3e 	bl	800e9a4 <Calculate_Parity>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d116      	bne.n	800ed5c <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800ed2e:	7ebb      	ldrb	r3, [r7, #26]
 800ed30:	f1c3 0302 	rsb	r3, r3, #2
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	4413      	add	r3, r2
 800ed38:	7efa      	ldrb	r2, [r7, #27]
 800ed3a:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800ed3c:	7ebb      	ldrb	r3, [r7, #26]
 800ed3e:	f1c3 0302 	rsb	r3, r3, #2
 800ed42:	68ba      	ldr	r2, [r7, #8]
 800ed44:	4413      	add	r3, r2
 800ed46:	781a      	ldrb	r2, [r3, #0]
 800ed48:	7ebb      	ldrb	r3, [r7, #26]
 800ed4a:	f1c3 0302 	rsb	r3, r3, #2
 800ed4e:	68b9      	ldr	r1, [r7, #8]
 800ed50:	440b      	add	r3, r1
 800ed52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed56:	b2d2      	uxtb	r2, r2
 800ed58:	701a      	strb	r2, [r3, #0]
 800ed5a:	e015      	b.n	800ed88 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800ed5c:	7ebb      	ldrb	r3, [r7, #26]
 800ed5e:	f1c3 0302 	rsb	r3, r3, #2
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	4413      	add	r3, r2
 800ed66:	7efa      	ldrb	r2, [r7, #27]
 800ed68:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800ed6a:	7ebb      	ldrb	r3, [r7, #26]
 800ed6c:	f1c3 0302 	rsb	r3, r3, #2
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	4413      	add	r3, r2
 800ed74:	781a      	ldrb	r2, [r3, #0]
 800ed76:	7ebb      	ldrb	r3, [r7, #26]
 800ed78:	f1c3 0302 	rsb	r3, r3, #2
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	440b      	add	r3, r1
 800ed80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ed84:	b2d2      	uxtb	r2, r2
 800ed86:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800ed88:	7ebb      	ldrb	r3, [r7, #26]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	76bb      	strb	r3, [r7, #26]
 800ed8e:	7ebb      	ldrb	r3, [r7, #26]
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	f67f af0d 	bls.w	800ebb0 <Insert_cal_parity+0xc8>
 800ed96:	e003      	b.n	800eda0 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800ed98:	4805      	ldr	r0, [pc, #20]	; (800edb0 <Insert_cal_parity+0x2c8>)
 800ed9a:	f016 fb7d 	bl	8025498 <puts>
		return;
 800ed9e:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800eda0:	3724      	adds	r7, #36	; 0x24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda8:	080292c4 	.word	0x080292c4
 800edac:	080292f8 	.word	0x080292f8
 800edb0:	0802932c 	.word	0x0802932c

0800edb4 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	460b      	mov	r3, r1
 800edbe:	807b      	strh	r3, [r7, #2]
 800edc0:	4613      	mov	r3, r2
 800edc2:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800edcc:	787b      	ldrb	r3, [r7, #1]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d133      	bne.n	800ee3a <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800edd2:	887b      	ldrh	r3, [r7, #2]
 800edd4:	085b      	lsrs	r3, r3, #1
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	3b02      	subs	r3, #2
 800edda:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800eddc:	2300      	movs	r3, #0
 800edde:	81fb      	strh	r3, [r7, #14]
 800ede0:	e025      	b.n	800ee2e <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800ede2:	89fb      	ldrh	r3, [r7, #14]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	4413      	add	r3, r2
 800ede8:	781a      	ldrb	r2, [r3, #0]
 800edea:	89f9      	ldrh	r1, [r7, #14]
 800edec:	89bb      	ldrh	r3, [r7, #12]
 800edee:	440b      	add	r3, r1
 800edf0:	3302      	adds	r3, #2
 800edf2:	6879      	ldr	r1, [r7, #4]
 800edf4:	440b      	add	r3, r1
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	43db      	mvns	r3, r3
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d013      	beq.n	800ee28 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800ee00:	89fb      	ldrh	r3, [r7, #14]
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	4413      	add	r3, r2
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	89fa      	ldrh	r2, [r7, #14]
 800ee0c:	89bb      	ldrh	r3, [r7, #12]
 800ee0e:	4413      	add	r3, r2
 800ee10:	3302      	adds	r3, #2
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	4413      	add	r3, r2
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	43db      	mvns	r3, r3
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	481a      	ldr	r0, [pc, #104]	; (800ee88 <Data_Compliment+0xd4>)
 800ee20:	f016 fa9e 	bl	8025360 <iprintf>
				return 0;
 800ee24:	2300      	movs	r3, #0
 800ee26:	e02b      	b.n	800ee80 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800ee28:	89fb      	ldrh	r3, [r7, #14]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	81fb      	strh	r3, [r7, #14]
 800ee2e:	89fa      	ldrh	r2, [r7, #14]
 800ee30:	89bb      	ldrh	r3, [r7, #12]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d3d5      	bcc.n	800ede2 <Data_Compliment+0x2e>
			}
		}
		return 1;
 800ee36:	2301      	movs	r3, #1
 800ee38:	e022      	b.n	800ee80 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800ee3a:	787b      	ldrb	r3, [r7, #1]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d11e      	bne.n	800ee7e <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800ee40:	2300      	movs	r3, #0
 800ee42:	81fb      	strh	r3, [r7, #14]
 800ee44:	e010      	b.n	800ee68 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800ee46:	89fb      	ldrh	r3, [r7, #14]
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	781a      	ldrb	r2, [r3, #0]
 800ee4e:	89fb      	ldrh	r3, [r7, #14]
 800ee50:	1c99      	adds	r1, r3, #2
 800ee52:	887b      	ldrh	r3, [r7, #2]
 800ee54:	440b      	add	r3, r1
 800ee56:	4619      	mov	r1, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	440b      	add	r3, r1
 800ee5c:	43d2      	mvns	r2, r2
 800ee5e:	b2d2      	uxtb	r2, r2
 800ee60:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800ee62:	89fb      	ldrh	r3, [r7, #14]
 800ee64:	3301      	adds	r3, #1
 800ee66:	81fb      	strh	r3, [r7, #14]
 800ee68:	89fa      	ldrh	r2, [r7, #14]
 800ee6a:	887b      	ldrh	r3, [r7, #2]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d3ea      	bcc.n	800ee46 <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800ee70:	89fa      	ldrh	r2, [r7, #14]
 800ee72:	887b      	ldrh	r3, [r7, #2]
 800ee74:	4413      	add	r3, r2
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	3302      	adds	r3, #2
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	e000      	b.n	800ee80 <Data_Compliment+0xcc>
	}
	return 0;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0802933c 	.word	0x0802933c

0800ee8c <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800ee96:	4b1a      	ldr	r3, [pc, #104]	; (800ef00 <CheckToSendReplyorNot+0x74>)
 800ee98:	785b      	ldrb	r3, [r3, #1]
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d104      	bne.n	800eea8 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	f043 0301 	orr.w	r3, r3, #1
 800eea4:	71fb      	strb	r3, [r7, #7]
 800eea6:	e003      	b.n	800eeb0 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	f023 0301 	bic.w	r3, r3, #1
 800eeae:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800eeb0:	4b14      	ldr	r3, [pc, #80]	; (800ef04 <CheckToSendReplyorNot+0x78>)
 800eeb2:	785b      	ldrb	r3, [r3, #1]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d104      	bne.n	800eec2 <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800eeb8:	79fb      	ldrb	r3, [r7, #7]
 800eeba:	f043 0302 	orr.w	r3, r3, #2
 800eebe:	71fb      	strb	r3, [r7, #7]
 800eec0:	e003      	b.n	800eeca <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	f023 0302 	bic.w	r3, r3, #2
 800eec8:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800eeca:	79fb      	ldrb	r3, [r7, #7]
 800eecc:	2b02      	cmp	r3, #2
 800eece:	dc02      	bgt.n	800eed6 <CheckToSendReplyorNot+0x4a>
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	da03      	bge.n	800eedc <CheckToSendReplyorNot+0x50>
 800eed4:	e00a      	b.n	800eeec <CheckToSendReplyorNot+0x60>
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d004      	beq.n	800eee4 <CheckToSendReplyorNot+0x58>
 800eeda:	e007      	b.n	800eeec <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800eedc:	4b0a      	ldr	r3, [pc, #40]	; (800ef08 <CheckToSendReplyorNot+0x7c>)
 800eede:	2201      	movs	r2, #1
 800eee0:	701a      	strb	r2, [r3, #0]
		break;
 800eee2:	e007      	b.n	800eef4 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800eee4:	4b08      	ldr	r3, [pc, #32]	; (800ef08 <CheckToSendReplyorNot+0x7c>)
 800eee6:	2201      	movs	r2, #1
 800eee8:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800eeea:	e003      	b.n	800eef4 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800eeec:	4b06      	ldr	r3, [pc, #24]	; (800ef08 <CheckToSendReplyorNot+0x7c>)
 800eeee:	2201      	movs	r2, #1
 800eef0:	701a      	strb	r2, [r3, #0]
		break;
 800eef2:	bf00      	nop
	}

}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	20003970 	.word	0x20003970
 800ef04:	20003974 	.word	0x20003974
 800ef08:	20005091 	.word	0x20005091

0800ef0c <PrintSignals>:



void PrintSignals(void)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800ef12:	4b2d      	ldr	r3, [pc, #180]	; (800efc8 <PrintSignals+0xbc>)
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	461a      	mov	r2, r3
 800ef18:	492c      	ldr	r1, [pc, #176]	; (800efcc <PrintSignals+0xc0>)
 800ef1a:	482d      	ldr	r0, [pc, #180]	; (800efd0 <PrintSignals+0xc4>)
 800ef1c:	f016 f910 	bl	8025140 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800ef20:	2301      	movs	r3, #1
 800ef22:	80fb      	strh	r3, [r7, #6]
 800ef24:	e045      	b.n	800efb2 <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800ef26:	4b2b      	ldr	r3, [pc, #172]	; (800efd4 <PrintSignals+0xc8>)
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	88fa      	ldrh	r2, [r7, #6]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d83c      	bhi.n	800efaa <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800ef30:	88fb      	ldrh	r3, [r7, #6]
 800ef32:	3b01      	subs	r3, #1
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	da00      	bge.n	800ef3a <PrintSignals+0x2e>
 800ef38:	3307      	adds	r3, #7
 800ef3a:	10db      	asrs	r3, r3, #3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	4b26      	ldr	r3, [pc, #152]	; (800efd8 <PrintSignals+0xcc>)
 800ef40:	4413      	add	r3, r2
 800ef42:	789b      	ldrb	r3, [r3, #2]
 800ef44:	4619      	mov	r1, r3
 800ef46:	88fb      	ldrh	r3, [r7, #6]
 800ef48:	3b01      	subs	r3, #1
 800ef4a:	425a      	negs	r2, r3
 800ef4c:	f003 0307 	and.w	r3, r3, #7
 800ef50:	f002 0207 	and.w	r2, r2, #7
 800ef54:	bf58      	it	pl
 800ef56:	4253      	negpl	r3, r2
 800ef58:	2201      	movs	r2, #1
 800ef5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef5e:	400b      	ands	r3, r1
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	dd0c      	ble.n	800ef7e <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800ef64:	88fb      	ldrh	r3, [r7, #6]
 800ef66:	1e5a      	subs	r2, r3, #1
 800ef68:	4613      	mov	r3, r2
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	4413      	add	r3, r2
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	4a1a      	ldr	r2, [pc, #104]	; (800efdc <PrintSignals+0xd0>)
 800ef72:	4413      	add	r3, r2
 800ef74:	4619      	mov	r1, r3
 800ef76:	481a      	ldr	r0, [pc, #104]	; (800efe0 <PrintSignals+0xd4>)
 800ef78:	f016 f9f2 	bl	8025360 <iprintf>
 800ef7c:	e00b      	b.n	800ef96 <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800ef7e:	88fb      	ldrh	r3, [r7, #6]
 800ef80:	1e5a      	subs	r2, r3, #1
 800ef82:	4613      	mov	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	00db      	lsls	r3, r3, #3
 800ef8a:	4a14      	ldr	r2, [pc, #80]	; (800efdc <PrintSignals+0xd0>)
 800ef8c:	4413      	add	r3, r2
 800ef8e:	4619      	mov	r1, r3
 800ef90:	4814      	ldr	r0, [pc, #80]	; (800efe4 <PrintSignals+0xd8>)
 800ef92:	f016 f9e5 	bl	8025360 <iprintf>
		}

		if( (Traverser%2) == 0)
 800ef96:	88fb      	ldrh	r3, [r7, #6]
 800ef98:	f003 0301 	and.w	r3, r3, #1
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d104      	bne.n	800efac <PrintSignals+0xa0>
		{
			printf("\n");
 800efa2:	200a      	movs	r0, #10
 800efa4:	f016 f9f4 	bl	8025390 <putchar>
 800efa8:	e000      	b.n	800efac <PrintSignals+0xa0>
			continue;
 800efaa:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800efac:	88fb      	ldrh	r3, [r7, #6]
 800efae:	3301      	adds	r3, #1
 800efb0:	80fb      	strh	r3, [r7, #6]
 800efb2:	88fa      	ldrh	r2, [r7, #6]
 800efb4:	4b08      	ldr	r3, [pc, #32]	; (800efd8 <PrintSignals+0xcc>)
 800efb6:	881b      	ldrh	r3, [r3, #0]
 800efb8:	00db      	lsls	r3, r3, #3
 800efba:	429a      	cmp	r2, r3
 800efbc:	ddb3      	ble.n	800ef26 <PrintSignals+0x1a>
		}
	}
}
 800efbe:	bf00      	nop
 800efc0:	bf00      	nop
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	20003b9c 	.word	0x20003b9c
 800efcc:	20003ba0 	.word	0x20003ba0
 800efd0:	2000399a 	.word	0x2000399a
 800efd4:	20004ca4 	.word	0x20004ca4
 800efd8:	20003998 	.word	0x20003998
 800efdc:	200041b4 	.word	0x200041b4
 800efe0:	08029374 	.word	0x08029374
 800efe4:	08029384 	.word	0x08029384

0800efe8 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800efee:	2300      	movs	r3, #0
 800eff0:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	607b      	str	r3, [r7, #4]

	Get_time();
 800effa:	f7fd f9bd 	bl	800c378 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800effe:	4b21      	ldr	r3, [pc, #132]	; (800f084 <GetTimeStamp+0x9c>)
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	461a      	mov	r2, r3
 800f004:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f008:	fb03 f202 	mul.w	r2, r3, r2
 800f00c:	4b1d      	ldr	r3, [pc, #116]	; (800f084 <GetTimeStamp+0x9c>)
 800f00e:	785b      	ldrb	r3, [r3, #1]
 800f010:	4619      	mov	r1, r3
 800f012:	460b      	mov	r3, r1
 800f014:	011b      	lsls	r3, r3, #4
 800f016:	1a5b      	subs	r3, r3, r1
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4413      	add	r3, r2
 800f01c:	4a19      	ldr	r2, [pc, #100]	; (800f084 <GetTimeStamp+0x9c>)
 800f01e:	7892      	ldrb	r2, [r2, #2]
 800f020:	4413      	add	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800f024:	4b18      	ldr	r3, [pc, #96]	; (800f088 <GetTimeStamp+0xa0>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d007      	beq.n	800f03e <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800f02e:	4a16      	ldr	r2, [pc, #88]	; (800f088 <GetTimeStamp+0xa0>)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800f034:	f009 f98a 	bl	801834c <HAL_GetTick>
 800f038:	4603      	mov	r3, r0
 800f03a:	4a14      	ldr	r2, [pc, #80]	; (800f08c <GetTimeStamp+0xa4>)
 800f03c:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800f03e:	4b13      	ldr	r3, [pc, #76]	; (800f08c <GetTimeStamp+0xa4>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4618      	mov	r0, r3
 800f044:	f000 fe1c 	bl	800fc80 <HAL_Elaps_Ticks>
 800f048:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	4613      	mov	r3, r2
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	4413      	add	r3, r2
 800f052:	005b      	lsls	r3, r3, #1
 800f054:	4619      	mov	r1, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4a0d      	ldr	r2, [pc, #52]	; (800f090 <GetTimeStamp+0xa8>)
 800f05a:	fba2 2303 	umull	r2, r3, r2, r3
 800f05e:	095b      	lsrs	r3, r3, #5
 800f060:	440b      	add	r3, r1
 800f062:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800f064:	4b0b      	ldr	r3, [pc, #44]	; (800f094 <GetTimeStamp+0xac>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	68ba      	ldr	r2, [r7, #8]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d005      	beq.n	800f07a <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800f06e:	4a09      	ldr	r2, [pc, #36]	; (800f094 <GetTimeStamp+0xac>)
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800f074:	4a08      	ldr	r2, [pc, #32]	; (800f098 <GetTimeStamp+0xb0>)
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800f07a:	bf00      	nop
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	20002cd8 	.word	0x20002cd8
 800f088:	20005098 	.word	0x20005098
 800f08c:	2000509c 	.word	0x2000509c
 800f090:	51eb851f 	.word	0x51eb851f
 800f094:	200050a0 	.word	0x200050a0
 800f098:	200041b0 	.word	0x200041b0

0800f09c <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800f09c:	b490      	push	{r4, r7}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800f0a6:	79fb      	ldrb	r3, [r7, #7]
 800f0a8:	1c5a      	adds	r2, r3, #1
 800f0aa:	71fa      	strb	r2, [r7, #7]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	4413      	add	r3, r2
 800f0b4:	00db      	lsls	r3, r3, #3
 800f0b6:	4acd      	ldr	r2, [pc, #820]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f0b8:	4413      	add	r3, r2
 800f0ba:	4acd      	ldr	r2, [pc, #820]	; (800f3f0 <UpdateSIGNALSNames+0x354>)
 800f0bc:	6810      	ldr	r0, [r2, #0]
 800f0be:	6018      	str	r0, [r3, #0]
 800f0c0:	8892      	ldrh	r2, [r2, #4]
 800f0c2:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	71fa      	strb	r2, [r7, #7]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	009b      	lsls	r3, r3, #2
 800f0d0:	4413      	add	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	4ac5      	ldr	r2, [pc, #788]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f0d6:	4413      	add	r3, r2
 800f0d8:	4ac6      	ldr	r2, [pc, #792]	; (800f3f4 <UpdateSIGNALSNames+0x358>)
 800f0da:	6810      	ldr	r0, [r2, #0]
 800f0dc:	6018      	str	r0, [r3, #0]
 800f0de:	8892      	ldrh	r2, [r2, #4]
 800f0e0:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800f0e2:	79fb      	ldrb	r3, [r7, #7]
 800f0e4:	1c5a      	adds	r2, r3, #1
 800f0e6:	71fa      	strb	r2, [r7, #7]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4413      	add	r3, r2
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	4abe      	ldr	r2, [pc, #760]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f0f4:	4413      	add	r3, r2
 800f0f6:	4ac0      	ldr	r2, [pc, #768]	; (800f3f8 <UpdateSIGNALSNames+0x35c>)
 800f0f8:	6810      	ldr	r0, [r2, #0]
 800f0fa:	6018      	str	r0, [r3, #0]
 800f0fc:	8892      	ldrh	r2, [r2, #4]
 800f0fe:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800f100:	79fb      	ldrb	r3, [r7, #7]
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	71fa      	strb	r2, [r7, #7]
 800f106:	461a      	mov	r2, r3
 800f108:	4613      	mov	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	4413      	add	r3, r2
 800f10e:	00db      	lsls	r3, r3, #3
 800f110:	4ab6      	ldr	r2, [pc, #728]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f112:	4413      	add	r3, r2
 800f114:	4ab9      	ldr	r2, [pc, #740]	; (800f3fc <UpdateSIGNALSNames+0x360>)
 800f116:	6810      	ldr	r0, [r2, #0]
 800f118:	6018      	str	r0, [r3, #0]
 800f11a:	8892      	ldrh	r2, [r2, #4]
 800f11c:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	71fa      	strb	r2, [r7, #7]
 800f124:	461a      	mov	r2, r3
 800f126:	4613      	mov	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	00db      	lsls	r3, r3, #3
 800f12e:	4aaf      	ldr	r2, [pc, #700]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f130:	4413      	add	r3, r2
 800f132:	4ab3      	ldr	r2, [pc, #716]	; (800f400 <UpdateSIGNALSNames+0x364>)
 800f134:	6810      	ldr	r0, [r2, #0]
 800f136:	6018      	str	r0, [r3, #0]
 800f138:	8892      	ldrh	r2, [r2, #4]
 800f13a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	71fa      	strb	r2, [r7, #7]
 800f142:	461a      	mov	r2, r3
 800f144:	4613      	mov	r3, r2
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	4413      	add	r3, r2
 800f14a:	00db      	lsls	r3, r3, #3
 800f14c:	4aa7      	ldr	r2, [pc, #668]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f14e:	4413      	add	r3, r2
 800f150:	4aac      	ldr	r2, [pc, #688]	; (800f404 <UpdateSIGNALSNames+0x368>)
 800f152:	6810      	ldr	r0, [r2, #0]
 800f154:	6018      	str	r0, [r3, #0]
 800f156:	8891      	ldrh	r1, [r2, #4]
 800f158:	7992      	ldrb	r2, [r2, #6]
 800f15a:	8099      	strh	r1, [r3, #4]
 800f15c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	1c5a      	adds	r2, r3, #1
 800f162:	71fa      	strb	r2, [r7, #7]
 800f164:	461a      	mov	r2, r3
 800f166:	4613      	mov	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	00db      	lsls	r3, r3, #3
 800f16e:	4a9f      	ldr	r2, [pc, #636]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f170:	4413      	add	r3, r2
 800f172:	4aa5      	ldr	r2, [pc, #660]	; (800f408 <UpdateSIGNALSNames+0x36c>)
 800f174:	6810      	ldr	r0, [r2, #0]
 800f176:	6018      	str	r0, [r3, #0]
 800f178:	8891      	ldrh	r1, [r2, #4]
 800f17a:	7992      	ldrb	r2, [r2, #6]
 800f17c:	8099      	strh	r1, [r3, #4]
 800f17e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800f180:	79fb      	ldrb	r3, [r7, #7]
 800f182:	1c5a      	adds	r2, r3, #1
 800f184:	71fa      	strb	r2, [r7, #7]
 800f186:	461a      	mov	r2, r3
 800f188:	4613      	mov	r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	4413      	add	r3, r2
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	4a96      	ldr	r2, [pc, #600]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f192:	4413      	add	r3, r2
 800f194:	4a9d      	ldr	r2, [pc, #628]	; (800f40c <UpdateSIGNALSNames+0x370>)
 800f196:	6810      	ldr	r0, [r2, #0]
 800f198:	6018      	str	r0, [r3, #0]
 800f19a:	7912      	ldrb	r2, [r2, #4]
 800f19c:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800f19e:	79fb      	ldrb	r3, [r7, #7]
 800f1a0:	1c5a      	adds	r2, r3, #1
 800f1a2:	71fa      	strb	r2, [r7, #7]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	4a8f      	ldr	r2, [pc, #572]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f1b0:	4413      	add	r3, r2
 800f1b2:	4997      	ldr	r1, [pc, #604]	; (800f410 <UpdateSIGNALSNames+0x374>)
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	cb03      	ldmia	r3!, {r0, r1}
 800f1ba:	6010      	str	r0, [r2, #0]
 800f1bc:	6051      	str	r1, [r2, #4]
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	71fa      	strb	r2, [r7, #7]
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	4413      	add	r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	4a86      	ldr	r2, [pc, #536]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f1d4:	4413      	add	r3, r2
 800f1d6:	4a8f      	ldr	r2, [pc, #572]	; (800f414 <UpdateSIGNALSNames+0x378>)
 800f1d8:	6810      	ldr	r0, [r2, #0]
 800f1da:	6018      	str	r0, [r3, #0]
 800f1dc:	8892      	ldrh	r2, [r2, #4]
 800f1de:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800f1e0:	79fb      	ldrb	r3, [r7, #7]
 800f1e2:	1c5a      	adds	r2, r3, #1
 800f1e4:	71fa      	strb	r2, [r7, #7]
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	4413      	add	r3, r2
 800f1ee:	00db      	lsls	r3, r3, #3
 800f1f0:	4a7e      	ldr	r2, [pc, #504]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f1f2:	4413      	add	r3, r2
 800f1f4:	4988      	ldr	r1, [pc, #544]	; (800f418 <UpdateSIGNALSNames+0x37c>)
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	cb03      	ldmia	r3!, {r0, r1}
 800f1fc:	6010      	str	r0, [r2, #0]
 800f1fe:	6051      	str	r1, [r2, #4]
 800f200:	881b      	ldrh	r3, [r3, #0]
 800f202:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800f204:	79fb      	ldrb	r3, [r7, #7]
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	71fa      	strb	r2, [r7, #7]
 800f20a:	461a      	mov	r2, r3
 800f20c:	4613      	mov	r3, r2
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	4413      	add	r3, r2
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	4a75      	ldr	r2, [pc, #468]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f216:	4413      	add	r3, r2
 800f218:	4980      	ldr	r1, [pc, #512]	; (800f41c <UpdateSIGNALSNames+0x380>)
 800f21a:	461a      	mov	r2, r3
 800f21c:	460b      	mov	r3, r1
 800f21e:	cb03      	ldmia	r3!, {r0, r1}
 800f220:	6010      	str	r0, [r2, #0]
 800f222:	6051      	str	r1, [r2, #4]
 800f224:	8819      	ldrh	r1, [r3, #0]
 800f226:	789b      	ldrb	r3, [r3, #2]
 800f228:	8111      	strh	r1, [r2, #8]
 800f22a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800f22c:	79fb      	ldrb	r3, [r7, #7]
 800f22e:	1c5a      	adds	r2, r3, #1
 800f230:	71fa      	strb	r2, [r7, #7]
 800f232:	461a      	mov	r2, r3
 800f234:	4613      	mov	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	4a6b      	ldr	r2, [pc, #428]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f23e:	4413      	add	r3, r2
 800f240:	4977      	ldr	r1, [pc, #476]	; (800f420 <UpdateSIGNALSNames+0x384>)
 800f242:	461a      	mov	r2, r3
 800f244:	460b      	mov	r3, r1
 800f246:	cb03      	ldmia	r3!, {r0, r1}
 800f248:	6010      	str	r0, [r2, #0]
 800f24a:	6051      	str	r1, [r2, #4]
 800f24c:	881b      	ldrh	r3, [r3, #0]
 800f24e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800f250:	79fb      	ldrb	r3, [r7, #7]
 800f252:	1c5a      	adds	r2, r3, #1
 800f254:	71fa      	strb	r2, [r7, #7]
 800f256:	461a      	mov	r2, r3
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	00db      	lsls	r3, r3, #3
 800f260:	4a62      	ldr	r2, [pc, #392]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f262:	4413      	add	r3, r2
 800f264:	496f      	ldr	r1, [pc, #444]	; (800f424 <UpdateSIGNALSNames+0x388>)
 800f266:	461a      	mov	r2, r3
 800f268:	460b      	mov	r3, r1
 800f26a:	cb03      	ldmia	r3!, {r0, r1}
 800f26c:	6010      	str	r0, [r2, #0]
 800f26e:	6051      	str	r1, [r2, #4]
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800f274:	79fb      	ldrb	r3, [r7, #7]
 800f276:	1c5a      	adds	r2, r3, #1
 800f278:	71fa      	strb	r2, [r7, #7]
 800f27a:	461a      	mov	r2, r3
 800f27c:	4613      	mov	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	4413      	add	r3, r2
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	4a59      	ldr	r2, [pc, #356]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f286:	4413      	add	r3, r2
 800f288:	4967      	ldr	r1, [pc, #412]	; (800f428 <UpdateSIGNALSNames+0x38c>)
 800f28a:	461a      	mov	r2, r3
 800f28c:	460b      	mov	r3, r1
 800f28e:	cb03      	ldmia	r3!, {r0, r1}
 800f290:	6010      	str	r0, [r2, #0]
 800f292:	6051      	str	r1, [r2, #4]
 800f294:	8819      	ldrh	r1, [r3, #0]
 800f296:	789b      	ldrb	r3, [r3, #2]
 800f298:	8111      	strh	r1, [r2, #8]
 800f29a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	1c5a      	adds	r2, r3, #1
 800f2a0:	71fa      	strb	r2, [r7, #7]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	00db      	lsls	r3, r3, #3
 800f2ac:	4a4f      	ldr	r2, [pc, #316]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f2ae:	4413      	add	r3, r2
 800f2b0:	495e      	ldr	r1, [pc, #376]	; (800f42c <UpdateSIGNALSNames+0x390>)
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	cb03      	ldmia	r3!, {r0, r1}
 800f2b8:	6010      	str	r0, [r2, #0]
 800f2ba:	6051      	str	r1, [r2, #4]
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800f2c0:	79fb      	ldrb	r3, [r7, #7]
 800f2c2:	1c5a      	adds	r2, r3, #1
 800f2c4:	71fa      	strb	r2, [r7, #7]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	00db      	lsls	r3, r3, #3
 800f2d0:	4a46      	ldr	r2, [pc, #280]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f2d2:	4413      	add	r3, r2
 800f2d4:	4a56      	ldr	r2, [pc, #344]	; (800f430 <UpdateSIGNALSNames+0x394>)
 800f2d6:	6810      	ldr	r0, [r2, #0]
 800f2d8:	6018      	str	r0, [r3, #0]
 800f2da:	8891      	ldrh	r1, [r2, #4]
 800f2dc:	7992      	ldrb	r2, [r2, #6]
 800f2de:	8099      	strh	r1, [r3, #4]
 800f2e0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	1c5a      	adds	r2, r3, #1
 800f2e6:	71fa      	strb	r2, [r7, #7]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	4413      	add	r3, r2
 800f2f0:	00db      	lsls	r3, r3, #3
 800f2f2:	4a3e      	ldr	r2, [pc, #248]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f2f4:	4413      	add	r3, r2
 800f2f6:	4a4f      	ldr	r2, [pc, #316]	; (800f434 <UpdateSIGNALSNames+0x398>)
 800f2f8:	6810      	ldr	r0, [r2, #0]
 800f2fa:	6018      	str	r0, [r3, #0]
 800f2fc:	8891      	ldrh	r1, [r2, #4]
 800f2fe:	7992      	ldrb	r2, [r2, #6]
 800f300:	8099      	strh	r1, [r3, #4]
 800f302:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800f304:	79fb      	ldrb	r3, [r7, #7]
 800f306:	1c5a      	adds	r2, r3, #1
 800f308:	71fa      	strb	r2, [r7, #7]
 800f30a:	461a      	mov	r2, r3
 800f30c:	4613      	mov	r3, r2
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	4413      	add	r3, r2
 800f312:	00db      	lsls	r3, r3, #3
 800f314:	4a35      	ldr	r2, [pc, #212]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f316:	4413      	add	r3, r2
 800f318:	4a47      	ldr	r2, [pc, #284]	; (800f438 <UpdateSIGNALSNames+0x39c>)
 800f31a:	6810      	ldr	r0, [r2, #0]
 800f31c:	6018      	str	r0, [r3, #0]
 800f31e:	8891      	ldrh	r1, [r2, #4]
 800f320:	7992      	ldrb	r2, [r2, #6]
 800f322:	8099      	strh	r1, [r3, #4]
 800f324:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800f326:	79fb      	ldrb	r3, [r7, #7]
 800f328:	1c5a      	adds	r2, r3, #1
 800f32a:	71fa      	strb	r2, [r7, #7]
 800f32c:	461a      	mov	r2, r3
 800f32e:	4613      	mov	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4413      	add	r3, r2
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	4a2d      	ldr	r2, [pc, #180]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f338:	4413      	add	r3, r2
 800f33a:	4a40      	ldr	r2, [pc, #256]	; (800f43c <UpdateSIGNALSNames+0x3a0>)
 800f33c:	6810      	ldr	r0, [r2, #0]
 800f33e:	6018      	str	r0, [r3, #0]
 800f340:	8891      	ldrh	r1, [r2, #4]
 800f342:	7992      	ldrb	r2, [r2, #6]
 800f344:	8099      	strh	r1, [r3, #4]
 800f346:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800f348:	79fb      	ldrb	r3, [r7, #7]
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	71fa      	strb	r2, [r7, #7]
 800f34e:	461a      	mov	r2, r3
 800f350:	4613      	mov	r3, r2
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	4413      	add	r3, r2
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	4a24      	ldr	r2, [pc, #144]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f35a:	4413      	add	r3, r2
 800f35c:	4938      	ldr	r1, [pc, #224]	; (800f440 <UpdateSIGNALSNames+0x3a4>)
 800f35e:	461a      	mov	r2, r3
 800f360:	460b      	mov	r3, r1
 800f362:	cb03      	ldmia	r3!, {r0, r1}
 800f364:	6010      	str	r0, [r2, #0]
 800f366:	6051      	str	r1, [r2, #4]
 800f368:	8819      	ldrh	r1, [r3, #0]
 800f36a:	789b      	ldrb	r3, [r3, #2]
 800f36c:	8111      	strh	r1, [r2, #8]
 800f36e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800f370:	79fb      	ldrb	r3, [r7, #7]
 800f372:	1c5a      	adds	r2, r3, #1
 800f374:	71fa      	strb	r2, [r7, #7]
 800f376:	461a      	mov	r2, r3
 800f378:	4613      	mov	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4413      	add	r3, r2
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	4a1a      	ldr	r2, [pc, #104]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f382:	4413      	add	r3, r2
 800f384:	4a2f      	ldr	r2, [pc, #188]	; (800f444 <UpdateSIGNALSNames+0x3a8>)
 800f386:	6810      	ldr	r0, [r2, #0]
 800f388:	6018      	str	r0, [r3, #0]
 800f38a:	8891      	ldrh	r1, [r2, #4]
 800f38c:	7992      	ldrb	r2, [r2, #6]
 800f38e:	8099      	strh	r1, [r3, #4]
 800f390:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800f392:	79fb      	ldrb	r3, [r7, #7]
 800f394:	1c5a      	adds	r2, r3, #1
 800f396:	71fa      	strb	r2, [r7, #7]
 800f398:	461a      	mov	r2, r3
 800f39a:	4613      	mov	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	4413      	add	r3, r2
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	4a12      	ldr	r2, [pc, #72]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f3a4:	4413      	add	r3, r2
 800f3a6:	4a28      	ldr	r2, [pc, #160]	; (800f448 <UpdateSIGNALSNames+0x3ac>)
 800f3a8:	6810      	ldr	r0, [r2, #0]
 800f3aa:	6018      	str	r0, [r3, #0]
 800f3ac:	8891      	ldrh	r1, [r2, #4]
 800f3ae:	7992      	ldrb	r2, [r2, #6]
 800f3b0:	8099      	strh	r1, [r3, #4]
 800f3b2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800f3b4:	79fb      	ldrb	r3, [r7, #7]
 800f3b6:	1c5a      	adds	r2, r3, #1
 800f3b8:	71fa      	strb	r2, [r7, #7]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	4613      	mov	r3, r2
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	4413      	add	r3, r2
 800f3c2:	00db      	lsls	r3, r3, #3
 800f3c4:	4a09      	ldr	r2, [pc, #36]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f3c6:	4413      	add	r3, r2
 800f3c8:	4a20      	ldr	r2, [pc, #128]	; (800f44c <UpdateSIGNALSNames+0x3b0>)
 800f3ca:	6810      	ldr	r0, [r2, #0]
 800f3cc:	6018      	str	r0, [r3, #0]
 800f3ce:	8891      	ldrh	r1, [r2, #4]
 800f3d0:	7992      	ldrb	r2, [r2, #6]
 800f3d2:	8099      	strh	r1, [r3, #4]
 800f3d4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800f3d6:	79fb      	ldrb	r3, [r7, #7]
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	71fa      	strb	r2, [r7, #7]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	4613      	mov	r3, r2
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	4413      	add	r3, r2
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	4a01      	ldr	r2, [pc, #4]	; (800f3ec <UpdateSIGNALSNames+0x350>)
 800f3e8:	4413      	add	r3, r2
 800f3ea:	e031      	b.n	800f450 <UpdateSIGNALSNames+0x3b4>
 800f3ec:	200041b4 	.word	0x200041b4
 800f3f0:	08029394 	.word	0x08029394
 800f3f4:	0802939c 	.word	0x0802939c
 800f3f8:	080293a4 	.word	0x080293a4
 800f3fc:	080293ac 	.word	0x080293ac
 800f400:	080293b4 	.word	0x080293b4
 800f404:	080293bc 	.word	0x080293bc
 800f408:	080293c4 	.word	0x080293c4
 800f40c:	080293cc 	.word	0x080293cc
 800f410:	080293d4 	.word	0x080293d4
 800f414:	080293e0 	.word	0x080293e0
 800f418:	080293e8 	.word	0x080293e8
 800f41c:	080293f4 	.word	0x080293f4
 800f420:	08029400 	.word	0x08029400
 800f424:	0802940c 	.word	0x0802940c
 800f428:	08029418 	.word	0x08029418
 800f42c:	08029424 	.word	0x08029424
 800f430:	08029430 	.word	0x08029430
 800f434:	08029438 	.word	0x08029438
 800f438:	08029440 	.word	0x08029440
 800f43c:	08029448 	.word	0x08029448
 800f440:	08029450 	.word	0x08029450
 800f444:	0802945c 	.word	0x0802945c
 800f448:	08029464 	.word	0x08029464
 800f44c:	0802946c 	.word	0x0802946c
 800f450:	4acd      	ldr	r2, [pc, #820]	; (800f788 <UpdateSIGNALSNames+0x6ec>)
 800f452:	6810      	ldr	r0, [r2, #0]
 800f454:	6018      	str	r0, [r3, #0]
 800f456:	8891      	ldrh	r1, [r2, #4]
 800f458:	7992      	ldrb	r2, [r2, #6]
 800f45a:	8099      	strh	r1, [r3, #4]
 800f45c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800f45e:	79fb      	ldrb	r3, [r7, #7]
 800f460:	1c5a      	adds	r2, r3, #1
 800f462:	71fa      	strb	r2, [r7, #7]
 800f464:	461a      	mov	r2, r3
 800f466:	4613      	mov	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	00db      	lsls	r3, r3, #3
 800f46e:	4ac7      	ldr	r2, [pc, #796]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f470:	4413      	add	r3, r2
 800f472:	4ac7      	ldr	r2, [pc, #796]	; (800f790 <UpdateSIGNALSNames+0x6f4>)
 800f474:	6810      	ldr	r0, [r2, #0]
 800f476:	6018      	str	r0, [r3, #0]
 800f478:	8891      	ldrh	r1, [r2, #4]
 800f47a:	7992      	ldrb	r2, [r2, #6]
 800f47c:	8099      	strh	r1, [r3, #4]
 800f47e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	71fa      	strb	r2, [r7, #7]
 800f486:	461a      	mov	r2, r3
 800f488:	4613      	mov	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	4abe      	ldr	r2, [pc, #760]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f492:	4413      	add	r3, r2
 800f494:	4abf      	ldr	r2, [pc, #764]	; (800f794 <UpdateSIGNALSNames+0x6f8>)
 800f496:	6810      	ldr	r0, [r2, #0]
 800f498:	6018      	str	r0, [r3, #0]
 800f49a:	8891      	ldrh	r1, [r2, #4]
 800f49c:	7992      	ldrb	r2, [r2, #6]
 800f49e:	8099      	strh	r1, [r3, #4]
 800f4a0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800f4a2:	79fb      	ldrb	r3, [r7, #7]
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	71fa      	strb	r2, [r7, #7]
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	4413      	add	r3, r2
 800f4b0:	00db      	lsls	r3, r3, #3
 800f4b2:	4ab6      	ldr	r2, [pc, #728]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f4b4:	4413      	add	r3, r2
 800f4b6:	4ab8      	ldr	r2, [pc, #736]	; (800f798 <UpdateSIGNALSNames+0x6fc>)
 800f4b8:	6810      	ldr	r0, [r2, #0]
 800f4ba:	6018      	str	r0, [r3, #0]
 800f4bc:	8891      	ldrh	r1, [r2, #4]
 800f4be:	7992      	ldrb	r2, [r2, #6]
 800f4c0:	8099      	strh	r1, [r3, #4]
 800f4c2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	1c5a      	adds	r2, r3, #1
 800f4c8:	71fa      	strb	r2, [r7, #7]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	00db      	lsls	r3, r3, #3
 800f4d4:	4aad      	ldr	r2, [pc, #692]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f4d6:	4413      	add	r3, r2
 800f4d8:	49b0      	ldr	r1, [pc, #704]	; (800f79c <UpdateSIGNALSNames+0x700>)
 800f4da:	461a      	mov	r2, r3
 800f4dc:	460b      	mov	r3, r1
 800f4de:	cb03      	ldmia	r3!, {r0, r1}
 800f4e0:	6010      	str	r0, [r2, #0]
 800f4e2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	71fa      	strb	r2, [r7, #7]
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4413      	add	r3, r2
 800f4f2:	00db      	lsls	r3, r3, #3
 800f4f4:	4aa5      	ldr	r2, [pc, #660]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f4f6:	4413      	add	r3, r2
 800f4f8:	49a9      	ldr	r1, [pc, #676]	; (800f7a0 <UpdateSIGNALSNames+0x704>)
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	cb03      	ldmia	r3!, {r0, r1}
 800f500:	6010      	str	r0, [r2, #0]
 800f502:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	71fa      	strb	r2, [r7, #7]
 800f50a:	461a      	mov	r2, r3
 800f50c:	4613      	mov	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	4413      	add	r3, r2
 800f512:	00db      	lsls	r3, r3, #3
 800f514:	4a9d      	ldr	r2, [pc, #628]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f516:	4413      	add	r3, r2
 800f518:	49a2      	ldr	r1, [pc, #648]	; (800f7a4 <UpdateSIGNALSNames+0x708>)
 800f51a:	461a      	mov	r2, r3
 800f51c:	460b      	mov	r3, r1
 800f51e:	cb03      	ldmia	r3!, {r0, r1}
 800f520:	6010      	str	r0, [r2, #0]
 800f522:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800f524:	79fb      	ldrb	r3, [r7, #7]
 800f526:	1c5a      	adds	r2, r3, #1
 800f528:	71fa      	strb	r2, [r7, #7]
 800f52a:	461a      	mov	r2, r3
 800f52c:	4613      	mov	r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4413      	add	r3, r2
 800f532:	00db      	lsls	r3, r3, #3
 800f534:	4a95      	ldr	r2, [pc, #596]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f536:	4413      	add	r3, r2
 800f538:	499b      	ldr	r1, [pc, #620]	; (800f7a8 <UpdateSIGNALSNames+0x70c>)
 800f53a:	461a      	mov	r2, r3
 800f53c:	460b      	mov	r3, r1
 800f53e:	cb03      	ldmia	r3!, {r0, r1}
 800f540:	6010      	str	r0, [r2, #0]
 800f542:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	71fa      	strb	r2, [r7, #7]
 800f54a:	461a      	mov	r2, r3
 800f54c:	4613      	mov	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	4a8d      	ldr	r2, [pc, #564]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f556:	4413      	add	r3, r2
 800f558:	4994      	ldr	r1, [pc, #592]	; (800f7ac <UpdateSIGNALSNames+0x710>)
 800f55a:	461a      	mov	r2, r3
 800f55c:	460b      	mov	r3, r1
 800f55e:	cb03      	ldmia	r3!, {r0, r1}
 800f560:	6010      	str	r0, [r2, #0]
 800f562:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800f564:	79fb      	ldrb	r3, [r7, #7]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	71fa      	strb	r2, [r7, #7]
 800f56a:	461a      	mov	r2, r3
 800f56c:	4613      	mov	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	4413      	add	r3, r2
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	4a85      	ldr	r2, [pc, #532]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f576:	4413      	add	r3, r2
 800f578:	498d      	ldr	r1, [pc, #564]	; (800f7b0 <UpdateSIGNALSNames+0x714>)
 800f57a:	461a      	mov	r2, r3
 800f57c:	460b      	mov	r3, r1
 800f57e:	cb03      	ldmia	r3!, {r0, r1}
 800f580:	6010      	str	r0, [r2, #0]
 800f582:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	1c5a      	adds	r2, r3, #1
 800f588:	71fa      	strb	r2, [r7, #7]
 800f58a:	461a      	mov	r2, r3
 800f58c:	4613      	mov	r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	00db      	lsls	r3, r3, #3
 800f594:	4a7d      	ldr	r2, [pc, #500]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f596:	4413      	add	r3, r2
 800f598:	4986      	ldr	r1, [pc, #536]	; (800f7b4 <UpdateSIGNALSNames+0x718>)
 800f59a:	461a      	mov	r2, r3
 800f59c:	460b      	mov	r3, r1
 800f59e:	cb03      	ldmia	r3!, {r0, r1}
 800f5a0:	6010      	str	r0, [r2, #0]
 800f5a2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800f5a4:	79fb      	ldrb	r3, [r7, #7]
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	71fa      	strb	r2, [r7, #7]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	4a75      	ldr	r2, [pc, #468]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f5b6:	4413      	add	r3, r2
 800f5b8:	497f      	ldr	r1, [pc, #508]	; (800f7b8 <UpdateSIGNALSNames+0x71c>)
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	460b      	mov	r3, r1
 800f5be:	cb03      	ldmia	r3!, {r0, r1}
 800f5c0:	6010      	str	r0, [r2, #0]
 800f5c2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800f5c4:	79fb      	ldrb	r3, [r7, #7]
 800f5c6:	1c5a      	adds	r2, r3, #1
 800f5c8:	71fa      	strb	r2, [r7, #7]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4413      	add	r3, r2
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	4a6d      	ldr	r2, [pc, #436]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f5d6:	4413      	add	r3, r2
 800f5d8:	4978      	ldr	r1, [pc, #480]	; (800f7bc <UpdateSIGNALSNames+0x720>)
 800f5da:	461a      	mov	r2, r3
 800f5dc:	460b      	mov	r3, r1
 800f5de:	cb03      	ldmia	r3!, {r0, r1}
 800f5e0:	6010      	str	r0, [r2, #0]
 800f5e2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800f5e4:	79fb      	ldrb	r3, [r7, #7]
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	71fa      	strb	r2, [r7, #7]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	4413      	add	r3, r2
 800f5f2:	00db      	lsls	r3, r3, #3
 800f5f4:	4a65      	ldr	r2, [pc, #404]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f5f6:	4413      	add	r3, r2
 800f5f8:	4971      	ldr	r1, [pc, #452]	; (800f7c0 <UpdateSIGNALSNames+0x724>)
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	cb03      	ldmia	r3!, {r0, r1}
 800f600:	6010      	str	r0, [r2, #0]
 800f602:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800f604:	79fb      	ldrb	r3, [r7, #7]
 800f606:	1c5a      	adds	r2, r3, #1
 800f608:	71fa      	strb	r2, [r7, #7]
 800f60a:	461a      	mov	r2, r3
 800f60c:	4613      	mov	r3, r2
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	4413      	add	r3, r2
 800f612:	00db      	lsls	r3, r3, #3
 800f614:	4a5d      	ldr	r2, [pc, #372]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f616:	4413      	add	r3, r2
 800f618:	496a      	ldr	r1, [pc, #424]	; (800f7c4 <UpdateSIGNALSNames+0x728>)
 800f61a:	461a      	mov	r2, r3
 800f61c:	460b      	mov	r3, r1
 800f61e:	cb03      	ldmia	r3!, {r0, r1}
 800f620:	6010      	str	r0, [r2, #0]
 800f622:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800f624:	79fb      	ldrb	r3, [r7, #7]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	71fa      	strb	r2, [r7, #7]
 800f62a:	461a      	mov	r2, r3
 800f62c:	4613      	mov	r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	4413      	add	r3, r2
 800f632:	00db      	lsls	r3, r3, #3
 800f634:	4a55      	ldr	r2, [pc, #340]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f636:	4413      	add	r3, r2
 800f638:	4963      	ldr	r1, [pc, #396]	; (800f7c8 <UpdateSIGNALSNames+0x72c>)
 800f63a:	461a      	mov	r2, r3
 800f63c:	460b      	mov	r3, r1
 800f63e:	cb03      	ldmia	r3!, {r0, r1}
 800f640:	6010      	str	r0, [r2, #0]
 800f642:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800f644:	79fb      	ldrb	r3, [r7, #7]
 800f646:	1c5a      	adds	r2, r3, #1
 800f648:	71fa      	strb	r2, [r7, #7]
 800f64a:	461a      	mov	r2, r3
 800f64c:	4613      	mov	r3, r2
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4413      	add	r3, r2
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	4a4d      	ldr	r2, [pc, #308]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f656:	4413      	add	r3, r2
 800f658:	495c      	ldr	r1, [pc, #368]	; (800f7cc <UpdateSIGNALSNames+0x730>)
 800f65a:	461a      	mov	r2, r3
 800f65c:	460b      	mov	r3, r1
 800f65e:	cb03      	ldmia	r3!, {r0, r1}
 800f660:	6010      	str	r0, [r2, #0]
 800f662:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800f664:	79fb      	ldrb	r3, [r7, #7]
 800f666:	1c5a      	adds	r2, r3, #1
 800f668:	71fa      	strb	r2, [r7, #7]
 800f66a:	461a      	mov	r2, r3
 800f66c:	4613      	mov	r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	4413      	add	r3, r2
 800f672:	00db      	lsls	r3, r3, #3
 800f674:	4a45      	ldr	r2, [pc, #276]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f676:	4413      	add	r3, r2
 800f678:	4a55      	ldr	r2, [pc, #340]	; (800f7d0 <UpdateSIGNALSNames+0x734>)
 800f67a:	461c      	mov	r4, r3
 800f67c:	4613      	mov	r3, r2
 800f67e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f680:	6020      	str	r0, [r4, #0]
 800f682:	6061      	str	r1, [r4, #4]
 800f684:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800f686:	79fb      	ldrb	r3, [r7, #7]
 800f688:	1c5a      	adds	r2, r3, #1
 800f68a:	71fa      	strb	r2, [r7, #7]
 800f68c:	461a      	mov	r2, r3
 800f68e:	4613      	mov	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	00db      	lsls	r3, r3, #3
 800f696:	4a3d      	ldr	r2, [pc, #244]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f698:	4413      	add	r3, r2
 800f69a:	494e      	ldr	r1, [pc, #312]	; (800f7d4 <UpdateSIGNALSNames+0x738>)
 800f69c:	461a      	mov	r2, r3
 800f69e:	460b      	mov	r3, r1
 800f6a0:	cb03      	ldmia	r3!, {r0, r1}
 800f6a2:	6010      	str	r0, [r2, #0]
 800f6a4:	6051      	str	r1, [r2, #4]
 800f6a6:	8819      	ldrh	r1, [r3, #0]
 800f6a8:	789b      	ldrb	r3, [r3, #2]
 800f6aa:	8111      	strh	r1, [r2, #8]
 800f6ac:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800f6ae:	79fb      	ldrb	r3, [r7, #7]
 800f6b0:	1c5a      	adds	r2, r3, #1
 800f6b2:	71fa      	strb	r2, [r7, #7]
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4413      	add	r3, r2
 800f6bc:	00db      	lsls	r3, r3, #3
 800f6be:	4a33      	ldr	r2, [pc, #204]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f6c0:	4413      	add	r3, r2
 800f6c2:	4a45      	ldr	r2, [pc, #276]	; (800f7d8 <UpdateSIGNALSNames+0x73c>)
 800f6c4:	461c      	mov	r4, r3
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6ca:	6020      	str	r0, [r4, #0]
 800f6cc:	6061      	str	r1, [r4, #4]
 800f6ce:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800f6d0:	79fb      	ldrb	r3, [r7, #7]
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	71fa      	strb	r2, [r7, #7]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	4613      	mov	r3, r2
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	4413      	add	r3, r2
 800f6de:	00db      	lsls	r3, r3, #3
 800f6e0:	4a2a      	ldr	r2, [pc, #168]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f6e2:	4413      	add	r3, r2
 800f6e4:	493d      	ldr	r1, [pc, #244]	; (800f7dc <UpdateSIGNALSNames+0x740>)
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	cb03      	ldmia	r3!, {r0, r1}
 800f6ec:	6010      	str	r0, [r2, #0]
 800f6ee:	6051      	str	r1, [r2, #4]
 800f6f0:	8819      	ldrh	r1, [r3, #0]
 800f6f2:	789b      	ldrb	r3, [r3, #2]
 800f6f4:	8111      	strh	r1, [r2, #8]
 800f6f6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800f6f8:	79fb      	ldrb	r3, [r7, #7]
 800f6fa:	1c5a      	adds	r2, r3, #1
 800f6fc:	71fa      	strb	r2, [r7, #7]
 800f6fe:	461a      	mov	r2, r3
 800f700:	4613      	mov	r3, r2
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	00db      	lsls	r3, r3, #3
 800f708:	4a20      	ldr	r2, [pc, #128]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f70a:	4413      	add	r3, r2
 800f70c:	4934      	ldr	r1, [pc, #208]	; (800f7e0 <UpdateSIGNALSNames+0x744>)
 800f70e:	461a      	mov	r2, r3
 800f710:	460b      	mov	r3, r1
 800f712:	cb03      	ldmia	r3!, {r0, r1}
 800f714:	6010      	str	r0, [r2, #0]
 800f716:	6051      	str	r1, [r2, #4]
 800f718:	8819      	ldrh	r1, [r3, #0]
 800f71a:	789b      	ldrb	r3, [r3, #2]
 800f71c:	8111      	strh	r1, [r2, #8]
 800f71e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800f720:	79fb      	ldrb	r3, [r7, #7]
 800f722:	1c5a      	adds	r2, r3, #1
 800f724:	71fa      	strb	r2, [r7, #7]
 800f726:	461a      	mov	r2, r3
 800f728:	4613      	mov	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	4413      	add	r3, r2
 800f72e:	00db      	lsls	r3, r3, #3
 800f730:	4a16      	ldr	r2, [pc, #88]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f732:	4413      	add	r3, r2
 800f734:	4a2b      	ldr	r2, [pc, #172]	; (800f7e4 <UpdateSIGNALSNames+0x748>)
 800f736:	461c      	mov	r4, r3
 800f738:	4613      	mov	r3, r2
 800f73a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f73c:	6020      	str	r0, [r4, #0]
 800f73e:	6061      	str	r1, [r4, #4]
 800f740:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800f742:	79fb      	ldrb	r3, [r7, #7]
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	71fa      	strb	r2, [r7, #7]
 800f748:	461a      	mov	r2, r3
 800f74a:	4613      	mov	r3, r2
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	4413      	add	r3, r2
 800f750:	00db      	lsls	r3, r3, #3
 800f752:	4a0e      	ldr	r2, [pc, #56]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f754:	4413      	add	r3, r2
 800f756:	4924      	ldr	r1, [pc, #144]	; (800f7e8 <UpdateSIGNALSNames+0x74c>)
 800f758:	461a      	mov	r2, r3
 800f75a:	460b      	mov	r3, r1
 800f75c:	cb03      	ldmia	r3!, {r0, r1}
 800f75e:	6010      	str	r0, [r2, #0]
 800f760:	6051      	str	r1, [r2, #4]
 800f762:	8819      	ldrh	r1, [r3, #0]
 800f764:	789b      	ldrb	r3, [r3, #2]
 800f766:	8111      	strh	r1, [r2, #8]
 800f768:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800f76a:	79fb      	ldrb	r3, [r7, #7]
 800f76c:	1c5a      	adds	r2, r3, #1
 800f76e:	71fa      	strb	r2, [r7, #7]
 800f770:	461a      	mov	r2, r3
 800f772:	4613      	mov	r3, r2
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	4413      	add	r3, r2
 800f778:	00db      	lsls	r3, r3, #3
 800f77a:	4a04      	ldr	r2, [pc, #16]	; (800f78c <UpdateSIGNALSNames+0x6f0>)
 800f77c:	4413      	add	r3, r2
 800f77e:	4a1b      	ldr	r2, [pc, #108]	; (800f7ec <UpdateSIGNALSNames+0x750>)
 800f780:	6810      	ldr	r0, [r2, #0]
 800f782:	6018      	str	r0, [r3, #0]
 800f784:	e034      	b.n	800f7f0 <UpdateSIGNALSNames+0x754>
 800f786:	bf00      	nop
 800f788:	08029474 	.word	0x08029474
 800f78c:	200041b4 	.word	0x200041b4
 800f790:	0802947c 	.word	0x0802947c
 800f794:	08029484 	.word	0x08029484
 800f798:	0802948c 	.word	0x0802948c
 800f79c:	08029494 	.word	0x08029494
 800f7a0:	0802949c 	.word	0x0802949c
 800f7a4:	080294a4 	.word	0x080294a4
 800f7a8:	080294ac 	.word	0x080294ac
 800f7ac:	080294b4 	.word	0x080294b4
 800f7b0:	080294bc 	.word	0x080294bc
 800f7b4:	080294c4 	.word	0x080294c4
 800f7b8:	080294cc 	.word	0x080294cc
 800f7bc:	080294d4 	.word	0x080294d4
 800f7c0:	080294dc 	.word	0x080294dc
 800f7c4:	080294e4 	.word	0x080294e4
 800f7c8:	080294ec 	.word	0x080294ec
 800f7cc:	080294f4 	.word	0x080294f4
 800f7d0:	080294fc 	.word	0x080294fc
 800f7d4:	08029508 	.word	0x08029508
 800f7d8:	08029514 	.word	0x08029514
 800f7dc:	08029520 	.word	0x08029520
 800f7e0:	0802952c 	.word	0x0802952c
 800f7e4:	08029538 	.word	0x08029538
 800f7e8:	08029544 	.word	0x08029544
 800f7ec:	08029550 	.word	0x08029550
 800f7f0:	8891      	ldrh	r1, [r2, #4]
 800f7f2:	7992      	ldrb	r2, [r2, #6]
 800f7f4:	8099      	strh	r1, [r3, #4]
 800f7f6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800f7f8:	79fb      	ldrb	r3, [r7, #7]
 800f7fa:	1c5a      	adds	r2, r3, #1
 800f7fc:	71fa      	strb	r2, [r7, #7]
 800f7fe:	461a      	mov	r2, r3
 800f800:	4613      	mov	r3, r2
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	4413      	add	r3, r2
 800f806:	00db      	lsls	r3, r3, #3
 800f808:	4a82      	ldr	r2, [pc, #520]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f80a:	4413      	add	r3, r2
 800f80c:	4a82      	ldr	r2, [pc, #520]	; (800fa18 <UpdateSIGNALSNames+0x97c>)
 800f80e:	6810      	ldr	r0, [r2, #0]
 800f810:	6018      	str	r0, [r3, #0]
 800f812:	8891      	ldrh	r1, [r2, #4]
 800f814:	7992      	ldrb	r2, [r2, #6]
 800f816:	8099      	strh	r1, [r3, #4]
 800f818:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800f81a:	79fb      	ldrb	r3, [r7, #7]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	71fa      	strb	r2, [r7, #7]
 800f820:	461a      	mov	r2, r3
 800f822:	4613      	mov	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4413      	add	r3, r2
 800f828:	00db      	lsls	r3, r3, #3
 800f82a:	4a7a      	ldr	r2, [pc, #488]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f82c:	4413      	add	r3, r2
 800f82e:	4a7b      	ldr	r2, [pc, #492]	; (800fa1c <UpdateSIGNALSNames+0x980>)
 800f830:	6810      	ldr	r0, [r2, #0]
 800f832:	6018      	str	r0, [r3, #0]
 800f834:	8891      	ldrh	r1, [r2, #4]
 800f836:	7992      	ldrb	r2, [r2, #6]
 800f838:	8099      	strh	r1, [r3, #4]
 800f83a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800f83c:	79fb      	ldrb	r3, [r7, #7]
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	71fa      	strb	r2, [r7, #7]
 800f842:	461a      	mov	r2, r3
 800f844:	4613      	mov	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	4413      	add	r3, r2
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	4a71      	ldr	r2, [pc, #452]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f84e:	4413      	add	r3, r2
 800f850:	4a73      	ldr	r2, [pc, #460]	; (800fa20 <UpdateSIGNALSNames+0x984>)
 800f852:	6810      	ldr	r0, [r2, #0]
 800f854:	6018      	str	r0, [r3, #0]
 800f856:	8891      	ldrh	r1, [r2, #4]
 800f858:	7992      	ldrb	r2, [r2, #6]
 800f85a:	8099      	strh	r1, [r3, #4]
 800f85c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	1c5a      	adds	r2, r3, #1
 800f862:	71fa      	strb	r2, [r7, #7]
 800f864:	461a      	mov	r2, r3
 800f866:	4613      	mov	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4413      	add	r3, r2
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	4a69      	ldr	r2, [pc, #420]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f870:	4413      	add	r3, r2
 800f872:	4a6c      	ldr	r2, [pc, #432]	; (800fa24 <UpdateSIGNALSNames+0x988>)
 800f874:	6810      	ldr	r0, [r2, #0]
 800f876:	6018      	str	r0, [r3, #0]
 800f878:	8891      	ldrh	r1, [r2, #4]
 800f87a:	7992      	ldrb	r2, [r2, #6]
 800f87c:	8099      	strh	r1, [r3, #4]
 800f87e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800f880:	79fb      	ldrb	r3, [r7, #7]
 800f882:	1c5a      	adds	r2, r3, #1
 800f884:	71fa      	strb	r2, [r7, #7]
 800f886:	461a      	mov	r2, r3
 800f888:	4613      	mov	r3, r2
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	4413      	add	r3, r2
 800f88e:	00db      	lsls	r3, r3, #3
 800f890:	4a60      	ldr	r2, [pc, #384]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f892:	4413      	add	r3, r2
 800f894:	4a64      	ldr	r2, [pc, #400]	; (800fa28 <UpdateSIGNALSNames+0x98c>)
 800f896:	6810      	ldr	r0, [r2, #0]
 800f898:	6018      	str	r0, [r3, #0]
 800f89a:	8891      	ldrh	r1, [r2, #4]
 800f89c:	7992      	ldrb	r2, [r2, #6]
 800f89e:	8099      	strh	r1, [r3, #4]
 800f8a0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800f8a2:	79fb      	ldrb	r3, [r7, #7]
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	71fa      	strb	r2, [r7, #7]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4613      	mov	r3, r2
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	4413      	add	r3, r2
 800f8b0:	00db      	lsls	r3, r3, #3
 800f8b2:	4a58      	ldr	r2, [pc, #352]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f8b4:	4413      	add	r3, r2
 800f8b6:	4a5d      	ldr	r2, [pc, #372]	; (800fa2c <UpdateSIGNALSNames+0x990>)
 800f8b8:	6810      	ldr	r0, [r2, #0]
 800f8ba:	6018      	str	r0, [r3, #0]
 800f8bc:	8891      	ldrh	r1, [r2, #4]
 800f8be:	7992      	ldrb	r2, [r2, #6]
 800f8c0:	8099      	strh	r1, [r3, #4]
 800f8c2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800f8c4:	79fb      	ldrb	r3, [r7, #7]
 800f8c6:	1c5a      	adds	r2, r3, #1
 800f8c8:	71fa      	strb	r2, [r7, #7]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4413      	add	r3, r2
 800f8d2:	00db      	lsls	r3, r3, #3
 800f8d4:	4a4f      	ldr	r2, [pc, #316]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f8d6:	4413      	add	r3, r2
 800f8d8:	4a55      	ldr	r2, [pc, #340]	; (800fa30 <UpdateSIGNALSNames+0x994>)
 800f8da:	6810      	ldr	r0, [r2, #0]
 800f8dc:	6018      	str	r0, [r3, #0]
 800f8de:	8891      	ldrh	r1, [r2, #4]
 800f8e0:	7992      	ldrb	r2, [r2, #6]
 800f8e2:	8099      	strh	r1, [r3, #4]
 800f8e4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800f8e6:	79fb      	ldrb	r3, [r7, #7]
 800f8e8:	1c5a      	adds	r2, r3, #1
 800f8ea:	71fa      	strb	r2, [r7, #7]
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4413      	add	r3, r2
 800f8f4:	00db      	lsls	r3, r3, #3
 800f8f6:	4a47      	ldr	r2, [pc, #284]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f8f8:	4413      	add	r3, r2
 800f8fa:	4a4e      	ldr	r2, [pc, #312]	; (800fa34 <UpdateSIGNALSNames+0x998>)
 800f8fc:	6810      	ldr	r0, [r2, #0]
 800f8fe:	6018      	str	r0, [r3, #0]
 800f900:	8891      	ldrh	r1, [r2, #4]
 800f902:	7992      	ldrb	r2, [r2, #6]
 800f904:	8099      	strh	r1, [r3, #4]
 800f906:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800f908:	79fb      	ldrb	r3, [r7, #7]
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	71fa      	strb	r2, [r7, #7]
 800f90e:	461a      	mov	r2, r3
 800f910:	4613      	mov	r3, r2
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	4413      	add	r3, r2
 800f916:	00db      	lsls	r3, r3, #3
 800f918:	4a3e      	ldr	r2, [pc, #248]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f91a:	4413      	add	r3, r2
 800f91c:	4a46      	ldr	r2, [pc, #280]	; (800fa38 <UpdateSIGNALSNames+0x99c>)
 800f91e:	6810      	ldr	r0, [r2, #0]
 800f920:	6018      	str	r0, [r3, #0]
 800f922:	8891      	ldrh	r1, [r2, #4]
 800f924:	7992      	ldrb	r2, [r2, #6]
 800f926:	8099      	strh	r1, [r3, #4]
 800f928:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800f92a:	79fb      	ldrb	r3, [r7, #7]
 800f92c:	1c5a      	adds	r2, r3, #1
 800f92e:	71fa      	strb	r2, [r7, #7]
 800f930:	461a      	mov	r2, r3
 800f932:	4613      	mov	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	00db      	lsls	r3, r3, #3
 800f93a:	4a36      	ldr	r2, [pc, #216]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f93c:	4413      	add	r3, r2
 800f93e:	4a3f      	ldr	r2, [pc, #252]	; (800fa3c <UpdateSIGNALSNames+0x9a0>)
 800f940:	6810      	ldr	r0, [r2, #0]
 800f942:	6018      	str	r0, [r3, #0]
 800f944:	8891      	ldrh	r1, [r2, #4]
 800f946:	7992      	ldrb	r2, [r2, #6]
 800f948:	8099      	strh	r1, [r3, #4]
 800f94a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800f94c:	79fb      	ldrb	r3, [r7, #7]
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	71fa      	strb	r2, [r7, #7]
 800f952:	461a      	mov	r2, r3
 800f954:	4613      	mov	r3, r2
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4413      	add	r3, r2
 800f95a:	00db      	lsls	r3, r3, #3
 800f95c:	4a2d      	ldr	r2, [pc, #180]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f95e:	4413      	add	r3, r2
 800f960:	4a37      	ldr	r2, [pc, #220]	; (800fa40 <UpdateSIGNALSNames+0x9a4>)
 800f962:	6810      	ldr	r0, [r2, #0]
 800f964:	6018      	str	r0, [r3, #0]
 800f966:	8891      	ldrh	r1, [r2, #4]
 800f968:	7992      	ldrb	r2, [r2, #6]
 800f96a:	8099      	strh	r1, [r3, #4]
 800f96c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800f96e:	79fb      	ldrb	r3, [r7, #7]
 800f970:	1c5a      	adds	r2, r3, #1
 800f972:	71fa      	strb	r2, [r7, #7]
 800f974:	461a      	mov	r2, r3
 800f976:	4613      	mov	r3, r2
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	4413      	add	r3, r2
 800f97c:	00db      	lsls	r3, r3, #3
 800f97e:	4a25      	ldr	r2, [pc, #148]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f980:	4413      	add	r3, r2
 800f982:	4930      	ldr	r1, [pc, #192]	; (800fa44 <UpdateSIGNALSNames+0x9a8>)
 800f984:	461a      	mov	r2, r3
 800f986:	460b      	mov	r3, r1
 800f988:	cb03      	ldmia	r3!, {r0, r1}
 800f98a:	6010      	str	r0, [r2, #0]
 800f98c:	6051      	str	r1, [r2, #4]
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800f992:	79fb      	ldrb	r3, [r7, #7]
 800f994:	1c5a      	adds	r2, r3, #1
 800f996:	71fa      	strb	r2, [r7, #7]
 800f998:	461a      	mov	r2, r3
 800f99a:	4613      	mov	r3, r2
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	4413      	add	r3, r2
 800f9a0:	00db      	lsls	r3, r3, #3
 800f9a2:	4a1c      	ldr	r2, [pc, #112]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f9a4:	4413      	add	r3, r2
 800f9a6:	4a28      	ldr	r2, [pc, #160]	; (800fa48 <UpdateSIGNALSNames+0x9ac>)
 800f9a8:	6810      	ldr	r0, [r2, #0]
 800f9aa:	6018      	str	r0, [r3, #0]
 800f9ac:	8891      	ldrh	r1, [r2, #4]
 800f9ae:	7992      	ldrb	r2, [r2, #6]
 800f9b0:	8099      	strh	r1, [r3, #4]
 800f9b2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800f9b4:	79fb      	ldrb	r3, [r7, #7]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	71fa      	strb	r2, [r7, #7]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	4613      	mov	r3, r2
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	4a13      	ldr	r2, [pc, #76]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f9c6:	4413      	add	r3, r2
 800f9c8:	4a20      	ldr	r2, [pc, #128]	; (800fa4c <UpdateSIGNALSNames+0x9b0>)
 800f9ca:	461c      	mov	r4, r3
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9d0:	6020      	str	r0, [r4, #0]
 800f9d2:	6061      	str	r1, [r4, #4]
 800f9d4:	60a2      	str	r2, [r4, #8]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800f9da:	79fb      	ldrb	r3, [r7, #7]
 800f9dc:	1c5a      	adds	r2, r3, #1
 800f9de:	71fa      	strb	r2, [r7, #7]
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	4413      	add	r3, r2
 800f9e8:	00db      	lsls	r3, r3, #3
 800f9ea:	4a0a      	ldr	r2, [pc, #40]	; (800fa14 <UpdateSIGNALSNames+0x978>)
 800f9ec:	4413      	add	r3, r2
 800f9ee:	4a18      	ldr	r2, [pc, #96]	; (800fa50 <UpdateSIGNALSNames+0x9b4>)
 800f9f0:	461c      	mov	r4, r3
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9f6:	6020      	str	r0, [r4, #0]
 800f9f8:	6061      	str	r1, [r4, #4]
 800f9fa:	60a2      	str	r2, [r4, #8]
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800fa00:	79fb      	ldrb	r3, [r7, #7]
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	4b13      	ldr	r3, [pc, #76]	; (800fa54 <UpdateSIGNALSNames+0x9b8>)
 800fa06:	801a      	strh	r2, [r3, #0]


}
 800fa08:	bf00      	nop
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bc90      	pop	{r4, r7}
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop
 800fa14:	200041b4 	.word	0x200041b4
 800fa18:	08029558 	.word	0x08029558
 800fa1c:	08029560 	.word	0x08029560
 800fa20:	08029568 	.word	0x08029568
 800fa24:	08029570 	.word	0x08029570
 800fa28:	08029578 	.word	0x08029578
 800fa2c:	08029580 	.word	0x08029580
 800fa30:	08029588 	.word	0x08029588
 800fa34:	08029590 	.word	0x08029590
 800fa38:	08029598 	.word	0x08029598
 800fa3c:	080295a0 	.word	0x080295a0
 800fa40:	080295a8 	.word	0x080295a8
 800fa44:	080295b0 	.word	0x080295b0
 800fa48:	080295bc 	.word	0x080295bc
 800fa4c:	080295c4 	.word	0x080295c4
 800fa50:	080295d4 	.word	0x080295d4
 800fa54:	20004ca4 	.word	0x20004ca4

0800fa58 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800fa58:	b5b0      	push	{r4, r5, r7, lr}
 800fa5a:	b086      	sub	sp, #24
 800fa5c:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800fa5e:	4974      	ldr	r1, [pc, #464]	; (800fc30 <print_self_DetailsSiemens+0x1d8>)
 800fa60:	4874      	ldr	r0, [pc, #464]	; (800fc34 <print_self_DetailsSiemens+0x1dc>)
 800fa62:	f015 fc7d 	bl	8025360 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800fa66:	4b74      	ldr	r3, [pc, #464]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fa68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	4873      	ldr	r0, [pc, #460]	; (800fc3c <print_self_DetailsSiemens+0x1e4>)
 800fa70:	f015 fc76 	bl	8025360 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800fa74:	4b70      	ldr	r3, [pc, #448]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fa76:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	4b6e      	ldr	r3, [pc, #440]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fa7e:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800fa82:	461a      	mov	r2, r3
 800fa84:	4b6c      	ldr	r3, [pc, #432]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fa86:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	4b6a      	ldr	r3, [pc, #424]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fa8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800fa92:	9300      	str	r3, [sp, #0]
 800fa94:	4603      	mov	r3, r0
 800fa96:	486a      	ldr	r0, [pc, #424]	; (800fc40 <print_self_DetailsSiemens+0x1e8>)
 800fa98:	f015 fc62 	bl	8025360 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800fa9c:	4b66      	ldr	r3, [pc, #408]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fa9e:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800faa2:	4618      	mov	r0, r3
 800faa4:	4b64      	ldr	r3, [pc, #400]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800faa6:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 800faaa:	461c      	mov	r4, r3
 800faac:	4b62      	ldr	r3, [pc, #392]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800faae:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 800fab2:	461d      	mov	r5, r3
 800fab4:	4b60      	ldr	r3, [pc, #384]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fab6:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 800faba:	461a      	mov	r2, r3
 800fabc:	4b5e      	ldr	r3, [pc, #376]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fabe:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 800fac2:	4619      	mov	r1, r3
 800fac4:	4b5c      	ldr	r3, [pc, #368]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fac6:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 800faca:	9302      	str	r3, [sp, #8]
 800facc:	9101      	str	r1, [sp, #4]
 800face:	9200      	str	r2, [sp, #0]
 800fad0:	462b      	mov	r3, r5
 800fad2:	4622      	mov	r2, r4
 800fad4:	4601      	mov	r1, r0
 800fad6:	485b      	ldr	r0, [pc, #364]	; (800fc44 <print_self_DetailsSiemens+0x1ec>)
 800fad8:	f015 fc42 	bl	8025360 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800fadc:	4b56      	ldr	r3, [pc, #344]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fade:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 800fae2:	4619      	mov	r1, r3
 800fae4:	4858      	ldr	r0, [pc, #352]	; (800fc48 <print_self_DetailsSiemens+0x1f0>)
 800fae6:	f015 fc3b 	bl	8025360 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800faea:	2300      	movs	r3, #0
 800faec:	71fb      	strb	r3, [r7, #7]
 800faee:	e037      	b.n	800fb60 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800faf0:	79fb      	ldrb	r3, [r7, #7]
 800faf2:	1c59      	adds	r1, r3, #1
 800faf4:	79fb      	ldrb	r3, [r7, #7]
 800faf6:	4a50      	ldr	r2, [pc, #320]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800faf8:	33ae      	adds	r3, #174	; 0xae
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	4413      	add	r3, r2
 800fafe:	785b      	ldrb	r3, [r3, #1]
 800fb00:	461c      	mov	r4, r3
 800fb02:	79fb      	ldrb	r3, [r7, #7]
 800fb04:	4a4c      	ldr	r2, [pc, #304]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4413      	add	r3, r2
 800fb0a:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800fb0e:	461d      	mov	r5, r3
 800fb10:	79fb      	ldrb	r3, [r7, #7]
 800fb12:	4a49      	ldr	r2, [pc, #292]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4413      	add	r3, r2
 800fb18:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	79fb      	ldrb	r3, [r7, #7]
 800fb20:	4a45      	ldr	r2, [pc, #276]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	4413      	add	r3, r2
 800fb26:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800fb2a:	9301      	str	r3, [sp, #4]
 800fb2c:	9000      	str	r0, [sp, #0]
 800fb2e:	462b      	mov	r3, r5
 800fb30:	4622      	mov	r2, r4
 800fb32:	4846      	ldr	r0, [pc, #280]	; (800fc4c <print_self_DetailsSiemens+0x1f4>)
 800fb34:	f015 fc14 	bl	8025360 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	4a3f      	ldr	r2, [pc, #252]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb3c:	33b6      	adds	r3, #182	; 0xb6
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	4413      	add	r3, r2
 800fb42:	88db      	ldrh	r3, [r3, #6]
 800fb44:	4619      	mov	r1, r3
 800fb46:	79fb      	ldrb	r3, [r7, #7]
 800fb48:	4a3b      	ldr	r2, [pc, #236]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	4413      	add	r3, r2
 800fb4e:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 800fb52:	461a      	mov	r2, r3
 800fb54:	483e      	ldr	r0, [pc, #248]	; (800fc50 <print_self_DetailsSiemens+0x1f8>)
 800fb56:	f015 fc03 	bl	8025360 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800fb5a:	79fb      	ldrb	r3, [r7, #7]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	71fb      	strb	r3, [r7, #7]
 800fb60:	4b35      	ldr	r3, [pc, #212]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fb66:	79fa      	ldrb	r2, [r7, #7]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d3c1      	bcc.n	800faf0 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800fb6c:	4b32      	ldr	r3, [pc, #200]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb6e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800fb72:	4619      	mov	r1, r3
 800fb74:	4837      	ldr	r0, [pc, #220]	; (800fc54 <print_self_DetailsSiemens+0x1fc>)
 800fb76:	f015 fbf3 	bl	8025360 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800fb7a:	4b2f      	ldr	r3, [pc, #188]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb7c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800fb80:	4619      	mov	r1, r3
 800fb82:	4835      	ldr	r0, [pc, #212]	; (800fc58 <print_self_DetailsSiemens+0x200>)
 800fb84:	f015 fbec 	bl	8025360 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800fb88:	4b2b      	ldr	r3, [pc, #172]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4832      	ldr	r0, [pc, #200]	; (800fc5c <print_self_DetailsSiemens+0x204>)
 800fb92:	f015 fbe5 	bl	8025360 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800fb96:	4b28      	ldr	r3, [pc, #160]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fb98:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	482f      	ldr	r0, [pc, #188]	; (800fc5c <print_self_DetailsSiemens+0x204>)
 800fba0:	f015 fbde 	bl	8025360 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800fba4:	4b24      	ldr	r3, [pc, #144]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fba6:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800fbaa:	4619      	mov	r1, r3
 800fbac:	482c      	ldr	r0, [pc, #176]	; (800fc60 <print_self_DetailsSiemens+0x208>)
 800fbae:	f015 fbd7 	bl	8025360 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800fbb2:	4b21      	ldr	r3, [pc, #132]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fbb4:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800fbb8:	4619      	mov	r1, r3
 800fbba:	482a      	ldr	r0, [pc, #168]	; (800fc64 <print_self_DetailsSiemens+0x20c>)
 800fbbc:	f015 fbd0 	bl	8025360 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800fbc0:	4b1d      	ldr	r3, [pc, #116]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fbc2:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	4827      	ldr	r0, [pc, #156]	; (800fc68 <print_self_DetailsSiemens+0x210>)
 800fbca:	f015 fbc9 	bl	8025360 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800fbce:	4b1a      	ldr	r3, [pc, #104]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fbd0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4825      	ldr	r0, [pc, #148]	; (800fc6c <print_self_DetailsSiemens+0x214>)
 800fbd8:	f015 fbc2 	bl	8025360 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800fbdc:	4b16      	ldr	r3, [pc, #88]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fbde:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	4822      	ldr	r0, [pc, #136]	; (800fc70 <print_self_DetailsSiemens+0x218>)
 800fbe6:	f015 fbbb 	bl	8025360 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800fbea:	4b13      	ldr	r3, [pc, #76]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fbec:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	4820      	ldr	r0, [pc, #128]	; (800fc74 <print_self_DetailsSiemens+0x21c>)
 800fbf4:	f015 fbb4 	bl	8025360 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800fbf8:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fbfa:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800fbfe:	4619      	mov	r1, r3
 800fc00:	481d      	ldr	r0, [pc, #116]	; (800fc78 <print_self_DetailsSiemens+0x220>)
 800fc02:	f015 fbad 	bl	8025360 <iprintf>
	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 800fc06:	4b0c      	ldr	r3, [pc, #48]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fc08:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d103      	bne.n	800fc18 <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 800fc10:	4b09      	ldr	r3, [pc, #36]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fc12:	2232      	movs	r2, #50	; 0x32
 800fc14:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800fc18:	4b07      	ldr	r3, [pc, #28]	; (800fc38 <print_self_DetailsSiemens+0x1e0>)
 800fc1a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800fc1e:	4619      	mov	r1, r3
 800fc20:	4816      	ldr	r0, [pc, #88]	; (800fc7c <print_self_DetailsSiemens+0x224>)
 800fc22:	f015 fb9d 	bl	8025360 <iprintf>

}
 800fc26:	bf00      	nop
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	20000305 	.word	0x20000305
 800fc34:	080295e4 	.word	0x080295e4
 800fc38:	20000304 	.word	0x20000304
 800fc3c:	080295f8 	.word	0x080295f8
 800fc40:	08029608 	.word	0x08029608
 800fc44:	08029620 	.word	0x08029620
 800fc48:	08029648 	.word	0x08029648
 800fc4c:	08029660 	.word	0x08029660
 800fc50:	08029674 	.word	0x08029674
 800fc54:	0802968c 	.word	0x0802968c
 800fc58:	0802969c 	.word	0x0802969c
 800fc5c:	080296b0 	.word	0x080296b0
 800fc60:	080296c4 	.word	0x080296c4
 800fc64:	080296d4 	.word	0x080296d4
 800fc68:	080296e4 	.word	0x080296e4
 800fc6c:	080296f8 	.word	0x080296f8
 800fc70:	08029710 	.word	0x08029710
 800fc74:	08029728 	.word	0x08029728
 800fc78:	08029744 	.word	0x08029744
 800fc7c:	08029760 	.word	0x08029760

0800fc80 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800fc88:	f008 fb60 	bl	801834c <HAL_GetTick>
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	bfb8      	it	lt
 800fc96:	425b      	neglt	r3, r3
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800fca6:	23f3      	movs	r3, #243	; 0xf3
 800fca8:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800fcaa:	f012 fe63 	bl	8022974 <udp_new>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	4a7a      	ldr	r2, [pc, #488]	; (800fe9c <udpServer_init+0x1fc>)
 800fcb2:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800fcb4:	4b7a      	ldr	r3, [pc, #488]	; (800fea0 <udpServer_init+0x200>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d002      	beq.n	800fcc2 <udpServer_init+0x22>
 800fcbc:	2b02      	cmp	r3, #2
 800fcbe:	d074      	beq.n	800fdaa <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800fcc0:	e0e9      	b.n	800fe96 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800fcc2:	4b77      	ldr	r3, [pc, #476]	; (800fea0 <udpServer_init+0x200>)
 800fcc4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fcc8:	061a      	lsls	r2, r3, #24
 800fcca:	4b75      	ldr	r3, [pc, #468]	; (800fea0 <udpServer_init+0x200>)
 800fccc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fcd0:	041b      	lsls	r3, r3, #16
 800fcd2:	431a      	orrs	r2, r3
 800fcd4:	4b72      	ldr	r3, [pc, #456]	; (800fea0 <udpServer_init+0x200>)
 800fcd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fcda:	021b      	lsls	r3, r3, #8
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	4a70      	ldr	r2, [pc, #448]	; (800fea0 <udpServer_init+0x200>)
 800fce0:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800fce4:	4313      	orrs	r3, r2
 800fce6:	061a      	lsls	r2, r3, #24
 800fce8:	4b6d      	ldr	r3, [pc, #436]	; (800fea0 <udpServer_init+0x200>)
 800fcea:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fcee:	0619      	lsls	r1, r3, #24
 800fcf0:	4b6b      	ldr	r3, [pc, #428]	; (800fea0 <udpServer_init+0x200>)
 800fcf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fcf6:	041b      	lsls	r3, r3, #16
 800fcf8:	4319      	orrs	r1, r3
 800fcfa:	4b69      	ldr	r3, [pc, #420]	; (800fea0 <udpServer_init+0x200>)
 800fcfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd00:	021b      	lsls	r3, r3, #8
 800fd02:	430b      	orrs	r3, r1
 800fd04:	4966      	ldr	r1, [pc, #408]	; (800fea0 <udpServer_init+0x200>)
 800fd06:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800fd0a:	430b      	orrs	r3, r1
 800fd0c:	021b      	lsls	r3, r3, #8
 800fd0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd12:	431a      	orrs	r2, r3
 800fd14:	4b62      	ldr	r3, [pc, #392]	; (800fea0 <udpServer_init+0x200>)
 800fd16:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fd1a:	0619      	lsls	r1, r3, #24
 800fd1c:	4b60      	ldr	r3, [pc, #384]	; (800fea0 <udpServer_init+0x200>)
 800fd1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd22:	041b      	lsls	r3, r3, #16
 800fd24:	4319      	orrs	r1, r3
 800fd26:	4b5e      	ldr	r3, [pc, #376]	; (800fea0 <udpServer_init+0x200>)
 800fd28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd2c:	021b      	lsls	r3, r3, #8
 800fd2e:	430b      	orrs	r3, r1
 800fd30:	495b      	ldr	r1, [pc, #364]	; (800fea0 <udpServer_init+0x200>)
 800fd32:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800fd36:	430b      	orrs	r3, r1
 800fd38:	0a1b      	lsrs	r3, r3, #8
 800fd3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd3e:	431a      	orrs	r2, r3
 800fd40:	4b57      	ldr	r3, [pc, #348]	; (800fea0 <udpServer_init+0x200>)
 800fd42:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fd46:	0619      	lsls	r1, r3, #24
 800fd48:	4b55      	ldr	r3, [pc, #340]	; (800fea0 <udpServer_init+0x200>)
 800fd4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd4e:	041b      	lsls	r3, r3, #16
 800fd50:	4319      	orrs	r1, r3
 800fd52:	4b53      	ldr	r3, [pc, #332]	; (800fea0 <udpServer_init+0x200>)
 800fd54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd58:	021b      	lsls	r3, r3, #8
 800fd5a:	430b      	orrs	r3, r1
 800fd5c:	4950      	ldr	r1, [pc, #320]	; (800fea0 <udpServer_init+0x200>)
 800fd5e:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800fd62:	430b      	orrs	r3, r1
 800fd64:	0e1b      	lsrs	r3, r3, #24
 800fd66:	4313      	orrs	r3, r2
 800fd68:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800fd6a:	4b4c      	ldr	r3, [pc, #304]	; (800fe9c <udpServer_init+0x1fc>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a4c      	ldr	r2, [pc, #304]	; (800fea0 <udpServer_init+0x200>)
 800fd70:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800fd74:	4639      	mov	r1, r7
 800fd76:	4618      	mov	r0, r3
 800fd78:	f012 fd12 	bl	80227a0 <udp_bind>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800fd80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d107      	bne.n	800fd98 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800fd88:	4b44      	ldr	r3, [pc, #272]	; (800fe9c <udpServer_init+0x1fc>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	4945      	ldr	r1, [pc, #276]	; (800fea4 <udpServer_init+0x204>)
 800fd90:	4618      	mov	r0, r3
 800fd92:	f012 fd8d 	bl	80228b0 <udp_recv>
		break;
 800fd96:	e07c      	b.n	800fe92 <udpServer_init+0x1f2>
			printf("N-OK\n");
 800fd98:	4843      	ldr	r0, [pc, #268]	; (800fea8 <udpServer_init+0x208>)
 800fd9a:	f015 fb7d 	bl	8025498 <puts>
			udp_remove(upcb);
 800fd9e:	4b3f      	ldr	r3, [pc, #252]	; (800fe9c <udpServer_init+0x1fc>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f012 fda4 	bl	80228f0 <udp_remove>
		break;
 800fda8:	e073      	b.n	800fe92 <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800fdaa:	4b3d      	ldr	r3, [pc, #244]	; (800fea0 <udpServer_init+0x200>)
 800fdac:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800fdb0:	061a      	lsls	r2, r3, #24
 800fdb2:	4b3b      	ldr	r3, [pc, #236]	; (800fea0 <udpServer_init+0x200>)
 800fdb4:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800fdb8:	041b      	lsls	r3, r3, #16
 800fdba:	431a      	orrs	r2, r3
 800fdbc:	4b38      	ldr	r3, [pc, #224]	; (800fea0 <udpServer_init+0x200>)
 800fdbe:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800fdc2:	021b      	lsls	r3, r3, #8
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	4a36      	ldr	r2, [pc, #216]	; (800fea0 <udpServer_init+0x200>)
 800fdc8:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	061a      	lsls	r2, r3, #24
 800fdd0:	4b33      	ldr	r3, [pc, #204]	; (800fea0 <udpServer_init+0x200>)
 800fdd2:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800fdd6:	0619      	lsls	r1, r3, #24
 800fdd8:	4b31      	ldr	r3, [pc, #196]	; (800fea0 <udpServer_init+0x200>)
 800fdda:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800fdde:	041b      	lsls	r3, r3, #16
 800fde0:	4319      	orrs	r1, r3
 800fde2:	4b2f      	ldr	r3, [pc, #188]	; (800fea0 <udpServer_init+0x200>)
 800fde4:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800fde8:	021b      	lsls	r3, r3, #8
 800fdea:	430b      	orrs	r3, r1
 800fdec:	492c      	ldr	r1, [pc, #176]	; (800fea0 <udpServer_init+0x200>)
 800fdee:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800fdf2:	430b      	orrs	r3, r1
 800fdf4:	021b      	lsls	r3, r3, #8
 800fdf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fdfa:	431a      	orrs	r2, r3
 800fdfc:	4b28      	ldr	r3, [pc, #160]	; (800fea0 <udpServer_init+0x200>)
 800fdfe:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800fe02:	0619      	lsls	r1, r3, #24
 800fe04:	4b26      	ldr	r3, [pc, #152]	; (800fea0 <udpServer_init+0x200>)
 800fe06:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800fe0a:	041b      	lsls	r3, r3, #16
 800fe0c:	4319      	orrs	r1, r3
 800fe0e:	4b24      	ldr	r3, [pc, #144]	; (800fea0 <udpServer_init+0x200>)
 800fe10:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800fe14:	021b      	lsls	r3, r3, #8
 800fe16:	430b      	orrs	r3, r1
 800fe18:	4921      	ldr	r1, [pc, #132]	; (800fea0 <udpServer_init+0x200>)
 800fe1a:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800fe1e:	430b      	orrs	r3, r1
 800fe20:	0a1b      	lsrs	r3, r3, #8
 800fe22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fe26:	431a      	orrs	r2, r3
 800fe28:	4b1d      	ldr	r3, [pc, #116]	; (800fea0 <udpServer_init+0x200>)
 800fe2a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800fe2e:	0619      	lsls	r1, r3, #24
 800fe30:	4b1b      	ldr	r3, [pc, #108]	; (800fea0 <udpServer_init+0x200>)
 800fe32:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800fe36:	041b      	lsls	r3, r3, #16
 800fe38:	4319      	orrs	r1, r3
 800fe3a:	4b19      	ldr	r3, [pc, #100]	; (800fea0 <udpServer_init+0x200>)
 800fe3c:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800fe40:	021b      	lsls	r3, r3, #8
 800fe42:	430b      	orrs	r3, r1
 800fe44:	4916      	ldr	r1, [pc, #88]	; (800fea0 <udpServer_init+0x200>)
 800fe46:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800fe4a:	430b      	orrs	r3, r1
 800fe4c:	0e1b      	lsrs	r3, r3, #24
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800fe52:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <udpServer_init+0x1fc>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a12      	ldr	r2, [pc, #72]	; (800fea0 <udpServer_init+0x200>)
 800fe58:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 800fe5c:	4639      	mov	r1, r7
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f012 fc9e 	bl	80227a0 <udp_bind>
 800fe64:	4603      	mov	r3, r0
 800fe66:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800fe68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d107      	bne.n	800fe80 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800fe70:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <udpServer_init+0x1fc>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2200      	movs	r2, #0
 800fe76:	490b      	ldr	r1, [pc, #44]	; (800fea4 <udpServer_init+0x204>)
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f012 fd19 	bl	80228b0 <udp_recv>
		break;
 800fe7e:	e007      	b.n	800fe90 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800fe80:	4809      	ldr	r0, [pc, #36]	; (800fea8 <udpServer_init+0x208>)
 800fe82:	f015 fb09 	bl	8025498 <puts>
			udp_remove(upcb);
 800fe86:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <udpServer_init+0x1fc>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f012 fd30 	bl	80228f0 <udp_remove>
		break;
 800fe90:	bf00      	nop
	}

	udpClient_connect();
 800fe92:	f000 f90d 	bl	80100b0 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	20005724 	.word	0x20005724
 800fea0:	20000304 	.word	0x20000304
 800fea4:	0800fead 	.word	0x0800fead
 800fea8:	08029780 	.word	0x08029780

0800feac <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b086      	sub	sp, #24
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
 800feb8:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800febe:	2300      	movs	r3, #0
 800fec0:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800fec2:	2300      	movs	r3, #0
 800fec4:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800fec6:	4a70      	ldr	r2, [pc, #448]	; (8010088 <UDP_Receive_Callback+0x1dc>)
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	895b      	ldrh	r3, [r3, #10]
 800fed2:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800fed4:	4b6d      	ldr	r3, [pc, #436]	; (801008c <UDP_Receive_Callback+0x1e0>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d02e      	beq.n	800ff3a <UDP_Receive_Callback+0x8e>
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d045      	beq.n	800ff6c <UDP_Receive_Callback+0xc0>
 800fee0:	e069      	b.n	800ffb6 <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800fee2:	4b69      	ldr	r3, [pc, #420]	; (8010088 <UDP_Receive_Callback+0x1dc>)
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	7dfb      	ldrb	r3, [r7, #23]
 800fee8:	4969      	ldr	r1, [pc, #420]	; (8010090 <UDP_Receive_Callback+0x1e4>)
 800feea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d120      	bne.n	800ff34 <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 800fef2:	7dbb      	ldrb	r3, [r7, #22]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d109      	bne.n	800ff0c <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800fef8:	6838      	ldr	r0, [r7, #0]
 800fefa:	f014 f939 	bl	8024170 <ip4addr_ntoa>
 800fefe:	4603      	mov	r3, r0
 800ff00:	4619      	mov	r1, r3
 800ff02:	4864      	ldr	r0, [pc, #400]	; (8010094 <UDP_Receive_Callback+0x1e8>)
 800ff04:	f015 fa2c 	bl	8025360 <iprintf>
					IpMatched = 1;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800ff0c:	7dfb      	ldrb	r3, [r7, #23]
 800ff0e:	085b      	lsrs	r3, r3, #1
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	4619      	mov	r1, r3
 800ff14:	4a60      	ldr	r2, [pc, #384]	; (8010098 <UDP_Receive_Callback+0x1ec>)
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800ff1e:	7dfb      	ldrb	r3, [r7, #23]
 800ff20:	f003 0301 	and.w	r3, r3, #1
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	7dfa      	ldrb	r2, [r7, #23]
 800ff28:	0852      	lsrs	r2, r2, #1
 800ff2a:	b2d2      	uxtb	r2, r2
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	b2d9      	uxtb	r1, r3
 800ff30:	4b5a      	ldr	r3, [pc, #360]	; (801009c <UDP_Receive_Callback+0x1f0>)
 800ff32:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ff34:	7dfb      	ldrb	r3, [r7, #23]
 800ff36:	3301      	adds	r3, #1
 800ff38:	75fb      	strb	r3, [r7, #23]
 800ff3a:	4b54      	ldr	r3, [pc, #336]	; (801008c <UDP_Receive_Callback+0x1e0>)
 800ff3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ff40:	7dfa      	ldrb	r2, [r7, #23]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d3cd      	bcc.n	800fee2 <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800ff46:	4b51      	ldr	r3, [pc, #324]	; (801008c <UDP_Receive_Callback+0x1e0>)
 800ff48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ff4c:	7dfa      	ldrb	r2, [r7, #23]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d935      	bls.n	800ffbe <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f011 fccc 	bl	80218f0 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800ff58:	6838      	ldr	r0, [r7, #0]
 800ff5a:	f014 f909 	bl	8024170 <ip4addr_ntoa>
 800ff5e:	4601      	mov	r1, r0
 800ff60:	7dfb      	ldrb	r3, [r7, #23]
 800ff62:	461a      	mov	r2, r3
 800ff64:	484e      	ldr	r0, [pc, #312]	; (80100a0 <UDP_Receive_Callback+0x1f4>)
 800ff66:	f015 f9fb 	bl	8025360 <iprintf>
			return;
 800ff6a:	e08a      	b.n	8010082 <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	75fb      	strb	r3, [r7, #23]
 800ff70:	e00a      	b.n	800ff88 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800ff72:	4b45      	ldr	r3, [pc, #276]	; (8010088 <UDP_Receive_Callback+0x1dc>)
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	7dfb      	ldrb	r3, [r7, #23]
 800ff78:	4945      	ldr	r1, [pc, #276]	; (8010090 <UDP_Receive_Callback+0x1e4>)
 800ff7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d009      	beq.n	800ff96 <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ff82:	7dfb      	ldrb	r3, [r7, #23]
 800ff84:	3301      	adds	r3, #1
 800ff86:	75fb      	strb	r3, [r7, #23]
 800ff88:	4b40      	ldr	r3, [pc, #256]	; (801008c <UDP_Receive_Callback+0x1e0>)
 800ff8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ff8e:	7dfa      	ldrb	r2, [r7, #23]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d3ee      	bcc.n	800ff72 <UDP_Receive_Callback+0xc6>
 800ff94:	e000      	b.n	800ff98 <UDP_Receive_Callback+0xec>
			{
				break;
 800ff96:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800ff98:	4b3c      	ldr	r3, [pc, #240]	; (801008c <UDP_Receive_Callback+0x1e0>)
 800ff9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ff9e:	7dfa      	ldrb	r2, [r7, #23]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d90e      	bls.n	800ffc2 <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f011 fca3 	bl	80218f0 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800ffaa:	7dfb      	ldrb	r3, [r7, #23]
 800ffac:	4619      	mov	r1, r3
 800ffae:	483d      	ldr	r0, [pc, #244]	; (80100a4 <UDP_Receive_Callback+0x1f8>)
 800ffb0:	f015 f9d6 	bl	8025360 <iprintf>
			return;
 800ffb4:	e065      	b.n	8010082 <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f011 fc9a 	bl	80218f0 <pbuf_free>
		return;
 800ffbc:	e061      	b.n	8010082 <UDP_Receive_Callback+0x1d6>
		break;
 800ffbe:	bf00      	nop
 800ffc0:	e000      	b.n	800ffc4 <UDP_Receive_Callback+0x118>
		break;
 800ffc2:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800ffc4:	4b31      	ldr	r3, [pc, #196]	; (801008c <UDP_Receive_Callback+0x1e0>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d002      	beq.n	800ffd2 <UDP_Receive_Callback+0x126>
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d049      	beq.n	8010064 <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800ffd0:	e054      	b.n	801007c <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 800ffd2:	f008 f9bb 	bl	801834c <HAL_GetTick>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	4a33      	ldr	r2, [pc, #204]	; (80100a8 <UDP_Receive_Callback+0x1fc>)
 800ffda:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800ffdc:	4b33      	ldr	r3, [pc, #204]	; (80100ac <UDP_Receive_Callback+0x200>)
 800ffde:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	8abb      	ldrh	r3, [r7, #20]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ffec:	dd24      	ble.n	8010038 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800ffee:	4b2f      	ldr	r3, [pc, #188]	; (80100ac <UDP_Receive_Callback+0x200>)
 800fff0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800fff4:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800fff8:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800fffa:	4b2c      	ldr	r3, [pc, #176]	; (80100ac <UDP_Receive_Callback+0x200>)
 800fffc:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010000:	461a      	mov	r2, r3
 8010002:	4b2a      	ldr	r3, [pc, #168]	; (80100ac <UDP_Receive_Callback+0x200>)
 8010004:	18d0      	adds	r0, r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	8a7a      	ldrh	r2, [r7, #18]
 801000c:	4619      	mov	r1, r3
 801000e:	f015 f897 	bl	8025140 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	685a      	ldr	r2, [r3, #4]
 8010016:	8a7b      	ldrh	r3, [r7, #18]
 8010018:	18d1      	adds	r1, r2, r3
 801001a:	8aba      	ldrh	r2, [r7, #20]
 801001c:	8a7b      	ldrh	r3, [r7, #18]
 801001e:	1ad3      	subs	r3, r2, r3
 8010020:	461a      	mov	r2, r3
 8010022:	4822      	ldr	r0, [pc, #136]	; (80100ac <UDP_Receive_Callback+0x200>)
 8010024:	f015 f88c 	bl	8025140 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 8010028:	8aba      	ldrh	r2, [r7, #20]
 801002a:	8a7b      	ldrh	r3, [r7, #18]
 801002c:	1ad3      	subs	r3, r2, r3
 801002e:	b29a      	uxth	r2, r3
 8010030:	4b1e      	ldr	r3, [pc, #120]	; (80100ac <UDP_Receive_Callback+0x200>)
 8010032:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 8010036:	e021      	b.n	801007c <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 8010038:	4b1c      	ldr	r3, [pc, #112]	; (80100ac <UDP_Receive_Callback+0x200>)
 801003a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801003e:	461a      	mov	r2, r3
 8010040:	4b1a      	ldr	r3, [pc, #104]	; (80100ac <UDP_Receive_Callback+0x200>)
 8010042:	18d0      	adds	r0, r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	8aba      	ldrh	r2, [r7, #20]
 801004a:	4619      	mov	r1, r3
 801004c:	f015 f878 	bl	8025140 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 8010050:	4b16      	ldr	r3, [pc, #88]	; (80100ac <UDP_Receive_Callback+0x200>)
 8010052:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 8010056:	8abb      	ldrh	r3, [r7, #20]
 8010058:	4413      	add	r3, r2
 801005a:	b29a      	uxth	r2, r3
 801005c:	4b13      	ldr	r3, [pc, #76]	; (80100ac <UDP_Receive_Callback+0x200>)
 801005e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 8010062:	e00b      	b.n	801007c <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	8aba      	ldrh	r2, [r7, #20]
 801006a:	4619      	mov	r1, r3
 801006c:	480f      	ldr	r0, [pc, #60]	; (80100ac <UDP_Receive_Callback+0x200>)
 801006e:	f015 f867 	bl	8025140 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 8010072:	4a0e      	ldr	r2, [pc, #56]	; (80100ac <UDP_Receive_Callback+0x200>)
 8010074:	8abb      	ldrh	r3, [r7, #20]
 8010076:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 801007a:	bf00      	nop
	}


	pbuf_free(p);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f011 fc37 	bl	80218f0 <pbuf_free>
}
 8010082:	3718      	adds	r7, #24
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	200056f8 	.word	0x200056f8
 801008c:	20000304 	.word	0x20000304
 8010090:	200056a8 	.word	0x200056a8
 8010094:	08029788 	.word	0x08029788
 8010098:	200013e0 	.word	0x200013e0
 801009c:	20001408 	.word	0x20001408
 80100a0:	08029794 	.word	0x08029794
 80100a4:	080297c0 	.word	0x080297c0
 80100a8:	200011ac 	.word	0x200011ac
 80100ac:	200050a4 	.word	0x200050a4

080100b0 <udpClient_connect>:
void udpClient_connect(void)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
//	err_t err;
	uint8_t Traverser = 0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 80100ba:	4ba6      	ldr	r3, [pc, #664]	; (8010354 <udpClient_connect+0x2a4>)
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d003      	beq.n	80100ca <udpClient_connect+0x1a>
 80100c2:	2b02      	cmp	r3, #2
 80100c4:	f000 80a1 	beq.w	801020a <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 80100c8:	e13f      	b.n	801034a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80100ca:	2300      	movs	r3, #0
 80100cc:	71fb      	strb	r3, [r7, #7]
 80100ce:	e094      	b.n	80101fa <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 80100d0:	79fb      	ldrb	r3, [r7, #7]
 80100d2:	4aa0      	ldr	r2, [pc, #640]	; (8010354 <udpClient_connect+0x2a4>)
 80100d4:	3312      	adds	r3, #18
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	4413      	add	r3, r2
 80100da:	78db      	ldrb	r3, [r3, #3]
 80100dc:	061a      	lsls	r2, r3, #24
 80100de:	79fb      	ldrb	r3, [r7, #7]
 80100e0:	499c      	ldr	r1, [pc, #624]	; (8010354 <udpClient_connect+0x2a4>)
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	440b      	add	r3, r1
 80100e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80100ea:	041b      	lsls	r3, r3, #16
 80100ec:	431a      	orrs	r2, r3
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	4998      	ldr	r1, [pc, #608]	; (8010354 <udpClient_connect+0x2a4>)
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	440b      	add	r3, r1
 80100f6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80100fa:	021b      	lsls	r3, r3, #8
 80100fc:	431a      	orrs	r2, r3
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	4994      	ldr	r1, [pc, #592]	; (8010354 <udpClient_connect+0x2a4>)
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	440b      	add	r3, r1
 8010106:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801010a:	4313      	orrs	r3, r2
 801010c:	061a      	lsls	r2, r3, #24
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	4990      	ldr	r1, [pc, #576]	; (8010354 <udpClient_connect+0x2a4>)
 8010112:	3312      	adds	r3, #18
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	440b      	add	r3, r1
 8010118:	78db      	ldrb	r3, [r3, #3]
 801011a:	0619      	lsls	r1, r3, #24
 801011c:	79fb      	ldrb	r3, [r7, #7]
 801011e:	488d      	ldr	r0, [pc, #564]	; (8010354 <udpClient_connect+0x2a4>)
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4403      	add	r3, r0
 8010124:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010128:	041b      	lsls	r3, r3, #16
 801012a:	4319      	orrs	r1, r3
 801012c:	79fb      	ldrb	r3, [r7, #7]
 801012e:	4889      	ldr	r0, [pc, #548]	; (8010354 <udpClient_connect+0x2a4>)
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	4403      	add	r3, r0
 8010134:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010138:	021b      	lsls	r3, r3, #8
 801013a:	4319      	orrs	r1, r3
 801013c:	79fb      	ldrb	r3, [r7, #7]
 801013e:	4885      	ldr	r0, [pc, #532]	; (8010354 <udpClient_connect+0x2a4>)
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4403      	add	r3, r0
 8010144:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010148:	430b      	orrs	r3, r1
 801014a:	021b      	lsls	r3, r3, #8
 801014c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010150:	431a      	orrs	r2, r3
 8010152:	79fb      	ldrb	r3, [r7, #7]
 8010154:	497f      	ldr	r1, [pc, #508]	; (8010354 <udpClient_connect+0x2a4>)
 8010156:	3312      	adds	r3, #18
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	440b      	add	r3, r1
 801015c:	78db      	ldrb	r3, [r3, #3]
 801015e:	0619      	lsls	r1, r3, #24
 8010160:	79fb      	ldrb	r3, [r7, #7]
 8010162:	487c      	ldr	r0, [pc, #496]	; (8010354 <udpClient_connect+0x2a4>)
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4403      	add	r3, r0
 8010168:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801016c:	041b      	lsls	r3, r3, #16
 801016e:	4319      	orrs	r1, r3
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	4878      	ldr	r0, [pc, #480]	; (8010354 <udpClient_connect+0x2a4>)
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	4403      	add	r3, r0
 8010178:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801017c:	021b      	lsls	r3, r3, #8
 801017e:	4319      	orrs	r1, r3
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	4874      	ldr	r0, [pc, #464]	; (8010354 <udpClient_connect+0x2a4>)
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4403      	add	r3, r0
 8010188:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801018c:	430b      	orrs	r3, r1
 801018e:	0a1b      	lsrs	r3, r3, #8
 8010190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010194:	ea42 0103 	orr.w	r1, r2, r3
 8010198:	79fb      	ldrb	r3, [r7, #7]
 801019a:	4a6e      	ldr	r2, [pc, #440]	; (8010354 <udpClient_connect+0x2a4>)
 801019c:	3312      	adds	r3, #18
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	78db      	ldrb	r3, [r3, #3]
 80101a4:	061a      	lsls	r2, r3, #24
 80101a6:	79fb      	ldrb	r3, [r7, #7]
 80101a8:	486a      	ldr	r0, [pc, #424]	; (8010354 <udpClient_connect+0x2a4>)
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4403      	add	r3, r0
 80101ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80101b2:	041b      	lsls	r3, r3, #16
 80101b4:	431a      	orrs	r2, r3
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	4866      	ldr	r0, [pc, #408]	; (8010354 <udpClient_connect+0x2a4>)
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	4403      	add	r3, r0
 80101be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	431a      	orrs	r2, r3
 80101c6:	79fb      	ldrb	r3, [r7, #7]
 80101c8:	4862      	ldr	r0, [pc, #392]	; (8010354 <udpClient_connect+0x2a4>)
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	4403      	add	r3, r0
 80101ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80101d2:	4313      	orrs	r3, r2
 80101d4:	0e1a      	lsrs	r2, r3, #24
 80101d6:	79fb      	ldrb	r3, [r7, #7]
 80101d8:	430a      	orrs	r2, r1
 80101da:	495f      	ldr	r1, [pc, #380]	; (8010358 <udpClient_connect+0x2a8>)
 80101dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	79fa      	ldrb	r2, [r7, #7]
 80101e4:	495b      	ldr	r1, [pc, #364]	; (8010354 <udpClient_connect+0x2a4>)
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	440b      	add	r3, r1
 80101ea:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 80101ee:	4b5b      	ldr	r3, [pc, #364]	; (801035c <udpClient_connect+0x2ac>)
 80101f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	3301      	adds	r3, #1
 80101f8:	71fb      	strb	r3, [r7, #7]
 80101fa:	4b56      	ldr	r3, [pc, #344]	; (8010354 <udpClient_connect+0x2a4>)
 80101fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010200:	79fa      	ldrb	r2, [r7, #7]
 8010202:	429a      	cmp	r2, r3
 8010204:	f4ff af64 	bcc.w	80100d0 <udpClient_connect+0x20>
		break;
 8010208:	e09f      	b.n	801034a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 801020a:	2300      	movs	r3, #0
 801020c:	71fb      	strb	r3, [r7, #7]
 801020e:	e094      	b.n	801033a <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010210:	79fb      	ldrb	r3, [r7, #7]
 8010212:	4a50      	ldr	r2, [pc, #320]	; (8010354 <udpClient_connect+0x2a4>)
 8010214:	33ae      	adds	r3, #174	; 0xae
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	4413      	add	r3, r2
 801021a:	785b      	ldrb	r3, [r3, #1]
 801021c:	061a      	lsls	r2, r3, #24
 801021e:	79fb      	ldrb	r3, [r7, #7]
 8010220:	494c      	ldr	r1, [pc, #304]	; (8010354 <udpClient_connect+0x2a4>)
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	440b      	add	r3, r1
 8010226:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 801022a:	041b      	lsls	r3, r3, #16
 801022c:	431a      	orrs	r2, r3
 801022e:	79fb      	ldrb	r3, [r7, #7]
 8010230:	4948      	ldr	r1, [pc, #288]	; (8010354 <udpClient_connect+0x2a4>)
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	440b      	add	r3, r1
 8010236:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 801023a:	021b      	lsls	r3, r3, #8
 801023c:	431a      	orrs	r2, r3
 801023e:	79fb      	ldrb	r3, [r7, #7]
 8010240:	4944      	ldr	r1, [pc, #272]	; (8010354 <udpClient_connect+0x2a4>)
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	440b      	add	r3, r1
 8010246:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 801024a:	4313      	orrs	r3, r2
 801024c:	061a      	lsls	r2, r3, #24
 801024e:	79fb      	ldrb	r3, [r7, #7]
 8010250:	4940      	ldr	r1, [pc, #256]	; (8010354 <udpClient_connect+0x2a4>)
 8010252:	33ae      	adds	r3, #174	; 0xae
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	440b      	add	r3, r1
 8010258:	785b      	ldrb	r3, [r3, #1]
 801025a:	0619      	lsls	r1, r3, #24
 801025c:	79fb      	ldrb	r3, [r7, #7]
 801025e:	483d      	ldr	r0, [pc, #244]	; (8010354 <udpClient_connect+0x2a4>)
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	4403      	add	r3, r0
 8010264:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010268:	041b      	lsls	r3, r3, #16
 801026a:	4319      	orrs	r1, r3
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	4839      	ldr	r0, [pc, #228]	; (8010354 <udpClient_connect+0x2a4>)
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	4403      	add	r3, r0
 8010274:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010278:	021b      	lsls	r3, r3, #8
 801027a:	4319      	orrs	r1, r3
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	4835      	ldr	r0, [pc, #212]	; (8010354 <udpClient_connect+0x2a4>)
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	4403      	add	r3, r0
 8010284:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010288:	430b      	orrs	r3, r1
 801028a:	021b      	lsls	r3, r3, #8
 801028c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010290:	431a      	orrs	r2, r3
 8010292:	79fb      	ldrb	r3, [r7, #7]
 8010294:	492f      	ldr	r1, [pc, #188]	; (8010354 <udpClient_connect+0x2a4>)
 8010296:	33ae      	adds	r3, #174	; 0xae
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	440b      	add	r3, r1
 801029c:	785b      	ldrb	r3, [r3, #1]
 801029e:	0619      	lsls	r1, r3, #24
 80102a0:	79fb      	ldrb	r3, [r7, #7]
 80102a2:	482c      	ldr	r0, [pc, #176]	; (8010354 <udpClient_connect+0x2a4>)
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	4403      	add	r3, r0
 80102a8:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 80102ac:	041b      	lsls	r3, r3, #16
 80102ae:	4319      	orrs	r1, r3
 80102b0:	79fb      	ldrb	r3, [r7, #7]
 80102b2:	4828      	ldr	r0, [pc, #160]	; (8010354 <udpClient_connect+0x2a4>)
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	4403      	add	r3, r0
 80102b8:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 80102bc:	021b      	lsls	r3, r3, #8
 80102be:	4319      	orrs	r1, r3
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	4824      	ldr	r0, [pc, #144]	; (8010354 <udpClient_connect+0x2a4>)
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4403      	add	r3, r0
 80102c8:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 80102cc:	430b      	orrs	r3, r1
 80102ce:	0a1b      	lsrs	r3, r3, #8
 80102d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80102d4:	ea42 0103 	orr.w	r1, r2, r3
 80102d8:	79fb      	ldrb	r3, [r7, #7]
 80102da:	4a1e      	ldr	r2, [pc, #120]	; (8010354 <udpClient_connect+0x2a4>)
 80102dc:	33ae      	adds	r3, #174	; 0xae
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	4413      	add	r3, r2
 80102e2:	785b      	ldrb	r3, [r3, #1]
 80102e4:	061a      	lsls	r2, r3, #24
 80102e6:	79fb      	ldrb	r3, [r7, #7]
 80102e8:	481a      	ldr	r0, [pc, #104]	; (8010354 <udpClient_connect+0x2a4>)
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	4403      	add	r3, r0
 80102ee:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 80102f2:	041b      	lsls	r3, r3, #16
 80102f4:	431a      	orrs	r2, r3
 80102f6:	79fb      	ldrb	r3, [r7, #7]
 80102f8:	4816      	ldr	r0, [pc, #88]	; (8010354 <udpClient_connect+0x2a4>)
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	4403      	add	r3, r0
 80102fe:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010302:	021b      	lsls	r3, r3, #8
 8010304:	431a      	orrs	r2, r3
 8010306:	79fb      	ldrb	r3, [r7, #7]
 8010308:	4812      	ldr	r0, [pc, #72]	; (8010354 <udpClient_connect+0x2a4>)
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	4403      	add	r3, r0
 801030e:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010312:	4313      	orrs	r3, r2
 8010314:	0e1a      	lsrs	r2, r3, #24
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	430a      	orrs	r2, r1
 801031a:	490f      	ldr	r1, [pc, #60]	; (8010358 <udpClient_connect+0x2a8>)
 801031c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010320:	79fb      	ldrb	r3, [r7, #7]
 8010322:	79fa      	ldrb	r2, [r7, #7]
 8010324:	490b      	ldr	r1, [pc, #44]	; (8010354 <udpClient_connect+0x2a4>)
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	440b      	add	r3, r1
 801032a:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 801032e:	4b0b      	ldr	r3, [pc, #44]	; (801035c <udpClient_connect+0x2ac>)
 8010330:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010334:	79fb      	ldrb	r3, [r7, #7]
 8010336:	3301      	adds	r3, #1
 8010338:	71fb      	strb	r3, [r7, #7]
 801033a:	4b06      	ldr	r3, [pc, #24]	; (8010354 <udpClient_connect+0x2a4>)
 801033c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010340:	79fa      	ldrb	r2, [r7, #7]
 8010342:	429a      	cmp	r2, r3
 8010344:	f4ff af64 	bcc.w	8010210 <udpClient_connect+0x160>
		break;
 8010348:	bf00      	nop
	}
}
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	20000304 	.word	0x20000304
 8010358:	200056a8 	.word	0x200056a8
 801035c:	200056fc 	.word	0x200056fc

08010360 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b086      	sub	sp, #24
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	460b      	mov	r3, r1
 801036a:	607a      	str	r2, [r7, #4]
 801036c:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 801036e:	2300      	movs	r3, #0
 8010370:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010372:	7afb      	ldrb	r3, [r7, #11]
 8010374:	b29b      	uxth	r3, r3
 8010376:	f44f 7220 	mov.w	r2, #640	; 0x280
 801037a:	4619      	mov	r1, r3
 801037c:	2036      	movs	r0, #54	; 0x36
 801037e:	f010 ffd5 	bl	802132c <pbuf_alloc>
 8010382:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d01d      	beq.n	80103c6 <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 801038a:	7afb      	ldrb	r3, [r7, #11]
 801038c:	b29b      	uxth	r3, r3
 801038e:	461a      	mov	r2, r3
 8010390:	68f9      	ldr	r1, [r7, #12]
 8010392:	6938      	ldr	r0, [r7, #16]
 8010394:	f011 fca6 	bl	8021ce4 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 8010398:	4b0d      	ldr	r3, [pc, #52]	; (80103d0 <udpClient_send+0x70>)
 801039a:	6818      	ldr	r0, [r3, #0]
 801039c:	4b0d      	ldr	r3, [pc, #52]	; (80103d4 <udpClient_send+0x74>)
 801039e:	881b      	ldrh	r3, [r3, #0]
 80103a0:	1d3a      	adds	r2, r7, #4
 80103a2:	6939      	ldr	r1, [r7, #16]
 80103a4:	f012 f846 	bl	8022434 <udp_sendto>
 80103a8:	4603      	mov	r3, r0
 80103aa:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 80103ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d005      	beq.n	80103c0 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 80103b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103b8:	4619      	mov	r1, r3
 80103ba:	4807      	ldr	r0, [pc, #28]	; (80103d8 <udpClient_send+0x78>)
 80103bc:	f014 ffd0 	bl	8025360 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 80103c0:	6938      	ldr	r0, [r7, #16]
 80103c2:	f011 fa95 	bl	80218f0 <pbuf_free>
	}
}
 80103c6:	bf00      	nop
 80103c8:	3718      	adds	r7, #24
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	20005724 	.word	0x20005724
 80103d4:	200056fc 	.word	0x200056fc
 80103d8:	080297e8 	.word	0x080297e8

080103dc <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 80103e0:	4b07      	ldr	r3, [pc, #28]	; (8010400 <Is_There_EI_Data+0x24>)
 80103e2:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 80103e6:	4b06      	ldr	r3, [pc, #24]	; (8010400 <Is_There_EI_Data+0x24>)
 80103e8:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d001      	beq.n	80103f4 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 80103f0:	2301      	movs	r3, #1
 80103f2:	e000      	b.n	80103f6 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 80103f4:	2300      	movs	r3, #0
	}
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr
 8010400:	200050a4 	.word	0x200050a4

08010404 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 801040a:	4b15      	ldr	r3, [pc, #84]	; (8010460 <Get_Eth_Byte+0x5c>)
 801040c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010410:	1c5a      	adds	r2, r3, #1
 8010412:	b291      	uxth	r1, r2
 8010414:	4a12      	ldr	r2, [pc, #72]	; (8010460 <Get_Eth_Byte+0x5c>)
 8010416:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 801041a:	461a      	mov	r2, r3
 801041c:	4b10      	ldr	r3, [pc, #64]	; (8010460 <Get_Eth_Byte+0x5c>)
 801041e:	5c9b      	ldrb	r3, [r3, r2]
 8010420:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 8010422:	4b0f      	ldr	r3, [pc, #60]	; (8010460 <Get_Eth_Byte+0x5c>)
 8010424:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010428:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801042c:	d313      	bcc.n	8010456 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 801042e:	4b0c      	ldr	r3, [pc, #48]	; (8010460 <Get_Eth_Byte+0x5c>)
 8010430:	2200      	movs	r2, #0
 8010432:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 8010436:	4b0a      	ldr	r3, [pc, #40]	; (8010460 <Get_Eth_Byte+0x5c>)
 8010438:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801043c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010440:	d109      	bne.n	8010456 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 8010442:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010446:	2100      	movs	r1, #0
 8010448:	4805      	ldr	r0, [pc, #20]	; (8010460 <Get_Eth_Byte+0x5c>)
 801044a:	f014 fea1 	bl	8025190 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 801044e:	4b04      	ldr	r3, [pc, #16]	; (8010460 <Get_Eth_Byte+0x5c>)
 8010450:	2200      	movs	r2, #0
 8010452:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 8010456:	79fb      	ldrb	r3, [r7, #7]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	200050a4 	.word	0x200050a4

08010464 <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b086      	sub	sp, #24
 8010468:	af00      	add	r7, sp, #0
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	460b      	mov	r3, r1
 801046e:	607a      	str	r2, [r7, #4]
 8010470:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010472:	2300      	movs	r3, #0
 8010474:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010476:	7afb      	ldrb	r3, [r7, #11]
 8010478:	b29b      	uxth	r3, r3
 801047a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801047e:	4619      	mov	r1, r3
 8010480:	2036      	movs	r0, #54	; 0x36
 8010482:	f010 ff53 	bl	802132c <pbuf_alloc>
 8010486:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d01a      	beq.n	80104c4 <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 801048e:	7afb      	ldrb	r3, [r7, #11]
 8010490:	b29b      	uxth	r3, r3
 8010492:	461a      	mov	r2, r3
 8010494:	68f9      	ldr	r1, [r7, #12]
 8010496:	6938      	ldr	r0, [r7, #16]
 8010498:	f011 fc24 	bl	8021ce4 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 801049c:	4b0b      	ldr	r3, [pc, #44]	; (80104cc <Udp_Send_SigInfo+0x68>)
 801049e:	6818      	ldr	r0, [r3, #0]
 80104a0:	1d3a      	adds	r2, r7, #4
 80104a2:	f243 0339 	movw	r3, #12345	; 0x3039
 80104a6:	6939      	ldr	r1, [r7, #16]
 80104a8:	f011 ffc4 	bl	8022434 <udp_sendto>
 80104ac:	4603      	mov	r3, r0
 80104ae:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 80104b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 80104b8:	4805      	ldr	r0, [pc, #20]	; (80104d0 <Udp_Send_SigInfo+0x6c>)
 80104ba:	f014 ffed 	bl	8025498 <puts>
		}
		pbuf_free(txBuf);
 80104be:	6938      	ldr	r0, [r7, #16]
 80104c0:	f011 fa16 	bl	80218f0 <pbuf_free>
	}
}
 80104c4:	bf00      	nop
 80104c6:	3718      	adds	r7, #24
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	20005724 	.word	0x20005724
 80104d0:	08029810 	.word	0x08029810

080104d4 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b094      	sub	sp, #80	; 0x50
 80104d8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80104da:	4b38      	ldr	r3, [pc, #224]	; (80105bc <MX_CAN2_Init+0xe8>)
 80104dc:	4a38      	ldr	r2, [pc, #224]	; (80105c0 <MX_CAN2_Init+0xec>)
 80104de:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 80104e0:	4b36      	ldr	r3, [pc, #216]	; (80105bc <MX_CAN2_Init+0xe8>)
 80104e2:	2212      	movs	r2, #18
 80104e4:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80104e6:	4b35      	ldr	r3, [pc, #212]	; (80105bc <MX_CAN2_Init+0xe8>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80104ec:	4b33      	ldr	r3, [pc, #204]	; (80105bc <MX_CAN2_Init+0xe8>)
 80104ee:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80104f2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80104f4:	4b31      	ldr	r3, [pc, #196]	; (80105bc <MX_CAN2_Init+0xe8>)
 80104f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80104fa:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80104fc:	4b2f      	ldr	r3, [pc, #188]	; (80105bc <MX_CAN2_Init+0xe8>)
 80104fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010502:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8010504:	4b2d      	ldr	r3, [pc, #180]	; (80105bc <MX_CAN2_Init+0xe8>)
 8010506:	2200      	movs	r2, #0
 8010508:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 801050a:	4b2c      	ldr	r3, [pc, #176]	; (80105bc <MX_CAN2_Init+0xe8>)
 801050c:	2200      	movs	r2, #0
 801050e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8010510:	4b2a      	ldr	r3, [pc, #168]	; (80105bc <MX_CAN2_Init+0xe8>)
 8010512:	2200      	movs	r2, #0
 8010514:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8010516:	4b29      	ldr	r3, [pc, #164]	; (80105bc <MX_CAN2_Init+0xe8>)
 8010518:	2201      	movs	r2, #1
 801051a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 801051c:	4b27      	ldr	r3, [pc, #156]	; (80105bc <MX_CAN2_Init+0xe8>)
 801051e:	2200      	movs	r2, #0
 8010520:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8010522:	4b26      	ldr	r3, [pc, #152]	; (80105bc <MX_CAN2_Init+0xe8>)
 8010524:	2200      	movs	r2, #0
 8010526:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8010528:	4824      	ldr	r0, [pc, #144]	; (80105bc <MX_CAN2_Init+0xe8>)
 801052a:	f007 ff3f 	bl	80183ac <HAL_CAN_Init>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d001      	beq.n	8010538 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8010534:	f006 f94c 	bl	80167d0 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010538:	2301      	movs	r3, #1
 801053a:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 801053c:	2304      	movs	r3, #4
 801053e:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010540:	2301      	movs	r3, #1
 8010542:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010544:	f242 0360 	movw	r3, #8288	; 0x2060
 8010548:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 801054a:	2300      	movs	r3, #0
 801054c:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 801054e:	f242 0360 	movw	r3, #8288	; 0x2060
 8010552:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010554:	2300      	movs	r3, #0
 8010556:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 8010558:	2301      	movs	r3, #1
 801055a:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 801055c:	2301      	movs	r3, #1
 801055e:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 8010560:	2302      	movs	r3, #2
 8010562:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 8010564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010568:	4619      	mov	r1, r3
 801056a:	4814      	ldr	r0, [pc, #80]	; (80105bc <MX_CAN2_Init+0xe8>)
 801056c:	f008 f864 	bl	8018638 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 8010570:	2301      	movs	r3, #1
 8010572:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 8010574:	2305      	movs	r3, #5
 8010576:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010578:	2301      	movs	r3, #1
 801057a:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 801057c:	f242 1320 	movw	r3, #8480	; 0x2120
 8010580:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 8010582:	2300      	movs	r3, #0
 8010584:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 8010586:	f242 1320 	movw	r3, #8480	; 0x2120
 801058a:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 801058c:	2300      	movs	r3, #0
 801058e:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 8010590:	2301      	movs	r3, #1
 8010592:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 8010594:	2301      	movs	r3, #1
 8010596:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 8010598:	2302      	movs	r3, #2
 801059a:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 801059c:	463b      	mov	r3, r7
 801059e:	4619      	mov	r1, r3
 80105a0:	4806      	ldr	r0, [pc, #24]	; (80105bc <MX_CAN2_Init+0xe8>)
 80105a2:	f008 f849 	bl	8018638 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 80105a6:	4805      	ldr	r0, [pc, #20]	; (80105bc <MX_CAN2_Init+0xe8>)
 80105a8:	f008 f932 	bl	8018810 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 80105ac:	2110      	movs	r1, #16
 80105ae:	4803      	ldr	r0, [pc, #12]	; (80105bc <MX_CAN2_Init+0xe8>)
 80105b0:	f008 fb78 	bl	8018ca4 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 80105b4:	bf00      	nop
 80105b6:	3750      	adds	r7, #80	; 0x50
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	20009fdc 	.word	0x20009fdc
 80105c0:	40006800 	.word	0x40006800

080105c4 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08a      	sub	sp, #40	; 0x28
 80105c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 80105ca:	4b34      	ldr	r3, [pc, #208]	; (801069c <MX_CAN3_Init+0xd8>)
 80105cc:	4a34      	ldr	r2, [pc, #208]	; (80106a0 <MX_CAN3_Init+0xdc>)
 80105ce:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 80105d0:	4b32      	ldr	r3, [pc, #200]	; (801069c <MX_CAN3_Init+0xd8>)
 80105d2:	2205      	movs	r2, #5
 80105d4:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 80105d6:	4b31      	ldr	r3, [pc, #196]	; (801069c <MX_CAN3_Init+0xd8>)
 80105d8:	2200      	movs	r2, #0
 80105da:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80105dc:	4b2f      	ldr	r3, [pc, #188]	; (801069c <MX_CAN3_Init+0xd8>)
 80105de:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80105e2:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 80105e4:	4b2d      	ldr	r3, [pc, #180]	; (801069c <MX_CAN3_Init+0xd8>)
 80105e6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80105ea:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 80105ec:	4b2b      	ldr	r3, [pc, #172]	; (801069c <MX_CAN3_Init+0xd8>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 80105f2:	4b2a      	ldr	r3, [pc, #168]	; (801069c <MX_CAN3_Init+0xd8>)
 80105f4:	4a2a      	ldr	r2, [pc, #168]	; (80106a0 <MX_CAN3_Init+0xdc>)
 80105f6:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 80105f8:	4b28      	ldr	r3, [pc, #160]	; (801069c <MX_CAN3_Init+0xd8>)
 80105fa:	2212      	movs	r2, #18
 80105fc:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 80105fe:	4b27      	ldr	r3, [pc, #156]	; (801069c <MX_CAN3_Init+0xd8>)
 8010600:	2200      	movs	r2, #0
 8010602:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8010604:	4b25      	ldr	r3, [pc, #148]	; (801069c <MX_CAN3_Init+0xd8>)
 8010606:	2200      	movs	r2, #0
 8010608:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 801060a:	4b24      	ldr	r3, [pc, #144]	; (801069c <MX_CAN3_Init+0xd8>)
 801060c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010610:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010612:	4b22      	ldr	r3, [pc, #136]	; (801069c <MX_CAN3_Init+0xd8>)
 8010614:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010618:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 801061a:	4b20      	ldr	r3, [pc, #128]	; (801069c <MX_CAN3_Init+0xd8>)
 801061c:	2200      	movs	r2, #0
 801061e:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 8010620:	4b1e      	ldr	r3, [pc, #120]	; (801069c <MX_CAN3_Init+0xd8>)
 8010622:	2200      	movs	r2, #0
 8010624:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 8010626:	4b1d      	ldr	r3, [pc, #116]	; (801069c <MX_CAN3_Init+0xd8>)
 8010628:	2200      	movs	r2, #0
 801062a:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 801062c:	4b1b      	ldr	r3, [pc, #108]	; (801069c <MX_CAN3_Init+0xd8>)
 801062e:	2201      	movs	r2, #1
 8010630:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 8010632:	4b1a      	ldr	r3, [pc, #104]	; (801069c <MX_CAN3_Init+0xd8>)
 8010634:	2200      	movs	r2, #0
 8010636:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 8010638:	4b18      	ldr	r3, [pc, #96]	; (801069c <MX_CAN3_Init+0xd8>)
 801063a:	2200      	movs	r2, #0
 801063c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 801063e:	4817      	ldr	r0, [pc, #92]	; (801069c <MX_CAN3_Init+0xd8>)
 8010640:	f007 feb4 	bl	80183ac <HAL_CAN_Init>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 801064a:	f006 f8c1 	bl	80167d0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 801064e:	2301      	movs	r3, #1
 8010650:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 8010652:	2301      	movs	r3, #1
 8010654:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8010656:	2300      	movs	r3, #0
 8010658:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 801065a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801065e:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010660:	2300      	movs	r3, #0
 8010662:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 8010664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010668:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 801066a:	2300      	movs	r3, #0
 801066c:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 801066e:	2300      	movs	r3, #0
 8010670:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010672:	2301      	movs	r3, #1
 8010674:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 8010676:	2306      	movs	r3, #6
 8010678:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 801067a:	463b      	mov	r3, r7
 801067c:	4619      	mov	r1, r3
 801067e:	4807      	ldr	r0, [pc, #28]	; (801069c <MX_CAN3_Init+0xd8>)
 8010680:	f007 ffda 	bl	8018638 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 8010684:	4805      	ldr	r0, [pc, #20]	; (801069c <MX_CAN3_Init+0xd8>)
 8010686:	f008 f8c3 	bl	8018810 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 801068a:	2102      	movs	r1, #2
 801068c:	4803      	ldr	r0, [pc, #12]	; (801069c <MX_CAN3_Init+0xd8>)
 801068e:	f008 fb09 	bl	8018ca4 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 8010692:	bf00      	nop
 8010694:	3728      	adds	r7, #40	; 0x28
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	2000a040 	.word	0x2000a040
 80106a0:	40003400 	.word	0x40003400

080106a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b08c      	sub	sp, #48	; 0x30
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106ac:	f107 031c 	add.w	r3, r7, #28
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	605a      	str	r2, [r3, #4]
 80106b6:	609a      	str	r2, [r3, #8]
 80106b8:	60da      	str	r2, [r3, #12]
 80106ba:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a44      	ldr	r2, [pc, #272]	; (80107d4 <HAL_CAN_MspInit+0x130>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d144      	bne.n	8010750 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 80106c6:	4b44      	ldr	r3, [pc, #272]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ca:	4a43      	ldr	r2, [pc, #268]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80106d0:	6413      	str	r3, [r2, #64]	; 0x40
 80106d2:	4b41      	ldr	r3, [pc, #260]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80106da:	61bb      	str	r3, [r7, #24]
 80106dc:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 80106de:	4b3e      	ldr	r3, [pc, #248]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e2:	4a3d      	ldr	r2, [pc, #244]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106e8:	6413      	str	r3, [r2, #64]	; 0x40
 80106ea:	4b3b      	ldr	r3, [pc, #236]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106f2:	617b      	str	r3, [r7, #20]
 80106f4:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80106f6:	4b38      	ldr	r3, [pc, #224]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106fa:	4a37      	ldr	r2, [pc, #220]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 80106fc:	f043 0302 	orr.w	r3, r3, #2
 8010700:	6313      	str	r3, [r2, #48]	; 0x30
 8010702:	4b35      	ldr	r3, [pc, #212]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 8010704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010706:	f003 0302 	and.w	r3, r3, #2
 801070a:	613b      	str	r3, [r7, #16]
 801070c:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 801070e:	2360      	movs	r3, #96	; 0x60
 8010710:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010712:	2302      	movs	r3, #2
 8010714:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010716:	2300      	movs	r3, #0
 8010718:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801071a:	2303      	movs	r3, #3
 801071c:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 801071e:	2309      	movs	r3, #9
 8010720:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010722:	f107 031c 	add.w	r3, r7, #28
 8010726:	4619      	mov	r1, r3
 8010728:	482c      	ldr	r0, [pc, #176]	; (80107dc <HAL_CAN_MspInit+0x138>)
 801072a:	f00a f91b 	bl	801a964 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 801072e:	2200      	movs	r2, #0
 8010730:	2104      	movs	r1, #4
 8010732:	2040      	movs	r0, #64	; 0x40
 8010734:	f008 fdeb 	bl	801930e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8010738:	2040      	movs	r0, #64	; 0x40
 801073a:	f008 fe04 	bl	8019346 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 801073e:	2201      	movs	r2, #1
 8010740:	2104      	movs	r1, #4
 8010742:	2041      	movs	r0, #65	; 0x41
 8010744:	f008 fde3 	bl	801930e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8010748:	2041      	movs	r0, #65	; 0x41
 801074a:	f008 fdfc 	bl	8019346 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 801074e:	e03d      	b.n	80107cc <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a22      	ldr	r2, [pc, #136]	; (80107e0 <HAL_CAN_MspInit+0x13c>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d138      	bne.n	80107cc <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 801075a:	4b1f      	ldr	r3, [pc, #124]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 801075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801075e:	4a1e      	ldr	r2, [pc, #120]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 8010760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010764:	6413      	str	r3, [r2, #64]	; 0x40
 8010766:	4b1c      	ldr	r3, [pc, #112]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 8010768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801076a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801076e:	60fb      	str	r3, [r7, #12]
 8010770:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8010772:	4b19      	ldr	r3, [pc, #100]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 8010774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010776:	4a18      	ldr	r2, [pc, #96]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 8010778:	f043 0301 	orr.w	r3, r3, #1
 801077c:	6313      	str	r3, [r2, #48]	; 0x30
 801077e:	4b16      	ldr	r3, [pc, #88]	; (80107d8 <HAL_CAN_MspInit+0x134>)
 8010780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010782:	f003 0301 	and.w	r3, r3, #1
 8010786:	60bb      	str	r3, [r7, #8]
 8010788:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 801078a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 801078e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010790:	2302      	movs	r3, #2
 8010792:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010794:	2300      	movs	r3, #0
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010798:	2303      	movs	r3, #3
 801079a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 801079c:	230b      	movs	r3, #11
 801079e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107a0:	f107 031c 	add.w	r3, r7, #28
 80107a4:	4619      	mov	r1, r3
 80107a6:	480f      	ldr	r0, [pc, #60]	; (80107e4 <HAL_CAN_MspInit+0x140>)
 80107a8:	f00a f8dc 	bl	801a964 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80107ac:	2200      	movs	r2, #0
 80107ae:	2100      	movs	r1, #0
 80107b0:	2069      	movs	r0, #105	; 0x69
 80107b2:	f008 fdac 	bl	801930e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80107b6:	2069      	movs	r0, #105	; 0x69
 80107b8:	f008 fdc5 	bl	8019346 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 80107bc:	2200      	movs	r2, #0
 80107be:	2100      	movs	r1, #0
 80107c0:	206a      	movs	r0, #106	; 0x6a
 80107c2:	f008 fda4 	bl	801930e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 80107c6:	206a      	movs	r0, #106	; 0x6a
 80107c8:	f008 fdbd 	bl	8019346 <HAL_NVIC_EnableIRQ>
}
 80107cc:	bf00      	nop
 80107ce:	3730      	adds	r7, #48	; 0x30
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	40006800 	.word	0x40006800
 80107d8:	40023800 	.word	0x40023800
 80107dc:	40020400 	.word	0x40020400
 80107e0:	40003400 	.word	0x40003400
 80107e4:	40020000 	.word	0x40020000

080107e8 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 80107e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	4603      	mov	r3, r0
 80107f0:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 80107f2:	2300      	movs	r3, #0
 80107f4:	823b      	strh	r3, [r7, #16]
	uint16_t uc_size = 0;
 80107f6:	2300      	movs	r3, #0
 80107f8:	82fb      	strh	r3, [r7, #22]



	switch(EI_data.ProtocolType)
 80107fa:	4ba2      	ldr	r3, [pc, #648]	; (8010a84 <TransmitCanPkt+0x29c>)
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	3b01      	subs	r3, #1
 8010800:	2b03      	cmp	r3, #3
 8010802:	f200 82b0 	bhi.w	8010d66 <TransmitCanPkt+0x57e>
 8010806:	a201      	add	r2, pc, #4	; (adr r2, 801080c <TransmitCanPkt+0x24>)
 8010808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080c:	0801081d 	.word	0x0801081d
 8010810:	080109cf 	.word	0x080109cf
 8010814:	08010b2d 	.word	0x08010b2d
 8010818:	08010c6d 	.word	0x08010c6d
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 801081c:	4b9a      	ldr	r3, [pc, #616]	; (8010a88 <TransmitCanPkt+0x2a0>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	0a1b      	lsrs	r3, r3, #8
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	2b00      	cmp	r3, #0
 8010828:	d003      	beq.n	8010832 <TransmitCanPkt+0x4a>
		{
			printf("Stopping CAN Transmission\n");
 801082a:	4898      	ldr	r0, [pc, #608]	; (8010a8c <TransmitCanPkt+0x2a4>)
 801082c:	f014 fe34 	bl	8025498 <puts>
			return;
 8010830:	e299      	b.n	8010d66 <TransmitCanPkt+0x57e>
		}

		switch((int)Ken_idetifier)
 8010832:	88fb      	ldrh	r3, [r7, #6]
 8010834:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010838:	f300 80c3 	bgt.w	80109c2 <TransmitCanPkt+0x1da>
 801083c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010840:	dc0d      	bgt.n	801085e <TransmitCanPkt+0x76>
 8010842:	f240 1219 	movw	r2, #281	; 0x119
 8010846:	4293      	cmp	r3, r2
 8010848:	d022      	beq.n	8010890 <TransmitCanPkt+0xa8>
 801084a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801084e:	f340 80b8 	ble.w	80109c2 <TransmitCanPkt+0x1da>
 8010852:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8010856:	2b01      	cmp	r3, #1
 8010858:	f200 80b3 	bhi.w	80109c2 <TransmitCanPkt+0x1da>
 801085c:	e054      	b.n	8010908 <TransmitCanPkt+0x120>
 801085e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010862:	2b07      	cmp	r3, #7
 8010864:	f200 80ad 	bhi.w	80109c2 <TransmitCanPkt+0x1da>
 8010868:	a201      	add	r2, pc, #4	; (adr r2, 8010870 <TransmitCanPkt+0x88>)
 801086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086e:	bf00      	nop
 8010870:	0801092d 	.word	0x0801092d
 8010874:	0801092d 	.word	0x0801092d
 8010878:	08010957 	.word	0x08010957
 801087c:	08010957 	.word	0x08010957
 8010880:	0801097b 	.word	0x0801097b
 8010884:	080109c3 	.word	0x080109c3
 8010888:	0801099f 	.word	0x0801099f
 801088c:	0801099f 	.word	0x0801099f
		{
		case EI_PROCESS_DATA:
			if(ReorderFlag == RESET)
 8010890:	4b7f      	ldr	r3, [pc, #508]	; (8010a90 <TransmitCanPkt+0x2a8>)
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d11b      	bne.n	80108d0 <TransmitCanPkt+0xe8>
			{
				vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 8010898:	4b7a      	ldr	r3, [pc, #488]	; (8010a84 <TransmitCanPkt+0x29c>)
 801089a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801089e:	b29b      	uxth	r3, r3
 80108a0:	011b      	lsls	r3, r3, #4
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	4b7b      	ldr	r3, [pc, #492]	; (8010a94 <TransmitCanPkt+0x2ac>)
 80108a6:	801a      	strh	r2, [r3, #0]
				pp_ptr = &vEI_Transver_EI_To_MIE;
 80108a8:	4b7a      	ldr	r3, [pc, #488]	; (8010a94 <TransmitCanPkt+0x2ac>)
 80108aa:	60fb      	str	r3, [r7, #12]
				uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 80108ac:	4b79      	ldr	r3, [pc, #484]	; (8010a94 <TransmitCanPkt+0x2ac>)
 80108ae:	881b      	ldrh	r3, [r3, #0]
 80108b0:	3302      	adds	r3, #2
 80108b2:	82fb      	strh	r3, [r7, #22]
				//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80108b4:	8afb      	ldrh	r3, [r7, #22]
 80108b6:	88fa      	ldrh	r2, [r7, #6]
 80108b8:	4619      	mov	r1, r3
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f000 fa82 	bl	8010dc4 <sendCanPkts>
				if(Debug_flag == 1)
 80108c0:	4b75      	ldr	r3, [pc, #468]	; (8010a98 <TransmitCanPkt+0x2b0>)
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d17e      	bne.n	80109c6 <TransmitCanPkt+0x1de>
				{
					printf("SENT SIGNAL DATA TO MIE\n");
 80108c8:	4874      	ldr	r0, [pc, #464]	; (8010a9c <TransmitCanPkt+0x2b4>)
 80108ca:	f014 fde5 	bl	8025498 <puts>
				if(Debug_flag == 1)
				{
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
				}
			}
			break;
 80108ce:	e07a      	b.n	80109c6 <TransmitCanPkt+0x1de>
				HitachiEI_DataReArranged_st.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 80108d0:	4b6c      	ldr	r3, [pc, #432]	; (8010a84 <TransmitCanPkt+0x29c>)
 80108d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	011b      	lsls	r3, r3, #4
 80108da:	b29a      	uxth	r2, r3
 80108dc:	4b70      	ldr	r3, [pc, #448]	; (8010aa0 <TransmitCanPkt+0x2b8>)
 80108de:	801a      	strh	r2, [r3, #0]
				pp_ptr = &HitachiEI_DataReArranged_st;
 80108e0:	4b6f      	ldr	r3, [pc, #444]	; (8010aa0 <TransmitCanPkt+0x2b8>)
 80108e2:	60fb      	str	r3, [r7, #12]
				uc_size =(HitachiEI_DataReArranged_st.ActualDataBytes + sizeof(HitachiEI_DataReArranged_st.ActualDataBytes)); /* +2 is by Considering */
 80108e4:	4b6e      	ldr	r3, [pc, #440]	; (8010aa0 <TransmitCanPkt+0x2b8>)
 80108e6:	881b      	ldrh	r3, [r3, #0]
 80108e8:	3302      	adds	r3, #2
 80108ea:	82fb      	strh	r3, [r7, #22]
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80108ec:	8afb      	ldrh	r3, [r7, #22]
 80108ee:	88fa      	ldrh	r2, [r7, #6]
 80108f0:	4619      	mov	r1, r3
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	f000 fa66 	bl	8010dc4 <sendCanPkts>
				if(Debug_flag == 1)
 80108f8:	4b67      	ldr	r3, [pc, #412]	; (8010a98 <TransmitCanPkt+0x2b0>)
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d162      	bne.n	80109c6 <TransmitCanPkt+0x1de>
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
 8010900:	4868      	ldr	r0, [pc, #416]	; (8010aa4 <TransmitCanPkt+0x2bc>)
 8010902:	f014 fdc9 	bl	8025498 <puts>
			break;
 8010906:	e05e      	b.n	80109c6 <TransmitCanPkt+0x1de>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 8010908:	4b67      	ldr	r3, [pc, #412]	; (8010aa8 <TransmitCanPkt+0x2c0>)
 801090a:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 801090c:	2316      	movs	r3, #22
 801090e:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010910:	4b61      	ldr	r3, [pc, #388]	; (8010a98 <TransmitCanPkt+0x2b0>)
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	2b01      	cmp	r3, #1
 8010916:	d102      	bne.n	801091e <TransmitCanPkt+0x136>
			{
				printf("\nHealth 2 MIE\n");
 8010918:	4864      	ldr	r0, [pc, #400]	; (8010aac <TransmitCanPkt+0x2c4>)
 801091a:	f014 fdbd 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 801091e:	8afb      	ldrh	r3, [r7, #22]
 8010920:	88fa      	ldrh	r2, [r7, #6]
 8010922:	4619      	mov	r1, r3
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f000 fa4d 	bl	8010dc4 <sendCanPkts>
			break;
 801092a:	e04f      	b.n	80109cc <TransmitCanPkt+0x1e4>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 801092c:	4b60      	ldr	r3, [pc, #384]	; (8010ab0 <TransmitCanPkt+0x2c8>)
 801092e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(EI_SELF_SHARING_t);
 8010930:	2318      	movs	r3, #24
 8010932:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010934:	8afb      	ldrh	r3, [r7, #22]
 8010936:	88fa      	ldrh	r2, [r7, #6]
 8010938:	4619      	mov	r1, r3
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f000 fa42 	bl	8010dc4 <sendCanPkts>
			if(Debug_flag == 1)
 8010940:	4b55      	ldr	r3, [pc, #340]	; (8010a98 <TransmitCanPkt+0x2b0>)
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	2b01      	cmp	r3, #1
 8010946:	d140      	bne.n	80109ca <TransmitCanPkt+0x1e2>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 8010948:	4b59      	ldr	r3, [pc, #356]	; (8010ab0 <TransmitCanPkt+0x2c8>)
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	4619      	mov	r1, r3
 801094e:	4859      	ldr	r0, [pc, #356]	; (8010ab4 <TransmitCanPkt+0x2cc>)
 8010950:	f014 fd06 	bl	8025360 <iprintf>
			}
			break;
 8010954:	e039      	b.n	80109ca <TransmitCanPkt+0x1e2>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 8010956:	4b58      	ldr	r3, [pc, #352]	; (8010ab8 <TransmitCanPkt+0x2d0>)
 8010958:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 801095a:	2346      	movs	r3, #70	; 0x46
 801095c:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 801095e:	4b4e      	ldr	r3, [pc, #312]	; (8010a98 <TransmitCanPkt+0x2b0>)
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d102      	bne.n	801096c <TransmitCanPkt+0x184>
			{
				printf("\nSending V-Message 2-O\n");
 8010966:	4855      	ldr	r0, [pc, #340]	; (8010abc <TransmitCanPkt+0x2d4>)
 8010968:	f014 fd96 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 801096c:	8afb      	ldrh	r3, [r7, #22]
 801096e:	88fa      	ldrh	r2, [r7, #6]
 8010970:	4619      	mov	r1, r3
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f000 fa26 	bl	8010dc4 <sendCanPkts>
			break;
 8010978:	e028      	b.n	80109cc <TransmitCanPkt+0x1e4>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 801097a:	4b43      	ldr	r3, [pc, #268]	; (8010a88 <TransmitCanPkt+0x2a0>)
 801097c:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 801097e:	2308      	movs	r3, #8
 8010980:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010982:	4b45      	ldr	r3, [pc, #276]	; (8010a98 <TransmitCanPkt+0x2b0>)
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	2b01      	cmp	r3, #1
 8010988:	d102      	bne.n	8010990 <TransmitCanPkt+0x1a8>
			{
				printf("\nSending Fault Injection data 2-O\n");
 801098a:	484d      	ldr	r0, [pc, #308]	; (8010ac0 <TransmitCanPkt+0x2d8>)
 801098c:	f014 fd84 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010990:	8afb      	ldrh	r3, [r7, #22]
 8010992:	88fa      	ldrh	r2, [r7, #6]
 8010994:	4619      	mov	r1, r3
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f000 fa14 	bl	8010dc4 <sendCanPkts>
			break;
 801099c:	e016      	b.n	80109cc <TransmitCanPkt+0x1e4>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 801099e:	4b49      	ldr	r3, [pc, #292]	; (8010ac4 <TransmitCanPkt+0x2dc>)
 80109a0:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(RELAYS_t);
 80109a2:	2314      	movs	r3, #20
 80109a4:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80109a6:	4b3c      	ldr	r3, [pc, #240]	; (8010a98 <TransmitCanPkt+0x2b0>)
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d102      	bne.n	80109b4 <TransmitCanPkt+0x1cc>
			{
				printf("Sending Relays-O\n");
 80109ae:	4846      	ldr	r0, [pc, #280]	; (8010ac8 <TransmitCanPkt+0x2e0>)
 80109b0:	f014 fd72 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80109b4:	8afb      	ldrh	r3, [r7, #22]
 80109b6:	88fa      	ldrh	r2, [r7, #6]
 80109b8:	4619      	mov	r1, r3
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f000 fa02 	bl	8010dc4 <sendCanPkts>
			break;
 80109c0:	e004      	b.n	80109cc <TransmitCanPkt+0x1e4>
		default:
			break;
 80109c2:	bf00      	nop
 80109c4:	e1cf      	b.n	8010d66 <TransmitCanPkt+0x57e>
			break;
 80109c6:	bf00      	nop
 80109c8:	e1cd      	b.n	8010d66 <TransmitCanPkt+0x57e>
			break;
 80109ca:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 80109cc:	e1cb      	b.n	8010d66 <TransmitCanPkt+0x57e>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 80109ce:	88fb      	ldrh	r3, [r7, #6]
 80109d0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80109d4:	f300 81c2 	bgt.w	8010d5c <TransmitCanPkt+0x574>
 80109d8:	f240 2207 	movw	r2, #519	; 0x207
 80109dc:	4293      	cmp	r3, r2
 80109de:	da3d      	bge.n	8010a5c <TransmitCanPkt+0x274>
 80109e0:	f240 2205 	movw	r2, #517	; 0x205
 80109e4:	4293      	cmp	r3, r2
 80109e6:	f000 8092 	beq.w	8010b0e <TransmitCanPkt+0x326>
 80109ea:	f240 2205 	movw	r2, #517	; 0x205
 80109ee:	4293      	cmp	r3, r2
 80109f0:	f300 81b4 	bgt.w	8010d5c <TransmitCanPkt+0x574>
 80109f4:	f240 1219 	movw	r2, #281	; 0x119
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d009      	beq.n	8010a10 <TransmitCanPkt+0x228>
 80109fc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8010a00:	f340 81ac 	ble.w	8010d5c <TransmitCanPkt+0x574>
 8010a04:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	f200 81a7 	bhi.w	8010d5c <TransmitCanPkt+0x574>
 8010a0e:	e013      	b.n	8010a38 <TransmitCanPkt+0x250>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 8010a10:	4b2e      	ldr	r3, [pc, #184]	; (8010acc <TransmitCanPkt+0x2e4>)
 8010a12:	60fb      	str	r3, [r7, #12]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 8010a14:	4b2d      	ldr	r3, [pc, #180]	; (8010acc <TransmitCanPkt+0x2e4>)
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	3302      	adds	r3, #2
 8010a1a:	82fb      	strh	r3, [r7, #22]

			if(Debug_flag == 1)
 8010a1c:	4b1e      	ldr	r3, [pc, #120]	; (8010a98 <TransmitCanPkt+0x2b0>)
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d102      	bne.n	8010a2a <TransmitCanPkt+0x242>
			{
				printf("Sending Signals 2 MIE\n");
 8010a24:	482a      	ldr	r0, [pc, #168]	; (8010ad0 <TransmitCanPkt+0x2e8>)
 8010a26:	f014 fd37 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010a2a:	8afb      	ldrh	r3, [r7, #22]
 8010a2c:	88fa      	ldrh	r2, [r7, #6]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	68f8      	ldr	r0, [r7, #12]
 8010a32:	f000 f9c7 	bl	8010dc4 <sendCanPkts>
			break;
 8010a36:	e078      	b.n	8010b2a <TransmitCanPkt+0x342>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 8010a38:	4b26      	ldr	r3, [pc, #152]	; (8010ad4 <TransmitCanPkt+0x2ec>)
 8010a3a:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 8010a3c:	2304      	movs	r3, #4
 8010a3e:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010a40:	4b15      	ldr	r3, [pc, #84]	; (8010a98 <TransmitCanPkt+0x2b0>)
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d102      	bne.n	8010a4e <TransmitCanPkt+0x266>
			{
				printf("Sending Signals 2 MIE\n");
 8010a48:	4821      	ldr	r0, [pc, #132]	; (8010ad0 <TransmitCanPkt+0x2e8>)
 8010a4a:	f014 fd25 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010a4e:	8afb      	ldrh	r3, [r7, #22]
 8010a50:	88fa      	ldrh	r2, [r7, #6]
 8010a52:	4619      	mov	r1, r3
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f000 f9b5 	bl	8010dc4 <sendCanPkts>
			break;
 8010a5a:	e066      	b.n	8010b2a <TransmitCanPkt+0x342>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 8010a5c:	4b1e      	ldr	r3, [pc, #120]	; (8010ad8 <TransmitCanPkt+0x2f0>)
 8010a5e:	60fb      	str	r3, [r7, #12]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 8010a60:	4b08      	ldr	r3, [pc, #32]	; (8010a84 <TransmitCanPkt+0x29c>)
 8010a62:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8010a66:	f003 0307 	and.w	r3, r3, #7
 8010a6a:	82fb      	strh	r3, [r7, #22]
			if (uc_size != 0)
 8010a6c:	8afb      	ldrh	r3, [r7, #22]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d034      	beq.n	8010adc <TransmitCanPkt+0x2f4>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 8010a72:	4b04      	ldr	r3, [pc, #16]	; (8010a84 <TransmitCanPkt+0x29c>)
 8010a74:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8010a78:	08db      	lsrs	r3, r3, #3
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	82fb      	strh	r3, [r7, #22]
 8010a80:	e031      	b.n	8010ae6 <TransmitCanPkt+0x2fe>
 8010a82:	bf00      	nop
 8010a84:	20000304 	.word	0x20000304
 8010a88:	20001d88 	.word	0x20001d88
 8010a8c:	08029824 	.word	0x08029824
 8010a90:	2000124a 	.word	0x2000124a
 8010a94:	2000146c 	.word	0x2000146c
 8010a98:	200009b5 	.word	0x200009b5
 8010a9c:	08029840 	.word	0x08029840
 8010aa0:	20001510 	.word	0x20001510
 8010aa4:	08029858 	.word	0x08029858
 8010aa8:	20001d90 	.word	0x20001d90
 8010aac:	0802987c 	.word	0x0802987c
 8010ab0:	20001c80 	.word	0x20001c80
 8010ab4:	0802988c 	.word	0x0802988c
 8010ab8:	20001cb0 	.word	0x20001cb0
 8010abc:	08029898 	.word	0x08029898
 8010ac0:	080298b0 	.word	0x080298b0
 8010ac4:	2000243c 	.word	0x2000243c
 8010ac8:	080298d4 	.word	0x080298d4
 8010acc:	20003998 	.word	0x20003998
 8010ad0:	080298e8 	.word	0x080298e8
 8010ad4:	20003970 	.word	0x20003970
 8010ad8:	20003b9c 	.word	0x20003b9c
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 8010adc:	4ba3      	ldr	r3, [pc, #652]	; (8010d6c <TransmitCanPkt+0x584>)
 8010ade:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8010ae2:	08db      	lsrs	r3, r3, #3
 8010ae4:	82fb      	strh	r3, [r7, #22]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 8010ae6:	4aa2      	ldr	r2, [pc, #648]	; (8010d70 <TransmitCanPkt+0x588>)
 8010ae8:	8afb      	ldrh	r3, [r7, #22]
 8010aea:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 8010aec:	8afb      	ldrh	r3, [r7, #22]
 8010aee:	3304      	adds	r3, #4
 8010af0:	82fb      	strh	r3, [r7, #22]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 8010af2:	4ba0      	ldr	r3, [pc, #640]	; (8010d74 <TransmitCanPkt+0x58c>)
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d102      	bne.n	8010b00 <TransmitCanPkt+0x318>
			{
				printf("Sending Relays 2 Other\n");
 8010afa:	489f      	ldr	r0, [pc, #636]	; (8010d78 <TransmitCanPkt+0x590>)
 8010afc:	f014 fccc 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010b00:	8afb      	ldrh	r3, [r7, #22]
 8010b02:	88fa      	ldrh	r2, [r7, #6]
 8010b04:	4619      	mov	r1, r3
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f000 f95c 	bl	8010dc4 <sendCanPkts>
			break;
 8010b0c:	e00d      	b.n	8010b2a <TransmitCanPkt+0x342>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 8010b0e:	4b9b      	ldr	r3, [pc, #620]	; (8010d7c <TransmitCanPkt+0x594>)
 8010b10:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 8010b12:	2308      	movs	r3, #8
 8010b14:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 8010b16:	489a      	ldr	r0, [pc, #616]	; (8010d80 <TransmitCanPkt+0x598>)
 8010b18:	f014 fcbe 	bl	8025498 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010b1c:	8afb      	ldrh	r3, [r7, #22]
 8010b1e:	88fa      	ldrh	r2, [r7, #6]
 8010b20:	4619      	mov	r1, r3
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f000 f94e 	bl	8010dc4 <sendCanPkts>
			break;
 8010b28:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 8010b2a:	e117      	b.n	8010d5c <TransmitCanPkt+0x574>

	case MEDHA:
	{

		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 8010b2c:	88fb      	ldrh	r3, [r7, #6]
 8010b2e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010b32:	f300 8115 	bgt.w	8010d60 <TransmitCanPkt+0x578>
 8010b36:	f240 2207 	movw	r2, #519	; 0x207
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	f280 8082 	bge.w	8010c44 <TransmitCanPkt+0x45c>
 8010b40:	f240 2205 	movw	r2, #517	; 0x205
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d06f      	beq.n	8010c28 <TransmitCanPkt+0x440>
 8010b48:	f240 2205 	movw	r2, #517	; 0x205
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	f300 8107 	bgt.w	8010d60 <TransmitCanPkt+0x578>
 8010b52:	f240 2202 	movw	r2, #514	; 0x202
 8010b56:	4293      	cmp	r3, r2
 8010b58:	f300 8102 	bgt.w	8010d60 <TransmitCanPkt+0x578>
 8010b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b60:	dc3e      	bgt.n	8010be0 <TransmitCanPkt+0x3f8>
 8010b62:	f240 1219 	movw	r2, #281	; 0x119
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d009      	beq.n	8010b7e <TransmitCanPkt+0x396>
 8010b6a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8010b6e:	f340 80f7 	ble.w	8010d60 <TransmitCanPkt+0x578>
 8010b72:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	f200 80f2 	bhi.w	8010d60 <TransmitCanPkt+0x578>
 8010b7c:	e042      	b.n	8010c04 <TransmitCanPkt+0x41c>
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 8010b7e:	4b81      	ldr	r3, [pc, #516]	; (8010d84 <TransmitCanPkt+0x59c>)
 8010b80:	60fb      	str	r3, [r7, #12]

			uint16_t Length =  EI_data.Medha_Prms_st.NoofRelays%8;
 8010b82:	4b7a      	ldr	r3, [pc, #488]	; (8010d6c <TransmitCanPkt+0x584>)
 8010b84:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	f003 0307 	and.w	r3, r3, #7
 8010b8e:	82bb      	strh	r3, [r7, #20]

			if(Length != 0)
 8010b90:	8abb      	ldrh	r3, [r7, #20]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d007      	beq.n	8010ba6 <TransmitCanPkt+0x3be>
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8) + 1;
 8010b96:	4b75      	ldr	r3, [pc, #468]	; (8010d6c <TransmitCanPkt+0x584>)
 8010b98:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8010b9c:	08db      	lsrs	r3, r3, #3
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	82bb      	strh	r3, [r7, #20]
 8010ba4:	e004      	b.n	8010bb0 <TransmitCanPkt+0x3c8>
			}
			else
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8);
 8010ba6:	4b71      	ldr	r3, [pc, #452]	; (8010d6c <TransmitCanPkt+0x584>)
 8010ba8:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8010bac:	08db      	lsrs	r3, r3, #3
 8010bae:	82bb      	strh	r3, [r7, #20]
			}

			Medha_Relay_Sts_st.ActualDataBytes =  Length;
 8010bb0:	4a74      	ldr	r2, [pc, #464]	; (8010d84 <TransmitCanPkt+0x59c>)
 8010bb2:	8abb      	ldrh	r3, [r7, #20]
 8010bb4:	8013      	strh	r3, [r2, #0]
			uc_size =(Length + sizeof(Length)); /* +2 is by Considering */
 8010bb6:	8abb      	ldrh	r3, [r7, #20]
 8010bb8:	3302      	adds	r3, #2
 8010bba:	82fb      	strh	r3, [r7, #22]

			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010bbc:	8afb      	ldrh	r3, [r7, #22]
 8010bbe:	88fa      	ldrh	r2, [r7, #6]
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f000 f8fe 	bl	8010dc4 <sendCanPkts>
			if(Debug_flag == 1)
 8010bc8:	4b6a      	ldr	r3, [pc, #424]	; (8010d74 <TransmitCanPkt+0x58c>)
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d14b      	bne.n	8010c68 <TransmitCanPkt+0x480>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 8010bd0:	f007 fbbc 	bl	801834c <HAL_GetTick>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	486b      	ldr	r0, [pc, #428]	; (8010d88 <TransmitCanPkt+0x5a0>)
 8010bda:	f014 fbc1 	bl	8025360 <iprintf>
			}
			break;
 8010bde:	e043      	b.n	8010c68 <TransmitCanPkt+0x480>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 8010be0:	4b6a      	ldr	r3, [pc, #424]	; (8010d8c <TransmitCanPkt+0x5a4>)
 8010be2:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 8010be4:	2308      	movs	r3, #8
 8010be6:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010be8:	4b62      	ldr	r3, [pc, #392]	; (8010d74 <TransmitCanPkt+0x58c>)
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d102      	bne.n	8010bf6 <TransmitCanPkt+0x40e>
			{
				printf("\nSending_2_O\n");
 8010bf0:	4867      	ldr	r0, [pc, #412]	; (8010d90 <TransmitCanPkt+0x5a8>)
 8010bf2:	f014 fc51 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010bf6:	8afb      	ldrh	r3, [r7, #22]
 8010bf8:	88fa      	ldrh	r2, [r7, #6]
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f000 f8e1 	bl	8010dc4 <sendCanPkts>
			break;
 8010c02:	e032      	b.n	8010c6a <TransmitCanPkt+0x482>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 8010c04:	4b63      	ldr	r3, [pc, #396]	; (8010d94 <TransmitCanPkt+0x5ac>)
 8010c06:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 8010c08:	2316      	movs	r3, #22
 8010c0a:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010c0c:	4b59      	ldr	r3, [pc, #356]	; (8010d74 <TransmitCanPkt+0x58c>)
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d102      	bne.n	8010c1a <TransmitCanPkt+0x432>
			{
				printf("\nHealth 2 MIE\n");
 8010c14:	4860      	ldr	r0, [pc, #384]	; (8010d98 <TransmitCanPkt+0x5b0>)
 8010c16:	f014 fc3f 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010c1a:	8afb      	ldrh	r3, [r7, #22]
 8010c1c:	88fa      	ldrh	r2, [r7, #6]
 8010c1e:	4619      	mov	r1, r3
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f000 f8cf 	bl	8010dc4 <sendCanPkts>
			break;
 8010c26:	e020      	b.n	8010c6a <TransmitCanPkt+0x482>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 8010c28:	4b5c      	ldr	r3, [pc, #368]	; (8010d9c <TransmitCanPkt+0x5b4>)
 8010c2a:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 8010c2c:	2304      	movs	r3, #4
 8010c2e:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 8010c30:	4853      	ldr	r0, [pc, #332]	; (8010d80 <TransmitCanPkt+0x598>)
 8010c32:	f014 fc31 	bl	8025498 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010c36:	8afb      	ldrh	r3, [r7, #22]
 8010c38:	88fa      	ldrh	r2, [r7, #6]
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f000 f8c1 	bl	8010dc4 <sendCanPkts>
			break;
 8010c42:	e012      	b.n	8010c6a <TransmitCanPkt+0x482>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 8010c44:	4b56      	ldr	r3, [pc, #344]	; (8010da0 <TransmitCanPkt+0x5b8>)
 8010c46:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 8010c48:	2384      	movs	r3, #132	; 0x84
 8010c4a:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010c4c:	4b49      	ldr	r3, [pc, #292]	; (8010d74 <TransmitCanPkt+0x58c>)
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d102      	bne.n	8010c5a <TransmitCanPkt+0x472>
			{
				printf("\nRelay Data 2-O\n");
 8010c54:	4853      	ldr	r0, [pc, #332]	; (8010da4 <TransmitCanPkt+0x5bc>)
 8010c56:	f014 fc1f 	bl	8025498 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010c5a:	8afb      	ldrh	r3, [r7, #22]
 8010c5c:	88fa      	ldrh	r2, [r7, #6]
 8010c5e:	4619      	mov	r1, r3
 8010c60:	68f8      	ldr	r0, [r7, #12]
 8010c62:	f000 f8af 	bl	8010dc4 <sendCanPkts>
			break;
 8010c66:	e000      	b.n	8010c6a <TransmitCanPkt+0x482>
			break;
 8010c68:	bf00      	nop
		}

		break;
 8010c6a:	e079      	b.n	8010d60 <TransmitCanPkt+0x578>
		/* _____________________________ MEDHA ________________________________________ */

	}
	case KYOSAN:
	{
		switch((int)Ken_idetifier)
 8010c6c:	88fb      	ldrh	r3, [r7, #6]
 8010c6e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010c72:	dc77      	bgt.n	8010d64 <TransmitCanPkt+0x57c>
 8010c74:	f240 2207 	movw	r2, #519	; 0x207
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	da51      	bge.n	8010d20 <TransmitCanPkt+0x538>
 8010c7c:	f240 1219 	movw	r2, #281	; 0x119
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d004      	beq.n	8010c8e <TransmitCanPkt+0x4a6>
 8010c84:	f240 2205 	movw	r2, #517	; 0x205
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d057      	beq.n	8010d3c <TransmitCanPkt+0x554>
			uc_size = sizeof(KYOSAN_FAULT_INJECTION_t);
			printf("\nSending Fault Injection data 2-O\n");
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
			break;
		}
		break;
 8010c8c:	e06a      	b.n	8010d64 <TransmitCanPkt+0x57c>
			memcpy(Kyosan_can_relays_st.Relays,Kyosan_FinalRelays.Relays,MAX_KYOSAN_RELAYS);
 8010c8e:	4a46      	ldr	r2, [pc, #280]	; (8010da8 <TransmitCanPkt+0x5c0>)
 8010c90:	4b46      	ldr	r3, [pc, #280]	; (8010dac <TransmitCanPkt+0x5c4>)
 8010c92:	3302      	adds	r3, #2
 8010c94:	1c90      	adds	r0, r2, #2
 8010c96:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	f8d1 c000 	ldr.w	ip, [r1]
 8010ca2:	684e      	ldr	r6, [r1, #4]
 8010ca4:	688d      	ldr	r5, [r1, #8]
 8010ca6:	68c9      	ldr	r1, [r1, #12]
 8010ca8:	f8c2 c000 	str.w	ip, [r2]
 8010cac:	6056      	str	r6, [r2, #4]
 8010cae:	6095      	str	r5, [r2, #8]
 8010cb0:	60d1      	str	r1, [r2, #12]
 8010cb2:	3310      	adds	r3, #16
 8010cb4:	3010      	adds	r0, #16
 8010cb6:	42a3      	cmp	r3, r4
 8010cb8:	d1ef      	bne.n	8010c9a <TransmitCanPkt+0x4b2>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	6818      	ldr	r0, [r3, #0]
 8010cbe:	6859      	ldr	r1, [r3, #4]
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	6010      	str	r0, [r2, #0]
 8010cc4:	6051      	str	r1, [r2, #4]
 8010cc6:	6093      	str	r3, [r2, #8]
			Kyosan_can_relays_st.No_Of_CAN_Bytes = 60;
 8010cc8:	4b37      	ldr	r3, [pc, #220]	; (8010da8 <TransmitCanPkt+0x5c0>)
 8010cca:	223c      	movs	r2, #60	; 0x3c
 8010ccc:	801a      	strh	r2, [r3, #0]
			pp_ptr = &Kyosan_can_relays_st;
 8010cce:	4b36      	ldr	r3, [pc, #216]	; (8010da8 <TransmitCanPkt+0x5c0>)
 8010cd0:	60fb      	str	r3, [r7, #12]
			uc_size =(sizeof(KYOSAN_CAN_RELAYS_t));
 8010cd2:	233e      	movs	r3, #62	; 0x3e
 8010cd4:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010cd6:	8afb      	ldrh	r3, [r7, #22]
 8010cd8:	88fa      	ldrh	r2, [r7, #6]
 8010cda:	4619      	mov	r1, r3
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f000 f871 	bl	8010dc4 <sendCanPkts>
			if(Debug_flag == 1)
 8010ce2:	4b24      	ldr	r3, [pc, #144]	; (8010d74 <TransmitCanPkt+0x58c>)
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d136      	bne.n	8010d58 <TransmitCanPkt+0x570>
				printf("SENT SIGNAL DATA TO MIE\n");
 8010cea:	4831      	ldr	r0, [pc, #196]	; (8010db0 <TransmitCanPkt+0x5c8>)
 8010cec:	f014 fbd4 	bl	8025498 <puts>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	74fb      	strb	r3, [r7, #19]
 8010cf4:	e00a      	b.n	8010d0c <TransmitCanPkt+0x524>
					printf("%02X ",Kyosan_can_relays_st.Relays[i]);
 8010cf6:	7cfb      	ldrb	r3, [r7, #19]
 8010cf8:	4a2b      	ldr	r2, [pc, #172]	; (8010da8 <TransmitCanPkt+0x5c0>)
 8010cfa:	4413      	add	r3, r2
 8010cfc:	789b      	ldrb	r3, [r3, #2]
 8010cfe:	4619      	mov	r1, r3
 8010d00:	482c      	ldr	r0, [pc, #176]	; (8010db4 <TransmitCanPkt+0x5cc>)
 8010d02:	f014 fb2d 	bl	8025360 <iprintf>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 8010d06:	7cfb      	ldrb	r3, [r7, #19]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	74fb      	strb	r3, [r7, #19]
 8010d0c:	7cfb      	ldrb	r3, [r7, #19]
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	4b25      	ldr	r3, [pc, #148]	; (8010da8 <TransmitCanPkt+0x5c0>)
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d3ee      	bcc.n	8010cf6 <TransmitCanPkt+0x50e>
				printf("\n");
 8010d18:	200a      	movs	r0, #10
 8010d1a:	f014 fb39 	bl	8025390 <putchar>
			break;
 8010d1e:	e01b      	b.n	8010d58 <TransmitCanPkt+0x570>
			pp_ptr = &Kyosan_SelfRelays;
 8010d20:	4b25      	ldr	r3, [pc, #148]	; (8010db8 <TransmitCanPkt+0x5d0>)
 8010d22:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_RELAYS_t);
 8010d24:	2340      	movs	r3, #64	; 0x40
 8010d26:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Relays 2-O\n");
 8010d28:	4824      	ldr	r0, [pc, #144]	; (8010dbc <TransmitCanPkt+0x5d4>)
 8010d2a:	f014 fbb5 	bl	8025498 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010d2e:	8afb      	ldrh	r3, [r7, #22]
 8010d30:	88fa      	ldrh	r2, [r7, #6]
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f000 f845 	bl	8010dc4 <sendCanPkts>
			break;
 8010d3a:	e00e      	b.n	8010d5a <TransmitCanPkt+0x572>
			pp_ptr = &KyosanFaultInjection_st;
 8010d3c:	4b20      	ldr	r3, [pc, #128]	; (8010dc0 <TransmitCanPkt+0x5d8>)
 8010d3e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_FAULT_INJECTION_t);
 8010d40:	2308      	movs	r3, #8
 8010d42:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 8010d44:	480e      	ldr	r0, [pc, #56]	; (8010d80 <TransmitCanPkt+0x598>)
 8010d46:	f014 fba7 	bl	8025498 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010d4a:	8afb      	ldrh	r3, [r7, #22]
 8010d4c:	88fa      	ldrh	r2, [r7, #6]
 8010d4e:	4619      	mov	r1, r3
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f000 f837 	bl	8010dc4 <sendCanPkts>
			break;
 8010d56:	e000      	b.n	8010d5a <TransmitCanPkt+0x572>
			break;
 8010d58:	bf00      	nop
		break;
 8010d5a:	e003      	b.n	8010d64 <TransmitCanPkt+0x57c>
		break; /* case SIEMENS: break */
 8010d5c:	bf00      	nop
 8010d5e:	e002      	b.n	8010d66 <TransmitCanPkt+0x57e>
		break;
 8010d60:	bf00      	nop
 8010d62:	e000      	b.n	8010d66 <TransmitCanPkt+0x57e>
		break;
 8010d64:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 8010d66:	371c      	adds	r7, #28
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d6c:	20000304 	.word	0x20000304
 8010d70:	20003b9c 	.word	0x20003b9c
 8010d74:	200009b5 	.word	0x200009b5
 8010d78:	08029900 	.word	0x08029900
 8010d7c:	20003968 	.word	0x20003968
 8010d80:	080298b0 	.word	0x080298b0
 8010d84:	20002abc 	.word	0x20002abc
 8010d88:	08029918 	.word	0x08029918
 8010d8c:	20002b00 	.word	0x20002b00
 8010d90:	0802993c 	.word	0x0802993c
 8010d94:	20001d90 	.word	0x20001d90
 8010d98:	0802987c 	.word	0x0802987c
 8010d9c:	20002afc 	.word	0x20002afc
 8010da0:	20002b18 	.word	0x20002b18
 8010da4:	0802994c 	.word	0x0802994c
 8010da8:	2000a28c 	.word	0x2000a28c
 8010dac:	2000a24c 	.word	0x2000a24c
 8010db0:	08029840 	.word	0x08029840
 8010db4:	0802995c 	.word	0x0802995c
 8010db8:	2000a18c 	.word	0x2000a18c
 8010dbc:	08029964 	.word	0x08029964
 8010dc0:	2000a170 	.word	0x2000a170

08010dc4 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b088      	sub	sp, #32
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	4613      	mov	r3, r2
 8010dd0:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	61fb      	str	r3, [r7, #28]
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	617b      	str	r3, [r7, #20]
	while(j > 0)
 8010dde:	e019      	b.n	8010e14 <sendCanPkts+0x50>
	{
		if(j < 7)
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	2b06      	cmp	r3, #6
 8010de4:	dc07      	bgt.n	8010df6 <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 8010de6:	88f8      	ldrh	r0, [r7, #6]
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	1c5a      	adds	r2, r3, #1
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	6979      	ldr	r1, [r7, #20]
 8010df0:	f000 f818 	bl	8010e24 <CAN_transmit>
 8010df4:	e005      	b.n	8010e02 <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 8010df6:	88f8      	ldrh	r0, [r7, #6]
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	2208      	movs	r2, #8
 8010dfc:	6979      	ldr	r1, [r7, #20]
 8010dfe:	f000 f811 	bl	8010e24 <CAN_transmit>
		}
		cptr += 7;
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	3307      	adds	r3, #7
 8010e06:	617b      	str	r3, [r7, #20]
		j-=7;
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	3b07      	subs	r3, #7
 8010e0c:	61fb      	str	r3, [r7, #28]
		seqNo++;
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	3301      	adds	r3, #1
 8010e12:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	dce2      	bgt.n	8010de0 <sendCanPkts+0x1c>
	}
}
 8010e1a:	bf00      	nop
 8010e1c:	bf00      	nop
 8010e1e:	3720      	adds	r7, #32
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}

08010e24 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b088      	sub	sp, #32
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	607a      	str	r2, [r7, #4]
 8010e30:	603b      	str	r3, [r7, #0]
	char i=0;
 8010e32:	2300      	movs	r3, #0
 8010e34:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 8010e36:	f007 fa89 	bl	801834c <HAL_GetTick>
 8010e3a:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	b2da      	uxtb	r2, r3
 8010e40:	4b4d      	ldr	r3, [pc, #308]	; (8010f78 <CAN_transmit+0x154>)
 8010e42:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 8010e44:	2300      	movs	r3, #0
 8010e46:	77fb      	strb	r3, [r7, #31]
 8010e48:	e00a      	b.n	8010e60 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 8010e4a:	7ffb      	ldrb	r3, [r7, #31]
 8010e4c:	68ba      	ldr	r2, [r7, #8]
 8010e4e:	441a      	add	r2, r3
 8010e50:	7ffb      	ldrb	r3, [r7, #31]
 8010e52:	3301      	adds	r3, #1
 8010e54:	7811      	ldrb	r1, [r2, #0]
 8010e56:	4a48      	ldr	r2, [pc, #288]	; (8010f78 <CAN_transmit+0x154>)
 8010e58:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 8010e5a:	7ffb      	ldrb	r3, [r7, #31]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	77fb      	strb	r3, [r7, #31]
 8010e60:	7ffa      	ldrb	r2, [r7, #31]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	3b01      	subs	r3, #1
 8010e66:	429a      	cmp	r2, r3
 8010e68:	dbef      	blt.n	8010e4a <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e70:	da3b      	bge.n	8010eea <CAN_transmit+0xc6>
	{
		while(len!=0)
 8010e72:	e036      	b.n	8010ee2 <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 8010e74:	4b41      	ldr	r3, [pc, #260]	; (8010f7c <CAN_transmit+0x158>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	4a3f      	ldr	r2, [pc, #252]	; (8010f7c <CAN_transmit+0x158>)
 8010e7e:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 8010e80:	4b3e      	ldr	r3, [pc, #248]	; (8010f7c <CAN_transmit+0x158>)
 8010e82:	2200      	movs	r2, #0
 8010e84:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4a3c      	ldr	r2, [pc, #240]	; (8010f7c <CAN_transmit+0x158>)
 8010e8a:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 8010e90:	4b3b      	ldr	r3, [pc, #236]	; (8010f80 <CAN_transmit+0x15c>)
 8010e92:	4a39      	ldr	r2, [pc, #228]	; (8010f78 <CAN_transmit+0x154>)
 8010e94:	4939      	ldr	r1, [pc, #228]	; (8010f7c <CAN_transmit+0x158>)
 8010e96:	483b      	ldr	r0, [pc, #236]	; (8010f84 <CAN_transmit+0x160>)
 8010e98:	f007 fcfe 	bl	8018898 <HAL_CAN_AddTxMessage>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	4b39      	ldr	r3, [pc, #228]	; (8010f88 <CAN_transmit+0x164>)
 8010ea2:	701a      	strb	r2, [r3, #0]
 8010ea4:	4b38      	ldr	r3, [pc, #224]	; (8010f88 <CAN_transmit+0x164>)
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00d      	beq.n	8010ec8 <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 8010eac:	4837      	ldr	r0, [pc, #220]	; (8010f8c <CAN_transmit+0x168>)
 8010eae:	f014 faf3 	bl	8025498 <puts>
				return;
 8010eb2:	e05e      	b.n	8010f72 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 8010eb4:	69b8      	ldr	r0, [r7, #24]
 8010eb6:	f7fe fee3 	bl	800fc80 <HAL_Elaps_Ticks>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b64      	cmp	r3, #100	; 0x64
 8010ebe:	d903      	bls.n	8010ec8 <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 8010ec0:	4832      	ldr	r0, [pc, #200]	; (8010f8c <CAN_transmit+0x168>)
 8010ec2:	f014 fae9 	bl	8025498 <puts>
					return;
 8010ec6:	e054      	b.n	8010f72 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 8010ec8:	4b2d      	ldr	r3, [pc, #180]	; (8010f80 <CAN_transmit+0x15c>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	482d      	ldr	r0, [pc, #180]	; (8010f84 <CAN_transmit+0x160>)
 8010ed0:	f007 fdb2 	bl	8018a38 <HAL_CAN_IsTxMessagePending>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	75bb      	strb	r3, [r7, #22]
 8010ed8:	7dbb      	ldrb	r3, [r7, #22]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1ea      	bne.n	8010eb4 <CAN_transmit+0x90>
				}
			}

			len=0;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	607b      	str	r3, [r7, #4]
		while(len!=0)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d1c5      	bne.n	8010e74 <CAN_transmit+0x50>
 8010ee8:	e043      	b.n	8010f72 <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8010eea:	4929      	ldr	r1, [pc, #164]	; (8010f90 <CAN_transmit+0x16c>)
 8010eec:	4829      	ldr	r0, [pc, #164]	; (8010f94 <CAN_transmit+0x170>)
 8010eee:	f7ef f9a7 	bl	8000240 <strcmp>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d03b      	beq.n	8010f70 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 8010ef8:	e036      	b.n	8010f68 <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 8010efa:	4b27      	ldr	r3, [pc, #156]	; (8010f98 <CAN_transmit+0x174>)
 8010efc:	2200      	movs	r2, #0
 8010efe:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	4a25      	ldr	r2, [pc, #148]	; (8010f98 <CAN_transmit+0x174>)
 8010f04:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 8010f06:	4b24      	ldr	r3, [pc, #144]	; (8010f98 <CAN_transmit+0x174>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	4a22      	ldr	r2, [pc, #136]	; (8010f98 <CAN_transmit+0x174>)
 8010f10:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8010f12:	2300      	movs	r3, #0
 8010f14:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 8010f16:	4b21      	ldr	r3, [pc, #132]	; (8010f9c <CAN_transmit+0x178>)
 8010f18:	4a17      	ldr	r2, [pc, #92]	; (8010f78 <CAN_transmit+0x154>)
 8010f1a:	491f      	ldr	r1, [pc, #124]	; (8010f98 <CAN_transmit+0x174>)
 8010f1c:	4820      	ldr	r0, [pc, #128]	; (8010fa0 <CAN_transmit+0x17c>)
 8010f1e:	f007 fcbb 	bl	8018898 <HAL_CAN_AddTxMessage>
 8010f22:	4603      	mov	r3, r0
 8010f24:	461a      	mov	r2, r3
 8010f26:	4b18      	ldr	r3, [pc, #96]	; (8010f88 <CAN_transmit+0x164>)
 8010f28:	701a      	strb	r2, [r3, #0]
 8010f2a:	4b17      	ldr	r3, [pc, #92]	; (8010f88 <CAN_transmit+0x164>)
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d00d      	beq.n	8010f4e <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 8010f32:	481c      	ldr	r0, [pc, #112]	; (8010fa4 <CAN_transmit+0x180>)
 8010f34:	f014 fab0 	bl	8025498 <puts>
				return;
 8010f38:	e01b      	b.n	8010f72 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 8010f3a:	69b8      	ldr	r0, [r7, #24]
 8010f3c:	f7fe fea0 	bl	800fc80 <HAL_Elaps_Ticks>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b64      	cmp	r3, #100	; 0x64
 8010f44:	d903      	bls.n	8010f4e <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 8010f46:	4817      	ldr	r0, [pc, #92]	; (8010fa4 <CAN_transmit+0x180>)
 8010f48:	f014 faa6 	bl	8025498 <puts>
					return;
 8010f4c:	e011      	b.n	8010f72 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 8010f4e:	4b13      	ldr	r3, [pc, #76]	; (8010f9c <CAN_transmit+0x178>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	4619      	mov	r1, r3
 8010f54:	4812      	ldr	r0, [pc, #72]	; (8010fa0 <CAN_transmit+0x17c>)
 8010f56:	f007 fd6f 	bl	8018a38 <HAL_CAN_IsTxMessagePending>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	75fb      	strb	r3, [r7, #23]
 8010f5e:	7dfb      	ldrb	r3, [r7, #23]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1ea      	bne.n	8010f3a <CAN_transmit+0x116>
				}
			}
			len=0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	607b      	str	r3, [r7, #4]
		while(len!=0)
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1c5      	bne.n	8010efa <CAN_transmit+0xd6>
 8010f6e:	e000      	b.n	8010f72 <CAN_transmit+0x14e>
			return;
 8010f70:	bf00      	nop
		}
	}
}
 8010f72:	3720      	adds	r7, #32
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	20009fd0 	.word	0x20009fd0
 8010f7c:	20009f50 	.word	0x20009f50
 8010f80:	20009f80 	.word	0x20009f80
 8010f84:	20009fdc 	.word	0x20009fdc
 8010f88:	20009fd8 	.word	0x20009fd8
 8010f8c:	08029978 	.word	0x08029978
 8010f90:	08029988 	.word	0x08029988
 8010f94:	20000305 	.word	0x20000305
 8010f98:	20009f68 	.word	0x20009f68
 8010f9c:	20009f84 	.word	0x20009f84
 8010fa0:	2000a040 	.word	0x2000a040
 8010fa4:	08029994 	.word	0x08029994

08010fa8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b082      	sub	sp, #8
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a3e      	ldr	r2, [pc, #248]	; (80110b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d175      	bne.n	80110a6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 8010fba:	4b3e      	ldr	r3, [pc, #248]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fbc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fc6:	d104      	bne.n	8010fd2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 8010fc8:	4b3a      	ldr	r3, [pc, #232]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fce:	2200      	movs	r2, #0
 8010fd0:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 8010fd2:	4b39      	ldr	r3, [pc, #228]	; (80110b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8010fd4:	4a39      	ldr	r2, [pc, #228]	; (80110bc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	4839      	ldr	r0, [pc, #228]	; (80110c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8010fda:	f007 fd51 	bl	8018a80 <HAL_CAN_GetRxMessage>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 8010fe4:	f005 fbf4 	bl	80167d0 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 8010fe8:	4b32      	ldr	r3, [pc, #200]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fee:	881b      	ldrh	r3, [r3, #0]
 8010ff0:	4a30      	ldr	r2, [pc, #192]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010ff2:	011b      	lsls	r3, r3, #4
 8010ff4:	4413      	add	r3, r2
 8010ff6:	330f      	adds	r3, #15
 8010ff8:	2203      	movs	r2, #3
 8010ffa:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 8010ffc:	4b2f      	ldr	r3, [pc, #188]	; (80110bc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010ffe:	691a      	ldr	r2, [r3, #16]
 8011000:	4b2c      	ldr	r3, [pc, #176]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011002:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	b2d1      	uxtb	r1, r2
 801100a:	4a2a      	ldr	r2, [pc, #168]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801100c:	011b      	lsls	r3, r3, #4
 801100e:	4413      	add	r3, r2
 8011010:	330c      	adds	r3, #12
 8011012:	460a      	mov	r2, r1
 8011014:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 8011016:	4b29      	ldr	r3, [pc, #164]	; (80110bc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011018:	689a      	ldr	r2, [r3, #8]
 801101a:	4b26      	ldr	r3, [pc, #152]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801101c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	b2d1      	uxtb	r1, r2
 8011024:	4a23      	ldr	r2, [pc, #140]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011026:	011b      	lsls	r3, r3, #4
 8011028:	4413      	add	r3, r2
 801102a:	330d      	adds	r3, #13
 801102c:	460a      	mov	r2, r1
 801102e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 8011030:	4b22      	ldr	r3, [pc, #136]	; (80110bc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011032:	68da      	ldr	r2, [r3, #12]
 8011034:	4b1f      	ldr	r3, [pc, #124]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011036:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	b2d1      	uxtb	r1, r2
 801103e:	4a1d      	ldr	r2, [pc, #116]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011040:	011b      	lsls	r3, r3, #4
 8011042:	4413      	add	r3, r2
 8011044:	330e      	adds	r3, #14
 8011046:	460a      	mov	r2, r1
 8011048:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 801104a:	4b1a      	ldr	r3, [pc, #104]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801104c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	4618      	mov	r0, r3
 8011054:	4b19      	ldr	r3, [pc, #100]	; (80110bc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	4916      	ldr	r1, [pc, #88]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801105a:	0103      	lsls	r3, r0, #4
 801105c:	440b      	add	r3, r1
 801105e:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 8011060:	4b14      	ldr	r3, [pc, #80]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011062:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	4a12      	ldr	r2, [pc, #72]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801106a:	011b      	lsls	r3, r3, #4
 801106c:	4413      	add	r3, r2
 801106e:	330e      	adds	r3, #14
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d117      	bne.n	80110a6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 8011076:	4b0f      	ldr	r3, [pc, #60]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011078:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801107c:	881b      	ldrh	r3, [r3, #0]
 801107e:	011b      	lsls	r3, r3, #4
 8011080:	4a0c      	ldr	r2, [pc, #48]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011082:	4413      	add	r3, r2
 8011084:	3304      	adds	r3, #4
 8011086:	490c      	ldr	r1, [pc, #48]	; (80110b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8011088:	461a      	mov	r2, r3
 801108a:	460b      	mov	r3, r1
 801108c:	cb03      	ldmia	r3!, {r0, r1}
 801108e:	6010      	str	r0, [r2, #0]
 8011090:	6051      	str	r1, [r2, #4]
			canRead.In++;
 8011092:	4b08      	ldr	r3, [pc, #32]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011094:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011098:	881b      	ldrh	r3, [r3, #0]
 801109a:	3301      	adds	r3, #1
 801109c:	b29a      	uxth	r2, r3
 801109e:	4b05      	ldr	r3, [pc, #20]	; (80110b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80110a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110a4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80110a6:	bf00      	nop
 80110a8:	3708      	adds	r7, #8
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	40003400 	.word	0x40003400
 80110b4:	20005f4c 	.word	0x20005f4c
 80110b8:	20009fc8 	.word	0x20009fc8
 80110bc:	20009fa4 	.word	0x20009fa4
 80110c0:	2000a040 	.word	0x2000a040

080110c4 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 80110cc:	4b42      	ldr	r3, [pc, #264]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80110ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110d8:	d104      	bne.n	80110e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 80110da:	4b3f      	ldr	r3, [pc, #252]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80110dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110e0:	2200      	movs	r2, #0
 80110e2:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 80110e4:	4b3d      	ldr	r3, [pc, #244]	; (80111dc <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80110e6:	4a3e      	ldr	r2, [pc, #248]	; (80111e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80110e8:	2101      	movs	r1, #1
 80110ea:	483e      	ldr	r0, [pc, #248]	; (80111e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 80110ec:	f007 fcc8 	bl	8018a80 <HAL_CAN_GetRxMessage>
 80110f0:	4603      	mov	r3, r0
 80110f2:	461a      	mov	r2, r3
 80110f4:	4b3c      	ldr	r3, [pc, #240]	; (80111e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80110f6:	701a      	strb	r2, [r3, #0]
 80110f8:	4b3b      	ldr	r3, [pc, #236]	; (80111e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d007      	beq.n	8011110 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 8011100:	4b39      	ldr	r3, [pc, #228]	; (80111e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	4619      	mov	r1, r3
 8011106:	4839      	ldr	r0, [pc, #228]	; (80111ec <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8011108:	f014 f92a 	bl	8025360 <iprintf>
		Error_Handler();
 801110c:	f005 fb60 	bl	80167d0 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 8011110:	4b31      	ldr	r3, [pc, #196]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011112:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	4a2f      	ldr	r2, [pc, #188]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801111a:	011b      	lsls	r3, r3, #4
 801111c:	4413      	add	r3, r2
 801111e:	330f      	adds	r3, #15
 8011120:	2202      	movs	r2, #2
 8011122:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 8011124:	4b2e      	ldr	r3, [pc, #184]	; (80111e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011126:	691a      	ldr	r2, [r3, #16]
 8011128:	4b2b      	ldr	r3, [pc, #172]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801112a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801112e:	881b      	ldrh	r3, [r3, #0]
 8011130:	b2d1      	uxtb	r1, r2
 8011132:	4a29      	ldr	r2, [pc, #164]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011134:	011b      	lsls	r3, r3, #4
 8011136:	4413      	add	r3, r2
 8011138:	330c      	adds	r3, #12
 801113a:	460a      	mov	r2, r1
 801113c:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 801113e:	4b28      	ldr	r3, [pc, #160]	; (80111e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011140:	689a      	ldr	r2, [r3, #8]
 8011142:	4b25      	ldr	r3, [pc, #148]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011144:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011148:	881b      	ldrh	r3, [r3, #0]
 801114a:	b2d1      	uxtb	r1, r2
 801114c:	4a22      	ldr	r2, [pc, #136]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801114e:	011b      	lsls	r3, r3, #4
 8011150:	4413      	add	r3, r2
 8011152:	330d      	adds	r3, #13
 8011154:	460a      	mov	r2, r1
 8011156:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 8011158:	4b21      	ldr	r3, [pc, #132]	; (80111e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 801115a:	68da      	ldr	r2, [r3, #12]
 801115c:	4b1e      	ldr	r3, [pc, #120]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801115e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011162:	881b      	ldrh	r3, [r3, #0]
 8011164:	b2d1      	uxtb	r1, r2
 8011166:	4a1c      	ldr	r2, [pc, #112]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011168:	011b      	lsls	r3, r3, #4
 801116a:	4413      	add	r3, r2
 801116c:	330e      	adds	r3, #14
 801116e:	460a      	mov	r2, r1
 8011170:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 8011172:	4b19      	ldr	r3, [pc, #100]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011174:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011178:	881b      	ldrh	r3, [r3, #0]
 801117a:	4618      	mov	r0, r3
 801117c:	4b18      	ldr	r3, [pc, #96]	; (80111e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	4915      	ldr	r1, [pc, #84]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011182:	0103      	lsls	r3, r0, #4
 8011184:	440b      	add	r3, r1
 8011186:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 8011188:	4b13      	ldr	r3, [pc, #76]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801118a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801118e:	881b      	ldrh	r3, [r3, #0]
 8011190:	4a11      	ldr	r2, [pc, #68]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011192:	011b      	lsls	r3, r3, #4
 8011194:	4413      	add	r3, r2
 8011196:	330e      	adds	r3, #14
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d117      	bne.n	80111ce <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 801119e:	4b0e      	ldr	r3, [pc, #56]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80111a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	011b      	lsls	r3, r3, #4
 80111a8:	4a0b      	ldr	r2, [pc, #44]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80111aa:	4413      	add	r3, r2
 80111ac:	3304      	adds	r3, #4
 80111ae:	490b      	ldr	r1, [pc, #44]	; (80111dc <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80111b0:	461a      	mov	r2, r3
 80111b2:	460b      	mov	r3, r1
 80111b4:	cb03      	ldmia	r3!, {r0, r1}
 80111b6:	6010      	str	r0, [r2, #0]
 80111b8:	6051      	str	r1, [r2, #4]
		canRead.In++;
 80111ba:	4b07      	ldr	r3, [pc, #28]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80111bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111c0:	881b      	ldrh	r3, [r3, #0]
 80111c2:	3301      	adds	r3, #1
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80111c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111cc:	801a      	strh	r2, [r3, #0]
	}
}
 80111ce:	bf00      	nop
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	20005f4c 	.word	0x20005f4c
 80111dc:	20009fc0 	.word	0x20009fc0
 80111e0:	20009f88 	.word	0x20009f88
 80111e4:	20009fdc 	.word	0x20009fdc
 80111e8:	20009fd8 	.word	0x20009fd8
 80111ec:	080299a4 	.word	0x080299a4

080111f0 <canDataReady>:


unsigned char canDataReady()
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 80111f6:	2300      	movs	r3, #0
 80111f8:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 80111fa:	4b27      	ldr	r3, [pc, #156]	; (8011298 <canDataReady+0xa8>)
 80111fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011200:	881a      	ldrh	r2, [r3, #0]
 8011202:	4b25      	ldr	r3, [pc, #148]	; (8011298 <canDataReady+0xa8>)
 8011204:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011208:	885b      	ldrh	r3, [r3, #2]
 801120a:	429a      	cmp	r2, r3
 801120c:	d101      	bne.n	8011212 <canDataReady+0x22>
	{
		return 0;
 801120e:	2300      	movs	r3, #0
 8011210:	e03e      	b.n	8011290 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011212:	4b21      	ldr	r3, [pc, #132]	; (8011298 <canDataReady+0xa8>)
 8011214:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011218:	885b      	ldrh	r3, [r3, #2]
 801121a:	3301      	adds	r3, #1
 801121c:	607b      	str	r3, [r7, #4]
 801121e:	e02e      	b.n	801127e <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 8011220:	4b1d      	ldr	r3, [pc, #116]	; (8011298 <canDataReady+0xa8>)
 8011222:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011226:	885b      	ldrh	r3, [r3, #2]
 8011228:	011b      	lsls	r3, r3, #4
 801122a:	4a1b      	ldr	r2, [pc, #108]	; (8011298 <canDataReady+0xa8>)
 801122c:	1898      	adds	r0, r3, r2
 801122e:	4b1a      	ldr	r3, [pc, #104]	; (8011298 <canDataReady+0xa8>)
 8011230:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011234:	881b      	ldrh	r3, [r3, #0]
 8011236:	011b      	lsls	r3, r3, #4
 8011238:	4a17      	ldr	r2, [pc, #92]	; (8011298 <canDataReady+0xa8>)
 801123a:	4413      	add	r3, r2
 801123c:	2210      	movs	r2, #16
 801123e:	4619      	mov	r1, r3
 8011240:	f013 ff6e 	bl	8025120 <memcmp>
 8011244:	4603      	mov	r3, r0
 8011246:	2b00      	cmp	r3, #0
 8011248:	d116      	bne.n	8011278 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 801124a:	4b13      	ldr	r3, [pc, #76]	; (8011298 <canDataReady+0xa8>)
 801124c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011250:	885b      	ldrh	r3, [r3, #2]
 8011252:	011b      	lsls	r3, r3, #4
 8011254:	4a10      	ldr	r2, [pc, #64]	; (8011298 <canDataReady+0xa8>)
 8011256:	4413      	add	r3, r2
 8011258:	2210      	movs	r2, #16
 801125a:	2100      	movs	r1, #0
 801125c:	4618      	mov	r0, r3
 801125e:	f013 ff97 	bl	8025190 <memset>
			canRead.Out++;
 8011262:	4b0d      	ldr	r3, [pc, #52]	; (8011298 <canDataReady+0xa8>)
 8011264:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011268:	885b      	ldrh	r3, [r3, #2]
 801126a:	3301      	adds	r3, #1
 801126c:	b29a      	uxth	r2, r3
 801126e:	4b0a      	ldr	r3, [pc, #40]	; (8011298 <canDataReady+0xa8>)
 8011270:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011274:	805a      	strh	r2, [r3, #2]
			break;
 8011276:	e00a      	b.n	801128e <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3301      	adds	r3, #1
 801127c:	607b      	str	r3, [r7, #4]
 801127e:	4b06      	ldr	r3, [pc, #24]	; (8011298 <canDataReady+0xa8>)
 8011280:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011284:	881b      	ldrh	r3, [r3, #0]
 8011286:	461a      	mov	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	4293      	cmp	r3, r2
 801128c:	d3c8      	bcc.n	8011220 <canDataReady+0x30>
		}
	}
	return 1;
 801128e:	2301      	movs	r3, #1
}
 8011290:	4618      	mov	r0, r3
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	20005f4c 	.word	0x20005f4c

0801129c <readCanToStructs>:

void readCanToStructs(void)
{
 801129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801129e:	b08f      	sub	sp, #60	; 0x3c
 80112a0:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80112a8:	2300      	movs	r3, #0
 80112aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80112ae:	2300      	movs	r3, #0
 80112b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 80112b4:	2300      	movs	r3, #0
 80112b6:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 80112b8:	4bc1      	ldr	r3, [pc, #772]	; (80115c0 <readCanToStructs+0x324>)
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	3b01      	subs	r3, #1
 80112be:	2b03      	cmp	r3, #3
 80112c0:	f203 81cf 	bhi.w	8014662 <readCanToStructs+0x33c6>
 80112c4:	a201      	add	r2, pc, #4	; (adr r2, 80112cc <readCanToStructs+0x30>)
 80112c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ca:	bf00      	nop
 80112cc:	080112dd 	.word	0x080112dd
 80112d0:	080132d3 	.word	0x080132d3
 80112d4:	08014035 	.word	0x08014035
 80112d8:	08014657 	.word	0x08014657
	{
	case HITACHI:
	{
		/* ___________________ HITACHI _______________ */
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80112dc:	4bb9      	ldr	r3, [pc, #740]	; (80115c4 <readCanToStructs+0x328>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	09db      	lsrs	r3, r3, #7
 80112e2:	f003 0301 	and.w	r3, r3, #1
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	f043 81bd 	bne.w	8014666 <readCanToStructs+0x33ca>
		{
			return;
		}
		while(canDataReady())
 80112ec:	f001 b92e 	b.w	801254c <readCanToStructs+0x12b0>
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80112f0:	4bb5      	ldr	r3, [pc, #724]	; (80115c8 <readCanToStructs+0x32c>)
 80112f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112f6:	885b      	ldrh	r3, [r3, #2]
 80112f8:	4ab3      	ldr	r2, [pc, #716]	; (80115c8 <readCanToStructs+0x32c>)
 80112fa:	011b      	lsls	r3, r3, #4
 80112fc:	4413      	add	r3, r2
 80112fe:	330f      	adds	r3, #15
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	3b01      	subs	r3, #1
 8011304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011308:	4baf      	ldr	r3, [pc, #700]	; (80115c8 <readCanToStructs+0x32c>)
 801130a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801130e:	885b      	ldrh	r3, [r3, #2]
 8011310:	4aad      	ldr	r2, [pc, #692]	; (80115c8 <readCanToStructs+0x32c>)
 8011312:	011b      	lsls	r3, r3, #4
 8011314:	4413      	add	r3, r2
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801131c:	f201 80f3 	bhi.w	8012506 <readCanToStructs+0x126a>
 8011320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011324:	d80a      	bhi.n	801133c <readCanToStructs+0xa0>
 8011326:	f240 1203 	movw	r2, #259	; 0x103
 801132a:	4293      	cmp	r3, r2
 801132c:	d01e      	beq.n	801136c <readCanToStructs+0xd0>
 801132e:	f240 1209 	movw	r2, #265	; 0x109
 8011332:	4293      	cmp	r3, r2
 8011334:	f000 80f0 	beq.w	8011518 <readCanToStructs+0x27c>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;

			default:
				break;
 8011338:	f001 b8e5 	b.w	8012506 <readCanToStructs+0x126a>
 801133c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011340:	2b07      	cmp	r3, #7
 8011342:	f201 80e0 	bhi.w	8012506 <readCanToStructs+0x126a>
 8011346:	a201      	add	r2, pc, #4	; (adr r2, 801134c <readCanToStructs+0xb0>)
 8011348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801134c:	080116ed 	.word	0x080116ed
 8011350:	080118f5 	.word	0x080118f5
 8011354:	08011acd 	.word	0x08011acd
 8011358:	08011ce7 	.word	0x08011ce7
 801135c:	08011efd 	.word	0x08011efd
 8011360:	08012507 	.word	0x08012507
 8011364:	08012091 	.word	0x08012091
 8011368:	080122cb 	.word	0x080122cb
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801136c:	4b97      	ldr	r3, [pc, #604]	; (80115cc <readCanToStructs+0x330>)
 801136e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011370:	4b95      	ldr	r3, [pc, #596]	; (80115c8 <readCanToStructs+0x32c>)
 8011372:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011376:	885b      	ldrh	r3, [r3, #2]
 8011378:	4a93      	ldr	r2, [pc, #588]	; (80115c8 <readCanToStructs+0x32c>)
 801137a:	011b      	lsls	r3, r3, #4
 801137c:	4413      	add	r3, r2
 801137e:	3304      	adds	r3, #4
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011386:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801138a:	2b00      	cmp	r3, #0
 801138c:	d110      	bne.n	80113b0 <readCanToStructs+0x114>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801138e:	2206      	movs	r2, #6
 8011390:	2100      	movs	r1, #0
 8011392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011394:	f013 fefc 	bl	8025190 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801139c:	4a8c      	ldr	r2, [pc, #560]	; (80115d0 <readCanToStructs+0x334>)
 801139e:	f240 4112 	movw	r1, #1042	; 0x412
 80113a2:	fb01 f303 	mul.w	r3, r1, r3
 80113a6:	4413      	add	r3, r2
 80113a8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80113ac:	2200      	movs	r2, #0
 80113ae:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80113b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113b4:	4a86      	ldr	r2, [pc, #536]	; (80115d0 <readCanToStructs+0x334>)
 80113b6:	f240 4112 	movw	r1, #1042	; 0x412
 80113ba:	fb01 f303 	mul.w	r3, r1, r3
 80113be:	4413      	add	r3, r2
 80113c0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d015      	beq.n	80113fa <readCanToStructs+0x15e>
					printf("GPS Packet Seq no MisMatch\n");
 80113ce:	4881      	ldr	r0, [pc, #516]	; (80115d4 <readCanToStructs+0x338>)
 80113d0:	f014 f862 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80113d4:	2206      	movs	r2, #6
 80113d6:	2100      	movs	r1, #0
 80113d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113da:	f013 fed9 	bl	8025190 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80113de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113e2:	4a7b      	ldr	r2, [pc, #492]	; (80115d0 <readCanToStructs+0x334>)
 80113e4:	f240 4112 	movw	r1, #1042	; 0x412
 80113e8:	fb01 f303 	mul.w	r3, r1, r3
 80113ec:	4413      	add	r3, r2
 80113ee:	f203 2307 	addw	r3, r3, #519	; 0x207
 80113f2:	2200      	movs	r2, #0
 80113f4:	701a      	strb	r2, [r3, #0]
					break;
 80113f6:	f001 b887 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 80113fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80113fe:	4613      	mov	r3, r2
 8011400:	00db      	lsls	r3, r3, #3
 8011402:	1a9b      	subs	r3, r3, r2
 8011404:	461a      	mov	r2, r3
 8011406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011408:	4413      	add	r3, r2
 801140a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801140c:	2301      	movs	r3, #1
 801140e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011412:	e016      	b.n	8011442 <readCanToStructs+0x1a6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011414:	4b6c      	ldr	r3, [pc, #432]	; (80115c8 <readCanToStructs+0x32c>)
 8011416:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801141a:	885b      	ldrh	r3, [r3, #2]
 801141c:	461a      	mov	r2, r3
 801141e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011422:	4969      	ldr	r1, [pc, #420]	; (80115c8 <readCanToStructs+0x32c>)
 8011424:	0112      	lsls	r2, r2, #4
 8011426:	440a      	add	r2, r1
 8011428:	4413      	add	r3, r2
 801142a:	3304      	adds	r3, #4
 801142c:	781a      	ldrb	r2, [r3, #0]
 801142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011430:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011434:	3301      	adds	r3, #1
 8011436:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801143c:	3301      	adds	r3, #1
 801143e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011442:	4b61      	ldr	r3, [pc, #388]	; (80115c8 <readCanToStructs+0x32c>)
 8011444:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011448:	885b      	ldrh	r3, [r3, #2]
 801144a:	4a5f      	ldr	r2, [pc, #380]	; (80115c8 <readCanToStructs+0x32c>)
 801144c:	011b      	lsls	r3, r3, #4
 801144e:	4413      	add	r3, r2
 8011450:	330c      	adds	r3, #12
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011458:	429a      	cmp	r2, r3
 801145a:	d3db      	bcc.n	8011414 <readCanToStructs+0x178>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 801145c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011460:	4a5b      	ldr	r2, [pc, #364]	; (80115d0 <readCanToStructs+0x334>)
 8011462:	f240 4112 	movw	r1, #1042	; 0x412
 8011466:	fb01 f303 	mul.w	r3, r1, r3
 801146a:	4413      	add	r3, r2
 801146c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	461a      	mov	r2, r3
 8011474:	4613      	mov	r3, r2
 8011476:	00db      	lsls	r3, r3, #3
 8011478:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801147a:	4b53      	ldr	r3, [pc, #332]	; (80115c8 <readCanToStructs+0x32c>)
 801147c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011480:	885b      	ldrh	r3, [r3, #2]
 8011482:	4951      	ldr	r1, [pc, #324]	; (80115c8 <readCanToStructs+0x32c>)
 8011484:	011b      	lsls	r3, r3, #4
 8011486:	440b      	add	r3, r1
 8011488:	330c      	adds	r3, #12
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	3b01      	subs	r3, #1
 801148e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011490:	2b05      	cmp	r3, #5
 8011492:	d91c      	bls.n	80114ce <readCanToStructs+0x232>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011494:	4b50      	ldr	r3, [pc, #320]	; (80115d8 <readCanToStructs+0x33c>)
 8011496:	4a4d      	ldr	r2, [pc, #308]	; (80115cc <readCanToStructs+0x330>)
 8011498:	6811      	ldr	r1, [r2, #0]
 801149a:	6019      	str	r1, [r3, #0]
 801149c:	8892      	ldrh	r2, [r2, #4]
 801149e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80114a0:	4b4e      	ldr	r3, [pc, #312]	; (80115dc <readCanToStructs+0x340>)
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d102      	bne.n	80114ae <readCanToStructs+0x212>
						printf("GPS_PACKET_RECEIVED\n");
 80114a8:	484d      	ldr	r0, [pc, #308]	; (80115e0 <readCanToStructs+0x344>)
 80114aa:	f013 fff5 	bl	8025498 <puts>
					Write_RTC();
 80114ae:	f7fa fec1 	bl	800c234 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80114b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114b6:	4a46      	ldr	r2, [pc, #280]	; (80115d0 <readCanToStructs+0x334>)
 80114b8:	f240 4112 	movw	r1, #1042	; 0x412
 80114bc:	fb01 f303 	mul.w	r3, r1, r3
 80114c0:	4413      	add	r3, r2
 80114c2:	f203 2307 	addw	r3, r3, #519	; 0x207
 80114c6:	2200      	movs	r2, #0
 80114c8:	701a      	strb	r2, [r3, #0]
				break;
 80114ca:	f001 b81d 	b.w	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80114ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114d2:	4a3f      	ldr	r2, [pc, #252]	; (80115d0 <readCanToStructs+0x334>)
 80114d4:	f240 4112 	movw	r1, #1042	; 0x412
 80114d8:	fb01 f303 	mul.w	r3, r1, r3
 80114dc:	4413      	add	r3, r2
 80114de:	f203 2306 	addw	r3, r3, #518	; 0x206
 80114e2:	2201      	movs	r2, #1
 80114e4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 80114e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114ea:	4939      	ldr	r1, [pc, #228]	; (80115d0 <readCanToStructs+0x334>)
 80114ec:	f240 4212 	movw	r2, #1042	; 0x412
 80114f0:	fb03 f202 	mul.w	r2, r3, r2
 80114f4:	440a      	add	r2, r1
 80114f6:	f202 2207 	addw	r2, r2, #519	; 0x207
 80114fa:	7812      	ldrb	r2, [r2, #0]
 80114fc:	3201      	adds	r2, #1
 80114fe:	b2d0      	uxtb	r0, r2
 8011500:	4a33      	ldr	r2, [pc, #204]	; (80115d0 <readCanToStructs+0x334>)
 8011502:	f240 4112 	movw	r1, #1042	; 0x412
 8011506:	fb01 f303 	mul.w	r3, r1, r3
 801150a:	4413      	add	r3, r2
 801150c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011510:	4602      	mov	r2, r0
 8011512:	701a      	strb	r2, [r3, #0]
				break;
 8011514:	f000 bff8 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011518:	4b2c      	ldr	r3, [pc, #176]	; (80115cc <readCanToStructs+0x330>)
 801151a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801151c:	4b2a      	ldr	r3, [pc, #168]	; (80115c8 <readCanToStructs+0x32c>)
 801151e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011522:	885b      	ldrh	r3, [r3, #2]
 8011524:	4a28      	ldr	r2, [pc, #160]	; (80115c8 <readCanToStructs+0x32c>)
 8011526:	011b      	lsls	r3, r3, #4
 8011528:	4413      	add	r3, r2
 801152a:	3304      	adds	r3, #4
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011532:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011536:	2b00      	cmp	r3, #0
 8011538:	d110      	bne.n	801155c <readCanToStructs+0x2c0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801153a:	2206      	movs	r2, #6
 801153c:	2100      	movs	r1, #0
 801153e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011540:	f013 fe26 	bl	8025190 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011548:	4a21      	ldr	r2, [pc, #132]	; (80115d0 <readCanToStructs+0x334>)
 801154a:	f240 4112 	movw	r1, #1042	; 0x412
 801154e:	fb01 f303 	mul.w	r3, r1, r3
 8011552:	4413      	add	r3, r2
 8011554:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011558:	2200      	movs	r2, #0
 801155a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 801155c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011560:	4a1b      	ldr	r2, [pc, #108]	; (80115d0 <readCanToStructs+0x334>)
 8011562:	f240 4112 	movw	r1, #1042	; 0x412
 8011566:	fb01 f303 	mul.w	r3, r1, r3
 801156a:	4413      	add	r3, r2
 801156c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011576:	429a      	cmp	r2, r3
 8011578:	d015      	beq.n	80115a6 <readCanToStructs+0x30a>
					printf("GPS2 Packet Seq no MisMatch\n");
 801157a:	481a      	ldr	r0, [pc, #104]	; (80115e4 <readCanToStructs+0x348>)
 801157c:	f013 ff8c 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011580:	2206      	movs	r2, #6
 8011582:	2100      	movs	r1, #0
 8011584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011586:	f013 fe03 	bl	8025190 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801158a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801158e:	4a10      	ldr	r2, [pc, #64]	; (80115d0 <readCanToStructs+0x334>)
 8011590:	f240 4112 	movw	r1, #1042	; 0x412
 8011594:	fb01 f303 	mul.w	r3, r1, r3
 8011598:	4413      	add	r3, r2
 801159a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801159e:	2200      	movs	r2, #0
 80115a0:	701a      	strb	r2, [r3, #0]
					break;
 80115a2:	f000 bfb1 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 80115a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80115aa:	4613      	mov	r3, r2
 80115ac:	00db      	lsls	r3, r3, #3
 80115ae:	1a9b      	subs	r3, r3, r2
 80115b0:	461a      	mov	r2, r3
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	4413      	add	r3, r2
 80115b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80115b8:	2301      	movs	r3, #1
 80115ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80115be:	e02a      	b.n	8011616 <readCanToStructs+0x37a>
 80115c0:	20000304 	.word	0x20000304
 80115c4:	20001d88 	.word	0x20001d88
 80115c8:	20005f4c 	.word	0x20005f4c
 80115cc:	20002cd0 	.word	0x20002cd0
 80115d0:	20005728 	.word	0x20005728
 80115d4:	080299cc 	.word	0x080299cc
 80115d8:	20002cc8 	.word	0x20002cc8
 80115dc:	200009b5 	.word	0x200009b5
 80115e0:	080299e8 	.word	0x080299e8
 80115e4:	080299fc 	.word	0x080299fc
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80115e8:	4bb6      	ldr	r3, [pc, #728]	; (80118c4 <readCanToStructs+0x628>)
 80115ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115ee:	885b      	ldrh	r3, [r3, #2]
 80115f0:	461a      	mov	r2, r3
 80115f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115f6:	49b3      	ldr	r1, [pc, #716]	; (80118c4 <readCanToStructs+0x628>)
 80115f8:	0112      	lsls	r2, r2, #4
 80115fa:	440a      	add	r2, r1
 80115fc:	4413      	add	r3, r2
 80115fe:	3304      	adds	r3, #4
 8011600:	781a      	ldrb	r2, [r3, #0]
 8011602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011604:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011608:	3301      	adds	r3, #1
 801160a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801160c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011610:	3301      	adds	r3, #1
 8011612:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011616:	4bab      	ldr	r3, [pc, #684]	; (80118c4 <readCanToStructs+0x628>)
 8011618:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801161c:	885b      	ldrh	r3, [r3, #2]
 801161e:	4aa9      	ldr	r2, [pc, #676]	; (80118c4 <readCanToStructs+0x628>)
 8011620:	011b      	lsls	r3, r3, #4
 8011622:	4413      	add	r3, r2
 8011624:	330c      	adds	r3, #12
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801162c:	429a      	cmp	r2, r3
 801162e:	d3db      	bcc.n	80115e8 <readCanToStructs+0x34c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011634:	4aa4      	ldr	r2, [pc, #656]	; (80118c8 <readCanToStructs+0x62c>)
 8011636:	f240 4112 	movw	r1, #1042	; 0x412
 801163a:	fb01 f303 	mul.w	r3, r1, r3
 801163e:	4413      	add	r3, r2
 8011640:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	461a      	mov	r2, r3
 8011648:	4613      	mov	r3, r2
 801164a:	00db      	lsls	r3, r3, #3
 801164c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801164e:	4b9d      	ldr	r3, [pc, #628]	; (80118c4 <readCanToStructs+0x628>)
 8011650:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011654:	885b      	ldrh	r3, [r3, #2]
 8011656:	499b      	ldr	r1, [pc, #620]	; (80118c4 <readCanToStructs+0x628>)
 8011658:	011b      	lsls	r3, r3, #4
 801165a:	440b      	add	r3, r1
 801165c:	330c      	adds	r3, #12
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	3b01      	subs	r3, #1
 8011662:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011664:	2b05      	cmp	r3, #5
 8011666:	d91c      	bls.n	80116a2 <readCanToStructs+0x406>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011668:	4b98      	ldr	r3, [pc, #608]	; (80118cc <readCanToStructs+0x630>)
 801166a:	4a99      	ldr	r2, [pc, #612]	; (80118d0 <readCanToStructs+0x634>)
 801166c:	6811      	ldr	r1, [r2, #0]
 801166e:	6019      	str	r1, [r3, #0]
 8011670:	8892      	ldrh	r2, [r2, #4]
 8011672:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011674:	4b97      	ldr	r3, [pc, #604]	; (80118d4 <readCanToStructs+0x638>)
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d102      	bne.n	8011682 <readCanToStructs+0x3e6>
						printf("GPS2_PACKET_RECEIVED\n");
 801167c:	4896      	ldr	r0, [pc, #600]	; (80118d8 <readCanToStructs+0x63c>)
 801167e:	f013 ff0b 	bl	8025498 <puts>
					Write_RTC();
 8011682:	f7fa fdd7 	bl	800c234 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801168a:	4a8f      	ldr	r2, [pc, #572]	; (80118c8 <readCanToStructs+0x62c>)
 801168c:	f240 4112 	movw	r1, #1042	; 0x412
 8011690:	fb01 f303 	mul.w	r3, r1, r3
 8011694:	4413      	add	r3, r2
 8011696:	f203 2313 	addw	r3, r3, #531	; 0x213
 801169a:	2200      	movs	r2, #0
 801169c:	701a      	strb	r2, [r3, #0]
				break;
 801169e:	f000 bf33 	b.w	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80116a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116a6:	4a88      	ldr	r2, [pc, #544]	; (80118c8 <readCanToStructs+0x62c>)
 80116a8:	f240 4112 	movw	r1, #1042	; 0x412
 80116ac:	fb01 f303 	mul.w	r3, r1, r3
 80116b0:	4413      	add	r3, r2
 80116b2:	f203 2312 	addw	r3, r3, #530	; 0x212
 80116b6:	2201      	movs	r2, #1
 80116b8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80116ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116be:	4982      	ldr	r1, [pc, #520]	; (80118c8 <readCanToStructs+0x62c>)
 80116c0:	f240 4212 	movw	r2, #1042	; 0x412
 80116c4:	fb03 f202 	mul.w	r2, r3, r2
 80116c8:	440a      	add	r2, r1
 80116ca:	f202 2213 	addw	r2, r2, #531	; 0x213
 80116ce:	7812      	ldrb	r2, [r2, #0]
 80116d0:	3201      	adds	r2, #1
 80116d2:	b2d0      	uxtb	r0, r2
 80116d4:	4a7c      	ldr	r2, [pc, #496]	; (80118c8 <readCanToStructs+0x62c>)
 80116d6:	f240 4112 	movw	r1, #1042	; 0x412
 80116da:	fb01 f303 	mul.w	r3, r1, r3
 80116de:	4413      	add	r3, r2
 80116e0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80116e4:	4602      	mov	r2, r0
 80116e6:	701a      	strb	r2, [r3, #0]
				break;
 80116e8:	f000 bf0e 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80116ec:	4b7b      	ldr	r3, [pc, #492]	; (80118dc <readCanToStructs+0x640>)
 80116ee:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80116f0:	4b74      	ldr	r3, [pc, #464]	; (80118c4 <readCanToStructs+0x628>)
 80116f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116f6:	885b      	ldrh	r3, [r3, #2]
 80116f8:	4a72      	ldr	r2, [pc, #456]	; (80118c4 <readCanToStructs+0x628>)
 80116fa:	011b      	lsls	r3, r3, #4
 80116fc:	4413      	add	r3, r2
 80116fe:	3304      	adds	r3, #4
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011706:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801170a:	2b00      	cmp	r3, #0
 801170c:	d110      	bne.n	8011730 <readCanToStructs+0x494>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801170e:	2218      	movs	r2, #24
 8011710:	2100      	movs	r1, #0
 8011712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011714:	f013 fd3c 	bl	8025190 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801171c:	4a6a      	ldr	r2, [pc, #424]	; (80118c8 <readCanToStructs+0x62c>)
 801171e:	f240 4112 	movw	r1, #1042	; 0x412
 8011722:	fb01 f303 	mul.w	r3, r1, r3
 8011726:	4413      	add	r3, r2
 8011728:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801172c:	2200      	movs	r2, #0
 801172e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8011730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011734:	4a64      	ldr	r2, [pc, #400]	; (80118c8 <readCanToStructs+0x62c>)
 8011736:	f240 4112 	movw	r1, #1042	; 0x412
 801173a:	fb01 f303 	mul.w	r3, r1, r3
 801173e:	4413      	add	r3, r2
 8011740:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801174a:	429a      	cmp	r2, r3
 801174c:	d015      	beq.n	801177a <readCanToStructs+0x4de>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 801174e:	4864      	ldr	r0, [pc, #400]	; (80118e0 <readCanToStructs+0x644>)
 8011750:	f013 fea2 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011754:	2218      	movs	r2, #24
 8011756:	2100      	movs	r1, #0
 8011758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801175a:	f013 fd19 	bl	8025190 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801175e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011762:	4a59      	ldr	r2, [pc, #356]	; (80118c8 <readCanToStructs+0x62c>)
 8011764:	f240 4112 	movw	r1, #1042	; 0x412
 8011768:	fb01 f303 	mul.w	r3, r1, r3
 801176c:	4413      	add	r3, r2
 801176e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
					break;
 8011776:	f000 bec7 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 801177a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801177e:	4613      	mov	r3, r2
 8011780:	00db      	lsls	r3, r3, #3
 8011782:	1a9b      	subs	r3, r3, r2
 8011784:	461a      	mov	r2, r3
 8011786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011788:	4413      	add	r3, r2
 801178a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801178c:	2301      	movs	r3, #1
 801178e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011792:	e016      	b.n	80117c2 <readCanToStructs+0x526>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011794:	4b4b      	ldr	r3, [pc, #300]	; (80118c4 <readCanToStructs+0x628>)
 8011796:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801179a:	885b      	ldrh	r3, [r3, #2]
 801179c:	461a      	mov	r2, r3
 801179e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117a2:	4948      	ldr	r1, [pc, #288]	; (80118c4 <readCanToStructs+0x628>)
 80117a4:	0112      	lsls	r2, r2, #4
 80117a6:	440a      	add	r2, r1
 80117a8:	4413      	add	r3, r2
 80117aa:	3304      	adds	r3, #4
 80117ac:	781a      	ldrb	r2, [r3, #0]
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80117b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b4:	3301      	adds	r3, #1
 80117b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80117b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117bc:	3301      	adds	r3, #1
 80117be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80117c2:	4b40      	ldr	r3, [pc, #256]	; (80118c4 <readCanToStructs+0x628>)
 80117c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80117c8:	885b      	ldrh	r3, [r3, #2]
 80117ca:	4a3e      	ldr	r2, [pc, #248]	; (80118c4 <readCanToStructs+0x628>)
 80117cc:	011b      	lsls	r3, r3, #4
 80117ce:	4413      	add	r3, r2
 80117d0:	330c      	adds	r3, #12
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80117d8:	429a      	cmp	r2, r3
 80117da:	d3db      	bcc.n	8011794 <readCanToStructs+0x4f8>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80117dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117e0:	4a39      	ldr	r2, [pc, #228]	; (80118c8 <readCanToStructs+0x62c>)
 80117e2:	f240 4112 	movw	r1, #1042	; 0x412
 80117e6:	fb01 f303 	mul.w	r3, r1, r3
 80117ea:	4413      	add	r3, r2
 80117ec:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	461a      	mov	r2, r3
 80117f4:	4613      	mov	r3, r2
 80117f6:	00db      	lsls	r3, r3, #3
 80117f8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 80117fa:	4b32      	ldr	r3, [pc, #200]	; (80118c4 <readCanToStructs+0x628>)
 80117fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011800:	885b      	ldrh	r3, [r3, #2]
 8011802:	4930      	ldr	r1, [pc, #192]	; (80118c4 <readCanToStructs+0x628>)
 8011804:	011b      	lsls	r3, r3, #4
 8011806:	440b      	add	r3, r1
 8011808:	330c      	adds	r3, #12
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	3b01      	subs	r3, #1
 801180e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011810:	2b17      	cmp	r3, #23
 8011812:	d932      	bls.n	801187a <readCanToStructs+0x5de>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8011814:	4b31      	ldr	r3, [pc, #196]	; (80118dc <readCanToStructs+0x640>)
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	461a      	mov	r2, r3
 801181a:	4613      	mov	r3, r2
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	4413      	add	r3, r2
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	4a30      	ldr	r2, [pc, #192]	; (80118e4 <readCanToStructs+0x648>)
 8011824:	4413      	add	r3, r2
 8011826:	2218      	movs	r2, #24
 8011828:	492c      	ldr	r1, [pc, #176]	; (80118dc <readCanToStructs+0x640>)
 801182a:	4618      	mov	r0, r3
 801182c:	f013 fc88 	bl	8025140 <memcpy>
					if(Debug_flag == 1)
 8011830:	4b28      	ldr	r3, [pc, #160]	; (80118d4 <readCanToStructs+0x638>)
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	2b01      	cmp	r3, #1
 8011836:	d105      	bne.n	8011844 <readCanToStructs+0x5a8>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011838:	4b28      	ldr	r3, [pc, #160]	; (80118dc <readCanToStructs+0x640>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	4619      	mov	r1, r3
 801183e:	482a      	ldr	r0, [pc, #168]	; (80118e8 <readCanToStructs+0x64c>)
 8011840:	f013 fd8e 	bl	8025360 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8011844:	4b29      	ldr	r3, [pc, #164]	; (80118ec <readCanToStructs+0x650>)
 8011846:	2201      	movs	r2, #1
 8011848:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 801184a:	f006 fd7f 	bl	801834c <HAL_GetTick>
 801184e:	4603      	mov	r3, r0
 8011850:	4a27      	ldr	r2, [pc, #156]	; (80118f0 <readCanToStructs+0x654>)
 8011852:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011854:	4b21      	ldr	r3, [pc, #132]	; (80118dc <readCanToStructs+0x640>)
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	4618      	mov	r0, r3
 801185a:	f7f6 fc19 	bl	8008090 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801185e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011862:	4a19      	ldr	r2, [pc, #100]	; (80118c8 <readCanToStructs+0x62c>)
 8011864:	f240 4112 	movw	r1, #1042	; 0x412
 8011868:	fb01 f303 	mul.w	r3, r1, r3
 801186c:	4413      	add	r3, r2
 801186e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011872:	2200      	movs	r2, #0
 8011874:	701a      	strb	r2, [r3, #0]
				break;
 8011876:	f000 be47 	b.w	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801187a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801187e:	4a12      	ldr	r2, [pc, #72]	; (80118c8 <readCanToStructs+0x62c>)
 8011880:	f240 4112 	movw	r1, #1042	; 0x412
 8011884:	fb01 f303 	mul.w	r3, r1, r3
 8011888:	4413      	add	r3, r2
 801188a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801188e:	2201      	movs	r2, #1
 8011890:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8011892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011896:	490c      	ldr	r1, [pc, #48]	; (80118c8 <readCanToStructs+0x62c>)
 8011898:	f240 4212 	movw	r2, #1042	; 0x412
 801189c:	fb03 f202 	mul.w	r2, r3, r2
 80118a0:	440a      	add	r2, r1
 80118a2:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80118a6:	7812      	ldrb	r2, [r2, #0]
 80118a8:	3201      	adds	r2, #1
 80118aa:	b2d0      	uxtb	r0, r2
 80118ac:	4a06      	ldr	r2, [pc, #24]	; (80118c8 <readCanToStructs+0x62c>)
 80118ae:	f240 4112 	movw	r1, #1042	; 0x412
 80118b2:	fb01 f303 	mul.w	r3, r1, r3
 80118b6:	4413      	add	r3, r2
 80118b8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80118bc:	4602      	mov	r2, r0
 80118be:	701a      	strb	r2, [r3, #0]
				break;
 80118c0:	f000 be22 	b.w	8012508 <readCanToStructs+0x126c>
 80118c4:	20005f4c 	.word	0x20005f4c
 80118c8:	20005728 	.word	0x20005728
 80118cc:	20002cc8 	.word	0x20002cc8
 80118d0:	20002cd0 	.word	0x20002cd0
 80118d4:	200009b5 	.word	0x200009b5
 80118d8:	08029a18 	.word	0x08029a18
 80118dc:	20001c98 	.word	0x20001c98
 80118e0:	08029a30 	.word	0x08029a30
 80118e4:	20001b90 	.word	0x20001b90
 80118e8:	08029a54 	.word	0x08029a54
 80118ec:	20000108 	.word	0x20000108
 80118f0:	200011b0 	.word	0x200011b0
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80118f4:	4b9f      	ldr	r3, [pc, #636]	; (8011b74 <readCanToStructs+0x8d8>)
 80118f6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80118f8:	4b9f      	ldr	r3, [pc, #636]	; (8011b78 <readCanToStructs+0x8dc>)
 80118fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118fe:	885b      	ldrh	r3, [r3, #2]
 8011900:	4a9d      	ldr	r2, [pc, #628]	; (8011b78 <readCanToStructs+0x8dc>)
 8011902:	011b      	lsls	r3, r3, #4
 8011904:	4413      	add	r3, r2
 8011906:	3304      	adds	r3, #4
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801190e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011912:	2b00      	cmp	r3, #0
 8011914:	d110      	bne.n	8011938 <readCanToStructs+0x69c>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011916:	2218      	movs	r2, #24
 8011918:	2100      	movs	r1, #0
 801191a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801191c:	f013 fc38 	bl	8025190 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011924:	4a95      	ldr	r2, [pc, #596]	; (8011b7c <readCanToStructs+0x8e0>)
 8011926:	f240 4112 	movw	r1, #1042	; 0x412
 801192a:	fb01 f303 	mul.w	r3, r1, r3
 801192e:	4413      	add	r3, r2
 8011930:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011934:	2200      	movs	r2, #0
 8011936:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8011938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801193c:	4a8f      	ldr	r2, [pc, #572]	; (8011b7c <readCanToStructs+0x8e0>)
 801193e:	f240 4112 	movw	r1, #1042	; 0x412
 8011942:	fb01 f303 	mul.w	r3, r1, r3
 8011946:	4413      	add	r3, r2
 8011948:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011952:	429a      	cmp	r2, r3
 8011954:	d015      	beq.n	8011982 <readCanToStructs+0x6e6>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8011956:	488a      	ldr	r0, [pc, #552]	; (8011b80 <readCanToStructs+0x8e4>)
 8011958:	f013 fd9e 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801195c:	2218      	movs	r2, #24
 801195e:	2100      	movs	r1, #0
 8011960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011962:	f013 fc15 	bl	8025190 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801196a:	4a84      	ldr	r2, [pc, #528]	; (8011b7c <readCanToStructs+0x8e0>)
 801196c:	f240 4112 	movw	r1, #1042	; 0x412
 8011970:	fb01 f303 	mul.w	r3, r1, r3
 8011974:	4413      	add	r3, r2
 8011976:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801197a:	2200      	movs	r2, #0
 801197c:	701a      	strb	r2, [r3, #0]
					break;
 801197e:	f000 bdc3 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011982:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011986:	4613      	mov	r3, r2
 8011988:	00db      	lsls	r3, r3, #3
 801198a:	1a9b      	subs	r3, r3, r2
 801198c:	461a      	mov	r2, r3
 801198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011990:	4413      	add	r3, r2
 8011992:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011994:	2301      	movs	r3, #1
 8011996:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801199a:	e016      	b.n	80119ca <readCanToStructs+0x72e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801199c:	4b76      	ldr	r3, [pc, #472]	; (8011b78 <readCanToStructs+0x8dc>)
 801199e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119a2:	885b      	ldrh	r3, [r3, #2]
 80119a4:	461a      	mov	r2, r3
 80119a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119aa:	4973      	ldr	r1, [pc, #460]	; (8011b78 <readCanToStructs+0x8dc>)
 80119ac:	0112      	lsls	r2, r2, #4
 80119ae:	440a      	add	r2, r1
 80119b0:	4413      	add	r3, r2
 80119b2:	3304      	adds	r3, #4
 80119b4:	781a      	ldrb	r2, [r3, #0]
 80119b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80119ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119bc:	3301      	adds	r3, #1
 80119be:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80119c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119c4:	3301      	adds	r3, #1
 80119c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119ca:	4b6b      	ldr	r3, [pc, #428]	; (8011b78 <readCanToStructs+0x8dc>)
 80119cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119d0:	885b      	ldrh	r3, [r3, #2]
 80119d2:	4a69      	ldr	r2, [pc, #420]	; (8011b78 <readCanToStructs+0x8dc>)
 80119d4:	011b      	lsls	r3, r3, #4
 80119d6:	4413      	add	r3, r2
 80119d8:	330c      	adds	r3, #12
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d3db      	bcc.n	801199c <readCanToStructs+0x700>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80119e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119e8:	4a64      	ldr	r2, [pc, #400]	; (8011b7c <readCanToStructs+0x8e0>)
 80119ea:	f240 4112 	movw	r1, #1042	; 0x412
 80119ee:	fb01 f303 	mul.w	r3, r1, r3
 80119f2:	4413      	add	r3, r2
 80119f4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	461a      	mov	r2, r3
 80119fc:	4613      	mov	r3, r2
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8011a02:	4b5d      	ldr	r3, [pc, #372]	; (8011b78 <readCanToStructs+0x8dc>)
 8011a04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a08:	885b      	ldrh	r3, [r3, #2]
 8011a0a:	495b      	ldr	r1, [pc, #364]	; (8011b78 <readCanToStructs+0x8dc>)
 8011a0c:	011b      	lsls	r3, r3, #4
 8011a0e:	440b      	add	r3, r1
 8011a10:	330c      	adds	r3, #12
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011a18:	2b17      	cmp	r3, #23
 8011a1a:	d932      	bls.n	8011a82 <readCanToStructs+0x7e6>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8011a1c:	4b55      	ldr	r3, [pc, #340]	; (8011b74 <readCanToStructs+0x8d8>)
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	461a      	mov	r2, r3
 8011a22:	4613      	mov	r3, r2
 8011a24:	005b      	lsls	r3, r3, #1
 8011a26:	4413      	add	r3, r2
 8011a28:	00db      	lsls	r3, r3, #3
 8011a2a:	4a56      	ldr	r2, [pc, #344]	; (8011b84 <readCanToStructs+0x8e8>)
 8011a2c:	4413      	add	r3, r2
 8011a2e:	2218      	movs	r2, #24
 8011a30:	4950      	ldr	r1, [pc, #320]	; (8011b74 <readCanToStructs+0x8d8>)
 8011a32:	4618      	mov	r0, r3
 8011a34:	f013 fb84 	bl	8025140 <memcpy>
					if(Debug_flag == 1)
 8011a38:	4b53      	ldr	r3, [pc, #332]	; (8011b88 <readCanToStructs+0x8ec>)
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d105      	bne.n	8011a4c <readCanToStructs+0x7b0>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011a40:	4b4c      	ldr	r3, [pc, #304]	; (8011b74 <readCanToStructs+0x8d8>)
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	4619      	mov	r1, r3
 8011a46:	4851      	ldr	r0, [pc, #324]	; (8011b8c <readCanToStructs+0x8f0>)
 8011a48:	f013 fc8a 	bl	8025360 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8011a4c:	f006 fc7e 	bl	801834c <HAL_GetTick>
 8011a50:	4603      	mov	r3, r0
 8011a52:	4a4f      	ldr	r2, [pc, #316]	; (8011b90 <readCanToStructs+0x8f4>)
 8011a54:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 8011a56:	4b4f      	ldr	r3, [pc, #316]	; (8011b94 <readCanToStructs+0x8f8>)
 8011a58:	2201      	movs	r2, #1
 8011a5a:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011a5c:	4b45      	ldr	r3, [pc, #276]	; (8011b74 <readCanToStructs+0x8d8>)
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f6 fb15 	bl	8008090 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a6a:	4a44      	ldr	r2, [pc, #272]	; (8011b7c <readCanToStructs+0x8e0>)
 8011a6c:	f240 4112 	movw	r1, #1042	; 0x412
 8011a70:	fb01 f303 	mul.w	r3, r1, r3
 8011a74:	4413      	add	r3, r2
 8011a76:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	701a      	strb	r2, [r3, #0]
				break;
 8011a7e:	f000 bd43 	b.w	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8011a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a86:	4a3d      	ldr	r2, [pc, #244]	; (8011b7c <readCanToStructs+0x8e0>)
 8011a88:	f240 4112 	movw	r1, #1042	; 0x412
 8011a8c:	fb01 f303 	mul.w	r3, r1, r3
 8011a90:	4413      	add	r3, r2
 8011a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011a96:	2201      	movs	r2, #1
 8011a98:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a9e:	4937      	ldr	r1, [pc, #220]	; (8011b7c <readCanToStructs+0x8e0>)
 8011aa0:	f240 4212 	movw	r2, #1042	; 0x412
 8011aa4:	fb03 f202 	mul.w	r2, r3, r2
 8011aa8:	440a      	add	r2, r1
 8011aaa:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011aae:	7812      	ldrb	r2, [r2, #0]
 8011ab0:	3201      	adds	r2, #1
 8011ab2:	b2d0      	uxtb	r0, r2
 8011ab4:	4a31      	ldr	r2, [pc, #196]	; (8011b7c <readCanToStructs+0x8e0>)
 8011ab6:	f240 4112 	movw	r1, #1042	; 0x412
 8011aba:	fb01 f303 	mul.w	r3, r1, r3
 8011abe:	4413      	add	r3, r2
 8011ac0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	701a      	strb	r2, [r3, #0]
				break;
 8011ac8:	f000 bd1e 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8011acc:	4b32      	ldr	r3, [pc, #200]	; (8011b98 <readCanToStructs+0x8fc>)
 8011ace:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011ad0:	4b29      	ldr	r3, [pc, #164]	; (8011b78 <readCanToStructs+0x8dc>)
 8011ad2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ad6:	885b      	ldrh	r3, [r3, #2]
 8011ad8:	4a27      	ldr	r2, [pc, #156]	; (8011b78 <readCanToStructs+0x8dc>)
 8011ada:	011b      	lsls	r3, r3, #4
 8011adc:	4413      	add	r3, r2
 8011ade:	3304      	adds	r3, #4
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011ae6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d110      	bne.n	8011b10 <readCanToStructs+0x874>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011aee:	2246      	movs	r2, #70	; 0x46
 8011af0:	2100      	movs	r1, #0
 8011af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011af4:	f013 fb4c 	bl	8025190 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011afc:	4a1f      	ldr	r2, [pc, #124]	; (8011b7c <readCanToStructs+0x8e0>)
 8011afe:	f240 4112 	movw	r1, #1042	; 0x412
 8011b02:	fb01 f303 	mul.w	r3, r1, r3
 8011b06:	4413      	add	r3, r2
 8011b08:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8011b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b14:	4a19      	ldr	r2, [pc, #100]	; (8011b7c <readCanToStructs+0x8e0>)
 8011b16:	f240 4112 	movw	r1, #1042	; 0x412
 8011b1a:	fb01 f303 	mul.w	r3, r1, r3
 8011b1e:	4413      	add	r3, r2
 8011b20:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d015      	beq.n	8011b5a <readCanToStructs+0x8be>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8011b2e:	481b      	ldr	r0, [pc, #108]	; (8011b9c <readCanToStructs+0x900>)
 8011b30:	f013 fcb2 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011b34:	2246      	movs	r2, #70	; 0x46
 8011b36:	2100      	movs	r1, #0
 8011b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b3a:	f013 fb29 	bl	8025190 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b42:	4a0e      	ldr	r2, [pc, #56]	; (8011b7c <readCanToStructs+0x8e0>)
 8011b44:	f240 4112 	movw	r1, #1042	; 0x412
 8011b48:	fb01 f303 	mul.w	r3, r1, r3
 8011b4c:	4413      	add	r3, r2
 8011b4e:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011b52:	2200      	movs	r2, #0
 8011b54:	701a      	strb	r2, [r3, #0]
					break;
 8011b56:	f000 bcd7 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011b5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011b5e:	4613      	mov	r3, r2
 8011b60:	00db      	lsls	r3, r3, #3
 8011b62:	1a9b      	subs	r3, r3, r2
 8011b64:	461a      	mov	r2, r3
 8011b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b68:	4413      	add	r3, r2
 8011b6a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b72:	e02c      	b.n	8011bce <readCanToStructs+0x932>
 8011b74:	20001c98 	.word	0x20001c98
 8011b78:	20005f4c 	.word	0x20005f4c
 8011b7c:	20005728 	.word	0x20005728
 8011b80:	08029a64 	.word	0x08029a64
 8011b84:	20001b90 	.word	0x20001b90
 8011b88:	200009b5 	.word	0x200009b5
 8011b8c:	08029a88 	.word	0x08029a88
 8011b90:	200011b0 	.word	0x200011b0
 8011b94:	20000108 	.word	0x20000108
 8011b98:	20001d40 	.word	0x20001d40
 8011b9c:	08029a98 	.word	0x08029a98
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011ba0:	4bb9      	ldr	r3, [pc, #740]	; (8011e88 <readCanToStructs+0xbec>)
 8011ba2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ba6:	885b      	ldrh	r3, [r3, #2]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bae:	49b6      	ldr	r1, [pc, #728]	; (8011e88 <readCanToStructs+0xbec>)
 8011bb0:	0112      	lsls	r2, r2, #4
 8011bb2:	440a      	add	r2, r1
 8011bb4:	4413      	add	r3, r2
 8011bb6:	3304      	adds	r3, #4
 8011bb8:	781a      	ldrb	r2, [r3, #0]
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bc8:	3301      	adds	r3, #1
 8011bca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bce:	4bae      	ldr	r3, [pc, #696]	; (8011e88 <readCanToStructs+0xbec>)
 8011bd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bd4:	885b      	ldrh	r3, [r3, #2]
 8011bd6:	4aac      	ldr	r2, [pc, #688]	; (8011e88 <readCanToStructs+0xbec>)
 8011bd8:	011b      	lsls	r3, r3, #4
 8011bda:	4413      	add	r3, r2
 8011bdc:	330c      	adds	r3, #12
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d3db      	bcc.n	8011ba0 <readCanToStructs+0x904>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011be8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bec:	4aa7      	ldr	r2, [pc, #668]	; (8011e8c <readCanToStructs+0xbf0>)
 8011bee:	f240 4112 	movw	r1, #1042	; 0x412
 8011bf2:	fb01 f303 	mul.w	r3, r1, r3
 8011bf6:	4413      	add	r3, r2
 8011bf8:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	461a      	mov	r2, r3
 8011c00:	4613      	mov	r3, r2
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8011c06:	4ba0      	ldr	r3, [pc, #640]	; (8011e88 <readCanToStructs+0xbec>)
 8011c08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c0c:	885b      	ldrh	r3, [r3, #2]
 8011c0e:	499e      	ldr	r1, [pc, #632]	; (8011e88 <readCanToStructs+0xbec>)
 8011c10:	011b      	lsls	r3, r3, #4
 8011c12:	440b      	add	r3, r1
 8011c14:	330c      	adds	r3, #12
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011c1c:	2b45      	cmp	r3, #69	; 0x45
 8011c1e:	d93d      	bls.n	8011c9c <readCanToStructs+0xa00>
					if(Debug_flag == 1)
 8011c20:	4b9b      	ldr	r3, [pc, #620]	; (8011e90 <readCanToStructs+0xbf4>)
 8011c22:	781b      	ldrb	r3, [r3, #0]
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	d102      	bne.n	8011c2e <readCanToStructs+0x992>
						printf("RCV V-Message-1\n");
 8011c28:	489a      	ldr	r0, [pc, #616]	; (8011e94 <readCanToStructs+0xbf8>)
 8011c2a:	f013 fc35 	bl	8025498 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011c2e:	2246      	movs	r2, #70	; 0x46
 8011c30:	2100      	movs	r1, #0
 8011c32:	4899      	ldr	r0, [pc, #612]	; (8011e98 <readCanToStructs+0xbfc>)
 8011c34:	f013 faac 	bl	8025190 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011c38:	4a97      	ldr	r2, [pc, #604]	; (8011e98 <readCanToStructs+0xbfc>)
 8011c3a:	4b98      	ldr	r3, [pc, #608]	; (8011e9c <readCanToStructs+0xc00>)
 8011c3c:	4610      	mov	r0, r2
 8011c3e:	4619      	mov	r1, r3
 8011c40:	2346      	movs	r3, #70	; 0x46
 8011c42:	461a      	mov	r2, r3
 8011c44:	f013 fa7c 	bl	8025140 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011c48:	4b95      	ldr	r3, [pc, #596]	; (8011ea0 <readCanToStructs+0xc04>)
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8011c4e:	4b92      	ldr	r3, [pc, #584]	; (8011e98 <readCanToStructs+0xbfc>)
 8011c50:	881b      	ldrh	r3, [r3, #0]
 8011c52:	4619      	mov	r1, r3
 8011c54:	4a93      	ldr	r2, [pc, #588]	; (8011ea4 <readCanToStructs+0xc08>)
 8011c56:	460b      	mov	r3, r1
 8011c58:	005b      	lsls	r3, r3, #1
 8011c5a:	440b      	add	r3, r1
 8011c5c:	00db      	lsls	r3, r3, #3
 8011c5e:	4413      	add	r3, r2
 8011c60:	3304      	adds	r3, #4
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d00b      	beq.n	8011c80 <readCanToStructs+0x9e4>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8011c68:	4b8b      	ldr	r3, [pc, #556]	; (8011e98 <readCanToStructs+0xbfc>)
 8011c6a:	889b      	ldrh	r3, [r3, #4]
 8011c6c:	b2d9      	uxtb	r1, r3
 8011c6e:	4b8a      	ldr	r3, [pc, #552]	; (8011e98 <readCanToStructs+0xbfc>)
 8011c70:	881b      	ldrh	r3, [r3, #0]
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	4b88      	ldr	r3, [pc, #544]	; (8011e98 <readCanToStructs+0xbfc>)
 8011c76:	885b      	ldrh	r3, [r3, #2]
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	488b      	ldr	r0, [pc, #556]	; (8011ea8 <readCanToStructs+0xc0c>)
 8011c7c:	f7f2 fdb6 	bl	80047ec <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c84:	4a81      	ldr	r2, [pc, #516]	; (8011e8c <readCanToStructs+0xbf0>)
 8011c86:	f240 4112 	movw	r1, #1042	; 0x412
 8011c8a:	fb01 f303 	mul.w	r3, r1, r3
 8011c8e:	4413      	add	r3, r2
 8011c90:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011c94:	2200      	movs	r2, #0
 8011c96:	701a      	strb	r2, [r3, #0]
				break;
 8011c98:	f000 bc36 	b.w	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 8011c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ca0:	4a7a      	ldr	r2, [pc, #488]	; (8011e8c <readCanToStructs+0xbf0>)
 8011ca2:	f240 4112 	movw	r1, #1042	; 0x412
 8011ca6:	fb01 f303 	mul.w	r3, r1, r3
 8011caa:	4413      	add	r3, r2
 8011cac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8011cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cb8:	4974      	ldr	r1, [pc, #464]	; (8011e8c <readCanToStructs+0xbf0>)
 8011cba:	f240 4212 	movw	r2, #1042	; 0x412
 8011cbe:	fb03 f202 	mul.w	r2, r3, r2
 8011cc2:	440a      	add	r2, r1
 8011cc4:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8011cc8:	7812      	ldrb	r2, [r2, #0]
 8011cca:	3201      	adds	r2, #1
 8011ccc:	b2d0      	uxtb	r0, r2
 8011cce:	4a6f      	ldr	r2, [pc, #444]	; (8011e8c <readCanToStructs+0xbf0>)
 8011cd0:	f240 4112 	movw	r1, #1042	; 0x412
 8011cd4:	fb01 f303 	mul.w	r3, r1, r3
 8011cd8:	4413      	add	r3, r2
 8011cda:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011cde:	4602      	mov	r2, r0
 8011ce0:	701a      	strb	r2, [r3, #0]
				break;
 8011ce2:	f000 bc11 	b.w	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8011ce6:	4b6d      	ldr	r3, [pc, #436]	; (8011e9c <readCanToStructs+0xc00>)
 8011ce8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011cea:	4b67      	ldr	r3, [pc, #412]	; (8011e88 <readCanToStructs+0xbec>)
 8011cec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cf0:	885b      	ldrh	r3, [r3, #2]
 8011cf2:	4a65      	ldr	r2, [pc, #404]	; (8011e88 <readCanToStructs+0xbec>)
 8011cf4:	011b      	lsls	r3, r3, #4
 8011cf6:	4413      	add	r3, r2
 8011cf8:	3304      	adds	r3, #4
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011d00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d110      	bne.n	8011d2a <readCanToStructs+0xa8e>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011d08:	2246      	movs	r2, #70	; 0x46
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d0e:	f013 fa3f 	bl	8025190 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d16:	4a5d      	ldr	r2, [pc, #372]	; (8011e8c <readCanToStructs+0xbf0>)
 8011d18:	f240 4112 	movw	r1, #1042	; 0x412
 8011d1c:	fb01 f303 	mul.w	r3, r1, r3
 8011d20:	4413      	add	r3, r2
 8011d22:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011d26:	2200      	movs	r2, #0
 8011d28:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8011d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d2e:	4a57      	ldr	r2, [pc, #348]	; (8011e8c <readCanToStructs+0xbf0>)
 8011d30:	f240 4112 	movw	r1, #1042	; 0x412
 8011d34:	fb01 f303 	mul.w	r3, r1, r3
 8011d38:	4413      	add	r3, r2
 8011d3a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d014      	beq.n	8011d72 <readCanToStructs+0xad6>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8011d48:	4858      	ldr	r0, [pc, #352]	; (8011eac <readCanToStructs+0xc10>)
 8011d4a:	f013 fba5 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011d4e:	2246      	movs	r2, #70	; 0x46
 8011d50:	2100      	movs	r1, #0
 8011d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d54:	f013 fa1c 	bl	8025190 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d5c:	4a4b      	ldr	r2, [pc, #300]	; (8011e8c <readCanToStructs+0xbf0>)
 8011d5e:	f240 4112 	movw	r1, #1042	; 0x412
 8011d62:	fb01 f303 	mul.w	r3, r1, r3
 8011d66:	4413      	add	r3, r2
 8011d68:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	701a      	strb	r2, [r3, #0]
					break;
 8011d70:	e3ca      	b.n	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011d72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d76:	4613      	mov	r3, r2
 8011d78:	00db      	lsls	r3, r3, #3
 8011d7a:	1a9b      	subs	r3, r3, r2
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d80:	4413      	add	r3, r2
 8011d82:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d84:	2301      	movs	r3, #1
 8011d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d8a:	e016      	b.n	8011dba <readCanToStructs+0xb1e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011d8c:	4b3e      	ldr	r3, [pc, #248]	; (8011e88 <readCanToStructs+0xbec>)
 8011d8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d92:	885b      	ldrh	r3, [r3, #2]
 8011d94:	461a      	mov	r2, r3
 8011d96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d9a:	493b      	ldr	r1, [pc, #236]	; (8011e88 <readCanToStructs+0xbec>)
 8011d9c:	0112      	lsls	r2, r2, #4
 8011d9e:	440a      	add	r2, r1
 8011da0:	4413      	add	r3, r2
 8011da2:	3304      	adds	r3, #4
 8011da4:	781a      	ldrb	r2, [r3, #0]
 8011da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dac:	3301      	adds	r3, #1
 8011dae:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011db4:	3301      	adds	r3, #1
 8011db6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011dba:	4b33      	ldr	r3, [pc, #204]	; (8011e88 <readCanToStructs+0xbec>)
 8011dbc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dc0:	885b      	ldrh	r3, [r3, #2]
 8011dc2:	4a31      	ldr	r2, [pc, #196]	; (8011e88 <readCanToStructs+0xbec>)
 8011dc4:	011b      	lsls	r3, r3, #4
 8011dc6:	4413      	add	r3, r2
 8011dc8:	330c      	adds	r3, #12
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d3db      	bcc.n	8011d8c <readCanToStructs+0xaf0>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8011dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dd8:	4a2c      	ldr	r2, [pc, #176]	; (8011e8c <readCanToStructs+0xbf0>)
 8011dda:	f240 4112 	movw	r1, #1042	; 0x412
 8011dde:	fb01 f303 	mul.w	r3, r1, r3
 8011de2:	4413      	add	r3, r2
 8011de4:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	461a      	mov	r2, r3
 8011dec:	4613      	mov	r3, r2
 8011dee:	00db      	lsls	r3, r3, #3
 8011df0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8011df2:	4b25      	ldr	r3, [pc, #148]	; (8011e88 <readCanToStructs+0xbec>)
 8011df4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011df8:	885b      	ldrh	r3, [r3, #2]
 8011dfa:	4923      	ldr	r1, [pc, #140]	; (8011e88 <readCanToStructs+0xbec>)
 8011dfc:	011b      	lsls	r3, r3, #4
 8011dfe:	440b      	add	r3, r1
 8011e00:	330c      	adds	r3, #12
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	3b01      	subs	r3, #1
 8011e06:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8011e08:	2b45      	cmp	r3, #69	; 0x45
 8011e0a:	d953      	bls.n	8011eb4 <readCanToStructs+0xc18>
					if(Debug_flag == 1)
 8011e0c:	4b20      	ldr	r3, [pc, #128]	; (8011e90 <readCanToStructs+0xbf4>)
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d102      	bne.n	8011e1a <readCanToStructs+0xb7e>
						printf("RCV V-Message-2\n");
 8011e14:	4826      	ldr	r0, [pc, #152]	; (8011eb0 <readCanToStructs+0xc14>)
 8011e16:	f013 fb3f 	bl	8025498 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011e1a:	2246      	movs	r2, #70	; 0x46
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	481e      	ldr	r0, [pc, #120]	; (8011e98 <readCanToStructs+0xbfc>)
 8011e20:	f013 f9b6 	bl	8025190 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011e24:	4a1c      	ldr	r2, [pc, #112]	; (8011e98 <readCanToStructs+0xbfc>)
 8011e26:	4b1d      	ldr	r3, [pc, #116]	; (8011e9c <readCanToStructs+0xc00>)
 8011e28:	4610      	mov	r0, r2
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	2346      	movs	r3, #70	; 0x46
 8011e2e:	461a      	mov	r2, r3
 8011e30:	f013 f986 	bl	8025140 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011e34:	4b1a      	ldr	r3, [pc, #104]	; (8011ea0 <readCanToStructs+0xc04>)
 8011e36:	2201      	movs	r2, #1
 8011e38:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8011e3a:	4b17      	ldr	r3, [pc, #92]	; (8011e98 <readCanToStructs+0xbfc>)
 8011e3c:	881b      	ldrh	r3, [r3, #0]
 8011e3e:	4619      	mov	r1, r3
 8011e40:	4a18      	ldr	r2, [pc, #96]	; (8011ea4 <readCanToStructs+0xc08>)
 8011e42:	460b      	mov	r3, r1
 8011e44:	005b      	lsls	r3, r3, #1
 8011e46:	440b      	add	r3, r1
 8011e48:	00db      	lsls	r3, r3, #3
 8011e4a:	4413      	add	r3, r2
 8011e4c:	3303      	adds	r3, #3
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	2b01      	cmp	r3, #1
 8011e52:	d00b      	beq.n	8011e6c <readCanToStructs+0xbd0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8011e54:	4b10      	ldr	r3, [pc, #64]	; (8011e98 <readCanToStructs+0xbfc>)
 8011e56:	889b      	ldrh	r3, [r3, #4]
 8011e58:	b2d9      	uxtb	r1, r3
 8011e5a:	4b0f      	ldr	r3, [pc, #60]	; (8011e98 <readCanToStructs+0xbfc>)
 8011e5c:	881b      	ldrh	r3, [r3, #0]
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	4b0d      	ldr	r3, [pc, #52]	; (8011e98 <readCanToStructs+0xbfc>)
 8011e62:	885b      	ldrh	r3, [r3, #2]
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	4810      	ldr	r0, [pc, #64]	; (8011ea8 <readCanToStructs+0xc0c>)
 8011e68:	f7f2 fcc0 	bl	80047ec <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e70:	4a06      	ldr	r2, [pc, #24]	; (8011e8c <readCanToStructs+0xbf0>)
 8011e72:	f240 4112 	movw	r1, #1042	; 0x412
 8011e76:	fb01 f303 	mul.w	r3, r1, r3
 8011e7a:	4413      	add	r3, r2
 8011e7c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011e80:	2200      	movs	r2, #0
 8011e82:	701a      	strb	r2, [r3, #0]
				break;
 8011e84:	e340      	b.n	8012508 <readCanToStructs+0x126c>
 8011e86:	bf00      	nop
 8011e88:	20005f4c 	.word	0x20005f4c
 8011e8c:	20005728 	.word	0x20005728
 8011e90:	200009b5 	.word	0x200009b5
 8011e94:	08029abc 	.word	0x08029abc
 8011e98:	20001cf8 	.word	0x20001cf8
 8011e9c:	20001d40 	.word	0x20001d40
 8011ea0:	20000108 	.word	0x20000108
 8011ea4:	20001aa0 	.word	0x20001aa0
 8011ea8:	20001cfe 	.word	0x20001cfe
 8011eac:	08029acc 	.word	0x08029acc
 8011eb0:	08029af0 	.word	0x08029af0
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8011eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eb8:	4a9f      	ldr	r2, [pc, #636]	; (8012138 <readCanToStructs+0xe9c>)
 8011eba:	f240 4112 	movw	r1, #1042	; 0x412
 8011ebe:	fb01 f303 	mul.w	r3, r1, r3
 8011ec2:	4413      	add	r3, r2
 8011ec4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8011ec8:	2201      	movs	r2, #1
 8011eca:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8011ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ed0:	4999      	ldr	r1, [pc, #612]	; (8012138 <readCanToStructs+0xe9c>)
 8011ed2:	f240 4212 	movw	r2, #1042	; 0x412
 8011ed6:	fb03 f202 	mul.w	r2, r3, r2
 8011eda:	440a      	add	r2, r1
 8011edc:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8011ee0:	7812      	ldrb	r2, [r2, #0]
 8011ee2:	3201      	adds	r2, #1
 8011ee4:	b2d0      	uxtb	r0, r2
 8011ee6:	4a94      	ldr	r2, [pc, #592]	; (8012138 <readCanToStructs+0xe9c>)
 8011ee8:	f240 4112 	movw	r1, #1042	; 0x412
 8011eec:	fb01 f303 	mul.w	r3, r1, r3
 8011ef0:	4413      	add	r3, r2
 8011ef2:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	701a      	strb	r2, [r3, #0]
				break;
 8011efa:	e305      	b.n	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8011efc:	4b8f      	ldr	r3, [pc, #572]	; (801213c <readCanToStructs+0xea0>)
 8011efe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011f00:	4b8f      	ldr	r3, [pc, #572]	; (8012140 <readCanToStructs+0xea4>)
 8011f02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f06:	885b      	ldrh	r3, [r3, #2]
 8011f08:	4a8d      	ldr	r2, [pc, #564]	; (8012140 <readCanToStructs+0xea4>)
 8011f0a:	011b      	lsls	r3, r3, #4
 8011f0c:	4413      	add	r3, r2
 8011f0e:	3304      	adds	r3, #4
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011f16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d110      	bne.n	8011f40 <readCanToStructs+0xca4>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8011f1e:	2208      	movs	r2, #8
 8011f20:	2100      	movs	r1, #0
 8011f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f24:	f013 f934 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f2c:	4a82      	ldr	r2, [pc, #520]	; (8012138 <readCanToStructs+0xe9c>)
 8011f2e:	f240 4112 	movw	r1, #1042	; 0x412
 8011f32:	fb01 f303 	mul.w	r3, r1, r3
 8011f36:	4413      	add	r3, r2
 8011f38:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f44:	4a7c      	ldr	r2, [pc, #496]	; (8012138 <readCanToStructs+0xe9c>)
 8011f46:	f240 4112 	movw	r1, #1042	; 0x412
 8011f4a:	fb01 f303 	mul.w	r3, r1, r3
 8011f4e:	4413      	add	r3, r2
 8011f50:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d014      	beq.n	8011f88 <readCanToStructs+0xcec>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011f5e:	4879      	ldr	r0, [pc, #484]	; (8012144 <readCanToStructs+0xea8>)
 8011f60:	f013 fa9a 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8011f64:	2208      	movs	r2, #8
 8011f66:	2100      	movs	r1, #0
 8011f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f6a:	f013 f911 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f72:	4a71      	ldr	r2, [pc, #452]	; (8012138 <readCanToStructs+0xe9c>)
 8011f74:	f240 4112 	movw	r1, #1042	; 0x412
 8011f78:	fb01 f303 	mul.w	r3, r1, r3
 8011f7c:	4413      	add	r3, r2
 8011f7e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011f82:	2200      	movs	r2, #0
 8011f84:	701a      	strb	r2, [r3, #0]
					break;
 8011f86:	e2bf      	b.n	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011f88:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	00db      	lsls	r3, r3, #3
 8011f90:	1a9b      	subs	r3, r3, r2
 8011f92:	461a      	mov	r2, r3
 8011f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f96:	4413      	add	r3, r2
 8011f98:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011fa0:	e016      	b.n	8011fd0 <readCanToStructs+0xd34>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011fa2:	4b67      	ldr	r3, [pc, #412]	; (8012140 <readCanToStructs+0xea4>)
 8011fa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fa8:	885b      	ldrh	r3, [r3, #2]
 8011faa:	461a      	mov	r2, r3
 8011fac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fb0:	4963      	ldr	r1, [pc, #396]	; (8012140 <readCanToStructs+0xea4>)
 8011fb2:	0112      	lsls	r2, r2, #4
 8011fb4:	440a      	add	r2, r1
 8011fb6:	4413      	add	r3, r2
 8011fb8:	3304      	adds	r3, #4
 8011fba:	781a      	ldrb	r2, [r3, #0]
 8011fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbe:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fca:	3301      	adds	r3, #1
 8011fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011fd0:	4b5b      	ldr	r3, [pc, #364]	; (8012140 <readCanToStructs+0xea4>)
 8011fd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fd6:	885b      	ldrh	r3, [r3, #2]
 8011fd8:	4a59      	ldr	r2, [pc, #356]	; (8012140 <readCanToStructs+0xea4>)
 8011fda:	011b      	lsls	r3, r3, #4
 8011fdc:	4413      	add	r3, r2
 8011fde:	330c      	adds	r3, #12
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d3db      	bcc.n	8011fa2 <readCanToStructs+0xd06>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8011fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fee:	4a52      	ldr	r2, [pc, #328]	; (8012138 <readCanToStructs+0xe9c>)
 8011ff0:	f240 4112 	movw	r1, #1042	; 0x412
 8011ff4:	fb01 f303 	mul.w	r3, r1, r3
 8011ff8:	4413      	add	r3, r2
 8011ffa:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	461a      	mov	r2, r3
 8012002:	4613      	mov	r3, r2
 8012004:	00db      	lsls	r3, r3, #3
 8012006:	1a9a      	subs	r2, r3, r2
 8012008:	4b4d      	ldr	r3, [pc, #308]	; (8012140 <readCanToStructs+0xea4>)
 801200a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801200e:	885b      	ldrh	r3, [r3, #2]
 8012010:	494b      	ldr	r1, [pc, #300]	; (8012140 <readCanToStructs+0xea4>)
 8012012:	011b      	lsls	r3, r3, #4
 8012014:	440b      	add	r3, r1
 8012016:	330c      	adds	r3, #12
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	3b01      	subs	r3, #1
 801201c:	4413      	add	r3, r2
 801201e:	2b07      	cmp	r3, #7
 8012020:	d912      	bls.n	8012048 <readCanToStructs+0xdac>
					printf("Received Fault Injection Data\n");
 8012022:	4849      	ldr	r0, [pc, #292]	; (8012148 <readCanToStructs+0xeac>)
 8012024:	f013 fa38 	bl	8025498 <puts>
					Is_CAN_Exchange_happening = YES;
 8012028:	4b48      	ldr	r3, [pc, #288]	; (801214c <readCanToStructs+0xeb0>)
 801202a:	2201      	movs	r2, #1
 801202c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801202e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012032:	4a41      	ldr	r2, [pc, #260]	; (8012138 <readCanToStructs+0xe9c>)
 8012034:	f240 4112 	movw	r1, #1042	; 0x412
 8012038:	fb01 f303 	mul.w	r3, r1, r3
 801203c:	4413      	add	r3, r2
 801203e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012042:	2200      	movs	r2, #0
 8012044:	701a      	strb	r2, [r3, #0]
				break;
 8012046:	e25f      	b.n	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801204c:	4a3a      	ldr	r2, [pc, #232]	; (8012138 <readCanToStructs+0xe9c>)
 801204e:	f240 4112 	movw	r1, #1042	; 0x412
 8012052:	fb01 f303 	mul.w	r3, r1, r3
 8012056:	4413      	add	r3, r2
 8012058:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 801205c:	2201      	movs	r2, #1
 801205e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012064:	4934      	ldr	r1, [pc, #208]	; (8012138 <readCanToStructs+0xe9c>)
 8012066:	f240 4212 	movw	r2, #1042	; 0x412
 801206a:	fb03 f202 	mul.w	r2, r3, r2
 801206e:	440a      	add	r2, r1
 8012070:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012074:	7812      	ldrb	r2, [r2, #0]
 8012076:	3201      	adds	r2, #1
 8012078:	b2d0      	uxtb	r0, r2
 801207a:	4a2f      	ldr	r2, [pc, #188]	; (8012138 <readCanToStructs+0xe9c>)
 801207c:	f240 4112 	movw	r1, #1042	; 0x412
 8012080:	fb01 f303 	mul.w	r3, r1, r3
 8012084:	4413      	add	r3, r2
 8012086:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801208a:	4602      	mov	r2, r0
 801208c:	701a      	strb	r2, [r3, #0]
				break;
 801208e:	e23b      	b.n	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8012090:	4b2f      	ldr	r3, [pc, #188]	; (8012150 <readCanToStructs+0xeb4>)
 8012092:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012094:	4b2a      	ldr	r3, [pc, #168]	; (8012140 <readCanToStructs+0xea4>)
 8012096:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801209a:	885b      	ldrh	r3, [r3, #2]
 801209c:	4a28      	ldr	r2, [pc, #160]	; (8012140 <readCanToStructs+0xea4>)
 801209e:	011b      	lsls	r3, r3, #4
 80120a0:	4413      	add	r3, r2
 80120a2:	3304      	adds	r3, #4
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80120aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d110      	bne.n	80120d4 <readCanToStructs+0xe38>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80120b2:	2214      	movs	r2, #20
 80120b4:	2100      	movs	r1, #0
 80120b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120b8:	f013 f86a 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80120bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120c0:	4a1d      	ldr	r2, [pc, #116]	; (8012138 <readCanToStructs+0xe9c>)
 80120c2:	f240 4112 	movw	r1, #1042	; 0x412
 80120c6:	fb01 f303 	mul.w	r3, r1, r3
 80120ca:	4413      	add	r3, r2
 80120cc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80120d0:	2200      	movs	r2, #0
 80120d2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80120d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120d8:	4a17      	ldr	r2, [pc, #92]	; (8012138 <readCanToStructs+0xe9c>)
 80120da:	f240 4112 	movw	r1, #1042	; 0x412
 80120de:	fb01 f303 	mul.w	r3, r1, r3
 80120e2:	4413      	add	r3, r2
 80120e4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d014      	beq.n	801211c <readCanToStructs+0xe80>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 80120f2:	4818      	ldr	r0, [pc, #96]	; (8012154 <readCanToStructs+0xeb8>)
 80120f4:	f013 f9d0 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80120f8:	2214      	movs	r2, #20
 80120fa:	2100      	movs	r1, #0
 80120fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120fe:	f013 f847 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012106:	4a0c      	ldr	r2, [pc, #48]	; (8012138 <readCanToStructs+0xe9c>)
 8012108:	f240 4112 	movw	r1, #1042	; 0x412
 801210c:	fb01 f303 	mul.w	r3, r1, r3
 8012110:	4413      	add	r3, r2
 8012112:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012116:	2200      	movs	r2, #0
 8012118:	701a      	strb	r2, [r3, #0]
					break;
 801211a:	e1f5      	b.n	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 801211c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012120:	4613      	mov	r3, r2
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	1a9b      	subs	r3, r3, r2
 8012126:	461a      	mov	r2, r3
 8012128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212a:	4413      	add	r3, r2
 801212c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801212e:	2301      	movs	r3, #1
 8012130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012134:	e027      	b.n	8012186 <readCanToStructs+0xeea>
 8012136:	bf00      	nop
 8012138:	20005728 	.word	0x20005728
 801213c:	20001d88 	.word	0x20001d88
 8012140:	20005f4c 	.word	0x20005f4c
 8012144:	08029b00 	.word	0x08029b00
 8012148:	08029b20 	.word	0x08029b20
 801214c:	20000108 	.word	0x20000108
 8012150:	20002450 	.word	0x20002450
 8012154:	08029b40 	.word	0x08029b40
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012158:	4bb9      	ldr	r3, [pc, #740]	; (8012440 <readCanToStructs+0x11a4>)
 801215a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801215e:	885b      	ldrh	r3, [r3, #2]
 8012160:	461a      	mov	r2, r3
 8012162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012166:	49b6      	ldr	r1, [pc, #728]	; (8012440 <readCanToStructs+0x11a4>)
 8012168:	0112      	lsls	r2, r2, #4
 801216a:	440a      	add	r2, r1
 801216c:	4413      	add	r3, r2
 801216e:	3304      	adds	r3, #4
 8012170:	781a      	ldrb	r2, [r3, #0]
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012178:	3301      	adds	r3, #1
 801217a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801217c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012180:	3301      	adds	r3, #1
 8012182:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012186:	4bae      	ldr	r3, [pc, #696]	; (8012440 <readCanToStructs+0x11a4>)
 8012188:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801218c:	885b      	ldrh	r3, [r3, #2]
 801218e:	4aac      	ldr	r2, [pc, #688]	; (8012440 <readCanToStructs+0x11a4>)
 8012190:	011b      	lsls	r3, r3, #4
 8012192:	4413      	add	r3, r2
 8012194:	330c      	adds	r3, #12
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801219c:	429a      	cmp	r2, r3
 801219e:	d3db      	bcc.n	8012158 <readCanToStructs+0xebc>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 80121a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121a4:	4aa7      	ldr	r2, [pc, #668]	; (8012444 <readCanToStructs+0x11a8>)
 80121a6:	f240 4112 	movw	r1, #1042	; 0x412
 80121aa:	fb01 f303 	mul.w	r3, r1, r3
 80121ae:	4413      	add	r3, r2
 80121b0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	461a      	mov	r2, r3
 80121b8:	4613      	mov	r3, r2
 80121ba:	00db      	lsls	r3, r3, #3
 80121bc:	1a9a      	subs	r2, r3, r2
 80121be:	4ba0      	ldr	r3, [pc, #640]	; (8012440 <readCanToStructs+0x11a4>)
 80121c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121c4:	885b      	ldrh	r3, [r3, #2]
 80121c6:	499e      	ldr	r1, [pc, #632]	; (8012440 <readCanToStructs+0x11a4>)
 80121c8:	011b      	lsls	r3, r3, #4
 80121ca:	440b      	add	r3, r1
 80121cc:	330c      	adds	r3, #12
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	3b01      	subs	r3, #1
 80121d2:	4413      	add	r3, r2
 80121d4:	2b13      	cmp	r3, #19
 80121d6:	d954      	bls.n	8012282 <readCanToStructs+0xfe6>
					uint16_t CRC16 = 0;
 80121d8:	2300      	movs	r3, #0
 80121da:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 80121dc:	2300      	movs	r3, #0
 80121de:	603b      	str	r3, [r7, #0]
 80121e0:	1d3b      	adds	r3, r7, #4
 80121e2:	2224      	movs	r2, #36	; 0x24
 80121e4:	2100      	movs	r1, #0
 80121e6:	4618      	mov	r0, r3
 80121e8:	f012 ffd2 	bl	8025190 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80121ec:	463b      	mov	r3, r7
 80121ee:	2214      	movs	r2, #20
 80121f0:	4995      	ldr	r1, [pc, #596]	; (8012448 <readCanToStructs+0x11ac>)
 80121f2:	4618      	mov	r0, r3
 80121f4:	f012 ffa4 	bl	8025140 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80121f8:	463b      	mov	r3, r7
 80121fa:	2214      	movs	r2, #20
 80121fc:	4619      	mov	r1, r3
 80121fe:	2000      	movs	r0, #0
 8012200:	f002 fa9e 	bl	8014740 <GetCRC16>
 8012204:	4603      	mov	r3, r0
 8012206:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8012208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801220a:	2b00      	cmp	r3, #0
 801220c:	d10c      	bne.n	8012228 <readCanToStructs+0xf8c>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801220e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012212:	4a8c      	ldr	r2, [pc, #560]	; (8012444 <readCanToStructs+0x11a8>)
 8012214:	f240 4112 	movw	r1, #1042	; 0x412
 8012218:	fb01 f303 	mul.w	r3, r1, r3
 801221c:	4413      	add	r3, r2
 801221e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012222:	2200      	movs	r2, #0
 8012224:	701a      	strb	r2, [r3, #0]
				break;
 8012226:	e16f      	b.n	8012508 <readCanToStructs+0x126c>
						if(Debug_flag == 1)
 8012228:	4b88      	ldr	r3, [pc, #544]	; (801244c <readCanToStructs+0x11b0>)
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d10a      	bne.n	8012246 <readCanToStructs+0xfaa>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8012230:	4b85      	ldr	r3, [pc, #532]	; (8012448 <readCanToStructs+0x11ac>)
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	4a86      	ldr	r2, [pc, #536]	; (8012450 <readCanToStructs+0x11b4>)
 8012236:	3366      	adds	r3, #102	; 0x66
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	4413      	add	r3, r2
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	4619      	mov	r1, r3
 8012240:	4884      	ldr	r0, [pc, #528]	; (8012454 <readCanToStructs+0x11b8>)
 8012242:	f013 f88d 	bl	8025360 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8012246:	4b80      	ldr	r3, [pc, #512]	; (8012448 <readCanToStructs+0x11ac>)
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	461a      	mov	r2, r3
 801224c:	4613      	mov	r3, r2
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	4413      	add	r3, r2
 8012252:	009b      	lsls	r3, r3, #2
 8012254:	4a80      	ldr	r2, [pc, #512]	; (8012458 <readCanToStructs+0x11bc>)
 8012256:	4413      	add	r3, r2
 8012258:	2214      	movs	r2, #20
 801225a:	497b      	ldr	r1, [pc, #492]	; (8012448 <readCanToStructs+0x11ac>)
 801225c:	4618      	mov	r0, r3
 801225e:	f012 ff6f 	bl	8025140 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8012262:	4b7e      	ldr	r3, [pc, #504]	; (801245c <readCanToStructs+0x11c0>)
 8012264:	2201      	movs	r2, #1
 8012266:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801226c:	4a75      	ldr	r2, [pc, #468]	; (8012444 <readCanToStructs+0x11a8>)
 801226e:	f240 4112 	movw	r1, #1042	; 0x412
 8012272:	fb01 f303 	mul.w	r3, r1, r3
 8012276:	4413      	add	r3, r2
 8012278:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801227c:	2200      	movs	r2, #0
 801227e:	701a      	strb	r2, [r3, #0]
				break;
 8012280:	e142      	b.n	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012286:	4a6f      	ldr	r2, [pc, #444]	; (8012444 <readCanToStructs+0x11a8>)
 8012288:	f240 4112 	movw	r1, #1042	; 0x412
 801228c:	fb01 f303 	mul.w	r3, r1, r3
 8012290:	4413      	add	r3, r2
 8012292:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012296:	2201      	movs	r2, #1
 8012298:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801229a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801229e:	4969      	ldr	r1, [pc, #420]	; (8012444 <readCanToStructs+0x11a8>)
 80122a0:	f240 4212 	movw	r2, #1042	; 0x412
 80122a4:	fb03 f202 	mul.w	r2, r3, r2
 80122a8:	440a      	add	r2, r1
 80122aa:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80122ae:	7812      	ldrb	r2, [r2, #0]
 80122b0:	3201      	adds	r2, #1
 80122b2:	b2d0      	uxtb	r0, r2
 80122b4:	4a63      	ldr	r2, [pc, #396]	; (8012444 <readCanToStructs+0x11a8>)
 80122b6:	f240 4112 	movw	r1, #1042	; 0x412
 80122ba:	fb01 f303 	mul.w	r3, r1, r3
 80122be:	4413      	add	r3, r2
 80122c0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80122c4:	4602      	mov	r2, r0
 80122c6:	701a      	strb	r2, [r3, #0]
				break;
 80122c8:	e11e      	b.n	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 80122ca:	4b5f      	ldr	r3, [pc, #380]	; (8012448 <readCanToStructs+0x11ac>)
 80122cc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80122ce:	4b5c      	ldr	r3, [pc, #368]	; (8012440 <readCanToStructs+0x11a4>)
 80122d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122d4:	885b      	ldrh	r3, [r3, #2]
 80122d6:	4a5a      	ldr	r2, [pc, #360]	; (8012440 <readCanToStructs+0x11a4>)
 80122d8:	011b      	lsls	r3, r3, #4
 80122da:	4413      	add	r3, r2
 80122dc:	3304      	adds	r3, #4
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80122e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d110      	bne.n	801230e <readCanToStructs+0x1072>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80122ec:	2214      	movs	r2, #20
 80122ee:	2100      	movs	r1, #0
 80122f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f2:	f012 ff4d 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80122f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122fa:	4a52      	ldr	r2, [pc, #328]	; (8012444 <readCanToStructs+0x11a8>)
 80122fc:	f240 4112 	movw	r1, #1042	; 0x412
 8012300:	fb01 f303 	mul.w	r3, r1, r3
 8012304:	4413      	add	r3, r2
 8012306:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801230a:	2200      	movs	r2, #0
 801230c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 801230e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012312:	4a4c      	ldr	r2, [pc, #304]	; (8012444 <readCanToStructs+0x11a8>)
 8012314:	f240 4112 	movw	r1, #1042	; 0x412
 8012318:	fb01 f303 	mul.w	r3, r1, r3
 801231c:	4413      	add	r3, r2
 801231e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012328:	429a      	cmp	r2, r3
 801232a:	d014      	beq.n	8012356 <readCanToStructs+0x10ba>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 801232c:	484c      	ldr	r0, [pc, #304]	; (8012460 <readCanToStructs+0x11c4>)
 801232e:	f013 f8b3 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012332:	2214      	movs	r2, #20
 8012334:	2100      	movs	r1, #0
 8012336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012338:	f012 ff2a 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801233c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012340:	4a40      	ldr	r2, [pc, #256]	; (8012444 <readCanToStructs+0x11a8>)
 8012342:	f240 4112 	movw	r1, #1042	; 0x412
 8012346:	fb01 f303 	mul.w	r3, r1, r3
 801234a:	4413      	add	r3, r2
 801234c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012350:	2200      	movs	r2, #0
 8012352:	701a      	strb	r2, [r3, #0]
					break;
 8012354:	e0d8      	b.n	8012508 <readCanToStructs+0x126c>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012356:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801235a:	4613      	mov	r3, r2
 801235c:	00db      	lsls	r3, r3, #3
 801235e:	1a9b      	subs	r3, r3, r2
 8012360:	461a      	mov	r2, r3
 8012362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012364:	4413      	add	r3, r2
 8012366:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012368:	2301      	movs	r3, #1
 801236a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801236e:	e016      	b.n	801239e <readCanToStructs+0x1102>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012370:	4b33      	ldr	r3, [pc, #204]	; (8012440 <readCanToStructs+0x11a4>)
 8012372:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012376:	885b      	ldrh	r3, [r3, #2]
 8012378:	461a      	mov	r2, r3
 801237a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801237e:	4930      	ldr	r1, [pc, #192]	; (8012440 <readCanToStructs+0x11a4>)
 8012380:	0112      	lsls	r2, r2, #4
 8012382:	440a      	add	r2, r1
 8012384:	4413      	add	r3, r2
 8012386:	3304      	adds	r3, #4
 8012388:	781a      	ldrb	r2, [r3, #0]
 801238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012390:	3301      	adds	r3, #1
 8012392:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012398:	3301      	adds	r3, #1
 801239a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801239e:	4b28      	ldr	r3, [pc, #160]	; (8012440 <readCanToStructs+0x11a4>)
 80123a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123a4:	885b      	ldrh	r3, [r3, #2]
 80123a6:	4a26      	ldr	r2, [pc, #152]	; (8012440 <readCanToStructs+0x11a4>)
 80123a8:	011b      	lsls	r3, r3, #4
 80123aa:	4413      	add	r3, r2
 80123ac:	330c      	adds	r3, #12
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d3db      	bcc.n	8012370 <readCanToStructs+0x10d4>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 80123b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123bc:	4a21      	ldr	r2, [pc, #132]	; (8012444 <readCanToStructs+0x11a8>)
 80123be:	f240 4112 	movw	r1, #1042	; 0x412
 80123c2:	fb01 f303 	mul.w	r3, r1, r3
 80123c6:	4413      	add	r3, r2
 80123c8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	461a      	mov	r2, r3
 80123d0:	4613      	mov	r3, r2
 80123d2:	00db      	lsls	r3, r3, #3
 80123d4:	1a9a      	subs	r2, r3, r2
 80123d6:	4b1a      	ldr	r3, [pc, #104]	; (8012440 <readCanToStructs+0x11a4>)
 80123d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123dc:	885b      	ldrh	r3, [r3, #2]
 80123de:	4918      	ldr	r1, [pc, #96]	; (8012440 <readCanToStructs+0x11a4>)
 80123e0:	011b      	lsls	r3, r3, #4
 80123e2:	440b      	add	r3, r1
 80123e4:	330c      	adds	r3, #12
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	4413      	add	r3, r2
 80123ec:	2b13      	cmp	r3, #19
 80123ee:	d966      	bls.n	80124be <readCanToStructs+0x1222>
					uint16_t CRC16 = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 80123f4:	2300      	movs	r3, #0
 80123f6:	603b      	str	r3, [r7, #0]
 80123f8:	1d3b      	adds	r3, r7, #4
 80123fa:	2224      	movs	r2, #36	; 0x24
 80123fc:	2100      	movs	r1, #0
 80123fe:	4618      	mov	r0, r3
 8012400:	f012 fec6 	bl	8025190 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8012404:	463b      	mov	r3, r7
 8012406:	2214      	movs	r2, #20
 8012408:	490f      	ldr	r1, [pc, #60]	; (8012448 <readCanToStructs+0x11ac>)
 801240a:	4618      	mov	r0, r3
 801240c:	f012 fe98 	bl	8025140 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8012410:	463b      	mov	r3, r7
 8012412:	2214      	movs	r2, #20
 8012414:	4619      	mov	r1, r3
 8012416:	2000      	movs	r0, #0
 8012418:	f002 f992 	bl	8014740 <GetCRC16>
 801241c:	4603      	mov	r3, r0
 801241e:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8012420:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012422:	2b00      	cmp	r3, #0
 8012424:	d11e      	bne.n	8012464 <readCanToStructs+0x11c8>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801242a:	4a06      	ldr	r2, [pc, #24]	; (8012444 <readCanToStructs+0x11a8>)
 801242c:	f240 4112 	movw	r1, #1042	; 0x412
 8012430:	fb01 f303 	mul.w	r3, r1, r3
 8012434:	4413      	add	r3, r2
 8012436:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801243a:	2200      	movs	r2, #0
 801243c:	701a      	strb	r2, [r3, #0]
				break;
 801243e:	e063      	b.n	8012508 <readCanToStructs+0x126c>
 8012440:	20005f4c 	.word	0x20005f4c
 8012444:	20005728 	.word	0x20005728
 8012448:	20002450 	.word	0x20002450
 801244c:	200009b5 	.word	0x200009b5
 8012450:	20000304 	.word	0x20000304
 8012454:	08029b5c 	.word	0x08029b5c
 8012458:	20002374 	.word	0x20002374
 801245c:	20000108 	.word	0x20000108
 8012460:	08029b70 	.word	0x08029b70
						if(Debug_flag == 1)
 8012464:	4bc7      	ldr	r3, [pc, #796]	; (8012784 <readCanToStructs+0x14e8>)
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2b01      	cmp	r3, #1
 801246a:	d10a      	bne.n	8012482 <readCanToStructs+0x11e6>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 801246c:	4bc6      	ldr	r3, [pc, #792]	; (8012788 <readCanToStructs+0x14ec>)
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	4ac6      	ldr	r2, [pc, #792]	; (801278c <readCanToStructs+0x14f0>)
 8012472:	3366      	adds	r3, #102	; 0x66
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	4413      	add	r3, r2
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	4619      	mov	r1, r3
 801247c:	48c4      	ldr	r0, [pc, #784]	; (8012790 <readCanToStructs+0x14f4>)
 801247e:	f012 ff6f 	bl	8025360 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8012482:	4bc1      	ldr	r3, [pc, #772]	; (8012788 <readCanToStructs+0x14ec>)
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	461a      	mov	r2, r3
 8012488:	4613      	mov	r3, r2
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	4413      	add	r3, r2
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	4ac0      	ldr	r2, [pc, #768]	; (8012794 <readCanToStructs+0x14f8>)
 8012492:	4413      	add	r3, r2
 8012494:	2214      	movs	r2, #20
 8012496:	49bc      	ldr	r1, [pc, #752]	; (8012788 <readCanToStructs+0x14ec>)
 8012498:	4618      	mov	r0, r3
 801249a:	f012 fe51 	bl	8025140 <memcpy>
						Is_CAN_Exchange_happening = YES;
 801249e:	4bbe      	ldr	r3, [pc, #760]	; (8012798 <readCanToStructs+0x14fc>)
 80124a0:	2201      	movs	r2, #1
 80124a2:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80124a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124a8:	4abc      	ldr	r2, [pc, #752]	; (801279c <readCanToStructs+0x1500>)
 80124aa:	f240 4112 	movw	r1, #1042	; 0x412
 80124ae:	fb01 f303 	mul.w	r3, r1, r3
 80124b2:	4413      	add	r3, r2
 80124b4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80124b8:	2200      	movs	r2, #0
 80124ba:	701a      	strb	r2, [r3, #0]
				break;
 80124bc:	e024      	b.n	8012508 <readCanToStructs+0x126c>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80124be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124c2:	4ab6      	ldr	r2, [pc, #728]	; (801279c <readCanToStructs+0x1500>)
 80124c4:	f240 4112 	movw	r1, #1042	; 0x412
 80124c8:	fb01 f303 	mul.w	r3, r1, r3
 80124cc:	4413      	add	r3, r2
 80124ce:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80124d2:	2201      	movs	r2, #1
 80124d4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80124d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124da:	49b0      	ldr	r1, [pc, #704]	; (801279c <readCanToStructs+0x1500>)
 80124dc:	f240 4212 	movw	r2, #1042	; 0x412
 80124e0:	fb03 f202 	mul.w	r2, r3, r2
 80124e4:	440a      	add	r2, r1
 80124e6:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80124ea:	7812      	ldrb	r2, [r2, #0]
 80124ec:	3201      	adds	r2, #1
 80124ee:	b2d0      	uxtb	r0, r2
 80124f0:	4aaa      	ldr	r2, [pc, #680]	; (801279c <readCanToStructs+0x1500>)
 80124f2:	f240 4112 	movw	r1, #1042	; 0x412
 80124f6:	fb01 f303 	mul.w	r3, r1, r3
 80124fa:	4413      	add	r3, r2
 80124fc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012500:	4602      	mov	r2, r0
 8012502:	701a      	strb	r2, [r3, #0]
				break;
 8012504:	e000      	b.n	8012508 <readCanToStructs+0x126c>
				break;
 8012506:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8012508:	4ba5      	ldr	r3, [pc, #660]	; (80127a0 <readCanToStructs+0x1504>)
 801250a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801250e:	885b      	ldrh	r3, [r3, #2]
 8012510:	011b      	lsls	r3, r3, #4
 8012512:	4aa3      	ldr	r2, [pc, #652]	; (80127a0 <readCanToStructs+0x1504>)
 8012514:	4413      	add	r3, r2
 8012516:	2210      	movs	r2, #16
 8012518:	2100      	movs	r1, #0
 801251a:	4618      	mov	r0, r3
 801251c:	f012 fe38 	bl	8025190 <memset>
			canRead.Out++;
 8012520:	4b9f      	ldr	r3, [pc, #636]	; (80127a0 <readCanToStructs+0x1504>)
 8012522:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012526:	885b      	ldrh	r3, [r3, #2]
 8012528:	3301      	adds	r3, #1
 801252a:	b29a      	uxth	r2, r3
 801252c:	4b9c      	ldr	r3, [pc, #624]	; (80127a0 <readCanToStructs+0x1504>)
 801252e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012532:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8012534:	4b9a      	ldr	r3, [pc, #616]	; (80127a0 <readCanToStructs+0x1504>)
 8012536:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801253a:	885b      	ldrh	r3, [r3, #2]
 801253c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012540:	d104      	bne.n	801254c <readCanToStructs+0x12b0>
				canRead.Out = 0;
 8012542:	4b97      	ldr	r3, [pc, #604]	; (80127a0 <readCanToStructs+0x1504>)
 8012544:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012548:	2200      	movs	r2, #0
 801254a:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 801254c:	f7fe fe50 	bl	80111f0 <canDataReady>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	f47e aecc 	bne.w	80112f0 <readCanToStructs+0x54>

		}
		/* ___________________ HITACHI _______________ */
	}
	break;
 8012558:	f002 b886 	b.w	8014668 <readCanToStructs+0x33cc>
	case SIEMENS:
	{
		/* __________ SIEMENS _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 801255c:	4b90      	ldr	r3, [pc, #576]	; (80127a0 <readCanToStructs+0x1504>)
 801255e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012562:	885b      	ldrh	r3, [r3, #2]
 8012564:	4a8e      	ldr	r2, [pc, #568]	; (80127a0 <readCanToStructs+0x1504>)
 8012566:	011b      	lsls	r3, r3, #4
 8012568:	4413      	add	r3, r2
 801256a:	330f      	adds	r3, #15
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	3b01      	subs	r3, #1
 8012570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8012574:	4b8a      	ldr	r3, [pc, #552]	; (80127a0 <readCanToStructs+0x1504>)
 8012576:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801257a:	885b      	ldrh	r3, [r3, #2]
 801257c:	4a88      	ldr	r2, [pc, #544]	; (80127a0 <readCanToStructs+0x1504>)
 801257e:	011b      	lsls	r3, r3, #4
 8012580:	4413      	add	r3, r2
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8012588:	f200 867c 	bhi.w	8013284 <readCanToStructs+0x1fe8>
 801258c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012590:	d80a      	bhi.n	80125a8 <readCanToStructs+0x130c>
 8012592:	f240 1203 	movw	r2, #259	; 0x103
 8012596:	4293      	cmp	r3, r2
 8012598:	d01e      	beq.n	80125d8 <readCanToStructs+0x133c>
 801259a:	f240 1209 	movw	r2, #265	; 0x109
 801259e:	4293      	cmp	r3, r2
 80125a0:	f000 8108 	beq.w	80127b4 <readCanToStructs+0x1518>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;

			default:
				break;
 80125a4:	f000 be6e 	b.w	8013284 <readCanToStructs+0x1fe8>
 80125a8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80125ac:	2b07      	cmp	r3, #7
 80125ae:	f200 8669 	bhi.w	8013284 <readCanToStructs+0x1fe8>
 80125b2:	a201      	add	r2, pc, #4	; (adr r2, 80125b8 <readCanToStructs+0x131c>)
 80125b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125b8:	08012961 	.word	0x08012961
 80125bc:	08012b45 	.word	0x08012b45
 80125c0:	08013285 	.word	0x08013285
 80125c4:	08013285 	.word	0x08013285
 80125c8:	080130e7 	.word	0x080130e7
 80125cc:	08013285 	.word	0x08013285
 80125d0:	08012cf5 	.word	0x08012cf5
 80125d4:	08012eef 	.word	0x08012eef
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80125d8:	4b72      	ldr	r3, [pc, #456]	; (80127a4 <readCanToStructs+0x1508>)
 80125da:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80125dc:	4b70      	ldr	r3, [pc, #448]	; (80127a0 <readCanToStructs+0x1504>)
 80125de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125e2:	885b      	ldrh	r3, [r3, #2]
 80125e4:	4a6e      	ldr	r2, [pc, #440]	; (80127a0 <readCanToStructs+0x1504>)
 80125e6:	011b      	lsls	r3, r3, #4
 80125e8:	4413      	add	r3, r2
 80125ea:	3304      	adds	r3, #4
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80125f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d110      	bne.n	801261c <readCanToStructs+0x1380>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80125fa:	2206      	movs	r2, #6
 80125fc:	2100      	movs	r1, #0
 80125fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012600:	f012 fdc6 	bl	8025190 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012608:	4a64      	ldr	r2, [pc, #400]	; (801279c <readCanToStructs+0x1500>)
 801260a:	f240 4112 	movw	r1, #1042	; 0x412
 801260e:	fb01 f303 	mul.w	r3, r1, r3
 8012612:	4413      	add	r3, r2
 8012614:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012618:	2200      	movs	r2, #0
 801261a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 801261c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012620:	4a5e      	ldr	r2, [pc, #376]	; (801279c <readCanToStructs+0x1500>)
 8012622:	f240 4112 	movw	r1, #1042	; 0x412
 8012626:	fb01 f303 	mul.w	r3, r1, r3
 801262a:	4413      	add	r3, r2
 801262c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012636:	429a      	cmp	r2, r3
 8012638:	d015      	beq.n	8012666 <readCanToStructs+0x13ca>
					printf("GPS Packet Seq no MisMatch\n");
 801263a:	485b      	ldr	r0, [pc, #364]	; (80127a8 <readCanToStructs+0x150c>)
 801263c:	f012 ff2c 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012640:	2206      	movs	r2, #6
 8012642:	2100      	movs	r1, #0
 8012644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012646:	f012 fda3 	bl	8025190 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801264a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801264e:	4a53      	ldr	r2, [pc, #332]	; (801279c <readCanToStructs+0x1500>)
 8012650:	f240 4112 	movw	r1, #1042	; 0x412
 8012654:	fb01 f303 	mul.w	r3, r1, r3
 8012658:	4413      	add	r3, r2
 801265a:	f203 2307 	addw	r3, r3, #519	; 0x207
 801265e:	2200      	movs	r2, #0
 8012660:	701a      	strb	r2, [r3, #0]
					break;
 8012662:	f000 be14 	b.w	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012666:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801266a:	4613      	mov	r3, r2
 801266c:	00db      	lsls	r3, r3, #3
 801266e:	1a9b      	subs	r3, r3, r2
 8012670:	461a      	mov	r2, r3
 8012672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012674:	4413      	add	r3, r2
 8012676:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012678:	2301      	movs	r3, #1
 801267a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801267e:	e016      	b.n	80126ae <readCanToStructs+0x1412>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012680:	4b47      	ldr	r3, [pc, #284]	; (80127a0 <readCanToStructs+0x1504>)
 8012682:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012686:	885b      	ldrh	r3, [r3, #2]
 8012688:	461a      	mov	r2, r3
 801268a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801268e:	4944      	ldr	r1, [pc, #272]	; (80127a0 <readCanToStructs+0x1504>)
 8012690:	0112      	lsls	r2, r2, #4
 8012692:	440a      	add	r2, r1
 8012694:	4413      	add	r3, r2
 8012696:	3304      	adds	r3, #4
 8012698:	781a      	ldrb	r2, [r3, #0]
 801269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a0:	3301      	adds	r3, #1
 80126a2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80126a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126a8:	3301      	adds	r3, #1
 80126aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80126ae:	4b3c      	ldr	r3, [pc, #240]	; (80127a0 <readCanToStructs+0x1504>)
 80126b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126b4:	885b      	ldrh	r3, [r3, #2]
 80126b6:	4a3a      	ldr	r2, [pc, #232]	; (80127a0 <readCanToStructs+0x1504>)
 80126b8:	011b      	lsls	r3, r3, #4
 80126ba:	4413      	add	r3, r2
 80126bc:	330c      	adds	r3, #12
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d3db      	bcc.n	8012680 <readCanToStructs+0x13e4>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80126c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126cc:	4a33      	ldr	r2, [pc, #204]	; (801279c <readCanToStructs+0x1500>)
 80126ce:	f240 4112 	movw	r1, #1042	; 0x412
 80126d2:	fb01 f303 	mul.w	r3, r1, r3
 80126d6:	4413      	add	r3, r2
 80126d8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	461a      	mov	r2, r3
 80126e0:	4613      	mov	r3, r2
 80126e2:	00db      	lsls	r3, r3, #3
 80126e4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80126e6:	4b2e      	ldr	r3, [pc, #184]	; (80127a0 <readCanToStructs+0x1504>)
 80126e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126ec:	885b      	ldrh	r3, [r3, #2]
 80126ee:	492c      	ldr	r1, [pc, #176]	; (80127a0 <readCanToStructs+0x1504>)
 80126f0:	011b      	lsls	r3, r3, #4
 80126f2:	440b      	add	r3, r1
 80126f4:	330c      	adds	r3, #12
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	3b01      	subs	r3, #1
 80126fa:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80126fc:	2b05      	cmp	r3, #5
 80126fe:	d91c      	bls.n	801273a <readCanToStructs+0x149e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012700:	4b2a      	ldr	r3, [pc, #168]	; (80127ac <readCanToStructs+0x1510>)
 8012702:	4a28      	ldr	r2, [pc, #160]	; (80127a4 <readCanToStructs+0x1508>)
 8012704:	6811      	ldr	r1, [r2, #0]
 8012706:	6019      	str	r1, [r3, #0]
 8012708:	8892      	ldrh	r2, [r2, #4]
 801270a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801270c:	4b1d      	ldr	r3, [pc, #116]	; (8012784 <readCanToStructs+0x14e8>)
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d102      	bne.n	801271a <readCanToStructs+0x147e>
						printf("GPS_PACKET_RECEIVED\n");
 8012714:	4826      	ldr	r0, [pc, #152]	; (80127b0 <readCanToStructs+0x1514>)
 8012716:	f012 febf 	bl	8025498 <puts>
					Write_RTC();
 801271a:	f7f9 fd8b 	bl	800c234 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801271e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012722:	4a1e      	ldr	r2, [pc, #120]	; (801279c <readCanToStructs+0x1500>)
 8012724:	f240 4112 	movw	r1, #1042	; 0x412
 8012728:	fb01 f303 	mul.w	r3, r1, r3
 801272c:	4413      	add	r3, r2
 801272e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012732:	2200      	movs	r2, #0
 8012734:	701a      	strb	r2, [r3, #0]
				break;
 8012736:	f000 bdaa 	b.w	801328e <readCanToStructs+0x1ff2>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801273a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801273e:	4a17      	ldr	r2, [pc, #92]	; (801279c <readCanToStructs+0x1500>)
 8012740:	f240 4112 	movw	r1, #1042	; 0x412
 8012744:	fb01 f303 	mul.w	r3, r1, r3
 8012748:	4413      	add	r3, r2
 801274a:	f203 2306 	addw	r3, r3, #518	; 0x206
 801274e:	2201      	movs	r2, #1
 8012750:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8012752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012756:	4911      	ldr	r1, [pc, #68]	; (801279c <readCanToStructs+0x1500>)
 8012758:	f240 4212 	movw	r2, #1042	; 0x412
 801275c:	fb03 f202 	mul.w	r2, r3, r2
 8012760:	440a      	add	r2, r1
 8012762:	f202 2207 	addw	r2, r2, #519	; 0x207
 8012766:	7812      	ldrb	r2, [r2, #0]
 8012768:	3201      	adds	r2, #1
 801276a:	b2d0      	uxtb	r0, r2
 801276c:	4a0b      	ldr	r2, [pc, #44]	; (801279c <readCanToStructs+0x1500>)
 801276e:	f240 4112 	movw	r1, #1042	; 0x412
 8012772:	fb01 f303 	mul.w	r3, r1, r3
 8012776:	4413      	add	r3, r2
 8012778:	f203 2307 	addw	r3, r3, #519	; 0x207
 801277c:	4602      	mov	r2, r0
 801277e:	701a      	strb	r2, [r3, #0]
				break;
 8012780:	f000 bd85 	b.w	801328e <readCanToStructs+0x1ff2>
 8012784:	200009b5 	.word	0x200009b5
 8012788:	20002450 	.word	0x20002450
 801278c:	20000304 	.word	0x20000304
 8012790:	08029b90 	.word	0x08029b90
 8012794:	20002374 	.word	0x20002374
 8012798:	20000108 	.word	0x20000108
 801279c:	20005728 	.word	0x20005728
 80127a0:	20005f4c 	.word	0x20005f4c
 80127a4:	20002cd0 	.word	0x20002cd0
 80127a8:	080299cc 	.word	0x080299cc
 80127ac:	20002cc8 	.word	0x20002cc8
 80127b0:	080299e8 	.word	0x080299e8
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80127b4:	4bc5      	ldr	r3, [pc, #788]	; (8012acc <readCanToStructs+0x1830>)
 80127b6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80127b8:	4bc5      	ldr	r3, [pc, #788]	; (8012ad0 <readCanToStructs+0x1834>)
 80127ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127be:	885b      	ldrh	r3, [r3, #2]
 80127c0:	4ac3      	ldr	r2, [pc, #780]	; (8012ad0 <readCanToStructs+0x1834>)
 80127c2:	011b      	lsls	r3, r3, #4
 80127c4:	4413      	add	r3, r2
 80127c6:	3304      	adds	r3, #4
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80127ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d110      	bne.n	80127f8 <readCanToStructs+0x155c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80127d6:	2206      	movs	r2, #6
 80127d8:	2100      	movs	r1, #0
 80127da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127dc:	f012 fcd8 	bl	8025190 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80127e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127e4:	4abb      	ldr	r2, [pc, #748]	; (8012ad4 <readCanToStructs+0x1838>)
 80127e6:	f240 4112 	movw	r1, #1042	; 0x412
 80127ea:	fb01 f303 	mul.w	r3, r1, r3
 80127ee:	4413      	add	r3, r2
 80127f0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80127f4:	2200      	movs	r2, #0
 80127f6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80127f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127fc:	4ab5      	ldr	r2, [pc, #724]	; (8012ad4 <readCanToStructs+0x1838>)
 80127fe:	f240 4112 	movw	r1, #1042	; 0x412
 8012802:	fb01 f303 	mul.w	r3, r1, r3
 8012806:	4413      	add	r3, r2
 8012808:	f203 2313 	addw	r3, r3, #531	; 0x213
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012812:	429a      	cmp	r2, r3
 8012814:	d015      	beq.n	8012842 <readCanToStructs+0x15a6>
					printf("GPS2 Packet Seq no MisMatch\n");
 8012816:	48b0      	ldr	r0, [pc, #704]	; (8012ad8 <readCanToStructs+0x183c>)
 8012818:	f012 fe3e 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801281c:	2206      	movs	r2, #6
 801281e:	2100      	movs	r1, #0
 8012820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012822:	f012 fcb5 	bl	8025190 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801282a:	4aaa      	ldr	r2, [pc, #680]	; (8012ad4 <readCanToStructs+0x1838>)
 801282c:	f240 4112 	movw	r1, #1042	; 0x412
 8012830:	fb01 f303 	mul.w	r3, r1, r3
 8012834:	4413      	add	r3, r2
 8012836:	f203 2313 	addw	r3, r3, #531	; 0x213
 801283a:	2200      	movs	r2, #0
 801283c:	701a      	strb	r2, [r3, #0]
					break;
 801283e:	f000 bd26 	b.w	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012842:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012846:	4613      	mov	r3, r2
 8012848:	00db      	lsls	r3, r3, #3
 801284a:	1a9b      	subs	r3, r3, r2
 801284c:	461a      	mov	r2, r3
 801284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012850:	4413      	add	r3, r2
 8012852:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012854:	2301      	movs	r3, #1
 8012856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801285a:	e016      	b.n	801288a <readCanToStructs+0x15ee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801285c:	4b9c      	ldr	r3, [pc, #624]	; (8012ad0 <readCanToStructs+0x1834>)
 801285e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012862:	885b      	ldrh	r3, [r3, #2]
 8012864:	461a      	mov	r2, r3
 8012866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801286a:	4999      	ldr	r1, [pc, #612]	; (8012ad0 <readCanToStructs+0x1834>)
 801286c:	0112      	lsls	r2, r2, #4
 801286e:	440a      	add	r2, r1
 8012870:	4413      	add	r3, r2
 8012872:	3304      	adds	r3, #4
 8012874:	781a      	ldrb	r2, [r3, #0]
 8012876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012878:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287c:	3301      	adds	r3, #1
 801287e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012884:	3301      	adds	r3, #1
 8012886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801288a:	4b91      	ldr	r3, [pc, #580]	; (8012ad0 <readCanToStructs+0x1834>)
 801288c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012890:	885b      	ldrh	r3, [r3, #2]
 8012892:	4a8f      	ldr	r2, [pc, #572]	; (8012ad0 <readCanToStructs+0x1834>)
 8012894:	011b      	lsls	r3, r3, #4
 8012896:	4413      	add	r3, r2
 8012898:	330c      	adds	r3, #12
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d3db      	bcc.n	801285c <readCanToStructs+0x15c0>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80128a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128a8:	4a8a      	ldr	r2, [pc, #552]	; (8012ad4 <readCanToStructs+0x1838>)
 80128aa:	f240 4112 	movw	r1, #1042	; 0x412
 80128ae:	fb01 f303 	mul.w	r3, r1, r3
 80128b2:	4413      	add	r3, r2
 80128b4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	461a      	mov	r2, r3
 80128bc:	4613      	mov	r3, r2
 80128be:	00db      	lsls	r3, r3, #3
 80128c0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80128c2:	4b83      	ldr	r3, [pc, #524]	; (8012ad0 <readCanToStructs+0x1834>)
 80128c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128c8:	885b      	ldrh	r3, [r3, #2]
 80128ca:	4981      	ldr	r1, [pc, #516]	; (8012ad0 <readCanToStructs+0x1834>)
 80128cc:	011b      	lsls	r3, r3, #4
 80128ce:	440b      	add	r3, r1
 80128d0:	330c      	adds	r3, #12
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80128d8:	2b05      	cmp	r3, #5
 80128da:	d91c      	bls.n	8012916 <readCanToStructs+0x167a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80128dc:	4b7f      	ldr	r3, [pc, #508]	; (8012adc <readCanToStructs+0x1840>)
 80128de:	4a7b      	ldr	r2, [pc, #492]	; (8012acc <readCanToStructs+0x1830>)
 80128e0:	6811      	ldr	r1, [r2, #0]
 80128e2:	6019      	str	r1, [r3, #0]
 80128e4:	8892      	ldrh	r2, [r2, #4]
 80128e6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80128e8:	4b7d      	ldr	r3, [pc, #500]	; (8012ae0 <readCanToStructs+0x1844>)
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d102      	bne.n	80128f6 <readCanToStructs+0x165a>
						printf("GPS2_PACKET_RECEIVED\n");
 80128f0:	487c      	ldr	r0, [pc, #496]	; (8012ae4 <readCanToStructs+0x1848>)
 80128f2:	f012 fdd1 	bl	8025498 <puts>
					Write_RTC();
 80128f6:	f7f9 fc9d 	bl	800c234 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80128fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128fe:	4a75      	ldr	r2, [pc, #468]	; (8012ad4 <readCanToStructs+0x1838>)
 8012900:	f240 4112 	movw	r1, #1042	; 0x412
 8012904:	fb01 f303 	mul.w	r3, r1, r3
 8012908:	4413      	add	r3, r2
 801290a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801290e:	2200      	movs	r2, #0
 8012910:	701a      	strb	r2, [r3, #0]
				break;
 8012912:	f000 bcbc 	b.w	801328e <readCanToStructs+0x1ff2>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8012916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801291a:	4a6e      	ldr	r2, [pc, #440]	; (8012ad4 <readCanToStructs+0x1838>)
 801291c:	f240 4112 	movw	r1, #1042	; 0x412
 8012920:	fb01 f303 	mul.w	r3, r1, r3
 8012924:	4413      	add	r3, r2
 8012926:	f203 2312 	addw	r3, r3, #530	; 0x212
 801292a:	2201      	movs	r2, #1
 801292c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801292e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012932:	4968      	ldr	r1, [pc, #416]	; (8012ad4 <readCanToStructs+0x1838>)
 8012934:	f240 4212 	movw	r2, #1042	; 0x412
 8012938:	fb03 f202 	mul.w	r2, r3, r2
 801293c:	440a      	add	r2, r1
 801293e:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012942:	7812      	ldrb	r2, [r2, #0]
 8012944:	3201      	adds	r2, #1
 8012946:	b2d0      	uxtb	r0, r2
 8012948:	4a62      	ldr	r2, [pc, #392]	; (8012ad4 <readCanToStructs+0x1838>)
 801294a:	f240 4112 	movw	r1, #1042	; 0x412
 801294e:	fb01 f303 	mul.w	r3, r1, r3
 8012952:	4413      	add	r3, r2
 8012954:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012958:	4602      	mov	r2, r0
 801295a:	701a      	strb	r2, [r3, #0]
				break;
 801295c:	f000 bc97 	b.w	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8012960:	4b61      	ldr	r3, [pc, #388]	; (8012ae8 <readCanToStructs+0x184c>)
 8012962:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012964:	4b5a      	ldr	r3, [pc, #360]	; (8012ad0 <readCanToStructs+0x1834>)
 8012966:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801296a:	885b      	ldrh	r3, [r3, #2]
 801296c:	4a58      	ldr	r2, [pc, #352]	; (8012ad0 <readCanToStructs+0x1834>)
 801296e:	011b      	lsls	r3, r3, #4
 8012970:	4413      	add	r3, r2
 8012972:	3304      	adds	r3, #4
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801297a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801297e:	2b00      	cmp	r3, #0
 8012980:	d110      	bne.n	80129a4 <readCanToStructs+0x1708>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012982:	2204      	movs	r2, #4
 8012984:	2100      	movs	r1, #0
 8012986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012988:	f012 fc02 	bl	8025190 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801298c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012990:	4a50      	ldr	r2, [pc, #320]	; (8012ad4 <readCanToStructs+0x1838>)
 8012992:	f240 4112 	movw	r1, #1042	; 0x412
 8012996:	fb01 f303 	mul.w	r3, r1, r3
 801299a:	4413      	add	r3, r2
 801299c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80129a0:	2200      	movs	r2, #0
 80129a2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80129a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129a8:	4a4a      	ldr	r2, [pc, #296]	; (8012ad4 <readCanToStructs+0x1838>)
 80129aa:	f240 4112 	movw	r1, #1042	; 0x412
 80129ae:	fb01 f303 	mul.w	r3, r1, r3
 80129b2:	4413      	add	r3, r2
 80129b4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129be:	429a      	cmp	r2, r3
 80129c0:	d015      	beq.n	80129ee <readCanToStructs+0x1752>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 80129c2:	484a      	ldr	r0, [pc, #296]	; (8012aec <readCanToStructs+0x1850>)
 80129c4:	f012 fd68 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80129c8:	2204      	movs	r2, #4
 80129ca:	2100      	movs	r1, #0
 80129cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129ce:	f012 fbdf 	bl	8025190 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80129d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129d6:	4a3f      	ldr	r2, [pc, #252]	; (8012ad4 <readCanToStructs+0x1838>)
 80129d8:	f240 4112 	movw	r1, #1042	; 0x412
 80129dc:	fb01 f303 	mul.w	r3, r1, r3
 80129e0:	4413      	add	r3, r2
 80129e2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80129e6:	2200      	movs	r2, #0
 80129e8:	701a      	strb	r2, [r3, #0]
					break;
 80129ea:	f000 bc50 	b.w	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr += (7 * uc_seqNo);
 80129ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129f2:	4613      	mov	r3, r2
 80129f4:	00db      	lsls	r3, r3, #3
 80129f6:	1a9b      	subs	r3, r3, r2
 80129f8:	461a      	mov	r2, r3
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	4413      	add	r3, r2
 80129fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a00:	2301      	movs	r3, #1
 8012a02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a06:	e016      	b.n	8012a36 <readCanToStructs+0x179a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012a08:	4b31      	ldr	r3, [pc, #196]	; (8012ad0 <readCanToStructs+0x1834>)
 8012a0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a0e:	885b      	ldrh	r3, [r3, #2]
 8012a10:	461a      	mov	r2, r3
 8012a12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a16:	492e      	ldr	r1, [pc, #184]	; (8012ad0 <readCanToStructs+0x1834>)
 8012a18:	0112      	lsls	r2, r2, #4
 8012a1a:	440a      	add	r2, r1
 8012a1c:	4413      	add	r3, r2
 8012a1e:	3304      	adds	r3, #4
 8012a20:	781a      	ldrb	r2, [r3, #0]
 8012a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a24:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	3301      	adds	r3, #1
 8012a2a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a30:	3301      	adds	r3, #1
 8012a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a36:	4b26      	ldr	r3, [pc, #152]	; (8012ad0 <readCanToStructs+0x1834>)
 8012a38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a3c:	885b      	ldrh	r3, [r3, #2]
 8012a3e:	4a24      	ldr	r2, [pc, #144]	; (8012ad0 <readCanToStructs+0x1834>)
 8012a40:	011b      	lsls	r3, r3, #4
 8012a42:	4413      	add	r3, r2
 8012a44:	330c      	adds	r3, #12
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d3db      	bcc.n	8012a08 <readCanToStructs+0x176c>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a54:	4a1f      	ldr	r2, [pc, #124]	; (8012ad4 <readCanToStructs+0x1838>)
 8012a56:	f240 4112 	movw	r1, #1042	; 0x412
 8012a5a:	fb01 f303 	mul.w	r3, r1, r3
 8012a5e:	4413      	add	r3, r2
 8012a60:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	461a      	mov	r2, r3
 8012a68:	4613      	mov	r3, r2
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012a6e:	4b18      	ldr	r3, [pc, #96]	; (8012ad0 <readCanToStructs+0x1834>)
 8012a70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a74:	885b      	ldrh	r3, [r3, #2]
 8012a76:	4916      	ldr	r1, [pc, #88]	; (8012ad0 <readCanToStructs+0x1834>)
 8012a78:	011b      	lsls	r3, r3, #4
 8012a7a:	440b      	add	r3, r1
 8012a7c:	330c      	adds	r3, #12
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	3b01      	subs	r3, #1
 8012a82:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012a84:	2b03      	cmp	r3, #3
 8012a86:	d939      	bls.n	8012afc <readCanToStructs+0x1860>
 8012a88:	4b17      	ldr	r3, [pc, #92]	; (8012ae8 <readCanToStructs+0x184c>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012a8e:	4b18      	ldr	r3, [pc, #96]	; (8012af0 <readCanToStructs+0x1854>)
 8012a90:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8012a92:	4b13      	ldr	r3, [pc, #76]	; (8012ae0 <readCanToStructs+0x1844>)
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d102      	bne.n	8012aa0 <readCanToStructs+0x1804>
						printf("O_Info1_RCV\n");
 8012a9a:	4816      	ldr	r0, [pc, #88]	; (8012af4 <readCanToStructs+0x1858>)
 8012a9c:	f012 fcfc 	bl	8025498 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012aa0:	4b15      	ldr	r3, [pc, #84]	; (8012af8 <readCanToStructs+0x185c>)
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012aa6:	f005 fc51 	bl	801834c <HAL_GetTick>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	4a12      	ldr	r2, [pc, #72]	; (8012af8 <readCanToStructs+0x185c>)
 8012aae:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ab4:	4a07      	ldr	r2, [pc, #28]	; (8012ad4 <readCanToStructs+0x1838>)
 8012ab6:	f240 4112 	movw	r1, #1042	; 0x412
 8012aba:	fb01 f303 	mul.w	r3, r1, r3
 8012abe:	4413      	add	r3, r2
 8012ac0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	701a      	strb	r2, [r3, #0]
				break;
 8012ac8:	e3e1      	b.n	801328e <readCanToStructs+0x1ff2>
 8012aca:	bf00      	nop
 8012acc:	20002cd0 	.word	0x20002cd0
 8012ad0:	20005f4c 	.word	0x20005f4c
 8012ad4:	20005728 	.word	0x20005728
 8012ad8:	080299fc 	.word	0x080299fc
 8012adc:	20002cc8 	.word	0x20002cc8
 8012ae0:	200009b5 	.word	0x200009b5
 8012ae4:	08029a18 	.word	0x08029a18
 8012ae8:	20003978 	.word	0x20003978
 8012aec:	08029a30 	.word	0x08029a30
 8012af0:	20003974 	.word	0x20003974
 8012af4:	08029ba4 	.word	0x08029ba4
 8012af8:	2000397c 	.word	0x2000397c
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8012afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b00:	4a98      	ldr	r2, [pc, #608]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012b02:	f240 4112 	movw	r1, #1042	; 0x412
 8012b06:	fb01 f303 	mul.w	r3, r1, r3
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012b10:	2201      	movs	r2, #1
 8012b12:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8012b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b18:	4992      	ldr	r1, [pc, #584]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012b1a:	f240 4212 	movw	r2, #1042	; 0x412
 8012b1e:	fb03 f202 	mul.w	r2, r3, r2
 8012b22:	440a      	add	r2, r1
 8012b24:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8012b28:	7812      	ldrb	r2, [r2, #0]
 8012b2a:	3201      	adds	r2, #1
 8012b2c:	b2d0      	uxtb	r0, r2
 8012b2e:	4a8d      	ldr	r2, [pc, #564]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012b30:	f240 4112 	movw	r1, #1042	; 0x412
 8012b34:	fb01 f303 	mul.w	r3, r1, r3
 8012b38:	4413      	add	r3, r2
 8012b3a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012b3e:	4602      	mov	r2, r0
 8012b40:	701a      	strb	r2, [r3, #0]
				break;
 8012b42:	e3a4      	b.n	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8012b44:	4b88      	ldr	r3, [pc, #544]	; (8012d68 <readCanToStructs+0x1acc>)
 8012b46:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012b48:	4b88      	ldr	r3, [pc, #544]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012b4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b4e:	885b      	ldrh	r3, [r3, #2]
 8012b50:	4a86      	ldr	r2, [pc, #536]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012b52:	011b      	lsls	r3, r3, #4
 8012b54:	4413      	add	r3, r2
 8012b56:	3304      	adds	r3, #4
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d110      	bne.n	8012b88 <readCanToStructs+0x18ec>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012b66:	2204      	movs	r2, #4
 8012b68:	2100      	movs	r1, #0
 8012b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b6c:	f012 fb10 	bl	8025190 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b74:	4a7b      	ldr	r2, [pc, #492]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012b76:	f240 4112 	movw	r1, #1042	; 0x412
 8012b7a:	fb01 f303 	mul.w	r3, r1, r3
 8012b7e:	4413      	add	r3, r2
 8012b80:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012b84:	2200      	movs	r2, #0
 8012b86:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b8c:	4a75      	ldr	r2, [pc, #468]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012b8e:	f240 4112 	movw	r1, #1042	; 0x412
 8012b92:	fb01 f303 	mul.w	r3, r1, r3
 8012b96:	4413      	add	r3, r2
 8012b98:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d014      	beq.n	8012bd0 <readCanToStructs+0x1934>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8012ba6:	4872      	ldr	r0, [pc, #456]	; (8012d70 <readCanToStructs+0x1ad4>)
 8012ba8:	f012 fc76 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012bac:	2204      	movs	r2, #4
 8012bae:	2100      	movs	r1, #0
 8012bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bb2:	f012 faed 	bl	8025190 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bba:	4a6a      	ldr	r2, [pc, #424]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012bbc:	f240 4112 	movw	r1, #1042	; 0x412
 8012bc0:	fb01 f303 	mul.w	r3, r1, r3
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012bca:	2200      	movs	r2, #0
 8012bcc:	701a      	strb	r2, [r3, #0]
					break;
 8012bce:	e35e      	b.n	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012bd0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	1a9b      	subs	r3, r3, r2
 8012bda:	461a      	mov	r2, r3
 8012bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bde:	4413      	add	r3, r2
 8012be0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012be2:	2301      	movs	r3, #1
 8012be4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012be8:	e016      	b.n	8012c18 <readCanToStructs+0x197c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012bea:	4b60      	ldr	r3, [pc, #384]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012bec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bf0:	885b      	ldrh	r3, [r3, #2]
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bf8:	495c      	ldr	r1, [pc, #368]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012bfa:	0112      	lsls	r2, r2, #4
 8012bfc:	440a      	add	r2, r1
 8012bfe:	4413      	add	r3, r2
 8012c00:	3304      	adds	r3, #4
 8012c02:	781a      	ldrb	r2, [r3, #0]
 8012c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c06:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c12:	3301      	adds	r3, #1
 8012c14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c18:	4b54      	ldr	r3, [pc, #336]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012c1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c1e:	885b      	ldrh	r3, [r3, #2]
 8012c20:	4a52      	ldr	r2, [pc, #328]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012c22:	011b      	lsls	r3, r3, #4
 8012c24:	4413      	add	r3, r2
 8012c26:	330c      	adds	r3, #12
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d3db      	bcc.n	8012bea <readCanToStructs+0x194e>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c36:	4a4b      	ldr	r2, [pc, #300]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012c38:	f240 4112 	movw	r1, #1042	; 0x412
 8012c3c:	fb01 f303 	mul.w	r3, r1, r3
 8012c40:	4413      	add	r3, r2
 8012c42:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	461a      	mov	r2, r3
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	00db      	lsls	r3, r3, #3
 8012c4e:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012c50:	4b46      	ldr	r3, [pc, #280]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012c52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c56:	885b      	ldrh	r3, [r3, #2]
 8012c58:	4944      	ldr	r1, [pc, #272]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012c5a:	011b      	lsls	r3, r3, #4
 8012c5c:	440b      	add	r3, r1
 8012c5e:	330c      	adds	r3, #12
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	3b01      	subs	r3, #1
 8012c64:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012c66:	2b03      	cmp	r3, #3
 8012c68:	d920      	bls.n	8012cac <readCanToStructs+0x1a10>
 8012c6a:	4b3f      	ldr	r3, [pc, #252]	; (8012d68 <readCanToStructs+0x1acc>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012c70:	4b40      	ldr	r3, [pc, #256]	; (8012d74 <readCanToStructs+0x1ad8>)
 8012c72:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8012c74:	4b40      	ldr	r3, [pc, #256]	; (8012d78 <readCanToStructs+0x1adc>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d102      	bne.n	8012c82 <readCanToStructs+0x19e6>
						printf("O_Info2_RCV\n");
 8012c7c:	483f      	ldr	r0, [pc, #252]	; (8012d7c <readCanToStructs+0x1ae0>)
 8012c7e:	f012 fc0b 	bl	8025498 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012c82:	4b3f      	ldr	r3, [pc, #252]	; (8012d80 <readCanToStructs+0x1ae4>)
 8012c84:	2201      	movs	r2, #1
 8012c86:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012c88:	f005 fb60 	bl	801834c <HAL_GetTick>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	4a3c      	ldr	r2, [pc, #240]	; (8012d80 <readCanToStructs+0x1ae4>)
 8012c90:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c96:	4a33      	ldr	r2, [pc, #204]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012c98:	f240 4112 	movw	r1, #1042	; 0x412
 8012c9c:	fb01 f303 	mul.w	r3, r1, r3
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	701a      	strb	r2, [r3, #0]
				break;
 8012caa:	e2f0      	b.n	801328e <readCanToStructs+0x1ff2>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8012cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cb0:	4a2c      	ldr	r2, [pc, #176]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012cb2:	f240 4112 	movw	r1, #1042	; 0x412
 8012cb6:	fb01 f303 	mul.w	r3, r1, r3
 8012cba:	4413      	add	r3, r2
 8012cbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8012cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cc8:	4926      	ldr	r1, [pc, #152]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012cca:	f240 4212 	movw	r2, #1042	; 0x412
 8012cce:	fb03 f202 	mul.w	r2, r3, r2
 8012cd2:	440a      	add	r2, r1
 8012cd4:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8012cd8:	7812      	ldrb	r2, [r2, #0]
 8012cda:	3201      	adds	r2, #1
 8012cdc:	b2d0      	uxtb	r0, r2
 8012cde:	4a21      	ldr	r2, [pc, #132]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012ce0:	f240 4112 	movw	r1, #1042	; 0x412
 8012ce4:	fb01 f303 	mul.w	r3, r1, r3
 8012ce8:	4413      	add	r3, r2
 8012cea:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012cee:	4602      	mov	r2, r0
 8012cf0:	701a      	strb	r2, [r3, #0]
				break;
 8012cf2:	e2cc      	b.n	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8012cf4:	4b23      	ldr	r3, [pc, #140]	; (8012d84 <readCanToStructs+0x1ae8>)
 8012cf6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012cf8:	4b1c      	ldr	r3, [pc, #112]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012cfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012cfe:	885b      	ldrh	r3, [r3, #2]
 8012d00:	4a1a      	ldr	r2, [pc, #104]	; (8012d6c <readCanToStructs+0x1ad0>)
 8012d02:	011b      	lsls	r3, r3, #4
 8012d04:	4413      	add	r3, r2
 8012d06:	3304      	adds	r3, #4
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8012d0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d005      	beq.n	8012d22 <readCanToStructs+0x1a86>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8012d16:	4b1c      	ldr	r3, [pc, #112]	; (8012d88 <readCanToStructs+0x1aec>)
 8012d18:	881b      	ldrh	r3, [r3, #0]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1e:	4413      	add	r3, r2
 8012d20:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8012d22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d117      	bne.n	8012d5a <readCanToStructs+0x1abe>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012d2a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012d2e:	2100      	movs	r1, #0
 8012d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d32:	f012 fa2d 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d3a:	4a0a      	ldr	r2, [pc, #40]	; (8012d64 <readCanToStructs+0x1ac8>)
 8012d3c:	f240 4112 	movw	r1, #1042	; 0x412
 8012d40:	fb01 f303 	mul.w	r3, r1, r3
 8012d44:	4413      	add	r3, r2
 8012d46:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012d4e:	4b0e      	ldr	r3, [pc, #56]	; (8012d88 <readCanToStructs+0x1aec>)
 8012d50:	2200      	movs	r2, #0
 8012d52:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8012d54:	4b0d      	ldr	r3, [pc, #52]	; (8012d8c <readCanToStructs+0x1af0>)
 8012d56:	2200      	movs	r2, #0
 8012d58:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d60:	e033      	b.n	8012dca <readCanToStructs+0x1b2e>
 8012d62:	bf00      	nop
 8012d64:	20005728 	.word	0x20005728
 8012d68:	20003978 	.word	0x20003978
 8012d6c:	20005f4c 	.word	0x20005f4c
 8012d70:	08029a64 	.word	0x08029a64
 8012d74:	20003974 	.word	0x20003974
 8012d78:	200009b5 	.word	0x200009b5
 8012d7c:	08029bb0 	.word	0x08029bb0
 8012d80:	2000397c 	.word	0x2000397c
 8012d84:	20003fa4 	.word	0x20003fa4
 8012d88:	2000a0a4 	.word	0x2000a0a4
 8012d8c:	2000a0a6 	.word	0x2000a0a6
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012d90:	4ba2      	ldr	r3, [pc, #648]	; (801301c <readCanToStructs+0x1d80>)
 8012d92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d96:	885b      	ldrh	r3, [r3, #2]
 8012d98:	461a      	mov	r2, r3
 8012d9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d9e:	499f      	ldr	r1, [pc, #636]	; (801301c <readCanToStructs+0x1d80>)
 8012da0:	0112      	lsls	r2, r2, #4
 8012da2:	440a      	add	r2, r1
 8012da4:	4413      	add	r3, r2
 8012da6:	3304      	adds	r3, #4
 8012da8:	781a      	ldrb	r2, [r3, #0]
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db0:	3301      	adds	r3, #1
 8012db2:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8012db4:	4b9a      	ldr	r3, [pc, #616]	; (8013020 <readCanToStructs+0x1d84>)
 8012db6:	881b      	ldrh	r3, [r3, #0]
 8012db8:	3301      	adds	r3, #1
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	4b98      	ldr	r3, [pc, #608]	; (8013020 <readCanToStructs+0x1d84>)
 8012dbe:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012dca:	4b94      	ldr	r3, [pc, #592]	; (801301c <readCanToStructs+0x1d80>)
 8012dcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012dd0:	885b      	ldrh	r3, [r3, #2]
 8012dd2:	4a92      	ldr	r2, [pc, #584]	; (801301c <readCanToStructs+0x1d80>)
 8012dd4:	011b      	lsls	r3, r3, #4
 8012dd6:	4413      	add	r3, r2
 8012dd8:	330c      	adds	r3, #12
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d3d5      	bcc.n	8012d90 <readCanToStructs+0x1af4>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012de8:	4a8e      	ldr	r2, [pc, #568]	; (8013024 <readCanToStructs+0x1d88>)
 8012dea:	f240 4112 	movw	r1, #1042	; 0x412
 8012dee:	fb01 f303 	mul.w	r3, r1, r3
 8012df2:	4413      	add	r3, r2
 8012df4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d026      	beq.n	8012e50 <readCanToStructs+0x1bb4>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8012e02:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8012e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e0a:	4a86      	ldr	r2, [pc, #536]	; (8013024 <readCanToStructs+0x1d88>)
 8012e0c:	f240 4012 	movw	r0, #1042	; 0x412
 8012e10:	fb00 f303 	mul.w	r3, r0, r3
 8012e14:	4413      	add	r3, r2
 8012e16:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	4882      	ldr	r0, [pc, #520]	; (8013028 <readCanToStructs+0x1d8c>)
 8012e20:	f012 fa9e 	bl	8025360 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012e24:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012e28:	2100      	movs	r1, #0
 8012e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e2c:	f012 f9b0 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e34:	4a7b      	ldr	r2, [pc, #492]	; (8013024 <readCanToStructs+0x1d88>)
 8012e36:	f240 4112 	movw	r1, #1042	; 0x412
 8012e3a:	fb01 f303 	mul.w	r3, r1, r3
 8012e3e:	4413      	add	r3, r2
 8012e40:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012e44:	2200      	movs	r2, #0
 8012e46:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012e48:	4b75      	ldr	r3, [pc, #468]	; (8013020 <readCanToStructs+0x1d84>)
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	801a      	strh	r2, [r3, #0]
					break;
 8012e4e:	e21e      	b.n	801328e <readCanToStructs+0x1ff2>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e54:	4973      	ldr	r1, [pc, #460]	; (8013024 <readCanToStructs+0x1d88>)
 8012e56:	f240 4212 	movw	r2, #1042	; 0x412
 8012e5a:	fb03 f202 	mul.w	r2, r3, r2
 8012e5e:	440a      	add	r2, r1
 8012e60:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012e64:	7812      	ldrb	r2, [r2, #0]
 8012e66:	3201      	adds	r2, #1
 8012e68:	b2d0      	uxtb	r0, r2
 8012e6a:	4a6e      	ldr	r2, [pc, #440]	; (8013024 <readCanToStructs+0x1d88>)
 8012e6c:	f240 4112 	movw	r1, #1042	; 0x412
 8012e70:	fb01 f303 	mul.w	r3, r1, r3
 8012e74:	4413      	add	r3, r2
 8012e76:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8012e7e:	4b6b      	ldr	r3, [pc, #428]	; (801302c <readCanToStructs+0x1d90>)
 8012e80:	881b      	ldrh	r3, [r3, #0]
 8012e82:	3304      	adds	r3, #4
 8012e84:	b29a      	uxth	r2, r3
 8012e86:	4b6a      	ldr	r3, [pc, #424]	; (8013030 <readCanToStructs+0x1d94>)
 8012e88:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8012e8a:	4b65      	ldr	r3, [pc, #404]	; (8013020 <readCanToStructs+0x1d84>)
 8012e8c:	881a      	ldrh	r2, [r3, #0]
 8012e8e:	4b68      	ldr	r3, [pc, #416]	; (8013030 <readCanToStructs+0x1d94>)
 8012e90:	881b      	ldrh	r3, [r3, #0]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	f0c0 81f8 	bcc.w	8013288 <readCanToStructs+0x1fec>
					if(Debug_flag == 1)
 8012e98:	4b66      	ldr	r3, [pc, #408]	; (8013034 <readCanToStructs+0x1d98>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	d102      	bne.n	8012ea6 <readCanToStructs+0x1c0a>
						printf("EI1 Relay Info Received\n");
 8012ea0:	4865      	ldr	r0, [pc, #404]	; (8013038 <readCanToStructs+0x1d9c>)
 8012ea2:	f012 faf9 	bl	8025498 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8012ea6:	4a65      	ldr	r2, [pc, #404]	; (801303c <readCanToStructs+0x1da0>)
 8012ea8:	4b60      	ldr	r3, [pc, #384]	; (801302c <readCanToStructs+0x1d90>)
 8012eaa:	4610      	mov	r0, r2
 8012eac:	4619      	mov	r1, r3
 8012eae:	f44f 7301 	mov.w	r3, #516	; 0x204
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	f012 f944 	bl	8025140 <memcpy>
					DataTraverser = 0;
 8012eb8:	4b59      	ldr	r3, [pc, #356]	; (8013020 <readCanToStructs+0x1d84>)
 8012eba:	2200      	movs	r2, #0
 8012ebc:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8012ebe:	4b5c      	ldr	r3, [pc, #368]	; (8013030 <readCanToStructs+0x1d94>)
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012ec4:	4b5e      	ldr	r3, [pc, #376]	; (8013040 <readCanToStructs+0x1da4>)
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012eca:	f005 fa3f 	bl	801834c <HAL_GetTick>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	4a5b      	ldr	r2, [pc, #364]	; (8013040 <readCanToStructs+0x1da4>)
 8012ed2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ed8:	4a52      	ldr	r2, [pc, #328]	; (8013024 <readCanToStructs+0x1d88>)
 8012eda:	f240 4112 	movw	r1, #1042	; 0x412
 8012ede:	fb01 f303 	mul.w	r3, r1, r3
 8012ee2:	4413      	add	r3, r2
 8012ee4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012ee8:	2200      	movs	r2, #0
 8012eea:	701a      	strb	r2, [r3, #0]
				break;
 8012eec:	e1cc      	b.n	8013288 <readCanToStructs+0x1fec>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8012eee:	4b4f      	ldr	r3, [pc, #316]	; (801302c <readCanToStructs+0x1d90>)
 8012ef0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012ef2:	4b4a      	ldr	r3, [pc, #296]	; (801301c <readCanToStructs+0x1d80>)
 8012ef4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ef8:	885b      	ldrh	r3, [r3, #2]
 8012efa:	4a48      	ldr	r2, [pc, #288]	; (801301c <readCanToStructs+0x1d80>)
 8012efc:	011b      	lsls	r3, r3, #4
 8012efe:	4413      	add	r3, r2
 8012f00:	3304      	adds	r3, #4
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8012f08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d005      	beq.n	8012f1c <readCanToStructs+0x1c80>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8012f10:	4b43      	ldr	r3, [pc, #268]	; (8013020 <readCanToStructs+0x1d84>)
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	461a      	mov	r2, r3
 8012f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f18:	4413      	add	r3, r2
 8012f1a:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8012f1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d117      	bne.n	8012f54 <readCanToStructs+0x1cb8>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012f24:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012f28:	2100      	movs	r1, #0
 8012f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f2c:	f012 f930 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f34:	4a3b      	ldr	r2, [pc, #236]	; (8013024 <readCanToStructs+0x1d88>)
 8012f36:	f240 4112 	movw	r1, #1042	; 0x412
 8012f3a:	fb01 f303 	mul.w	r3, r1, r3
 8012f3e:	4413      	add	r3, r2
 8012f40:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012f44:	2200      	movs	r2, #0
 8012f46:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012f48:	4b35      	ldr	r3, [pc, #212]	; (8013020 <readCanToStructs+0x1d84>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8012f4e:	4b38      	ldr	r3, [pc, #224]	; (8013030 <readCanToStructs+0x1d94>)
 8012f50:	2200      	movs	r2, #0
 8012f52:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012f54:	2301      	movs	r3, #1
 8012f56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f5a:	e01c      	b.n	8012f96 <readCanToStructs+0x1cfa>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012f5c:	4b2f      	ldr	r3, [pc, #188]	; (801301c <readCanToStructs+0x1d80>)
 8012f5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f62:	885b      	ldrh	r3, [r3, #2]
 8012f64:	461a      	mov	r2, r3
 8012f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f6a:	492c      	ldr	r1, [pc, #176]	; (801301c <readCanToStructs+0x1d80>)
 8012f6c:	0112      	lsls	r2, r2, #4
 8012f6e:	440a      	add	r2, r1
 8012f70:	4413      	add	r3, r2
 8012f72:	3304      	adds	r3, #4
 8012f74:	781a      	ldrb	r2, [r3, #0]
 8012f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f78:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8012f80:	4b27      	ldr	r3, [pc, #156]	; (8013020 <readCanToStructs+0x1d84>)
 8012f82:	881b      	ldrh	r3, [r3, #0]
 8012f84:	3301      	adds	r3, #1
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	4b25      	ldr	r3, [pc, #148]	; (8013020 <readCanToStructs+0x1d84>)
 8012f8a:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012f8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f90:	3301      	adds	r3, #1
 8012f92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f96:	4b21      	ldr	r3, [pc, #132]	; (801301c <readCanToStructs+0x1d80>)
 8012f98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f9c:	885b      	ldrh	r3, [r3, #2]
 8012f9e:	4a1f      	ldr	r2, [pc, #124]	; (801301c <readCanToStructs+0x1d80>)
 8012fa0:	011b      	lsls	r3, r3, #4
 8012fa2:	4413      	add	r3, r2
 8012fa4:	330c      	adds	r3, #12
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d3d5      	bcc.n	8012f5c <readCanToStructs+0x1cc0>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fb4:	4a1b      	ldr	r2, [pc, #108]	; (8013024 <readCanToStructs+0x1d88>)
 8012fb6:	f240 4112 	movw	r1, #1042	; 0x412
 8012fba:	fb01 f303 	mul.w	r3, r1, r3
 8012fbe:	4413      	add	r3, r2
 8012fc0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d03c      	beq.n	8013048 <readCanToStructs+0x1dac>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8012fce:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8012fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fd6:	4a13      	ldr	r2, [pc, #76]	; (8013024 <readCanToStructs+0x1d88>)
 8012fd8:	f240 4012 	movw	r0, #1042	; 0x412
 8012fdc:	fb00 f303 	mul.w	r3, r0, r3
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	461a      	mov	r2, r3
 8012fea:	4816      	ldr	r0, [pc, #88]	; (8013044 <readCanToStructs+0x1da8>)
 8012fec:	f012 f9b8 	bl	8025360 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012ff0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ff8:	f012 f8ca 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013000:	4a08      	ldr	r2, [pc, #32]	; (8013024 <readCanToStructs+0x1d88>)
 8013002:	f240 4112 	movw	r1, #1042	; 0x412
 8013006:	fb01 f303 	mul.w	r3, r1, r3
 801300a:	4413      	add	r3, r2
 801300c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013010:	2200      	movs	r2, #0
 8013012:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013014:	4b02      	ldr	r3, [pc, #8]	; (8013020 <readCanToStructs+0x1d84>)
 8013016:	2200      	movs	r2, #0
 8013018:	801a      	strh	r2, [r3, #0]
					break;
 801301a:	e138      	b.n	801328e <readCanToStructs+0x1ff2>
 801301c:	20005f4c 	.word	0x20005f4c
 8013020:	2000a0a4 	.word	0x2000a0a4
 8013024:	20005728 	.word	0x20005728
 8013028:	08029bbc 	.word	0x08029bbc
 801302c:	20003fa4 	.word	0x20003fa4
 8013030:	2000a0a6 	.word	0x2000a0a6
 8013034:	200009b5 	.word	0x200009b5
 8013038:	08029be8 	.word	0x08029be8
 801303c:	20003da0 	.word	0x20003da0
 8013040:	2000397c 	.word	0x2000397c
 8013044:	08029c00 	.word	0x08029c00
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8013048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801304c:	49b8      	ldr	r1, [pc, #736]	; (8013330 <readCanToStructs+0x2094>)
 801304e:	f240 4212 	movw	r2, #1042	; 0x412
 8013052:	fb03 f202 	mul.w	r2, r3, r2
 8013056:	440a      	add	r2, r1
 8013058:	f202 4211 	addw	r2, r2, #1041	; 0x411
 801305c:	7812      	ldrb	r2, [r2, #0]
 801305e:	3201      	adds	r2, #1
 8013060:	b2d0      	uxtb	r0, r2
 8013062:	4ab3      	ldr	r2, [pc, #716]	; (8013330 <readCanToStructs+0x2094>)
 8013064:	f240 4112 	movw	r1, #1042	; 0x412
 8013068:	fb01 f303 	mul.w	r3, r1, r3
 801306c:	4413      	add	r3, r2
 801306e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013072:	4602      	mov	r2, r0
 8013074:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8013076:	4baf      	ldr	r3, [pc, #700]	; (8013334 <readCanToStructs+0x2098>)
 8013078:	881b      	ldrh	r3, [r3, #0]
 801307a:	3304      	adds	r3, #4
 801307c:	b29a      	uxth	r2, r3
 801307e:	4bae      	ldr	r3, [pc, #696]	; (8013338 <readCanToStructs+0x209c>)
 8013080:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8013082:	4bae      	ldr	r3, [pc, #696]	; (801333c <readCanToStructs+0x20a0>)
 8013084:	881a      	ldrh	r2, [r3, #0]
 8013086:	4bac      	ldr	r3, [pc, #688]	; (8013338 <readCanToStructs+0x209c>)
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	429a      	cmp	r2, r3
 801308c:	f0c0 80fe 	bcc.w	801328c <readCanToStructs+0x1ff0>
					if(Debug_flag == 1)
 8013090:	4bab      	ldr	r3, [pc, #684]	; (8013340 <readCanToStructs+0x20a4>)
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	2b01      	cmp	r3, #1
 8013096:	d102      	bne.n	801309e <readCanToStructs+0x1e02>
						printf("EI2 Relay Info Received\n");
 8013098:	48aa      	ldr	r0, [pc, #680]	; (8013344 <readCanToStructs+0x20a8>)
 801309a:	f012 f9fd 	bl	8025498 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 801309e:	4aaa      	ldr	r2, [pc, #680]	; (8013348 <readCanToStructs+0x20ac>)
 80130a0:	4ba4      	ldr	r3, [pc, #656]	; (8013334 <readCanToStructs+0x2098>)
 80130a2:	4610      	mov	r0, r2
 80130a4:	4619      	mov	r1, r3
 80130a6:	f44f 7301 	mov.w	r3, #516	; 0x204
 80130aa:	461a      	mov	r2, r3
 80130ac:	f012 f848 	bl	8025140 <memcpy>
					DataTraverser = 0;
 80130b0:	4ba2      	ldr	r3, [pc, #648]	; (801333c <readCanToStructs+0x20a0>)
 80130b2:	2200      	movs	r2, #0
 80130b4:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 80130b6:	4ba0      	ldr	r3, [pc, #640]	; (8013338 <readCanToStructs+0x209c>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80130bc:	4ba3      	ldr	r3, [pc, #652]	; (801334c <readCanToStructs+0x20b0>)
 80130be:	2201      	movs	r2, #1
 80130c0:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80130c2:	f005 f943 	bl	801834c <HAL_GetTick>
 80130c6:	4603      	mov	r3, r0
 80130c8:	4aa0      	ldr	r2, [pc, #640]	; (801334c <readCanToStructs+0x20b0>)
 80130ca:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80130cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130d0:	4a97      	ldr	r2, [pc, #604]	; (8013330 <readCanToStructs+0x2094>)
 80130d2:	f240 4112 	movw	r1, #1042	; 0x412
 80130d6:	fb01 f303 	mul.w	r3, r1, r3
 80130da:	4413      	add	r3, r2
 80130dc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80130e0:	2200      	movs	r2, #0
 80130e2:	701a      	strb	r2, [r3, #0]
				break;
 80130e4:	e0d2      	b.n	801328c <readCanToStructs+0x1ff0>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 80130e6:	4b9a      	ldr	r3, [pc, #616]	; (8013350 <readCanToStructs+0x20b4>)
 80130e8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80130ea:	4b9a      	ldr	r3, [pc, #616]	; (8013354 <readCanToStructs+0x20b8>)
 80130ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80130f0:	885b      	ldrh	r3, [r3, #2]
 80130f2:	4a98      	ldr	r2, [pc, #608]	; (8013354 <readCanToStructs+0x20b8>)
 80130f4:	011b      	lsls	r3, r3, #4
 80130f6:	4413      	add	r3, r2
 80130f8:	3304      	adds	r3, #4
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013100:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013104:	2b00      	cmp	r3, #0
 8013106:	d110      	bne.n	801312a <readCanToStructs+0x1e8e>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013108:	2208      	movs	r2, #8
 801310a:	2100      	movs	r1, #0
 801310c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801310e:	f012 f83f 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013116:	4a86      	ldr	r2, [pc, #536]	; (8013330 <readCanToStructs+0x2094>)
 8013118:	f240 4112 	movw	r1, #1042	; 0x412
 801311c:	fb01 f303 	mul.w	r3, r1, r3
 8013120:	4413      	add	r3, r2
 8013122:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013126:	2200      	movs	r2, #0
 8013128:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 801312a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801312e:	4a80      	ldr	r2, [pc, #512]	; (8013330 <readCanToStructs+0x2094>)
 8013130:	f240 4112 	movw	r1, #1042	; 0x412
 8013134:	fb01 f303 	mul.w	r3, r1, r3
 8013138:	4413      	add	r3, r2
 801313a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013144:	429a      	cmp	r2, r3
 8013146:	d014      	beq.n	8013172 <readCanToStructs+0x1ed6>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8013148:	4883      	ldr	r0, [pc, #524]	; (8013358 <readCanToStructs+0x20bc>)
 801314a:	f012 f9a5 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 801314e:	2208      	movs	r2, #8
 8013150:	2100      	movs	r1, #0
 8013152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013154:	f012 f81c 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801315c:	4a74      	ldr	r2, [pc, #464]	; (8013330 <readCanToStructs+0x2094>)
 801315e:	f240 4112 	movw	r1, #1042	; 0x412
 8013162:	fb01 f303 	mul.w	r3, r1, r3
 8013166:	4413      	add	r3, r2
 8013168:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801316c:	2200      	movs	r2, #0
 801316e:	701a      	strb	r2, [r3, #0]
					break;
 8013170:	e08d      	b.n	801328e <readCanToStructs+0x1ff2>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013172:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013176:	4613      	mov	r3, r2
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	1a9b      	subs	r3, r3, r2
 801317c:	461a      	mov	r2, r3
 801317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013180:	4413      	add	r3, r2
 8013182:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013184:	2301      	movs	r3, #1
 8013186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801318a:	e016      	b.n	80131ba <readCanToStructs+0x1f1e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801318c:	4b71      	ldr	r3, [pc, #452]	; (8013354 <readCanToStructs+0x20b8>)
 801318e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013192:	885b      	ldrh	r3, [r3, #2]
 8013194:	461a      	mov	r2, r3
 8013196:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801319a:	496e      	ldr	r1, [pc, #440]	; (8013354 <readCanToStructs+0x20b8>)
 801319c:	0112      	lsls	r2, r2, #4
 801319e:	440a      	add	r2, r1
 80131a0:	4413      	add	r3, r2
 80131a2:	3304      	adds	r3, #4
 80131a4:	781a      	ldrb	r2, [r3, #0]
 80131a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	3301      	adds	r3, #1
 80131ae:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80131b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131b4:	3301      	adds	r3, #1
 80131b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80131ba:	4b66      	ldr	r3, [pc, #408]	; (8013354 <readCanToStructs+0x20b8>)
 80131bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80131c0:	885b      	ldrh	r3, [r3, #2]
 80131c2:	4a64      	ldr	r2, [pc, #400]	; (8013354 <readCanToStructs+0x20b8>)
 80131c4:	011b      	lsls	r3, r3, #4
 80131c6:	4413      	add	r3, r2
 80131c8:	330c      	adds	r3, #12
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80131d0:	429a      	cmp	r2, r3
 80131d2:	d3db      	bcc.n	801318c <readCanToStructs+0x1ef0>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 80131d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131d8:	4a55      	ldr	r2, [pc, #340]	; (8013330 <readCanToStructs+0x2094>)
 80131da:	f240 4112 	movw	r1, #1042	; 0x412
 80131de:	fb01 f303 	mul.w	r3, r1, r3
 80131e2:	4413      	add	r3, r2
 80131e4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	461a      	mov	r2, r3
 80131ec:	4613      	mov	r3, r2
 80131ee:	00db      	lsls	r3, r3, #3
 80131f0:	1a9a      	subs	r2, r3, r2
 80131f2:	4b58      	ldr	r3, [pc, #352]	; (8013354 <readCanToStructs+0x20b8>)
 80131f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80131f8:	885b      	ldrh	r3, [r3, #2]
 80131fa:	4956      	ldr	r1, [pc, #344]	; (8013354 <readCanToStructs+0x20b8>)
 80131fc:	011b      	lsls	r3, r3, #4
 80131fe:	440b      	add	r3, r1
 8013200:	330c      	adds	r3, #12
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	3b01      	subs	r3, #1
 8013206:	4413      	add	r3, r2
 8013208:	2b07      	cmp	r3, #7
 801320a:	d917      	bls.n	801323c <readCanToStructs+0x1fa0>
					printf("Received Fault Injection Data\n");
 801320c:	4853      	ldr	r0, [pc, #332]	; (801335c <readCanToStructs+0x20c0>)
 801320e:	f012 f943 	bl	8025498 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013212:	4b4e      	ldr	r3, [pc, #312]	; (801334c <readCanToStructs+0x20b0>)
 8013214:	2201      	movs	r2, #1
 8013216:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013218:	f005 f898 	bl	801834c <HAL_GetTick>
 801321c:	4603      	mov	r3, r0
 801321e:	4a4b      	ldr	r2, [pc, #300]	; (801334c <readCanToStructs+0x20b0>)
 8013220:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013226:	4a42      	ldr	r2, [pc, #264]	; (8013330 <readCanToStructs+0x2094>)
 8013228:	f240 4112 	movw	r1, #1042	; 0x412
 801322c:	fb01 f303 	mul.w	r3, r1, r3
 8013230:	4413      	add	r3, r2
 8013232:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013236:	2200      	movs	r2, #0
 8013238:	701a      	strb	r2, [r3, #0]
				break;
 801323a:	e028      	b.n	801328e <readCanToStructs+0x1ff2>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 801323c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013240:	4a3b      	ldr	r2, [pc, #236]	; (8013330 <readCanToStructs+0x2094>)
 8013242:	f240 4112 	movw	r1, #1042	; 0x412
 8013246:	fb01 f303 	mul.w	r3, r1, r3
 801324a:	4413      	add	r3, r2
 801324c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013250:	2201      	movs	r2, #1
 8013252:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8013254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013258:	4935      	ldr	r1, [pc, #212]	; (8013330 <readCanToStructs+0x2094>)
 801325a:	f240 4212 	movw	r2, #1042	; 0x412
 801325e:	fb03 f202 	mul.w	r2, r3, r2
 8013262:	440a      	add	r2, r1
 8013264:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8013268:	7812      	ldrb	r2, [r2, #0]
 801326a:	3201      	adds	r2, #1
 801326c:	b2d0      	uxtb	r0, r2
 801326e:	4a30      	ldr	r2, [pc, #192]	; (8013330 <readCanToStructs+0x2094>)
 8013270:	f240 4112 	movw	r1, #1042	; 0x412
 8013274:	fb01 f303 	mul.w	r3, r1, r3
 8013278:	4413      	add	r3, r2
 801327a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801327e:	4602      	mov	r2, r0
 8013280:	701a      	strb	r2, [r3, #0]
				break;
 8013282:	e004      	b.n	801328e <readCanToStructs+0x1ff2>
				break;
 8013284:	bf00      	nop
 8013286:	e002      	b.n	801328e <readCanToStructs+0x1ff2>
				break;
 8013288:	bf00      	nop
 801328a:	e000      	b.n	801328e <readCanToStructs+0x1ff2>
				break;
 801328c:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 801328e:	4b31      	ldr	r3, [pc, #196]	; (8013354 <readCanToStructs+0x20b8>)
 8013290:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013294:	885b      	ldrh	r3, [r3, #2]
 8013296:	011b      	lsls	r3, r3, #4
 8013298:	4a2e      	ldr	r2, [pc, #184]	; (8013354 <readCanToStructs+0x20b8>)
 801329a:	4413      	add	r3, r2
 801329c:	2210      	movs	r2, #16
 801329e:	2100      	movs	r1, #0
 80132a0:	4618      	mov	r0, r3
 80132a2:	f011 ff75 	bl	8025190 <memset>
			canRead.Out++;
 80132a6:	4b2b      	ldr	r3, [pc, #172]	; (8013354 <readCanToStructs+0x20b8>)
 80132a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132ac:	885b      	ldrh	r3, [r3, #2]
 80132ae:	3301      	adds	r3, #1
 80132b0:	b29a      	uxth	r2, r3
 80132b2:	4b28      	ldr	r3, [pc, #160]	; (8013354 <readCanToStructs+0x20b8>)
 80132b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132b8:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80132ba:	4b26      	ldr	r3, [pc, #152]	; (8013354 <readCanToStructs+0x20b8>)
 80132bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132c0:	885b      	ldrh	r3, [r3, #2]
 80132c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80132c6:	d104      	bne.n	80132d2 <readCanToStructs+0x2036>
			{
				canRead.Out = 0;
 80132c8:	4b22      	ldr	r3, [pc, #136]	; (8013354 <readCanToStructs+0x20b8>)
 80132ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132ce:	2200      	movs	r2, #0
 80132d0:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80132d2:	f7fd ff8d 	bl	80111f0 <canDataReady>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	f47f a93f 	bne.w	801255c <readCanToStructs+0x12c0>
			}

		}
		/* __________ SIEMENS _________ */
	}
	break;
 80132de:	f001 b9c3 	b.w	8014668 <readCanToStructs+0x33cc>
	case MEDHA:
	{
		/* __________ MEDHA _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80132e2:	4b1c      	ldr	r3, [pc, #112]	; (8013354 <readCanToStructs+0x20b8>)
 80132e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132e8:	885b      	ldrh	r3, [r3, #2]
 80132ea:	4a1a      	ldr	r2, [pc, #104]	; (8013354 <readCanToStructs+0x20b8>)
 80132ec:	011b      	lsls	r3, r3, #4
 80132ee:	4413      	add	r3, r2
 80132f0:	330f      	adds	r3, #15
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	3b01      	subs	r3, #1
 80132f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80132fa:	4b16      	ldr	r3, [pc, #88]	; (8013354 <readCanToStructs+0x20b8>)
 80132fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013300:	885b      	ldrh	r3, [r3, #2]
 8013302:	4a14      	ldr	r2, [pc, #80]	; (8013354 <readCanToStructs+0x20b8>)
 8013304:	011b      	lsls	r3, r3, #4
 8013306:	4413      	add	r3, r2
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801330e:	f200 866e 	bhi.w	8013fee <readCanToStructs+0x2d52>
 8013312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013316:	d823      	bhi.n	8013360 <readCanToStructs+0x20c4>
 8013318:	f240 1203 	movw	r2, #259	; 0x103
 801331c:	4293      	cmp	r3, r2
 801331e:	d037      	beq.n	8013390 <readCanToStructs+0x20f4>
 8013320:	f240 1209 	movw	r2, #265	; 0x109
 8013324:	4293      	cmp	r3, r2
 8013326:	f000 8109 	beq.w	801353c <readCanToStructs+0x22a0>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
			default:
				break;
 801332a:	f000 be60 	b.w	8013fee <readCanToStructs+0x2d52>
 801332e:	bf00      	nop
 8013330:	20005728 	.word	0x20005728
 8013334:	20003fa4 	.word	0x20003fa4
 8013338:	2000a0a6 	.word	0x2000a0a6
 801333c:	2000a0a4 	.word	0x2000a0a4
 8013340:	200009b5 	.word	0x200009b5
 8013344:	08029c2c 	.word	0x08029c2c
 8013348:	20003da0 	.word	0x20003da0
 801334c:	2000397c 	.word	0x2000397c
 8013350:	20003968 	.word	0x20003968
 8013354:	20005f4c 	.word	0x20005f4c
 8013358:	08029b00 	.word	0x08029b00
 801335c:	08029b20 	.word	0x08029b20
 8013360:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8013364:	2b07      	cmp	r3, #7
 8013366:	f200 8642 	bhi.w	8013fee <readCanToStructs+0x2d52>
 801336a:	a201      	add	r2, pc, #4	; (adr r2, 8013370 <readCanToStructs+0x20d4>)
 801336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013370:	0801370f 	.word	0x0801370f
 8013374:	080138e5 	.word	0x080138e5
 8013378:	08013fef 	.word	0x08013fef
 801337c:	08013fef 	.word	0x08013fef
 8013380:	08013ae5 	.word	0x08013ae5
 8013384:	08013fef 	.word	0x08013fef
 8013388:	08013c77 	.word	0x08013c77
 801338c:	08013e49 	.word	0x08013e49
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013390:	4bc3      	ldr	r3, [pc, #780]	; (80136a0 <readCanToStructs+0x2404>)
 8013392:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013394:	4bc3      	ldr	r3, [pc, #780]	; (80136a4 <readCanToStructs+0x2408>)
 8013396:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801339a:	885b      	ldrh	r3, [r3, #2]
 801339c:	4ac1      	ldr	r2, [pc, #772]	; (80136a4 <readCanToStructs+0x2408>)
 801339e:	011b      	lsls	r3, r3, #4
 80133a0:	4413      	add	r3, r2
 80133a2:	3304      	adds	r3, #4
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80133aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d110      	bne.n	80133d4 <readCanToStructs+0x2138>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80133b2:	2206      	movs	r2, #6
 80133b4:	2100      	movs	r1, #0
 80133b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133b8:	f011 feea 	bl	8025190 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80133bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133c0:	4ab9      	ldr	r2, [pc, #740]	; (80136a8 <readCanToStructs+0x240c>)
 80133c2:	f240 4112 	movw	r1, #1042	; 0x412
 80133c6:	fb01 f303 	mul.w	r3, r1, r3
 80133ca:	4413      	add	r3, r2
 80133cc:	f203 2307 	addw	r3, r3, #519	; 0x207
 80133d0:	2200      	movs	r2, #0
 80133d2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80133d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133d8:	4ab3      	ldr	r2, [pc, #716]	; (80136a8 <readCanToStructs+0x240c>)
 80133da:	f240 4112 	movw	r1, #1042	; 0x412
 80133de:	fb01 f303 	mul.w	r3, r1, r3
 80133e2:	4413      	add	r3, r2
 80133e4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d015      	beq.n	801341e <readCanToStructs+0x2182>
					printf("GPS Packet Seq no MisMatch\n");
 80133f2:	48ae      	ldr	r0, [pc, #696]	; (80136ac <readCanToStructs+0x2410>)
 80133f4:	f012 f850 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80133f8:	2206      	movs	r2, #6
 80133fa:	2100      	movs	r1, #0
 80133fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133fe:	f011 fec7 	bl	8025190 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013406:	4aa8      	ldr	r2, [pc, #672]	; (80136a8 <readCanToStructs+0x240c>)
 8013408:	f240 4112 	movw	r1, #1042	; 0x412
 801340c:	fb01 f303 	mul.w	r3, r1, r3
 8013410:	4413      	add	r3, r2
 8013412:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013416:	2200      	movs	r2, #0
 8013418:	701a      	strb	r2, [r3, #0]
					break;
 801341a:	f000 bde9 	b.w	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr += (7 * uc_seqNo);
 801341e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013422:	4613      	mov	r3, r2
 8013424:	00db      	lsls	r3, r3, #3
 8013426:	1a9b      	subs	r3, r3, r2
 8013428:	461a      	mov	r2, r3
 801342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801342c:	4413      	add	r3, r2
 801342e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013430:	2301      	movs	r3, #1
 8013432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013436:	e016      	b.n	8013466 <readCanToStructs+0x21ca>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013438:	4b9a      	ldr	r3, [pc, #616]	; (80136a4 <readCanToStructs+0x2408>)
 801343a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801343e:	885b      	ldrh	r3, [r3, #2]
 8013440:	461a      	mov	r2, r3
 8013442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013446:	4997      	ldr	r1, [pc, #604]	; (80136a4 <readCanToStructs+0x2408>)
 8013448:	0112      	lsls	r2, r2, #4
 801344a:	440a      	add	r2, r1
 801344c:	4413      	add	r3, r2
 801344e:	3304      	adds	r3, #4
 8013450:	781a      	ldrb	r2, [r3, #0]
 8013452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013454:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013458:	3301      	adds	r3, #1
 801345a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801345c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013460:	3301      	adds	r3, #1
 8013462:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013466:	4b8f      	ldr	r3, [pc, #572]	; (80136a4 <readCanToStructs+0x2408>)
 8013468:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801346c:	885b      	ldrh	r3, [r3, #2]
 801346e:	4a8d      	ldr	r2, [pc, #564]	; (80136a4 <readCanToStructs+0x2408>)
 8013470:	011b      	lsls	r3, r3, #4
 8013472:	4413      	add	r3, r2
 8013474:	330c      	adds	r3, #12
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801347c:	429a      	cmp	r2, r3
 801347e:	d3db      	bcc.n	8013438 <readCanToStructs+0x219c>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013484:	4a88      	ldr	r2, [pc, #544]	; (80136a8 <readCanToStructs+0x240c>)
 8013486:	f240 4112 	movw	r1, #1042	; 0x412
 801348a:	fb01 f303 	mul.w	r3, r1, r3
 801348e:	4413      	add	r3, r2
 8013490:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	461a      	mov	r2, r3
 8013498:	4613      	mov	r3, r2
 801349a:	00db      	lsls	r3, r3, #3
 801349c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801349e:	4b81      	ldr	r3, [pc, #516]	; (80136a4 <readCanToStructs+0x2408>)
 80134a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134a4:	885b      	ldrh	r3, [r3, #2]
 80134a6:	497f      	ldr	r1, [pc, #508]	; (80136a4 <readCanToStructs+0x2408>)
 80134a8:	011b      	lsls	r3, r3, #4
 80134aa:	440b      	add	r3, r1
 80134ac:	330c      	adds	r3, #12
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	3b01      	subs	r3, #1
 80134b2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80134b4:	2b05      	cmp	r3, #5
 80134b6:	d91c      	bls.n	80134f2 <readCanToStructs+0x2256>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80134b8:	4b7d      	ldr	r3, [pc, #500]	; (80136b0 <readCanToStructs+0x2414>)
 80134ba:	4a79      	ldr	r2, [pc, #484]	; (80136a0 <readCanToStructs+0x2404>)
 80134bc:	6811      	ldr	r1, [r2, #0]
 80134be:	6019      	str	r1, [r3, #0]
 80134c0:	8892      	ldrh	r2, [r2, #4]
 80134c2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80134c4:	4b7b      	ldr	r3, [pc, #492]	; (80136b4 <readCanToStructs+0x2418>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d102      	bne.n	80134d2 <readCanToStructs+0x2236>
						printf("GPS_PACKET_RECEIVED\n");
 80134cc:	487a      	ldr	r0, [pc, #488]	; (80136b8 <readCanToStructs+0x241c>)
 80134ce:	f011 ffe3 	bl	8025498 <puts>
					Write_RTC();
 80134d2:	f7f8 feaf 	bl	800c234 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80134d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134da:	4a73      	ldr	r2, [pc, #460]	; (80136a8 <readCanToStructs+0x240c>)
 80134dc:	f240 4112 	movw	r1, #1042	; 0x412
 80134e0:	fb01 f303 	mul.w	r3, r1, r3
 80134e4:	4413      	add	r3, r2
 80134e6:	f203 2307 	addw	r3, r3, #519	; 0x207
 80134ea:	2200      	movs	r2, #0
 80134ec:	701a      	strb	r2, [r3, #0]
				break;
 80134ee:	f000 bd7f 	b.w	8013ff0 <readCanToStructs+0x2d54>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80134f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134f6:	4a6c      	ldr	r2, [pc, #432]	; (80136a8 <readCanToStructs+0x240c>)
 80134f8:	f240 4112 	movw	r1, #1042	; 0x412
 80134fc:	fb01 f303 	mul.w	r3, r1, r3
 8013500:	4413      	add	r3, r2
 8013502:	f203 2306 	addw	r3, r3, #518	; 0x206
 8013506:	2201      	movs	r2, #1
 8013508:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801350a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801350e:	4966      	ldr	r1, [pc, #408]	; (80136a8 <readCanToStructs+0x240c>)
 8013510:	f240 4212 	movw	r2, #1042	; 0x412
 8013514:	fb03 f202 	mul.w	r2, r3, r2
 8013518:	440a      	add	r2, r1
 801351a:	f202 2207 	addw	r2, r2, #519	; 0x207
 801351e:	7812      	ldrb	r2, [r2, #0]
 8013520:	3201      	adds	r2, #1
 8013522:	b2d0      	uxtb	r0, r2
 8013524:	4a60      	ldr	r2, [pc, #384]	; (80136a8 <readCanToStructs+0x240c>)
 8013526:	f240 4112 	movw	r1, #1042	; 0x412
 801352a:	fb01 f303 	mul.w	r3, r1, r3
 801352e:	4413      	add	r3, r2
 8013530:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013534:	4602      	mov	r2, r0
 8013536:	701a      	strb	r2, [r3, #0]
				break;
 8013538:	f000 bd5a 	b.w	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801353c:	4b58      	ldr	r3, [pc, #352]	; (80136a0 <readCanToStructs+0x2404>)
 801353e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013540:	4b58      	ldr	r3, [pc, #352]	; (80136a4 <readCanToStructs+0x2408>)
 8013542:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013546:	885b      	ldrh	r3, [r3, #2]
 8013548:	4a56      	ldr	r2, [pc, #344]	; (80136a4 <readCanToStructs+0x2408>)
 801354a:	011b      	lsls	r3, r3, #4
 801354c:	4413      	add	r3, r2
 801354e:	3304      	adds	r3, #4
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801355a:	2b00      	cmp	r3, #0
 801355c:	d110      	bne.n	8013580 <readCanToStructs+0x22e4>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801355e:	2206      	movs	r2, #6
 8013560:	2100      	movs	r1, #0
 8013562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013564:	f011 fe14 	bl	8025190 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801356c:	4a4e      	ldr	r2, [pc, #312]	; (80136a8 <readCanToStructs+0x240c>)
 801356e:	f240 4112 	movw	r1, #1042	; 0x412
 8013572:	fb01 f303 	mul.w	r3, r1, r3
 8013576:	4413      	add	r3, r2
 8013578:	f203 2313 	addw	r3, r3, #531	; 0x213
 801357c:	2200      	movs	r2, #0
 801357e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8013580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013584:	4a48      	ldr	r2, [pc, #288]	; (80136a8 <readCanToStructs+0x240c>)
 8013586:	f240 4112 	movw	r1, #1042	; 0x412
 801358a:	fb01 f303 	mul.w	r3, r1, r3
 801358e:	4413      	add	r3, r2
 8013590:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801359a:	429a      	cmp	r2, r3
 801359c:	d015      	beq.n	80135ca <readCanToStructs+0x232e>
					printf("GPS2 Packet Seq no MisMatch\n");
 801359e:	4847      	ldr	r0, [pc, #284]	; (80136bc <readCanToStructs+0x2420>)
 80135a0:	f011 ff7a 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80135a4:	2206      	movs	r2, #6
 80135a6:	2100      	movs	r1, #0
 80135a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135aa:	f011 fdf1 	bl	8025190 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80135ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135b2:	4a3d      	ldr	r2, [pc, #244]	; (80136a8 <readCanToStructs+0x240c>)
 80135b4:	f240 4112 	movw	r1, #1042	; 0x412
 80135b8:	fb01 f303 	mul.w	r3, r1, r3
 80135bc:	4413      	add	r3, r2
 80135be:	f203 2313 	addw	r3, r3, #531	; 0x213
 80135c2:	2200      	movs	r2, #0
 80135c4:	701a      	strb	r2, [r3, #0]
					break;
 80135c6:	f000 bd13 	b.w	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr += (7 * uc_seqNo);
 80135ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80135ce:	4613      	mov	r3, r2
 80135d0:	00db      	lsls	r3, r3, #3
 80135d2:	1a9b      	subs	r3, r3, r2
 80135d4:	461a      	mov	r2, r3
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	4413      	add	r3, r2
 80135da:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80135dc:	2301      	movs	r3, #1
 80135de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80135e2:	e016      	b.n	8013612 <readCanToStructs+0x2376>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80135e4:	4b2f      	ldr	r3, [pc, #188]	; (80136a4 <readCanToStructs+0x2408>)
 80135e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135ea:	885b      	ldrh	r3, [r3, #2]
 80135ec:	461a      	mov	r2, r3
 80135ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135f2:	492c      	ldr	r1, [pc, #176]	; (80136a4 <readCanToStructs+0x2408>)
 80135f4:	0112      	lsls	r2, r2, #4
 80135f6:	440a      	add	r2, r1
 80135f8:	4413      	add	r3, r2
 80135fa:	3304      	adds	r3, #4
 80135fc:	781a      	ldrb	r2, [r3, #0]
 80135fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013600:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013604:	3301      	adds	r3, #1
 8013606:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801360c:	3301      	adds	r3, #1
 801360e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013612:	4b24      	ldr	r3, [pc, #144]	; (80136a4 <readCanToStructs+0x2408>)
 8013614:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013618:	885b      	ldrh	r3, [r3, #2]
 801361a:	4a22      	ldr	r2, [pc, #136]	; (80136a4 <readCanToStructs+0x2408>)
 801361c:	011b      	lsls	r3, r3, #4
 801361e:	4413      	add	r3, r2
 8013620:	330c      	adds	r3, #12
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013628:	429a      	cmp	r2, r3
 801362a:	d3db      	bcc.n	80135e4 <readCanToStructs+0x2348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801362c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013630:	4a1d      	ldr	r2, [pc, #116]	; (80136a8 <readCanToStructs+0x240c>)
 8013632:	f240 4112 	movw	r1, #1042	; 0x412
 8013636:	fb01 f303 	mul.w	r3, r1, r3
 801363a:	4413      	add	r3, r2
 801363c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	461a      	mov	r2, r3
 8013644:	4613      	mov	r3, r2
 8013646:	00db      	lsls	r3, r3, #3
 8013648:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801364a:	4b16      	ldr	r3, [pc, #88]	; (80136a4 <readCanToStructs+0x2408>)
 801364c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013650:	885b      	ldrh	r3, [r3, #2]
 8013652:	4914      	ldr	r1, [pc, #80]	; (80136a4 <readCanToStructs+0x2408>)
 8013654:	011b      	lsls	r3, r3, #4
 8013656:	440b      	add	r3, r1
 8013658:	330c      	adds	r3, #12
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	3b01      	subs	r3, #1
 801365e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8013660:	2b05      	cmp	r3, #5
 8013662:	d92f      	bls.n	80136c4 <readCanToStructs+0x2428>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8013664:	4b12      	ldr	r3, [pc, #72]	; (80136b0 <readCanToStructs+0x2414>)
 8013666:	4a0e      	ldr	r2, [pc, #56]	; (80136a0 <readCanToStructs+0x2404>)
 8013668:	6811      	ldr	r1, [r2, #0]
 801366a:	6019      	str	r1, [r3, #0]
 801366c:	8892      	ldrh	r2, [r2, #4]
 801366e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8013670:	4b10      	ldr	r3, [pc, #64]	; (80136b4 <readCanToStructs+0x2418>)
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d102      	bne.n	801367e <readCanToStructs+0x23e2>
						printf("GPS2_PACKET_RECEIVED\n");
 8013678:	4811      	ldr	r0, [pc, #68]	; (80136c0 <readCanToStructs+0x2424>)
 801367a:	f011 ff0d 	bl	8025498 <puts>
					Write_RTC();
 801367e:	f7f8 fdd9 	bl	800c234 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013686:	4a08      	ldr	r2, [pc, #32]	; (80136a8 <readCanToStructs+0x240c>)
 8013688:	f240 4112 	movw	r1, #1042	; 0x412
 801368c:	fb01 f303 	mul.w	r3, r1, r3
 8013690:	4413      	add	r3, r2
 8013692:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013696:	2200      	movs	r2, #0
 8013698:	701a      	strb	r2, [r3, #0]
				break;
 801369a:	f000 bca9 	b.w	8013ff0 <readCanToStructs+0x2d54>
 801369e:	bf00      	nop
 80136a0:	20002cd0 	.word	0x20002cd0
 80136a4:	20005f4c 	.word	0x20005f4c
 80136a8:	20005728 	.word	0x20005728
 80136ac:	080299cc 	.word	0x080299cc
 80136b0:	20002cc8 	.word	0x20002cc8
 80136b4:	200009b5 	.word	0x200009b5
 80136b8:	080299e8 	.word	0x080299e8
 80136bc:	080299fc 	.word	0x080299fc
 80136c0:	08029a18 	.word	0x08029a18
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80136c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136c8:	4ab8      	ldr	r2, [pc, #736]	; (80139ac <readCanToStructs+0x2710>)
 80136ca:	f240 4112 	movw	r1, #1042	; 0x412
 80136ce:	fb01 f303 	mul.w	r3, r1, r3
 80136d2:	4413      	add	r3, r2
 80136d4:	f203 2312 	addw	r3, r3, #530	; 0x212
 80136d8:	2201      	movs	r2, #1
 80136da:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80136dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136e0:	49b2      	ldr	r1, [pc, #712]	; (80139ac <readCanToStructs+0x2710>)
 80136e2:	f240 4212 	movw	r2, #1042	; 0x412
 80136e6:	fb03 f202 	mul.w	r2, r3, r2
 80136ea:	440a      	add	r2, r1
 80136ec:	f202 2213 	addw	r2, r2, #531	; 0x213
 80136f0:	7812      	ldrb	r2, [r2, #0]
 80136f2:	3201      	adds	r2, #1
 80136f4:	b2d0      	uxtb	r0, r2
 80136f6:	4aad      	ldr	r2, [pc, #692]	; (80139ac <readCanToStructs+0x2710>)
 80136f8:	f240 4112 	movw	r1, #1042	; 0x412
 80136fc:	fb01 f303 	mul.w	r3, r1, r3
 8013700:	4413      	add	r3, r2
 8013702:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013706:	4602      	mov	r2, r0
 8013708:	701a      	strb	r2, [r3, #0]
				break;
 801370a:	f000 bc71 	b.w	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 801370e:	4ba8      	ldr	r3, [pc, #672]	; (80139b0 <readCanToStructs+0x2714>)
 8013710:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013712:	4ba8      	ldr	r3, [pc, #672]	; (80139b4 <readCanToStructs+0x2718>)
 8013714:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013718:	885b      	ldrh	r3, [r3, #2]
 801371a:	4aa6      	ldr	r2, [pc, #664]	; (80139b4 <readCanToStructs+0x2718>)
 801371c:	011b      	lsls	r3, r3, #4
 801371e:	4413      	add	r3, r2
 8013720:	3304      	adds	r3, #4
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801372c:	2b00      	cmp	r3, #0
 801372e:	d110      	bne.n	8013752 <readCanToStructs+0x24b6>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013730:	2208      	movs	r2, #8
 8013732:	2100      	movs	r1, #0
 8013734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013736:	f011 fd2b 	bl	8025190 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801373a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801373e:	4a9b      	ldr	r2, [pc, #620]	; (80139ac <readCanToStructs+0x2710>)
 8013740:	f240 4112 	movw	r1, #1042	; 0x412
 8013744:	fb01 f303 	mul.w	r3, r1, r3
 8013748:	4413      	add	r3, r2
 801374a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801374e:	2200      	movs	r2, #0
 8013750:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8013752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013756:	4a95      	ldr	r2, [pc, #596]	; (80139ac <readCanToStructs+0x2710>)
 8013758:	f240 4112 	movw	r1, #1042	; 0x412
 801375c:	fb01 f303 	mul.w	r3, r1, r3
 8013760:	4413      	add	r3, r2
 8013762:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013766:	781b      	ldrb	r3, [r3, #0]
 8013768:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801376c:	429a      	cmp	r2, r3
 801376e:	d026      	beq.n	80137be <readCanToStructs+0x2522>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8013770:	4891      	ldr	r0, [pc, #580]	; (80139b8 <readCanToStructs+0x271c>)
 8013772:	f011 fe91 	bl	8025498 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 8013776:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801377a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801377e:	4a8b      	ldr	r2, [pc, #556]	; (80139ac <readCanToStructs+0x2710>)
 8013780:	f240 4012 	movw	r0, #1042	; 0x412
 8013784:	fb00 f303 	mul.w	r3, r0, r3
 8013788:	4413      	add	r3, r2
 801378a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	461a      	mov	r2, r3
 8013792:	488a      	ldr	r0, [pc, #552]	; (80139bc <readCanToStructs+0x2720>)
 8013794:	f011 fde4 	bl	8025360 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013798:	2208      	movs	r2, #8
 801379a:	2100      	movs	r1, #0
 801379c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801379e:	f011 fcf7 	bl	8025190 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80137a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137a6:	4a81      	ldr	r2, [pc, #516]	; (80139ac <readCanToStructs+0x2710>)
 80137a8:	f240 4112 	movw	r1, #1042	; 0x412
 80137ac:	fb01 f303 	mul.w	r3, r1, r3
 80137b0:	4413      	add	r3, r2
 80137b2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80137b6:	2200      	movs	r2, #0
 80137b8:	701a      	strb	r2, [r3, #0]
					break;
 80137ba:	f000 bc19 	b.w	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr += (7 * uc_seqNo);
 80137be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80137c2:	4613      	mov	r3, r2
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	1a9b      	subs	r3, r3, r2
 80137c8:	461a      	mov	r2, r3
 80137ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137cc:	4413      	add	r3, r2
 80137ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80137d0:	2301      	movs	r3, #1
 80137d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80137d6:	e016      	b.n	8013806 <readCanToStructs+0x256a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80137d8:	4b76      	ldr	r3, [pc, #472]	; (80139b4 <readCanToStructs+0x2718>)
 80137da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80137de:	885b      	ldrh	r3, [r3, #2]
 80137e0:	461a      	mov	r2, r3
 80137e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137e6:	4973      	ldr	r1, [pc, #460]	; (80139b4 <readCanToStructs+0x2718>)
 80137e8:	0112      	lsls	r2, r2, #4
 80137ea:	440a      	add	r2, r1
 80137ec:	4413      	add	r3, r2
 80137ee:	3304      	adds	r3, #4
 80137f0:	781a      	ldrb	r2, [r3, #0]
 80137f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80137f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f8:	3301      	adds	r3, #1
 80137fa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80137fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013800:	3301      	adds	r3, #1
 8013802:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013806:	4b6b      	ldr	r3, [pc, #428]	; (80139b4 <readCanToStructs+0x2718>)
 8013808:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801380c:	885b      	ldrh	r3, [r3, #2]
 801380e:	4a69      	ldr	r2, [pc, #420]	; (80139b4 <readCanToStructs+0x2718>)
 8013810:	011b      	lsls	r3, r3, #4
 8013812:	4413      	add	r3, r2
 8013814:	330c      	adds	r3, #12
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801381c:	429a      	cmp	r2, r3
 801381e:	d3db      	bcc.n	80137d8 <readCanToStructs+0x253c>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8013820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013824:	4a61      	ldr	r2, [pc, #388]	; (80139ac <readCanToStructs+0x2710>)
 8013826:	f240 4112 	movw	r1, #1042	; 0x412
 801382a:	fb01 f303 	mul.w	r3, r1, r3
 801382e:	4413      	add	r3, r2
 8013830:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	461a      	mov	r2, r3
 8013838:	4613      	mov	r3, r2
 801383a:	00db      	lsls	r3, r3, #3
 801383c:	1a9a      	subs	r2, r3, r2
 801383e:	4b5d      	ldr	r3, [pc, #372]	; (80139b4 <readCanToStructs+0x2718>)
 8013840:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013844:	885b      	ldrh	r3, [r3, #2]
 8013846:	495b      	ldr	r1, [pc, #364]	; (80139b4 <readCanToStructs+0x2718>)
 8013848:	011b      	lsls	r3, r3, #4
 801384a:	440b      	add	r3, r1
 801384c:	330c      	adds	r3, #12
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	3b01      	subs	r3, #1
 8013852:	4413      	add	r3, r2
 8013854:	2b07      	cmp	r3, #7
 8013856:	d921      	bls.n	801389c <readCanToStructs+0x2600>
					if(Debug_flag == 1)
 8013858:	4b59      	ldr	r3, [pc, #356]	; (80139c0 <readCanToStructs+0x2724>)
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	2b01      	cmp	r3, #1
 801385e:	d102      	bne.n	8013866 <readCanToStructs+0x25ca>
						printf("\nRCV OTH_INFO1\n");
 8013860:	4858      	ldr	r0, [pc, #352]	; (80139c4 <readCanToStructs+0x2728>)
 8013862:	f011 fe19 	bl	8025498 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013866:	4b58      	ldr	r3, [pc, #352]	; (80139c8 <readCanToStructs+0x272c>)
 8013868:	4a51      	ldr	r2, [pc, #324]	; (80139b0 <readCanToStructs+0x2714>)
 801386a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801386e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8013872:	4b56      	ldr	r3, [pc, #344]	; (80139cc <readCanToStructs+0x2730>)
 8013874:	2201      	movs	r2, #1
 8013876:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013878:	f004 fd68 	bl	801834c <HAL_GetTick>
 801387c:	4603      	mov	r3, r0
 801387e:	4a54      	ldr	r2, [pc, #336]	; (80139d0 <readCanToStructs+0x2734>)
 8013880:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8013882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013886:	4a49      	ldr	r2, [pc, #292]	; (80139ac <readCanToStructs+0x2710>)
 8013888:	f240 4112 	movw	r1, #1042	; 0x412
 801388c:	fb01 f303 	mul.w	r3, r1, r3
 8013890:	4413      	add	r3, r2
 8013892:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013896:	2200      	movs	r2, #0
 8013898:	701a      	strb	r2, [r3, #0]
				break;
 801389a:	e3a9      	b.n	8013ff0 <readCanToStructs+0x2d54>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801389c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138a0:	4a42      	ldr	r2, [pc, #264]	; (80139ac <readCanToStructs+0x2710>)
 80138a2:	f240 4112 	movw	r1, #1042	; 0x412
 80138a6:	fb01 f303 	mul.w	r3, r1, r3
 80138aa:	4413      	add	r3, r2
 80138ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80138b0:	2201      	movs	r2, #1
 80138b2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80138b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138b8:	493c      	ldr	r1, [pc, #240]	; (80139ac <readCanToStructs+0x2710>)
 80138ba:	f240 4212 	movw	r2, #1042	; 0x412
 80138be:	fb03 f202 	mul.w	r2, r3, r2
 80138c2:	440a      	add	r2, r1
 80138c4:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80138c8:	7812      	ldrb	r2, [r2, #0]
 80138ca:	3201      	adds	r2, #1
 80138cc:	b2d0      	uxtb	r0, r2
 80138ce:	4a37      	ldr	r2, [pc, #220]	; (80139ac <readCanToStructs+0x2710>)
 80138d0:	f240 4112 	movw	r1, #1042	; 0x412
 80138d4:	fb01 f303 	mul.w	r3, r1, r3
 80138d8:	4413      	add	r3, r2
 80138da:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80138de:	4602      	mov	r2, r0
 80138e0:	701a      	strb	r2, [r3, #0]
				break;
 80138e2:	e385      	b.n	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 80138e4:	4b32      	ldr	r3, [pc, #200]	; (80139b0 <readCanToStructs+0x2714>)
 80138e6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80138e8:	4b32      	ldr	r3, [pc, #200]	; (80139b4 <readCanToStructs+0x2718>)
 80138ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80138ee:	885b      	ldrh	r3, [r3, #2]
 80138f0:	4a30      	ldr	r2, [pc, #192]	; (80139b4 <readCanToStructs+0x2718>)
 80138f2:	011b      	lsls	r3, r3, #4
 80138f4:	4413      	add	r3, r2
 80138f6:	3304      	adds	r3, #4
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80138fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013902:	2b00      	cmp	r3, #0
 8013904:	d110      	bne.n	8013928 <readCanToStructs+0x268c>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013906:	2208      	movs	r2, #8
 8013908:	2100      	movs	r1, #0
 801390a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801390c:	f011 fc40 	bl	8025190 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013914:	4a25      	ldr	r2, [pc, #148]	; (80139ac <readCanToStructs+0x2710>)
 8013916:	f240 4112 	movw	r1, #1042	; 0x412
 801391a:	fb01 f303 	mul.w	r3, r1, r3
 801391e:	4413      	add	r3, r2
 8013920:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013924:	2200      	movs	r2, #0
 8013926:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8013928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801392c:	4a1f      	ldr	r2, [pc, #124]	; (80139ac <readCanToStructs+0x2710>)
 801392e:	f240 4112 	movw	r1, #1042	; 0x412
 8013932:	fb01 f303 	mul.w	r3, r1, r3
 8013936:	4413      	add	r3, r2
 8013938:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013942:	429a      	cmp	r2, r3
 8013944:	d025      	beq.n	8013992 <readCanToStructs+0x26f6>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 8013946:	4823      	ldr	r0, [pc, #140]	; (80139d4 <readCanToStructs+0x2738>)
 8013948:	f011 fda6 	bl	8025498 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 801394c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013954:	4a15      	ldr	r2, [pc, #84]	; (80139ac <readCanToStructs+0x2710>)
 8013956:	f240 4012 	movw	r0, #1042	; 0x412
 801395a:	fb00 f303 	mul.w	r3, r0, r3
 801395e:	4413      	add	r3, r2
 8013960:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	461a      	mov	r2, r3
 8013968:	4814      	ldr	r0, [pc, #80]	; (80139bc <readCanToStructs+0x2720>)
 801396a:	f011 fcf9 	bl	8025360 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 801396e:	2208      	movs	r2, #8
 8013970:	2100      	movs	r1, #0
 8013972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013974:	f011 fc0c 	bl	8025190 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801397c:	4a0b      	ldr	r2, [pc, #44]	; (80139ac <readCanToStructs+0x2710>)
 801397e:	f240 4112 	movw	r1, #1042	; 0x412
 8013982:	fb01 f303 	mul.w	r3, r1, r3
 8013986:	4413      	add	r3, r2
 8013988:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801398c:	2200      	movs	r2, #0
 801398e:	701a      	strb	r2, [r3, #0]
					break;
 8013990:	e32e      	b.n	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013992:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013996:	4613      	mov	r3, r2
 8013998:	00db      	lsls	r3, r3, #3
 801399a:	1a9b      	subs	r3, r3, r2
 801399c:	461a      	mov	r2, r3
 801399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a0:	4413      	add	r3, r2
 80139a2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80139a4:	2301      	movs	r3, #1
 80139a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80139aa:	e02c      	b.n	8013a06 <readCanToStructs+0x276a>
 80139ac:	20005728 	.word	0x20005728
 80139b0:	20002b10 	.word	0x20002b10
 80139b4:	20005f4c 	.word	0x20005f4c
 80139b8:	08029c44 	.word	0x08029c44
 80139bc:	08029c6c 	.word	0x08029c6c
 80139c0:	200009b5 	.word	0x200009b5
 80139c4:	08029c7c 	.word	0x08029c7c
 80139c8:	20002b08 	.word	0x20002b08
 80139cc:	200025a4 	.word	0x200025a4
 80139d0:	200025a8 	.word	0x200025a8
 80139d4:	08029c8c 	.word	0x08029c8c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80139d8:	4bc8      	ldr	r3, [pc, #800]	; (8013cfc <readCanToStructs+0x2a60>)
 80139da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139de:	885b      	ldrh	r3, [r3, #2]
 80139e0:	461a      	mov	r2, r3
 80139e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80139e6:	49c5      	ldr	r1, [pc, #788]	; (8013cfc <readCanToStructs+0x2a60>)
 80139e8:	0112      	lsls	r2, r2, #4
 80139ea:	440a      	add	r2, r1
 80139ec:	4413      	add	r3, r2
 80139ee:	3304      	adds	r3, #4
 80139f0:	781a      	ldrb	r2, [r3, #0]
 80139f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80139f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f8:	3301      	adds	r3, #1
 80139fa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80139fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a00:	3301      	adds	r3, #1
 8013a02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013a06:	4bbd      	ldr	r3, [pc, #756]	; (8013cfc <readCanToStructs+0x2a60>)
 8013a08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a0c:	885b      	ldrh	r3, [r3, #2]
 8013a0e:	4abb      	ldr	r2, [pc, #748]	; (8013cfc <readCanToStructs+0x2a60>)
 8013a10:	011b      	lsls	r3, r3, #4
 8013a12:	4413      	add	r3, r2
 8013a14:	330c      	adds	r3, #12
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d3db      	bcc.n	80139d8 <readCanToStructs+0x273c>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8013a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a24:	4ab6      	ldr	r2, [pc, #728]	; (8013d00 <readCanToStructs+0x2a64>)
 8013a26:	f240 4112 	movw	r1, #1042	; 0x412
 8013a2a:	fb01 f303 	mul.w	r3, r1, r3
 8013a2e:	4413      	add	r3, r2
 8013a30:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	461a      	mov	r2, r3
 8013a38:	4613      	mov	r3, r2
 8013a3a:	00db      	lsls	r3, r3, #3
 8013a3c:	1a9a      	subs	r2, r3, r2
 8013a3e:	4baf      	ldr	r3, [pc, #700]	; (8013cfc <readCanToStructs+0x2a60>)
 8013a40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a44:	885b      	ldrh	r3, [r3, #2]
 8013a46:	49ad      	ldr	r1, [pc, #692]	; (8013cfc <readCanToStructs+0x2a60>)
 8013a48:	011b      	lsls	r3, r3, #4
 8013a4a:	440b      	add	r3, r1
 8013a4c:	330c      	adds	r3, #12
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	3b01      	subs	r3, #1
 8013a52:	4413      	add	r3, r2
 8013a54:	2b07      	cmp	r3, #7
 8013a56:	d921      	bls.n	8013a9c <readCanToStructs+0x2800>
					if(Debug_flag == 1)
 8013a58:	4baa      	ldr	r3, [pc, #680]	; (8013d04 <readCanToStructs+0x2a68>)
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	d102      	bne.n	8013a66 <readCanToStructs+0x27ca>
						printf("\nRCV OTH_INFO2\n");
 8013a60:	48a9      	ldr	r0, [pc, #676]	; (8013d08 <readCanToStructs+0x2a6c>)
 8013a62:	f011 fd19 	bl	8025498 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013a66:	4ba9      	ldr	r3, [pc, #676]	; (8013d0c <readCanToStructs+0x2a70>)
 8013a68:	4aa9      	ldr	r2, [pc, #676]	; (8013d10 <readCanToStructs+0x2a74>)
 8013a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a6e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8013a72:	4ba8      	ldr	r3, [pc, #672]	; (8013d14 <readCanToStructs+0x2a78>)
 8013a74:	2201      	movs	r2, #1
 8013a76:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013a78:	f004 fc68 	bl	801834c <HAL_GetTick>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	4aa6      	ldr	r2, [pc, #664]	; (8013d18 <readCanToStructs+0x2a7c>)
 8013a80:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a86:	4a9e      	ldr	r2, [pc, #632]	; (8013d00 <readCanToStructs+0x2a64>)
 8013a88:	f240 4112 	movw	r1, #1042	; 0x412
 8013a8c:	fb01 f303 	mul.w	r3, r1, r3
 8013a90:	4413      	add	r3, r2
 8013a92:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013a96:	2200      	movs	r2, #0
 8013a98:	701a      	strb	r2, [r3, #0]
				break;
 8013a9a:	e2a9      	b.n	8013ff0 <readCanToStructs+0x2d54>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8013a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013aa0:	4a97      	ldr	r2, [pc, #604]	; (8013d00 <readCanToStructs+0x2a64>)
 8013aa2:	f240 4112 	movw	r1, #1042	; 0x412
 8013aa6:	fb01 f303 	mul.w	r3, r1, r3
 8013aaa:	4413      	add	r3, r2
 8013aac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8013ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ab8:	4991      	ldr	r1, [pc, #580]	; (8013d00 <readCanToStructs+0x2a64>)
 8013aba:	f240 4212 	movw	r2, #1042	; 0x412
 8013abe:	fb03 f202 	mul.w	r2, r3, r2
 8013ac2:	440a      	add	r2, r1
 8013ac4:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8013ac8:	7812      	ldrb	r2, [r2, #0]
 8013aca:	3201      	adds	r2, #1
 8013acc:	b2d0      	uxtb	r0, r2
 8013ace:	4a8c      	ldr	r2, [pc, #560]	; (8013d00 <readCanToStructs+0x2a64>)
 8013ad0:	f240 4112 	movw	r1, #1042	; 0x412
 8013ad4:	fb01 f303 	mul.w	r3, r1, r3
 8013ad8:	4413      	add	r3, r2
 8013ada:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013ade:	4602      	mov	r2, r0
 8013ae0:	701a      	strb	r2, [r3, #0]
				break;
 8013ae2:	e285      	b.n	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8013ae4:	4b8d      	ldr	r3, [pc, #564]	; (8013d1c <readCanToStructs+0x2a80>)
 8013ae6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013ae8:	4b84      	ldr	r3, [pc, #528]	; (8013cfc <readCanToStructs+0x2a60>)
 8013aea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013aee:	885b      	ldrh	r3, [r3, #2]
 8013af0:	4a82      	ldr	r2, [pc, #520]	; (8013cfc <readCanToStructs+0x2a60>)
 8013af2:	011b      	lsls	r3, r3, #4
 8013af4:	4413      	add	r3, r2
 8013af6:	3304      	adds	r3, #4
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013afe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d110      	bne.n	8013b28 <readCanToStructs+0x288c>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8013b06:	2204      	movs	r2, #4
 8013b08:	2100      	movs	r1, #0
 8013b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b0c:	f011 fb40 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b14:	4a7a      	ldr	r2, [pc, #488]	; (8013d00 <readCanToStructs+0x2a64>)
 8013b16:	f240 4112 	movw	r1, #1042	; 0x412
 8013b1a:	fb01 f303 	mul.w	r3, r1, r3
 8013b1e:	4413      	add	r3, r2
 8013b20:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013b24:	2200      	movs	r2, #0
 8013b26:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8013b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b2c:	4a74      	ldr	r2, [pc, #464]	; (8013d00 <readCanToStructs+0x2a64>)
 8013b2e:	f240 4112 	movw	r1, #1042	; 0x412
 8013b32:	fb01 f303 	mul.w	r3, r1, r3
 8013b36:	4413      	add	r3, r2
 8013b38:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d011      	beq.n	8013b6a <readCanToStructs+0x28ce>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8013b46:	2204      	movs	r2, #4
 8013b48:	2100      	movs	r1, #0
 8013b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b4c:	f011 fb20 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b54:	4a6a      	ldr	r2, [pc, #424]	; (8013d00 <readCanToStructs+0x2a64>)
 8013b56:	f240 4112 	movw	r1, #1042	; 0x412
 8013b5a:	fb01 f303 	mul.w	r3, r1, r3
 8013b5e:	4413      	add	r3, r2
 8013b60:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013b64:	2200      	movs	r2, #0
 8013b66:	701a      	strb	r2, [r3, #0]
					break;
 8013b68:	e242      	b.n	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013b6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013b6e:	4613      	mov	r3, r2
 8013b70:	00db      	lsls	r3, r3, #3
 8013b72:	1a9b      	subs	r3, r3, r2
 8013b74:	461a      	mov	r2, r3
 8013b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b78:	4413      	add	r3, r2
 8013b7a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013b82:	e016      	b.n	8013bb2 <readCanToStructs+0x2916>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013b84:	4b5d      	ldr	r3, [pc, #372]	; (8013cfc <readCanToStructs+0x2a60>)
 8013b86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b8a:	885b      	ldrh	r3, [r3, #2]
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b92:	495a      	ldr	r1, [pc, #360]	; (8013cfc <readCanToStructs+0x2a60>)
 8013b94:	0112      	lsls	r2, r2, #4
 8013b96:	440a      	add	r2, r1
 8013b98:	4413      	add	r3, r2
 8013b9a:	3304      	adds	r3, #4
 8013b9c:	781a      	ldrb	r2, [r3, #0]
 8013b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bac:	3301      	adds	r3, #1
 8013bae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013bb2:	4b52      	ldr	r3, [pc, #328]	; (8013cfc <readCanToStructs+0x2a60>)
 8013bb4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bb8:	885b      	ldrh	r3, [r3, #2]
 8013bba:	4a50      	ldr	r2, [pc, #320]	; (8013cfc <readCanToStructs+0x2a60>)
 8013bbc:	011b      	lsls	r3, r3, #4
 8013bbe:	4413      	add	r3, r2
 8013bc0:	330c      	adds	r3, #12
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d3db      	bcc.n	8013b84 <readCanToStructs+0x28e8>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8013bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bd0:	4a4b      	ldr	r2, [pc, #300]	; (8013d00 <readCanToStructs+0x2a64>)
 8013bd2:	f240 4112 	movw	r1, #1042	; 0x412
 8013bd6:	fb01 f303 	mul.w	r3, r1, r3
 8013bda:	4413      	add	r3, r2
 8013bdc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	461a      	mov	r2, r3
 8013be4:	4613      	mov	r3, r2
 8013be6:	00db      	lsls	r3, r3, #3
 8013be8:	1a9a      	subs	r2, r3, r2
 8013bea:	4b44      	ldr	r3, [pc, #272]	; (8013cfc <readCanToStructs+0x2a60>)
 8013bec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bf0:	885b      	ldrh	r3, [r3, #2]
 8013bf2:	4942      	ldr	r1, [pc, #264]	; (8013cfc <readCanToStructs+0x2a60>)
 8013bf4:	011b      	lsls	r3, r3, #4
 8013bf6:	440b      	add	r3, r1
 8013bf8:	330c      	adds	r3, #12
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	3b01      	subs	r3, #1
 8013bfe:	4413      	add	r3, r2
 8013c00:	2b03      	cmp	r3, #3
 8013c02:	d914      	bls.n	8013c2e <readCanToStructs+0x2992>
					printf("Received CAN_FAULT_INJECTION\n");
 8013c04:	4846      	ldr	r0, [pc, #280]	; (8013d20 <readCanToStructs+0x2a84>)
 8013c06:	f011 fc47 	bl	8025498 <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013c0a:	f004 fb9f 	bl	801834c <HAL_GetTick>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	4a41      	ldr	r2, [pc, #260]	; (8013d18 <readCanToStructs+0x2a7c>)
 8013c12:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c18:	4a39      	ldr	r2, [pc, #228]	; (8013d00 <readCanToStructs+0x2a64>)
 8013c1a:	f240 4112 	movw	r1, #1042	; 0x412
 8013c1e:	fb01 f303 	mul.w	r3, r1, r3
 8013c22:	4413      	add	r3, r2
 8013c24:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013c28:	2200      	movs	r2, #0
 8013c2a:	701a      	strb	r2, [r3, #0]
				break;
 8013c2c:	e1e0      	b.n	8013ff0 <readCanToStructs+0x2d54>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8013c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c32:	4a33      	ldr	r2, [pc, #204]	; (8013d00 <readCanToStructs+0x2a64>)
 8013c34:	f240 4112 	movw	r1, #1042	; 0x412
 8013c38:	fb01 f303 	mul.w	r3, r1, r3
 8013c3c:	4413      	add	r3, r2
 8013c3e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013c42:	2201      	movs	r2, #1
 8013c44:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8013c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c4a:	492d      	ldr	r1, [pc, #180]	; (8013d00 <readCanToStructs+0x2a64>)
 8013c4c:	f240 4212 	movw	r2, #1042	; 0x412
 8013c50:	fb03 f202 	mul.w	r2, r3, r2
 8013c54:	440a      	add	r2, r1
 8013c56:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8013c5a:	7812      	ldrb	r2, [r2, #0]
 8013c5c:	3201      	adds	r2, #1
 8013c5e:	b2d0      	uxtb	r0, r2
 8013c60:	4a27      	ldr	r2, [pc, #156]	; (8013d00 <readCanToStructs+0x2a64>)
 8013c62:	f240 4112 	movw	r1, #1042	; 0x412
 8013c66:	fb01 f303 	mul.w	r3, r1, r3
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013c70:	4602      	mov	r2, r0
 8013c72:	701a      	strb	r2, [r3, #0]
				break;
 8013c74:	e1bc      	b.n	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8013c76:	4b2b      	ldr	r3, [pc, #172]	; (8013d24 <readCanToStructs+0x2a88>)
 8013c78:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013c7a:	4b20      	ldr	r3, [pc, #128]	; (8013cfc <readCanToStructs+0x2a60>)
 8013c7c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c80:	885b      	ldrh	r3, [r3, #2]
 8013c82:	4a1e      	ldr	r2, [pc, #120]	; (8013cfc <readCanToStructs+0x2a60>)
 8013c84:	011b      	lsls	r3, r3, #4
 8013c86:	4413      	add	r3, r2
 8013c88:	3304      	adds	r3, #4
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013c90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d110      	bne.n	8013cba <readCanToStructs+0x2a1e>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013c98:	2284      	movs	r2, #132	; 0x84
 8013c9a:	2100      	movs	r1, #0
 8013c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c9e:	f011 fa77 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ca6:	4a16      	ldr	r2, [pc, #88]	; (8013d00 <readCanToStructs+0x2a64>)
 8013ca8:	f240 4112 	movw	r1, #1042	; 0x412
 8013cac:	fb01 f303 	mul.w	r3, r1, r3
 8013cb0:	4413      	add	r3, r2
 8013cb2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8013cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cbe:	4a10      	ldr	r2, [pc, #64]	; (8013d00 <readCanToStructs+0x2a64>)
 8013cc0:	f240 4112 	movw	r1, #1042	; 0x412
 8013cc4:	fb01 f303 	mul.w	r3, r1, r3
 8013cc8:	4413      	add	r3, r2
 8013cca:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	d027      	beq.n	8013d28 <readCanToStructs+0x2a8c>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013cd8:	2284      	movs	r2, #132	; 0x84
 8013cda:	2100      	movs	r1, #0
 8013cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cde:	f011 fa57 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ce6:	4a06      	ldr	r2, [pc, #24]	; (8013d00 <readCanToStructs+0x2a64>)
 8013ce8:	f240 4112 	movw	r1, #1042	; 0x412
 8013cec:	fb01 f303 	mul.w	r3, r1, r3
 8013cf0:	4413      	add	r3, r2
 8013cf2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	701a      	strb	r2, [r3, #0]
					break;
 8013cfa:	e179      	b.n	8013ff0 <readCanToStructs+0x2d54>
 8013cfc:	20005f4c 	.word	0x20005f4c
 8013d00:	20005728 	.word	0x20005728
 8013d04:	200009b5 	.word	0x200009b5
 8013d08:	08029cb4 	.word	0x08029cb4
 8013d0c:	20002b08 	.word	0x20002b08
 8013d10:	20002b10 	.word	0x20002b10
 8013d14:	200025a4 	.word	0x200025a4
 8013d18:	200025a8 	.word	0x200025a8
 8013d1c:	20002afc 	.word	0x20002afc
 8013d20:	08029cc4 	.word	0x08029cc4
 8013d24:	20002b9c 	.word	0x20002b9c
				uc_pp_charPtr += (7 * uc_seqNo);
 8013d28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	00db      	lsls	r3, r3, #3
 8013d30:	1a9b      	subs	r3, r3, r2
 8013d32:	461a      	mov	r2, r3
 8013d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d36:	4413      	add	r3, r2
 8013d38:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013d40:	e016      	b.n	8013d70 <readCanToStructs+0x2ad4>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013d42:	4bc0      	ldr	r3, [pc, #768]	; (8014044 <readCanToStructs+0x2da8>)
 8013d44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d48:	885b      	ldrh	r3, [r3, #2]
 8013d4a:	461a      	mov	r2, r3
 8013d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d50:	49bc      	ldr	r1, [pc, #752]	; (8014044 <readCanToStructs+0x2da8>)
 8013d52:	0112      	lsls	r2, r2, #4
 8013d54:	440a      	add	r2, r1
 8013d56:	4413      	add	r3, r2
 8013d58:	3304      	adds	r3, #4
 8013d5a:	781a      	ldrb	r2, [r3, #0]
 8013d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d5e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d62:	3301      	adds	r3, #1
 8013d64:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013d70:	4bb4      	ldr	r3, [pc, #720]	; (8014044 <readCanToStructs+0x2da8>)
 8013d72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d76:	885b      	ldrh	r3, [r3, #2]
 8013d78:	4ab2      	ldr	r2, [pc, #712]	; (8014044 <readCanToStructs+0x2da8>)
 8013d7a:	011b      	lsls	r3, r3, #4
 8013d7c:	4413      	add	r3, r2
 8013d7e:	330c      	adds	r3, #12
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d3db      	bcc.n	8013d42 <readCanToStructs+0x2aa6>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8013d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d8e:	4aae      	ldr	r2, [pc, #696]	; (8014048 <readCanToStructs+0x2dac>)
 8013d90:	f240 4112 	movw	r1, #1042	; 0x412
 8013d94:	fb01 f303 	mul.w	r3, r1, r3
 8013d98:	4413      	add	r3, r2
 8013d9a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	461a      	mov	r2, r3
 8013da2:	4613      	mov	r3, r2
 8013da4:	00db      	lsls	r3, r3, #3
 8013da6:	1a9a      	subs	r2, r3, r2
 8013da8:	4ba6      	ldr	r3, [pc, #664]	; (8014044 <readCanToStructs+0x2da8>)
 8013daa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013dae:	885b      	ldrh	r3, [r3, #2]
 8013db0:	49a4      	ldr	r1, [pc, #656]	; (8014044 <readCanToStructs+0x2da8>)
 8013db2:	011b      	lsls	r3, r3, #4
 8013db4:	440b      	add	r3, r1
 8013db6:	330c      	adds	r3, #12
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	3b01      	subs	r3, #1
 8013dbc:	4413      	add	r3, r2
 8013dbe:	2b83      	cmp	r3, #131	; 0x83
 8013dc0:	d91e      	bls.n	8013e00 <readCanToStructs+0x2b64>
					if(Debug_flag == 1)
 8013dc2:	4ba2      	ldr	r3, [pc, #648]	; (801404c <readCanToStructs+0x2db0>)
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d102      	bne.n	8013dd0 <readCanToStructs+0x2b34>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8013dca:	48a1      	ldr	r0, [pc, #644]	; (8014050 <readCanToStructs+0x2db4>)
 8013dcc:	f011 fb64 	bl	8025498 <puts>
					Received_CAN_Relay_Status = YES;
 8013dd0:	4ba0      	ldr	r3, [pc, #640]	; (8014054 <readCanToStructs+0x2db8>)
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 8013dd6:	4ba0      	ldr	r3, [pc, #640]	; (8014058 <readCanToStructs+0x2dbc>)
 8013dd8:	2201      	movs	r2, #1
 8013dda:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013ddc:	f004 fab6 	bl	801834c <HAL_GetTick>
 8013de0:	4603      	mov	r3, r0
 8013de2:	4a9e      	ldr	r2, [pc, #632]	; (801405c <readCanToStructs+0x2dc0>)
 8013de4:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013dea:	4a97      	ldr	r2, [pc, #604]	; (8014048 <readCanToStructs+0x2dac>)
 8013dec:	f240 4112 	movw	r1, #1042	; 0x412
 8013df0:	fb01 f303 	mul.w	r3, r1, r3
 8013df4:	4413      	add	r3, r2
 8013df6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	701a      	strb	r2, [r3, #0]
				break;
 8013dfe:	e0f7      	b.n	8013ff0 <readCanToStructs+0x2d54>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8013e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e04:	4a90      	ldr	r2, [pc, #576]	; (8014048 <readCanToStructs+0x2dac>)
 8013e06:	f240 4112 	movw	r1, #1042	; 0x412
 8013e0a:	fb01 f303 	mul.w	r3, r1, r3
 8013e0e:	4413      	add	r3, r2
 8013e10:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8013e14:	2201      	movs	r2, #1
 8013e16:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8013e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e1c:	498a      	ldr	r1, [pc, #552]	; (8014048 <readCanToStructs+0x2dac>)
 8013e1e:	f240 4212 	movw	r2, #1042	; 0x412
 8013e22:	fb03 f202 	mul.w	r2, r3, r2
 8013e26:	440a      	add	r2, r1
 8013e28:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8013e2c:	7812      	ldrb	r2, [r2, #0]
 8013e2e:	3201      	adds	r2, #1
 8013e30:	b2d0      	uxtb	r0, r2
 8013e32:	4a85      	ldr	r2, [pc, #532]	; (8014048 <readCanToStructs+0x2dac>)
 8013e34:	f240 4112 	movw	r1, #1042	; 0x412
 8013e38:	fb01 f303 	mul.w	r3, r1, r3
 8013e3c:	4413      	add	r3, r2
 8013e3e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013e42:	4602      	mov	r2, r0
 8013e44:	701a      	strb	r2, [r3, #0]
				break;
 8013e46:	e0d3      	b.n	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8013e48:	4b85      	ldr	r3, [pc, #532]	; (8014060 <readCanToStructs+0x2dc4>)
 8013e4a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013e4c:	4b7d      	ldr	r3, [pc, #500]	; (8014044 <readCanToStructs+0x2da8>)
 8013e4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013e52:	885b      	ldrh	r3, [r3, #2]
 8013e54:	4a7b      	ldr	r2, [pc, #492]	; (8014044 <readCanToStructs+0x2da8>)
 8013e56:	011b      	lsls	r3, r3, #4
 8013e58:	4413      	add	r3, r2
 8013e5a:	3304      	adds	r3, #4
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013e62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d110      	bne.n	8013e8c <readCanToStructs+0x2bf0>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013e6a:	2284      	movs	r2, #132	; 0x84
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e70:	f011 f98e 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e78:	4a73      	ldr	r2, [pc, #460]	; (8014048 <readCanToStructs+0x2dac>)
 8013e7a:	f240 4112 	movw	r1, #1042	; 0x412
 8013e7e:	fb01 f303 	mul.w	r3, r1, r3
 8013e82:	4413      	add	r3, r2
 8013e84:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013e88:	2200      	movs	r2, #0
 8013e8a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8013e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e90:	4a6d      	ldr	r2, [pc, #436]	; (8014048 <readCanToStructs+0x2dac>)
 8013e92:	f240 4112 	movw	r1, #1042	; 0x412
 8013e96:	fb01 f303 	mul.w	r3, r1, r3
 8013e9a:	4413      	add	r3, r2
 8013e9c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d011      	beq.n	8013ece <readCanToStructs+0x2c32>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013eaa:	2284      	movs	r2, #132	; 0x84
 8013eac:	2100      	movs	r1, #0
 8013eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013eb0:	f011 f96e 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013eb8:	4a63      	ldr	r2, [pc, #396]	; (8014048 <readCanToStructs+0x2dac>)
 8013eba:	f240 4112 	movw	r1, #1042	; 0x412
 8013ebe:	fb01 f303 	mul.w	r3, r1, r3
 8013ec2:	4413      	add	r3, r2
 8013ec4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013ec8:	2200      	movs	r2, #0
 8013eca:	701a      	strb	r2, [r3, #0]
					break;
 8013ecc:	e090      	b.n	8013ff0 <readCanToStructs+0x2d54>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013ece:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	00db      	lsls	r3, r3, #3
 8013ed6:	1a9b      	subs	r3, r3, r2
 8013ed8:	461a      	mov	r2, r3
 8013eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013edc:	4413      	add	r3, r2
 8013ede:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013ee6:	e016      	b.n	8013f16 <readCanToStructs+0x2c7a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013ee8:	4b56      	ldr	r3, [pc, #344]	; (8014044 <readCanToStructs+0x2da8>)
 8013eea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013eee:	885b      	ldrh	r3, [r3, #2]
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ef6:	4953      	ldr	r1, [pc, #332]	; (8014044 <readCanToStructs+0x2da8>)
 8013ef8:	0112      	lsls	r2, r2, #4
 8013efa:	440a      	add	r2, r1
 8013efc:	4413      	add	r3, r2
 8013efe:	3304      	adds	r3, #4
 8013f00:	781a      	ldrb	r2, [r3, #0]
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f08:	3301      	adds	r3, #1
 8013f0a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f10:	3301      	adds	r3, #1
 8013f12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013f16:	4b4b      	ldr	r3, [pc, #300]	; (8014044 <readCanToStructs+0x2da8>)
 8013f18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f1c:	885b      	ldrh	r3, [r3, #2]
 8013f1e:	4a49      	ldr	r2, [pc, #292]	; (8014044 <readCanToStructs+0x2da8>)
 8013f20:	011b      	lsls	r3, r3, #4
 8013f22:	4413      	add	r3, r2
 8013f24:	330c      	adds	r3, #12
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d3db      	bcc.n	8013ee8 <readCanToStructs+0x2c4c>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8013f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f34:	4a44      	ldr	r2, [pc, #272]	; (8014048 <readCanToStructs+0x2dac>)
 8013f36:	f240 4112 	movw	r1, #1042	; 0x412
 8013f3a:	fb01 f303 	mul.w	r3, r1, r3
 8013f3e:	4413      	add	r3, r2
 8013f40:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013f44:	781b      	ldrb	r3, [r3, #0]
 8013f46:	461a      	mov	r2, r3
 8013f48:	4613      	mov	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	1a9a      	subs	r2, r3, r2
 8013f4e:	4b3d      	ldr	r3, [pc, #244]	; (8014044 <readCanToStructs+0x2da8>)
 8013f50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f54:	885b      	ldrh	r3, [r3, #2]
 8013f56:	493b      	ldr	r1, [pc, #236]	; (8014044 <readCanToStructs+0x2da8>)
 8013f58:	011b      	lsls	r3, r3, #4
 8013f5a:	440b      	add	r3, r1
 8013f5c:	330c      	adds	r3, #12
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	3b01      	subs	r3, #1
 8013f62:	4413      	add	r3, r2
 8013f64:	2b83      	cmp	r3, #131	; 0x83
 8013f66:	d91e      	bls.n	8013fa6 <readCanToStructs+0x2d0a>
					if(Debug_flag == 1)
 8013f68:	4b38      	ldr	r3, [pc, #224]	; (801404c <readCanToStructs+0x2db0>)
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	d102      	bne.n	8013f76 <readCanToStructs+0x2cda>
						printf("\nRCV RELAY_DATA_EI2\n");
 8013f70:	483c      	ldr	r0, [pc, #240]	; (8014064 <readCanToStructs+0x2dc8>)
 8013f72:	f011 fa91 	bl	8025498 <puts>
					Medha_CAN_Xchanging_Happening = SET;
 8013f76:	4b38      	ldr	r3, [pc, #224]	; (8014058 <readCanToStructs+0x2dbc>)
 8013f78:	2201      	movs	r2, #1
 8013f7a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013f7c:	f004 f9e6 	bl	801834c <HAL_GetTick>
 8013f80:	4603      	mov	r3, r0
 8013f82:	4a36      	ldr	r2, [pc, #216]	; (801405c <readCanToStructs+0x2dc0>)
 8013f84:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 8013f86:	4b33      	ldr	r3, [pc, #204]	; (8014054 <readCanToStructs+0x2db8>)
 8013f88:	2201      	movs	r2, #1
 8013f8a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f90:	4a2d      	ldr	r2, [pc, #180]	; (8014048 <readCanToStructs+0x2dac>)
 8013f92:	f240 4112 	movw	r1, #1042	; 0x412
 8013f96:	fb01 f303 	mul.w	r3, r1, r3
 8013f9a:	4413      	add	r3, r2
 8013f9c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	701a      	strb	r2, [r3, #0]
				break;
 8013fa4:	e024      	b.n	8013ff0 <readCanToStructs+0x2d54>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8013fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013faa:	4a27      	ldr	r2, [pc, #156]	; (8014048 <readCanToStructs+0x2dac>)
 8013fac:	f240 4112 	movw	r1, #1042	; 0x412
 8013fb0:	fb01 f303 	mul.w	r3, r1, r3
 8013fb4:	4413      	add	r3, r2
 8013fb6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013fba:	2201      	movs	r2, #1
 8013fbc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8013fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fc2:	4921      	ldr	r1, [pc, #132]	; (8014048 <readCanToStructs+0x2dac>)
 8013fc4:	f240 4212 	movw	r2, #1042	; 0x412
 8013fc8:	fb03 f202 	mul.w	r2, r3, r2
 8013fcc:	440a      	add	r2, r1
 8013fce:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8013fd2:	7812      	ldrb	r2, [r2, #0]
 8013fd4:	3201      	adds	r2, #1
 8013fd6:	b2d0      	uxtb	r0, r2
 8013fd8:	4a1b      	ldr	r2, [pc, #108]	; (8014048 <readCanToStructs+0x2dac>)
 8013fda:	f240 4112 	movw	r1, #1042	; 0x412
 8013fde:	fb01 f303 	mul.w	r3, r1, r3
 8013fe2:	4413      	add	r3, r2
 8013fe4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013fe8:	4602      	mov	r2, r0
 8013fea:	701a      	strb	r2, [r3, #0]
				break;
 8013fec:	e000      	b.n	8013ff0 <readCanToStructs+0x2d54>
				break;
 8013fee:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8013ff0:	4b14      	ldr	r3, [pc, #80]	; (8014044 <readCanToStructs+0x2da8>)
 8013ff2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013ff6:	885b      	ldrh	r3, [r3, #2]
 8013ff8:	011b      	lsls	r3, r3, #4
 8013ffa:	4a12      	ldr	r2, [pc, #72]	; (8014044 <readCanToStructs+0x2da8>)
 8013ffc:	4413      	add	r3, r2
 8013ffe:	2210      	movs	r2, #16
 8014000:	2100      	movs	r1, #0
 8014002:	4618      	mov	r0, r3
 8014004:	f011 f8c4 	bl	8025190 <memset>
			canRead.Out++;
 8014008:	4b0e      	ldr	r3, [pc, #56]	; (8014044 <readCanToStructs+0x2da8>)
 801400a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801400e:	885b      	ldrh	r3, [r3, #2]
 8014010:	3301      	adds	r3, #1
 8014012:	b29a      	uxth	r2, r3
 8014014:	4b0b      	ldr	r3, [pc, #44]	; (8014044 <readCanToStructs+0x2da8>)
 8014016:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801401a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801401c:	4b09      	ldr	r3, [pc, #36]	; (8014044 <readCanToStructs+0x2da8>)
 801401e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014022:	885b      	ldrh	r3, [r3, #2]
 8014024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014028:	d104      	bne.n	8014034 <readCanToStructs+0x2d98>
				canRead.Out = 0;
 801402a:	4b06      	ldr	r3, [pc, #24]	; (8014044 <readCanToStructs+0x2da8>)
 801402c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014030:	2200      	movs	r2, #0
 8014032:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8014034:	f7fd f8dc 	bl	80111f0 <canDataReady>
 8014038:	4603      	mov	r3, r0
 801403a:	2b00      	cmp	r3, #0
 801403c:	f47f a951 	bne.w	80132e2 <readCanToStructs+0x2046>
		}
		/* __________ MEDHA _________ */
	}
	break;
 8014040:	e312      	b.n	8014668 <readCanToStructs+0x33cc>
 8014042:	bf00      	nop
 8014044:	20005f4c 	.word	0x20005f4c
 8014048:	20005728 	.word	0x20005728
 801404c:	200009b5 	.word	0x200009b5
 8014050:	08029ce4 	.word	0x08029ce4
 8014054:	200025a5 	.word	0x200025a5
 8014058:	200025a4 	.word	0x200025a4
 801405c:	200025a8 	.word	0x200025a8
 8014060:	20002b9c 	.word	0x20002b9c
 8014064:	08029d00 	.word	0x08029d00
	case KYOSAN:
	{
		/* __________ KYOSAN _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8014068:	4bb1      	ldr	r3, [pc, #708]	; (8014330 <readCanToStructs+0x3094>)
 801406a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801406e:	885b      	ldrh	r3, [r3, #2]
 8014070:	4aaf      	ldr	r2, [pc, #700]	; (8014330 <readCanToStructs+0x3094>)
 8014072:	011b      	lsls	r3, r3, #4
 8014074:	4413      	add	r3, r2
 8014076:	330f      	adds	r3, #15
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	3b01      	subs	r3, #1
 801407c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8014080:	4bab      	ldr	r3, [pc, #684]	; (8014330 <readCanToStructs+0x3094>)
 8014082:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014086:	885b      	ldrh	r3, [r3, #2]
 8014088:	4aa9      	ldr	r2, [pc, #676]	; (8014330 <readCanToStructs+0x3094>)
 801408a:	011b      	lsls	r3, r3, #4
 801408c:	4413      	add	r3, r2
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8014094:	f000 80f9 	beq.w	801428a <readCanToStructs+0x2fee>
 8014098:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801409c:	f200 82b8 	bhi.w	8014610 <readCanToStructs+0x3374>
 80140a0:	f240 2205 	movw	r2, #517	; 0x205
 80140a4:	4293      	cmp	r3, r2
 80140a6:	f000 81ef 	beq.w	8014488 <readCanToStructs+0x31ec>
 80140aa:	f240 2207 	movw	r2, #519	; 0x207
 80140ae:	4293      	cmp	r3, r2
 80140b0:	f040 82ae 	bne.w	8014610 <readCanToStructs+0x3374>
			{

			case EIPC1_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 80140b4:	4b9f      	ldr	r3, [pc, #636]	; (8014334 <readCanToStructs+0x3098>)
 80140b6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80140b8:	4b9d      	ldr	r3, [pc, #628]	; (8014330 <readCanToStructs+0x3094>)
 80140ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80140be:	885b      	ldrh	r3, [r3, #2]
 80140c0:	4a9b      	ldr	r2, [pc, #620]	; (8014330 <readCanToStructs+0x3094>)
 80140c2:	011b      	lsls	r3, r3, #4
 80140c4:	4413      	add	r3, r2
 80140c6:	3304      	adds	r3, #4
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80140ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d110      	bne.n	80140f8 <readCanToStructs+0x2e5c>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80140d6:	2240      	movs	r2, #64	; 0x40
 80140d8:	2100      	movs	r1, #0
 80140da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140dc:	f011 f858 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80140e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140e4:	4a94      	ldr	r2, [pc, #592]	; (8014338 <readCanToStructs+0x309c>)
 80140e6:	f240 4112 	movw	r1, #1042	; 0x412
 80140ea:	fb01 f303 	mul.w	r3, r1, r3
 80140ee:	4413      	add	r3, r2
 80140f0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80140f4:	2200      	movs	r2, #0
 80140f6:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80140f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140fc:	4a8e      	ldr	r2, [pc, #568]	; (8014338 <readCanToStructs+0x309c>)
 80140fe:	f240 4112 	movw	r1, #1042	; 0x412
 8014102:	fb01 f303 	mul.w	r3, r1, r3
 8014106:	4413      	add	r3, r2
 8014108:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014112:	429a      	cmp	r2, r3
 8014114:	d014      	beq.n	8014140 <readCanToStructs+0x2ea4>
				{
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8014116:	4889      	ldr	r0, [pc, #548]	; (801433c <readCanToStructs+0x30a0>)
 8014118:	f011 f9be 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 801411c:	2240      	movs	r2, #64	; 0x40
 801411e:	2100      	movs	r1, #0
 8014120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014122:	f011 f835 	bl	8025190 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801412a:	4a83      	ldr	r2, [pc, #524]	; (8014338 <readCanToStructs+0x309c>)
 801412c:	f240 4112 	movw	r1, #1042	; 0x412
 8014130:	fb01 f303 	mul.w	r3, r1, r3
 8014134:	4413      	add	r3, r2
 8014136:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801413a:	2200      	movs	r2, #0
 801413c:	701a      	strb	r2, [r3, #0]
					break;
 801413e:	e268      	b.n	8014612 <readCanToStructs+0x3376>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014140:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014144:	4613      	mov	r3, r2
 8014146:	00db      	lsls	r3, r3, #3
 8014148:	1a9b      	subs	r3, r3, r2
 801414a:	461a      	mov	r2, r3
 801414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414e:	4413      	add	r3, r2
 8014150:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014152:	2301      	movs	r3, #1
 8014154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014158:	e016      	b.n	8014188 <readCanToStructs+0x2eec>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801415a:	4b75      	ldr	r3, [pc, #468]	; (8014330 <readCanToStructs+0x3094>)
 801415c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014160:	885b      	ldrh	r3, [r3, #2]
 8014162:	461a      	mov	r2, r3
 8014164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014168:	4971      	ldr	r1, [pc, #452]	; (8014330 <readCanToStructs+0x3094>)
 801416a:	0112      	lsls	r2, r2, #4
 801416c:	440a      	add	r2, r1
 801416e:	4413      	add	r3, r2
 8014170:	3304      	adds	r3, #4
 8014172:	781a      	ldrb	r2, [r3, #0]
 8014174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014176:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417a:	3301      	adds	r3, #1
 801417c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801417e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014182:	3301      	adds	r3, #1
 8014184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014188:	4b69      	ldr	r3, [pc, #420]	; (8014330 <readCanToStructs+0x3094>)
 801418a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801418e:	885b      	ldrh	r3, [r3, #2]
 8014190:	4a67      	ldr	r2, [pc, #412]	; (8014330 <readCanToStructs+0x3094>)
 8014192:	011b      	lsls	r3, r3, #4
 8014194:	4413      	add	r3, r2
 8014196:	330c      	adds	r3, #12
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801419e:	429a      	cmp	r2, r3
 80141a0:	d3db      	bcc.n	801415a <readCanToStructs+0x2ebe>
				}
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 80141a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141a6:	4a64      	ldr	r2, [pc, #400]	; (8014338 <readCanToStructs+0x309c>)
 80141a8:	f240 4112 	movw	r1, #1042	; 0x412
 80141ac:	fb01 f303 	mul.w	r3, r1, r3
 80141b0:	4413      	add	r3, r2
 80141b2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	461a      	mov	r2, r3
 80141ba:	4613      	mov	r3, r2
 80141bc:	00db      	lsls	r3, r3, #3
 80141be:	1a9a      	subs	r2, r3, r2
 80141c0:	4b5b      	ldr	r3, [pc, #364]	; (8014330 <readCanToStructs+0x3094>)
 80141c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80141c6:	885b      	ldrh	r3, [r3, #2]
 80141c8:	4959      	ldr	r1, [pc, #356]	; (8014330 <readCanToStructs+0x3094>)
 80141ca:	011b      	lsls	r3, r3, #4
 80141cc:	440b      	add	r3, r1
 80141ce:	330c      	adds	r3, #12
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	3b01      	subs	r3, #1
 80141d4:	4413      	add	r3, r2
 80141d6:	2b3f      	cmp	r3, #63	; 0x3f
 80141d8:	d933      	bls.n	8014242 <readCanToStructs+0x2fa6>
				{
					if(Debug_flag == 1)
 80141da:	4b59      	ldr	r3, [pc, #356]	; (8014340 <readCanToStructs+0x30a4>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	2b01      	cmp	r3, #1
 80141e0:	d105      	bne.n	80141ee <readCanToStructs+0x2f52>
					{
						printf("Rcv Relays1-O:%u\n",Kyosan_CANRelays.Index);
 80141e2:	4b54      	ldr	r3, [pc, #336]	; (8014334 <readCanToStructs+0x3098>)
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	4619      	mov	r1, r3
 80141e8:	4856      	ldr	r0, [pc, #344]	; (8014344 <readCanToStructs+0x30a8>)
 80141ea:	f011 f8b9 	bl	8025360 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 80141ee:	4a56      	ldr	r2, [pc, #344]	; (8014348 <readCanToStructs+0x30ac>)
 80141f0:	4b50      	ldr	r3, [pc, #320]	; (8014334 <readCanToStructs+0x3098>)
 80141f2:	4610      	mov	r0, r2
 80141f4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80141f8:	4602      	mov	r2, r0
 80141fa:	4619      	mov	r1, r3
 80141fc:	f8d1 c000 	ldr.w	ip, [r1]
 8014200:	684e      	ldr	r6, [r1, #4]
 8014202:	688d      	ldr	r5, [r1, #8]
 8014204:	68c9      	ldr	r1, [r1, #12]
 8014206:	f8c2 c000 	str.w	ip, [r2]
 801420a:	6056      	str	r6, [r2, #4]
 801420c:	6095      	str	r5, [r2, #8]
 801420e:	60d1      	str	r1, [r2, #12]
 8014210:	3310      	adds	r3, #16
 8014212:	3010      	adds	r0, #16
 8014214:	42a3      	cmp	r3, r4
 8014216:	d1ef      	bne.n	80141f8 <readCanToStructs+0x2f5c>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 8014218:	f004 f898 	bl	801834c <HAL_GetTick>
 801421c:	4603      	mov	r3, r0
 801421e:	4a4b      	ldr	r2, [pc, #300]	; (801434c <readCanToStructs+0x30b0>)
 8014220:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8014222:	4b4b      	ldr	r3, [pc, #300]	; (8014350 <readCanToStructs+0x30b4>)
 8014224:	2201      	movs	r2, #1
 8014226:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801422c:	4a42      	ldr	r2, [pc, #264]	; (8014338 <readCanToStructs+0x309c>)
 801422e:	f240 4112 	movw	r1, #1042	; 0x412
 8014232:	fb01 f303 	mul.w	r3, r1, r3
 8014236:	4413      	add	r3, r2
 8014238:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801423c:	2200      	movs	r2, #0
 801423e:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8014240:	e1e7      	b.n	8014612 <readCanToStructs+0x3376>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8014242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014246:	4a3c      	ldr	r2, [pc, #240]	; (8014338 <readCanToStructs+0x309c>)
 8014248:	f240 4112 	movw	r1, #1042	; 0x412
 801424c:	fb01 f303 	mul.w	r3, r1, r3
 8014250:	4413      	add	r3, r2
 8014252:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8014256:	2201      	movs	r2, #1
 8014258:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801425a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801425e:	4936      	ldr	r1, [pc, #216]	; (8014338 <readCanToStructs+0x309c>)
 8014260:	f240 4212 	movw	r2, #1042	; 0x412
 8014264:	fb03 f202 	mul.w	r2, r3, r2
 8014268:	440a      	add	r2, r1
 801426a:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801426e:	7812      	ldrb	r2, [r2, #0]
 8014270:	3201      	adds	r2, #1
 8014272:	b2d0      	uxtb	r0, r2
 8014274:	4a30      	ldr	r2, [pc, #192]	; (8014338 <readCanToStructs+0x309c>)
 8014276:	f240 4112 	movw	r1, #1042	; 0x412
 801427a:	fb01 f303 	mul.w	r3, r1, r3
 801427e:	4413      	add	r3, r2
 8014280:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014284:	4602      	mov	r2, r0
 8014286:	701a      	strb	r2, [r3, #0]
				break;
 8014288:	e1c3      	b.n	8014612 <readCanToStructs+0x3376>

			case EIPC2_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 801428a:	4b2a      	ldr	r3, [pc, #168]	; (8014334 <readCanToStructs+0x3098>)
 801428c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801428e:	4b28      	ldr	r3, [pc, #160]	; (8014330 <readCanToStructs+0x3094>)
 8014290:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014294:	885b      	ldrh	r3, [r3, #2]
 8014296:	4a26      	ldr	r2, [pc, #152]	; (8014330 <readCanToStructs+0x3094>)
 8014298:	011b      	lsls	r3, r3, #4
 801429a:	4413      	add	r3, r2
 801429c:	3304      	adds	r3, #4
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80142a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d110      	bne.n	80142ce <readCanToStructs+0x3032>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80142ac:	2240      	movs	r2, #64	; 0x40
 80142ae:	2100      	movs	r1, #0
 80142b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142b2:	f010 ff6d 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80142b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142ba:	4a1f      	ldr	r2, [pc, #124]	; (8014338 <readCanToStructs+0x309c>)
 80142bc:	f240 4112 	movw	r1, #1042	; 0x412
 80142c0:	fb01 f303 	mul.w	r3, r1, r3
 80142c4:	4413      	add	r3, r2
 80142c6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80142ca:	2200      	movs	r2, #0
 80142cc:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80142ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142d2:	4a19      	ldr	r2, [pc, #100]	; (8014338 <readCanToStructs+0x309c>)
 80142d4:	f240 4112 	movw	r1, #1042	; 0x412
 80142d8:	fb01 f303 	mul.w	r3, r1, r3
 80142dc:	4413      	add	r3, r2
 80142de:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d014      	beq.n	8014316 <readCanToStructs+0x307a>
				{
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 80142ec:	4819      	ldr	r0, [pc, #100]	; (8014354 <readCanToStructs+0x30b8>)
 80142ee:	f011 f8d3 	bl	8025498 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80142f2:	2240      	movs	r2, #64	; 0x40
 80142f4:	2100      	movs	r1, #0
 80142f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142f8:	f010 ff4a 	bl	8025190 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80142fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014300:	4a0d      	ldr	r2, [pc, #52]	; (8014338 <readCanToStructs+0x309c>)
 8014302:	f240 4112 	movw	r1, #1042	; 0x412
 8014306:	fb01 f303 	mul.w	r3, r1, r3
 801430a:	4413      	add	r3, r2
 801430c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014310:	2200      	movs	r2, #0
 8014312:	701a      	strb	r2, [r3, #0]
					break;
 8014314:	e17d      	b.n	8014612 <readCanToStructs+0x3376>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014316:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801431a:	4613      	mov	r3, r2
 801431c:	00db      	lsls	r3, r3, #3
 801431e:	1a9b      	subs	r3, r3, r2
 8014320:	461a      	mov	r2, r3
 8014322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014324:	4413      	add	r3, r2
 8014326:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014328:	2301      	movs	r3, #1
 801432a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801432e:	e02a      	b.n	8014386 <readCanToStructs+0x30ea>
 8014330:	20005f4c 	.word	0x20005f4c
 8014334:	2000a20c 	.word	0x2000a20c
 8014338:	20005728 	.word	0x20005728
 801433c:	08029b40 	.word	0x08029b40
 8014340:	200009b5 	.word	0x200009b5
 8014344:	08029d14 	.word	0x08029d14
 8014348:	2000a1cc 	.word	0x2000a1cc
 801434c:	2000a2d0 	.word	0x2000a2d0
 8014350:	20000108 	.word	0x20000108
 8014354:	08029b70 	.word	0x08029b70
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014358:	4bc5      	ldr	r3, [pc, #788]	; (8014670 <readCanToStructs+0x33d4>)
 801435a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801435e:	885b      	ldrh	r3, [r3, #2]
 8014360:	461a      	mov	r2, r3
 8014362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014366:	49c2      	ldr	r1, [pc, #776]	; (8014670 <readCanToStructs+0x33d4>)
 8014368:	0112      	lsls	r2, r2, #4
 801436a:	440a      	add	r2, r1
 801436c:	4413      	add	r3, r2
 801436e:	3304      	adds	r3, #4
 8014370:	781a      	ldrb	r2, [r3, #0]
 8014372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014374:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014378:	3301      	adds	r3, #1
 801437a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801437c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014380:	3301      	adds	r3, #1
 8014382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014386:	4bba      	ldr	r3, [pc, #744]	; (8014670 <readCanToStructs+0x33d4>)
 8014388:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801438c:	885b      	ldrh	r3, [r3, #2]
 801438e:	4ab8      	ldr	r2, [pc, #736]	; (8014670 <readCanToStructs+0x33d4>)
 8014390:	011b      	lsls	r3, r3, #4
 8014392:	4413      	add	r3, r2
 8014394:	330c      	adds	r3, #12
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801439c:	429a      	cmp	r2, r3
 801439e:	d3db      	bcc.n	8014358 <readCanToStructs+0x30bc>
				}
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 80143a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143a4:	4ab3      	ldr	r2, [pc, #716]	; (8014674 <readCanToStructs+0x33d8>)
 80143a6:	f240 4112 	movw	r1, #1042	; 0x412
 80143aa:	fb01 f303 	mul.w	r3, r1, r3
 80143ae:	4413      	add	r3, r2
 80143b0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	461a      	mov	r2, r3
 80143b8:	4613      	mov	r3, r2
 80143ba:	00db      	lsls	r3, r3, #3
 80143bc:	1a9a      	subs	r2, r3, r2
 80143be:	4bac      	ldr	r3, [pc, #688]	; (8014670 <readCanToStructs+0x33d4>)
 80143c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143c4:	885b      	ldrh	r3, [r3, #2]
 80143c6:	49aa      	ldr	r1, [pc, #680]	; (8014670 <readCanToStructs+0x33d4>)
 80143c8:	011b      	lsls	r3, r3, #4
 80143ca:	440b      	add	r3, r1
 80143cc:	330c      	adds	r3, #12
 80143ce:	781b      	ldrb	r3, [r3, #0]
 80143d0:	3b01      	subs	r3, #1
 80143d2:	4413      	add	r3, r2
 80143d4:	2b3f      	cmp	r3, #63	; 0x3f
 80143d6:	d933      	bls.n	8014440 <readCanToStructs+0x31a4>
				{
					if(Debug_flag == 1)
 80143d8:	4ba7      	ldr	r3, [pc, #668]	; (8014678 <readCanToStructs+0x33dc>)
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d105      	bne.n	80143ec <readCanToStructs+0x3150>
					{
						printf("Rcv Relays2-O:%u\n",Kyosan_CANRelays.Index);
 80143e0:	4ba6      	ldr	r3, [pc, #664]	; (801467c <readCanToStructs+0x33e0>)
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	4619      	mov	r1, r3
 80143e6:	48a6      	ldr	r0, [pc, #664]	; (8014680 <readCanToStructs+0x33e4>)
 80143e8:	f010 ffba 	bl	8025360 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 80143ec:	4aa5      	ldr	r2, [pc, #660]	; (8014684 <readCanToStructs+0x33e8>)
 80143ee:	4ba3      	ldr	r3, [pc, #652]	; (801467c <readCanToStructs+0x33e0>)
 80143f0:	4610      	mov	r0, r2
 80143f2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80143f6:	4602      	mov	r2, r0
 80143f8:	4619      	mov	r1, r3
 80143fa:	f8d1 c000 	ldr.w	ip, [r1]
 80143fe:	684e      	ldr	r6, [r1, #4]
 8014400:	688d      	ldr	r5, [r1, #8]
 8014402:	68c9      	ldr	r1, [r1, #12]
 8014404:	f8c2 c000 	str.w	ip, [r2]
 8014408:	6056      	str	r6, [r2, #4]
 801440a:	6095      	str	r5, [r2, #8]
 801440c:	60d1      	str	r1, [r2, #12]
 801440e:	3310      	adds	r3, #16
 8014410:	3010      	adds	r0, #16
 8014412:	42a3      	cmp	r3, r4
 8014414:	d1ef      	bne.n	80143f6 <readCanToStructs+0x315a>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 8014416:	f003 ff99 	bl	801834c <HAL_GetTick>
 801441a:	4603      	mov	r3, r0
 801441c:	4a9a      	ldr	r2, [pc, #616]	; (8014688 <readCanToStructs+0x33ec>)
 801441e:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8014420:	4b9a      	ldr	r3, [pc, #616]	; (801468c <readCanToStructs+0x33f0>)
 8014422:	2201      	movs	r2, #1
 8014424:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801442a:	4a92      	ldr	r2, [pc, #584]	; (8014674 <readCanToStructs+0x33d8>)
 801442c:	f240 4112 	movw	r1, #1042	; 0x412
 8014430:	fb01 f303 	mul.w	r3, r1, r3
 8014434:	4413      	add	r3, r2
 8014436:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801443a:	2200      	movs	r2, #0
 801443c:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 801443e:	e0e8      	b.n	8014612 <readCanToStructs+0x3376>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8014440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014444:	4a8b      	ldr	r2, [pc, #556]	; (8014674 <readCanToStructs+0x33d8>)
 8014446:	f240 4112 	movw	r1, #1042	; 0x412
 801444a:	fb01 f303 	mul.w	r3, r1, r3
 801444e:	4413      	add	r3, r2
 8014450:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8014454:	2201      	movs	r2, #1
 8014456:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8014458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801445c:	4985      	ldr	r1, [pc, #532]	; (8014674 <readCanToStructs+0x33d8>)
 801445e:	f240 4212 	movw	r2, #1042	; 0x412
 8014462:	fb03 f202 	mul.w	r2, r3, r2
 8014466:	440a      	add	r2, r1
 8014468:	f202 4211 	addw	r2, r2, #1041	; 0x411
 801446c:	7812      	ldrb	r2, [r2, #0]
 801446e:	3201      	adds	r2, #1
 8014470:	b2d0      	uxtb	r0, r2
 8014472:	4a80      	ldr	r2, [pc, #512]	; (8014674 <readCanToStructs+0x33d8>)
 8014474:	f240 4112 	movw	r1, #1042	; 0x412
 8014478:	fb01 f303 	mul.w	r3, r1, r3
 801447c:	4413      	add	r3, r2
 801447e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014482:	4602      	mov	r2, r0
 8014484:	701a      	strb	r2, [r3, #0]
				break;
 8014486:	e0c4      	b.n	8014612 <readCanToStructs+0x3376>

			case CAN_FAULT_INJECTION:

				uc_pp_charPtr = (uint8_t *)&KyosanFaultInjection_st;
 8014488:	4b81      	ldr	r3, [pc, #516]	; (8014690 <readCanToStructs+0x33f4>)
 801448a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801448c:	4b78      	ldr	r3, [pc, #480]	; (8014670 <readCanToStructs+0x33d4>)
 801448e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014492:	885b      	ldrh	r3, [r3, #2]
 8014494:	4a76      	ldr	r2, [pc, #472]	; (8014670 <readCanToStructs+0x33d4>)
 8014496:	011b      	lsls	r3, r3, #4
 8014498:	4413      	add	r3, r2
 801449a:	3304      	adds	r3, #4
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80144a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d110      	bne.n	80144cc <readCanToStructs+0x3230>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 80144aa:	2208      	movs	r2, #8
 80144ac:	2100      	movs	r1, #0
 80144ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144b0:	f010 fe6e 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80144b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144b8:	4a6e      	ldr	r2, [pc, #440]	; (8014674 <readCanToStructs+0x33d8>)
 80144ba:	f240 4112 	movw	r1, #1042	; 0x412
 80144be:	fb01 f303 	mul.w	r3, r1, r3
 80144c2:	4413      	add	r3, r2
 80144c4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80144c8:	2200      	movs	r2, #0
 80144ca:	701a      	strb	r2, [r3, #0]
				}
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80144cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144d0:	4a68      	ldr	r2, [pc, #416]	; (8014674 <readCanToStructs+0x33d8>)
 80144d2:	f240 4112 	movw	r1, #1042	; 0x412
 80144d6:	fb01 f303 	mul.w	r3, r1, r3
 80144da:	4413      	add	r3, r2
 80144dc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d011      	beq.n	801450e <readCanToStructs+0x3272>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 80144ea:	2208      	movs	r2, #8
 80144ec:	2100      	movs	r1, #0
 80144ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144f0:	f010 fe4e 	bl	8025190 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80144f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144f8:	4a5e      	ldr	r2, [pc, #376]	; (8014674 <readCanToStructs+0x33d8>)
 80144fa:	f240 4112 	movw	r1, #1042	; 0x412
 80144fe:	fb01 f303 	mul.w	r3, r1, r3
 8014502:	4413      	add	r3, r2
 8014504:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014508:	2200      	movs	r2, #0
 801450a:	701a      	strb	r2, [r3, #0]
					break;
 801450c:	e081      	b.n	8014612 <readCanToStructs+0x3376>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 801450e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014512:	4613      	mov	r3, r2
 8014514:	00db      	lsls	r3, r3, #3
 8014516:	1a9b      	subs	r3, r3, r2
 8014518:	461a      	mov	r2, r3
 801451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451c:	4413      	add	r3, r2
 801451e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014520:	2301      	movs	r3, #1
 8014522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014526:	e016      	b.n	8014556 <readCanToStructs+0x32ba>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014528:	4b51      	ldr	r3, [pc, #324]	; (8014670 <readCanToStructs+0x33d4>)
 801452a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801452e:	885b      	ldrh	r3, [r3, #2]
 8014530:	461a      	mov	r2, r3
 8014532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014536:	494e      	ldr	r1, [pc, #312]	; (8014670 <readCanToStructs+0x33d4>)
 8014538:	0112      	lsls	r2, r2, #4
 801453a:	440a      	add	r2, r1
 801453c:	4413      	add	r3, r2
 801453e:	3304      	adds	r3, #4
 8014540:	781a      	ldrb	r2, [r3, #0]
 8014542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014544:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014548:	3301      	adds	r3, #1
 801454a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801454c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014550:	3301      	adds	r3, #1
 8014552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014556:	4b46      	ldr	r3, [pc, #280]	; (8014670 <readCanToStructs+0x33d4>)
 8014558:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801455c:	885b      	ldrh	r3, [r3, #2]
 801455e:	4a44      	ldr	r2, [pc, #272]	; (8014670 <readCanToStructs+0x33d4>)
 8014560:	011b      	lsls	r3, r3, #4
 8014562:	4413      	add	r3, r2
 8014564:	330c      	adds	r3, #12
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801456c:	429a      	cmp	r2, r3
 801456e:	d3db      	bcc.n	8014528 <readCanToStructs+0x328c>
				}
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_FAULT_INJECTION_t))
 8014570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014574:	4a3f      	ldr	r2, [pc, #252]	; (8014674 <readCanToStructs+0x33d8>)
 8014576:	f240 4112 	movw	r1, #1042	; 0x412
 801457a:	fb01 f303 	mul.w	r3, r1, r3
 801457e:	4413      	add	r3, r2
 8014580:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	461a      	mov	r2, r3
 8014588:	4613      	mov	r3, r2
 801458a:	00db      	lsls	r3, r3, #3
 801458c:	1a9a      	subs	r2, r3, r2
 801458e:	4b38      	ldr	r3, [pc, #224]	; (8014670 <readCanToStructs+0x33d4>)
 8014590:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014594:	885b      	ldrh	r3, [r3, #2]
 8014596:	4936      	ldr	r1, [pc, #216]	; (8014670 <readCanToStructs+0x33d4>)
 8014598:	011b      	lsls	r3, r3, #4
 801459a:	440b      	add	r3, r1
 801459c:	330c      	adds	r3, #12
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	3b01      	subs	r3, #1
 80145a2:	4413      	add	r3, r2
 80145a4:	2b07      	cmp	r3, #7
 80145a6:	d90f      	bls.n	80145c8 <readCanToStructs+0x332c>
				{
					printf("Received CAN_FAULT_INJECTION\n");
 80145a8:	483a      	ldr	r0, [pc, #232]	; (8014694 <readCanToStructs+0x33f8>)
 80145aa:	f010 ff75 	bl	8025498 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80145ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145b2:	4a30      	ldr	r2, [pc, #192]	; (8014674 <readCanToStructs+0x33d8>)
 80145b4:	f240 4112 	movw	r1, #1042	; 0x412
 80145b8:	fb01 f303 	mul.w	r3, r1, r3
 80145bc:	4413      	add	r3, r2
 80145be:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80145c2:	2200      	movs	r2, #0
 80145c4:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;
 80145c6:	e024      	b.n	8014612 <readCanToStructs+0x3376>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80145c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145cc:	4a29      	ldr	r2, [pc, #164]	; (8014674 <readCanToStructs+0x33d8>)
 80145ce:	f240 4112 	movw	r1, #1042	; 0x412
 80145d2:	fb01 f303 	mul.w	r3, r1, r3
 80145d6:	4413      	add	r3, r2
 80145d8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80145dc:	2201      	movs	r2, #1
 80145de:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80145e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145e4:	4923      	ldr	r1, [pc, #140]	; (8014674 <readCanToStructs+0x33d8>)
 80145e6:	f240 4212 	movw	r2, #1042	; 0x412
 80145ea:	fb03 f202 	mul.w	r2, r3, r2
 80145ee:	440a      	add	r2, r1
 80145f0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80145f4:	7812      	ldrb	r2, [r2, #0]
 80145f6:	3201      	adds	r2, #1
 80145f8:	b2d0      	uxtb	r0, r2
 80145fa:	4a1e      	ldr	r2, [pc, #120]	; (8014674 <readCanToStructs+0x33d8>)
 80145fc:	f240 4112 	movw	r1, #1042	; 0x412
 8014600:	fb01 f303 	mul.w	r3, r1, r3
 8014604:	4413      	add	r3, r2
 8014606:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801460a:	4602      	mov	r2, r0
 801460c:	701a      	strb	r2, [r3, #0]
				break;
 801460e:	e000      	b.n	8014612 <readCanToStructs+0x3376>

			default:
				break;
 8014610:	bf00      	nop
			}

			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8014612:	4b17      	ldr	r3, [pc, #92]	; (8014670 <readCanToStructs+0x33d4>)
 8014614:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014618:	885b      	ldrh	r3, [r3, #2]
 801461a:	011b      	lsls	r3, r3, #4
 801461c:	4a14      	ldr	r2, [pc, #80]	; (8014670 <readCanToStructs+0x33d4>)
 801461e:	4413      	add	r3, r2
 8014620:	2210      	movs	r2, #16
 8014622:	2100      	movs	r1, #0
 8014624:	4618      	mov	r0, r3
 8014626:	f010 fdb3 	bl	8025190 <memset>
			canRead.Out++;
 801462a:	4b11      	ldr	r3, [pc, #68]	; (8014670 <readCanToStructs+0x33d4>)
 801462c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014630:	885b      	ldrh	r3, [r3, #2]
 8014632:	3301      	adds	r3, #1
 8014634:	b29a      	uxth	r2, r3
 8014636:	4b0e      	ldr	r3, [pc, #56]	; (8014670 <readCanToStructs+0x33d4>)
 8014638:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801463c:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801463e:	4b0c      	ldr	r3, [pc, #48]	; (8014670 <readCanToStructs+0x33d4>)
 8014640:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014644:	885b      	ldrh	r3, [r3, #2]
 8014646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801464a:	d104      	bne.n	8014656 <readCanToStructs+0x33ba>
				canRead.Out = 0;
 801464c:	4b08      	ldr	r3, [pc, #32]	; (8014670 <readCanToStructs+0x33d4>)
 801464e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014652:	2200      	movs	r2, #0
 8014654:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8014656:	f7fc fdcb 	bl	80111f0 <canDataReady>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	f47f ad03 	bne.w	8014068 <readCanToStructs+0x2dcc>
			/* Protocol Type */
		}
	}
	default:
		break;
 8014662:	bf00      	nop
 8014664:	e000      	b.n	8014668 <readCanToStructs+0x33cc>
			return;
 8014666:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8014668:	373c      	adds	r7, #60	; 0x3c
 801466a:	46bd      	mov	sp, r7
 801466c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801466e:	bf00      	nop
 8014670:	20005f4c 	.word	0x20005f4c
 8014674:	20005728 	.word	0x20005728
 8014678:	200009b5 	.word	0x200009b5
 801467c:	2000a20c 	.word	0x2000a20c
 8014680:	08029d28 	.word	0x08029d28
 8014684:	2000a1cc 	.word	0x2000a1cc
 8014688:	2000a2d0 	.word	0x2000a2d0
 801468c:	20000108 	.word	0x20000108
 8014690:	2000a170 	.word	0x2000a170
 8014694:	08029cc4 	.word	0x08029cc4

08014698 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	460b      	mov	r3, r1
 80146a2:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 80146a4:	2300      	movs	r3, #0
 80146a6:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 80146a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80146ac:	461a      	mov	r2, r3
 80146ae:	6879      	ldr	r1, [r7, #4]
 80146b0:	2000      	movs	r0, #0
 80146b2:	f000 f845 	bl	8014740 <GetCRC16>
 80146b6:	4603      	mov	r3, r0
 80146b8:	461a      	mov	r2, r3
 80146ba:	4b1d      	ldr	r3, [pc, #116]	; (8014730 <CheckCRC+0x98>)
 80146bc:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 80146be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	4413      	add	r3, r2
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	b29a      	uxth	r2, r3
 80146ca:	4b1a      	ldr	r3, [pc, #104]	; (8014734 <CheckCRC+0x9c>)
 80146cc:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 80146ce:	4b19      	ldr	r3, [pc, #100]	; (8014734 <CheckCRC+0x9c>)
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	021b      	lsls	r3, r3, #8
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	4b17      	ldr	r3, [pc, #92]	; (8014734 <CheckCRC+0x9c>)
 80146d8:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 80146da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80146de:	3301      	adds	r3, #1
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	4413      	add	r3, r2
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	b29a      	uxth	r2, r3
 80146e8:	4b12      	ldr	r3, [pc, #72]	; (8014734 <CheckCRC+0x9c>)
 80146ea:	881b      	ldrh	r3, [r3, #0]
 80146ec:	4313      	orrs	r3, r2
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	4b10      	ldr	r3, [pc, #64]	; (8014734 <CheckCRC+0x9c>)
 80146f2:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 80146f4:	4b0f      	ldr	r3, [pc, #60]	; (8014734 <CheckCRC+0x9c>)
 80146f6:	881a      	ldrh	r2, [r3, #0]
 80146f8:	4b0d      	ldr	r3, [pc, #52]	; (8014730 <CheckCRC+0x98>)
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d105      	bne.n	801470c <CheckCRC+0x74>
	{
		retVal = 1;
 8014700:	2301      	movs	r3, #1
 8014702:	81fb      	strh	r3, [r7, #14]
		return k;
 8014704:	4b0b      	ldr	r3, [pc, #44]	; (8014734 <CheckCRC+0x9c>)
 8014706:	881b      	ldrh	r3, [r3, #0]
 8014708:	b21b      	sxth	r3, r3
 801470a:	e00d      	b.n	8014728 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 801470c:	4b08      	ldr	r3, [pc, #32]	; (8014730 <CheckCRC+0x98>)
 801470e:	881b      	ldrh	r3, [r3, #0]
 8014710:	4619      	mov	r1, r3
 8014712:	4809      	ldr	r0, [pc, #36]	; (8014738 <CheckCRC+0xa0>)
 8014714:	f010 fe24 	bl	8025360 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8014718:	4b06      	ldr	r3, [pc, #24]	; (8014734 <CheckCRC+0x9c>)
 801471a:	881b      	ldrh	r3, [r3, #0]
 801471c:	4619      	mov	r1, r3
 801471e:	4807      	ldr	r0, [pc, #28]	; (801473c <CheckCRC+0xa4>)
 8014720:	f010 fe1e 	bl	8025360 <iprintf>
	return retVal;
 8014724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014728:	4618      	mov	r0, r3
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	2000a0a8 	.word	0x2000a0a8
 8014734:	2000a0aa 	.word	0x2000a0aa
 8014738:	08029d3c 	.word	0x08029d3c
 801473c:	08029d54 	.word	0x08029d54

08014740 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8014740:	b480      	push	{r7}
 8014742:	b085      	sub	sp, #20
 8014744:	af00      	add	r7, sp, #0
 8014746:	4603      	mov	r3, r0
 8014748:	6039      	str	r1, [r7, #0]
 801474a:	80fb      	strh	r3, [r7, #6]
 801474c:	4613      	mov	r3, r2
 801474e:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8014750:	88fb      	ldrh	r3, [r7, #6]
 8014752:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8014754:	e038      	b.n	80147c8 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8014756:	89fb      	ldrh	r3, [r7, #14]
 8014758:	f003 030f 	and.w	r3, r3, #15
 801475c:	4a22      	ldr	r2, [pc, #136]	; (80147e8 <GetCRC16+0xa8>)
 801475e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014762:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8014764:	89fb      	ldrh	r3, [r7, #14]
 8014766:	091b      	lsrs	r3, r3, #4
 8014768:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 801476a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801476e:	89bb      	ldrh	r3, [r7, #12]
 8014770:	4053      	eors	r3, r2
 8014772:	b21a      	sxth	r2, r3
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	f003 030f 	and.w	r3, r3, #15
 801477c:	491a      	ldr	r1, [pc, #104]	; (80147e8 <GetCRC16+0xa8>)
 801477e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014782:	b21b      	sxth	r3, r3
 8014784:	4053      	eors	r3, r2
 8014786:	b21b      	sxth	r3, r3
 8014788:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 801478a:	89fb      	ldrh	r3, [r7, #14]
 801478c:	f003 030f 	and.w	r3, r3, #15
 8014790:	4a15      	ldr	r2, [pc, #84]	; (80147e8 <GetCRC16+0xa8>)
 8014792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014796:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8014798:	89fb      	ldrh	r3, [r7, #14]
 801479a:	091b      	lsrs	r3, r3, #4
 801479c:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 801479e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80147a2:	89bb      	ldrh	r3, [r7, #12]
 80147a4:	4053      	eors	r3, r2
 80147a6:	b21a      	sxth	r2, r3
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	091b      	lsrs	r3, r3, #4
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	f003 030f 	and.w	r3, r3, #15
 80147b4:	490c      	ldr	r1, [pc, #48]	; (80147e8 <GetCRC16+0xa8>)
 80147b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80147ba:	b21b      	sxth	r3, r3
 80147bc:	4053      	eors	r3, r2
 80147be:	b21b      	sxth	r3, r3
 80147c0:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	3301      	adds	r3, #1
 80147c6:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 80147c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80147cc:	b29a      	uxth	r2, r3
 80147ce:	3a01      	subs	r2, #1
 80147d0:	b292      	uxth	r2, r2
 80147d2:	80ba      	strh	r2, [r7, #4]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	dcbe      	bgt.n	8014756 <GetCRC16+0x16>
	}
	return(uiCrc);
 80147d8:	89fb      	ldrh	r3, [r7, #14]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3714      	adds	r7, #20
 80147de:	46bd      	mov	sp, r7
 80147e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	0802c250 	.word	0x0802c250

080147ec <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	460b      	mov	r3, r1
 80147f6:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 80147f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80147fc:	461a      	mov	r2, r3
 80147fe:	6879      	ldr	r1, [r7, #4]
 8014800:	2000      	movs	r0, #0
 8014802:	f7ff ff9d 	bl	8014740 <GetCRC16>
 8014806:	4603      	mov	r3, r0
 8014808:	461a      	mov	r2, r3
 801480a:	4b11      	ldr	r3, [pc, #68]	; (8014850 <ComputeCRC+0x64>)
 801480c:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 801480e:	4b10      	ldr	r3, [pc, #64]	; (8014850 <ComputeCRC+0x64>)
 8014810:	881a      	ldrh	r2, [r3, #0]
 8014812:	4b10      	ldr	r3, [pc, #64]	; (8014854 <ComputeCRC+0x68>)
 8014814:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8014816:	4b0e      	ldr	r3, [pc, #56]	; (8014850 <ComputeCRC+0x64>)
 8014818:	8819      	ldrh	r1, [r3, #0]
 801481a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801481e:	3301      	adds	r3, #1
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	4413      	add	r3, r2
 8014824:	b2ca      	uxtb	r2, r1
 8014826:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8014828:	4b09      	ldr	r3, [pc, #36]	; (8014850 <ComputeCRC+0x64>)
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	0a1b      	lsrs	r3, r3, #8
 801482e:	b29a      	uxth	r2, r3
 8014830:	4b07      	ldr	r3, [pc, #28]	; (8014850 <ComputeCRC+0x64>)
 8014832:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8014834:	4b06      	ldr	r3, [pc, #24]	; (8014850 <ComputeCRC+0x64>)
 8014836:	8819      	ldrh	r1, [r3, #0]
 8014838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801483c:	687a      	ldr	r2, [r7, #4]
 801483e:	4413      	add	r3, r2
 8014840:	b2ca      	uxtb	r2, r1
 8014842:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8014844:	4b03      	ldr	r3, [pc, #12]	; (8014854 <ComputeCRC+0x68>)
 8014846:	881b      	ldrh	r3, [r3, #0]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3708      	adds	r7, #8
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	2000a0ac 	.word	0x2000a0ac
 8014854:	2000a0ae 	.word	0x2000a0ae

08014858 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8014858:	b480      	push	{r7}
 801485a:	b087      	sub	sp, #28
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8014860:	2300      	movs	r3, #0
 8014862:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8014864:	2300      	movs	r3, #0
 8014866:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8014868:	2300      	movs	r3, #0
 801486a:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	005b      	lsls	r3, r3, #1
 8014870:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8014872:	2300      	movs	r3, #0
 8014874:	60fb      	str	r3, [r7, #12]
 8014876:	e012      	b.n	801489e <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	f003 0301 	and.w	r3, r3, #1
 801487e:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	f1c3 031f 	rsb	r3, r3, #31
 8014886:	68ba      	ldr	r2, [r7, #8]
 8014888:	fa02 f303 	lsl.w	r3, r2, r3
 801488c:	697a      	ldr	r2, [r7, #20]
 801488e:	4313      	orrs	r3, r2
 8014890:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	085b      	lsrs	r3, r3, #1
 8014896:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	3301      	adds	r3, #1
 801489c:	60fb      	str	r3, [r7, #12]
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2b1f      	cmp	r3, #31
 80148a2:	dde9      	ble.n	8014878 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 80148a4:	697b      	ldr	r3, [r7, #20]
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	371c      	adds	r7, #28
 80148aa:	46bd      	mov	sp, r7
 80148ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b0:	4770      	bx	lr
	...

080148b4 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b088      	sub	sp, #32
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	460b      	mov	r3, r1
 80148be:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 80148c0:	2300      	movs	r3, #0
 80148c2:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 80148c4:	2300      	movs	r3, #0
 80148c6:	617b      	str	r3, [r7, #20]
	int converted = 0;
 80148c8:	2300      	movs	r3, #0
 80148ca:	613b      	str	r3, [r7, #16]
	int i=0;
 80148cc:	2300      	movs	r3, #0
 80148ce:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 80148d0:	4b26      	ldr	r3, [pc, #152]	; (801496c <CalculateDirectReverseCrc+0xb8>)
 80148d2:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 80148d4:	68f8      	ldr	r0, [r7, #12]
 80148d6:	f7ff ffbf 	bl	8014858 <ReverseCRCPolynomial>
 80148da:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 80148dc:	2300      	movs	r3, #0
 80148de:	61bb      	str	r3, [r7, #24]
 80148e0:	e00d      	b.n	80148fe <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 80148e2:	69f8      	ldr	r0, [r7, #28]
 80148e4:	69bb      	ldr	r3, [r7, #24]
 80148e6:	687a      	ldr	r2, [r7, #4]
 80148e8:	4413      	add	r3, r2
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	697a      	ldr	r2, [r7, #20]
 80148ee:	4619      	mov	r1, r3
 80148f0:	f000 f844 	bl	801497c <AnsoldoCrc>
 80148f4:	4603      	mov	r3, r0
 80148f6:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	3301      	adds	r3, #1
 80148fc:	61bb      	str	r3, [r7, #24]
 80148fe:	887b      	ldrh	r3, [r7, #2]
 8014900:	69ba      	ldr	r2, [r7, #24]
 8014902:	429a      	cmp	r2, r3
 8014904:	dbed      	blt.n	80148e2 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8014906:	69fb      	ldr	r3, [r7, #28]
 8014908:	061b      	lsls	r3, r3, #24
 801490a:	693a      	ldr	r2, [r7, #16]
 801490c:	4313      	orrs	r3, r2
 801490e:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	021b      	lsls	r3, r3, #8
 8014914:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014918:	693a      	ldr	r2, [r7, #16]
 801491a:	4313      	orrs	r3, r2
 801491c:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	121b      	asrs	r3, r3, #8
 8014922:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014926:	693a      	ldr	r2, [r7, #16]
 8014928:	4313      	orrs	r3, r2
 801492a:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	0e1a      	lsrs	r2, r3, #24
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	4313      	orrs	r3, r2
 8014934:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8014936:	4b0e      	ldr	r3, [pc, #56]	; (8014970 <CalculateDirectReverseCrc+0xbc>)
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	2b01      	cmp	r3, #1
 801493c:	d110      	bne.n	8014960 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 801493e:	480d      	ldr	r0, [pc, #52]	; (8014974 <CalculateDirectReverseCrc+0xc0>)
 8014940:	f008 f9b6 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8014944:	4601      	mov	r1, r0
 8014946:	4b0c      	ldr	r3, [pc, #48]	; (8014978 <CalculateDirectReverseCrc+0xc4>)
 8014948:	fba3 2301 	umull	r2, r3, r3, r1
 801494c:	08da      	lsrs	r2, r3, #3
 801494e:	4613      	mov	r3, r2
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	4413      	add	r3, r2
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	1aca      	subs	r2, r1, r3
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	4413      	add	r3, r2
 801495c:	3301      	adds	r3, #1
 801495e:	e000      	b.n	8014962 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8014960:	693b      	ldr	r3, [r7, #16]
}
 8014962:	4618      	mov	r0, r3
 8014964:	3720      	adds	r7, #32
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	d20d8a81 	.word	0xd20d8a81
 8014970:	200011a9 	.word	0x200011a9
 8014974:	2000a9e0 	.word	0x2000a9e0
 8014978:	cccccccd 	.word	0xcccccccd

0801497c <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 801497c:	b480      	push	{r7}
 801497e:	b08b      	sub	sp, #44	; 0x2c
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	460b      	mov	r3, r1
 8014986:	607a      	str	r2, [r7, #4]
 8014988:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 801498a:	7afb      	ldrb	r3, [r7, #11]
 801498c:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 801498e:	2301      	movs	r3, #1
 8014990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014994:	e01d      	b.n	80149d2 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	f003 0301 	and.w	r3, r3, #1
 801499c:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 801499e:	6a3b      	ldr	r3, [r7, #32]
 80149a0:	f003 0301 	and.w	r3, r3, #1
 80149a4:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	085b      	lsrs	r3, r3, #1
 80149aa:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 80149ac:	69fa      	ldr	r2, [r7, #28]
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	4053      	eors	r3, r2
 80149b2:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d103      	bne.n	80149c2 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 80149ba:	68fa      	ldr	r2, [r7, #12]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	4053      	eors	r3, r2
 80149c0:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 80149c2:	6a3b      	ldr	r3, [r7, #32]
 80149c4:	085b      	lsrs	r3, r3, #1
 80149c6:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 80149c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149cc:	3301      	adds	r3, #1
 80149ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80149d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149d6:	2b08      	cmp	r3, #8
 80149d8:	d9dd      	bls.n	8014996 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 80149da:	68fb      	ldr	r3, [r7, #12]
}
 80149dc:	4618      	mov	r0, r3
 80149de:	372c      	adds	r7, #44	; 0x2c
 80149e0:	46bd      	mov	sp, r7
 80149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e6:	4770      	bx	lr

080149e8 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b090      	sub	sp, #64	; 0x40
 80149ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149f2:	2200      	movs	r2, #0
 80149f4:	601a      	str	r2, [r3, #0]
 80149f6:	605a      	str	r2, [r3, #4]
 80149f8:	609a      	str	r2, [r3, #8]
 80149fa:	60da      	str	r2, [r3, #12]
 80149fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80149fe:	4bb2      	ldr	r3, [pc, #712]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a02:	4ab1      	ldr	r2, [pc, #708]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014a08:	6313      	str	r3, [r2, #48]	; 0x30
 8014a0a:	4baf      	ldr	r3, [pc, #700]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8014a16:	4bac      	ldr	r3, [pc, #688]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a1a:	4aab      	ldr	r2, [pc, #684]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a1c:	f043 0320 	orr.w	r3, r3, #32
 8014a20:	6313      	str	r3, [r2, #48]	; 0x30
 8014a22:	4ba9      	ldr	r3, [pc, #676]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a26:	f003 0320 	and.w	r3, r3, #32
 8014a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8014a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8014a2e:	4ba6      	ldr	r3, [pc, #664]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a32:	4aa5      	ldr	r2, [pc, #660]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a38:	6313      	str	r3, [r2, #48]	; 0x30
 8014a3a:	4ba3      	ldr	r3, [pc, #652]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a42:	623b      	str	r3, [r7, #32]
 8014a44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014a46:	4ba0      	ldr	r3, [pc, #640]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a4a:	4a9f      	ldr	r2, [pc, #636]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a4c:	f043 0304 	orr.w	r3, r3, #4
 8014a50:	6313      	str	r3, [r2, #48]	; 0x30
 8014a52:	4b9d      	ldr	r3, [pc, #628]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a56:	f003 0304 	and.w	r3, r3, #4
 8014a5a:	61fb      	str	r3, [r7, #28]
 8014a5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014a5e:	4b9a      	ldr	r3, [pc, #616]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a62:	4a99      	ldr	r2, [pc, #612]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a64:	f043 0301 	orr.w	r3, r3, #1
 8014a68:	6313      	str	r3, [r2, #48]	; 0x30
 8014a6a:	4b97      	ldr	r3, [pc, #604]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a6e:	f003 0301 	and.w	r3, r3, #1
 8014a72:	61bb      	str	r3, [r7, #24]
 8014a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8014a76:	4b94      	ldr	r3, [pc, #592]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a7a:	4a93      	ldr	r2, [pc, #588]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a80:	6313      	str	r3, [r2, #48]	; 0x30
 8014a82:	4b91      	ldr	r3, [pc, #580]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a8a:	617b      	str	r3, [r7, #20]
 8014a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8014a8e:	4b8e      	ldr	r3, [pc, #568]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a92:	4a8d      	ldr	r2, [pc, #564]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a94:	f043 0310 	orr.w	r3, r3, #16
 8014a98:	6313      	str	r3, [r2, #48]	; 0x30
 8014a9a:	4b8b      	ldr	r3, [pc, #556]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a9e:	f003 0310 	and.w	r3, r3, #16
 8014aa2:	613b      	str	r3, [r7, #16]
 8014aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014aa6:	4b88      	ldr	r3, [pc, #544]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aaa:	4a87      	ldr	r2, [pc, #540]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014aac:	f043 0302 	orr.w	r3, r3, #2
 8014ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8014ab2:	4b85      	ldr	r3, [pc, #532]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ab6:	f003 0302 	and.w	r3, r3, #2
 8014aba:	60fb      	str	r3, [r7, #12]
 8014abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8014abe:	4b82      	ldr	r3, [pc, #520]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ac2:	4a81      	ldr	r2, [pc, #516]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014ac4:	f043 0308 	orr.w	r3, r3, #8
 8014ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8014aca:	4b7f      	ldr	r3, [pc, #508]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ace:	f003 0308 	and.w	r3, r3, #8
 8014ad2:	60bb      	str	r3, [r7, #8]
 8014ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014ad6:	4b7c      	ldr	r3, [pc, #496]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ada:	4a7b      	ldr	r2, [pc, #492]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8014ae2:	4b79      	ldr	r3, [pc, #484]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014aea:	607b      	str	r3, [r7, #4]
 8014aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8014aee:	4b76      	ldr	r3, [pc, #472]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014af2:	4a75      	ldr	r2, [pc, #468]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014af8:	6313      	str	r3, [r2, #48]	; 0x30
 8014afa:	4b73      	ldr	r3, [pc, #460]	; (8014cc8 <MX_GPIO_Init+0x2e0>)
 8014afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b02:	603b      	str	r3, [r7, #0]
 8014b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8014b06:	2200      	movs	r2, #0
 8014b08:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8014b0c:	486f      	ldr	r0, [pc, #444]	; (8014ccc <MX_GPIO_Init+0x2e4>)
 8014b0e:	f006 f8ed 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8014b12:	2200      	movs	r2, #0
 8014b14:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8014b18:	486d      	ldr	r0, [pc, #436]	; (8014cd0 <MX_GPIO_Init+0x2e8>)
 8014b1a:	f006 f8e7 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f240 7104 	movw	r1, #1796	; 0x704
 8014b24:	486b      	ldr	r0, [pc, #428]	; (8014cd4 <MX_GPIO_Init+0x2ec>)
 8014b26:	f006 f8e1 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014b30:	4869      	ldr	r0, [pc, #420]	; (8014cd8 <MX_GPIO_Init+0x2f0>)
 8014b32:	f006 f8db 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8014b36:	2200      	movs	r2, #0
 8014b38:	f241 0104 	movw	r1, #4100	; 0x1004
 8014b3c:	4867      	ldr	r0, [pc, #412]	; (8014cdc <MX_GPIO_Init+0x2f4>)
 8014b3e:	f006 f8d5 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8014b42:	2201      	movs	r2, #1
 8014b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014b48:	4865      	ldr	r0, [pc, #404]	; (8014ce0 <MX_GPIO_Init+0x2f8>)
 8014b4a:	f006 f8cf 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8014b4e:	2200      	movs	r2, #0
 8014b50:	2108      	movs	r1, #8
 8014b52:	4864      	ldr	r0, [pc, #400]	; (8014ce4 <MX_GPIO_Init+0x2fc>)
 8014b54:	f006 f8ca 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8014b58:	2201      	movs	r2, #1
 8014b5a:	2160      	movs	r1, #96	; 0x60
 8014b5c:	4861      	ldr	r0, [pc, #388]	; (8014ce4 <MX_GPIO_Init+0x2fc>)
 8014b5e:	f006 f8c5 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8014b62:	2200      	movs	r2, #0
 8014b64:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8014b68:	485f      	ldr	r0, [pc, #380]	; (8014ce8 <MX_GPIO_Init+0x300>)
 8014b6a:	f006 f8bf 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8014b6e:	2201      	movs	r2, #1
 8014b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014b74:	485c      	ldr	r0, [pc, #368]	; (8014ce8 <MX_GPIO_Init+0x300>)
 8014b76:	f006 f8b9 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014b80:	4856      	ldr	r0, [pc, #344]	; (8014cdc <MX_GPIO_Init+0x2f4>)
 8014b82:	f006 f8b3 	bl	801acec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8014b86:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8014b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b90:	2300      	movs	r3, #0
 8014b92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b94:	2303      	movs	r3, #3
 8014b96:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8014b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014b9c:	4619      	mov	r1, r3
 8014b9e:	484b      	ldr	r0, [pc, #300]	; (8014ccc <MX_GPIO_Init+0x2e4>)
 8014ba0:	f005 fee0 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8014ba4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014baa:	2300      	movs	r3, #0
 8014bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8014bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	4844      	ldr	r0, [pc, #272]	; (8014ccc <MX_GPIO_Init+0x2e4>)
 8014bba:	f005 fed3 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8014bbe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8014bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014bcc:	2303      	movs	r3, #3
 8014bce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	483e      	ldr	r0, [pc, #248]	; (8014cd0 <MX_GPIO_Init+0x2e8>)
 8014bd8:	f005 fec4 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8014bdc:	2304      	movs	r3, #4
 8014bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014be0:	2300      	movs	r3, #0
 8014be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014be4:	2300      	movs	r3, #0
 8014be6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 8014be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014bec:	4619      	mov	r1, r3
 8014bee:	483c      	ldr	r0, [pc, #240]	; (8014ce0 <MX_GPIO_Init+0x2f8>)
 8014bf0:	f005 feb8 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8014bf4:	f240 7304 	movw	r3, #1796	; 0x704
 8014bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014c02:	2303      	movs	r3, #3
 8014c04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	4831      	ldr	r0, [pc, #196]	; (8014cd4 <MX_GPIO_Init+0x2ec>)
 8014c0e:	f005 fea9 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8014c12:	2303      	movs	r3, #3
 8014c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014c16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8014c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c24:	4619      	mov	r1, r3
 8014c26:	482d      	ldr	r0, [pc, #180]	; (8014cdc <MX_GPIO_Init+0x2f4>)
 8014c28:	f005 fe9c 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8014c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014c32:	2300      	movs	r3, #0
 8014c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c36:	2300      	movs	r3, #0
 8014c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8014c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c3e:	4619      	mov	r1, r3
 8014c40:	4825      	ldr	r0, [pc, #148]	; (8014cd8 <MX_GPIO_Init+0x2f0>)
 8014c42:	f005 fe8f 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8014c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c50:	2300      	movs	r3, #0
 8014c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014c54:	2303      	movs	r3, #3
 8014c56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8014c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	481e      	ldr	r0, [pc, #120]	; (8014cd8 <MX_GPIO_Init+0x2f0>)
 8014c60:	f005 fe80 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8014c64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8014c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c76:	4619      	mov	r1, r3
 8014c78:	481a      	ldr	r0, [pc, #104]	; (8014ce4 <MX_GPIO_Init+0x2fc>)
 8014c7a:	f005 fe73 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8014c7e:	f241 4304 	movw	r3, #5124	; 0x1404
 8014c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014c84:	2301      	movs	r3, #1
 8014c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014c8c:	2303      	movs	r3, #3
 8014c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c94:	4619      	mov	r1, r3
 8014c96:	4811      	ldr	r0, [pc, #68]	; (8014cdc <MX_GPIO_Init+0x2f4>)
 8014c98:	f005 fe64 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8014c9c:	2308      	movs	r3, #8
 8014c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8014ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014cac:	4619      	mov	r1, r3
 8014cae:	480b      	ldr	r0, [pc, #44]	; (8014cdc <MX_GPIO_Init+0x2f4>)
 8014cb0:	f005 fe58 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8014cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014cba:	2301      	movs	r3, #1
 8014cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cc6:	e011      	b.n	8014cec <MX_GPIO_Init+0x304>
 8014cc8:	40023800 	.word	0x40023800
 8014ccc:	40022000 	.word	0x40022000
 8014cd0:	40021400 	.word	0x40021400
 8014cd4:	40021c00 	.word	0x40021c00
 8014cd8:	40021000 	.word	0x40021000
 8014cdc:	40021800 	.word	0x40021800
 8014ce0:	40020800 	.word	0x40020800
 8014ce4:	40020c00 	.word	0x40020c00
 8014ce8:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8014cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	4836      	ldr	r0, [pc, #216]	; (8014dcc <MX_GPIO_Init+0x3e4>)
 8014cf4:	f005 fe36 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8014cf8:	2303      	movs	r3, #3
 8014cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014cfc:	2302      	movs	r3, #2
 8014cfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d00:	2300      	movs	r3, #0
 8014d02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d04:	2303      	movs	r3, #3
 8014d06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8014d08:	2309      	movs	r3, #9
 8014d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d10:	4619      	mov	r1, r3
 8014d12:	482f      	ldr	r0, [pc, #188]	; (8014dd0 <MX_GPIO_Init+0x3e8>)
 8014d14:	f005 fe26 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8014d18:	2368      	movs	r3, #104	; 0x68
 8014d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d20:	2300      	movs	r3, #0
 8014d22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d24:	2303      	movs	r3, #3
 8014d26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	4828      	ldr	r0, [pc, #160]	; (8014dd0 <MX_GPIO_Init+0x3e8>)
 8014d30:	f005 fe18 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8014d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8014d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d46:	4619      	mov	r1, r3
 8014d48:	4822      	ldr	r0, [pc, #136]	; (8014dd4 <MX_GPIO_Init+0x3ec>)
 8014d4a:	f005 fe0b 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 8014d4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014d54:	2301      	movs	r3, #1
 8014d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8014d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d64:	4619      	mov	r1, r3
 8014d66:	481b      	ldr	r0, [pc, #108]	; (8014dd4 <MX_GPIO_Init+0x3ec>)
 8014d68:	f005 fdfc 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8014d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014d72:	2301      	movs	r3, #1
 8014d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d76:	2300      	movs	r3, #0
 8014d78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d7a:	2303      	movs	r3, #3
 8014d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8014d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d82:	4619      	mov	r1, r3
 8014d84:	4813      	ldr	r0, [pc, #76]	; (8014dd4 <MX_GPIO_Init+0x3ec>)
 8014d86:	f005 fded 	bl	801a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8014d8a:	2318      	movs	r3, #24
 8014d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d92:	2300      	movs	r3, #0
 8014d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8014d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	480e      	ldr	r0, [pc, #56]	; (8014dd8 <MX_GPIO_Init+0x3f0>)
 8014d9e:	f005 fde1 	bl	801a964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8014da2:	2200      	movs	r2, #0
 8014da4:	2101      	movs	r1, #1
 8014da6:	2006      	movs	r0, #6
 8014da8:	f004 fab1 	bl	801930e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8014dac:	2006      	movs	r0, #6
 8014dae:	f004 faca 	bl	8019346 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8014db2:	2201      	movs	r2, #1
 8014db4:	2101      	movs	r1, #1
 8014db6:	2007      	movs	r0, #7
 8014db8:	f004 faa9 	bl	801930e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8014dbc:	2007      	movs	r0, #7
 8014dbe:	f004 fac2 	bl	8019346 <HAL_NVIC_EnableIRQ>

}
 8014dc2:	bf00      	nop
 8014dc4:	3740      	adds	r7, #64	; 0x40
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	40020800 	.word	0x40020800
 8014dd0:	40020c00 	.word	0x40020c00
 8014dd4:	40022400 	.word	0x40022400
 8014dd8:	40022800 	.word	0x40022800

08014ddc <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8014de0:	4b0a      	ldr	r3, [pc, #40]	; (8014e0c <Feed_wdt+0x30>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fa ff4b 	bl	800fc80 <HAL_Elaps_Ticks>
 8014dea:	4603      	mov	r3, r0
 8014dec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014df0:	d309      	bcc.n	8014e06 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8014df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014df6:	4806      	ldr	r0, [pc, #24]	; (8014e10 <Feed_wdt+0x34>)
 8014df8:	f005 ff91 	bl	801ad1e <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8014dfc:	f003 faa6 	bl	801834c <HAL_GetTick>
 8014e00:	4603      	mov	r3, r0
 8014e02:	4a02      	ldr	r2, [pc, #8]	; (8014e0c <Feed_wdt+0x30>)
 8014e04:	6013      	str	r3, [r2, #0]
	}

}
 8014e06:	bf00      	nop
 8014e08:	bd80      	pop	{r7, pc}
 8014e0a:	bf00      	nop
 8014e0c:	2000a0b0 	.word	0x2000a0b0
 8014e10:	40022400 	.word	0x40022400

08014e14 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8014e18:	4b09      	ldr	r3, [pc, #36]	; (8014e40 <Blink_S2+0x2c>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7fa ff2f 	bl	800fc80 <HAL_Elaps_Ticks>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b64      	cmp	r3, #100	; 0x64
 8014e26:	d909      	bls.n	8014e3c <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8014e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014e2c:	4805      	ldr	r0, [pc, #20]	; (8014e44 <Blink_S2+0x30>)
 8014e2e:	f005 ff76 	bl	801ad1e <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8014e32:	f003 fa8b 	bl	801834c <HAL_GetTick>
 8014e36:	4603      	mov	r3, r0
 8014e38:	4a01      	ldr	r2, [pc, #4]	; (8014e40 <Blink_S2+0x2c>)
 8014e3a:	6013      	str	r3, [r2, #0]
	}
}
 8014e3c:	bf00      	nop
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	2000a0b4 	.word	0x2000a0b4
 8014e44:	40021c00 	.word	0x40021c00

08014e48 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8014e4c:	4b1b      	ldr	r3, [pc, #108]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e4e:	4a1c      	ldr	r2, [pc, #112]	; (8014ec0 <MX_I2C1_Init+0x78>)
 8014e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8014e52:	4b1a      	ldr	r3, [pc, #104]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e54:	4a1b      	ldr	r2, [pc, #108]	; (8014ec4 <MX_I2C1_Init+0x7c>)
 8014e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8014e58:	4b18      	ldr	r3, [pc, #96]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014e5e:	4b17      	ldr	r3, [pc, #92]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e60:	2201      	movs	r2, #1
 8014e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014e64:	4b15      	ldr	r3, [pc, #84]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8014e6a:	4b14      	ldr	r3, [pc, #80]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8014e70:	4b12      	ldr	r3, [pc, #72]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e72:	2200      	movs	r2, #0
 8014e74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014e76:	4b11      	ldr	r3, [pc, #68]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e78:	2200      	movs	r2, #0
 8014e7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014e7c:	4b0f      	ldr	r3, [pc, #60]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e7e:	2200      	movs	r2, #0
 8014e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014e82:	480e      	ldr	r0, [pc, #56]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e84:	f005 ff8a 	bl	801ad9c <HAL_I2C_Init>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d001      	beq.n	8014e92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8014e8e:	f001 fc9f 	bl	80167d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014e92:	2100      	movs	r1, #0
 8014e94:	4809      	ldr	r0, [pc, #36]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014e96:	f006 fcd9 	bl	801b84c <HAL_I2CEx_ConfigAnalogFilter>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d001      	beq.n	8014ea4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8014ea0:	f001 fc96 	bl	80167d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8014ea4:	2100      	movs	r1, #0
 8014ea6:	4805      	ldr	r0, [pc, #20]	; (8014ebc <MX_I2C1_Init+0x74>)
 8014ea8:	f006 fd1b 	bl	801b8e2 <HAL_I2CEx_ConfigDigitalFilter>
 8014eac:	4603      	mov	r3, r0
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d001      	beq.n	8014eb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8014eb2:	f001 fc8d 	bl	80167d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8014eb6:	bf00      	nop
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	2000a0b8 	.word	0x2000a0b8
 8014ec0:	40005400 	.word	0x40005400
 8014ec4:	c0000e12 	.word	0xc0000e12

08014ec8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8014ecc:	4b1b      	ldr	r3, [pc, #108]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014ece:	4a1c      	ldr	r2, [pc, #112]	; (8014f40 <MX_I2C2_Init+0x78>)
 8014ed0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8014ed2:	4b1a      	ldr	r3, [pc, #104]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014ed4:	4a1b      	ldr	r2, [pc, #108]	; (8014f44 <MX_I2C2_Init+0x7c>)
 8014ed6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8014ed8:	4b18      	ldr	r3, [pc, #96]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014eda:	2200      	movs	r2, #0
 8014edc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014ede:	4b17      	ldr	r3, [pc, #92]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014ee4:	4b15      	ldr	r3, [pc, #84]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8014eea:	4b14      	ldr	r3, [pc, #80]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014eec:	2200      	movs	r2, #0
 8014eee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8014ef0:	4b12      	ldr	r3, [pc, #72]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014ef6:	4b11      	ldr	r3, [pc, #68]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014ef8:	2200      	movs	r2, #0
 8014efa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014efc:	4b0f      	ldr	r3, [pc, #60]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014efe:	2200      	movs	r2, #0
 8014f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8014f02:	480e      	ldr	r0, [pc, #56]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014f04:	f005 ff4a 	bl	801ad9c <HAL_I2C_Init>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d001      	beq.n	8014f12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8014f0e:	f001 fc5f 	bl	80167d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014f12:	2100      	movs	r1, #0
 8014f14:	4809      	ldr	r0, [pc, #36]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014f16:	f006 fc99 	bl	801b84c <HAL_I2CEx_ConfigAnalogFilter>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d001      	beq.n	8014f24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8014f20:	f001 fc56 	bl	80167d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8014f24:	2100      	movs	r1, #0
 8014f26:	4805      	ldr	r0, [pc, #20]	; (8014f3c <MX_I2C2_Init+0x74>)
 8014f28:	f006 fcdb 	bl	801b8e2 <HAL_I2CEx_ConfigDigitalFilter>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d001      	beq.n	8014f36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8014f32:	f001 fc4d 	bl	80167d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8014f36:	bf00      	nop
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	2000a10c 	.word	0x2000a10c
 8014f40:	40005800 	.word	0x40005800
 8014f44:	c0000e12 	.word	0xc0000e12

08014f48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b0b0      	sub	sp, #192	; 0xc0
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014f54:	2200      	movs	r2, #0
 8014f56:	601a      	str	r2, [r3, #0]
 8014f58:	605a      	str	r2, [r3, #4]
 8014f5a:	609a      	str	r2, [r3, #8]
 8014f5c:	60da      	str	r2, [r3, #12]
 8014f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014f60:	f107 031c 	add.w	r3, r7, #28
 8014f64:	2290      	movs	r2, #144	; 0x90
 8014f66:	2100      	movs	r1, #0
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f010 f911 	bl	8025190 <memset>
  if(i2cHandle->Instance==I2C1)
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	4a44      	ldr	r2, [pc, #272]	; (8015084 <HAL_I2C_MspInit+0x13c>)
 8014f74:	4293      	cmp	r3, r2
 8014f76:	d13e      	bne.n	8014ff6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8014f78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014f7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014f84:	f107 031c 	add.w	r3, r7, #28
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f007 f9e9 	bl	801c360 <HAL_RCCEx_PeriphCLKConfig>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d001      	beq.n	8014f98 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8014f94:	f001 fc1c 	bl	80167d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014f98:	4b3b      	ldr	r3, [pc, #236]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8014f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f9c:	4a3a      	ldr	r2, [pc, #232]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8014f9e:	f043 0302 	orr.w	r3, r3, #2
 8014fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8014fa4:	4b38      	ldr	r3, [pc, #224]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8014fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fa8:	f003 0302 	and.w	r3, r3, #2
 8014fac:	61bb      	str	r3, [r7, #24]
 8014fae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8014fb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8014fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014fb8:	2312      	movs	r3, #18
 8014fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014fc4:	2303      	movs	r3, #3
 8014fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014fca:	2304      	movs	r3, #4
 8014fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014fd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	482d      	ldr	r0, [pc, #180]	; (801508c <HAL_I2C_MspInit+0x144>)
 8014fd8:	f005 fcc4 	bl	801a964 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014fdc:	4b2a      	ldr	r3, [pc, #168]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8014fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fe0:	4a29      	ldr	r2, [pc, #164]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8014fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8014fe8:	4b27      	ldr	r3, [pc, #156]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8014fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014ff0:	617b      	str	r3, [r7, #20]
 8014ff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8014ff4:	e041      	b.n	801507a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4a25      	ldr	r2, [pc, #148]	; (8015090 <HAL_I2C_MspInit+0x148>)
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	d13c      	bne.n	801507a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8015000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015004:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8015006:	2300      	movs	r3, #0
 8015008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801500c:	f107 031c 	add.w	r3, r7, #28
 8015010:	4618      	mov	r0, r3
 8015012:	f007 f9a5 	bl	801c360 <HAL_RCCEx_PeriphCLKConfig>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	d001      	beq.n	8015020 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 801501c:	f001 fbd8 	bl	80167d0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8015020:	4b19      	ldr	r3, [pc, #100]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8015022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015024:	4a18      	ldr	r2, [pc, #96]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8015026:	f043 0320 	orr.w	r3, r3, #32
 801502a:	6313      	str	r3, [r2, #48]	; 0x30
 801502c:	4b16      	ldr	r3, [pc, #88]	; (8015088 <HAL_I2C_MspInit+0x140>)
 801502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015030:	f003 0320 	and.w	r3, r3, #32
 8015034:	613b      	str	r3, [r7, #16]
 8015036:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8015038:	2303      	movs	r3, #3
 801503a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801503e:	2312      	movs	r3, #18
 8015040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015044:	2300      	movs	r3, #0
 8015046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801504a:	2303      	movs	r3, #3
 801504c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8015050:	2304      	movs	r3, #4
 8015052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015056:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801505a:	4619      	mov	r1, r3
 801505c:	480d      	ldr	r0, [pc, #52]	; (8015094 <HAL_I2C_MspInit+0x14c>)
 801505e:	f005 fc81 	bl	801a964 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8015062:	4b09      	ldr	r3, [pc, #36]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8015064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015066:	4a08      	ldr	r2, [pc, #32]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8015068:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801506c:	6413      	str	r3, [r2, #64]	; 0x40
 801506e:	4b06      	ldr	r3, [pc, #24]	; (8015088 <HAL_I2C_MspInit+0x140>)
 8015070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015076:	60fb      	str	r3, [r7, #12]
 8015078:	68fb      	ldr	r3, [r7, #12]
}
 801507a:	bf00      	nop
 801507c:	37c0      	adds	r7, #192	; 0xc0
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	40005400 	.word	0x40005400
 8015088:	40023800 	.word	0x40023800
 801508c:	40020400 	.word	0x40020400
 8015090:	40005800 	.word	0x40005800
 8015094:	40021400 	.word	0x40021400

08015098 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 801509c:	4b0b      	ldr	r3, [pc, #44]	; (80150cc <MX_IWDG_Init+0x34>)
 801509e:	4a0c      	ldr	r2, [pc, #48]	; (80150d0 <MX_IWDG_Init+0x38>)
 80150a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80150a2:	4b0a      	ldr	r3, [pc, #40]	; (80150cc <MX_IWDG_Init+0x34>)
 80150a4:	2203      	movs	r2, #3
 80150a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80150a8:	4b08      	ldr	r3, [pc, #32]	; (80150cc <MX_IWDG_Init+0x34>)
 80150aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80150ae:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 80150b0:	4b06      	ldr	r3, [pc, #24]	; (80150cc <MX_IWDG_Init+0x34>)
 80150b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80150b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80150b8:	4804      	ldr	r0, [pc, #16]	; (80150cc <MX_IWDG_Init+0x34>)
 80150ba:	f006 fc5e 	bl	801b97a <HAL_IWDG_Init>
 80150be:	4603      	mov	r3, r0
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d001      	beq.n	80150c8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80150c4:	f001 fb84 	bl	80167d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80150c8:	bf00      	nop
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	2000a160 	.word	0x2000a160
 80150d0:	40003000 	.word	0x40003000

080150d4 <Process_Kyosan_EI>:
#ifdef EI_1
uint8_t SendThisCardRelays = 0;
#endif

void Process_Kyosan_EI(void)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	af00      	add	r7, sp, #0

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80150d8:	4810      	ldr	r0, [pc, #64]	; (801511c <Process_Kyosan_EI+0x48>)
 80150da:	f006 fc9d 	bl	801ba18 <HAL_IWDG_Refresh>

		Feed_wdt();
 80150de:	f7ff fe7d 	bl	8014ddc <Feed_wdt>

		Get_Kyosan_EI_Message(KYOSAN_PORT);
 80150e2:	2003      	movs	r0, #3
 80150e4:	f000 f9f2 	bl	80154cc <Get_Kyosan_EI_Message>

		Process_Send_Signals_2_MIE_Kyosan();
 80150e8:	f000 f910 	bl	801530c <Process_Send_Signals_2_MIE_Kyosan>

		DetectCanXchangeFailure();
 80150ec:	f000 f8cc 	bl	8015288 <DetectCanXchangeFailure>

		Process_ComFailTimeout();
 80150f0:	f000 f81a 	bl	8015128 <Process_ComFailTimeout>

		readCanToStructs();
 80150f4:	f7fc f8d2 	bl	801129c <readCanToStructs>

		Check_forKyosanCMD();
 80150f8:	f000 fe70 	bl	8015ddc <Check_forKyosanCMD>

		SendKyosanRelays2Other();
 80150fc:	f000 f8aa 	bl	8015254 <SendKyosanRelays2Other>

		if(Dats_Request_Flag > 0)
 8015100:	4b07      	ldr	r3, [pc, #28]	; (8015120 <Process_Kyosan_EI+0x4c>)
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d0e7      	beq.n	80150d8 <Process_Kyosan_EI+0x4>
		{
			gucFlagUpdate = 3;
 8015108:	4b06      	ldr	r3, [pc, #24]	; (8015124 <Process_Kyosan_EI+0x50>)
 801510a:	2203      	movs	r2, #3
 801510c:	701a      	strb	r2, [r3, #0]
		}
	}

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 801510e:	4803      	ldr	r0, [pc, #12]	; (801511c <Process_Kyosan_EI+0x48>)
 8015110:	f006 fc82 	bl	801ba18 <HAL_IWDG_Refresh>
		Data_Processing();
 8015114:	f001 ffd4 	bl	80170c0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8015118:	e7f9      	b.n	801510e <Process_Kyosan_EI+0x3a>
 801511a:	bf00      	nop
 801511c:	2000a160 	.word	0x2000a160
 8015120:	200009b4 	.word	0x200009b4
 8015124:	20000db9 	.word	0x20000db9

08015128 <Process_ComFailTimeout>:
	}
}

void Process_ComFailTimeout(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	af00      	add	r7, sp, #0
	if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) > EI_data.Kyosan_st.Comm_Fail_Time)
 801512c:	4b43      	ldr	r3, [pc, #268]	; (801523c <Process_ComFailTimeout+0x114>)
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	4618      	mov	r0, r3
 8015132:	f7fa fda5 	bl	800fc80 <HAL_Elaps_Ticks>
 8015136:	4602      	mov	r2, r0
 8015138:	4b41      	ldr	r3, [pc, #260]	; (8015240 <Process_ComFailTimeout+0x118>)
 801513a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801513e:	429a      	cmp	r2, r3
 8015140:	d82b      	bhi.n	801519a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015142:	4b3e      	ldr	r3, [pc, #248]	; (801523c <Process_ComFailTimeout+0x114>)
 8015144:	689b      	ldr	r3, [r3, #8]
 8015146:	4618      	mov	r0, r3
 8015148:	f7fa fd9a 	bl	800fc80 <HAL_Elaps_Ticks>
 801514c:	4602      	mov	r2, r0
 801514e:	4b3c      	ldr	r3, [pc, #240]	; (8015240 <Process_ComFailTimeout+0x118>)
 8015150:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015154:	429a      	cmp	r2, r3
 8015156:	d820      	bhi.n	801519a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015158:	4b38      	ldr	r3, [pc, #224]	; (801523c <Process_ComFailTimeout+0x114>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	4618      	mov	r0, r3
 801515e:	f7fa fd8f 	bl	800fc80 <HAL_Elaps_Ticks>
 8015162:	4602      	mov	r2, r0
 8015164:	4b36      	ldr	r3, [pc, #216]	; (8015240 <Process_ComFailTimeout+0x118>)
 8015166:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801516a:	429a      	cmp	r2, r3
 801516c:	d815      	bhi.n	801519a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 801516e:	4b33      	ldr	r3, [pc, #204]	; (801523c <Process_ComFailTimeout+0x114>)
 8015170:	68db      	ldr	r3, [r3, #12]
 8015172:	4618      	mov	r0, r3
 8015174:	f7fa fd84 	bl	800fc80 <HAL_Elaps_Ticks>
 8015178:	4602      	mov	r2, r0
 801517a:	4b31      	ldr	r3, [pc, #196]	; (8015240 <Process_ComFailTimeout+0x118>)
 801517c:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015180:	429a      	cmp	r2, r3
 8015182:	d80a      	bhi.n	801519a <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time))
 8015184:	4b2d      	ldr	r3, [pc, #180]	; (801523c <Process_ComFailTimeout+0x114>)
 8015186:	691b      	ldr	r3, [r3, #16]
 8015188:	4618      	mov	r0, r3
 801518a:	f7fa fd79 	bl	800fc80 <HAL_Elaps_Ticks>
 801518e:	4602      	mov	r2, r0
 8015190:	4b2b      	ldr	r3, [pc, #172]	; (8015240 <Process_ComFailTimeout+0x118>)
 8015192:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015196:	429a      	cmp	r2, r3
 8015198:	d913      	bls.n	80151c2 <Process_ComFailTimeout+0x9a>
	{

		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 801519a:	492a      	ldr	r1, [pc, #168]	; (8015244 <Process_ComFailTimeout+0x11c>)
 801519c:	482a      	ldr	r0, [pc, #168]	; (8015248 <Process_ComFailTimeout+0x120>)
 801519e:	f7eb f84f 	bl	8000240 <strcmp>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d047      	beq.n	8015238 <Process_ComFailTimeout+0x110>
			return;
		}



		if(Kyosan_SelfRelays.Message_Receiving == SET)
 80151a8:	4b28      	ldr	r3, [pc, #160]	; (801524c <Process_ComFailTimeout+0x124>)
 80151aa:	785b      	ldrb	r3, [r3, #1]
 80151ac:	2b01      	cmp	r3, #1
 80151ae:	d144      	bne.n	801523a <Process_ComFailTimeout+0x112>
		{
			printf("Time out for Message Packets Reached\n");
 80151b0:	4827      	ldr	r0, [pc, #156]	; (8015250 <Process_ComFailTimeout+0x128>)
 80151b2:	f010 f971 	bl	8025498 <puts>
			memset(&Kyosan_SelfRelays,0,sizeof(KYOSAN_RELAYS_t));
 80151b6:	2240      	movs	r2, #64	; 0x40
 80151b8:	2100      	movs	r1, #0
 80151ba:	4824      	ldr	r0, [pc, #144]	; (801524c <Process_ComFailTimeout+0x124>)
 80151bc:	f00f ffe8 	bl	8025190 <memset>
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 80151c0:	e03b      	b.n	801523a <Process_ComFailTimeout+0x112>
		}
	}
	else if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) < EI_data.Kyosan_st.Comm_Fail_Time)
 80151c2:	4b1e      	ldr	r3, [pc, #120]	; (801523c <Process_ComFailTimeout+0x114>)
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fa fd5a 	bl	800fc80 <HAL_Elaps_Ticks>
 80151cc:	4602      	mov	r2, r0
 80151ce:	4b1c      	ldr	r3, [pc, #112]	; (8015240 <Process_ComFailTimeout+0x118>)
 80151d0:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d230      	bcs.n	801523a <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 80151d8:	4b18      	ldr	r3, [pc, #96]	; (801523c <Process_ComFailTimeout+0x114>)
 80151da:	689b      	ldr	r3, [r3, #8]
 80151dc:	4618      	mov	r0, r3
 80151de:	f7fa fd4f 	bl	800fc80 <HAL_Elaps_Ticks>
 80151e2:	4602      	mov	r2, r0
 80151e4:	4b16      	ldr	r3, [pc, #88]	; (8015240 <Process_ComFailTimeout+0x118>)
 80151e6:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d225      	bcs.n	801523a <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 80151ee:	4b13      	ldr	r3, [pc, #76]	; (801523c <Process_ComFailTimeout+0x114>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7fa fd44 	bl	800fc80 <HAL_Elaps_Ticks>
 80151f8:	4602      	mov	r2, r0
 80151fa:	4b11      	ldr	r3, [pc, #68]	; (8015240 <Process_ComFailTimeout+0x118>)
 80151fc:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015200:	429a      	cmp	r2, r3
 8015202:	d21a      	bcs.n	801523a <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8015204:	4b0d      	ldr	r3, [pc, #52]	; (801523c <Process_ComFailTimeout+0x114>)
 8015206:	68db      	ldr	r3, [r3, #12]
 8015208:	4618      	mov	r0, r3
 801520a:	f7fa fd39 	bl	800fc80 <HAL_Elaps_Ticks>
 801520e:	4602      	mov	r2, r0
 8015210:	4b0b      	ldr	r3, [pc, #44]	; (8015240 <Process_ComFailTimeout+0x118>)
 8015212:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015216:	429a      	cmp	r2, r3
 8015218:	d20f      	bcs.n	801523a <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time))
 801521a:	4b08      	ldr	r3, [pc, #32]	; (801523c <Process_ComFailTimeout+0x114>)
 801521c:	691b      	ldr	r3, [r3, #16]
 801521e:	4618      	mov	r0, r3
 8015220:	f7fa fd2e 	bl	800fc80 <HAL_Elaps_Ticks>
 8015224:	4602      	mov	r2, r0
 8015226:	4b06      	ldr	r3, [pc, #24]	; (8015240 <Process_ComFailTimeout+0x118>)
 8015228:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801522c:	429a      	cmp	r2, r3
 801522e:	d204      	bcs.n	801523a <Process_ComFailTimeout+0x112>

	{
		Kyosan_SelfRelays.Message_Receiving = SET;
 8015230:	4b06      	ldr	r3, [pc, #24]	; (801524c <Process_ComFailTimeout+0x124>)
 8015232:	2201      	movs	r2, #1
 8015234:	705a      	strb	r2, [r3, #1]
 8015236:	e000      	b.n	801523a <Process_ComFailTimeout+0x112>
			return;
 8015238:	bf00      	nop
	}
}
 801523a:	bd80      	pop	{r7, pc}
 801523c:	2000a178 	.word	0x2000a178
 8015240:	20000304 	.word	0x20000304
 8015244:	08029d6c 	.word	0x08029d6c
 8015248:	20000305 	.word	0x20000305
 801524c:	2000a18c 	.word	0x2000a18c
 8015250:	08029d78 	.word	0x08029d78

08015254 <SendKyosanRelays2Other>:
		RelayMisMatchCnt = RESET;
	}
}

void SendKyosanRelays2Other(void)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	af00      	add	r7, sp, #0
	static uint32_t RelaySendingClk = 0;
	if(HAL_Elaps_Ticks(RelaySendingClk) > 3000)
 8015258:	4b0a      	ldr	r3, [pc, #40]	; (8015284 <SendKyosanRelays2Other+0x30>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	4618      	mov	r0, r3
 801525e:	f7fa fd0f 	bl	800fc80 <HAL_Elaps_Ticks>
 8015262:	4603      	mov	r3, r0
 8015264:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8015268:	4293      	cmp	r3, r2
 801526a:	d908      	bls.n	801527e <SendKyosanRelays2Other+0x2a>
	{
#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 801526c:	f240 2007 	movw	r0, #519	; 0x207
 8015270:	f7fb faba 	bl	80107e8 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		RelaySendingClk = HAL_GetTick();
 8015274:	f003 f86a 	bl	801834c <HAL_GetTick>
 8015278:	4603      	mov	r3, r0
 801527a:	4a02      	ldr	r2, [pc, #8]	; (8015284 <SendKyosanRelays2Other+0x30>)
 801527c:	6013      	str	r3, [r2, #0]
	}
}
 801527e:	bf00      	nop
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	2000a6c4 	.word	0x2000a6c4

08015288 <DetectCanXchangeFailure>:

void DetectCanXchangeFailure(void)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	af00      	add	r7, sp, #0
	static uint32_t S2_BlinkClk = 0;

	if( (HAL_Elaps_Ticks(LastCANReceived_Clk_Kyosan) > EI_data.Kyosan_st.CAN_Fail_Clk) && (Is_CAN_Exchange_happening != RESET ))
 801528c:	4b18      	ldr	r3, [pc, #96]	; (80152f0 <DetectCanXchangeFailure+0x68>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	4618      	mov	r0, r3
 8015292:	f7fa fcf5 	bl	800fc80 <HAL_Elaps_Ticks>
 8015296:	4602      	mov	r2, r0
 8015298:	4b16      	ldr	r3, [pc, #88]	; (80152f4 <DetectCanXchangeFailure+0x6c>)
 801529a:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 801529e:	429a      	cmp	r2, r3
 80152a0:	d912      	bls.n	80152c8 <DetectCanXchangeFailure+0x40>
 80152a2:	4b15      	ldr	r3, [pc, #84]	; (80152f8 <DetectCanXchangeFailure+0x70>)
 80152a4:	781b      	ldrb	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d00e      	beq.n	80152c8 <DetectCanXchangeFailure+0x40>
	{
		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 80152aa:	4914      	ldr	r1, [pc, #80]	; (80152fc <DetectCanXchangeFailure+0x74>)
 80152ac:	4814      	ldr	r0, [pc, #80]	; (8015300 <DetectCanXchangeFailure+0x78>)
 80152ae:	f7ea ffc7 	bl	8000240 <strcmp>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d103      	bne.n	80152c0 <DetectCanXchangeFailure+0x38>
		{
			Is_CAN_Exchange_happening = SET;
 80152b8:	4b0f      	ldr	r3, [pc, #60]	; (80152f8 <DetectCanXchangeFailure+0x70>)
 80152ba:	2201      	movs	r2, #1
 80152bc:	701a      	strb	r2, [r3, #0]
			return;
 80152be:	e016      	b.n	80152ee <DetectCanXchangeFailure+0x66>
		}

		Is_CAN_Exchange_happening = RESET;
 80152c0:	4b0d      	ldr	r3, [pc, #52]	; (80152f8 <DetectCanXchangeFailure+0x70>)
 80152c2:	2200      	movs	r2, #0
 80152c4:	701a      	strb	r2, [r3, #0]
 80152c6:	e012      	b.n	80152ee <DetectCanXchangeFailure+0x66>
	}
	else
	{
		if(HAL_Elaps_Ticks(S2_BlinkClk) > 300)
 80152c8:	4b0e      	ldr	r3, [pc, #56]	; (8015304 <DetectCanXchangeFailure+0x7c>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	4618      	mov	r0, r3
 80152ce:	f7fa fcd7 	bl	800fc80 <HAL_Elaps_Ticks>
 80152d2:	4603      	mov	r3, r0
 80152d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80152d8:	d909      	bls.n	80152ee <DetectCanXchangeFailure+0x66>
		{
			S2_BlinkClk = HAL_GetTick();
 80152da:	f003 f837 	bl	801834c <HAL_GetTick>
 80152de:	4603      	mov	r3, r0
 80152e0:	4a08      	ldr	r2, [pc, #32]	; (8015304 <DetectCanXchangeFailure+0x7c>)
 80152e2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 80152e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80152e8:	4807      	ldr	r0, [pc, #28]	; (8015308 <DetectCanXchangeFailure+0x80>)
 80152ea:	f005 fd18 	bl	801ad1e <HAL_GPIO_TogglePin>
		}

	}
}
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	2000a2d0 	.word	0x2000a2d0
 80152f4:	20000304 	.word	0x20000304
 80152f8:	20000108 	.word	0x20000108
 80152fc:	08029d6c 	.word	0x08029d6c
 8015300:	20000305 	.word	0x20000305
 8015304:	2000a6c8 	.word	0x2000a6c8
 8015308:	40021c00 	.word	0x40021c00

0801530c <Process_Send_Signals_2_MIE_Kyosan>:

void Process_Send_Signals_2_MIE_Kyosan(void)
{
 801530c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
	uint8_t Choice =0;
 8015312:	2300      	movs	r3, #0
 8015314:	71fb      	strb	r3, [r7, #7]

	if(HAL_Elaps_Ticks(MIE_SignalsSending_Clk_Kyosan) > EI_data.Kyosan_st.MIE_SEND_CLK)
 8015316:	4b62      	ldr	r3, [pc, #392]	; (80154a0 <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	4618      	mov	r0, r3
 801531c:	f7fa fcb0 	bl	800fc80 <HAL_Elaps_Ticks>
 8015320:	4602      	mov	r2, r0
 8015322:	4b60      	ldr	r3, [pc, #384]	; (80154a4 <Process_Send_Signals_2_MIE_Kyosan+0x198>)
 8015324:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8015328:	429a      	cmp	r2, r3
 801532a:	f240 80b5 	bls.w	8015498 <Process_Send_Signals_2_MIE_Kyosan+0x18c>
	{
#ifdef EI_1
		if((Is_CAN_Exchange_happening == SET) && (MisMatchFlagKyosan == RESET) )
 801532e:	4b5e      	ldr	r3, [pc, #376]	; (80154a8 <Process_Send_Signals_2_MIE_Kyosan+0x19c>)
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	2b01      	cmp	r3, #1
 8015334:	f040 80a2 	bne.w	801547c <Process_Send_Signals_2_MIE_Kyosan+0x170>
 8015338:	4b5c      	ldr	r3, [pc, #368]	; (80154ac <Process_Send_Signals_2_MIE_Kyosan+0x1a0>)
 801533a:	781b      	ldrb	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	f040 809d 	bne.w	801547c <Process_Send_Signals_2_MIE_Kyosan+0x170>
		{

			Choice = 0;
 8015342:	2300      	movs	r3, #0
 8015344:	71fb      	strb	r3, [r7, #7]
			(Kyosan_OtherRelays.Message_Receiving == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8015346:	4b5a      	ldr	r3, [pc, #360]	; (80154b0 <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 8015348:	785b      	ldrb	r3, [r3, #1]
 801534a:	2b01      	cmp	r3, #1
 801534c:	d104      	bne.n	8015358 <Process_Send_Signals_2_MIE_Kyosan+0x4c>
 801534e:	79fb      	ldrb	r3, [r7, #7]
 8015350:	f043 0301 	orr.w	r3, r3, #1
 8015354:	71fb      	strb	r3, [r7, #7]
 8015356:	e003      	b.n	8015360 <Process_Send_Signals_2_MIE_Kyosan+0x54>
 8015358:	79fb      	ldrb	r3, [r7, #7]
 801535a:	f023 0301 	bic.w	r3, r3, #1
 801535e:	71fb      	strb	r3, [r7, #7]
			(Kyosan_SelfRelays.Message_Receiving == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8015360:	4b54      	ldr	r3, [pc, #336]	; (80154b4 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 8015362:	785b      	ldrb	r3, [r3, #1]
 8015364:	2b01      	cmp	r3, #1
 8015366:	d104      	bne.n	8015372 <Process_Send_Signals_2_MIE_Kyosan+0x66>
 8015368:	79fb      	ldrb	r3, [r7, #7]
 801536a:	f043 0302 	orr.w	r3, r3, #2
 801536e:	71fb      	strb	r3, [r7, #7]
 8015370:	e003      	b.n	801537a <Process_Send_Signals_2_MIE_Kyosan+0x6e>
 8015372:	79fb      	ldrb	r3, [r7, #7]
 8015374:	f023 0302 	bic.w	r3, r3, #2
 8015378:	71fb      	strb	r3, [r7, #7]

			switch(Choice)
 801537a:	79fb      	ldrb	r3, [r7, #7]
 801537c:	2b01      	cmp	r3, #1
 801537e:	d005      	beq.n	801538c <Process_Send_Signals_2_MIE_Kyosan+0x80>
 8015380:	2b00      	cmp	r3, #0
 8015382:	dd45      	ble.n	8015410 <Process_Send_Signals_2_MIE_Kyosan+0x104>
 8015384:	3b02      	subs	r3, #2
 8015386:	2b01      	cmp	r3, #1
 8015388:	d842      	bhi.n	8015410 <Process_Send_Signals_2_MIE_Kyosan+0x104>
 801538a:	e020      	b.n	80153ce <Process_Send_Signals_2_MIE_Kyosan+0xc2>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_OtherRelays.Relays,MAX_KYOSAN_RELAYS);
 801538c:	4a4a      	ldr	r2, [pc, #296]	; (80154b8 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 801538e:	4b48      	ldr	r3, [pc, #288]	; (80154b0 <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 8015390:	3302      	adds	r3, #2
 8015392:	1c90      	adds	r0, r2, #2
 8015394:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015398:	4602      	mov	r2, r0
 801539a:	4619      	mov	r1, r3
 801539c:	f8d1 c000 	ldr.w	ip, [r1]
 80153a0:	684e      	ldr	r6, [r1, #4]
 80153a2:	688d      	ldr	r5, [r1, #8]
 80153a4:	68c9      	ldr	r1, [r1, #12]
 80153a6:	f8c2 c000 	str.w	ip, [r2]
 80153aa:	6056      	str	r6, [r2, #4]
 80153ac:	6095      	str	r5, [r2, #8]
 80153ae:	60d1      	str	r1, [r2, #12]
 80153b0:	3310      	adds	r3, #16
 80153b2:	3010      	adds	r0, #16
 80153b4:	42a3      	cmp	r3, r4
 80153b6:	d1ef      	bne.n	8015398 <Process_Send_Signals_2_MIE_Kyosan+0x8c>
 80153b8:	4602      	mov	r2, r0
 80153ba:	6818      	ldr	r0, [r3, #0]
 80153bc:	6859      	ldr	r1, [r3, #4]
 80153be:	689b      	ldr	r3, [r3, #8]
 80153c0:	6010      	str	r0, [r2, #0]
 80153c2:	6051      	str	r1, [r2, #4]
 80153c4:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = RESET;
 80153c6:	4b3d      	ldr	r3, [pc, #244]	; (80154bc <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 80153c8:	2200      	movs	r2, #0
 80153ca:	701a      	strb	r2, [r3, #0]
#endif
				break;
 80153cc:	e028      	b.n	8015420 <Process_Send_Signals_2_MIE_Kyosan+0x114>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_SelfRelays.Relays,MAX_KYOSAN_RELAYS);
 80153ce:	4a3a      	ldr	r2, [pc, #232]	; (80154b8 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 80153d0:	4b38      	ldr	r3, [pc, #224]	; (80154b4 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 80153d2:	3302      	adds	r3, #2
 80153d4:	1c90      	adds	r0, r2, #2
 80153d6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80153da:	4602      	mov	r2, r0
 80153dc:	4619      	mov	r1, r3
 80153de:	f8d1 c000 	ldr.w	ip, [r1]
 80153e2:	684e      	ldr	r6, [r1, #4]
 80153e4:	688d      	ldr	r5, [r1, #8]
 80153e6:	68c9      	ldr	r1, [r1, #12]
 80153e8:	f8c2 c000 	str.w	ip, [r2]
 80153ec:	6056      	str	r6, [r2, #4]
 80153ee:	6095      	str	r5, [r2, #8]
 80153f0:	60d1      	str	r1, [r2, #12]
 80153f2:	3310      	adds	r3, #16
 80153f4:	3010      	adds	r0, #16
 80153f6:	42a3      	cmp	r3, r4
 80153f8:	d1ef      	bne.n	80153da <Process_Send_Signals_2_MIE_Kyosan+0xce>
 80153fa:	4602      	mov	r2, r0
 80153fc:	6818      	ldr	r0, [r3, #0]
 80153fe:	6859      	ldr	r1, [r3, #4]
 8015400:	689b      	ldr	r3, [r3, #8]
 8015402:	6010      	str	r0, [r2, #0]
 8015404:	6051      	str	r1, [r2, #4]
 8015406:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = SET;
 8015408:	4b2c      	ldr	r3, [pc, #176]	; (80154bc <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 801540a:	2201      	movs	r2, #1
 801540c:	701a      	strb	r2, [r3, #0]
#endif
				break;
 801540e:	e007      	b.n	8015420 <Process_Send_Signals_2_MIE_Kyosan+0x114>

			default:
				memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8015410:	2240      	movs	r2, #64	; 0x40
 8015412:	2100      	movs	r1, #0
 8015414:	4828      	ldr	r0, [pc, #160]	; (80154b8 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8015416:	f00f febb 	bl	8025190 <memset>
#ifdef EI_1
				SendThisCardRelays = RESET;
 801541a:	4b28      	ldr	r3, [pc, #160]	; (80154bc <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 801541c:	2200      	movs	r2, #0
 801541e:	701a      	strb	r2, [r3, #0]
#endif
			}

			printf("Data Sending 2 MIE:\n");
 8015420:	4827      	ldr	r0, [pc, #156]	; (80154c0 <Process_Send_Signals_2_MIE_Kyosan+0x1b4>)
 8015422:	f010 f839 	bl	8025498 <puts>
			for(uint8_t i=0;i<60;++i)
 8015426:	2300      	movs	r3, #0
 8015428:	71bb      	strb	r3, [r7, #6]
 801542a:	e01c      	b.n	8015466 <Process_Send_Signals_2_MIE_Kyosan+0x15a>
			{
				printf("%02X ",Kyosan_FinalRelays.Relays[i]);
 801542c:	79bb      	ldrb	r3, [r7, #6]
 801542e:	4a22      	ldr	r2, [pc, #136]	; (80154b8 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8015430:	4413      	add	r3, r2
 8015432:	789b      	ldrb	r3, [r3, #2]
 8015434:	4619      	mov	r1, r3
 8015436:	4823      	ldr	r0, [pc, #140]	; (80154c4 <Process_Send_Signals_2_MIE_Kyosan+0x1b8>)
 8015438:	f00f ff92 	bl	8025360 <iprintf>

				if(((i+1)%10)==0)
 801543c:	79bb      	ldrb	r3, [r7, #6]
 801543e:	1c59      	adds	r1, r3, #1
 8015440:	4b21      	ldr	r3, [pc, #132]	; (80154c8 <Process_Send_Signals_2_MIE_Kyosan+0x1bc>)
 8015442:	fb83 2301 	smull	r2, r3, r3, r1
 8015446:	109a      	asrs	r2, r3, #2
 8015448:	17cb      	asrs	r3, r1, #31
 801544a:	1ad2      	subs	r2, r2, r3
 801544c:	4613      	mov	r3, r2
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	4413      	add	r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	1aca      	subs	r2, r1, r3
 8015456:	2a00      	cmp	r2, #0
 8015458:	d102      	bne.n	8015460 <Process_Send_Signals_2_MIE_Kyosan+0x154>
				{
					printf("\n");
 801545a:	200a      	movs	r0, #10
 801545c:	f00f ff98 	bl	8025390 <putchar>
			for(uint8_t i=0;i<60;++i)
 8015460:	79bb      	ldrb	r3, [r7, #6]
 8015462:	3301      	adds	r3, #1
 8015464:	71bb      	strb	r3, [r7, #6]
 8015466:	79bb      	ldrb	r3, [r7, #6]
 8015468:	2b3b      	cmp	r3, #59	; 0x3b
 801546a:	d9df      	bls.n	801542c <Process_Send_Signals_2_MIE_Kyosan+0x120>
				}
			}
			printf("\n");
 801546c:	200a      	movs	r0, #10
 801546e:	f00f ff8f 	bl	8025390 <putchar>
//			PrintSignalsKyosan();


			TransmitCanPkt(EI_PROCESS_DATA);
 8015472:	f240 1019 	movw	r0, #281	; 0x119
 8015476:	f7fb f9b7 	bl	80107e8 <TransmitCanPkt>
 801547a:	e008      	b.n	801548e <Process_Send_Signals_2_MIE_Kyosan+0x182>
		}
		else
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 801547c:	2240      	movs	r2, #64	; 0x40
 801547e:	2100      	movs	r1, #0
 8015480:	480d      	ldr	r0, [pc, #52]	; (80154b8 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8015482:	f00f fe85 	bl	8025190 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8015486:	f240 1019 	movw	r0, #281	; 0x119
 801548a:	f7fb f9ad 	bl	80107e8 <TransmitCanPkt>
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
			TransmitCanPkt(EI_PROCESS_DATA);
		}
#endif
		MIE_SignalsSending_Clk_Kyosan = HAL_GetTick();
 801548e:	f002 ff5d 	bl	801834c <HAL_GetTick>
 8015492:	4603      	mov	r3, r0
 8015494:	4a02      	ldr	r2, [pc, #8]	; (80154a0 <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 8015496:	6013      	str	r3, [r2, #0]
	}
}
 8015498:	bf00      	nop
 801549a:	370c      	adds	r7, #12
 801549c:	46bd      	mov	sp, r7
 801549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154a0:	2000a2cc 	.word	0x2000a2cc
 80154a4:	20000304 	.word	0x20000304
 80154a8:	20000108 	.word	0x20000108
 80154ac:	2000a2d4 	.word	0x2000a2d4
 80154b0:	2000a1cc 	.word	0x2000a1cc
 80154b4:	2000a18c 	.word	0x2000a18c
 80154b8:	2000a24c 	.word	0x2000a24c
 80154bc:	2000a6c1 	.word	0x2000a6c1
 80154c0:	08029da0 	.word	0x08029da0
 80154c4:	08029db4 	.word	0x08029db4
 80154c8:	66666667 	.word	0x66666667

080154cc <Get_Kyosan_EI_Message>:

void Get_Kyosan_EI_Message(uint8_t ComPort)
{
 80154cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154ce:	b089      	sub	sp, #36	; 0x24
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	4603      	mov	r3, r0
 80154d4:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 80154d6:	2300      	movs	r3, #0
 80154d8:	737b      	strb	r3, [r7, #13]
	static uint16_t Cur_Receive_Length = 0;
	static uint8_t Buffer[256] = {0,};
	static uint8_t Curnt_ProcessingDataType = 0;
	static uint8_t Control_DataReceived = RESET;
	static uint32_t Last_ValidControlInfoClk = 0;
	uint16_t C_CRC = 0;
 80154da:	2300      	movs	r3, #0
 80154dc:	817b      	strh	r3, [r7, #10]
	uint16_t R_CRC = 0;
 80154de:	2300      	movs	r3, #0
 80154e0:	83fb      	strh	r3, [r7, #30]
#ifdef EI_1
	static uint16_t PrevRelayCRC = 0;
#endif
	static uint8_t ControlData_Positive[256] = {0,};
	static uint8_t ControlData_Negative[256] = {0,};
	uint8_t Pos_NegDataMisMatch = RESET;
 80154e2:	2300      	movs	r3, #0
 80154e4:	777b      	strb	r3, [r7, #29]
	static uint8_t Pos_NegDataMisMatch_Count = RESET;
	uint8_t TypeofDataMisMatch = RESET;
 80154e6:	2300      	movs	r3, #0
 80154e8:	773b      	strb	r3, [r7, #28]
	uint8_t ControlID = 0;
 80154ea:	2300      	movs	r3, #0
 80154ec:	727b      	strb	r3, [r7, #9]



	if((HAL_Elaps_Ticks(Last_ValidControlInfoClk) >= EI_data.Kyosan_st.Comm_Fail_Time) && (Control_DataReceived == SET))
 80154ee:	4b33      	ldr	r3, [pc, #204]	; (80155bc <Get_Kyosan_EI_Message+0xf0>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7fa fbc4 	bl	800fc80 <HAL_Elaps_Ticks>
 80154f8:	4602      	mov	r2, r0
 80154fa:	4b31      	ldr	r3, [pc, #196]	; (80155c0 <Get_Kyosan_EI_Message+0xf4>)
 80154fc:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015500:	429a      	cmp	r2, r3
 8015502:	f0c0 8407 	bcc.w	8015d14 <Get_Kyosan_EI_Message+0x848>
 8015506:	4b2f      	ldr	r3, [pc, #188]	; (80155c4 <Get_Kyosan_EI_Message+0xf8>)
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	2b01      	cmp	r3, #1
 801550c:	f040 8402 	bne.w	8015d14 <Get_Kyosan_EI_Message+0x848>
	{
		Control_DataReceived = RESET;
 8015510:	4b2c      	ldr	r3, [pc, #176]	; (80155c4 <Get_Kyosan_EI_Message+0xf8>)
 8015512:	2200      	movs	r2, #0
 8015514:	701a      	strb	r2, [r3, #0]
	}

	while(Com_DataReady(ComPort))
 8015516:	e3fd      	b.n	8015d14 <Get_Kyosan_EI_Message+0x848>
	{
		Data = Com_Get_Byte(ComPort);
 8015518:	79fb      	ldrb	r3, [r7, #7]
 801551a:	4618      	mov	r0, r3
 801551c:	f002 fbee 	bl	8017cfc <Com_Get_Byte>
 8015520:	4603      	mov	r3, r0
 8015522:	737b      	strb	r3, [r7, #13]
		//		printf("%02X ",Data);

		if((Cur_Receive_Length == Max_Receive_Length) || (Cur_Receive_Length == RESET))
 8015524:	4b28      	ldr	r3, [pc, #160]	; (80155c8 <Get_Kyosan_EI_Message+0xfc>)
 8015526:	881a      	ldrh	r2, [r3, #0]
 8015528:	4b28      	ldr	r3, [pc, #160]	; (80155cc <Get_Kyosan_EI_Message+0x100>)
 801552a:	881b      	ldrh	r3, [r3, #0]
 801552c:	429a      	cmp	r2, r3
 801552e:	d003      	beq.n	8015538 <Get_Kyosan_EI_Message+0x6c>
 8015530:	4b25      	ldr	r3, [pc, #148]	; (80155c8 <Get_Kyosan_EI_Message+0xfc>)
 8015532:	881b      	ldrh	r3, [r3, #0]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d139      	bne.n	80155ac <Get_Kyosan_EI_Message+0xe0>
		{
			memset(Buffer,0,sizeof(Buffer));
 8015538:	f44f 7280 	mov.w	r2, #256	; 0x100
 801553c:	2100      	movs	r1, #0
 801553e:	4824      	ldr	r0, [pc, #144]	; (80155d0 <Get_Kyosan_EI_Message+0x104>)
 8015540:	f00f fe26 	bl	8025190 <memset>
			Cur_Receive_Length = RESET;
 8015544:	4b20      	ldr	r3, [pc, #128]	; (80155c8 <Get_Kyosan_EI_Message+0xfc>)
 8015546:	2200      	movs	r2, #0
 8015548:	801a      	strh	r2, [r3, #0]

			switch(Data)
 801554a:	7b7b      	ldrb	r3, [r7, #13]
 801554c:	2b01      	cmp	r3, #1
 801554e:	d001      	beq.n	8015554 <Get_Kyosan_EI_Message+0x88>
 8015550:	2bfe      	cmp	r3, #254	; 0xfe
 8015552:	d113      	bne.n	801557c <Get_Kyosan_EI_Message+0xb0>
			{
			case ACTUAL_CONTROL_DATA:
			case COMPLIMENT_CONTROL_DATA:
				Max_Receive_Length = (	EI_data.Kyosan_st.No_ofFrames * 64);
 8015554:	4b1a      	ldr	r3, [pc, #104]	; (80155c0 <Get_Kyosan_EI_Message+0xf4>)
 8015556:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 801555a:	b29b      	uxth	r3, r3
 801555c:	019b      	lsls	r3, r3, #6
 801555e:	b29a      	uxth	r2, r3
 8015560:	4b1a      	ldr	r3, [pc, #104]	; (80155cc <Get_Kyosan_EI_Message+0x100>)
 8015562:	801a      	strh	r2, [r3, #0]
				if(EI_data.Kyosan_st.No_ofFrames == 4)
 8015564:	4b16      	ldr	r3, [pc, #88]	; (80155c0 <Get_Kyosan_EI_Message+0xf4>)
 8015566:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 801556a:	2b04      	cmp	r3, #4
 801556c:	d102      	bne.n	8015574 <Get_Kyosan_EI_Message+0xa8>
				{
					Max_Receive_Length = 192;
 801556e:	4b17      	ldr	r3, [pc, #92]	; (80155cc <Get_Kyosan_EI_Message+0x100>)
 8015570:	22c0      	movs	r2, #192	; 0xc0
 8015572:	801a      	strh	r2, [r3, #0]
				}
				Curnt_ProcessingDataType = CONTROL_DATA;
 8015574:	4b17      	ldr	r3, [pc, #92]	; (80155d4 <Get_Kyosan_EI_Message+0x108>)
 8015576:	2201      	movs	r2, #1
 8015578:	701a      	strb	r2, [r3, #0]
				//				printf("Received Ctrl Data|");
				break;
 801557a:	e017      	b.n	80155ac <Get_Kyosan_EI_Message+0xe0>

			default:

				/* Polling Data Range (0x11-0x7f for Positive data) (0x80-0xEE for Negative data)*/
				/* Control_DataReceived checking is added to Avoid Control information data to be processed as Polling Information */
				if( (Control_DataReceived == SET) && (((Data >= 0X11 ) && (Data <= 0X7F)) || ((Data >= 0X80 ) && (Data <= 0XEE))) )
 801557c:	4b11      	ldr	r3, [pc, #68]	; (80155c4 <Get_Kyosan_EI_Message+0xf8>)
 801557e:	781b      	ldrb	r3, [r3, #0]
 8015580:	2b01      	cmp	r3, #1
 8015582:	d113      	bne.n	80155ac <Get_Kyosan_EI_Message+0xe0>
 8015584:	7b7b      	ldrb	r3, [r7, #13]
 8015586:	2b10      	cmp	r3, #16
 8015588:	d903      	bls.n	8015592 <Get_Kyosan_EI_Message+0xc6>
 801558a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801558e:	2b00      	cmp	r3, #0
 8015590:	da06      	bge.n	80155a0 <Get_Kyosan_EI_Message+0xd4>
 8015592:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8015596:	2b00      	cmp	r3, #0
 8015598:	da08      	bge.n	80155ac <Get_Kyosan_EI_Message+0xe0>
 801559a:	7b7b      	ldrb	r3, [r7, #13]
 801559c:	2bee      	cmp	r3, #238	; 0xee
 801559e:	d805      	bhi.n	80155ac <Get_Kyosan_EI_Message+0xe0>
				{
					/* Consider the data as Polling Data */
					//					printf("Received Polling Data:%u|%02X\n",Control_DataReceived,Data);
					Curnt_ProcessingDataType = POLLING_DATA;
 80155a0:	4b0c      	ldr	r3, [pc, #48]	; (80155d4 <Get_Kyosan_EI_Message+0x108>)
 80155a2:	2202      	movs	r2, #2
 80155a4:	701a      	strb	r2, [r3, #0]
					Max_Receive_Length = 3;
 80155a6:	4b09      	ldr	r3, [pc, #36]	; (80155cc <Get_Kyosan_EI_Message+0x100>)
 80155a8:	2203      	movs	r2, #3
 80155aa:	801a      	strh	r2, [r3, #0]
				}
			}
		}

		switch(Curnt_ProcessingDataType)
 80155ac:	4b09      	ldr	r3, [pc, #36]	; (80155d4 <Get_Kyosan_EI_Message+0x108>)
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	2b01      	cmp	r3, #1
 80155b2:	d011      	beq.n	80155d8 <Get_Kyosan_EI_Message+0x10c>
 80155b4:	2b02      	cmp	r3, #2
 80155b6:	f000 82d9 	beq.w	8015b6c <Get_Kyosan_EI_Message+0x6a0>
 80155ba:	e3a8      	b.n	8015d0e <Get_Kyosan_EI_Message+0x842>
 80155bc:	2000a6cc 	.word	0x2000a6cc
 80155c0:	20000304 	.word	0x20000304
 80155c4:	2000a6d0 	.word	0x2000a6d0
 80155c8:	2000a6d2 	.word	0x2000a6d2
 80155cc:	2000a6d4 	.word	0x2000a6d4
 80155d0:	2000a6d8 	.word	0x2000a6d8
 80155d4:	2000a7d8 	.word	0x2000a7d8
		{
		case CONTROL_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 80155d8:	4bae      	ldr	r3, [pc, #696]	; (8015894 <Get_Kyosan_EI_Message+0x3c8>)
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	1c5a      	adds	r2, r3, #1
 80155de:	b291      	uxth	r1, r2
 80155e0:	4aac      	ldr	r2, [pc, #688]	; (8015894 <Get_Kyosan_EI_Message+0x3c8>)
 80155e2:	8011      	strh	r1, [r2, #0]
 80155e4:	4619      	mov	r1, r3
 80155e6:	4aac      	ldr	r2, [pc, #688]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 80155e8:	7b7b      	ldrb	r3, [r7, #13]
 80155ea:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 80155ec:	4ba9      	ldr	r3, [pc, #676]	; (8015894 <Get_Kyosan_EI_Message+0x3c8>)
 80155ee:	881a      	ldrh	r2, [r3, #0]
 80155f0:	4baa      	ldr	r3, [pc, #680]	; (801589c <Get_Kyosan_EI_Message+0x3d0>)
 80155f2:	881b      	ldrh	r3, [r3, #0]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	f040 838d 	bne.w	8015d14 <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 80155fa:	4ba6      	ldr	r3, [pc, #664]	; (8015894 <Get_Kyosan_EI_Message+0x3c8>)
 80155fc:	881b      	ldrh	r3, [r3, #0]
 80155fe:	3b02      	subs	r3, #2
 8015600:	4619      	mov	r1, r3
 8015602:	48a5      	ldr	r0, [pc, #660]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 8015604:	f000 fbae 	bl	8015d64 <Calc_Kysoan_CRC>
 8015608:	4603      	mov	r3, r0
 801560a:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 801560c:	4ba1      	ldr	r3, [pc, #644]	; (8015894 <Get_Kyosan_EI_Message+0x3c8>)
 801560e:	881b      	ldrh	r3, [r3, #0]
 8015610:	3b02      	subs	r3, #2
 8015612:	4aa1      	ldr	r2, [pc, #644]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 8015614:	4413      	add	r3, r2
 8015616:	461a      	mov	r2, r3
 8015618:	2110      	movs	r1, #16
 801561a:	2000      	movs	r0, #0
 801561c:	f7ea fffa 	bl	8000614 <ExtractBits>
 8015620:	4603      	mov	r3, r0
 8015622:	83fb      	strh	r3, [r7, #30]


				if( (  (CHECKFLAG(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8015624:	4b9e      	ldr	r3, [pc, #632]	; (80158a0 <Get_Kyosan_EI_Message+0x3d4>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	f003 0301 	and.w	r3, r3, #1
 801562c:	2b00      	cmp	r3, #0
 801562e:	d02d      	beq.n	801568c <Get_Kyosan_EI_Message+0x1c0>
 8015630:	4b99      	ldr	r3, [pc, #612]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	b25b      	sxtb	r3, r3
 8015636:	11db      	asrs	r3, r3, #7
 8015638:	b25b      	sxtb	r3, r3
 801563a:	f003 0301 	and.w	r3, r3, #1
 801563e:	2b00      	cmp	r3, #0
 8015640:	d124      	bne.n	801568c <Get_Kyosan_EI_Message+0x1c0>
				{
					printf("\nInjecting Positive Control Data CRC Failure\n");
 8015642:	4898      	ldr	r0, [pc, #608]	; (80158a4 <Get_Kyosan_EI_Message+0x3d8>)
 8015644:	f00f ff28 	bl	8025498 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8015648:	4897      	ldr	r0, [pc, #604]	; (80158a8 <Get_Kyosan_EI_Message+0x3dc>)
 801564a:	f007 fb31 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 801564e:	4601      	mov	r1, r0
 8015650:	4b96      	ldr	r3, [pc, #600]	; (80158ac <Get_Kyosan_EI_Message+0x3e0>)
 8015652:	fba3 2301 	umull	r2, r3, r3, r1
 8015656:	0bda      	lsrs	r2, r3, #15
 8015658:	4613      	mov	r3, r2
 801565a:	041b      	lsls	r3, r3, #16
 801565c:	1a9b      	subs	r3, r3, r2
 801565e:	1aca      	subs	r2, r1, r3
 8015660:	4613      	mov	r3, r2
 8015662:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8015664:	8bfa      	ldrh	r2, [r7, #30]
 8015666:	897b      	ldrh	r3, [r7, #10]
 8015668:	429a      	cmp	r2, r3
 801566a:	d10f      	bne.n	801568c <Get_Kyosan_EI_Message+0x1c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 801566c:	488e      	ldr	r0, [pc, #568]	; (80158a8 <Get_Kyosan_EI_Message+0x3dc>)
 801566e:	f007 fb1f 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015672:	4601      	mov	r1, r0
 8015674:	4b8e      	ldr	r3, [pc, #568]	; (80158b0 <Get_Kyosan_EI_Message+0x3e4>)
 8015676:	fba3 2301 	umull	r2, r3, r3, r1
 801567a:	09da      	lsrs	r2, r3, #7
 801567c:	4613      	mov	r3, r2
 801567e:	021b      	lsls	r3, r3, #8
 8015680:	1a9b      	subs	r3, r3, r2
 8015682:	1aca      	subs	r2, r1, r3
 8015684:	b293      	uxth	r3, r2
 8015686:	8bfa      	ldrh	r2, [r7, #30]
 8015688:	1ad3      	subs	r3, r2, r3
 801568a:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 801568c:	4b84      	ldr	r3, [pc, #528]	; (80158a0 <Get_Kyosan_EI_Message+0x3d4>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	085b      	lsrs	r3, r3, #1
 8015692:	f003 0301 	and.w	r3, r3, #1
 8015696:	2b00      	cmp	r3, #0
 8015698:	d02d      	beq.n	80156f6 <Get_Kyosan_EI_Message+0x22a>
 801569a:	4b7f      	ldr	r3, [pc, #508]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	b25b      	sxtb	r3, r3
 80156a0:	11db      	asrs	r3, r3, #7
 80156a2:	b25b      	sxtb	r3, r3
 80156a4:	f003 0301 	and.w	r3, r3, #1
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d024      	beq.n	80156f6 <Get_Kyosan_EI_Message+0x22a>
				{
					printf("\nInjecting Negative Control Data CRC Failure\n");
 80156ac:	4881      	ldr	r0, [pc, #516]	; (80158b4 <Get_Kyosan_EI_Message+0x3e8>)
 80156ae:	f00f fef3 	bl	8025498 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 80156b2:	487d      	ldr	r0, [pc, #500]	; (80158a8 <Get_Kyosan_EI_Message+0x3dc>)
 80156b4:	f007 fafc 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 80156b8:	4601      	mov	r1, r0
 80156ba:	4b7c      	ldr	r3, [pc, #496]	; (80158ac <Get_Kyosan_EI_Message+0x3e0>)
 80156bc:	fba3 2301 	umull	r2, r3, r3, r1
 80156c0:	0bda      	lsrs	r2, r3, #15
 80156c2:	4613      	mov	r3, r2
 80156c4:	041b      	lsls	r3, r3, #16
 80156c6:	1a9b      	subs	r3, r3, r2
 80156c8:	1aca      	subs	r2, r1, r3
 80156ca:	4613      	mov	r3, r2
 80156cc:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 80156ce:	8bfa      	ldrh	r2, [r7, #30]
 80156d0:	897b      	ldrh	r3, [r7, #10]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d10f      	bne.n	80156f6 <Get_Kyosan_EI_Message+0x22a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 80156d6:	4874      	ldr	r0, [pc, #464]	; (80158a8 <Get_Kyosan_EI_Message+0x3dc>)
 80156d8:	f007 faea 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 80156dc:	4601      	mov	r1, r0
 80156de:	4b74      	ldr	r3, [pc, #464]	; (80158b0 <Get_Kyosan_EI_Message+0x3e4>)
 80156e0:	fba3 2301 	umull	r2, r3, r3, r1
 80156e4:	09da      	lsrs	r2, r3, #7
 80156e6:	4613      	mov	r3, r2
 80156e8:	021b      	lsls	r3, r3, #8
 80156ea:	1a9b      	subs	r3, r3, r2
 80156ec:	1aca      	subs	r2, r1, r3
 80156ee:	b293      	uxth	r3, r2
 80156f0:	8bfa      	ldrh	r2, [r7, #30]
 80156f2:	1ad3      	subs	r3, r2, r3
 80156f4:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(R_CRC == C_CRC)
 80156f6:	8bfa      	ldrh	r2, [r7, #30]
 80156f8:	897b      	ldrh	r3, [r7, #10]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	f040 81f3 	bne.w	8015ae6 <Get_Kyosan_EI_Message+0x61a>
				{

					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8015700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015704:	486c      	ldr	r0, [pc, #432]	; (80158b8 <Get_Kyosan_EI_Message+0x3ec>)
 8015706:	f005 fb0a 	bl	801ad1e <HAL_GPIO_TogglePin>


					Last_ValidControlInfoClk = HAL_GetTick();
 801570a:	f002 fe1f 	bl	801834c <HAL_GetTick>
 801570e:	4603      	mov	r3, r0
 8015710:	4a6a      	ldr	r2, [pc, #424]	; (80158bc <Get_Kyosan_EI_Message+0x3f0>)
 8015712:	6013      	str	r3, [r2, #0]
					Control_DataReceived = SET;
 8015714:	4b6a      	ldr	r3, [pc, #424]	; (80158c0 <Get_Kyosan_EI_Message+0x3f4>)
 8015716:	2201      	movs	r2, #1
 8015718:	701a      	strb	r2, [r3, #0]
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 801571a:	f002 fe17 	bl	801834c <HAL_GetTick>
 801571e:	4603      	mov	r3, r0
 8015720:	4a68      	ldr	r2, [pc, #416]	; (80158c4 <Get_Kyosan_EI_Message+0x3f8>)
 8015722:	6013      	str	r3, [r2, #0]

					//					printf("CTRL-Data CRC OK\n");
					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8015724:	4b5c      	ldr	r3, [pc, #368]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	b25b      	sxtb	r3, r3
 801572a:	11db      	asrs	r3, r3, #7
 801572c:	b25b      	sxtb	r3, r3
 801572e:	f003 0301 	and.w	r3, r3, #1
 8015732:	2b00      	cmp	r3, #0
 8015734:	f040 80de 	bne.w	80158f4 <Get_Kyosan_EI_Message+0x428>
					{
						printf("+ Ctrl Data|");
 8015738:	4863      	ldr	r0, [pc, #396]	; (80158c8 <Get_Kyosan_EI_Message+0x3fc>)
 801573a:	f00f fe11 	bl	8025360 <iprintf>
						memcpy(&ControlData_Positive,&Buffer,Cur_Receive_Length);
 801573e:	4b55      	ldr	r3, [pc, #340]	; (8015894 <Get_Kyosan_EI_Message+0x3c8>)
 8015740:	881b      	ldrh	r3, [r3, #0]
 8015742:	461a      	mov	r2, r3
 8015744:	4954      	ldr	r1, [pc, #336]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 8015746:	4861      	ldr	r0, [pc, #388]	; (80158cc <Get_Kyosan_EI_Message+0x400>)
 8015748:	f00f fcfa 	bl	8025140 <memcpy>

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 801574c:	4b54      	ldr	r3, [pc, #336]	; (80158a0 <Get_Kyosan_EI_Message+0x3d4>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	091b      	lsrs	r3, r3, #4
 8015752:	f003 0301 	and.w	r3, r3, #1
 8015756:	2b00      	cmp	r3, #0
 8015758:	d027      	beq.n	80157aa <Get_Kyosan_EI_Message+0x2de>
 801575a:	4b4f      	ldr	r3, [pc, #316]	; (8015898 <Get_Kyosan_EI_Message+0x3cc>)
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	b25b      	sxtb	r3, r3
 8015760:	11db      	asrs	r3, r3, #7
 8015762:	b25b      	sxtb	r3, r3
 8015764:	f003 0301 	and.w	r3, r3, #1
 8015768:	2b00      	cmp	r3, #0
 801576a:	d01e      	beq.n	80157aa <Get_Kyosan_EI_Message+0x2de>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 801576c:	4858      	ldr	r0, [pc, #352]	; (80158d0 <Get_Kyosan_EI_Message+0x404>)
 801576e:	f00f fe93 	bl	8025498 <puts>
							ControlData_Positive[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8015772:	484d      	ldr	r0, [pc, #308]	; (80158a8 <Get_Kyosan_EI_Message+0x3dc>)
 8015774:	f007 fa9c 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015778:	4602      	mov	r2, r0
 801577a:	4b4d      	ldr	r3, [pc, #308]	; (80158b0 <Get_Kyosan_EI_Message+0x3e4>)
 801577c:	fba3 1302 	umull	r1, r3, r3, r2
 8015780:	09dc      	lsrs	r4, r3, #7
 8015782:	4623      	mov	r3, r4
 8015784:	021b      	lsls	r3, r3, #8
 8015786:	1b1b      	subs	r3, r3, r4
 8015788:	1ad4      	subs	r4, r2, r3
 801578a:	4847      	ldr	r0, [pc, #284]	; (80158a8 <Get_Kyosan_EI_Message+0x3dc>)
 801578c:	f007 fa90 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015790:	4601      	mov	r1, r0
 8015792:	4b50      	ldr	r3, [pc, #320]	; (80158d4 <Get_Kyosan_EI_Message+0x408>)
 8015794:	fba3 2301 	umull	r2, r3, r3, r1
 8015798:	08da      	lsrs	r2, r3, #3
 801579a:	4613      	mov	r3, r2
 801579c:	011b      	lsls	r3, r3, #4
 801579e:	1a9b      	subs	r3, r3, r2
 80157a0:	1aca      	subs	r2, r1, r3
 80157a2:	1c53      	adds	r3, r2, #1
 80157a4:	b2e1      	uxtb	r1, r4
 80157a6:	4a49      	ldr	r2, [pc, #292]	; (80158cc <Get_Kyosan_EI_Message+0x400>)
 80157a8:	54d1      	strb	r1, [r2, r3]
						}

						ControlID = (uint8_t)((uint8_t)ControlData_Positive[0]&(uint8_t)0x0f);
 80157aa:	4b48      	ldr	r3, [pc, #288]	; (80158cc <Get_Kyosan_EI_Message+0x400>)
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	f003 030f 	and.w	r3, r3, #15
 80157b2:	727b      	strb	r3, [r7, #9]
						//						printf("%u|",ControlID);
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 80157b4:	2300      	movs	r3, #0
 80157b6:	837b      	strh	r3, [r7, #26]
 80157b8:	e011      	b.n	80157de <Get_Kyosan_EI_Message+0x312>
						{
							if(ControlData_Negative[i] != (uint8_t)(~ControlData_Positive[i]))
 80157ba:	8b7b      	ldrh	r3, [r7, #26]
 80157bc:	4a46      	ldr	r2, [pc, #280]	; (80158d8 <Get_Kyosan_EI_Message+0x40c>)
 80157be:	5cd2      	ldrb	r2, [r2, r3]
 80157c0:	8b7b      	ldrh	r3, [r7, #26]
 80157c2:	4942      	ldr	r1, [pc, #264]	; (80158cc <Get_Kyosan_EI_Message+0x400>)
 80157c4:	5ccb      	ldrb	r3, [r1, r3]
 80157c6:	43db      	mvns	r3, r3
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d004      	beq.n	80157d8 <Get_Kyosan_EI_Message+0x30c>
							{
								Pos_NegDataMisMatch = SET;
 80157ce:	2301      	movs	r3, #1
 80157d0:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = POS_DATA_MISMATCH;
 80157d2:	2301      	movs	r3, #1
 80157d4:	773b      	strb	r3, [r7, #28]
								//								printf("Positive & Negative data not Matching\n");
								//								printf("P:%X-N:%X -> %X\n",ControlData_Positive[i],ControlData_Negative[i],(uint8_t)(~ControlData_Positive[i]));
								break;
 80157d6:	e008      	b.n	80157ea <Get_Kyosan_EI_Message+0x31e>
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 80157d8:	8b7b      	ldrh	r3, [r7, #26]
 80157da:	3301      	adds	r3, #1
 80157dc:	837b      	strh	r3, [r7, #26]
 80157de:	8b7a      	ldrh	r2, [r7, #26]
 80157e0:	4b2c      	ldr	r3, [pc, #176]	; (8015894 <Get_Kyosan_EI_Message+0x3c8>)
 80157e2:	881b      	ldrh	r3, [r3, #0]
 80157e4:	3b02      	subs	r3, #2
 80157e6:	429a      	cmp	r2, r3
 80157e8:	dbe7      	blt.n	80157ba <Get_Kyosan_EI_Message+0x2ee>
							}
						}

						if(Pos_NegDataMisMatch == RESET)
 80157ea:	7f7b      	ldrb	r3, [r7, #29]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f040 80d9 	bne.w	80159a4 <Get_Kyosan_EI_Message+0x4d8>
						{
							printf("\nR:");
 80157f2:	483a      	ldr	r0, [pc, #232]	; (80158dc <Get_Kyosan_EI_Message+0x410>)
 80157f4:	f00f fdb4 	bl	8025360 <iprintf>
							for(uint8_t i=1;i<61;++i)
 80157f8:	2301      	movs	r3, #1
 80157fa:	767b      	strb	r3, [r7, #25]
 80157fc:	e009      	b.n	8015812 <Get_Kyosan_EI_Message+0x346>
							{
								printf("%02X ",ControlData_Positive[i]);
 80157fe:	7e7b      	ldrb	r3, [r7, #25]
 8015800:	4a32      	ldr	r2, [pc, #200]	; (80158cc <Get_Kyosan_EI_Message+0x400>)
 8015802:	5cd3      	ldrb	r3, [r2, r3]
 8015804:	4619      	mov	r1, r3
 8015806:	4836      	ldr	r0, [pc, #216]	; (80158e0 <Get_Kyosan_EI_Message+0x414>)
 8015808:	f00f fdaa 	bl	8025360 <iprintf>
							for(uint8_t i=1;i<61;++i)
 801580c:	7e7b      	ldrb	r3, [r7, #25]
 801580e:	3301      	adds	r3, #1
 8015810:	767b      	strb	r3, [r7, #25]
 8015812:	7e7b      	ldrb	r3, [r7, #25]
 8015814:	2b3c      	cmp	r3, #60	; 0x3c
 8015816:	d9f2      	bls.n	80157fe <Get_Kyosan_EI_Message+0x332>
							}
							printf("\n");
 8015818:	200a      	movs	r0, #10
 801581a:	f00f fdb9 	bl	8025390 <putchar>

							memcpy(Kyosan_SelfRelays.Relays,&ControlData_Positive[1],60);
 801581e:	4a31      	ldr	r2, [pc, #196]	; (80158e4 <Get_Kyosan_EI_Message+0x418>)
 8015820:	4b2a      	ldr	r3, [pc, #168]	; (80158cc <Get_Kyosan_EI_Message+0x400>)
 8015822:	3301      	adds	r3, #1
 8015824:	1c90      	adds	r0, r2, #2
 8015826:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801582a:	4602      	mov	r2, r0
 801582c:	4619      	mov	r1, r3
 801582e:	f8d1 c000 	ldr.w	ip, [r1]
 8015832:	684e      	ldr	r6, [r1, #4]
 8015834:	688d      	ldr	r5, [r1, #8]
 8015836:	68c9      	ldr	r1, [r1, #12]
 8015838:	f8c2 c000 	str.w	ip, [r2]
 801583c:	6056      	str	r6, [r2, #4]
 801583e:	6095      	str	r5, [r2, #8]
 8015840:	60d1      	str	r1, [r2, #12]
 8015842:	3310      	adds	r3, #16
 8015844:	3010      	adds	r0, #16
 8015846:	42a3      	cmp	r3, r4
 8015848:	d1ef      	bne.n	801582a <Get_Kyosan_EI_Message+0x35e>
 801584a:	4602      	mov	r2, r0
 801584c:	6818      	ldr	r0, [r3, #0]
 801584e:	6859      	ldr	r1, [r3, #4]
 8015850:	689b      	ldr	r3, [r3, #8]
 8015852:	6010      	str	r0, [r2, #0]
 8015854:	6051      	str	r1, [r2, #4]
 8015856:	6093      	str	r3, [r2, #8]
							Kyosan_SelfRelays.Relay_CRC = Calc_Kysoan_CRC(Kyosan_SelfRelays.Relays, 60);
 8015858:	213c      	movs	r1, #60	; 0x3c
 801585a:	4823      	ldr	r0, [pc, #140]	; (80158e8 <Get_Kyosan_EI_Message+0x41c>)
 801585c:	f000 fa82 	bl	8015d64 <Calc_Kysoan_CRC>
 8015860:	4603      	mov	r3, r0
 8015862:	461a      	mov	r2, r3
 8015864:	4b1f      	ldr	r3, [pc, #124]	; (80158e4 <Get_Kyosan_EI_Message+0x418>)
 8015866:	87da      	strh	r2, [r3, #62]	; 0x3e

#ifdef EI_1
							if((SendThisCardRelays == SET)&&(PrevRelayCRC != Kyosan_SelfRelays.Relay_CRC))
 8015868:	4b20      	ldr	r3, [pc, #128]	; (80158ec <Get_Kyosan_EI_Message+0x420>)
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	2b01      	cmp	r3, #1
 801586e:	f040 8099 	bne.w	80159a4 <Get_Kyosan_EI_Message+0x4d8>
 8015872:	4b1c      	ldr	r3, [pc, #112]	; (80158e4 <Get_Kyosan_EI_Message+0x418>)
 8015874:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8015876:	4b1e      	ldr	r3, [pc, #120]	; (80158f0 <Get_Kyosan_EI_Message+0x424>)
 8015878:	881b      	ldrh	r3, [r3, #0]
 801587a:	429a      	cmp	r2, r3
 801587c:	f000 8092 	beq.w	80159a4 <Get_Kyosan_EI_Message+0x4d8>
							{
								PrevRelayCRC = Kyosan_SelfRelays.Relay_CRC;
 8015880:	4b18      	ldr	r3, [pc, #96]	; (80158e4 <Get_Kyosan_EI_Message+0x418>)
 8015882:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8015884:	4b1a      	ldr	r3, [pc, #104]	; (80158f0 <Get_Kyosan_EI_Message+0x424>)
 8015886:	801a      	strh	r2, [r3, #0]
								TransmitCanPkt(EI_PROCESS_DATA);
 8015888:	f240 1019 	movw	r0, #281	; 0x119
 801588c:	f7fa ffac 	bl	80107e8 <TransmitCanPkt>
 8015890:	e088      	b.n	80159a4 <Get_Kyosan_EI_Message+0x4d8>
 8015892:	bf00      	nop
 8015894:	2000a6d2 	.word	0x2000a6d2
 8015898:	2000a6d8 	.word	0x2000a6d8
 801589c:	2000a6d4 	.word	0x2000a6d4
 80158a0:	2000a170 	.word	0x2000a170
 80158a4:	08029dbc 	.word	0x08029dbc
 80158a8:	2000a9e0 	.word	0x2000a9e0
 80158ac:	80008001 	.word	0x80008001
 80158b0:	80808081 	.word	0x80808081
 80158b4:	08029dec 	.word	0x08029dec
 80158b8:	40021c00 	.word	0x40021c00
 80158bc:	2000a6cc 	.word	0x2000a6cc
 80158c0:	2000a6d0 	.word	0x2000a6d0
 80158c4:	2000a178 	.word	0x2000a178
 80158c8:	08029e1c 	.word	0x08029e1c
 80158cc:	2000a7dc 	.word	0x2000a7dc
 80158d0:	08029e2c 	.word	0x08029e2c
 80158d4:	88888889 	.word	0x88888889
 80158d8:	2000a8dc 	.word	0x2000a8dc
 80158dc:	08029e6c 	.word	0x08029e6c
 80158e0:	08029db4 	.word	0x08029db4
 80158e4:	2000a18c 	.word	0x2000a18c
 80158e8:	2000a18e 	.word	0x2000a18e
 80158ec:	2000a6c1 	.word	0x2000a6c1
 80158f0:	2000a9dc 	.word	0x2000a9dc
						}

					}
					else
					{
						printf("- Ctrl Data|");
 80158f4:	4888      	ldr	r0, [pc, #544]	; (8015b18 <Get_Kyosan_EI_Message+0x64c>)
 80158f6:	f00f fd33 	bl	8025360 <iprintf>
						memcpy(&ControlData_Negative,&Buffer,Cur_Receive_Length);
 80158fa:	4b88      	ldr	r3, [pc, #544]	; (8015b1c <Get_Kyosan_EI_Message+0x650>)
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	461a      	mov	r2, r3
 8015900:	4987      	ldr	r1, [pc, #540]	; (8015b20 <Get_Kyosan_EI_Message+0x654>)
 8015902:	4888      	ldr	r0, [pc, #544]	; (8015b24 <Get_Kyosan_EI_Message+0x658>)
 8015904:	f00f fc1c 	bl	8025140 <memcpy>
						ControlID = (uint8_t)(~ControlData_Negative[0]);
 8015908:	4b86      	ldr	r3, [pc, #536]	; (8015b24 <Get_Kyosan_EI_Message+0x658>)
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	43db      	mvns	r3, r3
 801590e:	727b      	strb	r3, [r7, #9]

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8015910:	4b85      	ldr	r3, [pc, #532]	; (8015b28 <Get_Kyosan_EI_Message+0x65c>)
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	091b      	lsrs	r3, r3, #4
 8015916:	f003 0301 	and.w	r3, r3, #1
 801591a:	2b00      	cmp	r3, #0
 801591c:	d027      	beq.n	801596e <Get_Kyosan_EI_Message+0x4a2>
 801591e:	4b80      	ldr	r3, [pc, #512]	; (8015b20 <Get_Kyosan_EI_Message+0x654>)
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	b25b      	sxtb	r3, r3
 8015924:	11db      	asrs	r3, r3, #7
 8015926:	b25b      	sxtb	r3, r3
 8015928:	f003 0301 	and.w	r3, r3, #1
 801592c:	2b00      	cmp	r3, #0
 801592e:	d01e      	beq.n	801596e <Get_Kyosan_EI_Message+0x4a2>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8015930:	487e      	ldr	r0, [pc, #504]	; (8015b2c <Get_Kyosan_EI_Message+0x660>)
 8015932:	f00f fdb1 	bl	8025498 <puts>
							ControlData_Negative[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8015936:	487e      	ldr	r0, [pc, #504]	; (8015b30 <Get_Kyosan_EI_Message+0x664>)
 8015938:	f007 f9ba 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 801593c:	4602      	mov	r2, r0
 801593e:	4b7d      	ldr	r3, [pc, #500]	; (8015b34 <Get_Kyosan_EI_Message+0x668>)
 8015940:	fba3 1302 	umull	r1, r3, r3, r2
 8015944:	09dc      	lsrs	r4, r3, #7
 8015946:	4623      	mov	r3, r4
 8015948:	021b      	lsls	r3, r3, #8
 801594a:	1b1b      	subs	r3, r3, r4
 801594c:	1ad4      	subs	r4, r2, r3
 801594e:	4878      	ldr	r0, [pc, #480]	; (8015b30 <Get_Kyosan_EI_Message+0x664>)
 8015950:	f007 f9ae 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015954:	4601      	mov	r1, r0
 8015956:	4b78      	ldr	r3, [pc, #480]	; (8015b38 <Get_Kyosan_EI_Message+0x66c>)
 8015958:	fba3 2301 	umull	r2, r3, r3, r1
 801595c:	08da      	lsrs	r2, r3, #3
 801595e:	4613      	mov	r3, r2
 8015960:	011b      	lsls	r3, r3, #4
 8015962:	1a9b      	subs	r3, r3, r2
 8015964:	1aca      	subs	r2, r1, r3
 8015966:	1c53      	adds	r3, r2, #1
 8015968:	b2e1      	uxtb	r1, r4
 801596a:	4a6e      	ldr	r2, [pc, #440]	; (8015b24 <Get_Kyosan_EI_Message+0x658>)
 801596c:	54d1      	strb	r1, [r2, r3]
						}


						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 801596e:	2300      	movs	r3, #0
 8015970:	82fb      	strh	r3, [r7, #22]
 8015972:	e011      	b.n	8015998 <Get_Kyosan_EI_Message+0x4cc>
						{
							if(ControlData_Positive[i] != (uint8_t)(~ControlData_Negative[i]))
 8015974:	8afb      	ldrh	r3, [r7, #22]
 8015976:	4a71      	ldr	r2, [pc, #452]	; (8015b3c <Get_Kyosan_EI_Message+0x670>)
 8015978:	5cd2      	ldrb	r2, [r2, r3]
 801597a:	8afb      	ldrh	r3, [r7, #22]
 801597c:	4969      	ldr	r1, [pc, #420]	; (8015b24 <Get_Kyosan_EI_Message+0x658>)
 801597e:	5ccb      	ldrb	r3, [r1, r3]
 8015980:	43db      	mvns	r3, r3
 8015982:	b2db      	uxtb	r3, r3
 8015984:	429a      	cmp	r2, r3
 8015986:	d004      	beq.n	8015992 <Get_Kyosan_EI_Message+0x4c6>
							{
								Pos_NegDataMisMatch = SET;
 8015988:	2301      	movs	r3, #1
 801598a:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = NEG_DATA_MISMATCH;
 801598c:	2302      	movs	r3, #2
 801598e:	773b      	strb	r3, [r7, #28]
								//								printf("Negative & Positive data not Matching\n");
								//								printf("N:%02X-P:%02X -> %X\n",ControlData_Negative[i],ControlData_Positive[i],(uint8_t)(~ControlData_Negative[i]));
								break;
 8015990:	e008      	b.n	80159a4 <Get_Kyosan_EI_Message+0x4d8>
						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8015992:	8afb      	ldrh	r3, [r7, #22]
 8015994:	3301      	adds	r3, #1
 8015996:	82fb      	strh	r3, [r7, #22]
 8015998:	8afa      	ldrh	r2, [r7, #22]
 801599a:	4b60      	ldr	r3, [pc, #384]	; (8015b1c <Get_Kyosan_EI_Message+0x650>)
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	3b02      	subs	r3, #2
 80159a0:	429a      	cmp	r2, r3
 80159a2:	dbe7      	blt.n	8015974 <Get_Kyosan_EI_Message+0x4a8>
							//							}
							//							printf("\n");
						}
					}

					if(Pos_NegDataMisMatch == RESET)
 80159a4:	7f7b      	ldrb	r3, [r7, #29]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d11b      	bne.n	80159e2 <Get_Kyosan_EI_Message+0x516>
					{
						//						printf("+ & -:DATA:OK\n");
						if(CHECKFLAG(7,Buffer[0]) == RESET)
 80159aa:	4b5d      	ldr	r3, [pc, #372]	; (8015b20 <Get_Kyosan_EI_Message+0x654>)
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	b25b      	sxtb	r3, r3
 80159b0:	11db      	asrs	r3, r3, #7
 80159b2:	b25b      	sxtb	r3, r3
 80159b4:	f003 0301 	and.w	r3, r3, #1
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d105      	bne.n	80159c8 <Get_Kyosan_EI_Message+0x4fc>
						{
							KyosanClocks.ControlDataPosRecvCLK = HAL_GetTick();
 80159bc:	f002 fcc6 	bl	801834c <HAL_GetTick>
 80159c0:	4603      	mov	r3, r0
 80159c2:	4a5f      	ldr	r2, [pc, #380]	; (8015b40 <Get_Kyosan_EI_Message+0x674>)
 80159c4:	6053      	str	r3, [r2, #4]
 80159c6:	e004      	b.n	80159d2 <Get_Kyosan_EI_Message+0x506>
						}
						else
						{
							KyosanClocks.ControlDataNegRecvCLK = HAL_GetTick();
 80159c8:	f002 fcc0 	bl	801834c <HAL_GetTick>
 80159cc:	4603      	mov	r3, r0
 80159ce:	4a5c      	ldr	r2, [pc, #368]	; (8015b40 <Get_Kyosan_EI_Message+0x674>)
 80159d0:	6093      	str	r3, [r2, #8]
						}
						Pos_NegDataMisMatch_Count = RESET;
 80159d2:	4b5c      	ldr	r3, [pc, #368]	; (8015b44 <Get_Kyosan_EI_Message+0x678>)
 80159d4:	2200      	movs	r2, #0
 80159d6:	701a      	strb	r2, [r3, #0]
						TypeofDataMisMatch = RESET;
 80159d8:	2300      	movs	r3, #0
 80159da:	773b      	strb	r3, [r7, #28]
						Pos_NegDataMisMatch = RESET;
 80159dc:	2300      	movs	r3, #0
 80159de:	777b      	strb	r3, [r7, #29]
 80159e0:	e092      	b.n	8015b08 <Get_Kyosan_EI_Message+0x63c>
					}
					else
					{
						++Pos_NegDataMisMatch_Count;
 80159e2:	4b58      	ldr	r3, [pc, #352]	; (8015b44 <Get_Kyosan_EI_Message+0x678>)
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	3301      	adds	r3, #1
 80159e8:	b2da      	uxtb	r2, r3
 80159ea:	4b56      	ldr	r3, [pc, #344]	; (8015b44 <Get_Kyosan_EI_Message+0x678>)
 80159ec:	701a      	strb	r2, [r3, #0]

						if(Pos_NegDataMisMatch_Count == 2)
 80159ee:	4b55      	ldr	r3, [pc, #340]	; (8015b44 <Get_Kyosan_EI_Message+0x678>)
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	2b02      	cmp	r3, #2
 80159f4:	d161      	bne.n	8015aba <Get_Kyosan_EI_Message+0x5ee>
						{
							switch(TypeofDataMisMatch)
 80159f6:	7f3b      	ldrb	r3, [r7, #28]
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d002      	beq.n	8015a02 <Get_Kyosan_EI_Message+0x536>
 80159fc:	2b02      	cmp	r3, #2
 80159fe:	d02e      	beq.n	8015a5e <Get_Kyosan_EI_Message+0x592>
 8015a00:	e05c      	b.n	8015abc <Get_Kyosan_EI_Message+0x5f0>
							{
							case POS_DATA_MISMATCH:
								printf("P:");
 8015a02:	4851      	ldr	r0, [pc, #324]	; (8015b48 <Get_Kyosan_EI_Message+0x67c>)
 8015a04:	f00f fcac 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015a08:	2300      	movs	r3, #0
 8015a0a:	82bb      	strh	r3, [r7, #20]
 8015a0c:	e009      	b.n	8015a22 <Get_Kyosan_EI_Message+0x556>
								{
									printf("%02X ",ControlData_Positive[i]);
 8015a0e:	8abb      	ldrh	r3, [r7, #20]
 8015a10:	4a4a      	ldr	r2, [pc, #296]	; (8015b3c <Get_Kyosan_EI_Message+0x670>)
 8015a12:	5cd3      	ldrb	r3, [r2, r3]
 8015a14:	4619      	mov	r1, r3
 8015a16:	484d      	ldr	r0, [pc, #308]	; (8015b4c <Get_Kyosan_EI_Message+0x680>)
 8015a18:	f00f fca2 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015a1c:	8abb      	ldrh	r3, [r7, #20]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	82bb      	strh	r3, [r7, #20]
 8015a22:	4b3e      	ldr	r3, [pc, #248]	; (8015b1c <Get_Kyosan_EI_Message+0x650>)
 8015a24:	881b      	ldrh	r3, [r3, #0]
 8015a26:	8aba      	ldrh	r2, [r7, #20]
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d3f0      	bcc.n	8015a0e <Get_Kyosan_EI_Message+0x542>
								}
								printf("\nN:");
 8015a2c:	4848      	ldr	r0, [pc, #288]	; (8015b50 <Get_Kyosan_EI_Message+0x684>)
 8015a2e:	f00f fc97 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015a32:	2300      	movs	r3, #0
 8015a34:	827b      	strh	r3, [r7, #18]
 8015a36:	e009      	b.n	8015a4c <Get_Kyosan_EI_Message+0x580>
								{
									printf("%02X ",ControlData_Negative[i]);
 8015a38:	8a7b      	ldrh	r3, [r7, #18]
 8015a3a:	4a3a      	ldr	r2, [pc, #232]	; (8015b24 <Get_Kyosan_EI_Message+0x658>)
 8015a3c:	5cd3      	ldrb	r3, [r2, r3]
 8015a3e:	4619      	mov	r1, r3
 8015a40:	4842      	ldr	r0, [pc, #264]	; (8015b4c <Get_Kyosan_EI_Message+0x680>)
 8015a42:	f00f fc8d 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015a46:	8a7b      	ldrh	r3, [r7, #18]
 8015a48:	3301      	adds	r3, #1
 8015a4a:	827b      	strh	r3, [r7, #18]
 8015a4c:	4b33      	ldr	r3, [pc, #204]	; (8015b1c <Get_Kyosan_EI_Message+0x650>)
 8015a4e:	881b      	ldrh	r3, [r3, #0]
 8015a50:	8a7a      	ldrh	r2, [r7, #18]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d3f0      	bcc.n	8015a38 <Get_Kyosan_EI_Message+0x56c>
								}
								printf("\n");
 8015a56:	200a      	movs	r0, #10
 8015a58:	f00f fc9a 	bl	8025390 <putchar>
								break;
 8015a5c:	e02e      	b.n	8015abc <Get_Kyosan_EI_Message+0x5f0>
							case NEG_DATA_MISMATCH:
								printf("N:");
 8015a5e:	483d      	ldr	r0, [pc, #244]	; (8015b54 <Get_Kyosan_EI_Message+0x688>)
 8015a60:	f00f fc7e 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015a64:	2300      	movs	r3, #0
 8015a66:	823b      	strh	r3, [r7, #16]
 8015a68:	e009      	b.n	8015a7e <Get_Kyosan_EI_Message+0x5b2>
								{
									printf("%02X ",ControlData_Negative[i]);
 8015a6a:	8a3b      	ldrh	r3, [r7, #16]
 8015a6c:	4a2d      	ldr	r2, [pc, #180]	; (8015b24 <Get_Kyosan_EI_Message+0x658>)
 8015a6e:	5cd3      	ldrb	r3, [r2, r3]
 8015a70:	4619      	mov	r1, r3
 8015a72:	4836      	ldr	r0, [pc, #216]	; (8015b4c <Get_Kyosan_EI_Message+0x680>)
 8015a74:	f00f fc74 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015a78:	8a3b      	ldrh	r3, [r7, #16]
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	823b      	strh	r3, [r7, #16]
 8015a7e:	4b27      	ldr	r3, [pc, #156]	; (8015b1c <Get_Kyosan_EI_Message+0x650>)
 8015a80:	881b      	ldrh	r3, [r3, #0]
 8015a82:	8a3a      	ldrh	r2, [r7, #16]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d3f0      	bcc.n	8015a6a <Get_Kyosan_EI_Message+0x59e>
								}
								printf("\nP:");
 8015a88:	4833      	ldr	r0, [pc, #204]	; (8015b58 <Get_Kyosan_EI_Message+0x68c>)
 8015a8a:	f00f fc69 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015a8e:	2300      	movs	r3, #0
 8015a90:	81fb      	strh	r3, [r7, #14]
 8015a92:	e009      	b.n	8015aa8 <Get_Kyosan_EI_Message+0x5dc>
								{
									printf("%02X ",ControlData_Positive[i]);
 8015a94:	89fb      	ldrh	r3, [r7, #14]
 8015a96:	4a29      	ldr	r2, [pc, #164]	; (8015b3c <Get_Kyosan_EI_Message+0x670>)
 8015a98:	5cd3      	ldrb	r3, [r2, r3]
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	482b      	ldr	r0, [pc, #172]	; (8015b4c <Get_Kyosan_EI_Message+0x680>)
 8015a9e:	f00f fc5f 	bl	8025360 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8015aa2:	89fb      	ldrh	r3, [r7, #14]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	81fb      	strh	r3, [r7, #14]
 8015aa8:	4b1c      	ldr	r3, [pc, #112]	; (8015b1c <Get_Kyosan_EI_Message+0x650>)
 8015aaa:	881b      	ldrh	r3, [r3, #0]
 8015aac:	89fa      	ldrh	r2, [r7, #14]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d3f0      	bcc.n	8015a94 <Get_Kyosan_EI_Message+0x5c8>
								}
								printf("\n");
 8015ab2:	200a      	movs	r0, #10
 8015ab4:	f00f fc6c 	bl	8025390 <putchar>
								break;
 8015ab8:	e000      	b.n	8015abc <Get_Kyosan_EI_Message+0x5f0>
							default:
 8015aba:	bf00      	nop
								;

							}
						}

						if(Pos_NegDataMisMatch_Count >= EI_data.Kyosan_st.MaxMisMatchCnt)
 8015abc:	4b21      	ldr	r3, [pc, #132]	; (8015b44 <Get_Kyosan_EI_Message+0x678>)
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	b29a      	uxth	r2, r3
 8015ac2:	4b26      	ldr	r3, [pc, #152]	; (8015b5c <Get_Kyosan_EI_Message+0x690>)
 8015ac4:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d31d      	bcc.n	8015b08 <Get_Kyosan_EI_Message+0x63c>
						{
							printf("\n+ & - Data Mismatch count Reached:%u\n",Pos_NegDataMisMatch_Count);
 8015acc:	4b1d      	ldr	r3, [pc, #116]	; (8015b44 <Get_Kyosan_EI_Message+0x678>)
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	4619      	mov	r1, r3
 8015ad2:	4823      	ldr	r0, [pc, #140]	; (8015b60 <Get_Kyosan_EI_Message+0x694>)
 8015ad4:	f00f fc44 	bl	8025360 <iprintf>
							Pos_NegDataMisMatch_Count = EI_data.Kyosan_st.MaxMisMatchCnt; /* To avoid Overflow */
 8015ad8:	4b20      	ldr	r3, [pc, #128]	; (8015b5c <Get_Kyosan_EI_Message+0x690>)
 8015ada:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8015ade:	b2da      	uxtb	r2, r3
 8015ae0:	4b18      	ldr	r3, [pc, #96]	; (8015b44 <Get_Kyosan_EI_Message+0x678>)
 8015ae2:	701a      	strb	r2, [r3, #0]
 8015ae4:	e010      	b.n	8015b08 <Get_Kyosan_EI_Message+0x63c>
						}
					}
				}
				else
				{
					printf("\n%c Control Data Packet CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8015ae6:	4b0e      	ldr	r3, [pc, #56]	; (8015b20 <Get_Kyosan_EI_Message+0x654>)
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	b25b      	sxtb	r3, r3
 8015aec:	11db      	asrs	r3, r3, #7
 8015aee:	b25b      	sxtb	r3, r3
 8015af0:	f003 0301 	and.w	r3, r3, #1
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d101      	bne.n	8015afc <Get_Kyosan_EI_Message+0x630>
 8015af8:	212b      	movs	r1, #43	; 0x2b
 8015afa:	e000      	b.n	8015afe <Get_Kyosan_EI_Message+0x632>
 8015afc:	212d      	movs	r1, #45	; 0x2d
 8015afe:	897a      	ldrh	r2, [r7, #10]
 8015b00:	8bfb      	ldrh	r3, [r7, #30]
 8015b02:	4818      	ldr	r0, [pc, #96]	; (8015b64 <Get_Kyosan_EI_Message+0x698>)
 8015b04:	f00f fc2c 	bl	8025360 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8015b08:	4b04      	ldr	r3, [pc, #16]	; (8015b1c <Get_Kyosan_EI_Message+0x650>)
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8015b0e:	4b16      	ldr	r3, [pc, #88]	; (8015b68 <Get_Kyosan_EI_Message+0x69c>)
 8015b10:	2200      	movs	r2, #0
 8015b12:	801a      	strh	r2, [r3, #0]
			}
			break;
 8015b14:	e0fe      	b.n	8015d14 <Get_Kyosan_EI_Message+0x848>
 8015b16:	bf00      	nop
 8015b18:	08029e70 	.word	0x08029e70
 8015b1c:	2000a6d2 	.word	0x2000a6d2
 8015b20:	2000a6d8 	.word	0x2000a6d8
 8015b24:	2000a8dc 	.word	0x2000a8dc
 8015b28:	2000a170 	.word	0x2000a170
 8015b2c:	08029e2c 	.word	0x08029e2c
 8015b30:	2000a9e0 	.word	0x2000a9e0
 8015b34:	80808081 	.word	0x80808081
 8015b38:	88888889 	.word	0x88888889
 8015b3c:	2000a7dc 	.word	0x2000a7dc
 8015b40:	2000a178 	.word	0x2000a178
 8015b44:	2000a9de 	.word	0x2000a9de
 8015b48:	08029e80 	.word	0x08029e80
 8015b4c:	08029db4 	.word	0x08029db4
 8015b50:	08029e84 	.word	0x08029e84
 8015b54:	08029e88 	.word	0x08029e88
 8015b58:	08029e8c 	.word	0x08029e8c
 8015b5c:	20000304 	.word	0x20000304
 8015b60:	08029e90 	.word	0x08029e90
 8015b64:	08029eb8 	.word	0x08029eb8
 8015b68:	2000a6d4 	.word	0x2000a6d4
		case POLLING_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8015b6c:	4b70      	ldr	r3, [pc, #448]	; (8015d30 <Get_Kyosan_EI_Message+0x864>)
 8015b6e:	881b      	ldrh	r3, [r3, #0]
 8015b70:	1c5a      	adds	r2, r3, #1
 8015b72:	b291      	uxth	r1, r2
 8015b74:	4a6e      	ldr	r2, [pc, #440]	; (8015d30 <Get_Kyosan_EI_Message+0x864>)
 8015b76:	8011      	strh	r1, [r2, #0]
 8015b78:	4619      	mov	r1, r3
 8015b7a:	4a6e      	ldr	r2, [pc, #440]	; (8015d34 <Get_Kyosan_EI_Message+0x868>)
 8015b7c:	7b7b      	ldrb	r3, [r7, #13]
 8015b7e:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 8015b80:	4b6b      	ldr	r3, [pc, #428]	; (8015d30 <Get_Kyosan_EI_Message+0x864>)
 8015b82:	881a      	ldrh	r2, [r3, #0]
 8015b84:	4b6c      	ldr	r3, [pc, #432]	; (8015d38 <Get_Kyosan_EI_Message+0x86c>)
 8015b86:	881b      	ldrh	r3, [r3, #0]
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	f040 80c3 	bne.w	8015d14 <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 8015b8e:	4b68      	ldr	r3, [pc, #416]	; (8015d30 <Get_Kyosan_EI_Message+0x864>)
 8015b90:	881b      	ldrh	r3, [r3, #0]
 8015b92:	3b02      	subs	r3, #2
 8015b94:	4619      	mov	r1, r3
 8015b96:	4867      	ldr	r0, [pc, #412]	; (8015d34 <Get_Kyosan_EI_Message+0x868>)
 8015b98:	f000 f8e4 	bl	8015d64 <Calc_Kysoan_CRC>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8015ba0:	4b63      	ldr	r3, [pc, #396]	; (8015d30 <Get_Kyosan_EI_Message+0x864>)
 8015ba2:	881b      	ldrh	r3, [r3, #0]
 8015ba4:	3b02      	subs	r3, #2
 8015ba6:	4a63      	ldr	r2, [pc, #396]	; (8015d34 <Get_Kyosan_EI_Message+0x868>)
 8015ba8:	4413      	add	r3, r2
 8015baa:	461a      	mov	r2, r3
 8015bac:	2110      	movs	r1, #16
 8015bae:	2000      	movs	r0, #0
 8015bb0:	f7ea fd30 	bl	8000614 <ExtractBits>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	83fb      	strh	r3, [r7, #30]

				if( (  (CHECKFLAG(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8015bb8:	4b60      	ldr	r3, [pc, #384]	; (8015d3c <Get_Kyosan_EI_Message+0x870>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	089b      	lsrs	r3, r3, #2
 8015bbe:	f003 0301 	and.w	r3, r3, #1
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d02d      	beq.n	8015c22 <Get_Kyosan_EI_Message+0x756>
 8015bc6:	4b5b      	ldr	r3, [pc, #364]	; (8015d34 <Get_Kyosan_EI_Message+0x868>)
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	b25b      	sxtb	r3, r3
 8015bcc:	11db      	asrs	r3, r3, #7
 8015bce:	b25b      	sxtb	r3, r3
 8015bd0:	f003 0301 	and.w	r3, r3, #1
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d124      	bne.n	8015c22 <Get_Kyosan_EI_Message+0x756>
				{
					printf("\nInjecting Positive Polling Data CRC Failure\n");
 8015bd8:	4859      	ldr	r0, [pc, #356]	; (8015d40 <Get_Kyosan_EI_Message+0x874>)
 8015bda:	f00f fc5d 	bl	8025498 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8015bde:	4859      	ldr	r0, [pc, #356]	; (8015d44 <Get_Kyosan_EI_Message+0x878>)
 8015be0:	f007 f866 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015be4:	4601      	mov	r1, r0
 8015be6:	4b58      	ldr	r3, [pc, #352]	; (8015d48 <Get_Kyosan_EI_Message+0x87c>)
 8015be8:	fba3 2301 	umull	r2, r3, r3, r1
 8015bec:	0bda      	lsrs	r2, r3, #15
 8015bee:	4613      	mov	r3, r2
 8015bf0:	041b      	lsls	r3, r3, #16
 8015bf2:	1a9b      	subs	r3, r3, r2
 8015bf4:	1aca      	subs	r2, r1, r3
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8015bfa:	8bfa      	ldrh	r2, [r7, #30]
 8015bfc:	897b      	ldrh	r3, [r7, #10]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d10f      	bne.n	8015c22 <Get_Kyosan_EI_Message+0x756>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8015c02:	4850      	ldr	r0, [pc, #320]	; (8015d44 <Get_Kyosan_EI_Message+0x878>)
 8015c04:	f007 f854 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015c08:	4601      	mov	r1, r0
 8015c0a:	4b50      	ldr	r3, [pc, #320]	; (8015d4c <Get_Kyosan_EI_Message+0x880>)
 8015c0c:	fba3 2301 	umull	r2, r3, r3, r1
 8015c10:	09da      	lsrs	r2, r3, #7
 8015c12:	4613      	mov	r3, r2
 8015c14:	021b      	lsls	r3, r3, #8
 8015c16:	1a9b      	subs	r3, r3, r2
 8015c18:	1aca      	subs	r2, r1, r3
 8015c1a:	b293      	uxth	r3, r2
 8015c1c:	8bfa      	ldrh	r2, [r7, #30]
 8015c1e:	1ad3      	subs	r3, r2, r3
 8015c20:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8015c22:	4b46      	ldr	r3, [pc, #280]	; (8015d3c <Get_Kyosan_EI_Message+0x870>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	08db      	lsrs	r3, r3, #3
 8015c28:	f003 0301 	and.w	r3, r3, #1
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d02d      	beq.n	8015c8c <Get_Kyosan_EI_Message+0x7c0>
 8015c30:	4b40      	ldr	r3, [pc, #256]	; (8015d34 <Get_Kyosan_EI_Message+0x868>)
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	b25b      	sxtb	r3, r3
 8015c36:	11db      	asrs	r3, r3, #7
 8015c38:	b25b      	sxtb	r3, r3
 8015c3a:	f003 0301 	and.w	r3, r3, #1
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d024      	beq.n	8015c8c <Get_Kyosan_EI_Message+0x7c0>
				{
					printf("\nInjecting Negative Polling Data CRC Failure\n");
 8015c42:	4843      	ldr	r0, [pc, #268]	; (8015d50 <Get_Kyosan_EI_Message+0x884>)
 8015c44:	f00f fc28 	bl	8025498 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8015c48:	483e      	ldr	r0, [pc, #248]	; (8015d44 <Get_Kyosan_EI_Message+0x878>)
 8015c4a:	f007 f831 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015c4e:	4601      	mov	r1, r0
 8015c50:	4b3d      	ldr	r3, [pc, #244]	; (8015d48 <Get_Kyosan_EI_Message+0x87c>)
 8015c52:	fba3 2301 	umull	r2, r3, r3, r1
 8015c56:	0bda      	lsrs	r2, r3, #15
 8015c58:	4613      	mov	r3, r2
 8015c5a:	041b      	lsls	r3, r3, #16
 8015c5c:	1a9b      	subs	r3, r3, r2
 8015c5e:	1aca      	subs	r2, r1, r3
 8015c60:	4613      	mov	r3, r2
 8015c62:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8015c64:	8bfa      	ldrh	r2, [r7, #30]
 8015c66:	897b      	ldrh	r3, [r7, #10]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d10f      	bne.n	8015c8c <Get_Kyosan_EI_Message+0x7c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8015c6c:	4835      	ldr	r0, [pc, #212]	; (8015d44 <Get_Kyosan_EI_Message+0x878>)
 8015c6e:	f007 f81f 	bl	801ccb0 <HAL_RNG_GetRandomNumber>
 8015c72:	4601      	mov	r1, r0
 8015c74:	4b35      	ldr	r3, [pc, #212]	; (8015d4c <Get_Kyosan_EI_Message+0x880>)
 8015c76:	fba3 2301 	umull	r2, r3, r3, r1
 8015c7a:	09da      	lsrs	r2, r3, #7
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	021b      	lsls	r3, r3, #8
 8015c80:	1a9b      	subs	r3, r3, r2
 8015c82:	1aca      	subs	r2, r1, r3
 8015c84:	b293      	uxth	r3, r2
 8015c86:	8bfa      	ldrh	r2, [r7, #30]
 8015c88:	1ad3      	subs	r3, r2, r3
 8015c8a:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(C_CRC == R_CRC)
 8015c8c:	897a      	ldrh	r2, [r7, #10]
 8015c8e:	8bfb      	ldrh	r3, [r7, #30]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d11e      	bne.n	8015cd2 <Get_Kyosan_EI_Message+0x806>
				{
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8015c94:	f002 fb5a 	bl	801834c <HAL_GetTick>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	4a2e      	ldr	r2, [pc, #184]	; (8015d54 <Get_Kyosan_EI_Message+0x888>)
 8015c9c:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8015c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015ca2:	482d      	ldr	r0, [pc, #180]	; (8015d58 <Get_Kyosan_EI_Message+0x88c>)
 8015ca4:	f005 f83b 	bl	801ad1e <HAL_GPIO_TogglePin>

					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8015ca8:	4b22      	ldr	r3, [pc, #136]	; (8015d34 <Get_Kyosan_EI_Message+0x868>)
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	b25b      	sxtb	r3, r3
 8015cae:	11db      	asrs	r3, r3, #7
 8015cb0:	b25b      	sxtb	r3, r3
 8015cb2:	f003 0301 	and.w	r3, r3, #1
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d105      	bne.n	8015cc6 <Get_Kyosan_EI_Message+0x7fa>
					{
						KyosanClocks.PollingDataPosRecvCLK = HAL_GetTick();
 8015cba:	f002 fb47 	bl	801834c <HAL_GetTick>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	4a24      	ldr	r2, [pc, #144]	; (8015d54 <Get_Kyosan_EI_Message+0x888>)
 8015cc2:	60d3      	str	r3, [r2, #12]
 8015cc4:	e01c      	b.n	8015d00 <Get_Kyosan_EI_Message+0x834>
					}
					else
					{
						KyosanClocks.PollingDataNegRecvCLK = HAL_GetTick();
 8015cc6:	f002 fb41 	bl	801834c <HAL_GetTick>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	4a21      	ldr	r2, [pc, #132]	; (8015d54 <Get_Kyosan_EI_Message+0x888>)
 8015cce:	6113      	str	r3, [r2, #16]
 8015cd0:	e016      	b.n	8015d00 <Get_Kyosan_EI_Message+0x834>
					}
					//CRC_FailCnt = RESET;
				}
				else
				{
					printf("Polling Data CRC Failed\nC:%04x-R:%04x\n",C_CRC,R_CRC);
 8015cd2:	897b      	ldrh	r3, [r7, #10]
 8015cd4:	8bfa      	ldrh	r2, [r7, #30]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	4820      	ldr	r0, [pc, #128]	; (8015d5c <Get_Kyosan_EI_Message+0x890>)
 8015cda:	f00f fb41 	bl	8025360 <iprintf>
					printf("\n%c Polling Data CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8015cde:	4b15      	ldr	r3, [pc, #84]	; (8015d34 <Get_Kyosan_EI_Message+0x868>)
 8015ce0:	781b      	ldrb	r3, [r3, #0]
 8015ce2:	b25b      	sxtb	r3, r3
 8015ce4:	11db      	asrs	r3, r3, #7
 8015ce6:	b25b      	sxtb	r3, r3
 8015ce8:	f003 0301 	and.w	r3, r3, #1
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d101      	bne.n	8015cf4 <Get_Kyosan_EI_Message+0x828>
 8015cf0:	212b      	movs	r1, #43	; 0x2b
 8015cf2:	e000      	b.n	8015cf6 <Get_Kyosan_EI_Message+0x82a>
 8015cf4:	212d      	movs	r1, #45	; 0x2d
 8015cf6:	897a      	ldrh	r2, [r7, #10]
 8015cf8:	8bfb      	ldrh	r3, [r7, #30]
 8015cfa:	4819      	ldr	r0, [pc, #100]	; (8015d60 <Get_Kyosan_EI_Message+0x894>)
 8015cfc:	f00f fb30 	bl	8025360 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8015d00:	4b0b      	ldr	r3, [pc, #44]	; (8015d30 <Get_Kyosan_EI_Message+0x864>)
 8015d02:	2200      	movs	r2, #0
 8015d04:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8015d06:	4b0c      	ldr	r3, [pc, #48]	; (8015d38 <Get_Kyosan_EI_Message+0x86c>)
 8015d08:	2200      	movs	r2, #0
 8015d0a:	801a      	strh	r2, [r3, #0]
			}
			break;
 8015d0c:	e002      	b.n	8015d14 <Get_Kyosan_EI_Message+0x848>
		default:
			Cur_Receive_Length = RESET;
 8015d0e:	4b08      	ldr	r3, [pc, #32]	; (8015d30 <Get_Kyosan_EI_Message+0x864>)
 8015d10:	2200      	movs	r2, #0
 8015d12:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(ComPort))
 8015d14:	79fb      	ldrb	r3, [r7, #7]
 8015d16:	4618      	mov	r0, r3
 8015d18:	f001 ffb0 	bl	8017c7c <Com_DataReady>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	f47f abfa 	bne.w	8015518 <Get_Kyosan_EI_Message+0x4c>

		}
	}
	UNUSED(ControlID);
}
 8015d24:	bf00      	nop
 8015d26:	bf00      	nop
 8015d28:	3724      	adds	r7, #36	; 0x24
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	2000a6d2 	.word	0x2000a6d2
 8015d34:	2000a6d8 	.word	0x2000a6d8
 8015d38:	2000a6d4 	.word	0x2000a6d4
 8015d3c:	2000a170 	.word	0x2000a170
 8015d40:	08029eec 	.word	0x08029eec
 8015d44:	2000a9e0 	.word	0x2000a9e0
 8015d48:	80008001 	.word	0x80008001
 8015d4c:	80808081 	.word	0x80808081
 8015d50:	08029f1c 	.word	0x08029f1c
 8015d54:	2000a178 	.word	0x2000a178
 8015d58:	40021c00 	.word	0x40021c00
 8015d5c:	08029f4c 	.word	0x08029f4c
 8015d60:	08029f74 	.word	0x08029f74

08015d64 <Calc_Kysoan_CRC>:


uint16_t Calc_Kysoan_CRC(uint8_t *data, size_t length)
{
 8015d64:	b480      	push	{r7}
 8015d66:	b087      	sub	sp, #28
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
	uint16_t crc = KYOSAN_CRC_INIT_VAL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	82fb      	strh	r3, [r7, #22]

	for (size_t i = 0; i < length; i++)
 8015d72:	2300      	movs	r3, #0
 8015d74:	613b      	str	r3, [r7, #16]
 8015d76:	e026      	b.n	8015dc6 <Calc_Kysoan_CRC+0x62>
	{
		crc ^= (uint16_t)data[i] << 8; // XOR with next byte shifted to left
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	4413      	add	r3, r2
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	021b      	lsls	r3, r3, #8
 8015d82:	b21a      	sxth	r2, r3
 8015d84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015d88:	4053      	eors	r3, r2
 8015d8a:	b21b      	sxth	r3, r3
 8015d8c:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8015d8e:	2300      	movs	r3, #0
 8015d90:	60fb      	str	r3, [r7, #12]
 8015d92:	e012      	b.n	8015dba <Calc_Kysoan_CRC+0x56>
		{
			if (crc & 0x8000)
 8015d94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	da08      	bge.n	8015dae <Calc_Kysoan_CRC+0x4a>
			{
				crc = (crc << 1) ^ KYOSAN_CRC_POLYNOMIAL;
 8015d9c:	8afb      	ldrh	r3, [r7, #22]
 8015d9e:	005b      	lsls	r3, r3, #1
 8015da0:	b21a      	sxth	r2, r3
 8015da2:	f241 0321 	movw	r3, #4129	; 0x1021
 8015da6:	4053      	eors	r3, r2
 8015da8:	b21b      	sxth	r3, r3
 8015daa:	82fb      	strh	r3, [r7, #22]
 8015dac:	e002      	b.n	8015db4 <Calc_Kysoan_CRC+0x50>
			}
			else
			{
				crc <<= 1;
 8015dae:	8afb      	ldrh	r3, [r7, #22]
 8015db0:	005b      	lsls	r3, r3, #1
 8015db2:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	3301      	adds	r3, #1
 8015db8:	60fb      	str	r3, [r7, #12]
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2b07      	cmp	r3, #7
 8015dbe:	dde9      	ble.n	8015d94 <Calc_Kysoan_CRC+0x30>
	for (size_t i = 0; i < length; i++)
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	613b      	str	r3, [r7, #16]
 8015dc6:	693a      	ldr	r2, [r7, #16]
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d3d4      	bcc.n	8015d78 <Calc_Kysoan_CRC+0x14>
			}
		}
	}
	return crc;
 8015dce:	8afb      	ldrh	r3, [r7, #22]
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	371c      	adds	r7, #28
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr

08015ddc <Check_forKyosanCMD>:
	}
}


void Check_forKyosanCMD(void)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b09a      	sub	sp, #104	; 0x68
 8015de0:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8015de2:	2300      	movs	r3, #0
 8015de4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8015de8:	2300      	movs	r3, #0
 8015dea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8015dee:	2300      	movs	r3, #0
 8015df0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t Buffer[100] = {0,};
 8015df4:	2300      	movs	r3, #0
 8015df6:	603b      	str	r3, [r7, #0]
 8015df8:	1d3b      	adds	r3, r7, #4
 8015dfa:	2260      	movs	r2, #96	; 0x60
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f00f f9c6 	bl	8025190 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8015e04:	4b90      	ldr	r3, [pc, #576]	; (8016048 <Check_forKyosanCMD+0x26c>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7f9 ff39 	bl	800fc80 <HAL_Elaps_Ticks>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b09      	cmp	r3, #9
 8015e12:	f240 8114 	bls.w	801603e <Check_forKyosanCMD+0x262>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8015e16:	e010      	b.n	8015e3a <Check_forKyosanCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8015e18:	2000      	movs	r0, #0
 8015e1a:	f001 ff6f 	bl	8017cfc <Com_Get_Byte>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			Buffer[Index++] = Byte;
 8015e24:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015e28:	1c5a      	adds	r2, r3, #1
 8015e2a:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8015e2e:	3368      	adds	r3, #104	; 0x68
 8015e30:	443b      	add	r3, r7
 8015e32:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8015e36:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8015e3a:	2000      	movs	r0, #0
 8015e3c:	f001 ff1e 	bl	8017c7c <Com_DataReady>
 8015e40:	4603      	mov	r3, r0
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d1e8      	bne.n	8015e18 <Check_forKyosanCMD+0x3c>
		}
		if(Index>0)
 8015e46:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	f000 80ee 	beq.w	801602c <Check_forKyosanCMD+0x250>
		{
			Buffer[Index] = 0;
 8015e50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015e54:	3368      	adds	r3, #104	; 0x68
 8015e56:	443b      	add	r3, r7
 8015e58:	2200      	movs	r2, #0
 8015e5a:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8015e5e:	463b      	mov	r3, r7
 8015e60:	4619      	mov	r1, r3
 8015e62:	487a      	ldr	r0, [pc, #488]	; (801604c <Check_forKyosanCMD+0x270>)
 8015e64:	f00f fa7c 	bl	8025360 <iprintf>
			switch(Is_KyosanCommand_Valid(Buffer,Index))
 8015e68:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8015e6c:	463b      	mov	r3, r7
 8015e6e:	4611      	mov	r1, r2
 8015e70:	4618      	mov	r0, r3
 8015e72:	f000 fa25 	bl	80162c0 <Is_KyosanCommand_Valid>
 8015e76:	4603      	mov	r3, r0
 8015e78:	2b07      	cmp	r3, #7
 8015e7a:	f200 80bb 	bhi.w	8015ff4 <Check_forKyosanCMD+0x218>
 8015e7e:	a201      	add	r2, pc, #4	; (adr r2, 8015e84 <Check_forKyosanCMD+0xa8>)
 8015e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e84:	08015ea5 	.word	0x08015ea5
 8015e88:	08015eb3 	.word	0x08015eb3
 8015e8c:	08015f17 	.word	0x08015f17
 8015e90:	08015f39 	.word	0x08015f39
 8015e94:	08015f61 	.word	0x08015f61
 8015e98:	08015f89 	.word	0x08015f89
 8015e9c:	08015fb1 	.word	0x08015fb1
 8015ea0:	08015fd9 	.word	0x08015fd9
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8015ea4:	4b6a      	ldr	r3, [pc, #424]	; (8016050 <Check_forKyosanCMD+0x274>)
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8015eaa:	486a      	ldr	r0, [pc, #424]	; (8016054 <Check_forKyosanCMD+0x278>)
 8015eac:	f00f faf4 	bl	8025498 <puts>
				break;
 8015eb0:	e0bc      	b.n	801602c <Check_forKyosanCMD+0x250>
			case ONE:
				printf("Received \"%s\":%u\n",KyosanCommands_List[ONE],(Buffer[Index-1])-'0');
 8015eb2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015eb6:	3b01      	subs	r3, #1
 8015eb8:	3368      	adds	r3, #104	; 0x68
 8015eba:	443b      	add	r3, r7
 8015ebc:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8015ec0:	3b30      	subs	r3, #48	; 0x30
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	4964      	ldr	r1, [pc, #400]	; (8016058 <Check_forKyosanCMD+0x27c>)
 8015ec6:	4865      	ldr	r0, [pc, #404]	; (801605c <Check_forKyosanCMD+0x280>)
 8015ec8:	f00f fa4a 	bl	8025360 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8015ecc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015ed0:	3b01      	subs	r3, #1
 8015ed2:	3368      	adds	r3, #104	; 0x68
 8015ed4:	443b      	add	r3, r7
 8015ed6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8015eda:	2b2f      	cmp	r3, #47	; 0x2f
 8015edc:	d914      	bls.n	8015f08 <Check_forKyosanCMD+0x12c>
 8015ede:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015ee2:	3b01      	subs	r3, #1
 8015ee4:	3368      	adds	r3, #104	; 0x68
 8015ee6:	443b      	add	r3, r7
 8015ee8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8015eec:	2b31      	cmp	r3, #49	; 0x31
 8015eee:	d80b      	bhi.n	8015f08 <Check_forKyosanCMD+0x12c>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8015ef0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015ef4:	3b01      	subs	r3, #1
 8015ef6:	3368      	adds	r3, #104	; 0x68
 8015ef8:	443b      	add	r3, r7
 8015efa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8015efe:	3b30      	subs	r3, #48	; 0x30
 8015f00:	b2da      	uxtb	r2, r3
 8015f02:	4b57      	ldr	r3, [pc, #348]	; (8016060 <Check_forKyosanCMD+0x284>)
 8015f04:	701a      	strb	r2, [r3, #0]
 8015f06:	e002      	b.n	8015f0e <Check_forKyosanCMD+0x132>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8015f08:	4856      	ldr	r0, [pc, #344]	; (8016064 <Check_forKyosanCMD+0x288>)
 8015f0a:	f00f fac5 	bl	8025498 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8015f0e:	2301      	movs	r3, #1
 8015f10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015f14:	e08a      	b.n	801602c <Check_forKyosanCMD+0x250>

			case TWO:
				printf("Received %s\n",KyosanCommands_List[TWO]);
 8015f16:	4954      	ldr	r1, [pc, #336]	; (8016068 <Check_forKyosanCMD+0x28c>)
 8015f18:	4854      	ldr	r0, [pc, #336]	; (801606c <Check_forKyosanCMD+0x290>)
 8015f1a:	f00f fa21 	bl	8025360 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_POS\n");
 8015f1e:	4854      	ldr	r0, [pc, #336]	; (8016070 <Check_forKyosanCMD+0x294>)
 8015f20:	f00f faba 	bl	8025498 <puts>
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8015f24:	4b53      	ldr	r3, [pc, #332]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	f043 0301 	orr.w	r3, r3, #1
 8015f2c:	4a51      	ldr	r2, [pc, #324]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f2e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015f30:	2301      	movs	r3, #1
 8015f32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015f36:	e079      	b.n	801602c <Check_forKyosanCMD+0x250>

			case THREE:
				printf("Received %s\n",KyosanCommands_List[THREE]);
 8015f38:	494f      	ldr	r1, [pc, #316]	; (8016078 <Check_forKyosanCMD+0x29c>)
 8015f3a:	484c      	ldr	r0, [pc, #304]	; (801606c <Check_forKyosanCMD+0x290>)
 8015f3c:	f00f fa10 	bl	8025360 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_NEG\n");
 8015f40:	484e      	ldr	r0, [pc, #312]	; (801607c <Check_forKyosanCMD+0x2a0>)
 8015f42:	f00f faa9 	bl	8025498 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8015f46:	4b4b      	ldr	r3, [pc, #300]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f48:	2200      	movs	r2, #0
 8015f4a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8015f4c:	4b49      	ldr	r3, [pc, #292]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	f043 0302 	orr.w	r3, r3, #2
 8015f54:	4a47      	ldr	r2, [pc, #284]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f56:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015f5e:	e065      	b.n	801602c <Check_forKyosanCMD+0x250>

			case FOUR:
				printf("Received %s\n",KyosanCommands_List[FOUR]);
 8015f60:	4947      	ldr	r1, [pc, #284]	; (8016080 <Check_forKyosanCMD+0x2a4>)
 8015f62:	4842      	ldr	r0, [pc, #264]	; (801606c <Check_forKyosanCMD+0x290>)
 8015f64:	f00f f9fc 	bl	8025360 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_POS\n");
 8015f68:	4846      	ldr	r0, [pc, #280]	; (8016084 <Check_forKyosanCMD+0x2a8>)
 8015f6a:	f00f fa95 	bl	8025498 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8015f6e:	4b41      	ldr	r3, [pc, #260]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f70:	2200      	movs	r2, #0
 8015f72:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8015f74:	4b3f      	ldr	r3, [pc, #252]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	f043 0304 	orr.w	r3, r3, #4
 8015f7c:	4a3d      	ldr	r2, [pc, #244]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f7e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015f80:	2301      	movs	r3, #1
 8015f82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015f86:	e051      	b.n	801602c <Check_forKyosanCMD+0x250>

			case FIVE:
				printf("Received %s\n",KyosanCommands_List[FIVE]);
 8015f88:	493f      	ldr	r1, [pc, #252]	; (8016088 <Check_forKyosanCMD+0x2ac>)
 8015f8a:	4838      	ldr	r0, [pc, #224]	; (801606c <Check_forKyosanCMD+0x290>)
 8015f8c:	f00f f9e8 	bl	8025360 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_NEG\n");
 8015f90:	483e      	ldr	r0, [pc, #248]	; (801608c <Check_forKyosanCMD+0x2b0>)
 8015f92:	f00f fa81 	bl	8025498 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8015f96:	4b37      	ldr	r3, [pc, #220]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f98:	2200      	movs	r2, #0
 8015f9a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8015f9c:	4b35      	ldr	r3, [pc, #212]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f043 0308 	orr.w	r3, r3, #8
 8015fa4:	4a33      	ldr	r2, [pc, #204]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015fa6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015fae:	e03d      	b.n	801602c <Check_forKyosanCMD+0x250>

			case SIX:
				printf("Received %s\n",KyosanCommands_List[SIX]);
 8015fb0:	4937      	ldr	r1, [pc, #220]	; (8016090 <Check_forKyosanCMD+0x2b4>)
 8015fb2:	482e      	ldr	r0, [pc, #184]	; (801606c <Check_forKyosanCMD+0x290>)
 8015fb4:	f00f f9d4 	bl	8025360 <iprintf>
				printf("COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA\n");
 8015fb8:	4836      	ldr	r0, [pc, #216]	; (8016094 <Check_forKyosanCMD+0x2b8>)
 8015fba:	f00f fa6d 	bl	8025498 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8015fbe:	4b2d      	ldr	r3, [pc, #180]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8015fc4:	4b2b      	ldr	r3, [pc, #172]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	f043 0310 	orr.w	r3, r3, #16
 8015fcc:	4a29      	ldr	r2, [pc, #164]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015fce:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8015fd0:	2301      	movs	r3, #1
 8015fd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015fd6:	e029      	b.n	801602c <Check_forKyosanCMD+0x250>
			case SEVEN:
				printf("Received %s\n",KyosanCommands_List[SEVEN]);
 8015fd8:	492f      	ldr	r1, [pc, #188]	; (8016098 <Check_forKyosanCMD+0x2bc>)
 8015fda:	4824      	ldr	r0, [pc, #144]	; (801606c <Check_forKyosanCMD+0x290>)
 8015fdc:	f00f f9c0 	bl	8025360 <iprintf>
				printf("CLEAR ALL\n");
 8015fe0:	482e      	ldr	r0, [pc, #184]	; (801609c <Check_forKyosanCMD+0x2c0>)
 8015fe2:	f00f fa59 	bl	8025498 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8015fe6:	4b23      	ldr	r3, [pc, #140]	; (8016074 <Check_forKyosanCMD+0x298>)
 8015fe8:	2200      	movs	r2, #0
 8015fea:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 8015fec:	2301      	movs	r3, #1
 8015fee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8015ff2:	e01b      	b.n	801602c <Check_forKyosanCMD+0x250>
			default:
				printf("Please Send Valid Command\n");
 8015ff4:	481b      	ldr	r0, [pc, #108]	; (8016064 <Check_forKyosanCMD+0x288>)
 8015ff6:	f00f fa4f 	bl	8025498 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8016000:	e00e      	b.n	8016020 <Check_forKyosanCMD+0x244>
				{
					printf("%s\n",KyosanCommands_List[i]);
 8016002:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8016006:	2232      	movs	r2, #50	; 0x32
 8016008:	fb02 f303 	mul.w	r3, r2, r3
 801600c:	4a24      	ldr	r2, [pc, #144]	; (80160a0 <Check_forKyosanCMD+0x2c4>)
 801600e:	4413      	add	r3, r2
 8016010:	4618      	mov	r0, r3
 8016012:	f00f fa41 	bl	8025498 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8016016:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801601a:	3301      	adds	r3, #1
 801601c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8016020:	4b20      	ldr	r3, [pc, #128]	; (80160a4 <Check_forKyosanCMD+0x2c8>)
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8016028:	429a      	cmp	r2, r3
 801602a:	d3ea      	bcc.n	8016002 <Check_forKyosanCMD+0x226>
				}
			}
		}

		if(IS_COMMAND_RECEIVED == YES)
 801602c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016030:	2b01      	cmp	r3, #1
 8016032:	d105      	bne.n	8016040 <Check_forKyosanCMD+0x264>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8016034:	f240 2005 	movw	r0, #517	; 0x205
 8016038:	f7fa fbd6 	bl	80107e8 <TransmitCanPkt>
 801603c:	e000      	b.n	8016040 <Check_forKyosanCMD+0x264>
		return;
 801603e:	bf00      	nop
		}
	}
}
 8016040:	3768      	adds	r7, #104	; 0x68
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	2000ad68 	.word	0x2000ad68
 801604c:	0802a20c 	.word	0x0802a20c
 8016050:	200009b4 	.word	0x200009b4
 8016054:	0802a224 	.word	0x0802a224
 8016058:	2000a30a 	.word	0x2000a30a
 801605c:	0802a264 	.word	0x0802a264
 8016060:	200009b5 	.word	0x200009b5
 8016064:	0802a278 	.word	0x0802a278
 8016068:	2000a33c 	.word	0x2000a33c
 801606c:	0802a294 	.word	0x0802a294
 8016070:	0802a2a4 	.word	0x0802a2a4
 8016074:	2000a170 	.word	0x2000a170
 8016078:	2000a36e 	.word	0x2000a36e
 801607c:	0802a2c0 	.word	0x0802a2c0
 8016080:	2000a3a0 	.word	0x2000a3a0
 8016084:	0802a2dc 	.word	0x0802a2dc
 8016088:	2000a3d2 	.word	0x2000a3d2
 801608c:	0802a2f8 	.word	0x0802a2f8
 8016090:	2000a404 	.word	0x2000a404
 8016094:	0802a314 	.word	0x0802a314
 8016098:	2000a436 	.word	0x2000a436
 801609c:	0802a340 	.word	0x0802a340
 80160a0:	2000a2d8 	.word	0x2000a2d8
 80160a4:	2000a6c0 	.word	0x2000a6c0

080160a8 <Update_KyosanCommands>:


void Update_KyosanCommands(void)
{
 80160a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160aa:	b083      	sub	sp, #12
 80160ac:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80160ae:	2300      	movs	r3, #0
 80160b0:	71fb      	strb	r3, [r7, #7]

	KyosanCommands_List[CmdCnt][0] = 0X24;
 80160b2:	79fb      	ldrb	r3, [r7, #7]
 80160b4:	4a78      	ldr	r2, [pc, #480]	; (8016298 <Update_KyosanCommands+0x1f0>)
 80160b6:	2132      	movs	r1, #50	; 0x32
 80160b8:	fb01 f303 	mul.w	r3, r1, r3
 80160bc:	4413      	add	r3, r2
 80160be:	2224      	movs	r2, #36	; 0x24
 80160c0:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][1] = 0X01;
 80160c2:	79fb      	ldrb	r3, [r7, #7]
 80160c4:	4a74      	ldr	r2, [pc, #464]	; (8016298 <Update_KyosanCommands+0x1f0>)
 80160c6:	2132      	movs	r1, #50	; 0x32
 80160c8:	fb01 f303 	mul.w	r3, r1, r3
 80160cc:	4413      	add	r3, r2
 80160ce:	3301      	adds	r3, #1
 80160d0:	2201      	movs	r2, #1
 80160d2:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][2] = 0X30;
 80160d4:	79fb      	ldrb	r3, [r7, #7]
 80160d6:	4a70      	ldr	r2, [pc, #448]	; (8016298 <Update_KyosanCommands+0x1f0>)
 80160d8:	2132      	movs	r1, #50	; 0x32
 80160da:	fb01 f303 	mul.w	r3, r1, r3
 80160de:	4413      	add	r3, r2
 80160e0:	3302      	adds	r3, #2
 80160e2:	2230      	movs	r2, #48	; 0x30
 80160e4:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][3] = 0X40;
 80160e6:	79fb      	ldrb	r3, [r7, #7]
 80160e8:	4a6b      	ldr	r2, [pc, #428]	; (8016298 <Update_KyosanCommands+0x1f0>)
 80160ea:	2132      	movs	r1, #50	; 0x32
 80160ec:	fb01 f303 	mul.w	r3, r1, r3
 80160f0:	4413      	add	r3, r2
 80160f2:	3303      	adds	r3, #3
 80160f4:	2240      	movs	r2, #64	; 0x40
 80160f6:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][4] = 0XC0;
 80160f8:	79fb      	ldrb	r3, [r7, #7]
 80160fa:	4a67      	ldr	r2, [pc, #412]	; (8016298 <Update_KyosanCommands+0x1f0>)
 80160fc:	2132      	movs	r1, #50	; 0x32
 80160fe:	fb01 f303 	mul.w	r3, r1, r3
 8016102:	4413      	add	r3, r2
 8016104:	3304      	adds	r3, #4
 8016106:	22c0      	movs	r2, #192	; 0xc0
 8016108:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][5] = 0X4E;
 801610a:	79fb      	ldrb	r3, [r7, #7]
 801610c:	4a62      	ldr	r2, [pc, #392]	; (8016298 <Update_KyosanCommands+0x1f0>)
 801610e:	2132      	movs	r1, #50	; 0x32
 8016110:	fb01 f303 	mul.w	r3, r1, r3
 8016114:	4413      	add	r3, r2
 8016116:	3305      	adds	r3, #5
 8016118:	224e      	movs	r2, #78	; 0x4e
 801611a:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][6] = 0X26;
 801611c:	79fb      	ldrb	r3, [r7, #7]
 801611e:	4a5e      	ldr	r2, [pc, #376]	; (8016298 <Update_KyosanCommands+0x1f0>)
 8016120:	2132      	movs	r1, #50	; 0x32
 8016122:	fb01 f303 	mul.w	r3, r1, r3
 8016126:	4413      	add	r3, r2
 8016128:	3306      	adds	r3, #6
 801612a:	2226      	movs	r2, #38	; 0x26
 801612c:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 801612e:	79fb      	ldrb	r3, [r7, #7]
 8016130:	3301      	adds	r3, #1
 8016132:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8016134:	79fb      	ldrb	r3, [r7, #7]
 8016136:	1c5a      	adds	r2, r3, #1
 8016138:	71fa      	strb	r2, [r7, #7]
 801613a:	461a      	mov	r2, r3
 801613c:	2332      	movs	r3, #50	; 0x32
 801613e:	fb02 f303 	mul.w	r3, r2, r3
 8016142:	4a55      	ldr	r2, [pc, #340]	; (8016298 <Update_KyosanCommands+0x1f0>)
 8016144:	4413      	add	r3, r2
 8016146:	4955      	ldr	r1, [pc, #340]	; (801629c <Update_KyosanCommands+0x1f4>)
 8016148:	461a      	mov	r2, r3
 801614a:	460b      	mov	r3, r1
 801614c:	cb03      	ldmia	r3!, {r0, r1}
 801614e:	6010      	str	r0, [r2, #0]
 8016150:	6051      	str	r1, [r2, #4]
 8016152:	8819      	ldrh	r1, [r3, #0]
 8016154:	789b      	ldrb	r3, [r3, #2]
 8016156:	8111      	strh	r1, [r2, #8]
 8016158:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_POS");
 801615a:	79fb      	ldrb	r3, [r7, #7]
 801615c:	1c5a      	adds	r2, r3, #1
 801615e:	71fa      	strb	r2, [r7, #7]
 8016160:	461a      	mov	r2, r3
 8016162:	2332      	movs	r3, #50	; 0x32
 8016164:	fb02 f303 	mul.w	r3, r2, r3
 8016168:	4a4b      	ldr	r2, [pc, #300]	; (8016298 <Update_KyosanCommands+0x1f0>)
 801616a:	4413      	add	r3, r2
 801616c:	4a4c      	ldr	r2, [pc, #304]	; (80162a0 <Update_KyosanCommands+0x1f8>)
 801616e:	461d      	mov	r5, r3
 8016170:	4614      	mov	r4, r2
 8016172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016174:	6028      	str	r0, [r5, #0]
 8016176:	6069      	str	r1, [r5, #4]
 8016178:	60aa      	str	r2, [r5, #8]
 801617a:	60eb      	str	r3, [r5, #12]
 801617c:	cc03      	ldmia	r4!, {r0, r1}
 801617e:	6128      	str	r0, [r5, #16]
 8016180:	6169      	str	r1, [r5, #20]
 8016182:	8823      	ldrh	r3, [r4, #0]
 8016184:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_NEG");
 8016186:	79fb      	ldrb	r3, [r7, #7]
 8016188:	1c5a      	adds	r2, r3, #1
 801618a:	71fa      	strb	r2, [r7, #7]
 801618c:	461a      	mov	r2, r3
 801618e:	2332      	movs	r3, #50	; 0x32
 8016190:	fb02 f303 	mul.w	r3, r2, r3
 8016194:	4a40      	ldr	r2, [pc, #256]	; (8016298 <Update_KyosanCommands+0x1f0>)
 8016196:	4413      	add	r3, r2
 8016198:	4a42      	ldr	r2, [pc, #264]	; (80162a4 <Update_KyosanCommands+0x1fc>)
 801619a:	461d      	mov	r5, r3
 801619c:	4614      	mov	r4, r2
 801619e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161a0:	6028      	str	r0, [r5, #0]
 80161a2:	6069      	str	r1, [r5, #4]
 80161a4:	60aa      	str	r2, [r5, #8]
 80161a6:	60eb      	str	r3, [r5, #12]
 80161a8:	cc03      	ldmia	r4!, {r0, r1}
 80161aa:	6128      	str	r0, [r5, #16]
 80161ac:	6169      	str	r1, [r5, #20]
 80161ae:	8823      	ldrh	r3, [r4, #0]
 80161b0:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_POS");
 80161b2:	79fb      	ldrb	r3, [r7, #7]
 80161b4:	1c5a      	adds	r2, r3, #1
 80161b6:	71fa      	strb	r2, [r7, #7]
 80161b8:	461a      	mov	r2, r3
 80161ba:	2332      	movs	r3, #50	; 0x32
 80161bc:	fb02 f303 	mul.w	r3, r2, r3
 80161c0:	4a35      	ldr	r2, [pc, #212]	; (8016298 <Update_KyosanCommands+0x1f0>)
 80161c2:	4413      	add	r3, r2
 80161c4:	4a38      	ldr	r2, [pc, #224]	; (80162a8 <Update_KyosanCommands+0x200>)
 80161c6:	461d      	mov	r5, r3
 80161c8:	4614      	mov	r4, r2
 80161ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161cc:	6028      	str	r0, [r5, #0]
 80161ce:	6069      	str	r1, [r5, #4]
 80161d0:	60aa      	str	r2, [r5, #8]
 80161d2:	60eb      	str	r3, [r5, #12]
 80161d4:	cc03      	ldmia	r4!, {r0, r1}
 80161d6:	6128      	str	r0, [r5, #16]
 80161d8:	6169      	str	r1, [r5, #20]
 80161da:	8823      	ldrh	r3, [r4, #0]
 80161dc:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_NEG");
 80161de:	79fb      	ldrb	r3, [r7, #7]
 80161e0:	1c5a      	adds	r2, r3, #1
 80161e2:	71fa      	strb	r2, [r7, #7]
 80161e4:	461a      	mov	r2, r3
 80161e6:	2332      	movs	r3, #50	; 0x32
 80161e8:	fb02 f303 	mul.w	r3, r2, r3
 80161ec:	4a2a      	ldr	r2, [pc, #168]	; (8016298 <Update_KyosanCommands+0x1f0>)
 80161ee:	4413      	add	r3, r2
 80161f0:	4a2e      	ldr	r2, [pc, #184]	; (80162ac <Update_KyosanCommands+0x204>)
 80161f2:	461d      	mov	r5, r3
 80161f4:	4614      	mov	r4, r2
 80161f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161f8:	6028      	str	r0, [r5, #0]
 80161fa:	6069      	str	r1, [r5, #4]
 80161fc:	60aa      	str	r2, [r5, #8]
 80161fe:	60eb      	str	r3, [r5, #12]
 8016200:	cc03      	ldmia	r4!, {r0, r1}
 8016202:	6128      	str	r0, [r5, #16]
 8016204:	6169      	str	r1, [r5, #20]
 8016206:	8823      	ldrh	r3, [r4, #0]
 8016208:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA");
 801620a:	79fb      	ldrb	r3, [r7, #7]
 801620c:	1c5a      	adds	r2, r3, #1
 801620e:	71fa      	strb	r2, [r7, #7]
 8016210:	461a      	mov	r2, r3
 8016212:	2332      	movs	r3, #50	; 0x32
 8016214:	fb02 f303 	mul.w	r3, r2, r3
 8016218:	4a1f      	ldr	r2, [pc, #124]	; (8016298 <Update_KyosanCommands+0x1f0>)
 801621a:	4413      	add	r3, r2
 801621c:	4a24      	ldr	r2, [pc, #144]	; (80162b0 <Update_KyosanCommands+0x208>)
 801621e:	4614      	mov	r4, r2
 8016220:	469c      	mov	ip, r3
 8016222:	f104 0e20 	add.w	lr, r4, #32
 8016226:	4665      	mov	r5, ip
 8016228:	4626      	mov	r6, r4
 801622a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801622c:	6028      	str	r0, [r5, #0]
 801622e:	6069      	str	r1, [r5, #4]
 8016230:	60aa      	str	r2, [r5, #8]
 8016232:	60eb      	str	r3, [r5, #12]
 8016234:	3410      	adds	r4, #16
 8016236:	f10c 0c10 	add.w	ip, ip, #16
 801623a:	4574      	cmp	r4, lr
 801623c:	d1f3      	bne.n	8016226 <Update_KyosanCommands+0x17e>
 801623e:	4662      	mov	r2, ip
 8016240:	4623      	mov	r3, r4
 8016242:	cb03      	ldmia	r3!, {r0, r1}
 8016244:	6010      	str	r0, [r2, #0]
 8016246:	6051      	str	r1, [r2, #4]
 8016248:	881b      	ldrh	r3, [r3, #0]
 801624a:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 801624c:	79fb      	ldrb	r3, [r7, #7]
 801624e:	1c5a      	adds	r2, r3, #1
 8016250:	71fa      	strb	r2, [r7, #7]
 8016252:	461a      	mov	r2, r3
 8016254:	2332      	movs	r3, #50	; 0x32
 8016256:	fb02 f303 	mul.w	r3, r2, r3
 801625a:	4a0f      	ldr	r2, [pc, #60]	; (8016298 <Update_KyosanCommands+0x1f0>)
 801625c:	4413      	add	r3, r2
 801625e:	4915      	ldr	r1, [pc, #84]	; (80162b4 <Update_KyosanCommands+0x20c>)
 8016260:	461a      	mov	r2, r3
 8016262:	460b      	mov	r3, r1
 8016264:	cb03      	ldmia	r3!, {r0, r1}
 8016266:	6010      	str	r0, [r2, #0]
 8016268:	6051      	str	r1, [r2, #4]
 801626a:	881b      	ldrh	r3, [r3, #0]
 801626c:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"HELP");
 801626e:	79fb      	ldrb	r3, [r7, #7]
 8016270:	1c5a      	adds	r2, r3, #1
 8016272:	71fa      	strb	r2, [r7, #7]
 8016274:	461a      	mov	r2, r3
 8016276:	2332      	movs	r3, #50	; 0x32
 8016278:	fb02 f303 	mul.w	r3, r2, r3
 801627c:	4a06      	ldr	r2, [pc, #24]	; (8016298 <Update_KyosanCommands+0x1f0>)
 801627e:	4413      	add	r3, r2
 8016280:	4a0d      	ldr	r2, [pc, #52]	; (80162b8 <Update_KyosanCommands+0x210>)
 8016282:	6810      	ldr	r0, [r2, #0]
 8016284:	6018      	str	r0, [r3, #0]
 8016286:	7912      	ldrb	r2, [r2, #4]
 8016288:	711a      	strb	r2, [r3, #4]
	KyosanCommands_Count =  CmdCnt;
 801628a:	4a0c      	ldr	r2, [pc, #48]	; (80162bc <Update_KyosanCommands+0x214>)
 801628c:	79fb      	ldrb	r3, [r7, #7]
 801628e:	7013      	strb	r3, [r2, #0]
}
 8016290:	bf00      	nop
 8016292:	370c      	adds	r7, #12
 8016294:	46bd      	mov	sp, r7
 8016296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016298:	2000a2d8 	.word	0x2000a2d8
 801629c:	0802a34c 	.word	0x0802a34c
 80162a0:	0802a2a4 	.word	0x0802a2a4
 80162a4:	0802a2c0 	.word	0x0802a2c0
 80162a8:	0802a2dc 	.word	0x0802a2dc
 80162ac:	0802a2f8 	.word	0x0802a2f8
 80162b0:	0802a314 	.word	0x0802a314
 80162b4:	0802a358 	.word	0x0802a358
 80162b8:	0802a364 	.word	0x0802a364
 80162bc:	2000a6c0 	.word	0x2000a6c0

080162c0 <Is_KyosanCommand_Valid>:

uint8_t Is_KyosanCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 80162c0:	b590      	push	{r4, r7, lr}
 80162c2:	b085      	sub	sp, #20
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
 80162c8:	460b      	mov	r3, r1
 80162ca:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 80162cc:	2300      	movs	r3, #0
 80162ce:	73fb      	strb	r3, [r7, #15]
 80162d0:	e01c      	b.n	801630c <Is_KyosanCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)KyosanCommands_List[Traverser]) != NULL)
		if(memcmp(Buffer,KyosanCommands_List[Traverser],strlen((char *)KyosanCommands_List[Traverser])) == 0)
 80162d2:	7bfb      	ldrb	r3, [r7, #15]
 80162d4:	2232      	movs	r2, #50	; 0x32
 80162d6:	fb02 f303 	mul.w	r3, r2, r3
 80162da:	4a11      	ldr	r2, [pc, #68]	; (8016320 <Is_KyosanCommand_Valid+0x60>)
 80162dc:	189c      	adds	r4, r3, r2
 80162de:	7bfb      	ldrb	r3, [r7, #15]
 80162e0:	2232      	movs	r2, #50	; 0x32
 80162e2:	fb02 f303 	mul.w	r3, r2, r3
 80162e6:	4a0e      	ldr	r2, [pc, #56]	; (8016320 <Is_KyosanCommand_Valid+0x60>)
 80162e8:	4413      	add	r3, r2
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7e9 ffb2 	bl	8000254 <strlen>
 80162f0:	4603      	mov	r3, r0
 80162f2:	461a      	mov	r2, r3
 80162f4:	4621      	mov	r1, r4
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f00e ff12 	bl	8025120 <memcmp>
 80162fc:	4603      	mov	r3, r0
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d101      	bne.n	8016306 <Is_KyosanCommand_Valid+0x46>
		{
			return Traverser;
 8016302:	7bfb      	ldrb	r3, [r7, #15]
 8016304:	e008      	b.n	8016318 <Is_KyosanCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8016306:	7bfb      	ldrb	r3, [r7, #15]
 8016308:	3301      	adds	r3, #1
 801630a:	73fb      	strb	r3, [r7, #15]
 801630c:	4b05      	ldr	r3, [pc, #20]	; (8016324 <Is_KyosanCommand_Valid+0x64>)
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	7bfa      	ldrb	r2, [r7, #15]
 8016312:	429a      	cmp	r2, r3
 8016314:	d3dd      	bcc.n	80162d2 <Is_KyosanCommand_Valid+0x12>
		}
	}
	return 255;
 8016316:	23ff      	movs	r3, #255	; 0xff
}
 8016318:	4618      	mov	r0, r3
 801631a:	3714      	adds	r7, #20
 801631c:	46bd      	mov	sp, r7
 801631e:	bd90      	pop	{r4, r7, pc}
 8016320:	2000a2d8 	.word	0x2000a2d8
 8016324:	2000a6c0 	.word	0x2000a6c0

08016328 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8016328:	b480      	push	{r7}
 801632a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801632c:	f3bf 8f4f 	dsb	sy
}
 8016330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016332:	f3bf 8f6f 	isb	sy
}
 8016336:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8016338:	4b0d      	ldr	r3, [pc, #52]	; (8016370 <SCB_EnableICache+0x48>)
 801633a:	2200      	movs	r2, #0
 801633c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8016340:	f3bf 8f4f 	dsb	sy
}
 8016344:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016346:	f3bf 8f6f 	isb	sy
}
 801634a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801634c:	4b08      	ldr	r3, [pc, #32]	; (8016370 <SCB_EnableICache+0x48>)
 801634e:	695b      	ldr	r3, [r3, #20]
 8016350:	4a07      	ldr	r2, [pc, #28]	; (8016370 <SCB_EnableICache+0x48>)
 8016352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016356:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8016358:	f3bf 8f4f 	dsb	sy
}
 801635c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801635e:	f3bf 8f6f 	isb	sy
}
 8016362:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8016364:	bf00      	nop
 8016366:	46bd      	mov	sp, r7
 8016368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636c:	4770      	bx	lr
 801636e:	bf00      	nop
 8016370:	e000ed00 	.word	0xe000ed00

08016374 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8016374:	b480      	push	{r7}
 8016376:	b085      	sub	sp, #20
 8016378:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801637a:	4b1f      	ldr	r3, [pc, #124]	; (80163f8 <SCB_EnableDCache+0x84>)
 801637c:	2200      	movs	r2, #0
 801637e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8016382:	f3bf 8f4f 	dsb	sy
}
 8016386:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8016388:	4b1b      	ldr	r3, [pc, #108]	; (80163f8 <SCB_EnableDCache+0x84>)
 801638a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801638e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	0b5b      	lsrs	r3, r3, #13
 8016394:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016398:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	08db      	lsrs	r3, r3, #3
 801639e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80163a2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	015a      	lsls	r2, r3, #5
 80163a8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80163ac:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80163ae:	68ba      	ldr	r2, [r7, #8]
 80163b0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80163b2:	4911      	ldr	r1, [pc, #68]	; (80163f8 <SCB_EnableDCache+0x84>)
 80163b4:	4313      	orrs	r3, r2
 80163b6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	1e5a      	subs	r2, r3, #1
 80163be:	60ba      	str	r2, [r7, #8]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d1ef      	bne.n	80163a4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	1e5a      	subs	r2, r3, #1
 80163c8:	60fa      	str	r2, [r7, #12]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1e5      	bne.n	801639a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80163ce:	f3bf 8f4f 	dsb	sy
}
 80163d2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80163d4:	4b08      	ldr	r3, [pc, #32]	; (80163f8 <SCB_EnableDCache+0x84>)
 80163d6:	695b      	ldr	r3, [r3, #20]
 80163d8:	4a07      	ldr	r2, [pc, #28]	; (80163f8 <SCB_EnableDCache+0x84>)
 80163da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80163de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80163e0:	f3bf 8f4f 	dsb	sy
}
 80163e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80163e6:	f3bf 8f6f 	isb	sy
}
 80163ea:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80163ec:	bf00      	nop
 80163ee:	3714      	adds	r7, #20
 80163f0:	46bd      	mov	sp, r7
 80163f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f6:	4770      	bx	lr
 80163f8:	e000ed00 	.word	0xe000ed00

080163fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b082      	sub	sp, #8
 8016400:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8016402:	2300      	movs	r3, #0
 8016404:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8016406:	f000 f9b7 	bl	8016778 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 801640a:	f7ff ff8d 	bl	8016328 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 801640e:	f7ff ffb1 	bl	8016374 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8016412:	f001 ff3b 	bl	801828c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8016416:	f000 f8e9 	bl	80165ec <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 801641a:	f7f3 fe0f 	bl	800a03c <reset_cause_get>
 801641e:	4603      	mov	r3, r0
 8016420:	4618      	mov	r0, r3
 8016422:	f7f3 fe5d 	bl	800a0e0 <reset_cause_get_name>
 8016426:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8016428:	f7fe fade 	bl	80149e8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 801642c:	f001 f942 	bl	80176b4 <MX_USART1_UART_Init>
	Get_Slot();
 8016430:	f7ea fb4c 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8016434:	f7fa f84e 	bl	80104d4 <MX_CAN2_Init>
	MX_CAN3_Init();
 8016438:	f7fa f8c4 	bl	80105c4 <MX_CAN3_Init>
	MX_I2C1_Init();
 801643c:	f7fe fd04 	bl	8014e48 <MX_I2C1_Init>
	MX_I2C2_Init();
 8016440:	f7fe fd42 	bl	8014ec8 <MX_I2C2_Init>
	MX_SPI1_Init();
 8016444:	f000 fa28 	bl	8016898 <MX_SPI1_Init>
	printf("\r\r\r\r");
 8016448:	485a      	ldr	r0, [pc, #360]	; (80165b4 <main+0x1b8>)
 801644a:	f00e ff89 	bl	8025360 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 801644e:	485a      	ldr	r0, [pc, #360]	; (80165b8 <main+0x1bc>)
 8016450:	f00f f822 	bl	8025498 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8016454:	6879      	ldr	r1, [r7, #4]
 8016456:	4859      	ldr	r0, [pc, #356]	; (80165bc <main+0x1c0>)
 8016458:	f00e ff82 	bl	8025360 <iprintf>
	Get_Build_Details();
 801645c:	f000 f930 	bl	80166c0 <Get_Build_Details>
	Get_Config();
 8016460:	f000 fd86 	bl	8016f70 <Get_Config>
	MX_RNG_Init();
 8016464:	f000 f9ba 	bl	80167dc <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8016468:	2208      	movs	r2, #8
 801646a:	2100      	movs	r1, #0
 801646c:	4854      	ldr	r0, [pc, #336]	; (80165c0 <main+0x1c4>)
 801646e:	f00e fe8f 	bl	8025190 <memset>
	HAL_Delay(250);
 8016472:	20fa      	movs	r0, #250	; 0xfa
 8016474:	f001 ff76 	bl	8018364 <HAL_Delay>


	switch(EI_data.ProtocolType)
 8016478:	4b52      	ldr	r3, [pc, #328]	; (80165c4 <main+0x1c8>)
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	3b01      	subs	r3, #1
 801647e:	2b03      	cmp	r3, #3
 8016480:	d86b      	bhi.n	801655a <main+0x15e>
 8016482:	a201      	add	r2, pc, #4	; (adr r2, 8016488 <main+0x8c>)
 8016484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016488:	08016499 	.word	0x08016499
 801648c:	080164ef 	.word	0x080164ef
 8016490:	08016517 	.word	0x08016517
 8016494:	08016547 	.word	0x08016547
	{
	case HITACHI:
		print_self_Details_Hitachi();
 8016498:	f7f2 fbf6 	bl	8008c88 <print_self_Details_Hitachi>
		ReAssignData();
 801649c:	f7f3 f978 	bl	8009790 <ReAssignData>
		Update_HitachiCommands();
 80164a0:	f7ea fa00 	bl	80008a4 <Update_HitachiCommands>
		printf("Protocol Selected is HITACHI\n");
 80164a4:	4848      	ldr	r0, [pc, #288]	; (80165c8 <main+0x1cc>)
 80164a6:	f00e fff7 	bl	8025498 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 80164aa:	4848      	ldr	r0, [pc, #288]	; (80165cc <main+0x1d0>)
 80164ac:	f00e fff4 	bl	8025498 <puts>
		MX_LWIP_Init();
 80164b0:	f009 f876 	bl	801f5a0 <MX_LWIP_Init>
		udpServer_init();
 80164b4:	f7f9 fbf4 	bl	800fca0 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 80164b8:	4845      	ldr	r0, [pc, #276]	; (80165d0 <main+0x1d4>)
 80164ba:	f00e ffed 	bl	8025498 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort >= 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 80164be:	4b41      	ldr	r3, [pc, #260]	; (80165c4 <main+0x1c8>)
 80164c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d04c      	beq.n	8016562 <main+0x166>
 80164c8:	4b3e      	ldr	r3, [pc, #248]	; (80165c4 <main+0x1c8>)
 80164ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d047      	beq.n	8016562 <main+0x166>
		{
			printf("Initializing UART with BaudRate:%lu\n",EI_data.Hitachi_st.BaudRate);
 80164d2:	4b3c      	ldr	r3, [pc, #240]	; (80165c4 <main+0x1c8>)
 80164d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80164d8:	4619      	mov	r1, r3
 80164da:	483e      	ldr	r0, [pc, #248]	; (80165d4 <main+0x1d8>)
 80164dc:	f00e ff40 	bl	8025360 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 80164e0:	4b38      	ldr	r3, [pc, #224]	; (80165c4 <main+0x1c8>)
 80164e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80164e6:	4618      	mov	r0, r3
 80164e8:	f001 fa92 	bl	8017a10 <UART4_Init>
		}

#if ENABLE_SIGNAL_PRINT
		UpdateSIGNALSNamesHitachi();
#endif
		break;
 80164ec:	e039      	b.n	8016562 <main+0x166>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 80164ee:	483a      	ldr	r0, [pc, #232]	; (80165d8 <main+0x1dc>)
 80164f0:	f00e ffd2 	bl	8025498 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 80164f4:	4835      	ldr	r0, [pc, #212]	; (80165cc <main+0x1d0>)
 80164f6:	f00e ffcf 	bl	8025498 <puts>
		MX_LWIP_Init();
 80164fa:	f009 f851 	bl	801f5a0 <MX_LWIP_Init>
		udpServer_init();
 80164fe:	f7f9 fbcf 	bl	800fca0 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8016502:	4833      	ldr	r0, [pc, #204]	; (80165d0 <main+0x1d4>)
 8016504:	f00e ffc8 	bl	8025498 <puts>
		print_self_DetailsSiemens();
 8016508:	f7f9 faa6 	bl	800fa58 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 801650c:	f7f7 ffb0 	bl	800e470 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8016510:	f7f8 fdc4 	bl	800f09c <UpdateSIGNALSNames>
		break;
 8016514:	e026      	b.n	8016564 <main+0x168>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8016516:	4831      	ldr	r0, [pc, #196]	; (80165dc <main+0x1e0>)
 8016518:	f00e ffbe 	bl	8025498 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 801651c:	4b29      	ldr	r3, [pc, #164]	; (80165c4 <main+0x1c8>)
 801651e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8016522:	2b00      	cmp	r3, #0
 8016524:	d006      	beq.n	8016534 <main+0x138>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8016526:	4b27      	ldr	r3, [pc, #156]	; (80165c4 <main+0x1c8>)
 8016528:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801652c:	4618      	mov	r0, r3
 801652e:	f001 fa6f 	bl	8017a10 <UART4_Init>
 8016532:	e003      	b.n	801653c <main+0x140>
		}
		else
		{
			UART4_Init(115200);
 8016534:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8016538:	f001 fa6a 	bl	8017a10 <UART4_Init>
		}
		Update_MedhaCommands();
 801653c:	f7f5 fa70 	bl	800ba20 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8016540:	f7f5 f82e 	bl	800b5a0 <Print_Medha_Self_Details>
		break;
 8016544:	e00e      	b.n	8016564 <main+0x168>

	case KYOSAN:
		printf("Protocol Selected is KYOSAN\n");
 8016546:	4826      	ldr	r0, [pc, #152]	; (80165e0 <main+0x1e4>)
 8016548:	f00e ffa6 	bl	8025498 <puts>
		UART4_Init(9600);
 801654c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8016550:	f001 fa5e 	bl	8017a10 <UART4_Init>
//		Update_KyosanStructure();
//		UpdateSIGNALSNamesKyosan();
		Update_KyosanCommands();
 8016554:	f7ff fda8 	bl	80160a8 <Update_KyosanCommands>
		break;
 8016558:	e004      	b.n	8016564 <main+0x168>

	default:
		printf("Please Select Protocol Type\n");
 801655a:	4822      	ldr	r0, [pc, #136]	; (80165e4 <main+0x1e8>)
 801655c:	f00e ff9c 	bl	8025498 <puts>
		while(1);
 8016560:	e7fe      	b.n	8016560 <main+0x164>
		break;
 8016562:	bf00      	nop
	}


	printf("Initialization Success\n");
 8016564:	4820      	ldr	r0, [pc, #128]	; (80165e8 <main+0x1ec>)
 8016566:	f00e ff97 	bl	8025498 <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 801656a:	f7fe fd95 	bl	8015098 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 801656e:	4b15      	ldr	r3, [pc, #84]	; (80165c4 <main+0x1c8>)
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	3b01      	subs	r3, #1
 8016574:	2b03      	cmp	r3, #3
 8016576:	d817      	bhi.n	80165a8 <main+0x1ac>
 8016578:	a201      	add	r2, pc, #4	; (adr r2, 8016580 <main+0x184>)
 801657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801657e:	bf00      	nop
 8016580:	08016591 	.word	0x08016591
 8016584:	08016597 	.word	0x08016597
 8016588:	0801659d 	.word	0x0801659d
 801658c:	080165a3 	.word	0x080165a3
		{
		case HITACHI:
			Process_HitachiEI();
 8016590:	f7f3 f8be 	bl	8009710 <Process_HitachiEI>
			break;
 8016594:	e00c      	b.n	80165b0 <main+0x1b4>

		case SIEMENS:
			Process_SiemensEI();
 8016596:	f7f5 ff69 	bl	800c46c <Process_SiemensEI>
			break;
 801659a:	e009      	b.n	80165b0 <main+0x1b4>

		case MEDHA:
			Process_Medha_EI();
 801659c:	f7f3 fdf0 	bl	800a180 <Process_Medha_EI>
			break;
 80165a0:	e006      	b.n	80165b0 <main+0x1b4>
		case KYOSAN:
			//Print_Medha_Self_Details();
			//Process_Medha_EI();
			//		break;

			Process_Kyosan_EI();
 80165a2:	f7fe fd97 	bl	80150d4 <Process_Kyosan_EI>
			break;
 80165a6:	e003      	b.n	80165b0 <main+0x1b4>
//			while(Com_DataReady(3))
//			printf("0x%02x ",Com_Get_Byte(3));
//			}

		default:
			printf("Please Select Protocol Type\n");
 80165a8:	480e      	ldr	r0, [pc, #56]	; (80165e4 <main+0x1e8>)
 80165aa:	f00e ff75 	bl	8025498 <puts>
			while(1);
 80165ae:	e7fe      	b.n	80165ae <main+0x1b2>
		switch(EI_data.ProtocolType)
 80165b0:	e7dd      	b.n	801656e <main+0x172>
 80165b2:	bf00      	nop
 80165b4:	0802a36c 	.word	0x0802a36c
 80165b8:	0802a374 	.word	0x0802a374
 80165bc:	0802a3c4 	.word	0x0802a3c4
 80165c0:	20001d88 	.word	0x20001d88
 80165c4:	20000304 	.word	0x20000304
 80165c8:	0802a3e0 	.word	0x0802a3e0
 80165cc:	0802a400 	.word	0x0802a400
 80165d0:	0802a428 	.word	0x0802a428
 80165d4:	0802a444 	.word	0x0802a444
 80165d8:	0802a46c 	.word	0x0802a46c
 80165dc:	0802a48c 	.word	0x0802a48c
 80165e0:	0802a4a8 	.word	0x0802a4a8
 80165e4:	0802a4c4 	.word	0x0802a4c4
 80165e8:	0802a4e0 	.word	0x0802a4e0

080165ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b094      	sub	sp, #80	; 0x50
 80165f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80165f2:	f107 031c 	add.w	r3, r7, #28
 80165f6:	2234      	movs	r2, #52	; 0x34
 80165f8:	2100      	movs	r1, #0
 80165fa:	4618      	mov	r0, r3
 80165fc:	f00e fdc8 	bl	8025190 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016600:	f107 0308 	add.w	r3, r7, #8
 8016604:	2200      	movs	r2, #0
 8016606:	601a      	str	r2, [r3, #0]
 8016608:	605a      	str	r2, [r3, #4]
 801660a:	609a      	str	r2, [r3, #8]
 801660c:	60da      	str	r2, [r3, #12]
 801660e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8016610:	4b29      	ldr	r3, [pc, #164]	; (80166b8 <SystemClock_Config+0xcc>)
 8016612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016614:	4a28      	ldr	r2, [pc, #160]	; (80166b8 <SystemClock_Config+0xcc>)
 8016616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801661a:	6413      	str	r3, [r2, #64]	; 0x40
 801661c:	4b26      	ldr	r3, [pc, #152]	; (80166b8 <SystemClock_Config+0xcc>)
 801661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016624:	607b      	str	r3, [r7, #4]
 8016626:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8016628:	4b24      	ldr	r3, [pc, #144]	; (80166bc <SystemClock_Config+0xd0>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	4a23      	ldr	r2, [pc, #140]	; (80166bc <SystemClock_Config+0xd0>)
 801662e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016632:	6013      	str	r3, [r2, #0]
 8016634:	4b21      	ldr	r3, [pc, #132]	; (80166bc <SystemClock_Config+0xd0>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801663c:	603b      	str	r3, [r7, #0]
 801663e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8016640:	2309      	movs	r3, #9
 8016642:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8016644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8016648:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801664a:	2301      	movs	r3, #1
 801664c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801664e:	2302      	movs	r3, #2
 8016650:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8016652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016656:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8016658:	2306      	movs	r3, #6
 801665a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 801665c:	23b4      	movs	r3, #180	; 0xb4
 801665e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016660:	2302      	movs	r3, #2
 8016662:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8016664:	2308      	movs	r3, #8
 8016666:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8016668:	2302      	movs	r3, #2
 801666a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801666c:	f107 031c 	add.w	r3, r7, #28
 8016670:	4618      	mov	r0, r3
 8016672:	f005 f9e1 	bl	801ba38 <HAL_RCC_OscConfig>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d001      	beq.n	8016680 <SystemClock_Config+0x94>
	{
		Error_Handler();
 801667c:	f000 f8a8 	bl	80167d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016680:	230f      	movs	r3, #15
 8016682:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016684:	2302      	movs	r3, #2
 8016686:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016688:	2300      	movs	r3, #0
 801668a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801668c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016690:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016696:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016698:	f107 0308 	add.w	r3, r7, #8
 801669c:	2105      	movs	r1, #5
 801669e:	4618      	mov	r0, r3
 80166a0:	f005 fc78 	bl	801bf94 <HAL_RCC_ClockConfig>
 80166a4:	4603      	mov	r3, r0
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d001      	beq.n	80166ae <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80166aa:	f000 f891 	bl	80167d0 <Error_Handler>
	}
}
 80166ae:	bf00      	nop
 80166b0:	3750      	adds	r7, #80	; 0x50
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	40023800 	.word	0x40023800
 80166bc:	40007000 	.word	0x40007000

080166c0 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b08e      	sub	sp, #56	; 0x38
 80166c4:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 80166c6:	2300      	movs	r3, #0
 80166c8:	607b      	str	r3, [r7, #4]
 80166ca:	f107 0308 	add.w	r3, r7, #8
 80166ce:	222e      	movs	r2, #46	; 0x2e
 80166d0:	2100      	movs	r1, #0
 80166d2:	4618      	mov	r0, r3
 80166d4:	f00e fd5c 	bl	8025190 <memset>
	printf("\n_____________________________________________\n");
 80166d8:	481d      	ldr	r0, [pc, #116]	; (8016750 <Get_Build_Details+0x90>)
 80166da:	f00e fedd 	bl	8025498 <puts>
	printf("Build Date:%s\n",__DATE__);
 80166de:	491d      	ldr	r1, [pc, #116]	; (8016754 <Get_Build_Details+0x94>)
 80166e0:	481d      	ldr	r0, [pc, #116]	; (8016758 <Get_Build_Details+0x98>)
 80166e2:	f00e fe3d 	bl	8025360 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 80166e6:	491d      	ldr	r1, [pc, #116]	; (801675c <Get_Build_Details+0x9c>)
 80166e8:	481d      	ldr	r0, [pc, #116]	; (8016760 <Get_Build_Details+0xa0>)
 80166ea:	f00e fe39 	bl	8025360 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 80166ee:	1d3b      	adds	r3, r7, #4
 80166f0:	4a18      	ldr	r2, [pc, #96]	; (8016754 <Get_Build_Details+0x94>)
 80166f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80166f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 80166f8:	1d3b      	adds	r3, r7, #4
 80166fa:	4618      	mov	r0, r3
 80166fc:	f7e9 fdaa 	bl	8000254 <strlen>
 8016700:	4603      	mov	r3, r0
 8016702:	461a      	mov	r2, r3
 8016704:	1d3b      	adds	r3, r7, #4
 8016706:	4413      	add	r3, r2
 8016708:	4914      	ldr	r1, [pc, #80]	; (801675c <Get_Build_Details+0x9c>)
 801670a:	461a      	mov	r2, r3
 801670c:	460b      	mov	r3, r1
 801670e:	cb03      	ldmia	r3!, {r0, r1}
 8016710:	6010      	str	r0, [r2, #0]
 8016712:	6051      	str	r1, [r2, #4]
 8016714:	781b      	ldrb	r3, [r3, #0]
 8016716:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8016718:	1d3b      	adds	r3, r7, #4
 801671a:	4618      	mov	r0, r3
 801671c:	f7e9 fd9a 	bl	8000254 <strlen>
 8016720:	4603      	mov	r3, r0
 8016722:	b21a      	sxth	r2, r3
 8016724:	1d3b      	adds	r3, r7, #4
 8016726:	4619      	mov	r1, r3
 8016728:	2000      	movs	r0, #0
 801672a:	f7fe f809 	bl	8014740 <GetCRC16>
 801672e:	4603      	mov	r3, r0
 8016730:	461a      	mov	r2, r3
 8016732:	4b0c      	ldr	r3, [pc, #48]	; (8016764 <Get_Build_Details+0xa4>)
 8016734:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8016736:	4a0c      	ldr	r2, [pc, #48]	; (8016768 <Get_Build_Details+0xa8>)
 8016738:	490c      	ldr	r1, [pc, #48]	; (801676c <Get_Build_Details+0xac>)
 801673a:	480d      	ldr	r0, [pc, #52]	; (8016770 <Get_Build_Details+0xb0>)
 801673c:	f00e fe10 	bl	8025360 <iprintf>
	printf("_____________________________________________\n");
 8016740:	480c      	ldr	r0, [pc, #48]	; (8016774 <Get_Build_Details+0xb4>)
 8016742:	f00e fea9 	bl	8025498 <puts>

}
 8016746:	bf00      	nop
 8016748:	3738      	adds	r7, #56	; 0x38
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	0802a4f8 	.word	0x0802a4f8
 8016754:	0802a528 	.word	0x0802a528
 8016758:	0802a534 	.word	0x0802a534
 801675c:	0802a544 	.word	0x0802a544
 8016760:	0802a550 	.word	0x0802a550
 8016764:	2000aa04 	.word	0x2000aa04
 8016768:	0802a560 	.word	0x0802a560
 801676c:	0802a564 	.word	0x0802a564
 8016770:	0802a57c 	.word	0x0802a57c
 8016774:	0802a598 	.word	0x0802a598

08016778 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b084      	sub	sp, #16
 801677c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801677e:	463b      	mov	r3, r7
 8016780:	2200      	movs	r2, #0
 8016782:	601a      	str	r2, [r3, #0]
 8016784:	605a      	str	r2, [r3, #4]
 8016786:	609a      	str	r2, [r3, #8]
 8016788:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 801678a:	f002 fdf7 	bl	801937c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801678e:	2301      	movs	r3, #1
 8016790:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8016792:	2300      	movs	r3, #0
 8016794:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8016796:	2300      	movs	r3, #0
 8016798:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801679a:	231f      	movs	r3, #31
 801679c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 801679e:	2387      	movs	r3, #135	; 0x87
 80167a0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80167a2:	2300      	movs	r3, #0
 80167a4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80167a6:	2300      	movs	r3, #0
 80167a8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80167aa:	2301      	movs	r3, #1
 80167ac:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80167ae:	2301      	movs	r3, #1
 80167b0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80167b2:	2300      	movs	r3, #0
 80167b4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80167b6:	2300      	movs	r3, #0
 80167b8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80167ba:	463b      	mov	r3, r7
 80167bc:	4618      	mov	r0, r3
 80167be:	f002 fe15 	bl	80193ec <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80167c2:	2004      	movs	r0, #4
 80167c4:	f002 fdf2 	bl	80193ac <HAL_MPU_Enable>

}
 80167c8:	bf00      	nop
 80167ca:	3710      	adds	r7, #16
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80167d0:	b480      	push	{r7}
 80167d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80167d4:	b672      	cpsid	i
}
 80167d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80167d8:	e7fe      	b.n	80167d8 <Error_Handler+0x8>
	...

080167dc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80167e0:	4b06      	ldr	r3, [pc, #24]	; (80167fc <MX_RNG_Init+0x20>)
 80167e2:	4a07      	ldr	r2, [pc, #28]	; (8016800 <MX_RNG_Init+0x24>)
 80167e4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80167e6:	4805      	ldr	r0, [pc, #20]	; (80167fc <MX_RNG_Init+0x20>)
 80167e8:	f006 f9e2 	bl	801cbb0 <HAL_RNG_Init>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d001      	beq.n	80167f6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80167f2:	f7ff ffed 	bl	80167d0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80167f6:	bf00      	nop
 80167f8:	bd80      	pop	{r7, pc}
 80167fa:	bf00      	nop
 80167fc:	2000a9e0 	.word	0x2000a9e0
 8016800:	50060800 	.word	0x50060800

08016804 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b0a8      	sub	sp, #160	; 0xa0
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801680c:	f107 0310 	add.w	r3, r7, #16
 8016810:	2290      	movs	r2, #144	; 0x90
 8016812:	2100      	movs	r1, #0
 8016814:	4618      	mov	r0, r3
 8016816:	f00e fcbb 	bl	8025190 <memset>
  if(rngHandle->Instance==RNG)
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	4a11      	ldr	r2, [pc, #68]	; (8016864 <HAL_RNG_MspInit+0x60>)
 8016820:	4293      	cmp	r3, r2
 8016822:	d11b      	bne.n	801685c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8016824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016828:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801682a:	2300      	movs	r3, #0
 801682c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016830:	f107 0310 	add.w	r3, r7, #16
 8016834:	4618      	mov	r0, r3
 8016836:	f005 fd93 	bl	801c360 <HAL_RCCEx_PeriphCLKConfig>
 801683a:	4603      	mov	r3, r0
 801683c:	2b00      	cmp	r3, #0
 801683e:	d001      	beq.n	8016844 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8016840:	f7ff ffc6 	bl	80167d0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8016844:	4b08      	ldr	r3, [pc, #32]	; (8016868 <HAL_RNG_MspInit+0x64>)
 8016846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016848:	4a07      	ldr	r2, [pc, #28]	; (8016868 <HAL_RNG_MspInit+0x64>)
 801684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801684e:	6353      	str	r3, [r2, #52]	; 0x34
 8016850:	4b05      	ldr	r3, [pc, #20]	; (8016868 <HAL_RNG_MspInit+0x64>)
 8016852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016858:	60fb      	str	r3, [r7, #12]
 801685a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 801685c:	bf00      	nop
 801685e:	37a0      	adds	r7, #160	; 0xa0
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}
 8016864:	50060800 	.word	0x50060800
 8016868:	40023800 	.word	0x40023800

0801686c <__NVIC_SystemReset>:
{
 801686c:	b480      	push	{r7}
 801686e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8016870:	f3bf 8f4f 	dsb	sy
}
 8016874:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016876:	4b06      	ldr	r3, [pc, #24]	; (8016890 <__NVIC_SystemReset+0x24>)
 8016878:	68db      	ldr	r3, [r3, #12]
 801687a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801687e:	4904      	ldr	r1, [pc, #16]	; (8016890 <__NVIC_SystemReset+0x24>)
 8016880:	4b04      	ldr	r3, [pc, #16]	; (8016894 <__NVIC_SystemReset+0x28>)
 8016882:	4313      	orrs	r3, r2
 8016884:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8016886:	f3bf 8f4f 	dsb	sy
}
 801688a:	bf00      	nop
    __NOP();
 801688c:	bf00      	nop
 801688e:	e7fd      	b.n	801688c <__NVIC_SystemReset+0x20>
 8016890:	e000ed00 	.word	0xe000ed00
 8016894:	05fa0004 	.word	0x05fa0004

08016898 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801689c:	4b1b      	ldr	r3, [pc, #108]	; (801690c <MX_SPI1_Init+0x74>)
 801689e:	4a1c      	ldr	r2, [pc, #112]	; (8016910 <MX_SPI1_Init+0x78>)
 80168a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80168a2:	4b1a      	ldr	r3, [pc, #104]	; (801690c <MX_SPI1_Init+0x74>)
 80168a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80168a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80168aa:	4b18      	ldr	r3, [pc, #96]	; (801690c <MX_SPI1_Init+0x74>)
 80168ac:	2200      	movs	r2, #0
 80168ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80168b0:	4b16      	ldr	r3, [pc, #88]	; (801690c <MX_SPI1_Init+0x74>)
 80168b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80168b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80168b8:	4b14      	ldr	r3, [pc, #80]	; (801690c <MX_SPI1_Init+0x74>)
 80168ba:	2200      	movs	r2, #0
 80168bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80168be:	4b13      	ldr	r3, [pc, #76]	; (801690c <MX_SPI1_Init+0x74>)
 80168c0:	2200      	movs	r2, #0
 80168c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80168c4:	4b11      	ldr	r3, [pc, #68]	; (801690c <MX_SPI1_Init+0x74>)
 80168c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80168ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80168cc:	4b0f      	ldr	r3, [pc, #60]	; (801690c <MX_SPI1_Init+0x74>)
 80168ce:	2208      	movs	r2, #8
 80168d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80168d2:	4b0e      	ldr	r3, [pc, #56]	; (801690c <MX_SPI1_Init+0x74>)
 80168d4:	2200      	movs	r2, #0
 80168d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80168d8:	4b0c      	ldr	r3, [pc, #48]	; (801690c <MX_SPI1_Init+0x74>)
 80168da:	2200      	movs	r2, #0
 80168dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80168de:	4b0b      	ldr	r3, [pc, #44]	; (801690c <MX_SPI1_Init+0x74>)
 80168e0:	2200      	movs	r2, #0
 80168e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80168e4:	4b09      	ldr	r3, [pc, #36]	; (801690c <MX_SPI1_Init+0x74>)
 80168e6:	2207      	movs	r2, #7
 80168e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80168ea:	4b08      	ldr	r3, [pc, #32]	; (801690c <MX_SPI1_Init+0x74>)
 80168ec:	2200      	movs	r2, #0
 80168ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80168f0:	4b06      	ldr	r3, [pc, #24]	; (801690c <MX_SPI1_Init+0x74>)
 80168f2:	2208      	movs	r2, #8
 80168f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80168f6:	4805      	ldr	r0, [pc, #20]	; (801690c <MX_SPI1_Init+0x74>)
 80168f8:	f006 f9ef 	bl	801ccda <HAL_SPI_Init>
 80168fc:	4603      	mov	r3, r0
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d001      	beq.n	8016906 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8016902:	f7ff ff65 	bl	80167d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8016906:	bf00      	nop
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	2000aa08 	.word	0x2000aa08
 8016910:	40013000 	.word	0x40013000

08016914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b08c      	sub	sp, #48	; 0x30
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801691c:	f107 031c 	add.w	r3, r7, #28
 8016920:	2200      	movs	r2, #0
 8016922:	601a      	str	r2, [r3, #0]
 8016924:	605a      	str	r2, [r3, #4]
 8016926:	609a      	str	r2, [r3, #8]
 8016928:	60da      	str	r2, [r3, #12]
 801692a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	4a33      	ldr	r2, [pc, #204]	; (8016a00 <HAL_SPI_MspInit+0xec>)
 8016932:	4293      	cmp	r3, r2
 8016934:	d160      	bne.n	80169f8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8016936:	4b33      	ldr	r3, [pc, #204]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801693a:	4a32      	ldr	r2, [pc, #200]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 801693c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016940:	6453      	str	r3, [r2, #68]	; 0x44
 8016942:	4b30      	ldr	r3, [pc, #192]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801694a:	61bb      	str	r3, [r7, #24]
 801694c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801694e:	4b2d      	ldr	r3, [pc, #180]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016952:	4a2c      	ldr	r2, [pc, #176]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016954:	f043 0301 	orr.w	r3, r3, #1
 8016958:	6313      	str	r3, [r2, #48]	; 0x30
 801695a:	4b2a      	ldr	r3, [pc, #168]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 801695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801695e:	f003 0301 	and.w	r3, r3, #1
 8016962:	617b      	str	r3, [r7, #20]
 8016964:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016966:	4b27      	ldr	r3, [pc, #156]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801696a:	4a26      	ldr	r2, [pc, #152]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 801696c:	f043 0308 	orr.w	r3, r3, #8
 8016970:	6313      	str	r3, [r2, #48]	; 0x30
 8016972:	4b24      	ldr	r3, [pc, #144]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016976:	f003 0308 	and.w	r3, r3, #8
 801697a:	613b      	str	r3, [r7, #16]
 801697c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801697e:	4b21      	ldr	r3, [pc, #132]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016982:	4a20      	ldr	r2, [pc, #128]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 8016984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016988:	6313      	str	r3, [r2, #48]	; 0x30
 801698a:	4b1e      	ldr	r3, [pc, #120]	; (8016a04 <HAL_SPI_MspInit+0xf0>)
 801698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016992:	60fb      	str	r3, [r7, #12]
 8016994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8016996:	2320      	movs	r3, #32
 8016998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801699a:	2302      	movs	r3, #2
 801699c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801699e:	2300      	movs	r3, #0
 80169a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80169a2:	2303      	movs	r3, #3
 80169a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80169a6:	2305      	movs	r3, #5
 80169a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80169aa:	f107 031c 	add.w	r3, r7, #28
 80169ae:	4619      	mov	r1, r3
 80169b0:	4815      	ldr	r0, [pc, #84]	; (8016a08 <HAL_SPI_MspInit+0xf4>)
 80169b2:	f003 ffd7 	bl	801a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80169b6:	2380      	movs	r3, #128	; 0x80
 80169b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80169ba:	2302      	movs	r3, #2
 80169bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169be:	2300      	movs	r3, #0
 80169c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80169c2:	2303      	movs	r3, #3
 80169c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80169c6:	2305      	movs	r3, #5
 80169c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 80169ca:	f107 031c 	add.w	r3, r7, #28
 80169ce:	4619      	mov	r1, r3
 80169d0:	480e      	ldr	r0, [pc, #56]	; (8016a0c <HAL_SPI_MspInit+0xf8>)
 80169d2:	f003 ffc7 	bl	801a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80169d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80169da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80169dc:	2302      	movs	r3, #2
 80169de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169e0:	2300      	movs	r3, #0
 80169e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80169e4:	2303      	movs	r3, #3
 80169e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80169e8:	2305      	movs	r3, #5
 80169ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80169ec:	f107 031c 	add.w	r3, r7, #28
 80169f0:	4619      	mov	r1, r3
 80169f2:	4807      	ldr	r0, [pc, #28]	; (8016a10 <HAL_SPI_MspInit+0xfc>)
 80169f4:	f003 ffb6 	bl	801a964 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80169f8:	bf00      	nop
 80169fa:	3730      	adds	r7, #48	; 0x30
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}
 8016a00:	40013000 	.word	0x40013000
 8016a04:	40023800 	.word	0x40023800
 8016a08:	40020000 	.word	0x40020000
 8016a0c:	40020c00 	.word	0x40020c00
 8016a10:	40021800 	.word	0x40021800

08016a14 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b086      	sub	sp, #24
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	60b9      	str	r1, [r7, #8]
 8016a1c:	607b      	str	r3, [r7, #4]
 8016a1e:	4603      	mov	r3, r0
 8016a20:	73fb      	strb	r3, [r7, #15]
 8016a22:	4613      	mov	r3, r2
 8016a24:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8016a26:	2300      	movs	r3, #0
 8016a28:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8016a2a:	7bfb      	ldrb	r3, [r7, #15]
 8016a2c:	3b01      	subs	r3, #1
 8016a2e:	2b03      	cmp	r3, #3
 8016a30:	d828      	bhi.n	8016a84 <SPI_WriteInFlash+0x70>
 8016a32:	a201      	add	r2, pc, #4	; (adr r2, 8016a38 <SPI_WriteInFlash+0x24>)
 8016a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a38:	08016a49 	.word	0x08016a49
 8016a3c:	08016a59 	.word	0x08016a59
 8016a40:	08016a67 	.word	0x08016a67
 8016a44:	08016a75 	.word	0x08016a75
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8016a48:	4b75      	ldr	r3, [pc, #468]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016a4a:	4a76      	ldr	r2, [pc, #472]	; (8016c24 <SPI_WriteInFlash+0x210>)
 8016a4c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8016a4e:	4b76      	ldr	r3, [pc, #472]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016a54:	601a      	str	r2, [r3, #0]
		break;
 8016a56:	e018      	b.n	8016a8a <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8016a58:	4b71      	ldr	r3, [pc, #452]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016a5a:	4a74      	ldr	r2, [pc, #464]	; (8016c2c <SPI_WriteInFlash+0x218>)
 8016a5c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8016a5e:	4b72      	ldr	r3, [pc, #456]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016a60:	2220      	movs	r2, #32
 8016a62:	601a      	str	r2, [r3, #0]
		break;
 8016a64:	e011      	b.n	8016a8a <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8016a66:	4b6e      	ldr	r3, [pc, #440]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016a68:	4a70      	ldr	r2, [pc, #448]	; (8016c2c <SPI_WriteInFlash+0x218>)
 8016a6a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8016a6c:	4b6e      	ldr	r3, [pc, #440]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016a6e:	2240      	movs	r2, #64	; 0x40
 8016a70:	601a      	str	r2, [r3, #0]
		break;
 8016a72:	e00a      	b.n	8016a8a <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8016a74:	4b6a      	ldr	r3, [pc, #424]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016a76:	4a6e      	ldr	r2, [pc, #440]	; (8016c30 <SPI_WriteInFlash+0x21c>)
 8016a78:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8016a7a:	4b6b      	ldr	r3, [pc, #428]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016a7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016a80:	601a      	str	r2, [r3, #0]
		break;
 8016a82:	e002      	b.n	8016a8a <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8016a84:	486b      	ldr	r0, [pc, #428]	; (8016c34 <SPI_WriteInFlash+0x220>)
 8016a86:	f00e fd07 	bl	8025498 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016a8a:	4b65      	ldr	r3, [pc, #404]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	4a66      	ldr	r2, [pc, #408]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016a90:	6812      	ldr	r2, [r2, #0]
 8016a92:	b291      	uxth	r1, r2
 8016a94:	2201      	movs	r2, #1
 8016a96:	4618      	mov	r0, r3
 8016a98:	f004 f928 	bl	801acec <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016a9c:	4b60      	ldr	r3, [pc, #384]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	4a61      	ldr	r2, [pc, #388]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016aa2:	6812      	ldr	r2, [r2, #0]
 8016aa4:	b291      	uxth	r1, r2
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f004 f91f 	bl	801acec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 8016aae:	2364      	movs	r3, #100	; 0x64
 8016ab0:	2201      	movs	r2, #1
 8016ab2:	4961      	ldr	r1, [pc, #388]	; (8016c38 <SPI_WriteInFlash+0x224>)
 8016ab4:	4861      	ldr	r0, [pc, #388]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016ab6:	f006 f9bb 	bl	801ce30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016aba:	4b59      	ldr	r3, [pc, #356]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4a5a      	ldr	r2, [pc, #360]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016ac0:	6812      	ldr	r2, [r2, #0]
 8016ac2:	b291      	uxth	r1, r2
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f004 f910 	bl	801acec <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016acc:	4b54      	ldr	r3, [pc, #336]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	4a55      	ldr	r2, [pc, #340]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016ad2:	6812      	ldr	r2, [r2, #0]
 8016ad4:	b291      	uxth	r1, r2
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f004 f907 	bl	801acec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 8016ade:	2364      	movs	r3, #100	; 0x64
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	4957      	ldr	r1, [pc, #348]	; (8016c40 <SPI_WriteInFlash+0x22c>)
 8016ae4:	4855      	ldr	r0, [pc, #340]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016ae6:	f006 f9a3 	bl	801ce30 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016aea:	2364      	movs	r3, #100	; 0x64
 8016aec:	2201      	movs	r2, #1
 8016aee:	4955      	ldr	r1, [pc, #340]	; (8016c44 <SPI_WriteInFlash+0x230>)
 8016af0:	4852      	ldr	r0, [pc, #328]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016af2:	f006 fb0b 	bl	801d10c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016af6:	4b4a      	ldr	r3, [pc, #296]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	4a4b      	ldr	r2, [pc, #300]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016afc:	6812      	ldr	r2, [r2, #0]
 8016afe:	b291      	uxth	r1, r2
 8016b00:	2201      	movs	r2, #1
 8016b02:	4618      	mov	r0, r3
 8016b04:	f004 f8f2 	bl	801acec <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8016b08:	4b4e      	ldr	r3, [pc, #312]	; (8016c44 <SPI_WriteInFlash+0x230>)
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	f003 0302 	and.w	r3, r3, #2
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d103      	bne.n	8016b1c <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8016b14:	484c      	ldr	r0, [pc, #304]	; (8016c48 <SPI_WriteInFlash+0x234>)
 8016b16:	f00e fc23 	bl	8025360 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016b1a:	e7d7      	b.n	8016acc <SPI_WriteInFlash+0xb8>
			break;
 8016b1c:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016b1e:	4b40      	ldr	r3, [pc, #256]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	4a41      	ldr	r2, [pc, #260]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016b24:	6812      	ldr	r2, [r2, #0]
 8016b26:	b291      	uxth	r1, r2
 8016b28:	2200      	movs	r2, #0
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f004 f8de 	bl	801acec <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8016b30:	2202      	movs	r2, #2
 8016b32:	4b46      	ldr	r3, [pc, #280]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016b34:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8016b36:	68bb      	ldr	r3, [r7, #8]
 8016b38:	0c1b      	lsrs	r3, r3, #16
 8016b3a:	b2da      	uxtb	r2, r3
 8016b3c:	4b43      	ldr	r3, [pc, #268]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016b3e:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	0a1b      	lsrs	r3, r3, #8
 8016b44:	b2da      	uxtb	r2, r3
 8016b46:	4b41      	ldr	r3, [pc, #260]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016b48:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	b2da      	uxtb	r2, r3
 8016b4e:	4b3f      	ldr	r3, [pc, #252]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016b50:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8016b52:	2364      	movs	r3, #100	; 0x64
 8016b54:	2204      	movs	r2, #4
 8016b56:	493d      	ldr	r1, [pc, #244]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016b58:	4838      	ldr	r0, [pc, #224]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016b5a:	f006 f969 	bl	801ce30 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8016b5e:	89ba      	ldrh	r2, [r7, #12]
 8016b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b64:	6879      	ldr	r1, [r7, #4]
 8016b66:	4835      	ldr	r0, [pc, #212]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016b68:	f006 f962 	bl	801ce30 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016b6c:	4b2c      	ldr	r3, [pc, #176]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	4a2d      	ldr	r2, [pc, #180]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016b72:	6812      	ldr	r2, [r2, #0]
 8016b74:	b291      	uxth	r1, r2
 8016b76:	2201      	movs	r2, #1
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f004 f8b7 	bl	801acec <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016b7e:	4b28      	ldr	r3, [pc, #160]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	4a29      	ldr	r2, [pc, #164]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016b84:	6812      	ldr	r2, [r2, #0]
 8016b86:	b291      	uxth	r1, r2
 8016b88:	2200      	movs	r2, #0
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f004 f8ae 	bl	801acec <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8016b90:	2205      	movs	r2, #5
 8016b92:	4b2e      	ldr	r3, [pc, #184]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016b94:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8016b96:	2364      	movs	r3, #100	; 0x64
 8016b98:	2201      	movs	r2, #1
 8016b9a:	492c      	ldr	r1, [pc, #176]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016b9c:	4827      	ldr	r0, [pc, #156]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016b9e:	f006 f947 	bl	801ce30 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016ba2:	2364      	movs	r3, #100	; 0x64
 8016ba4:	2201      	movs	r2, #1
 8016ba6:	4927      	ldr	r1, [pc, #156]	; (8016c44 <SPI_WriteInFlash+0x230>)
 8016ba8:	4824      	ldr	r0, [pc, #144]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016baa:	f006 faaf 	bl	801d10c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016bae:	4b1c      	ldr	r3, [pc, #112]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	4a1d      	ldr	r2, [pc, #116]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016bb4:	6812      	ldr	r2, [r2, #0]
 8016bb6:	b291      	uxth	r1, r2
 8016bb8:	2201      	movs	r2, #1
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f004 f896 	bl	801acec <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8016bc0:	4b20      	ldr	r3, [pc, #128]	; (8016c44 <SPI_WriteInFlash+0x230>)
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	f003 0301 	and.w	r3, r3, #1
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d1d8      	bne.n	8016b7e <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8016bcc:	2301      	movs	r3, #1
 8016bce:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8016bd0:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016bd2:	4b13      	ldr	r3, [pc, #76]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	4a14      	ldr	r2, [pc, #80]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016bd8:	6812      	ldr	r2, [r2, #0]
 8016bda:	b291      	uxth	r1, r2
 8016bdc:	2200      	movs	r2, #0
 8016bde:	4618      	mov	r0, r3
 8016be0:	f004 f884 	bl	801acec <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8016be4:	2204      	movs	r2, #4
 8016be6:	4b19      	ldr	r3, [pc, #100]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016be8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8016bea:	2364      	movs	r3, #100	; 0x64
 8016bec:	2201      	movs	r2, #1
 8016bee:	4917      	ldr	r1, [pc, #92]	; (8016c4c <SPI_WriteInFlash+0x238>)
 8016bf0:	4812      	ldr	r0, [pc, #72]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016bf2:	f006 f91d 	bl	801ce30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016bf6:	2364      	movs	r3, #100	; 0x64
 8016bf8:	2201      	movs	r2, #1
 8016bfa:	4912      	ldr	r1, [pc, #72]	; (8016c44 <SPI_WriteInFlash+0x230>)
 8016bfc:	480f      	ldr	r0, [pc, #60]	; (8016c3c <SPI_WriteInFlash+0x228>)
 8016bfe:	f006 fa85 	bl	801d10c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016c02:	4b07      	ldr	r3, [pc, #28]	; (8016c20 <SPI_WriteInFlash+0x20c>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	4a08      	ldr	r2, [pc, #32]	; (8016c28 <SPI_WriteInFlash+0x214>)
 8016c08:	6812      	ldr	r2, [r2, #0]
 8016c0a:	b291      	uxth	r1, r2
 8016c0c:	2201      	movs	r2, #1
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f004 f86c 	bl	801acec <HAL_GPIO_WritePin>

	return Return_Value;
 8016c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3718      	adds	r7, #24
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}
 8016c1e:	bf00      	nop
 8016c20:	2000a9fc 	.word	0x2000a9fc
 8016c24:	40021800 	.word	0x40021800
 8016c28:	2000aa00 	.word	0x2000aa00
 8016c2c:	40020c00 	.word	0x40020c00
 8016c30:	40021000 	.word	0x40021000
 8016c34:	0802a5c8 	.word	0x0802a5c8
 8016c38:	0802c270 	.word	0x0802c270
 8016c3c:	2000aa08 	.word	0x2000aa08
 8016c40:	0802c271 	.word	0x0802c271
 8016c44:	2000a9f8 	.word	0x2000a9f8
 8016c48:	0802a5e0 	.word	0x0802a5e0
 8016c4c:	2000a9f4 	.word	0x2000a9f4

08016c50 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	4603      	mov	r3, r0
 8016c58:	6039      	str	r1, [r7, #0]
 8016c5a:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8016c60:	79fb      	ldrb	r3, [r7, #7]
 8016c62:	3b01      	subs	r3, #1
 8016c64:	2b03      	cmp	r3, #3
 8016c66:	d829      	bhi.n	8016cbc <SPI_MemoryEraseBySector+0x6c>
 8016c68:	a201      	add	r2, pc, #4	; (adr r2, 8016c70 <SPI_MemoryEraseBySector+0x20>)
 8016c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c6e:	bf00      	nop
 8016c70:	08016c81 	.word	0x08016c81
 8016c74:	08016c91 	.word	0x08016c91
 8016c78:	08016c9f 	.word	0x08016c9f
 8016c7c:	08016cad 	.word	0x08016cad
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8016c80:	4b6d      	ldr	r3, [pc, #436]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016c82:	4a6e      	ldr	r2, [pc, #440]	; (8016e3c <SPI_MemoryEraseBySector+0x1ec>)
 8016c84:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8016c86:	4b6e      	ldr	r3, [pc, #440]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016c8c:	601a      	str	r2, [r3, #0]
		break;
 8016c8e:	e018      	b.n	8016cc2 <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8016c90:	4b69      	ldr	r3, [pc, #420]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016c92:	4a6c      	ldr	r2, [pc, #432]	; (8016e44 <SPI_MemoryEraseBySector+0x1f4>)
 8016c94:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8016c96:	4b6a      	ldr	r3, [pc, #424]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016c98:	2220      	movs	r2, #32
 8016c9a:	601a      	str	r2, [r3, #0]
		break;
 8016c9c:	e011      	b.n	8016cc2 <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8016c9e:	4b66      	ldr	r3, [pc, #408]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016ca0:	4a68      	ldr	r2, [pc, #416]	; (8016e44 <SPI_MemoryEraseBySector+0x1f4>)
 8016ca2:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8016ca4:	4b66      	ldr	r3, [pc, #408]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016ca6:	2240      	movs	r2, #64	; 0x40
 8016ca8:	601a      	str	r2, [r3, #0]
		break;
 8016caa:	e00a      	b.n	8016cc2 <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8016cac:	4b62      	ldr	r3, [pc, #392]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016cae:	4a66      	ldr	r2, [pc, #408]	; (8016e48 <SPI_MemoryEraseBySector+0x1f8>)
 8016cb0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8016cb2:	4b63      	ldr	r3, [pc, #396]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016cb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016cb8:	601a      	str	r2, [r3, #0]
		break;
 8016cba:	e002      	b.n	8016cc2 <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8016cbc:	4863      	ldr	r0, [pc, #396]	; (8016e4c <SPI_MemoryEraseBySector+0x1fc>)
 8016cbe:	f00e fbeb 	bl	8025498 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016cc2:	4b5d      	ldr	r3, [pc, #372]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	4a5e      	ldr	r2, [pc, #376]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016cc8:	6812      	ldr	r2, [r2, #0]
 8016cca:	b291      	uxth	r1, r2
 8016ccc:	2200      	movs	r2, #0
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f004 f80c 	bl	801acec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8016cd4:	2364      	movs	r3, #100	; 0x64
 8016cd6:	2201      	movs	r2, #1
 8016cd8:	495d      	ldr	r1, [pc, #372]	; (8016e50 <SPI_MemoryEraseBySector+0x200>)
 8016cda:	485e      	ldr	r0, [pc, #376]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016cdc:	f006 f8a8 	bl	801ce30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016ce0:	4b55      	ldr	r3, [pc, #340]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	4a56      	ldr	r2, [pc, #344]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016ce6:	6812      	ldr	r2, [r2, #0]
 8016ce8:	b291      	uxth	r1, r2
 8016cea:	2201      	movs	r2, #1
 8016cec:	4618      	mov	r0, r3
 8016cee:	f003 fffd 	bl	801acec <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016cf2:	4b51      	ldr	r3, [pc, #324]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	4a52      	ldr	r2, [pc, #328]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016cf8:	6812      	ldr	r2, [r2, #0]
 8016cfa:	b291      	uxth	r1, r2
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f003 fff4 	bl	801acec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8016d04:	2364      	movs	r3, #100	; 0x64
 8016d06:	2201      	movs	r2, #1
 8016d08:	4953      	ldr	r1, [pc, #332]	; (8016e58 <SPI_MemoryEraseBySector+0x208>)
 8016d0a:	4852      	ldr	r0, [pc, #328]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016d0c:	f006 f890 	bl	801ce30 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016d10:	2364      	movs	r3, #100	; 0x64
 8016d12:	2201      	movs	r2, #1
 8016d14:	4951      	ldr	r1, [pc, #324]	; (8016e5c <SPI_MemoryEraseBySector+0x20c>)
 8016d16:	484f      	ldr	r0, [pc, #316]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016d18:	f006 f9f8 	bl	801d10c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016d1c:	4b46      	ldr	r3, [pc, #280]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4a47      	ldr	r2, [pc, #284]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016d22:	6812      	ldr	r2, [r2, #0]
 8016d24:	b291      	uxth	r1, r2
 8016d26:	2201      	movs	r2, #1
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f003 ffdf 	bl	801acec <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8016d2e:	4b4b      	ldr	r3, [pc, #300]	; (8016e5c <SPI_MemoryEraseBySector+0x20c>)
 8016d30:	781b      	ldrb	r3, [r3, #0]
 8016d32:	f003 0302 	and.w	r3, r3, #2
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d103      	bne.n	8016d42 <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8016d3a:	4849      	ldr	r0, [pc, #292]	; (8016e60 <SPI_MemoryEraseBySector+0x210>)
 8016d3c:	f00e fb10 	bl	8025360 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016d40:	e7d7      	b.n	8016cf2 <SPI_MemoryEraseBySector+0xa2>
			break;
 8016d42:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016d44:	4b3c      	ldr	r3, [pc, #240]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4a3d      	ldr	r2, [pc, #244]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016d4a:	6812      	ldr	r2, [r2, #0]
 8016d4c:	b291      	uxth	r1, r2
 8016d4e:	2200      	movs	r2, #0
 8016d50:	4618      	mov	r0, r3
 8016d52:	f003 ffcb 	bl	801acec <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8016d56:	4b43      	ldr	r3, [pc, #268]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016d58:	2220      	movs	r2, #32
 8016d5a:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	0c1b      	lsrs	r3, r3, #16
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	4b40      	ldr	r3, [pc, #256]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016d64:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8016d66:	683b      	ldr	r3, [r7, #0]
 8016d68:	0a1b      	lsrs	r3, r3, #8
 8016d6a:	b2da      	uxtb	r2, r3
 8016d6c:	4b3d      	ldr	r3, [pc, #244]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016d6e:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	b2da      	uxtb	r2, r3
 8016d74:	4b3b      	ldr	r3, [pc, #236]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016d76:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8016d78:	2364      	movs	r3, #100	; 0x64
 8016d7a:	2204      	movs	r2, #4
 8016d7c:	4939      	ldr	r1, [pc, #228]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016d7e:	4835      	ldr	r0, [pc, #212]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016d80:	f006 f856 	bl	801ce30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016d84:	4b2c      	ldr	r3, [pc, #176]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	4a2d      	ldr	r2, [pc, #180]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016d8a:	6812      	ldr	r2, [r2, #0]
 8016d8c:	b291      	uxth	r1, r2
 8016d8e:	2201      	movs	r2, #1
 8016d90:	4618      	mov	r0, r3
 8016d92:	f003 ffab 	bl	801acec <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016d96:	4b28      	ldr	r3, [pc, #160]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	4a29      	ldr	r2, [pc, #164]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016d9c:	6812      	ldr	r2, [r2, #0]
 8016d9e:	b291      	uxth	r1, r2
 8016da0:	2200      	movs	r2, #0
 8016da2:	4618      	mov	r0, r3
 8016da4:	f003 ffa2 	bl	801acec <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8016da8:	2205      	movs	r2, #5
 8016daa:	4b2e      	ldr	r3, [pc, #184]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016dac:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8016dae:	2364      	movs	r3, #100	; 0x64
 8016db0:	2201      	movs	r2, #1
 8016db2:	492c      	ldr	r1, [pc, #176]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016db4:	4827      	ldr	r0, [pc, #156]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016db6:	f006 f83b 	bl	801ce30 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016dba:	2364      	movs	r3, #100	; 0x64
 8016dbc:	2201      	movs	r2, #1
 8016dbe:	4927      	ldr	r1, [pc, #156]	; (8016e5c <SPI_MemoryEraseBySector+0x20c>)
 8016dc0:	4824      	ldr	r0, [pc, #144]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016dc2:	f006 f9a3 	bl	801d10c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016dc6:	4b1c      	ldr	r3, [pc, #112]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	4a1d      	ldr	r2, [pc, #116]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016dcc:	6812      	ldr	r2, [r2, #0]
 8016dce:	b291      	uxth	r1, r2
 8016dd0:	2201      	movs	r2, #1
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f003 ff8a 	bl	801acec <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8016dd8:	4b20      	ldr	r3, [pc, #128]	; (8016e5c <SPI_MemoryEraseBySector+0x20c>)
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	f003 0301 	and.w	r3, r3, #1
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d1d8      	bne.n	8016d96 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8016de4:	2301      	movs	r3, #1
 8016de6:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8016de8:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016dea:	4b13      	ldr	r3, [pc, #76]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	4a14      	ldr	r2, [pc, #80]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016df0:	6812      	ldr	r2, [r2, #0]
 8016df2:	b291      	uxth	r1, r2
 8016df4:	2200      	movs	r2, #0
 8016df6:	4618      	mov	r0, r3
 8016df8:	f003 ff78 	bl	801acec <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8016dfc:	2204      	movs	r2, #4
 8016dfe:	4b19      	ldr	r3, [pc, #100]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016e00:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8016e02:	2364      	movs	r3, #100	; 0x64
 8016e04:	2201      	movs	r2, #1
 8016e06:	4917      	ldr	r1, [pc, #92]	; (8016e64 <SPI_MemoryEraseBySector+0x214>)
 8016e08:	4812      	ldr	r0, [pc, #72]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016e0a:	f006 f811 	bl	801ce30 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8016e0e:	2364      	movs	r3, #100	; 0x64
 8016e10:	2201      	movs	r2, #1
 8016e12:	4912      	ldr	r1, [pc, #72]	; (8016e5c <SPI_MemoryEraseBySector+0x20c>)
 8016e14:	480f      	ldr	r0, [pc, #60]	; (8016e54 <SPI_MemoryEraseBySector+0x204>)
 8016e16:	f006 f979 	bl	801d10c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016e1a:	4b07      	ldr	r3, [pc, #28]	; (8016e38 <SPI_MemoryEraseBySector+0x1e8>)
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	4a08      	ldr	r2, [pc, #32]	; (8016e40 <SPI_MemoryEraseBySector+0x1f0>)
 8016e20:	6812      	ldr	r2, [r2, #0]
 8016e22:	b291      	uxth	r1, r2
 8016e24:	2201      	movs	r2, #1
 8016e26:	4618      	mov	r0, r3
 8016e28:	f003 ff60 	bl	801acec <HAL_GPIO_WritePin>
	return Flash_Erase;
 8016e2c:	68fb      	ldr	r3, [r7, #12]

}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	2000a9fc 	.word	0x2000a9fc
 8016e3c:	40021800 	.word	0x40021800
 8016e40:	2000aa00 	.word	0x2000aa00
 8016e44:	40020c00 	.word	0x40020c00
 8016e48:	40021000 	.word	0x40021000
 8016e4c:	0802a5c8 	.word	0x0802a5c8
 8016e50:	0802c270 	.word	0x0802c270
 8016e54:	2000aa08 	.word	0x2000aa08
 8016e58:	0802c271 	.word	0x0802c271
 8016e5c:	2000a9f8 	.word	0x2000a9f8
 8016e60:	0802a604 	.word	0x0802a604
 8016e64:	2000a9f4 	.word	0x2000a9f4

08016e68 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b084      	sub	sp, #16
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	60b9      	str	r1, [r7, #8]
 8016e70:	607b      	str	r3, [r7, #4]
 8016e72:	4603      	mov	r3, r0
 8016e74:	73fb      	strb	r3, [r7, #15]
 8016e76:	4613      	mov	r3, r2
 8016e78:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8016e7a:	7bfb      	ldrb	r3, [r7, #15]
 8016e7c:	3b01      	subs	r3, #1
 8016e7e:	2b03      	cmp	r3, #3
 8016e80:	d828      	bhi.n	8016ed4 <SPI_ReadFromFlash+0x6c>
 8016e82:	a201      	add	r2, pc, #4	; (adr r2, 8016e88 <SPI_ReadFromFlash+0x20>)
 8016e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e88:	08016e99 	.word	0x08016e99
 8016e8c:	08016ea9 	.word	0x08016ea9
 8016e90:	08016eb7 	.word	0x08016eb7
 8016e94:	08016ec5 	.word	0x08016ec5
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8016e98:	4b2d      	ldr	r3, [pc, #180]	; (8016f50 <SPI_ReadFromFlash+0xe8>)
 8016e9a:	4a2e      	ldr	r2, [pc, #184]	; (8016f54 <SPI_ReadFromFlash+0xec>)
 8016e9c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8016e9e:	4b2e      	ldr	r3, [pc, #184]	; (8016f58 <SPI_ReadFromFlash+0xf0>)
 8016ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016ea4:	601a      	str	r2, [r3, #0]
		break;
 8016ea6:	e018      	b.n	8016eda <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8016ea8:	4b29      	ldr	r3, [pc, #164]	; (8016f50 <SPI_ReadFromFlash+0xe8>)
 8016eaa:	4a2c      	ldr	r2, [pc, #176]	; (8016f5c <SPI_ReadFromFlash+0xf4>)
 8016eac:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8016eae:	4b2a      	ldr	r3, [pc, #168]	; (8016f58 <SPI_ReadFromFlash+0xf0>)
 8016eb0:	2220      	movs	r2, #32
 8016eb2:	601a      	str	r2, [r3, #0]
		break;
 8016eb4:	e011      	b.n	8016eda <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8016eb6:	4b26      	ldr	r3, [pc, #152]	; (8016f50 <SPI_ReadFromFlash+0xe8>)
 8016eb8:	4a28      	ldr	r2, [pc, #160]	; (8016f5c <SPI_ReadFromFlash+0xf4>)
 8016eba:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8016ebc:	4b26      	ldr	r3, [pc, #152]	; (8016f58 <SPI_ReadFromFlash+0xf0>)
 8016ebe:	2240      	movs	r2, #64	; 0x40
 8016ec0:	601a      	str	r2, [r3, #0]
		break;
 8016ec2:	e00a      	b.n	8016eda <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8016ec4:	4b22      	ldr	r3, [pc, #136]	; (8016f50 <SPI_ReadFromFlash+0xe8>)
 8016ec6:	4a26      	ldr	r2, [pc, #152]	; (8016f60 <SPI_ReadFromFlash+0xf8>)
 8016ec8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8016eca:	4b23      	ldr	r3, [pc, #140]	; (8016f58 <SPI_ReadFromFlash+0xf0>)
 8016ecc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016ed0:	601a      	str	r2, [r3, #0]
		break;
 8016ed2:	e002      	b.n	8016eda <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8016ed4:	4823      	ldr	r0, [pc, #140]	; (8016f64 <SPI_ReadFromFlash+0xfc>)
 8016ed6:	f00e fadf 	bl	8025498 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8016eda:	89bb      	ldrh	r3, [r7, #12]
 8016edc:	461a      	mov	r2, r3
 8016ede:	2100      	movs	r1, #0
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f00e f955 	bl	8025190 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8016ee6:	4b1a      	ldr	r3, [pc, #104]	; (8016f50 <SPI_ReadFromFlash+0xe8>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	4a1b      	ldr	r2, [pc, #108]	; (8016f58 <SPI_ReadFromFlash+0xf0>)
 8016eec:	6812      	ldr	r2, [r2, #0]
 8016eee:	b291      	uxth	r1, r2
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f003 fefa 	bl	801acec <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8016ef8:	2203      	movs	r2, #3
 8016efa:	4b1b      	ldr	r3, [pc, #108]	; (8016f68 <SPI_ReadFromFlash+0x100>)
 8016efc:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8016efe:	68bb      	ldr	r3, [r7, #8]
 8016f00:	0c1b      	lsrs	r3, r3, #16
 8016f02:	b2da      	uxtb	r2, r3
 8016f04:	4b18      	ldr	r3, [pc, #96]	; (8016f68 <SPI_ReadFromFlash+0x100>)
 8016f06:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	0a1b      	lsrs	r3, r3, #8
 8016f0c:	b2da      	uxtb	r2, r3
 8016f0e:	4b16      	ldr	r3, [pc, #88]	; (8016f68 <SPI_ReadFromFlash+0x100>)
 8016f10:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	b2da      	uxtb	r2, r3
 8016f16:	4b14      	ldr	r3, [pc, #80]	; (8016f68 <SPI_ReadFromFlash+0x100>)
 8016f18:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8016f1a:	2364      	movs	r3, #100	; 0x64
 8016f1c:	2204      	movs	r2, #4
 8016f1e:	4912      	ldr	r1, [pc, #72]	; (8016f68 <SPI_ReadFromFlash+0x100>)
 8016f20:	4812      	ldr	r0, [pc, #72]	; (8016f6c <SPI_ReadFromFlash+0x104>)
 8016f22:	f005 ff85 	bl	801ce30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8016f26:	89ba      	ldrh	r2, [r7, #12]
 8016f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016f2c:	6879      	ldr	r1, [r7, #4]
 8016f2e:	480f      	ldr	r0, [pc, #60]	; (8016f6c <SPI_ReadFromFlash+0x104>)
 8016f30:	f006 f8ec 	bl	801d10c <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8016f34:	4b06      	ldr	r3, [pc, #24]	; (8016f50 <SPI_ReadFromFlash+0xe8>)
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	4a07      	ldr	r2, [pc, #28]	; (8016f58 <SPI_ReadFromFlash+0xf0>)
 8016f3a:	6812      	ldr	r2, [r2, #0]
 8016f3c:	b291      	uxth	r1, r2
 8016f3e:	2201      	movs	r2, #1
 8016f40:	4618      	mov	r0, r3
 8016f42:	f003 fed3 	bl	801acec <HAL_GPIO_WritePin>

}
 8016f46:	bf00      	nop
 8016f48:	3710      	adds	r7, #16
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	2000a9fc 	.word	0x2000a9fc
 8016f54:	40021800 	.word	0x40021800
 8016f58:	2000aa00 	.word	0x2000aa00
 8016f5c:	40020c00 	.word	0x40020c00
 8016f60:	40021000 	.word	0x40021000
 8016f64:	0802a5c8 	.word	0x0802a5c8
 8016f68:	2000a9f4 	.word	0x2000a9f4
 8016f6c:	2000aa08 	.word	0x2000aa08

08016f70 <Get_Config>:




void Get_Config(void)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 8016f76:	2300      	movs	r3, #0
 8016f78:	60fb      	str	r3, [r7, #12]

	size_t SIZE = (sizeof(EI_t))+6;
 8016f7a:	f240 335e 	movw	r3, #862	; 0x35e
 8016f7e:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	60bb      	str	r3, [r7, #8]

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8016f84:	2300      	movs	r3, #0
 8016f86:	60fb      	str	r3, [r7, #12]
 8016f88:	e01d      	b.n	8016fc6 <Get_Config+0x56>
	{
		HAL_Delay(20);
 8016f8a:	2014      	movs	r0, #20
 8016f8c:	f001 f9ea 	bl	8018364 <HAL_Delay>
		if(SIZE_VAR <32)
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	2b1f      	cmp	r3, #31
 8016f94:	d809      	bhi.n	8016faa <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	b29a      	uxth	r2, r3
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	4936      	ldr	r1, [pc, #216]	; (8017078 <Get_Config+0x108>)
 8016f9e:	440b      	add	r3, r1
 8016fa0:	68f9      	ldr	r1, [r7, #12]
 8016fa2:	2001      	movs	r0, #1
 8016fa4:	f7ff ff60 	bl	8016e68 <SPI_ReadFromFlash>
 8016fa8:	e00a      	b.n	8016fc0 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	4a32      	ldr	r2, [pc, #200]	; (8017078 <Get_Config+0x108>)
 8016fae:	4413      	add	r3, r2
 8016fb0:	2220      	movs	r2, #32
 8016fb2:	68f9      	ldr	r1, [r7, #12]
 8016fb4:	2001      	movs	r0, #1
 8016fb6:	f7ff ff57 	bl	8016e68 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	3b20      	subs	r3, #32
 8016fbe:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	3320      	adds	r3, #32
 8016fc4:	60fb      	str	r3, [r7, #12]
 8016fc6:	68fa      	ldr	r2, [r7, #12]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d3dd      	bcc.n	8016f8a <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8016fce:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8016fd2:	4829      	ldr	r0, [pc, #164]	; (8017078 <Get_Config+0x108>)
 8016fd4:	f7fd fb60 	bl	8014698 <CheckCRC>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d026      	beq.n	801702c <Get_Config+0xbc>
	{
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8016fde:	f44f 7256 	mov.w	r2, #856	; 0x358
 8016fe2:	4926      	ldr	r1, [pc, #152]	; (801707c <Get_Config+0x10c>)
 8016fe4:	4826      	ldr	r0, [pc, #152]	; (8017080 <Get_Config+0x110>)
 8016fe6:	f00e f8ab 	bl	8025140 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8016fea:	4a26      	ldr	r2, [pc, #152]	; (8017084 <Get_Config+0x114>)
 8016fec:	2110      	movs	r1, #16
 8016fee:	2000      	movs	r0, #0
 8016ff0:	f7e9 fb10 	bl	8000614 <ExtractBits>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	4b23      	ldr	r3, [pc, #140]	; (8017088 <Get_Config+0x118>)
 8016ffa:	801a      	strh	r2, [r3, #0]
		printf("\n___________________BUILD DETAILS___________________\n");
 8016ffc:	4823      	ldr	r0, [pc, #140]	; (801708c <Get_Config+0x11c>)
 8016ffe:	f00e fa4b 	bl	8025498 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8017002:	4923      	ldr	r1, [pc, #140]	; (8017090 <Get_Config+0x120>)
 8017004:	4823      	ldr	r0, [pc, #140]	; (8017094 <Get_Config+0x124>)
 8017006:	f00e f9ab 	bl	8025360 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 801700a:	4b1f      	ldr	r3, [pc, #124]	; (8017088 <Get_Config+0x118>)
 801700c:	881b      	ldrh	r3, [r3, #0]
 801700e:	4619      	mov	r1, r3
 8017010:	4821      	ldr	r0, [pc, #132]	; (8017098 <Get_Config+0x128>)
 8017012:	f00e f9a5 	bl	8025360 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);	}
 8017016:	4b21      	ldr	r3, [pc, #132]	; (801709c <Get_Config+0x12c>)
 8017018:	881b      	ldrh	r3, [r3, #0]
 801701a:	4619      	mov	r1, r3
 801701c:	4820      	ldr	r0, [pc, #128]	; (80170a0 <Get_Config+0x130>)
 801701e:	f00e f99f 	bl	8025360 <iprintf>
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8017022:	4b20      	ldr	r3, [pc, #128]	; (80170a4 <Get_Config+0x134>)
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d121      	bne.n	801706e <Get_Config+0xfe>
 801702a:	e01e      	b.n	801706a <Get_Config+0xfa>
		printf("\n EI Configuration Structure Size:%u\n",(sizeof(EI_t)));
 801702c:	f44f 7156 	mov.w	r1, #856	; 0x358
 8017030:	481d      	ldr	r0, [pc, #116]	; (80170a8 <Get_Config+0x138>)
 8017032:	f00e f995 	bl	8025360 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8017036:	4b1d      	ldr	r3, [pc, #116]	; (80170ac <Get_Config+0x13c>)
 8017038:	4a10      	ldr	r2, [pc, #64]	; (801707c <Get_Config+0x10c>)
 801703a:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 801703c:	4b0e      	ldr	r3, [pc, #56]	; (8017078 <Get_Config+0x108>)
 801703e:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 8017042:	4619      	mov	r1, r3
 8017044:	4b0c      	ldr	r3, [pc, #48]	; (8017078 <Get_Config+0x108>)
 8017046:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 801704a:	461a      	mov	r2, r3
 801704c:	4818      	ldr	r0, [pc, #96]	; (80170b0 <Get_Config+0x140>)
 801704e:	f00e f987 	bl	8025360 <iprintf>
		printf("\nCheck for CRC:");
 8017052:	4818      	ldr	r0, [pc, #96]	; (80170b4 <Get_Config+0x144>)
 8017054:	f00e f984 	bl	8025360 <iprintf>
		gucFlagUpdate =3;
 8017058:	4b17      	ldr	r3, [pc, #92]	; (80170b8 <Get_Config+0x148>)
 801705a:	2203      	movs	r2, #3
 801705c:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 801705e:	4817      	ldr	r0, [pc, #92]	; (80170bc <Get_Config+0x14c>)
 8017060:	f00e fa1a 	bl	8025498 <puts>
			Data_Processing();
 8017064:	f000 f82c 	bl	80170c0 <Data_Processing>
 8017068:	e7fc      	b.n	8017064 <Get_Config+0xf4>
	{
		readCanToStructs();
 801706a:	f7fa f917 	bl	801129c <readCanToStructs>
	}
}
 801706e:	bf00      	nop
 8017070:	3710      	adds	r7, #16
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	200009b8 	.word	0x200009b8
 801707c:	200009bc 	.word	0x200009bc
 8017080:	20000304 	.word	0x20000304
 8017084:	20000d14 	.word	0x20000d14
 8017088:	2000aa06 	.word	0x2000aa06
 801708c:	0802a634 	.word	0x0802a634
 8017090:	20000305 	.word	0x20000305
 8017094:	0802a66c 	.word	0x0802a66c
 8017098:	0802a680 	.word	0x0802a680
 801709c:	2000aa04 	.word	0x2000aa04
 80170a0:	0802a690 	.word	0x0802a690
 80170a4:	20000dbb 	.word	0x20000dbb
 80170a8:	0802a6a4 	.word	0x0802a6a4
 80170ac:	20000300 	.word	0x20000300
 80170b0:	0802a6cc 	.word	0x0802a6cc
 80170b4:	0802a6e0 	.word	0x0802a6e0
 80170b8:	20000db9 	.word	0x20000db9
 80170bc:	0802a6f0 	.word	0x0802a6f0

080170c0 <Data_Processing>:


void Data_Processing(void)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 80170c4:	4b0b      	ldr	r3, [pc, #44]	; (80170f4 <Data_Processing+0x34>)
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	2b03      	cmp	r3, #3
 80170ca:	d10e      	bne.n	80170ea <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 80170cc:	2000      	movs	r0, #0
 80170ce:	f7f4 fdcb 	bl	800bc68 <CheckForRqst>
 80170d2:	4603      	mov	r3, r0
 80170d4:	461a      	mov	r2, r3
 80170d6:	4b08      	ldr	r3, [pc, #32]	; (80170f8 <Data_Processing+0x38>)
 80170d8:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 80170da:	4b07      	ldr	r3, [pc, #28]	; (80170f8 <Data_Processing+0x38>)
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d105      	bne.n	80170ee <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 80170e2:	2000      	movs	r0, #0
 80170e4:	f000 f80a 	bl	80170fc <AutoLoadDat>
		}
		break;
 80170e8:	e001      	b.n	80170ee <Data_Processing+0x2e>
	default:
		break;
 80170ea:	bf00      	nop
 80170ec:	e000      	b.n	80170f0 <Data_Processing+0x30>
		break;
 80170ee:	bf00      	nop
	}
}
 80170f0:	bf00      	nop
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	20000db9 	.word	0x20000db9
 80170f8:	20000dba 	.word	0x20000dba

080170fc <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b084      	sub	sp, #16
 8017100:	af00      	add	r7, sp, #0
 8017102:	4603      	mov	r3, r0
 8017104:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 8017106:	2300      	movs	r3, #0
 8017108:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 801710a:	79fb      	ldrb	r3, [r7, #7]
 801710c:	b29b      	uxth	r3, r3
 801710e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017112:	4934      	ldr	r1, [pc, #208]	; (80171e4 <AutoLoadDat+0xe8>)
 8017114:	4618      	mov	r0, r3
 8017116:	f7f4 ff4f 	bl	800bfb8 <ReadAndFormConfig>
 801711a:	4603      	mov	r3, r0
 801711c:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 801711e:	4832      	ldr	r0, [pc, #200]	; (80171e8 <AutoLoadDat+0xec>)
 8017120:	f004 fc7a 	bl	801ba18 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 8017124:	7bbb      	ldrb	r3, [r7, #14]
 8017126:	2b01      	cmp	r3, #1
 8017128:	d921      	bls.n	801716e <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 801712a:	4b30      	ldr	r3, [pc, #192]	; (80171ec <AutoLoadDat+0xf0>)
 801712c:	2200      	movs	r2, #0
 801712e:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8017130:	4b2c      	ldr	r3, [pc, #176]	; (80171e4 <AutoLoadDat+0xe8>)
 8017132:	785b      	ldrb	r3, [r3, #1]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d107      	bne.n	8017148 <AutoLoadDat+0x4c>
 8017138:	4b2a      	ldr	r3, [pc, #168]	; (80171e4 <AutoLoadDat+0xe8>)
 801713a:	789b      	ldrb	r3, [r3, #2]
 801713c:	2b01      	cmp	r3, #1
 801713e:	d103      	bne.n	8017148 <AutoLoadDat+0x4c>
 8017140:	4b28      	ldr	r3, [pc, #160]	; (80171e4 <AutoLoadDat+0xe8>)
 8017142:	78db      	ldrb	r3, [r3, #3]
 8017144:	2b04      	cmp	r3, #4
 8017146:	d003      	beq.n	8017150 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8017148:	4829      	ldr	r0, [pc, #164]	; (80171f0 <AutoLoadDat+0xf4>)
 801714a:	f00e f9a5 	bl	8025498 <puts>
				return;
 801714e:	e046      	b.n	80171de <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8017150:	4b28      	ldr	r3, [pc, #160]	; (80171f4 <AutoLoadDat+0xf8>)
 8017152:	4a29      	ldr	r2, [pc, #164]	; (80171f8 <AutoLoadDat+0xfc>)
 8017154:	601a      	str	r2, [r3, #0]
			saveConfig();
 8017156:	f000 f85b 	bl	8017210 <saveConfig>
			gucFlagCheck =1;
 801715a:	4b28      	ldr	r3, [pc, #160]	; (80171fc <AutoLoadDat+0x100>)
 801715c:	2201      	movs	r2, #1
 801715e:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8017160:	4b27      	ldr	r3, [pc, #156]	; (8017200 <AutoLoadDat+0x104>)
 8017162:	2201      	movs	r2, #1
 8017164:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 8017166:	4827      	ldr	r0, [pc, #156]	; (8017204 <AutoLoadDat+0x108>)
 8017168:	f00e f996 	bl	8025498 <puts>
			break;
 801716c:	e037      	b.n	80171de <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 801716e:	7bbb      	ldrb	r3, [r7, #14]
 8017170:	2b01      	cmp	r3, #1
 8017172:	d11b      	bne.n	80171ac <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 8017174:	7bfb      	ldrb	r3, [r7, #15]
 8017176:	2b03      	cmp	r3, #3
 8017178:	d109      	bne.n	801718e <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 801717a:	4b1c      	ldr	r3, [pc, #112]	; (80171ec <AutoLoadDat+0xf0>)
 801717c:	2200      	movs	r2, #0
 801717e:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 8017180:	79fb      	ldrb	r3, [r7, #7]
 8017182:	2203      	movs	r2, #3
 8017184:	2101      	movs	r1, #1
 8017186:	4618      	mov	r0, r3
 8017188:	f7f4 feca 	bl	800bf20 <SendAck>
				break;
 801718c:	e027      	b.n	80171de <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 801718e:	79fb      	ldrb	r3, [r7, #7]
 8017190:	2202      	movs	r2, #2
 8017192:	2101      	movs	r1, #1
 8017194:	4618      	mov	r0, r3
 8017196:	f7f4 fec3 	bl	800bf20 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 801719a:	f001 f8d7 	bl	801834c <HAL_GetTick>
 801719e:	4603      	mov	r3, r0
 80171a0:	4a19      	ldr	r2, [pc, #100]	; (8017208 <AutoLoadDat+0x10c>)
 80171a2:	6013      	str	r3, [r2, #0]
			AckCount++;
 80171a4:	7bfb      	ldrb	r3, [r7, #15]
 80171a6:	3301      	adds	r3, #1
 80171a8:	73fb      	strb	r3, [r7, #15]
 80171aa:	e7ae      	b.n	801710a <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 80171ac:	f001 f8ce 	bl	801834c <HAL_GetTick>
 80171b0:	4602      	mov	r2, r0
 80171b2:	4b15      	ldr	r3, [pc, #84]	; (8017208 <AutoLoadDat+0x10c>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	1ad3      	subs	r3, r2, r3
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	bfb8      	it	lt
 80171bc:	425b      	neglt	r3, r3
 80171be:	f247 5230 	movw	r2, #30000	; 0x7530
 80171c2:	4293      	cmp	r3, r2
 80171c4:	dda1      	ble.n	801710a <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 80171c6:	4b09      	ldr	r3, [pc, #36]	; (80171ec <AutoLoadDat+0xf0>)
 80171c8:	2200      	movs	r2, #0
 80171ca:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 80171cc:	480f      	ldr	r0, [pc, #60]	; (801720c <AutoLoadDat+0x110>)
 80171ce:	f00e f963 	bl	8025498 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 80171d2:	79fb      	ldrb	r3, [r7, #7]
 80171d4:	2205      	movs	r2, #5
 80171d6:	2101      	movs	r1, #1
 80171d8:	4618      	mov	r0, r3
 80171da:	f7f4 fea1 	bl	800bf20 <SendAck>
				break;
			}
		}
	}
}
 80171de:	3710      	adds	r7, #16
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	200009b8 	.word	0x200009b8
 80171e8:	2000a160 	.word	0x2000a160
 80171ec:	20000dba 	.word	0x20000dba
 80171f0:	0802a730 	.word	0x0802a730
 80171f4:	20000300 	.word	0x20000300
 80171f8:	200009bc 	.word	0x200009bc
 80171fc:	2000a9f0 	.word	0x2000a9f0
 8017200:	2000a9f1 	.word	0x2000a9f1
 8017204:	0802a748 	.word	0x0802a748
 8017208:	20000dbc 	.word	0x20000dbc
 801720c:	0802a758 	.word	0x0802a758

08017210 <saveConfig>:

unsigned char saveConfig(void)
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b084      	sub	sp, #16
 8017214:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 8017216:	2300      	movs	r3, #0
 8017218:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 801721a:	4825      	ldr	r0, [pc, #148]	; (80172b0 <saveConfig+0xa0>)
 801721c:	f00e f93c 	bl	8025498 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8017220:	2300      	movs	r3, #0
 8017222:	60fb      	str	r3, [r7, #12]
 8017224:	e011      	b.n	801724a <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	031b      	lsls	r3, r3, #12
 801722a:	4619      	mov	r1, r3
 801722c:	2001      	movs	r0, #1
 801722e:	f7ff fd0f 	bl	8016c50 <SPI_MemoryEraseBySector>
 8017232:	4603      	mov	r3, r0
 8017234:	2b00      	cmp	r3, #0
 8017236:	d005      	beq.n	8017244 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8017238:	481e      	ldr	r0, [pc, #120]	; (80172b4 <saveConfig+0xa4>)
 801723a:	f004 fbed 	bl	801ba18 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 801723e:	481e      	ldr	r0, [pc, #120]	; (80172b8 <saveConfig+0xa8>)
 8017240:	f00e f92a 	bl	8025498 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	3301      	adds	r3, #1
 8017248:	60fb      	str	r3, [r7, #12]
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	2b05      	cmp	r3, #5
 801724e:	d9ea      	bls.n	8017226 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8017250:	f240 335f 	movw	r3, #863	; 0x35f
 8017254:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 801725a:	2300      	movs	r3, #0
 801725c:	60fb      	str	r3, [r7, #12]
 801725e:	e01d      	b.n	801729c <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8017260:	4814      	ldr	r0, [pc, #80]	; (80172b4 <saveConfig+0xa4>)
 8017262:	f004 fbd9 	bl	801ba18 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	2b1f      	cmp	r3, #31
 801726a:	d809      	bhi.n	8017280 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	b29a      	uxth	r2, r3
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	4912      	ldr	r1, [pc, #72]	; (80172bc <saveConfig+0xac>)
 8017274:	440b      	add	r3, r1
 8017276:	68f9      	ldr	r1, [r7, #12]
 8017278:	2001      	movs	r0, #1
 801727a:	f7ff fbcb 	bl	8016a14 <SPI_WriteInFlash>
 801727e:	e00a      	b.n	8017296 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	4a0e      	ldr	r2, [pc, #56]	; (80172bc <saveConfig+0xac>)
 8017284:	4413      	add	r3, r2
 8017286:	2220      	movs	r2, #32
 8017288:	68f9      	ldr	r1, [r7, #12]
 801728a:	2001      	movs	r0, #1
 801728c:	f7ff fbc2 	bl	8016a14 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	3b20      	subs	r3, #32
 8017294:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	3320      	adds	r3, #32
 801729a:	60fb      	str	r3, [r7, #12]
 801729c:	68fa      	ldr	r2, [r7, #12]
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d3dd      	bcc.n	8017260 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 80172a4:	4806      	ldr	r0, [pc, #24]	; (80172c0 <saveConfig+0xb0>)
 80172a6:	f00e f85b 	bl	8025360 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 80172aa:	f7ff fadf 	bl	801686c <__NVIC_SystemReset>
 80172ae:	bf00      	nop
 80172b0:	0802a774 	.word	0x0802a774
 80172b4:	2000a160 	.word	0x2000a160
 80172b8:	0802a780 	.word	0x0802a780
 80172bc:	200009b8 	.word	0x200009b8
 80172c0:	0802a794 	.word	0x0802a794

080172c4 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 80172c8:	4b14      	ldr	r3, [pc, #80]	; (801731c <Print_BuildDat_Details+0x58>)
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d022      	beq.n	8017316 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 80172d0:	4b13      	ldr	r3, [pc, #76]	; (8017320 <Print_BuildDat_Details+0x5c>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	4618      	mov	r0, r3
 80172d6:	f7f8 fcd3 	bl	800fc80 <HAL_Elaps_Ticks>
 80172da:	4603      	mov	r3, r0
 80172dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80172e0:	4293      	cmp	r3, r2
 80172e2:	d919      	bls.n	8017318 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 80172e4:	480f      	ldr	r0, [pc, #60]	; (8017324 <Print_BuildDat_Details+0x60>)
 80172e6:	f00e f8d7 	bl	8025498 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80172ea:	490f      	ldr	r1, [pc, #60]	; (8017328 <Print_BuildDat_Details+0x64>)
 80172ec:	480f      	ldr	r0, [pc, #60]	; (801732c <Print_BuildDat_Details+0x68>)
 80172ee:	f00e f837 	bl	8025360 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80172f2:	4b0f      	ldr	r3, [pc, #60]	; (8017330 <Print_BuildDat_Details+0x6c>)
 80172f4:	881b      	ldrh	r3, [r3, #0]
 80172f6:	4619      	mov	r1, r3
 80172f8:	480e      	ldr	r0, [pc, #56]	; (8017334 <Print_BuildDat_Details+0x70>)
 80172fa:	f00e f831 	bl	8025360 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 80172fe:	4b0e      	ldr	r3, [pc, #56]	; (8017338 <Print_BuildDat_Details+0x74>)
 8017300:	881b      	ldrh	r3, [r3, #0]
 8017302:	4619      	mov	r1, r3
 8017304:	480d      	ldr	r0, [pc, #52]	; (801733c <Print_BuildDat_Details+0x78>)
 8017306:	f00e f82b 	bl	8025360 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 801730a:	f001 f81f 	bl	801834c <HAL_GetTick>
 801730e:	4603      	mov	r3, r0
 8017310:	4a03      	ldr	r2, [pc, #12]	; (8017320 <Print_BuildDat_Details+0x5c>)
 8017312:	6013      	str	r3, [r2, #0]
 8017314:	e000      	b.n	8017318 <Print_BuildDat_Details+0x54>
		return;
 8017316:	bf00      	nop
	}
}
 8017318:	bd80      	pop	{r7, pc}
 801731a:	bf00      	nop
 801731c:	200009b5 	.word	0x200009b5
 8017320:	2000aa6c 	.word	0x2000aa6c
 8017324:	0802a7b0 	.word	0x0802a7b0
 8017328:	20000305 	.word	0x20000305
 801732c:	0802a66c 	.word	0x0802a66c
 8017330:	2000aa06 	.word	0x2000aa06
 8017334:	0802a680 	.word	0x0802a680
 8017338:	2000aa04 	.word	0x2000aa04
 801733c:	0802a690 	.word	0x0802a690

08017340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b082      	sub	sp, #8
 8017344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8017346:	4b0f      	ldr	r3, [pc, #60]	; (8017384 <HAL_MspInit+0x44>)
 8017348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801734a:	4a0e      	ldr	r2, [pc, #56]	; (8017384 <HAL_MspInit+0x44>)
 801734c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017350:	6413      	str	r3, [r2, #64]	; 0x40
 8017352:	4b0c      	ldr	r3, [pc, #48]	; (8017384 <HAL_MspInit+0x44>)
 8017354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801735a:	607b      	str	r3, [r7, #4]
 801735c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801735e:	4b09      	ldr	r3, [pc, #36]	; (8017384 <HAL_MspInit+0x44>)
 8017360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017362:	4a08      	ldr	r2, [pc, #32]	; (8017384 <HAL_MspInit+0x44>)
 8017364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017368:	6453      	str	r3, [r2, #68]	; 0x44
 801736a:	4b06      	ldr	r3, [pc, #24]	; (8017384 <HAL_MspInit+0x44>)
 801736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801736e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017372:	603b      	str	r3, [r7, #0]
 8017374:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8017376:	2004      	movs	r0, #4
 8017378:	f001 ffbe 	bl	80192f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801737c:	bf00      	nop
 801737e:	3708      	adds	r7, #8
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}
 8017384:	40023800 	.word	0x40023800

08017388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017388:	b480      	push	{r7}
 801738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 801738c:	e7fe      	b.n	801738c <NMI_Handler+0x4>

0801738e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801738e:	b480      	push	{r7}
 8017390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017392:	e7fe      	b.n	8017392 <HardFault_Handler+0x4>

08017394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017394:	b480      	push	{r7}
 8017396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017398:	e7fe      	b.n	8017398 <MemManage_Handler+0x4>

0801739a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801739a:	b480      	push	{r7}
 801739c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801739e:	e7fe      	b.n	801739e <BusFault_Handler+0x4>

080173a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80173a0:	b480      	push	{r7}
 80173a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80173a4:	e7fe      	b.n	80173a4 <UsageFault_Handler+0x4>

080173a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80173a6:	b480      	push	{r7}
 80173a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80173aa:	bf00      	nop
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80173b4:	b480      	push	{r7}
 80173b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80173b8:	bf00      	nop
 80173ba:	46bd      	mov	sp, r7
 80173bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c0:	4770      	bx	lr

080173c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80173c2:	b480      	push	{r7}
 80173c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80173c6:	bf00      	nop
 80173c8:	46bd      	mov	sp, r7
 80173ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ce:	4770      	bx	lr

080173d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80173d4:	f000 ffa6 	bl	8018324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80173d8:	bf00      	nop
 80173da:	bd80      	pop	{r7, pc}

080173dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 80173e0:	2001      	movs	r0, #1
 80173e2:	f003 fcb7 	bl	801ad54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80173e6:	bf00      	nop
 80173e8:	bd80      	pop	{r7, pc}

080173ea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80173ea:	b580      	push	{r7, lr}
 80173ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 80173ee:	2002      	movs	r0, #2
 80173f0:	f003 fcb0 	bl	801ad54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80173f4:	bf00      	nop
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80173fc:	4802      	ldr	r0, [pc, #8]	; (8017408 <TIM4_IRQHandler+0x10>)
 80173fe:	f006 fbcd 	bl	801db9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8017402:	bf00      	nop
 8017404:	bd80      	pop	{r7, pc}
 8017406:	bf00      	nop
 8017408:	2000aa74 	.word	0x2000aa74

0801740c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8017410:	4802      	ldr	r0, [pc, #8]	; (801741c <USART1_IRQHandler+0x10>)
 8017412:	f006 fde7 	bl	801dfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8017416:	bf00      	nop
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	2000c9ac 	.word	0x2000c9ac

08017420 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8017424:	4802      	ldr	r0, [pc, #8]	; (8017430 <TIM5_IRQHandler+0x10>)
 8017426:	f006 fbb9 	bl	801db9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 801742a:	bf00      	nop
 801742c:	bd80      	pop	{r7, pc}
 801742e:	bf00      	nop
 8017430:	2000ab30 	.word	0x2000ab30

08017434 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8017438:	4802      	ldr	r0, [pc, #8]	; (8017444 <UART4_IRQHandler+0x10>)
 801743a:	f006 fdd3 	bl	801dfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 801743e:	bf00      	nop
 8017440:	bd80      	pop	{r7, pc}
 8017442:	bf00      	nop
 8017444:	2000c784 	.word	0x2000c784

08017448 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801744c:	4802      	ldr	r0, [pc, #8]	; (8017458 <UART5_IRQHandler+0x10>)
 801744e:	f006 fdc9 	bl	801dfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8017452:	bf00      	nop
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	2000c83c 	.word	0x2000c83c

0801745c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017460:	4802      	ldr	r0, [pc, #8]	; (801746c <TIM6_DAC_IRQHandler+0x10>)
 8017462:	f006 fb9b 	bl	801db9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017466:	bf00      	nop
 8017468:	bd80      	pop	{r7, pc}
 801746a:	bf00      	nop
 801746c:	2000abec 	.word	0x2000abec

08017470 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8017474:	4802      	ldr	r0, [pc, #8]	; (8017480 <TIM7_IRQHandler+0x10>)
 8017476:	f006 fb91 	bl	801db9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 801747a:	bf00      	nop
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	2000aca8 	.word	0x2000aca8

08017484 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8017488:	4802      	ldr	r0, [pc, #8]	; (8017494 <ETH_IRQHandler+0x10>)
 801748a:	f002 fb85 	bl	8019b98 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801748e:	bf00      	nop
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	200113c0 	.word	0x200113c0

08017498 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 801749c:	4802      	ldr	r0, [pc, #8]	; (80174a8 <CAN2_RX0_IRQHandler+0x10>)
 801749e:	f001 fc27 	bl	8018cf0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80174a2:	bf00      	nop
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	20009fdc 	.word	0x20009fdc

080174ac <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80174b0:	4802      	ldr	r0, [pc, #8]	; (80174bc <CAN2_RX1_IRQHandler+0x10>)
 80174b2:	f001 fc1d 	bl	8018cf0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80174b6:	bf00      	nop
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	bf00      	nop
 80174bc:	20009fdc 	.word	0x20009fdc

080174c0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80174c4:	4802      	ldr	r0, [pc, #8]	; (80174d0 <UART7_IRQHandler+0x10>)
 80174c6:	f006 fd8d 	bl	801dfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80174ca:	bf00      	nop
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	2000c8f4 	.word	0x2000c8f4

080174d4 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80174d8:	4802      	ldr	r0, [pc, #8]	; (80174e4 <CAN3_RX0_IRQHandler+0x10>)
 80174da:	f001 fc09 	bl	8018cf0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80174de:	bf00      	nop
 80174e0:	bd80      	pop	{r7, pc}
 80174e2:	bf00      	nop
 80174e4:	2000a040 	.word	0x2000a040

080174e8 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80174ec:	4802      	ldr	r0, [pc, #8]	; (80174f8 <CAN3_RX1_IRQHandler+0x10>)
 80174ee:	f001 fbff 	bl	8018cf0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80174f2:	bf00      	nop
 80174f4:	bd80      	pop	{r7, pc}
 80174f6:	bf00      	nop
 80174f8:	2000a040 	.word	0x2000a040

080174fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80174fc:	b480      	push	{r7}
 80174fe:	af00      	add	r7, sp, #0
	return 1;
 8017500:	2301      	movs	r3, #1
}
 8017502:	4618      	mov	r0, r3
 8017504:	46bd      	mov	sp, r7
 8017506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750a:	4770      	bx	lr

0801750c <_kill>:

int _kill(int pid, int sig)
{
 801750c:	b480      	push	{r7}
 801750e:	b083      	sub	sp, #12
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8017516:	4b05      	ldr	r3, [pc, #20]	; (801752c <_kill+0x20>)
 8017518:	2216      	movs	r2, #22
 801751a:	601a      	str	r2, [r3, #0]
	return -1;
 801751c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017520:	4618      	mov	r0, r3
 8017522:	370c      	adds	r7, #12
 8017524:	46bd      	mov	sp, r7
 8017526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752a:	4770      	bx	lr
 801752c:	20015004 	.word	0x20015004

08017530 <_exit>:

void _exit (int status)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017538:	f04f 31ff 	mov.w	r1, #4294967295
 801753c:	6878      	ldr	r0, [r7, #4]
 801753e:	f7ff ffe5 	bl	801750c <_kill>
	while (1) {}		/* Make sure we hang here */
 8017542:	e7fe      	b.n	8017542 <_exit+0x12>

08017544 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017550:	2300      	movs	r3, #0
 8017552:	617b      	str	r3, [r7, #20]
 8017554:	e00a      	b.n	801756c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017556:	f3af 8000 	nop.w
 801755a:	4601      	mov	r1, r0
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	1c5a      	adds	r2, r3, #1
 8017560:	60ba      	str	r2, [r7, #8]
 8017562:	b2ca      	uxtb	r2, r1
 8017564:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	3301      	adds	r3, #1
 801756a:	617b      	str	r3, [r7, #20]
 801756c:	697a      	ldr	r2, [r7, #20]
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	429a      	cmp	r2, r3
 8017572:	dbf0      	blt.n	8017556 <_read+0x12>
	}

return len;
 8017574:	687b      	ldr	r3, [r7, #4]
}
 8017576:	4618      	mov	r0, r3
 8017578:	3718      	adds	r7, #24
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801757e:	b580      	push	{r7, lr}
 8017580:	b086      	sub	sp, #24
 8017582:	af00      	add	r7, sp, #0
 8017584:	60f8      	str	r0, [r7, #12]
 8017586:	60b9      	str	r1, [r7, #8]
 8017588:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801758a:	2300      	movs	r3, #0
 801758c:	617b      	str	r3, [r7, #20]
 801758e:	e009      	b.n	80175a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	1c5a      	adds	r2, r3, #1
 8017594:	60ba      	str	r2, [r7, #8]
 8017596:	781b      	ldrb	r3, [r3, #0]
 8017598:	4618      	mov	r0, r3
 801759a:	f7e9 fa7b 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801759e:	697b      	ldr	r3, [r7, #20]
 80175a0:	3301      	adds	r3, #1
 80175a2:	617b      	str	r3, [r7, #20]
 80175a4:	697a      	ldr	r2, [r7, #20]
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	dbf1      	blt.n	8017590 <_write+0x12>
	}
	return len;
 80175ac:	687b      	ldr	r3, [r7, #4]
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	3718      	adds	r7, #24
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bd80      	pop	{r7, pc}

080175b6 <_close>:

int _close(int file)
{
 80175b6:	b480      	push	{r7}
 80175b8:	b083      	sub	sp, #12
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	6078      	str	r0, [r7, #4]
	return -1;
 80175be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80175c2:	4618      	mov	r0, r3
 80175c4:	370c      	adds	r7, #12
 80175c6:	46bd      	mov	sp, r7
 80175c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175cc:	4770      	bx	lr

080175ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80175ce:	b480      	push	{r7}
 80175d0:	b083      	sub	sp, #12
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	6078      	str	r0, [r7, #4]
 80175d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80175de:	605a      	str	r2, [r3, #4]
	return 0;
 80175e0:	2300      	movs	r3, #0
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	370c      	adds	r7, #12
 80175e6:	46bd      	mov	sp, r7
 80175e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ec:	4770      	bx	lr

080175ee <_isatty>:

int _isatty(int file)
{
 80175ee:	b480      	push	{r7}
 80175f0:	b083      	sub	sp, #12
 80175f2:	af00      	add	r7, sp, #0
 80175f4:	6078      	str	r0, [r7, #4]
	return 1;
 80175f6:	2301      	movs	r3, #1
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	370c      	adds	r7, #12
 80175fc:	46bd      	mov	sp, r7
 80175fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017602:	4770      	bx	lr

08017604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017604:	b480      	push	{r7}
 8017606:	b085      	sub	sp, #20
 8017608:	af00      	add	r7, sp, #0
 801760a:	60f8      	str	r0, [r7, #12]
 801760c:	60b9      	str	r1, [r7, #8]
 801760e:	607a      	str	r2, [r7, #4]
	return 0;
 8017610:	2300      	movs	r3, #0
}
 8017612:	4618      	mov	r0, r3
 8017614:	3714      	adds	r7, #20
 8017616:	46bd      	mov	sp, r7
 8017618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761c:	4770      	bx	lr
	...

08017620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017620:	b480      	push	{r7}
 8017622:	b087      	sub	sp, #28
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017628:	4a14      	ldr	r2, [pc, #80]	; (801767c <_sbrk+0x5c>)
 801762a:	4b15      	ldr	r3, [pc, #84]	; (8017680 <_sbrk+0x60>)
 801762c:	1ad3      	subs	r3, r2, r3
 801762e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8017634:	4b13      	ldr	r3, [pc, #76]	; (8017684 <_sbrk+0x64>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d102      	bne.n	8017642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801763c:	4b11      	ldr	r3, [pc, #68]	; (8017684 <_sbrk+0x64>)
 801763e:	4a12      	ldr	r2, [pc, #72]	; (8017688 <_sbrk+0x68>)
 8017640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8017642:	4b10      	ldr	r3, [pc, #64]	; (8017684 <_sbrk+0x64>)
 8017644:	681a      	ldr	r2, [r3, #0]
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	4413      	add	r3, r2
 801764a:	693a      	ldr	r2, [r7, #16]
 801764c:	429a      	cmp	r2, r3
 801764e:	d205      	bcs.n	801765c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8017650:	4b0e      	ldr	r3, [pc, #56]	; (801768c <_sbrk+0x6c>)
 8017652:	220c      	movs	r2, #12
 8017654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017656:	f04f 33ff 	mov.w	r3, #4294967295
 801765a:	e009      	b.n	8017670 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 801765c:	4b09      	ldr	r3, [pc, #36]	; (8017684 <_sbrk+0x64>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8017662:	4b08      	ldr	r3, [pc, #32]	; (8017684 <_sbrk+0x64>)
 8017664:	681a      	ldr	r2, [r3, #0]
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	4413      	add	r3, r2
 801766a:	4a06      	ldr	r2, [pc, #24]	; (8017684 <_sbrk+0x64>)
 801766c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801766e:	68fb      	ldr	r3, [r7, #12]
}
 8017670:	4618      	mov	r0, r3
 8017672:	371c      	adds	r7, #28
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr
 801767c:	20080000 	.word	0x20080000
 8017680:	00000400 	.word	0x00000400
 8017684:	2000aa70 	.word	0x2000aa70
 8017688:	20015010 	.word	0x20015010
 801768c:	20015004 	.word	0x20015004

08017690 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017690:	b480      	push	{r7}
 8017692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017694:	4b06      	ldr	r3, [pc, #24]	; (80176b0 <SystemInit+0x20>)
 8017696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801769a:	4a05      	ldr	r2, [pc, #20]	; (80176b0 <SystemInit+0x20>)
 801769c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80176a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80176a4:	bf00      	nop
 80176a6:	46bd      	mov	sp, r7
 80176a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ac:	4770      	bx	lr
 80176ae:	bf00      	nop
 80176b0:	e000ed00 	.word	0xe000ed00

080176b4 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80176b8:	4b16      	ldr	r3, [pc, #88]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176ba:	4a17      	ldr	r2, [pc, #92]	; (8017718 <MX_USART1_UART_Init+0x64>)
 80176bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80176be:	4b15      	ldr	r3, [pc, #84]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80176c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80176c6:	4b13      	ldr	r3, [pc, #76]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176c8:	2200      	movs	r2, #0
 80176ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80176cc:	4b11      	ldr	r3, [pc, #68]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176ce:	2200      	movs	r2, #0
 80176d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80176d2:	4b10      	ldr	r3, [pc, #64]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176d4:	2200      	movs	r2, #0
 80176d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80176d8:	4b0e      	ldr	r3, [pc, #56]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176da:	220c      	movs	r2, #12
 80176dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80176de:	4b0d      	ldr	r3, [pc, #52]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176e0:	2200      	movs	r2, #0
 80176e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80176e4:	4b0b      	ldr	r3, [pc, #44]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176e6:	2200      	movs	r2, #0
 80176e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80176ea:	4b0a      	ldr	r3, [pc, #40]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176ec:	2200      	movs	r2, #0
 80176ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80176f0:	4b08      	ldr	r3, [pc, #32]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176f2:	2200      	movs	r2, #0
 80176f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80176f6:	4807      	ldr	r0, [pc, #28]	; (8017714 <MX_USART1_UART_Init+0x60>)
 80176f8:	f006 fb92 	bl	801de20 <HAL_UART_Init>
 80176fc:	4603      	mov	r3, r0
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d001      	beq.n	8017706 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8017702:	f7ff f865 	bl	80167d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017706:	2280      	movs	r2, #128	; 0x80
 8017708:	4904      	ldr	r1, [pc, #16]	; (801771c <MX_USART1_UART_Init+0x68>)
 801770a:	4802      	ldr	r0, [pc, #8]	; (8017714 <MX_USART1_UART_Init+0x60>)
 801770c:	f007 fef4 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8017710:	bf00      	nop
 8017712:	bd80      	pop	{r7, pc}
 8017714:	2000c9ac 	.word	0x2000c9ac
 8017718:	40011000 	.word	0x40011000
 801771c:	2000c584 	.word	0x2000c584

08017720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b0b4      	sub	sp, #208	; 0xd0
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017728:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801772c:	2200      	movs	r2, #0
 801772e:	601a      	str	r2, [r3, #0]
 8017730:	605a      	str	r2, [r3, #4]
 8017732:	609a      	str	r2, [r3, #8]
 8017734:	60da      	str	r2, [r3, #12]
 8017736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801773c:	2290      	movs	r2, #144	; 0x90
 801773e:	2100      	movs	r1, #0
 8017740:	4618      	mov	r0, r3
 8017742:	f00d fd25 	bl	8025190 <memset>
  if(uartHandle->Instance==UART4)
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	4aa7      	ldr	r2, [pc, #668]	; (80179e8 <HAL_UART_MspInit+0x2c8>)
 801774c:	4293      	cmp	r3, r2
 801774e:	d145      	bne.n	80177dc <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8017750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017754:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8017756:	2300      	movs	r3, #0
 8017758:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801775a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801775e:	4618      	mov	r0, r3
 8017760:	f004 fdfe 	bl	801c360 <HAL_RCCEx_PeriphCLKConfig>
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	d001      	beq.n	801776e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 801776a:	f7ff f831 	bl	80167d0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 801776e:	4b9f      	ldr	r3, [pc, #636]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017772:	4a9e      	ldr	r2, [pc, #632]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017778:	6413      	str	r3, [r2, #64]	; 0x40
 801777a:	4b9c      	ldr	r3, [pc, #624]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 801777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801777e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017782:	62bb      	str	r3, [r7, #40]	; 0x28
 8017784:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8017786:	4b99      	ldr	r3, [pc, #612]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801778a:	4a98      	ldr	r2, [pc, #608]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 801778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017790:	6313      	str	r3, [r2, #48]	; 0x30
 8017792:	4b96      	ldr	r3, [pc, #600]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801779a:	627b      	str	r3, [r7, #36]	; 0x24
 801779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 801779e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80177a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177a6:	2302      	movs	r3, #2
 80177a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177ac:	2300      	movs	r3, #0
 80177ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80177b2:	2303      	movs	r3, #3
 80177b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80177b8:	2308      	movs	r3, #8
 80177ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80177be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80177c2:	4619      	mov	r1, r3
 80177c4:	488a      	ldr	r0, [pc, #552]	; (80179f0 <HAL_UART_MspInit+0x2d0>)
 80177c6:	f003 f8cd 	bl	801a964 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80177ca:	2200      	movs	r2, #0
 80177cc:	2105      	movs	r1, #5
 80177ce:	2034      	movs	r0, #52	; 0x34
 80177d0:	f001 fd9d 	bl	801930e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80177d4:	2034      	movs	r0, #52	; 0x34
 80177d6:	f001 fdb6 	bl	8019346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80177da:	e100      	b.n	80179de <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	4a84      	ldr	r2, [pc, #528]	; (80179f4 <HAL_UART_MspInit+0x2d4>)
 80177e2:	4293      	cmp	r3, r2
 80177e4:	d167      	bne.n	80178b6 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80177e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80177ec:	2300      	movs	r3, #0
 80177ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80177f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80177f6:	4618      	mov	r0, r3
 80177f8:	f004 fdb2 	bl	801c360 <HAL_RCCEx_PeriphCLKConfig>
 80177fc:	4603      	mov	r3, r0
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d001      	beq.n	8017806 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8017802:	f7fe ffe5 	bl	80167d0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8017806:	4b79      	ldr	r3, [pc, #484]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801780a:	4a78      	ldr	r2, [pc, #480]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 801780c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017810:	6413      	str	r3, [r2, #64]	; 0x40
 8017812:	4b76      	ldr	r3, [pc, #472]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801781a:	623b      	str	r3, [r7, #32]
 801781c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801781e:	4b73      	ldr	r3, [pc, #460]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017822:	4a72      	ldr	r2, [pc, #456]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017824:	f043 0308 	orr.w	r3, r3, #8
 8017828:	6313      	str	r3, [r2, #48]	; 0x30
 801782a:	4b70      	ldr	r3, [pc, #448]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 801782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801782e:	f003 0308 	and.w	r3, r3, #8
 8017832:	61fb      	str	r3, [r7, #28]
 8017834:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017836:	4b6d      	ldr	r3, [pc, #436]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801783a:	4a6c      	ldr	r2, [pc, #432]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 801783c:	f043 0302 	orr.w	r3, r3, #2
 8017840:	6313      	str	r3, [r2, #48]	; 0x30
 8017842:	4b6a      	ldr	r3, [pc, #424]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017846:	f003 0302 	and.w	r3, r3, #2
 801784a:	61bb      	str	r3, [r7, #24]
 801784c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 801784e:	2304      	movs	r3, #4
 8017850:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017854:	2302      	movs	r3, #2
 8017856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801785a:	2300      	movs	r3, #0
 801785c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017860:	2303      	movs	r3, #3
 8017862:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8017866:	2308      	movs	r3, #8
 8017868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 801786c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8017870:	4619      	mov	r1, r3
 8017872:	4861      	ldr	r0, [pc, #388]	; (80179f8 <HAL_UART_MspInit+0x2d8>)
 8017874:	f003 f876 	bl	801a964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8017878:	f44f 7300 	mov.w	r3, #512	; 0x200
 801787c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017880:	2302      	movs	r3, #2
 8017882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017886:	2300      	movs	r3, #0
 8017888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801788c:	2303      	movs	r3, #3
 801788e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8017892:	2307      	movs	r3, #7
 8017894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8017898:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801789c:	4619      	mov	r1, r3
 801789e:	4857      	ldr	r0, [pc, #348]	; (80179fc <HAL_UART_MspInit+0x2dc>)
 80178a0:	f003 f860 	bl	801a964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80178a4:	2200      	movs	r2, #0
 80178a6:	2105      	movs	r1, #5
 80178a8:	2035      	movs	r0, #53	; 0x35
 80178aa:	f001 fd30 	bl	801930e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80178ae:	2035      	movs	r0, #53	; 0x35
 80178b0:	f001 fd49 	bl	8019346 <HAL_NVIC_EnableIRQ>
}
 80178b4:	e093      	b.n	80179de <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	4a51      	ldr	r2, [pc, #324]	; (8017a00 <HAL_UART_MspInit+0x2e0>)
 80178bc:	4293      	cmp	r3, r2
 80178be:	d145      	bne.n	801794c <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80178c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80178c6:	2300      	movs	r3, #0
 80178c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80178cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80178d0:	4618      	mov	r0, r3
 80178d2:	f004 fd45 	bl	801c360 <HAL_RCCEx_PeriphCLKConfig>
 80178d6:	4603      	mov	r3, r0
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d001      	beq.n	80178e0 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 80178dc:	f7fe ff78 	bl	80167d0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80178e0:	4b42      	ldr	r3, [pc, #264]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 80178e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178e4:	4a41      	ldr	r2, [pc, #260]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 80178e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80178ea:	6413      	str	r3, [r2, #64]	; 0x40
 80178ec:	4b3f      	ldr	r3, [pc, #252]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 80178ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80178f4:	617b      	str	r3, [r7, #20]
 80178f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80178f8:	4b3c      	ldr	r3, [pc, #240]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 80178fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178fc:	4a3b      	ldr	r2, [pc, #236]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 80178fe:	f043 0320 	orr.w	r3, r3, #32
 8017902:	6313      	str	r3, [r2, #48]	; 0x30
 8017904:	4b39      	ldr	r3, [pc, #228]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017908:	f003 0320 	and.w	r3, r3, #32
 801790c:	613b      	str	r3, [r7, #16]
 801790e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8017910:	23c0      	movs	r3, #192	; 0xc0
 8017912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017916:	2302      	movs	r3, #2
 8017918:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801791c:	2300      	movs	r3, #0
 801791e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017922:	2303      	movs	r3, #3
 8017924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8017928:	2308      	movs	r3, #8
 801792a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801792e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8017932:	4619      	mov	r1, r3
 8017934:	4833      	ldr	r0, [pc, #204]	; (8017a04 <HAL_UART_MspInit+0x2e4>)
 8017936:	f003 f815 	bl	801a964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 801793a:	2200      	movs	r2, #0
 801793c:	2105      	movs	r1, #5
 801793e:	2052      	movs	r0, #82	; 0x52
 8017940:	f001 fce5 	bl	801930e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8017944:	2052      	movs	r0, #82	; 0x52
 8017946:	f001 fcfe 	bl	8019346 <HAL_NVIC_EnableIRQ>
}
 801794a:	e048      	b.n	80179de <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	4a2d      	ldr	r2, [pc, #180]	; (8017a08 <HAL_UART_MspInit+0x2e8>)
 8017952:	4293      	cmp	r3, r2
 8017954:	d143      	bne.n	80179de <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017956:	2340      	movs	r3, #64	; 0x40
 8017958:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801795a:	2300      	movs	r3, #0
 801795c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801795e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017962:	4618      	mov	r0, r3
 8017964:	f004 fcfc 	bl	801c360 <HAL_RCCEx_PeriphCLKConfig>
 8017968:	4603      	mov	r3, r0
 801796a:	2b00      	cmp	r3, #0
 801796c:	d001      	beq.n	8017972 <HAL_UART_MspInit+0x252>
      Error_Handler();
 801796e:	f7fe ff2f 	bl	80167d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8017972:	4b1e      	ldr	r3, [pc, #120]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017976:	4a1d      	ldr	r2, [pc, #116]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017978:	f043 0310 	orr.w	r3, r3, #16
 801797c:	6453      	str	r3, [r2, #68]	; 0x44
 801797e:	4b1b      	ldr	r3, [pc, #108]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017982:	f003 0310 	and.w	r3, r3, #16
 8017986:	60fb      	str	r3, [r7, #12]
 8017988:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801798a:	4b18      	ldr	r3, [pc, #96]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 801798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801798e:	4a17      	ldr	r2, [pc, #92]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017990:	f043 0301 	orr.w	r3, r3, #1
 8017994:	6313      	str	r3, [r2, #48]	; 0x30
 8017996:	4b15      	ldr	r3, [pc, #84]	; (80179ec <HAL_UART_MspInit+0x2cc>)
 8017998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801799a:	f003 0301 	and.w	r3, r3, #1
 801799e:	60bb      	str	r3, [r7, #8]
 80179a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80179a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80179a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179aa:	2302      	movs	r3, #2
 80179ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80179b0:	2300      	movs	r3, #0
 80179b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80179b6:	2303      	movs	r3, #3
 80179b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80179bc:	2307      	movs	r3, #7
 80179be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80179c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80179c6:	4619      	mov	r1, r3
 80179c8:	4810      	ldr	r0, [pc, #64]	; (8017a0c <HAL_UART_MspInit+0x2ec>)
 80179ca:	f002 ffcb 	bl	801a964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80179ce:	2200      	movs	r2, #0
 80179d0:	2107      	movs	r1, #7
 80179d2:	2025      	movs	r0, #37	; 0x25
 80179d4:	f001 fc9b 	bl	801930e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80179d8:	2025      	movs	r0, #37	; 0x25
 80179da:	f001 fcb4 	bl	8019346 <HAL_NVIC_EnableIRQ>
}
 80179de:	bf00      	nop
 80179e0:	37d0      	adds	r7, #208	; 0xd0
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}
 80179e6:	bf00      	nop
 80179e8:	40004c00 	.word	0x40004c00
 80179ec:	40023800 	.word	0x40023800
 80179f0:	40021c00 	.word	0x40021c00
 80179f4:	40005000 	.word	0x40005000
 80179f8:	40020c00 	.word	0x40020c00
 80179fc:	40020400 	.word	0x40020400
 8017a00:	40007800 	.word	0x40007800
 8017a04:	40021400 	.word	0x40021400
 8017a08:	40011000 	.word	0x40011000
 8017a0c:	40020000 	.word	0x40020000

08017a10 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b082      	sub	sp, #8
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8017a18:	4b17      	ldr	r3, [pc, #92]	; (8017a78 <UART4_Init+0x68>)
 8017a1a:	4a18      	ldr	r2, [pc, #96]	; (8017a7c <UART4_Init+0x6c>)
 8017a1c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8017a1e:	4a16      	ldr	r2, [pc, #88]	; (8017a78 <UART4_Init+0x68>)
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8017a24:	4b14      	ldr	r3, [pc, #80]	; (8017a78 <UART4_Init+0x68>)
 8017a26:	2200      	movs	r2, #0
 8017a28:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8017a2a:	4b13      	ldr	r3, [pc, #76]	; (8017a78 <UART4_Init+0x68>)
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8017a30:	4b11      	ldr	r3, [pc, #68]	; (8017a78 <UART4_Init+0x68>)
 8017a32:	2200      	movs	r2, #0
 8017a34:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8017a36:	4b10      	ldr	r3, [pc, #64]	; (8017a78 <UART4_Init+0x68>)
 8017a38:	220c      	movs	r2, #12
 8017a3a:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017a3c:	4b0e      	ldr	r3, [pc, #56]	; (8017a78 <UART4_Init+0x68>)
 8017a3e:	2200      	movs	r2, #0
 8017a40:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8017a42:	4b0d      	ldr	r3, [pc, #52]	; (8017a78 <UART4_Init+0x68>)
 8017a44:	2200      	movs	r2, #0
 8017a46:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017a48:	4b0b      	ldr	r3, [pc, #44]	; (8017a78 <UART4_Init+0x68>)
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017a4e:	4b0a      	ldr	r3, [pc, #40]	; (8017a78 <UART4_Init+0x68>)
 8017a50:	2200      	movs	r2, #0
 8017a52:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8017a54:	4808      	ldr	r0, [pc, #32]	; (8017a78 <UART4_Init+0x68>)
 8017a56:	f006 f9e3 	bl	801de20 <HAL_UART_Init>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d001      	beq.n	8017a64 <UART4_Init+0x54>
	{
		Error_Handler();
 8017a60:	f7fe feb6 	bl	80167d0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017a64:	2280      	movs	r2, #128	; 0x80
 8017a66:	4906      	ldr	r1, [pc, #24]	; (8017a80 <UART4_Init+0x70>)
 8017a68:	4803      	ldr	r0, [pc, #12]	; (8017a78 <UART4_Init+0x68>)
 8017a6a:	f007 fd45 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8017a6e:	bf00      	nop
 8017a70:	3708      	adds	r7, #8
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}
 8017a76:	bf00      	nop
 8017a78:	2000c784 	.word	0x2000c784
 8017a7c:	40004c00 	.word	0x40004c00
 8017a80:	2000c704 	.word	0x2000c704

08017a84 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	460b      	mov	r3, r1
 8017a8e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	4a68      	ldr	r2, [pc, #416]	; (8017c38 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8017a96:	4293      	cmp	r3, r2
 8017a98:	d129      	bne.n	8017aee <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017a9a:	2280      	movs	r2, #128	; 0x80
 8017a9c:	4967      	ldr	r1, [pc, #412]	; (8017c3c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8017a9e:	4868      	ldr	r0, [pc, #416]	; (8017c40 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8017aa0:	f007 fd2a 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	81fb      	strh	r3, [r7, #14]
 8017aa8:	e017      	b.n	8017ada <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8017aaa:	89fa      	ldrh	r2, [r7, #14]
 8017aac:	4b65      	ldr	r3, [pc, #404]	; (8017c44 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8017aae:	881b      	ldrh	r3, [r3, #0]
 8017ab0:	1c59      	adds	r1, r3, #1
 8017ab2:	b288      	uxth	r0, r1
 8017ab4:	4963      	ldr	r1, [pc, #396]	; (8017c44 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8017ab6:	8008      	strh	r0, [r1, #0]
 8017ab8:	4619      	mov	r1, r3
 8017aba:	4b60      	ldr	r3, [pc, #384]	; (8017c3c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8017abc:	5c9a      	ldrb	r2, [r3, r2]
 8017abe:	4b61      	ldr	r3, [pc, #388]	; (8017c44 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8017ac0:	440b      	add	r3, r1
 8017ac2:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8017ac4:	4b5f      	ldr	r3, [pc, #380]	; (8017c44 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8017ac6:	881b      	ldrh	r3, [r3, #0]
 8017ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017acc:	d302      	bcc.n	8017ad4 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8017ace:	4b5d      	ldr	r3, [pc, #372]	; (8017c44 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8017ad4:	89fb      	ldrh	r3, [r7, #14]
 8017ad6:	3301      	adds	r3, #1
 8017ad8:	81fb      	strh	r3, [r7, #14]
 8017ada:	89fa      	ldrh	r2, [r7, #14]
 8017adc:	887b      	ldrh	r3, [r7, #2]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d3e3      	bcc.n	8017aaa <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 8017ae2:	f000 fc33 	bl	801834c <HAL_GetTick>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	4a57      	ldr	r2, [pc, #348]	; (8017c48 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8017aea:	6013      	str	r3, [r2, #0]
		{
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8017aec:	e0a0      	b.n	8017c30 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART5)
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	4a56      	ldr	r2, [pc, #344]	; (8017c4c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8017af4:	4293      	cmp	r3, r2
 8017af6:	d129      	bne.n	8017b4c <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017af8:	2280      	movs	r2, #128	; 0x80
 8017afa:	4955      	ldr	r1, [pc, #340]	; (8017c50 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8017afc:	4855      	ldr	r0, [pc, #340]	; (8017c54 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8017afe:	f007 fcfb 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8017b02:	2300      	movs	r3, #0
 8017b04:	81bb      	strh	r3, [r7, #12]
 8017b06:	e01c      	b.n	8017b42 <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8017b08:	89ba      	ldrh	r2, [r7, #12]
 8017b0a:	4b53      	ldr	r3, [pc, #332]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b0c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8017b10:	1c59      	adds	r1, r3, #1
 8017b12:	b288      	uxth	r0, r1
 8017b14:	4950      	ldr	r1, [pc, #320]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b16:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	4b4c      	ldr	r3, [pc, #304]	; (8017c50 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8017b1e:	5c9a      	ldrb	r2, [r3, r2]
 8017b20:	4b4d      	ldr	r3, [pc, #308]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b22:	440b      	add	r3, r1
 8017b24:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8017b28:	4b4b      	ldr	r3, [pc, #300]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b2a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8017b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017b32:	d303      	bcc.n	8017b3c <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8017b34:	4b48      	ldr	r3, [pc, #288]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b36:	2200      	movs	r2, #0
 8017b38:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8017b3c:	89bb      	ldrh	r3, [r7, #12]
 8017b3e:	3301      	adds	r3, #1
 8017b40:	81bb      	strh	r3, [r7, #12]
 8017b42:	89ba      	ldrh	r2, [r7, #12]
 8017b44:	887b      	ldrh	r3, [r7, #2]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d3de      	bcc.n	8017b08 <HAL_UARTEx_RxEventCallback+0x84>
}
 8017b4a:	e071      	b.n	8017c30 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART7)
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	4a42      	ldr	r2, [pc, #264]	; (8017c5c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8017b52:	4293      	cmp	r3, r2
 8017b54:	d129      	bne.n	8017baa <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017b56:	2280      	movs	r2, #128	; 0x80
 8017b58:	4941      	ldr	r1, [pc, #260]	; (8017c60 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8017b5a:	4842      	ldr	r0, [pc, #264]	; (8017c64 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8017b5c:	f007 fccc 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8017b60:	2300      	movs	r3, #0
 8017b62:	817b      	strh	r3, [r7, #10]
 8017b64:	e01c      	b.n	8017ba0 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8017b66:	897a      	ldrh	r2, [r7, #10]
 8017b68:	4b3b      	ldr	r3, [pc, #236]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b6a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8017b6e:	1c59      	adds	r1, r3, #1
 8017b70:	b288      	uxth	r0, r1
 8017b72:	4939      	ldr	r1, [pc, #228]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b74:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8017b78:	4619      	mov	r1, r3
 8017b7a:	4b39      	ldr	r3, [pc, #228]	; (8017c60 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8017b7c:	5c9a      	ldrb	r2, [r3, r2]
 8017b7e:	4b36      	ldr	r3, [pc, #216]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b80:	440b      	add	r3, r1
 8017b82:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8017b86:	4b34      	ldr	r3, [pc, #208]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b88:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8017b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017b90:	d303      	bcc.n	8017b9a <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8017b92:	4b31      	ldr	r3, [pc, #196]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017b94:	2200      	movs	r2, #0
 8017b96:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8017b9a:	897b      	ldrh	r3, [r7, #10]
 8017b9c:	3301      	adds	r3, #1
 8017b9e:	817b      	strh	r3, [r7, #10]
 8017ba0:	897a      	ldrh	r2, [r7, #10]
 8017ba2:	887b      	ldrh	r3, [r7, #2]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d3de      	bcc.n	8017b66 <HAL_UARTEx_RxEventCallback+0xe2>
}
 8017ba8:	e042      	b.n	8017c30 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART4)
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	4a2e      	ldr	r2, [pc, #184]	; (8017c68 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d13d      	bne.n	8017c30 <HAL_UARTEx_RxEventCallback+0x1ac>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017bb4:	2280      	movs	r2, #128	; 0x80
 8017bb6:	492d      	ldr	r1, [pc, #180]	; (8017c6c <HAL_UARTEx_RxEventCallback+0x1e8>)
 8017bb8:	482d      	ldr	r0, [pc, #180]	; (8017c70 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8017bba:	f007 fc9d 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	813b      	strh	r3, [r7, #8]
 8017bc2:	e01c      	b.n	8017bfe <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8017bc4:	893a      	ldrh	r2, [r7, #8]
 8017bc6:	4b24      	ldr	r3, [pc, #144]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017bc8:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8017bcc:	1c59      	adds	r1, r3, #1
 8017bce:	b288      	uxth	r0, r1
 8017bd0:	4921      	ldr	r1, [pc, #132]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017bd2:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8017bd6:	4619      	mov	r1, r3
 8017bd8:	4b24      	ldr	r3, [pc, #144]	; (8017c6c <HAL_UARTEx_RxEventCallback+0x1e8>)
 8017bda:	5c9a      	ldrb	r2, [r3, r2]
 8017bdc:	4b1e      	ldr	r3, [pc, #120]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017bde:	440b      	add	r3, r1
 8017be0:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8017be4:	4b1c      	ldr	r3, [pc, #112]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017be6:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8017bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017bee:	d303      	bcc.n	8017bf8 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8017bf0:	4b19      	ldr	r3, [pc, #100]	; (8017c58 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8017bf8:	893b      	ldrh	r3, [r7, #8]
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	813b      	strh	r3, [r7, #8]
 8017bfe:	893a      	ldrh	r2, [r7, #8]
 8017c00:	887b      	ldrh	r3, [r7, #2]
 8017c02:	429a      	cmp	r2, r3
 8017c04:	d3de      	bcc.n	8017bc4 <HAL_UARTEx_RxEventCallback+0x140>
		if(HAL_Elaps_Ticks(UART4_Intr_Clk) > 50)
 8017c06:	4b1b      	ldr	r3, [pc, #108]	; (8017c74 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7f8 f838 	bl	800fc80 <HAL_Elaps_Ticks>
 8017c10:	4603      	mov	r3, r0
 8017c12:	2b32      	cmp	r3, #50	; 0x32
 8017c14:	d907      	bls.n	8017c26 <HAL_UARTEx_RxEventCallback+0x1a2>
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
 8017c16:	4b17      	ldr	r3, [pc, #92]	; (8017c74 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f7f8 f830 	bl	800fc80 <HAL_Elaps_Ticks>
 8017c20:	4603      	mov	r3, r0
 8017c22:	4a15      	ldr	r2, [pc, #84]	; (8017c78 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8017c24:	6013      	str	r3, [r2, #0]
		UART4_Intr_Clk = HAL_GetTick();
 8017c26:	f000 fb91 	bl	801834c <HAL_GetTick>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	4a11      	ldr	r2, [pc, #68]	; (8017c74 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8017c2e:	6013      	str	r3, [r2, #0]
}
 8017c30:	bf00      	nop
 8017c32:	3710      	adds	r7, #16
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	40011000 	.word	0x40011000
 8017c3c:	2000c584 	.word	0x2000c584
 8017c40:	2000c9ac 	.word	0x2000c9ac
 8017c44:	2000bd80 	.word	0x2000bd80
 8017c48:	2000ad68 	.word	0x2000ad68
 8017c4c:	40005000 	.word	0x40005000
 8017c50:	2000c604 	.word	0x2000c604
 8017c54:	2000c83c 	.word	0x2000c83c
 8017c58:	2000ad70 	.word	0x2000ad70
 8017c5c:	40007800 	.word	0x40007800
 8017c60:	2000c684 	.word	0x2000c684
 8017c64:	2000c8f4 	.word	0x2000c8f4
 8017c68:	40004c00 	.word	0x40004c00
 8017c6c:	2000c704 	.word	0x2000c704
 8017c70:	2000c784 	.word	0x2000c784
 8017c74:	2000ad64 	.word	0x2000ad64
 8017c78:	2000ad6c 	.word	0x2000ad6c

08017c7c <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8017c7c:	b480      	push	{r7}
 8017c7e:	b085      	sub	sp, #20
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	4603      	mov	r3, r0
 8017c84:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8017c86:	2300      	movs	r3, #0
 8017c88:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8017c8a:	79fb      	ldrb	r3, [r7, #7]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d115      	bne.n	8017cbc <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8017c90:	79fa      	ldrb	r2, [r7, #7]
 8017c92:	4918      	ldr	r1, [pc, #96]	; (8017cf4 <Com_DataReady+0x78>)
 8017c94:	4613      	mov	r3, r2
 8017c96:	025b      	lsls	r3, r3, #9
 8017c98:	4413      	add	r3, r2
 8017c9a:	009b      	lsls	r3, r3, #2
 8017c9c:	440b      	add	r3, r1
 8017c9e:	8819      	ldrh	r1, [r3, #0]
 8017ca0:	79fa      	ldrb	r2, [r7, #7]
 8017ca2:	4814      	ldr	r0, [pc, #80]	; (8017cf4 <Com_DataReady+0x78>)
 8017ca4:	4613      	mov	r3, r2
 8017ca6:	025b      	lsls	r3, r3, #9
 8017ca8:	4413      	add	r3, r2
 8017caa:	009b      	lsls	r3, r3, #2
 8017cac:	4403      	add	r3, r0
 8017cae:	3302      	adds	r3, #2
 8017cb0:	881b      	ldrh	r3, [r3, #0]
 8017cb2:	4299      	cmp	r1, r3
 8017cb4:	d017      	beq.n	8017ce6 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	73fb      	strb	r3, [r7, #15]
 8017cba:	e014      	b.n	8017ce6 <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8017cbc:	79fa      	ldrb	r2, [r7, #7]
 8017cbe:	490e      	ldr	r1, [pc, #56]	; (8017cf8 <Com_DataReady+0x7c>)
 8017cc0:	4613      	mov	r3, r2
 8017cc2:	021b      	lsls	r3, r3, #8
 8017cc4:	4413      	add	r3, r2
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	440b      	add	r3, r1
 8017cca:	8819      	ldrh	r1, [r3, #0]
 8017ccc:	79fa      	ldrb	r2, [r7, #7]
 8017cce:	480a      	ldr	r0, [pc, #40]	; (8017cf8 <Com_DataReady+0x7c>)
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	021b      	lsls	r3, r3, #8
 8017cd4:	4413      	add	r3, r2
 8017cd6:	009b      	lsls	r3, r3, #2
 8017cd8:	4403      	add	r3, r0
 8017cda:	3302      	adds	r3, #2
 8017cdc:	881b      	ldrh	r3, [r3, #0]
 8017cde:	4299      	cmp	r1, r3
 8017ce0:	d001      	beq.n	8017ce6 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8017ce2:	2301      	movs	r3, #1
 8017ce4:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8017ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	3714      	adds	r7, #20
 8017cec:	46bd      	mov	sp, r7
 8017cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf2:	4770      	bx	lr
 8017cf4:	2000bd80 	.word	0x2000bd80
 8017cf8:	2000ad70 	.word	0x2000ad70

08017cfc <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8017cfc:	b4b0      	push	{r4, r5, r7}
 8017cfe:	b085      	sub	sp, #20
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	4603      	mov	r3, r0
 8017d04:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8017d06:	2300      	movs	r3, #0
 8017d08:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8017d0a:	79fb      	ldrb	r3, [r7, #7]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d135      	bne.n	8017d7c <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8017d10:	79f9      	ldrb	r1, [r7, #7]
 8017d12:	79fa      	ldrb	r2, [r7, #7]
 8017d14:	4837      	ldr	r0, [pc, #220]	; (8017df4 <Com_Get_Byte+0xf8>)
 8017d16:	4613      	mov	r3, r2
 8017d18:	025b      	lsls	r3, r3, #9
 8017d1a:	4413      	add	r3, r2
 8017d1c:	009b      	lsls	r3, r3, #2
 8017d1e:	4403      	add	r3, r0
 8017d20:	3302      	adds	r3, #2
 8017d22:	8818      	ldrh	r0, [r3, #0]
 8017d24:	1c43      	adds	r3, r0, #1
 8017d26:	b29d      	uxth	r5, r3
 8017d28:	4c32      	ldr	r4, [pc, #200]	; (8017df4 <Com_Get_Byte+0xf8>)
 8017d2a:	4613      	mov	r3, r2
 8017d2c:	025b      	lsls	r3, r3, #9
 8017d2e:	4413      	add	r3, r2
 8017d30:	009b      	lsls	r3, r3, #2
 8017d32:	4423      	add	r3, r4
 8017d34:	3302      	adds	r3, #2
 8017d36:	462a      	mov	r2, r5
 8017d38:	801a      	strh	r2, [r3, #0]
 8017d3a:	4a2e      	ldr	r2, [pc, #184]	; (8017df4 <Com_Get_Byte+0xf8>)
 8017d3c:	460b      	mov	r3, r1
 8017d3e:	025b      	lsls	r3, r3, #9
 8017d40:	440b      	add	r3, r1
 8017d42:	009b      	lsls	r3, r3, #2
 8017d44:	4413      	add	r3, r2
 8017d46:	4403      	add	r3, r0
 8017d48:	3304      	adds	r3, #4
 8017d4a:	781b      	ldrb	r3, [r3, #0]
 8017d4c:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8017d4e:	79fa      	ldrb	r2, [r7, #7]
 8017d50:	4928      	ldr	r1, [pc, #160]	; (8017df4 <Com_Get_Byte+0xf8>)
 8017d52:	4613      	mov	r3, r2
 8017d54:	025b      	lsls	r3, r3, #9
 8017d56:	4413      	add	r3, r2
 8017d58:	009b      	lsls	r3, r3, #2
 8017d5a:	440b      	add	r3, r1
 8017d5c:	3302      	adds	r3, #2
 8017d5e:	881b      	ldrh	r3, [r3, #0]
 8017d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017d64:	d33f      	bcc.n	8017de6 <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8017d66:	79fa      	ldrb	r2, [r7, #7]
 8017d68:	4922      	ldr	r1, [pc, #136]	; (8017df4 <Com_Get_Byte+0xf8>)
 8017d6a:	4613      	mov	r3, r2
 8017d6c:	025b      	lsls	r3, r3, #9
 8017d6e:	4413      	add	r3, r2
 8017d70:	009b      	lsls	r3, r3, #2
 8017d72:	440b      	add	r3, r1
 8017d74:	3302      	adds	r3, #2
 8017d76:	2200      	movs	r2, #0
 8017d78:	801a      	strh	r2, [r3, #0]
 8017d7a:	e034      	b.n	8017de6 <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8017d7c:	79f9      	ldrb	r1, [r7, #7]
 8017d7e:	79fa      	ldrb	r2, [r7, #7]
 8017d80:	481d      	ldr	r0, [pc, #116]	; (8017df8 <Com_Get_Byte+0xfc>)
 8017d82:	4613      	mov	r3, r2
 8017d84:	021b      	lsls	r3, r3, #8
 8017d86:	4413      	add	r3, r2
 8017d88:	009b      	lsls	r3, r3, #2
 8017d8a:	4403      	add	r3, r0
 8017d8c:	3302      	adds	r3, #2
 8017d8e:	8818      	ldrh	r0, [r3, #0]
 8017d90:	1c43      	adds	r3, r0, #1
 8017d92:	b29d      	uxth	r5, r3
 8017d94:	4c18      	ldr	r4, [pc, #96]	; (8017df8 <Com_Get_Byte+0xfc>)
 8017d96:	4613      	mov	r3, r2
 8017d98:	021b      	lsls	r3, r3, #8
 8017d9a:	4413      	add	r3, r2
 8017d9c:	009b      	lsls	r3, r3, #2
 8017d9e:	4423      	add	r3, r4
 8017da0:	3302      	adds	r3, #2
 8017da2:	462a      	mov	r2, r5
 8017da4:	801a      	strh	r2, [r3, #0]
 8017da6:	4a14      	ldr	r2, [pc, #80]	; (8017df8 <Com_Get_Byte+0xfc>)
 8017da8:	460b      	mov	r3, r1
 8017daa:	021b      	lsls	r3, r3, #8
 8017dac:	440b      	add	r3, r1
 8017dae:	009b      	lsls	r3, r3, #2
 8017db0:	4413      	add	r3, r2
 8017db2:	4403      	add	r3, r0
 8017db4:	3304      	adds	r3, #4
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8017dba:	79fa      	ldrb	r2, [r7, #7]
 8017dbc:	490e      	ldr	r1, [pc, #56]	; (8017df8 <Com_Get_Byte+0xfc>)
 8017dbe:	4613      	mov	r3, r2
 8017dc0:	021b      	lsls	r3, r3, #8
 8017dc2:	4413      	add	r3, r2
 8017dc4:	009b      	lsls	r3, r3, #2
 8017dc6:	440b      	add	r3, r1
 8017dc8:	3302      	adds	r3, #2
 8017dca:	881b      	ldrh	r3, [r3, #0]
 8017dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017dd0:	d309      	bcc.n	8017de6 <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8017dd2:	79fa      	ldrb	r2, [r7, #7]
 8017dd4:	4908      	ldr	r1, [pc, #32]	; (8017df8 <Com_Get_Byte+0xfc>)
 8017dd6:	4613      	mov	r3, r2
 8017dd8:	021b      	lsls	r3, r3, #8
 8017dda:	4413      	add	r3, r2
 8017ddc:	009b      	lsls	r3, r3, #2
 8017dde:	440b      	add	r3, r1
 8017de0:	3302      	adds	r3, #2
 8017de2:	2200      	movs	r2, #0
 8017de4:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8017de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	3714      	adds	r7, #20
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bcb0      	pop	{r4, r5, r7}
 8017df0:	4770      	bx	lr
 8017df2:	bf00      	nop
 8017df4:	2000bd80 	.word	0x2000bd80
 8017df8:	2000ad70 	.word	0x2000ad70

08017dfc <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b084      	sub	sp, #16
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	4603      	mov	r3, r0
 8017e04:	6039      	str	r1, [r7, #0]
 8017e06:	71fb      	strb	r3, [r7, #7]
 8017e08:	4613      	mov	r3, r2
 8017e0a:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8017e10:	2300      	movs	r3, #0
 8017e12:	81fb      	strh	r3, [r7, #14]
 8017e14:	e03a      	b.n	8017e8c <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 8017e16:	89fb      	ldrh	r3, [r7, #14]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d00a      	beq.n	8017e32 <CommTransmitMessage+0x36>
 8017e1c:	89fb      	ldrh	r3, [r7, #14]
 8017e1e:	683a      	ldr	r2, [r7, #0]
 8017e20:	4413      	add	r3, r2
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	2b24      	cmp	r3, #36	; 0x24
 8017e26:	d104      	bne.n	8017e32 <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8017e28:	79fb      	ldrb	r3, [r7, #7]
 8017e2a:	2105      	movs	r1, #5
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f000 f835 	bl	8017e9c <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8017e32:	89fb      	ldrh	r3, [r7, #14]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d00e      	beq.n	8017e56 <CommTransmitMessage+0x5a>
 8017e38:	89fa      	ldrh	r2, [r7, #14]
 8017e3a:	88bb      	ldrh	r3, [r7, #4]
 8017e3c:	429a      	cmp	r2, r3
 8017e3e:	d20a      	bcs.n	8017e56 <CommTransmitMessage+0x5a>
 8017e40:	89fb      	ldrh	r3, [r7, #14]
 8017e42:	683a      	ldr	r2, [r7, #0]
 8017e44:	4413      	add	r3, r2
 8017e46:	781b      	ldrb	r3, [r3, #0]
 8017e48:	2b05      	cmp	r3, #5
 8017e4a:	d104      	bne.n	8017e56 <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8017e4c:	79fb      	ldrb	r3, [r7, #7]
 8017e4e:	2105      	movs	r1, #5
 8017e50:	4618      	mov	r0, r3
 8017e52:	f000 f823 	bl	8017e9c <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 8017e56:	89fb      	ldrh	r3, [r7, #14]
 8017e58:	683a      	ldr	r2, [r7, #0]
 8017e5a:	4413      	add	r3, r2
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	2b26      	cmp	r3, #38	; 0x26
 8017e60:	d108      	bne.n	8017e74 <CommTransmitMessage+0x78>
 8017e62:	89fa      	ldrh	r2, [r7, #14]
 8017e64:	88bb      	ldrh	r3, [r7, #4]
 8017e66:	429a      	cmp	r2, r3
 8017e68:	d004      	beq.n	8017e74 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8017e6a:	79fb      	ldrb	r3, [r7, #7]
 8017e6c:	2105      	movs	r1, #5
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f000 f814 	bl	8017e9c <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8017e74:	89fb      	ldrh	r3, [r7, #14]
 8017e76:	683a      	ldr	r2, [r7, #0]
 8017e78:	4413      	add	r3, r2
 8017e7a:	781a      	ldrb	r2, [r3, #0]
 8017e7c:	79fb      	ldrb	r3, [r7, #7]
 8017e7e:	4611      	mov	r1, r2
 8017e80:	4618      	mov	r0, r3
 8017e82:	f000 f80b 	bl	8017e9c <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8017e86:	89fb      	ldrh	r3, [r7, #14]
 8017e88:	3301      	adds	r3, #1
 8017e8a:	81fb      	strh	r3, [r7, #14]
 8017e8c:	89fa      	ldrh	r2, [r7, #14]
 8017e8e:	88bb      	ldrh	r3, [r7, #4]
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d9c0      	bls.n	8017e16 <CommTransmitMessage+0x1a>
	}

	return;
 8017e94:	bf00      	nop
}
 8017e96:	3710      	adds	r7, #16
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	bd80      	pop	{r7, pc}

08017e9c <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b084      	sub	sp, #16
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	460a      	mov	r2, r1
 8017ea6:	71fb      	strb	r3, [r7, #7]
 8017ea8:	4613      	mov	r3, r2
 8017eaa:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8017eac:	1dbb      	adds	r3, r7, #6
 8017eae:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8017eb0:	79fb      	ldrb	r3, [r7, #7]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d107      	bne.n	8017ec6 <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8017eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017eba:	2201      	movs	r2, #1
 8017ebc:	68f9      	ldr	r1, [r7, #12]
 8017ebe:	4816      	ldr	r0, [pc, #88]	; (8017f18 <Com_SendByte+0x7c>)
 8017ec0:	f006 f80c 	bl	801dedc <HAL_UART_Transmit>
 8017ec4:	e01f      	b.n	8017f06 <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8017ec6:	79fb      	ldrb	r3, [r7, #7]
 8017ec8:	2b01      	cmp	r3, #1
 8017eca:	d107      	bne.n	8017edc <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8017ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	68f9      	ldr	r1, [r7, #12]
 8017ed4:	4811      	ldr	r0, [pc, #68]	; (8017f1c <Com_SendByte+0x80>)
 8017ed6:	f006 f801 	bl	801dedc <HAL_UART_Transmit>
 8017eda:	e014      	b.n	8017f06 <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8017edc:	79fb      	ldrb	r3, [r7, #7]
 8017ede:	2b02      	cmp	r3, #2
 8017ee0:	d107      	bne.n	8017ef2 <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 8017ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	68f9      	ldr	r1, [r7, #12]
 8017eea:	480d      	ldr	r0, [pc, #52]	; (8017f20 <Com_SendByte+0x84>)
 8017eec:	f005 fff6 	bl	801dedc <HAL_UART_Transmit>
 8017ef0:	e009      	b.n	8017f06 <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 8017ef2:	79fb      	ldrb	r3, [r7, #7]
 8017ef4:	2b03      	cmp	r3, #3
 8017ef6:	d106      	bne.n	8017f06 <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8017ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017efc:	2201      	movs	r2, #1
 8017efe:	68f9      	ldr	r1, [r7, #12]
 8017f00:	4808      	ldr	r0, [pc, #32]	; (8017f24 <Com_SendByte+0x88>)
 8017f02:	f005 ffeb 	bl	801dedc <HAL_UART_Transmit>
	}

	ptr=NULL;
 8017f06:	2300      	movs	r3, #0
 8017f08:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8017f0a:	68f8      	ldr	r0, [r7, #12]
 8017f0c:	f00d f900 	bl	8025110 <free>
}
 8017f10:	bf00      	nop
 8017f12:	3710      	adds	r7, #16
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	2000c9ac 	.word	0x2000c9ac
 8017f1c:	2000c83c 	.word	0x2000c83c
 8017f20:	2000c8f4 	.word	0x2000c8f4
 8017f24:	2000c784 	.word	0x2000c784

08017f28 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017f2c:	2280      	movs	r2, #128	; 0x80
 8017f2e:	490a      	ldr	r1, [pc, #40]	; (8017f58 <Enable_UART_Interrupts+0x30>)
 8017f30:	480a      	ldr	r0, [pc, #40]	; (8017f5c <Enable_UART_Interrupts+0x34>)
 8017f32:	f007 fae1 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017f36:	2280      	movs	r2, #128	; 0x80
 8017f38:	4909      	ldr	r1, [pc, #36]	; (8017f60 <Enable_UART_Interrupts+0x38>)
 8017f3a:	480a      	ldr	r0, [pc, #40]	; (8017f64 <Enable_UART_Interrupts+0x3c>)
 8017f3c:	f007 fadc 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017f40:	2280      	movs	r2, #128	; 0x80
 8017f42:	4909      	ldr	r1, [pc, #36]	; (8017f68 <Enable_UART_Interrupts+0x40>)
 8017f44:	4809      	ldr	r0, [pc, #36]	; (8017f6c <Enable_UART_Interrupts+0x44>)
 8017f46:	f007 fad7 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017f4a:	2280      	movs	r2, #128	; 0x80
 8017f4c:	4908      	ldr	r1, [pc, #32]	; (8017f70 <Enable_UART_Interrupts+0x48>)
 8017f4e:	4809      	ldr	r0, [pc, #36]	; (8017f74 <Enable_UART_Interrupts+0x4c>)
 8017f50:	f007 fad2 	bl	801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8017f54:	bf00      	nop
 8017f56:	bd80      	pop	{r7, pc}
 8017f58:	2000c584 	.word	0x2000c584
 8017f5c:	2000c9ac 	.word	0x2000c9ac
 8017f60:	2000c604 	.word	0x2000c604
 8017f64:	2000c83c 	.word	0x2000c83c
 8017f68:	2000c684 	.word	0x2000c684
 8017f6c:	2000c8f4 	.word	0x2000c8f4
 8017f70:	2000c704 	.word	0x2000c704
 8017f74:	2000c784 	.word	0x2000c784

08017f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8017f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8017f7c:	480d      	ldr	r0, [pc, #52]	; (8017fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8017f7e:	490e      	ldr	r1, [pc, #56]	; (8017fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8017f80:	4a0e      	ldr	r2, [pc, #56]	; (8017fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8017f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8017f84:	e002      	b.n	8017f8c <LoopCopyDataInit>

08017f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017f8a:	3304      	adds	r3, #4

08017f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017f90:	d3f9      	bcc.n	8017f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017f92:	4a0b      	ldr	r2, [pc, #44]	; (8017fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8017f94:	4c0b      	ldr	r4, [pc, #44]	; (8017fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8017f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017f98:	e001      	b.n	8017f9e <LoopFillZerobss>

08017f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017f9c:	3204      	adds	r2, #4

08017f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017fa0:	d3fb      	bcc.n	8017f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8017fa2:	f7ff fb75 	bl	8017690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017fa6:	f00d f887 	bl	80250b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017faa:	f7fe fa27 	bl	80163fc <main>
  bx  lr    
 8017fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8017fb0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8017fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017fb8:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8017fbc:	0802c474 	.word	0x0802c474
  ldr r2, =_sbss
 8017fc0:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8017fc4:	2001500c 	.word	0x2001500c

08017fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017fc8:	e7fe      	b.n	8017fc8 <ADC_IRQHandler>

08017fca <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8017fca:	b480      	push	{r7}
 8017fcc:	b083      	sub	sp, #12
 8017fce:	af00      	add	r7, sp, #0
 8017fd0:	6078      	str	r0, [r7, #4]
 8017fd2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d00b      	beq.n	8017ff2 <DP83848_RegisterBusIO+0x28>
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	68db      	ldr	r3, [r3, #12]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d007      	beq.n	8017ff2 <DP83848_RegisterBusIO+0x28>
 8017fe2:	683b      	ldr	r3, [r7, #0]
 8017fe4:	689b      	ldr	r3, [r3, #8]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d003      	beq.n	8017ff2 <DP83848_RegisterBusIO+0x28>
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	691b      	ldr	r3, [r3, #16]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d102      	bne.n	8017ff8 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8017ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ff6:	e014      	b.n	8018022 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8017ff8:	683b      	ldr	r3, [r7, #0]
 8017ffa:	681a      	ldr	r2, [r3, #0]
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	685a      	ldr	r2, [r3, #4]
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8018008:	683b      	ldr	r3, [r7, #0]
 801800a:	68da      	ldr	r2, [r3, #12]
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	689a      	ldr	r2, [r3, #8]
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	691a      	ldr	r2, [r3, #16]
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8018020:	2300      	movs	r3, #0
}
 8018022:	4618      	mov	r0, r3
 8018024:	370c      	adds	r7, #12
 8018026:	46bd      	mov	sp, r7
 8018028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802c:	4770      	bx	lr

0801802e <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 801802e:	b580      	push	{r7, lr}
 8018030:	b086      	sub	sp, #24
 8018032:	af00      	add	r7, sp, #0
 8018034:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8018036:	2300      	movs	r3, #0
 8018038:	60fb      	str	r3, [r7, #12]
 801803a:	2300      	movs	r3, #0
 801803c:	60bb      	str	r3, [r7, #8]
 801803e:	2300      	movs	r3, #0
 8018040:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8018042:	2300      	movs	r3, #0
 8018044:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d17c      	bne.n	8018148 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	689b      	ldr	r3, [r3, #8]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d002      	beq.n	801805c <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	689b      	ldr	r3, [r3, #8]
 801805a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2220      	movs	r2, #32
 8018060:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8018062:	2300      	movs	r3, #0
 8018064:	617b      	str	r3, [r7, #20]
 8018066:	e01c      	b.n	80180a2 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	695b      	ldr	r3, [r3, #20]
 801806c:	f107 0208 	add.w	r2, r7, #8
 8018070:	2119      	movs	r1, #25
 8018072:	6978      	ldr	r0, [r7, #20]
 8018074:	4798      	blx	r3
 8018076:	4603      	mov	r3, r0
 8018078:	2b00      	cmp	r3, #0
 801807a:	da03      	bge.n	8018084 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 801807c:	f06f 0304 	mvn.w	r3, #4
 8018080:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8018082:	e00b      	b.n	801809c <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	f003 031f 	and.w	r3, r3, #31
 801808a:	697a      	ldr	r2, [r7, #20]
 801808c:	429a      	cmp	r2, r3
 801808e:	d105      	bne.n	801809c <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	697a      	ldr	r2, [r7, #20]
 8018094:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8018096:	2300      	movs	r3, #0
 8018098:	613b      	str	r3, [r7, #16]
         break;
 801809a:	e005      	b.n	80180a8 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 801809c:	697b      	ldr	r3, [r7, #20]
 801809e:	3301      	adds	r3, #1
 80180a0:	617b      	str	r3, [r7, #20]
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	2b1f      	cmp	r3, #31
 80180a6:	d9df      	bls.n	8018068 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	2b1f      	cmp	r3, #31
 80180ae:	d902      	bls.n	80180b6 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80180b0:	f06f 0302 	mvn.w	r3, #2
 80180b4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80180b6:	693b      	ldr	r3, [r7, #16]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d145      	bne.n	8018148 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	691b      	ldr	r3, [r3, #16]
 80180c0:	687a      	ldr	r2, [r7, #4]
 80180c2:	6810      	ldr	r0, [r2, #0]
 80180c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80180c8:	2100      	movs	r1, #0
 80180ca:	4798      	blx	r3
 80180cc:	4603      	mov	r3, r0
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	db37      	blt.n	8018142 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	695b      	ldr	r3, [r3, #20]
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	6810      	ldr	r0, [r2, #0]
 80180da:	f107 0208 	add.w	r2, r7, #8
 80180de:	2100      	movs	r1, #0
 80180e0:	4798      	blx	r3
 80180e2:	4603      	mov	r3, r0
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	db28      	blt.n	801813a <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	699b      	ldr	r3, [r3, #24]
 80180ec:	4798      	blx	r3
 80180ee:	4603      	mov	r3, r0
 80180f0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80180f2:	e01c      	b.n	801812e <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	699b      	ldr	r3, [r3, #24]
 80180f8:	4798      	blx	r3
 80180fa:	4603      	mov	r3, r0
 80180fc:	461a      	mov	r2, r3
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	1ad3      	subs	r3, r2, r3
 8018102:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8018106:	d80e      	bhi.n	8018126 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	695b      	ldr	r3, [r3, #20]
 801810c:	687a      	ldr	r2, [r7, #4]
 801810e:	6810      	ldr	r0, [r2, #0]
 8018110:	f107 0208 	add.w	r2, r7, #8
 8018114:	2100      	movs	r1, #0
 8018116:	4798      	blx	r3
 8018118:	4603      	mov	r3, r0
 801811a:	2b00      	cmp	r3, #0
 801811c:	da07      	bge.n	801812e <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 801811e:	f06f 0304 	mvn.w	r3, #4
 8018122:	613b      	str	r3, [r7, #16]
                 break;
 8018124:	e010      	b.n	8018148 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8018126:	f06f 0301 	mvn.w	r3, #1
 801812a:	613b      	str	r3, [r7, #16]
               break;
 801812c:	e00c      	b.n	8018148 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018134:	2b00      	cmp	r3, #0
 8018136:	d1dd      	bne.n	80180f4 <DP83848_Init+0xc6>
 8018138:	e006      	b.n	8018148 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 801813a:	f06f 0304 	mvn.w	r3, #4
 801813e:	613b      	str	r3, [r7, #16]
 8018140:	e002      	b.n	8018148 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8018142:	f06f 0303 	mvn.w	r3, #3
 8018146:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d112      	bne.n	8018174 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	699b      	ldr	r3, [r3, #24]
 8018152:	4798      	blx	r3
 8018154:	4603      	mov	r3, r0
 8018156:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8018158:	bf00      	nop
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	699b      	ldr	r3, [r3, #24]
 801815e:	4798      	blx	r3
 8018160:	4603      	mov	r3, r0
 8018162:	461a      	mov	r2, r3
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	1ad3      	subs	r3, r2, r3
 8018168:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801816c:	d9f5      	bls.n	801815a <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	2201      	movs	r2, #1
 8018172:	605a      	str	r2, [r3, #4]
   }

   return status;
 8018174:	693b      	ldr	r3, [r7, #16]
 }
 8018176:	4618      	mov	r0, r3
 8018178:	3718      	adds	r7, #24
 801817a:	46bd      	mov	sp, r7
 801817c:	bd80      	pop	{r7, pc}

0801817e <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 801817e:	b580      	push	{r7, lr}
 8018180:	b084      	sub	sp, #16
 8018182:	af00      	add	r7, sp, #0
 8018184:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8018186:	2300      	movs	r3, #0
 8018188:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	695b      	ldr	r3, [r3, #20]
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	6810      	ldr	r0, [r2, #0]
 8018192:	f107 020c 	add.w	r2, r7, #12
 8018196:	2101      	movs	r1, #1
 8018198:	4798      	blx	r3
 801819a:	4603      	mov	r3, r0
 801819c:	2b00      	cmp	r3, #0
 801819e:	da02      	bge.n	80181a6 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80181a0:	f06f 0304 	mvn.w	r3, #4
 80181a4:	e06e      	b.n	8018284 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	695b      	ldr	r3, [r3, #20]
 80181aa:	687a      	ldr	r2, [r7, #4]
 80181ac:	6810      	ldr	r0, [r2, #0]
 80181ae:	f107 020c 	add.w	r2, r7, #12
 80181b2:	2101      	movs	r1, #1
 80181b4:	4798      	blx	r3
 80181b6:	4603      	mov	r3, r0
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	da02      	bge.n	80181c2 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80181bc:	f06f 0304 	mvn.w	r3, #4
 80181c0:	e060      	b.n	8018284 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	f003 0304 	and.w	r3, r3, #4
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d101      	bne.n	80181d0 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80181cc:	2301      	movs	r3, #1
 80181ce:	e059      	b.n	8018284 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	695b      	ldr	r3, [r3, #20]
 80181d4:	687a      	ldr	r2, [r7, #4]
 80181d6:	6810      	ldr	r0, [r2, #0]
 80181d8:	f107 020c 	add.w	r2, r7, #12
 80181dc:	2100      	movs	r1, #0
 80181de:	4798      	blx	r3
 80181e0:	4603      	mov	r3, r0
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	da02      	bge.n	80181ec <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80181e6:	f06f 0304 	mvn.w	r3, #4
 80181ea:	e04b      	b.n	8018284 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d11b      	bne.n	801822e <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d006      	beq.n	801820e <DP83848_GetLinkState+0x90>
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018206:	2b00      	cmp	r3, #0
 8018208:	d001      	beq.n	801820e <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 801820a:	2302      	movs	r3, #2
 801820c:	e03a      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018214:	2b00      	cmp	r3, #0
 8018216:	d001      	beq.n	801821c <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8018218:	2303      	movs	r3, #3
 801821a:	e033      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018222:	2b00      	cmp	r3, #0
 8018224:	d001      	beq.n	801822a <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8018226:	2304      	movs	r3, #4
 8018228:	e02c      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801822a:	2305      	movs	r3, #5
 801822c:	e02a      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	695b      	ldr	r3, [r3, #20]
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	6810      	ldr	r0, [r2, #0]
 8018236:	f107 020c 	add.w	r2, r7, #12
 801823a:	2110      	movs	r1, #16
 801823c:	4798      	blx	r3
 801823e:	4603      	mov	r3, r0
 8018240:	2b00      	cmp	r3, #0
 8018242:	da02      	bge.n	801824a <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8018244:	f06f 0304 	mvn.w	r3, #4
 8018248:	e01c      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018250:	2b00      	cmp	r3, #0
 8018252:	d101      	bne.n	8018258 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8018254:	2306      	movs	r3, #6
 8018256:	e015      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	f003 0306 	and.w	r3, r3, #6
 801825e:	2b04      	cmp	r3, #4
 8018260:	d101      	bne.n	8018266 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8018262:	2302      	movs	r3, #2
 8018264:	e00e      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	f003 0306 	and.w	r3, r3, #6
 801826c:	2b00      	cmp	r3, #0
 801826e:	d101      	bne.n	8018274 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8018270:	2303      	movs	r3, #3
 8018272:	e007      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	f003 0306 	and.w	r3, r3, #6
 801827a:	2b06      	cmp	r3, #6
 801827c:	d101      	bne.n	8018282 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801827e:	2304      	movs	r3, #4
 8018280:	e000      	b.n	8018284 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8018282:	2305      	movs	r3, #5
    }
  }
}
 8018284:	4618      	mov	r0, r3
 8018286:	3710      	adds	r7, #16
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}

0801828c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8018290:	4b0b      	ldr	r3, [pc, #44]	; (80182c0 <HAL_Init+0x34>)
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	4a0a      	ldr	r2, [pc, #40]	; (80182c0 <HAL_Init+0x34>)
 8018296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801829a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801829c:	4b08      	ldr	r3, [pc, #32]	; (80182c0 <HAL_Init+0x34>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4a07      	ldr	r2, [pc, #28]	; (80182c0 <HAL_Init+0x34>)
 80182a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80182a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80182a8:	2003      	movs	r0, #3
 80182aa:	f001 f825 	bl	80192f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80182ae:	2007      	movs	r0, #7
 80182b0:	f000 f808 	bl	80182c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80182b4:	f7ff f844 	bl	8017340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80182b8:	2300      	movs	r3, #0
}
 80182ba:	4618      	mov	r0, r3
 80182bc:	bd80      	pop	{r7, pc}
 80182be:	bf00      	nop
 80182c0:	40023c00 	.word	0x40023c00

080182c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b082      	sub	sp, #8
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80182cc:	4b12      	ldr	r3, [pc, #72]	; (8018318 <HAL_InitTick+0x54>)
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	4b12      	ldr	r3, [pc, #72]	; (801831c <HAL_InitTick+0x58>)
 80182d2:	781b      	ldrb	r3, [r3, #0]
 80182d4:	4619      	mov	r1, r3
 80182d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80182da:	fbb3 f3f1 	udiv	r3, r3, r1
 80182de:	fbb2 f3f3 	udiv	r3, r2, r3
 80182e2:	4618      	mov	r0, r3
 80182e4:	f001 f83d 	bl	8019362 <HAL_SYSTICK_Config>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d001      	beq.n	80182f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80182ee:	2301      	movs	r3, #1
 80182f0:	e00e      	b.n	8018310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2b0f      	cmp	r3, #15
 80182f6:	d80a      	bhi.n	801830e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80182f8:	2200      	movs	r2, #0
 80182fa:	6879      	ldr	r1, [r7, #4]
 80182fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018300:	f001 f805 	bl	801930e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8018304:	4a06      	ldr	r2, [pc, #24]	; (8018320 <HAL_InitTick+0x5c>)
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801830a:	2300      	movs	r3, #0
 801830c:	e000      	b.n	8018310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801830e:	2301      	movs	r3, #1
}
 8018310:	4618      	mov	r0, r3
 8018312:	3708      	adds	r7, #8
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}
 8018318:	2000011c 	.word	0x2000011c
 801831c:	20000124 	.word	0x20000124
 8018320:	20000120 	.word	0x20000120

08018324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018324:	b480      	push	{r7}
 8018326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018328:	4b06      	ldr	r3, [pc, #24]	; (8018344 <HAL_IncTick+0x20>)
 801832a:	781b      	ldrb	r3, [r3, #0]
 801832c:	461a      	mov	r2, r3
 801832e:	4b06      	ldr	r3, [pc, #24]	; (8018348 <HAL_IncTick+0x24>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4413      	add	r3, r2
 8018334:	4a04      	ldr	r2, [pc, #16]	; (8018348 <HAL_IncTick+0x24>)
 8018336:	6013      	str	r3, [r2, #0]
}
 8018338:	bf00      	nop
 801833a:	46bd      	mov	sp, r7
 801833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018340:	4770      	bx	lr
 8018342:	bf00      	nop
 8018344:	20000124 	.word	0x20000124
 8018348:	2000ca64 	.word	0x2000ca64

0801834c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801834c:	b480      	push	{r7}
 801834e:	af00      	add	r7, sp, #0
  return uwTick;
 8018350:	4b03      	ldr	r3, [pc, #12]	; (8018360 <HAL_GetTick+0x14>)
 8018352:	681b      	ldr	r3, [r3, #0]
}
 8018354:	4618      	mov	r0, r3
 8018356:	46bd      	mov	sp, r7
 8018358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835c:	4770      	bx	lr
 801835e:	bf00      	nop
 8018360:	2000ca64 	.word	0x2000ca64

08018364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b084      	sub	sp, #16
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801836c:	f7ff ffee 	bl	801834c <HAL_GetTick>
 8018370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801837c:	d005      	beq.n	801838a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801837e:	4b0a      	ldr	r3, [pc, #40]	; (80183a8 <HAL_Delay+0x44>)
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	461a      	mov	r2, r3
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	4413      	add	r3, r2
 8018388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801838a:	bf00      	nop
 801838c:	f7ff ffde 	bl	801834c <HAL_GetTick>
 8018390:	4602      	mov	r2, r0
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	1ad3      	subs	r3, r2, r3
 8018396:	68fa      	ldr	r2, [r7, #12]
 8018398:	429a      	cmp	r2, r3
 801839a:	d8f7      	bhi.n	801838c <HAL_Delay+0x28>
  {
  }
}
 801839c:	bf00      	nop
 801839e:	bf00      	nop
 80183a0:	3710      	adds	r7, #16
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd80      	pop	{r7, pc}
 80183a6:	bf00      	nop
 80183a8:	20000124 	.word	0x20000124

080183ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b084      	sub	sp, #16
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d101      	bne.n	80183be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80183ba:	2301      	movs	r3, #1
 80183bc:	e11c      	b.n	80185f8 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d131      	bne.n	801842e <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	4a8c      	ldr	r2, [pc, #560]	; (8018600 <HAL_CAN_Init+0x254>)
 80183ce:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	4a8c      	ldr	r2, [pc, #560]	; (8018604 <HAL_CAN_Init+0x258>)
 80183d4:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	4a8b      	ldr	r2, [pc, #556]	; (8018608 <HAL_CAN_Init+0x25c>)
 80183da:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	4a8b      	ldr	r2, [pc, #556]	; (801860c <HAL_CAN_Init+0x260>)
 80183e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	4a8a      	ldr	r2, [pc, #552]	; (8018610 <HAL_CAN_Init+0x264>)
 80183e6:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	4a8a      	ldr	r2, [pc, #552]	; (8018614 <HAL_CAN_Init+0x268>)
 80183ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	4a89      	ldr	r2, [pc, #548]	; (8018618 <HAL_CAN_Init+0x26c>)
 80183f2:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	4a89      	ldr	r2, [pc, #548]	; (801861c <HAL_CAN_Init+0x270>)
 80183f8:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	4a88      	ldr	r2, [pc, #544]	; (8018620 <HAL_CAN_Init+0x274>)
 80183fe:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	4a88      	ldr	r2, [pc, #544]	; (8018624 <HAL_CAN_Init+0x278>)
 8018404:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	4a87      	ldr	r2, [pc, #540]	; (8018628 <HAL_CAN_Init+0x27c>)
 801840a:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	4a87      	ldr	r2, [pc, #540]	; (801862c <HAL_CAN_Init+0x280>)
 8018410:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	4a86      	ldr	r2, [pc, #536]	; (8018630 <HAL_CAN_Init+0x284>)
 8018416:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801841c:	2b00      	cmp	r3, #0
 801841e:	d102      	bne.n	8018426 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	4a84      	ldr	r2, [pc, #528]	; (8018634 <HAL_CAN_Init+0x288>)
 8018424:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801842a:	6878      	ldr	r0, [r7, #4]
 801842c:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	681a      	ldr	r2, [r3, #0]
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	f042 0201 	orr.w	r2, r2, #1
 801843c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801843e:	f7ff ff85 	bl	801834c <HAL_GetTick>
 8018442:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8018444:	e012      	b.n	801846c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8018446:	f7ff ff81 	bl	801834c <HAL_GetTick>
 801844a:	4602      	mov	r2, r0
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	1ad3      	subs	r3, r2, r3
 8018450:	2b0a      	cmp	r3, #10
 8018452:	d90b      	bls.n	801846c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018458:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	2205      	movs	r2, #5
 8018464:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8018468:	2301      	movs	r3, #1
 801846a:	e0c5      	b.n	80185f8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	685b      	ldr	r3, [r3, #4]
 8018472:	f003 0301 	and.w	r3, r3, #1
 8018476:	2b00      	cmp	r3, #0
 8018478:	d0e5      	beq.n	8018446 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	681a      	ldr	r2, [r3, #0]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	f022 0202 	bic.w	r2, r2, #2
 8018488:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801848a:	f7ff ff5f 	bl	801834c <HAL_GetTick>
 801848e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8018490:	e012      	b.n	80184b8 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8018492:	f7ff ff5b 	bl	801834c <HAL_GetTick>
 8018496:	4602      	mov	r2, r0
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	1ad3      	subs	r3, r2, r3
 801849c:	2b0a      	cmp	r3, #10
 801849e:	d90b      	bls.n	80184b8 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2205      	movs	r2, #5
 80184b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80184b4:	2301      	movs	r3, #1
 80184b6:	e09f      	b.n	80185f8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	f003 0302 	and.w	r3, r3, #2
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d1e5      	bne.n	8018492 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	7e1b      	ldrb	r3, [r3, #24]
 80184ca:	2b01      	cmp	r3, #1
 80184cc:	d108      	bne.n	80184e0 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	681a      	ldr	r2, [r3, #0]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80184dc:	601a      	str	r2, [r3, #0]
 80184de:	e007      	b.n	80184f0 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	681a      	ldr	r2, [r3, #0]
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80184ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	7e5b      	ldrb	r3, [r3, #25]
 80184f4:	2b01      	cmp	r3, #1
 80184f6:	d108      	bne.n	801850a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	681a      	ldr	r2, [r3, #0]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018506:	601a      	str	r2, [r3, #0]
 8018508:	e007      	b.n	801851a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	681a      	ldr	r2, [r3, #0]
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018518:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	7e9b      	ldrb	r3, [r3, #26]
 801851e:	2b01      	cmp	r3, #1
 8018520:	d108      	bne.n	8018534 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	f042 0220 	orr.w	r2, r2, #32
 8018530:	601a      	str	r2, [r3, #0]
 8018532:	e007      	b.n	8018544 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	681a      	ldr	r2, [r3, #0]
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	f022 0220 	bic.w	r2, r2, #32
 8018542:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	7edb      	ldrb	r3, [r3, #27]
 8018548:	2b01      	cmp	r3, #1
 801854a:	d108      	bne.n	801855e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f022 0210 	bic.w	r2, r2, #16
 801855a:	601a      	str	r2, [r3, #0]
 801855c:	e007      	b.n	801856e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	681a      	ldr	r2, [r3, #0]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	f042 0210 	orr.w	r2, r2, #16
 801856c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	7f1b      	ldrb	r3, [r3, #28]
 8018572:	2b01      	cmp	r3, #1
 8018574:	d108      	bne.n	8018588 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	681a      	ldr	r2, [r3, #0]
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	f042 0208 	orr.w	r2, r2, #8
 8018584:	601a      	str	r2, [r3, #0]
 8018586:	e007      	b.n	8018598 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	681a      	ldr	r2, [r3, #0]
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	f022 0208 	bic.w	r2, r2, #8
 8018596:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	7f5b      	ldrb	r3, [r3, #29]
 801859c:	2b01      	cmp	r3, #1
 801859e:	d108      	bne.n	80185b2 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	681a      	ldr	r2, [r3, #0]
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	f042 0204 	orr.w	r2, r2, #4
 80185ae:	601a      	str	r2, [r3, #0]
 80185b0:	e007      	b.n	80185c2 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	681a      	ldr	r2, [r3, #0]
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	f022 0204 	bic.w	r2, r2, #4
 80185c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	689a      	ldr	r2, [r3, #8]
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	68db      	ldr	r3, [r3, #12]
 80185ca:	431a      	orrs	r2, r3
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	691b      	ldr	r3, [r3, #16]
 80185d0:	431a      	orrs	r2, r3
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	695b      	ldr	r3, [r3, #20]
 80185d6:	ea42 0103 	orr.w	r1, r2, r3
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	685b      	ldr	r3, [r3, #4]
 80185de:	1e5a      	subs	r2, r3, #1
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	430a      	orrs	r2, r1
 80185e6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2200      	movs	r2, #0
 80185ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2201      	movs	r2, #1
 80185f2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80185f6:	2300      	movs	r3, #0
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	3710      	adds	r7, #16
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}
 8018600:	08010fa9 	.word	0x08010fa9
 8018604:	080190f3 	.word	0x080190f3
 8018608:	080110c5 	.word	0x080110c5
 801860c:	08019107 	.word	0x08019107
 8018610:	0801907b 	.word	0x0801907b
 8018614:	0801908f 	.word	0x0801908f
 8018618:	080190a3 	.word	0x080190a3
 801861c:	080190b7 	.word	0x080190b7
 8018620:	080190cb 	.word	0x080190cb
 8018624:	080190df 	.word	0x080190df
 8018628:	0801911b 	.word	0x0801911b
 801862c:	0801912f 	.word	0x0801912f
 8018630:	08019143 	.word	0x08019143
 8018634:	080106a5 	.word	0x080106a5

08018638 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8018638:	b480      	push	{r7}
 801863a:	b087      	sub	sp, #28
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801864e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8018650:	7cfb      	ldrb	r3, [r7, #19]
 8018652:	2b01      	cmp	r3, #1
 8018654:	d003      	beq.n	801865e <HAL_CAN_ConfigFilter+0x26>
 8018656:	7cfb      	ldrb	r3, [r7, #19]
 8018658:	2b02      	cmp	r3, #2
 801865a:	f040 80c7 	bne.w	80187ec <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	4a69      	ldr	r2, [pc, #420]	; (8018808 <HAL_CAN_ConfigFilter+0x1d0>)
 8018664:	4293      	cmp	r3, r2
 8018666:	d001      	beq.n	801866c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8018668:	4b68      	ldr	r3, [pc, #416]	; (801880c <HAL_CAN_ConfigFilter+0x1d4>)
 801866a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8018672:	f043 0201 	orr.w	r2, r3, #1
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	4a63      	ldr	r2, [pc, #396]	; (801880c <HAL_CAN_ConfigFilter+0x1d4>)
 8018680:	4293      	cmp	r3, r2
 8018682:	d111      	bne.n	80186a8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801868a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801868e:	697b      	ldr	r3, [r7, #20]
 8018690:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801869a:	683b      	ldr	r3, [r7, #0]
 801869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801869e:	021b      	lsls	r3, r3, #8
 80186a0:	431a      	orrs	r2, r3
 80186a2:	697b      	ldr	r3, [r7, #20]
 80186a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	695b      	ldr	r3, [r3, #20]
 80186ac:	f003 031f 	and.w	r3, r3, #31
 80186b0:	2201      	movs	r2, #1
 80186b2:	fa02 f303 	lsl.w	r3, r2, r3
 80186b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80186b8:	697b      	ldr	r3, [r7, #20]
 80186ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	43db      	mvns	r3, r3
 80186c2:	401a      	ands	r2, r3
 80186c4:	697b      	ldr	r3, [r7, #20]
 80186c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	69db      	ldr	r3, [r3, #28]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d123      	bne.n	801871a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80186d2:	697b      	ldr	r3, [r7, #20]
 80186d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	43db      	mvns	r3, r3
 80186dc:	401a      	ands	r2, r3
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	68db      	ldr	r3, [r3, #12]
 80186e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	685b      	ldr	r3, [r3, #4]
 80186ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80186f0:	683a      	ldr	r2, [r7, #0]
 80186f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80186f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	3248      	adds	r2, #72	; 0x48
 80186fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80186fe:	683b      	ldr	r3, [r7, #0]
 8018700:	689b      	ldr	r3, [r3, #8]
 8018702:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8018704:	683b      	ldr	r3, [r7, #0]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801870a:	683b      	ldr	r3, [r7, #0]
 801870c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801870e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8018710:	6979      	ldr	r1, [r7, #20]
 8018712:	3348      	adds	r3, #72	; 0x48
 8018714:	00db      	lsls	r3, r3, #3
 8018716:	440b      	add	r3, r1
 8018718:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 801871a:	683b      	ldr	r3, [r7, #0]
 801871c:	69db      	ldr	r3, [r3, #28]
 801871e:	2b01      	cmp	r3, #1
 8018720:	d122      	bne.n	8018768 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8018722:	697b      	ldr	r3, [r7, #20]
 8018724:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	431a      	orrs	r2, r3
 801872c:	697b      	ldr	r3, [r7, #20]
 801872e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8018732:	683b      	ldr	r3, [r7, #0]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8018738:	683b      	ldr	r3, [r7, #0]
 801873a:	685b      	ldr	r3, [r3, #4]
 801873c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801873e:	683a      	ldr	r2, [r7, #0]
 8018740:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8018742:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	3248      	adds	r2, #72	; 0x48
 8018748:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	689b      	ldr	r3, [r3, #8]
 8018750:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	68db      	ldr	r3, [r3, #12]
 8018756:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801875c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801875e:	6979      	ldr	r1, [r7, #20]
 8018760:	3348      	adds	r3, #72	; 0x48
 8018762:	00db      	lsls	r3, r3, #3
 8018764:	440b      	add	r3, r1
 8018766:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	699b      	ldr	r3, [r3, #24]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d109      	bne.n	8018784 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	43db      	mvns	r3, r3
 801877a:	401a      	ands	r2, r3
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8018782:	e007      	b.n	8018794 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	431a      	orrs	r2, r3
 801878e:	697b      	ldr	r3, [r7, #20]
 8018790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	691b      	ldr	r3, [r3, #16]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d109      	bne.n	80187b0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 801879c:	697b      	ldr	r3, [r7, #20]
 801879e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	43db      	mvns	r3, r3
 80187a6:	401a      	ands	r2, r3
 80187a8:	697b      	ldr	r3, [r7, #20]
 80187aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80187ae:	e007      	b.n	80187c0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	431a      	orrs	r2, r3
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	6a1b      	ldr	r3, [r3, #32]
 80187c4:	2b01      	cmp	r3, #1
 80187c6:	d107      	bne.n	80187d8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	431a      	orrs	r2, r3
 80187d2:	697b      	ldr	r3, [r7, #20]
 80187d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80187d8:	697b      	ldr	r3, [r7, #20]
 80187da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80187de:	f023 0201 	bic.w	r2, r3, #1
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80187e8:	2300      	movs	r3, #0
 80187ea:	e006      	b.n	80187fa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80187f8:	2301      	movs	r3, #1
  }
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	371c      	adds	r7, #28
 80187fe:	46bd      	mov	sp, r7
 8018800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018804:	4770      	bx	lr
 8018806:	bf00      	nop
 8018808:	40003400 	.word	0x40003400
 801880c:	40006400 	.word	0x40006400

08018810 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801881e:	b2db      	uxtb	r3, r3
 8018820:	2b01      	cmp	r3, #1
 8018822:	d12e      	bne.n	8018882 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	2202      	movs	r2, #2
 8018828:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f022 0201 	bic.w	r2, r2, #1
 801883a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801883c:	f7ff fd86 	bl	801834c <HAL_GetTick>
 8018840:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8018842:	e012      	b.n	801886a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8018844:	f7ff fd82 	bl	801834c <HAL_GetTick>
 8018848:	4602      	mov	r2, r0
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	1ad3      	subs	r3, r2, r3
 801884e:	2b0a      	cmp	r3, #10
 8018850:	d90b      	bls.n	801886a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018856:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	2205      	movs	r2, #5
 8018862:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8018866:	2301      	movs	r3, #1
 8018868:	e012      	b.n	8018890 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	f003 0301 	and.w	r3, r3, #1
 8018874:	2b00      	cmp	r3, #0
 8018876:	d1e5      	bne.n	8018844 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2200      	movs	r2, #0
 801887c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801887e:	2300      	movs	r3, #0
 8018880:	e006      	b.n	8018890 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018886:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801888e:	2301      	movs	r3, #1
  }
}
 8018890:	4618      	mov	r0, r3
 8018892:	3710      	adds	r7, #16
 8018894:	46bd      	mov	sp, r7
 8018896:	bd80      	pop	{r7, pc}

08018898 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8018898:	b480      	push	{r7}
 801889a:	b089      	sub	sp, #36	; 0x24
 801889c:	af00      	add	r7, sp, #0
 801889e:	60f8      	str	r0, [r7, #12]
 80188a0:	60b9      	str	r1, [r7, #8]
 80188a2:	607a      	str	r2, [r7, #4]
 80188a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80188ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	689b      	ldr	r3, [r3, #8]
 80188b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80188b6:	7ffb      	ldrb	r3, [r7, #31]
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d003      	beq.n	80188c4 <HAL_CAN_AddTxMessage+0x2c>
 80188bc:	7ffb      	ldrb	r3, [r7, #31]
 80188be:	2b02      	cmp	r3, #2
 80188c0:	f040 80ad 	bne.w	8018a1e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80188c4:	69bb      	ldr	r3, [r7, #24]
 80188c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d10a      	bne.n	80188e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80188ce:	69bb      	ldr	r3, [r7, #24]
 80188d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d105      	bne.n	80188e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80188d8:	69bb      	ldr	r3, [r7, #24]
 80188da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80188de:	2b00      	cmp	r3, #0
 80188e0:	f000 8095 	beq.w	8018a0e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80188e4:	69bb      	ldr	r3, [r7, #24]
 80188e6:	0e1b      	lsrs	r3, r3, #24
 80188e8:	f003 0303 	and.w	r3, r3, #3
 80188ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80188ee:	2201      	movs	r2, #1
 80188f0:	697b      	ldr	r3, [r7, #20]
 80188f2:	409a      	lsls	r2, r3
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	689b      	ldr	r3, [r3, #8]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d10d      	bne.n	801891c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8018900:	68bb      	ldr	r3, [r7, #8]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8018906:	68bb      	ldr	r3, [r7, #8]
 8018908:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801890a:	68f9      	ldr	r1, [r7, #12]
 801890c:	6809      	ldr	r1, [r1, #0]
 801890e:	431a      	orrs	r2, r3
 8018910:	697b      	ldr	r3, [r7, #20]
 8018912:	3318      	adds	r3, #24
 8018914:	011b      	lsls	r3, r3, #4
 8018916:	440b      	add	r3, r1
 8018918:	601a      	str	r2, [r3, #0]
 801891a:	e00f      	b.n	801893c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	685b      	ldr	r3, [r3, #4]
 8018920:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8018926:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8018928:	68bb      	ldr	r3, [r7, #8]
 801892a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801892c:	68f9      	ldr	r1, [r7, #12]
 801892e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8018930:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8018932:	697b      	ldr	r3, [r7, #20]
 8018934:	3318      	adds	r3, #24
 8018936:	011b      	lsls	r3, r3, #4
 8018938:	440b      	add	r3, r1
 801893a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	6819      	ldr	r1, [r3, #0]
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	691a      	ldr	r2, [r3, #16]
 8018944:	697b      	ldr	r3, [r7, #20]
 8018946:	3318      	adds	r3, #24
 8018948:	011b      	lsls	r3, r3, #4
 801894a:	440b      	add	r3, r1
 801894c:	3304      	adds	r3, #4
 801894e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	7d1b      	ldrb	r3, [r3, #20]
 8018954:	2b01      	cmp	r3, #1
 8018956:	d111      	bne.n	801897c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	697b      	ldr	r3, [r7, #20]
 801895e:	3318      	adds	r3, #24
 8018960:	011b      	lsls	r3, r3, #4
 8018962:	4413      	add	r3, r2
 8018964:	3304      	adds	r3, #4
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	68fa      	ldr	r2, [r7, #12]
 801896a:	6811      	ldr	r1, [r2, #0]
 801896c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	3318      	adds	r3, #24
 8018974:	011b      	lsls	r3, r3, #4
 8018976:	440b      	add	r3, r1
 8018978:	3304      	adds	r3, #4
 801897a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	3307      	adds	r3, #7
 8018980:	781b      	ldrb	r3, [r3, #0]
 8018982:	061a      	lsls	r2, r3, #24
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	3306      	adds	r3, #6
 8018988:	781b      	ldrb	r3, [r3, #0]
 801898a:	041b      	lsls	r3, r3, #16
 801898c:	431a      	orrs	r2, r3
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	3305      	adds	r3, #5
 8018992:	781b      	ldrb	r3, [r3, #0]
 8018994:	021b      	lsls	r3, r3, #8
 8018996:	4313      	orrs	r3, r2
 8018998:	687a      	ldr	r2, [r7, #4]
 801899a:	3204      	adds	r2, #4
 801899c:	7812      	ldrb	r2, [r2, #0]
 801899e:	4610      	mov	r0, r2
 80189a0:	68fa      	ldr	r2, [r7, #12]
 80189a2:	6811      	ldr	r1, [r2, #0]
 80189a4:	ea43 0200 	orr.w	r2, r3, r0
 80189a8:	697b      	ldr	r3, [r7, #20]
 80189aa:	011b      	lsls	r3, r3, #4
 80189ac:	440b      	add	r3, r1
 80189ae:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80189b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	3303      	adds	r3, #3
 80189b8:	781b      	ldrb	r3, [r3, #0]
 80189ba:	061a      	lsls	r2, r3, #24
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	3302      	adds	r3, #2
 80189c0:	781b      	ldrb	r3, [r3, #0]
 80189c2:	041b      	lsls	r3, r3, #16
 80189c4:	431a      	orrs	r2, r3
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	3301      	adds	r3, #1
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	021b      	lsls	r3, r3, #8
 80189ce:	4313      	orrs	r3, r2
 80189d0:	687a      	ldr	r2, [r7, #4]
 80189d2:	7812      	ldrb	r2, [r2, #0]
 80189d4:	4610      	mov	r0, r2
 80189d6:	68fa      	ldr	r2, [r7, #12]
 80189d8:	6811      	ldr	r1, [r2, #0]
 80189da:	ea43 0200 	orr.w	r2, r3, r0
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	011b      	lsls	r3, r3, #4
 80189e2:	440b      	add	r3, r1
 80189e4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80189e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	3318      	adds	r3, #24
 80189f2:	011b      	lsls	r3, r3, #4
 80189f4:	4413      	add	r3, r2
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	68fa      	ldr	r2, [r7, #12]
 80189fa:	6811      	ldr	r1, [r2, #0]
 80189fc:	f043 0201 	orr.w	r2, r3, #1
 8018a00:	697b      	ldr	r3, [r7, #20]
 8018a02:	3318      	adds	r3, #24
 8018a04:	011b      	lsls	r3, r3, #4
 8018a06:	440b      	add	r3, r1
 8018a08:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	e00e      	b.n	8018a2c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	e006      	b.n	8018a2c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8018a2a:	2301      	movs	r3, #1
  }
}
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3724      	adds	r7, #36	; 0x24
 8018a30:	46bd      	mov	sp, r7
 8018a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a36:	4770      	bx	lr

08018a38 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8018a38:	b480      	push	{r7}
 8018a3a:	b085      	sub	sp, #20
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
 8018a40:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8018a42:	2300      	movs	r3, #0
 8018a44:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018a4c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8018a4e:	7afb      	ldrb	r3, [r7, #11]
 8018a50:	2b01      	cmp	r3, #1
 8018a52:	d002      	beq.n	8018a5a <HAL_CAN_IsTxMessagePending+0x22>
 8018a54:	7afb      	ldrb	r3, [r7, #11]
 8018a56:	2b02      	cmp	r3, #2
 8018a58:	d10b      	bne.n	8018a72 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	689a      	ldr	r2, [r3, #8]
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	069b      	lsls	r3, r3, #26
 8018a64:	401a      	ands	r2, r3
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	069b      	lsls	r3, r3, #26
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d001      	beq.n	8018a72 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8018a6e:	2301      	movs	r3, #1
 8018a70:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8018a72:	68fb      	ldr	r3, [r7, #12]
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	3714      	adds	r7, #20
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7e:	4770      	bx	lr

08018a80 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8018a80:	b480      	push	{r7}
 8018a82:	b087      	sub	sp, #28
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	60f8      	str	r0, [r7, #12]
 8018a88:	60b9      	str	r1, [r7, #8]
 8018a8a:	607a      	str	r2, [r7, #4]
 8018a8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018a94:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8018a96:	7dfb      	ldrb	r3, [r7, #23]
 8018a98:	2b01      	cmp	r3, #1
 8018a9a:	d003      	beq.n	8018aa4 <HAL_CAN_GetRxMessage+0x24>
 8018a9c:	7dfb      	ldrb	r3, [r7, #23]
 8018a9e:	2b02      	cmp	r3, #2
 8018aa0:	f040 80f3 	bne.w	8018c8a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d10e      	bne.n	8018ac8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	68db      	ldr	r3, [r3, #12]
 8018ab0:	f003 0303 	and.w	r3, r3, #3
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d116      	bne.n	8018ae6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018abc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	e0e7      	b.n	8018c98 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	691b      	ldr	r3, [r3, #16]
 8018ace:	f003 0303 	and.w	r3, r3, #3
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d107      	bne.n	8018ae6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	e0d8      	b.n	8018c98 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	681a      	ldr	r2, [r3, #0]
 8018aea:	68bb      	ldr	r3, [r7, #8]
 8018aec:	331b      	adds	r3, #27
 8018aee:	011b      	lsls	r3, r3, #4
 8018af0:	4413      	add	r3, r2
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	f003 0204 	and.w	r2, r3, #4
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	689b      	ldr	r3, [r3, #8]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d10c      	bne.n	8018b1e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	681a      	ldr	r2, [r3, #0]
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	331b      	adds	r3, #27
 8018b0c:	011b      	lsls	r3, r3, #4
 8018b0e:	4413      	add	r3, r2
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	0d5b      	lsrs	r3, r3, #21
 8018b14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	601a      	str	r2, [r3, #0]
 8018b1c:	e00b      	b.n	8018b36 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	681a      	ldr	r2, [r3, #0]
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	331b      	adds	r3, #27
 8018b26:	011b      	lsls	r3, r3, #4
 8018b28:	4413      	add	r3, r2
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	08db      	lsrs	r3, r3, #3
 8018b2e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	681a      	ldr	r2, [r3, #0]
 8018b3a:	68bb      	ldr	r3, [r7, #8]
 8018b3c:	331b      	adds	r3, #27
 8018b3e:	011b      	lsls	r3, r3, #4
 8018b40:	4413      	add	r3, r2
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	f003 0202 	and.w	r2, r3, #2
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	681a      	ldr	r2, [r3, #0]
 8018b50:	68bb      	ldr	r3, [r7, #8]
 8018b52:	331b      	adds	r3, #27
 8018b54:	011b      	lsls	r3, r3, #4
 8018b56:	4413      	add	r3, r2
 8018b58:	3304      	adds	r3, #4
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	f003 020f 	and.w	r2, r3, #15
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	681a      	ldr	r2, [r3, #0]
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	331b      	adds	r3, #27
 8018b6c:	011b      	lsls	r3, r3, #4
 8018b6e:	4413      	add	r3, r2
 8018b70:	3304      	adds	r3, #4
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	0a1b      	lsrs	r3, r3, #8
 8018b76:	b2da      	uxtb	r2, r3
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	681a      	ldr	r2, [r3, #0]
 8018b80:	68bb      	ldr	r3, [r7, #8]
 8018b82:	331b      	adds	r3, #27
 8018b84:	011b      	lsls	r3, r3, #4
 8018b86:	4413      	add	r3, r2
 8018b88:	3304      	adds	r3, #4
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	0c1b      	lsrs	r3, r3, #16
 8018b8e:	b29a      	uxth	r2, r3
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	681a      	ldr	r2, [r3, #0]
 8018b98:	68bb      	ldr	r3, [r7, #8]
 8018b9a:	011b      	lsls	r3, r3, #4
 8018b9c:	4413      	add	r3, r2
 8018b9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	b2da      	uxtb	r2, r3
 8018ba6:	683b      	ldr	r3, [r7, #0]
 8018ba8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681a      	ldr	r2, [r3, #0]
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	011b      	lsls	r3, r3, #4
 8018bb2:	4413      	add	r3, r2
 8018bb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	0a1a      	lsrs	r2, r3, #8
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	3301      	adds	r3, #1
 8018bc0:	b2d2      	uxtb	r2, r2
 8018bc2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	681a      	ldr	r2, [r3, #0]
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	011b      	lsls	r3, r3, #4
 8018bcc:	4413      	add	r3, r2
 8018bce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	0c1a      	lsrs	r2, r3, #16
 8018bd6:	683b      	ldr	r3, [r7, #0]
 8018bd8:	3302      	adds	r3, #2
 8018bda:	b2d2      	uxtb	r2, r2
 8018bdc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	681a      	ldr	r2, [r3, #0]
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	011b      	lsls	r3, r3, #4
 8018be6:	4413      	add	r3, r2
 8018be8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	0e1a      	lsrs	r2, r3, #24
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	3303      	adds	r3, #3
 8018bf4:	b2d2      	uxtb	r2, r2
 8018bf6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	68bb      	ldr	r3, [r7, #8]
 8018bfe:	011b      	lsls	r3, r3, #4
 8018c00:	4413      	add	r3, r2
 8018c02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8018c06:	681a      	ldr	r2, [r3, #0]
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	3304      	adds	r3, #4
 8018c0c:	b2d2      	uxtb	r2, r2
 8018c0e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	681a      	ldr	r2, [r3, #0]
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	011b      	lsls	r3, r3, #4
 8018c18:	4413      	add	r3, r2
 8018c1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	0a1a      	lsrs	r2, r3, #8
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	3305      	adds	r3, #5
 8018c26:	b2d2      	uxtb	r2, r2
 8018c28:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	011b      	lsls	r3, r3, #4
 8018c32:	4413      	add	r3, r2
 8018c34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	0c1a      	lsrs	r2, r3, #16
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	3306      	adds	r3, #6
 8018c40:	b2d2      	uxtb	r2, r2
 8018c42:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	681a      	ldr	r2, [r3, #0]
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	011b      	lsls	r3, r3, #4
 8018c4c:	4413      	add	r3, r2
 8018c4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	0e1a      	lsrs	r2, r3, #24
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	3307      	adds	r3, #7
 8018c5a:	b2d2      	uxtb	r2, r2
 8018c5c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8018c5e:	68bb      	ldr	r3, [r7, #8]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d108      	bne.n	8018c76 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	68da      	ldr	r2, [r3, #12]
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	f042 0220 	orr.w	r2, r2, #32
 8018c72:	60da      	str	r2, [r3, #12]
 8018c74:	e007      	b.n	8018c86 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	691a      	ldr	r2, [r3, #16]
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	f042 0220 	orr.w	r2, r2, #32
 8018c84:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8018c86:	2300      	movs	r3, #0
 8018c88:	e006      	b.n	8018c98 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8018c96:	2301      	movs	r3, #1
  }
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	371c      	adds	r7, #28
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca2:	4770      	bx	lr

08018ca4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8018ca4:	b480      	push	{r7}
 8018ca6:	b085      	sub	sp, #20
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018cb4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8018cb6:	7bfb      	ldrb	r3, [r7, #15]
 8018cb8:	2b01      	cmp	r3, #1
 8018cba:	d002      	beq.n	8018cc2 <HAL_CAN_ActivateNotification+0x1e>
 8018cbc:	7bfb      	ldrb	r3, [r7, #15]
 8018cbe:	2b02      	cmp	r3, #2
 8018cc0:	d109      	bne.n	8018cd6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	6959      	ldr	r1, [r3, #20]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	683a      	ldr	r2, [r7, #0]
 8018cce:	430a      	orrs	r2, r1
 8018cd0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	e006      	b.n	8018ce4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8018ce2:	2301      	movs	r3, #1
  }
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	3714      	adds	r7, #20
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cee:	4770      	bx	lr

08018cf0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b08a      	sub	sp, #40	; 0x28
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	695b      	ldr	r3, [r3, #20]
 8018d02:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	689b      	ldr	r3, [r3, #8]
 8018d12:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	68db      	ldr	r3, [r3, #12]
 8018d1a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	691b      	ldr	r3, [r3, #16]
 8018d22:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	699b      	ldr	r3, [r3, #24]
 8018d2a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8018d2c:	6a3b      	ldr	r3, [r7, #32]
 8018d2e:	f003 0301 	and.w	r3, r3, #1
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	f000 8083 	beq.w	8018e3e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8018d38:	69bb      	ldr	r3, [r7, #24]
 8018d3a:	f003 0301 	and.w	r3, r3, #1
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d025      	beq.n	8018d8e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	2201      	movs	r2, #1
 8018d48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8018d4a:	69bb      	ldr	r3, [r7, #24]
 8018d4c:	f003 0302 	and.w	r3, r3, #2
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d004      	beq.n	8018d5e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	4798      	blx	r3
 8018d5c:	e017      	b.n	8018d8e <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8018d5e:	69bb      	ldr	r3, [r7, #24]
 8018d60:	f003 0304 	and.w	r3, r3, #4
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d004      	beq.n	8018d72 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8018d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8018d70:	e00d      	b.n	8018d8e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8018d72:	69bb      	ldr	r3, [r7, #24]
 8018d74:	f003 0308 	and.w	r3, r3, #8
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d004      	beq.n	8018d86 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8018d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018d82:	627b      	str	r3, [r7, #36]	; 0x24
 8018d84:	e003      	b.n	8018d8e <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d8a:	6878      	ldr	r0, [r7, #4]
 8018d8c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8018d8e:	69bb      	ldr	r3, [r7, #24]
 8018d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d026      	beq.n	8018de6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018da0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8018da2:	69bb      	ldr	r3, [r7, #24]
 8018da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d004      	beq.n	8018db6 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018db0:	6878      	ldr	r0, [r7, #4]
 8018db2:	4798      	blx	r3
 8018db4:	e017      	b.n	8018de6 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8018db6:	69bb      	ldr	r3, [r7, #24]
 8018db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d004      	beq.n	8018dca <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8018dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8018dc8:	e00d      	b.n	8018de6 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8018dca:	69bb      	ldr	r3, [r7, #24]
 8018dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d004      	beq.n	8018dde <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8018dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018dda:	627b      	str	r3, [r7, #36]	; 0x24
 8018ddc:	e003      	b.n	8018de6 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018de2:	6878      	ldr	r0, [r7, #4]
 8018de4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8018de6:	69bb      	ldr	r3, [r7, #24]
 8018de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d026      	beq.n	8018e3e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8018df8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8018dfa:	69bb      	ldr	r3, [r7, #24]
 8018dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d004      	beq.n	8018e0e <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e08:	6878      	ldr	r0, [r7, #4]
 8018e0a:	4798      	blx	r3
 8018e0c:	e017      	b.n	8018e3e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d004      	beq.n	8018e22 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8018e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8018e20:	e00d      	b.n	8018e3e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d004      	beq.n	8018e36 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8018e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018e32:	627b      	str	r3, [r7, #36]	; 0x24
 8018e34:	e003      	b.n	8018e3e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8018e3e:	6a3b      	ldr	r3, [r7, #32]
 8018e40:	f003 0308 	and.w	r3, r3, #8
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d00c      	beq.n	8018e62 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8018e48:	697b      	ldr	r3, [r7, #20]
 8018e4a:	f003 0310 	and.w	r3, r3, #16
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d007      	beq.n	8018e62 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8018e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018e58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2210      	movs	r2, #16
 8018e60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8018e62:	6a3b      	ldr	r3, [r7, #32]
 8018e64:	f003 0304 	and.w	r3, r3, #4
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d00c      	beq.n	8018e86 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8018e6c:	697b      	ldr	r3, [r7, #20]
 8018e6e:	f003 0308 	and.w	r3, r3, #8
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d007      	beq.n	8018e86 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2208      	movs	r2, #8
 8018e7c:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e82:	6878      	ldr	r0, [r7, #4]
 8018e84:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8018e86:	6a3b      	ldr	r3, [r7, #32]
 8018e88:	f003 0302 	and.w	r3, r3, #2
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d00a      	beq.n	8018ea6 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	68db      	ldr	r3, [r3, #12]
 8018e96:	f003 0303 	and.w	r3, r3, #3
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d003      	beq.n	8018ea6 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ea2:	6878      	ldr	r0, [r7, #4]
 8018ea4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8018ea6:	6a3b      	ldr	r3, [r7, #32]
 8018ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d00c      	beq.n	8018eca <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8018eb0:	693b      	ldr	r3, [r7, #16]
 8018eb2:	f003 0310 	and.w	r3, r3, #16
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d007      	beq.n	8018eca <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8018eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018ec0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	2210      	movs	r2, #16
 8018ec8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8018eca:	6a3b      	ldr	r3, [r7, #32]
 8018ecc:	f003 0320 	and.w	r3, r3, #32
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d00c      	beq.n	8018eee <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8018ed4:	693b      	ldr	r3, [r7, #16]
 8018ed6:	f003 0308 	and.w	r3, r3, #8
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d007      	beq.n	8018eee <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	2208      	movs	r2, #8
 8018ee4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018eea:	6878      	ldr	r0, [r7, #4]
 8018eec:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8018eee:	6a3b      	ldr	r3, [r7, #32]
 8018ef0:	f003 0310 	and.w	r3, r3, #16
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d00a      	beq.n	8018f0e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	691b      	ldr	r3, [r3, #16]
 8018efe:	f003 0303 	and.w	r3, r3, #3
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d003      	beq.n	8018f0e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f0a:	6878      	ldr	r0, [r7, #4]
 8018f0c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8018f0e:	6a3b      	ldr	r3, [r7, #32]
 8018f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d00c      	beq.n	8018f32 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8018f18:	69fb      	ldr	r3, [r7, #28]
 8018f1a:	f003 0310 	and.w	r3, r3, #16
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d007      	beq.n	8018f32 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	2210      	movs	r2, #16
 8018f28:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f2e:	6878      	ldr	r0, [r7, #4]
 8018f30:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8018f32:	6a3b      	ldr	r3, [r7, #32]
 8018f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d00c      	beq.n	8018f56 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8018f3c:	69fb      	ldr	r3, [r7, #28]
 8018f3e:	f003 0308 	and.w	r3, r3, #8
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d007      	beq.n	8018f56 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	2208      	movs	r2, #8
 8018f4c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8018f56:	6a3b      	ldr	r3, [r7, #32]
 8018f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d07b      	beq.n	8019058 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8018f60:	69fb      	ldr	r3, [r7, #28]
 8018f62:	f003 0304 	and.w	r3, r3, #4
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d072      	beq.n	8019050 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8018f6a:	6a3b      	ldr	r3, [r7, #32]
 8018f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d008      	beq.n	8018f86 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d003      	beq.n	8018f86 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8018f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f80:	f043 0301 	orr.w	r3, r3, #1
 8018f84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8018f86:	6a3b      	ldr	r3, [r7, #32]
 8018f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d008      	beq.n	8018fa2 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d003      	beq.n	8018fa2 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8018f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f9c:	f043 0302 	orr.w	r3, r3, #2
 8018fa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8018fa2:	6a3b      	ldr	r3, [r7, #32]
 8018fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d008      	beq.n	8018fbe <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d003      	beq.n	8018fbe <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8018fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fb8:	f043 0304 	orr.w	r3, r3, #4
 8018fbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8018fbe:	6a3b      	ldr	r3, [r7, #32]
 8018fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d043      	beq.n	8019050 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d03e      	beq.n	8019050 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8018fd8:	2b60      	cmp	r3, #96	; 0x60
 8018fda:	d02b      	beq.n	8019034 <HAL_CAN_IRQHandler+0x344>
 8018fdc:	2b60      	cmp	r3, #96	; 0x60
 8018fde:	d82e      	bhi.n	801903e <HAL_CAN_IRQHandler+0x34e>
 8018fe0:	2b50      	cmp	r3, #80	; 0x50
 8018fe2:	d022      	beq.n	801902a <HAL_CAN_IRQHandler+0x33a>
 8018fe4:	2b50      	cmp	r3, #80	; 0x50
 8018fe6:	d82a      	bhi.n	801903e <HAL_CAN_IRQHandler+0x34e>
 8018fe8:	2b40      	cmp	r3, #64	; 0x40
 8018fea:	d019      	beq.n	8019020 <HAL_CAN_IRQHandler+0x330>
 8018fec:	2b40      	cmp	r3, #64	; 0x40
 8018fee:	d826      	bhi.n	801903e <HAL_CAN_IRQHandler+0x34e>
 8018ff0:	2b30      	cmp	r3, #48	; 0x30
 8018ff2:	d010      	beq.n	8019016 <HAL_CAN_IRQHandler+0x326>
 8018ff4:	2b30      	cmp	r3, #48	; 0x30
 8018ff6:	d822      	bhi.n	801903e <HAL_CAN_IRQHandler+0x34e>
 8018ff8:	2b10      	cmp	r3, #16
 8018ffa:	d002      	beq.n	8019002 <HAL_CAN_IRQHandler+0x312>
 8018ffc:	2b20      	cmp	r3, #32
 8018ffe:	d005      	beq.n	801900c <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8019000:	e01d      	b.n	801903e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8019002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019004:	f043 0308 	orr.w	r3, r3, #8
 8019008:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801900a:	e019      	b.n	8019040 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 801900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801900e:	f043 0310 	orr.w	r3, r3, #16
 8019012:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019014:	e014      	b.n	8019040 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8019016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019018:	f043 0320 	orr.w	r3, r3, #32
 801901c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801901e:	e00f      	b.n	8019040 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8019020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019028:	e00a      	b.n	8019040 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 801902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801902c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019032:	e005      	b.n	8019040 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8019034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801903a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801903c:	e000      	b.n	8019040 <HAL_CAN_IRQHandler+0x350>
            break;
 801903e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	699a      	ldr	r2, [r3, #24]
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801904e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	2204      	movs	r2, #4
 8019056:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8019058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905a:	2b00      	cmp	r3, #0
 801905c:	d009      	beq.n	8019072 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019064:	431a      	orrs	r2, r3
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8019072:	bf00      	nop
 8019074:	3728      	adds	r7, #40	; 0x28
 8019076:	46bd      	mov	sp, r7
 8019078:	bd80      	pop	{r7, pc}

0801907a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801907a:	b480      	push	{r7}
 801907c:	b083      	sub	sp, #12
 801907e:	af00      	add	r7, sp, #0
 8019080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8019082:	bf00      	nop
 8019084:	370c      	adds	r7, #12
 8019086:	46bd      	mov	sp, r7
 8019088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908c:	4770      	bx	lr

0801908e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801908e:	b480      	push	{r7}
 8019090:	b083      	sub	sp, #12
 8019092:	af00      	add	r7, sp, #0
 8019094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8019096:	bf00      	nop
 8019098:	370c      	adds	r7, #12
 801909a:	46bd      	mov	sp, r7
 801909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a0:	4770      	bx	lr

080190a2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80190a2:	b480      	push	{r7}
 80190a4:	b083      	sub	sp, #12
 80190a6:	af00      	add	r7, sp, #0
 80190a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80190aa:	bf00      	nop
 80190ac:	370c      	adds	r7, #12
 80190ae:	46bd      	mov	sp, r7
 80190b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b4:	4770      	bx	lr

080190b6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80190b6:	b480      	push	{r7}
 80190b8:	b083      	sub	sp, #12
 80190ba:	af00      	add	r7, sp, #0
 80190bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80190be:	bf00      	nop
 80190c0:	370c      	adds	r7, #12
 80190c2:	46bd      	mov	sp, r7
 80190c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c8:	4770      	bx	lr

080190ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80190ca:	b480      	push	{r7}
 80190cc:	b083      	sub	sp, #12
 80190ce:	af00      	add	r7, sp, #0
 80190d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80190d2:	bf00      	nop
 80190d4:	370c      	adds	r7, #12
 80190d6:	46bd      	mov	sp, r7
 80190d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190dc:	4770      	bx	lr

080190de <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80190de:	b480      	push	{r7}
 80190e0:	b083      	sub	sp, #12
 80190e2:	af00      	add	r7, sp, #0
 80190e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80190e6:	bf00      	nop
 80190e8:	370c      	adds	r7, #12
 80190ea:	46bd      	mov	sp, r7
 80190ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f0:	4770      	bx	lr

080190f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80190f2:	b480      	push	{r7}
 80190f4:	b083      	sub	sp, #12
 80190f6:	af00      	add	r7, sp, #0
 80190f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80190fa:	bf00      	nop
 80190fc:	370c      	adds	r7, #12
 80190fe:	46bd      	mov	sp, r7
 8019100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019104:	4770      	bx	lr

08019106 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8019106:	b480      	push	{r7}
 8019108:	b083      	sub	sp, #12
 801910a:	af00      	add	r7, sp, #0
 801910c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801910e:	bf00      	nop
 8019110:	370c      	adds	r7, #12
 8019112:	46bd      	mov	sp, r7
 8019114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019118:	4770      	bx	lr

0801911a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801911a:	b480      	push	{r7}
 801911c:	b083      	sub	sp, #12
 801911e:	af00      	add	r7, sp, #0
 8019120:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8019122:	bf00      	nop
 8019124:	370c      	adds	r7, #12
 8019126:	46bd      	mov	sp, r7
 8019128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912c:	4770      	bx	lr

0801912e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801912e:	b480      	push	{r7}
 8019130:	b083      	sub	sp, #12
 8019132:	af00      	add	r7, sp, #0
 8019134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8019136:	bf00      	nop
 8019138:	370c      	adds	r7, #12
 801913a:	46bd      	mov	sp, r7
 801913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019140:	4770      	bx	lr

08019142 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8019142:	b480      	push	{r7}
 8019144:	b083      	sub	sp, #12
 8019146:	af00      	add	r7, sp, #0
 8019148:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801914a:	bf00      	nop
 801914c:	370c      	adds	r7, #12
 801914e:	46bd      	mov	sp, r7
 8019150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019154:	4770      	bx	lr
	...

08019158 <__NVIC_SetPriorityGrouping>:
{
 8019158:	b480      	push	{r7}
 801915a:	b085      	sub	sp, #20
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	f003 0307 	and.w	r3, r3, #7
 8019166:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019168:	4b0b      	ldr	r3, [pc, #44]	; (8019198 <__NVIC_SetPriorityGrouping+0x40>)
 801916a:	68db      	ldr	r3, [r3, #12]
 801916c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801916e:	68ba      	ldr	r2, [r7, #8]
 8019170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019174:	4013      	ands	r3, r2
 8019176:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801917c:	68bb      	ldr	r3, [r7, #8]
 801917e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019180:	4b06      	ldr	r3, [pc, #24]	; (801919c <__NVIC_SetPriorityGrouping+0x44>)
 8019182:	4313      	orrs	r3, r2
 8019184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019186:	4a04      	ldr	r2, [pc, #16]	; (8019198 <__NVIC_SetPriorityGrouping+0x40>)
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	60d3      	str	r3, [r2, #12]
}
 801918c:	bf00      	nop
 801918e:	3714      	adds	r7, #20
 8019190:	46bd      	mov	sp, r7
 8019192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019196:	4770      	bx	lr
 8019198:	e000ed00 	.word	0xe000ed00
 801919c:	05fa0000 	.word	0x05fa0000

080191a0 <__NVIC_GetPriorityGrouping>:
{
 80191a0:	b480      	push	{r7}
 80191a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80191a4:	4b04      	ldr	r3, [pc, #16]	; (80191b8 <__NVIC_GetPriorityGrouping+0x18>)
 80191a6:	68db      	ldr	r3, [r3, #12]
 80191a8:	0a1b      	lsrs	r3, r3, #8
 80191aa:	f003 0307 	and.w	r3, r3, #7
}
 80191ae:	4618      	mov	r0, r3
 80191b0:	46bd      	mov	sp, r7
 80191b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b6:	4770      	bx	lr
 80191b8:	e000ed00 	.word	0xe000ed00

080191bc <__NVIC_EnableIRQ>:
{
 80191bc:	b480      	push	{r7}
 80191be:	b083      	sub	sp, #12
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	4603      	mov	r3, r0
 80191c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80191c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	db0b      	blt.n	80191e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80191ce:	79fb      	ldrb	r3, [r7, #7]
 80191d0:	f003 021f 	and.w	r2, r3, #31
 80191d4:	4907      	ldr	r1, [pc, #28]	; (80191f4 <__NVIC_EnableIRQ+0x38>)
 80191d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191da:	095b      	lsrs	r3, r3, #5
 80191dc:	2001      	movs	r0, #1
 80191de:	fa00 f202 	lsl.w	r2, r0, r2
 80191e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80191e6:	bf00      	nop
 80191e8:	370c      	adds	r7, #12
 80191ea:	46bd      	mov	sp, r7
 80191ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f0:	4770      	bx	lr
 80191f2:	bf00      	nop
 80191f4:	e000e100 	.word	0xe000e100

080191f8 <__NVIC_SetPriority>:
{
 80191f8:	b480      	push	{r7}
 80191fa:	b083      	sub	sp, #12
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	4603      	mov	r3, r0
 8019200:	6039      	str	r1, [r7, #0]
 8019202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019208:	2b00      	cmp	r3, #0
 801920a:	db0a      	blt.n	8019222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801920c:	683b      	ldr	r3, [r7, #0]
 801920e:	b2da      	uxtb	r2, r3
 8019210:	490c      	ldr	r1, [pc, #48]	; (8019244 <__NVIC_SetPriority+0x4c>)
 8019212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019216:	0112      	lsls	r2, r2, #4
 8019218:	b2d2      	uxtb	r2, r2
 801921a:	440b      	add	r3, r1
 801921c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019220:	e00a      	b.n	8019238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019222:	683b      	ldr	r3, [r7, #0]
 8019224:	b2da      	uxtb	r2, r3
 8019226:	4908      	ldr	r1, [pc, #32]	; (8019248 <__NVIC_SetPriority+0x50>)
 8019228:	79fb      	ldrb	r3, [r7, #7]
 801922a:	f003 030f 	and.w	r3, r3, #15
 801922e:	3b04      	subs	r3, #4
 8019230:	0112      	lsls	r2, r2, #4
 8019232:	b2d2      	uxtb	r2, r2
 8019234:	440b      	add	r3, r1
 8019236:	761a      	strb	r2, [r3, #24]
}
 8019238:	bf00      	nop
 801923a:	370c      	adds	r7, #12
 801923c:	46bd      	mov	sp, r7
 801923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019242:	4770      	bx	lr
 8019244:	e000e100 	.word	0xe000e100
 8019248:	e000ed00 	.word	0xe000ed00

0801924c <NVIC_EncodePriority>:
{
 801924c:	b480      	push	{r7}
 801924e:	b089      	sub	sp, #36	; 0x24
 8019250:	af00      	add	r7, sp, #0
 8019252:	60f8      	str	r0, [r7, #12]
 8019254:	60b9      	str	r1, [r7, #8]
 8019256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	f003 0307 	and.w	r3, r3, #7
 801925e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019260:	69fb      	ldr	r3, [r7, #28]
 8019262:	f1c3 0307 	rsb	r3, r3, #7
 8019266:	2b04      	cmp	r3, #4
 8019268:	bf28      	it	cs
 801926a:	2304      	movcs	r3, #4
 801926c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801926e:	69fb      	ldr	r3, [r7, #28]
 8019270:	3304      	adds	r3, #4
 8019272:	2b06      	cmp	r3, #6
 8019274:	d902      	bls.n	801927c <NVIC_EncodePriority+0x30>
 8019276:	69fb      	ldr	r3, [r7, #28]
 8019278:	3b03      	subs	r3, #3
 801927a:	e000      	b.n	801927e <NVIC_EncodePriority+0x32>
 801927c:	2300      	movs	r3, #0
 801927e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019280:	f04f 32ff 	mov.w	r2, #4294967295
 8019284:	69bb      	ldr	r3, [r7, #24]
 8019286:	fa02 f303 	lsl.w	r3, r2, r3
 801928a:	43da      	mvns	r2, r3
 801928c:	68bb      	ldr	r3, [r7, #8]
 801928e:	401a      	ands	r2, r3
 8019290:	697b      	ldr	r3, [r7, #20]
 8019292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019294:	f04f 31ff 	mov.w	r1, #4294967295
 8019298:	697b      	ldr	r3, [r7, #20]
 801929a:	fa01 f303 	lsl.w	r3, r1, r3
 801929e:	43d9      	mvns	r1, r3
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80192a4:	4313      	orrs	r3, r2
}
 80192a6:	4618      	mov	r0, r3
 80192a8:	3724      	adds	r7, #36	; 0x24
 80192aa:	46bd      	mov	sp, r7
 80192ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b0:	4770      	bx	lr
	...

080192b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	3b01      	subs	r3, #1
 80192c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80192c4:	d301      	bcc.n	80192ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80192c6:	2301      	movs	r3, #1
 80192c8:	e00f      	b.n	80192ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80192ca:	4a0a      	ldr	r2, [pc, #40]	; (80192f4 <SysTick_Config+0x40>)
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	3b01      	subs	r3, #1
 80192d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80192d2:	210f      	movs	r1, #15
 80192d4:	f04f 30ff 	mov.w	r0, #4294967295
 80192d8:	f7ff ff8e 	bl	80191f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80192dc:	4b05      	ldr	r3, [pc, #20]	; (80192f4 <SysTick_Config+0x40>)
 80192de:	2200      	movs	r2, #0
 80192e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80192e2:	4b04      	ldr	r3, [pc, #16]	; (80192f4 <SysTick_Config+0x40>)
 80192e4:	2207      	movs	r2, #7
 80192e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80192e8:	2300      	movs	r3, #0
}
 80192ea:	4618      	mov	r0, r3
 80192ec:	3708      	adds	r7, #8
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	bf00      	nop
 80192f4:	e000e010 	.word	0xe000e010

080192f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	f7ff ff29 	bl	8019158 <__NVIC_SetPriorityGrouping>
}
 8019306:	bf00      	nop
 8019308:	3708      	adds	r7, #8
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}

0801930e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801930e:	b580      	push	{r7, lr}
 8019310:	b086      	sub	sp, #24
 8019312:	af00      	add	r7, sp, #0
 8019314:	4603      	mov	r3, r0
 8019316:	60b9      	str	r1, [r7, #8]
 8019318:	607a      	str	r2, [r7, #4]
 801931a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801931c:	2300      	movs	r3, #0
 801931e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8019320:	f7ff ff3e 	bl	80191a0 <__NVIC_GetPriorityGrouping>
 8019324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019326:	687a      	ldr	r2, [r7, #4]
 8019328:	68b9      	ldr	r1, [r7, #8]
 801932a:	6978      	ldr	r0, [r7, #20]
 801932c:	f7ff ff8e 	bl	801924c <NVIC_EncodePriority>
 8019330:	4602      	mov	r2, r0
 8019332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019336:	4611      	mov	r1, r2
 8019338:	4618      	mov	r0, r3
 801933a:	f7ff ff5d 	bl	80191f8 <__NVIC_SetPriority>
}
 801933e:	bf00      	nop
 8019340:	3718      	adds	r7, #24
 8019342:	46bd      	mov	sp, r7
 8019344:	bd80      	pop	{r7, pc}

08019346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019346:	b580      	push	{r7, lr}
 8019348:	b082      	sub	sp, #8
 801934a:	af00      	add	r7, sp, #0
 801934c:	4603      	mov	r3, r0
 801934e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019354:	4618      	mov	r0, r3
 8019356:	f7ff ff31 	bl	80191bc <__NVIC_EnableIRQ>
}
 801935a:	bf00      	nop
 801935c:	3708      	adds	r7, #8
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}

08019362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019362:	b580      	push	{r7, lr}
 8019364:	b082      	sub	sp, #8
 8019366:	af00      	add	r7, sp, #0
 8019368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f7ff ffa2 	bl	80192b4 <SysTick_Config>
 8019370:	4603      	mov	r3, r0
}
 8019372:	4618      	mov	r0, r3
 8019374:	3708      	adds	r7, #8
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}
	...

0801937c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801937c:	b480      	push	{r7}
 801937e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019380:	f3bf 8f5f 	dmb	sy
}
 8019384:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019386:	4b07      	ldr	r3, [pc, #28]	; (80193a4 <HAL_MPU_Disable+0x28>)
 8019388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801938a:	4a06      	ldr	r2, [pc, #24]	; (80193a4 <HAL_MPU_Disable+0x28>)
 801938c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019390:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019392:	4b05      	ldr	r3, [pc, #20]	; (80193a8 <HAL_MPU_Disable+0x2c>)
 8019394:	2200      	movs	r2, #0
 8019396:	605a      	str	r2, [r3, #4]
}
 8019398:	bf00      	nop
 801939a:	46bd      	mov	sp, r7
 801939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	e000ed00 	.word	0xe000ed00
 80193a8:	e000ed90 	.word	0xe000ed90

080193ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80193ac:	b480      	push	{r7}
 80193ae:	b083      	sub	sp, #12
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80193b4:	4a0b      	ldr	r2, [pc, #44]	; (80193e4 <HAL_MPU_Enable+0x38>)
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f043 0301 	orr.w	r3, r3, #1
 80193bc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80193be:	4b0a      	ldr	r3, [pc, #40]	; (80193e8 <HAL_MPU_Enable+0x3c>)
 80193c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193c2:	4a09      	ldr	r2, [pc, #36]	; (80193e8 <HAL_MPU_Enable+0x3c>)
 80193c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80193c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80193ca:	f3bf 8f4f 	dsb	sy
}
 80193ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80193d0:	f3bf 8f6f 	isb	sy
}
 80193d4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80193d6:	bf00      	nop
 80193d8:	370c      	adds	r7, #12
 80193da:	46bd      	mov	sp, r7
 80193dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e0:	4770      	bx	lr
 80193e2:	bf00      	nop
 80193e4:	e000ed90 	.word	0xe000ed90
 80193e8:	e000ed00 	.word	0xe000ed00

080193ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80193ec:	b480      	push	{r7}
 80193ee:	b083      	sub	sp, #12
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	785a      	ldrb	r2, [r3, #1]
 80193f8:	4b1d      	ldr	r3, [pc, #116]	; (8019470 <HAL_MPU_ConfigRegion+0x84>)
 80193fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d029      	beq.n	8019458 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8019404:	4a1a      	ldr	r2, [pc, #104]	; (8019470 <HAL_MPU_ConfigRegion+0x84>)
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	7b1b      	ldrb	r3, [r3, #12]
 8019410:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	7adb      	ldrb	r3, [r3, #11]
 8019416:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019418:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	7a9b      	ldrb	r3, [r3, #10]
 801941e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019420:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	7b5b      	ldrb	r3, [r3, #13]
 8019426:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019428:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	7b9b      	ldrb	r3, [r3, #14]
 801942e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019430:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	7bdb      	ldrb	r3, [r3, #15]
 8019436:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019438:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	7a5b      	ldrb	r3, [r3, #9]
 801943e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019440:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	7a1b      	ldrb	r3, [r3, #8]
 8019446:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019448:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801944a:	687a      	ldr	r2, [r7, #4]
 801944c:	7812      	ldrb	r2, [r2, #0]
 801944e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019450:	4a07      	ldr	r2, [pc, #28]	; (8019470 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019452:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019454:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8019456:	e005      	b.n	8019464 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8019458:	4b05      	ldr	r3, [pc, #20]	; (8019470 <HAL_MPU_ConfigRegion+0x84>)
 801945a:	2200      	movs	r2, #0
 801945c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 801945e:	4b04      	ldr	r3, [pc, #16]	; (8019470 <HAL_MPU_ConfigRegion+0x84>)
 8019460:	2200      	movs	r2, #0
 8019462:	611a      	str	r2, [r3, #16]
}
 8019464:	bf00      	nop
 8019466:	370c      	adds	r7, #12
 8019468:	46bd      	mov	sp, r7
 801946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946e:	4770      	bx	lr
 8019470:	e000ed90 	.word	0xe000ed90

08019474 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b084      	sub	sp, #16
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019480:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8019482:	f7fe ff63 	bl	801834c <HAL_GetTick>
 8019486:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801948e:	b2db      	uxtb	r3, r3
 8019490:	2b02      	cmp	r3, #2
 8019492:	d008      	beq.n	80194a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	2280      	movs	r2, #128	; 0x80
 8019498:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	2200      	movs	r2, #0
 801949e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80194a2:	2301      	movs	r3, #1
 80194a4:	e052      	b.n	801954c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	681a      	ldr	r2, [r3, #0]
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	f022 0216 	bic.w	r2, r2, #22
 80194b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	695a      	ldr	r2, [r3, #20]
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80194c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d103      	bne.n	80194d6 <HAL_DMA_Abort+0x62>
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d007      	beq.n	80194e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	681a      	ldr	r2, [r3, #0]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f022 0208 	bic.w	r2, r2, #8
 80194e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	681a      	ldr	r2, [r3, #0]
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	f022 0201 	bic.w	r2, r2, #1
 80194f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80194f6:	e013      	b.n	8019520 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80194f8:	f7fe ff28 	bl	801834c <HAL_GetTick>
 80194fc:	4602      	mov	r2, r0
 80194fe:	68bb      	ldr	r3, [r7, #8]
 8019500:	1ad3      	subs	r3, r2, r3
 8019502:	2b05      	cmp	r3, #5
 8019504:	d90c      	bls.n	8019520 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	2220      	movs	r2, #32
 801950a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2203      	movs	r2, #3
 8019510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	2200      	movs	r2, #0
 8019518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 801951c:	2303      	movs	r3, #3
 801951e:	e015      	b.n	801954c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	f003 0301 	and.w	r3, r3, #1
 801952a:	2b00      	cmp	r3, #0
 801952c:	d1e4      	bne.n	80194f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019532:	223f      	movs	r2, #63	; 0x3f
 8019534:	409a      	lsls	r2, r3
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	2201      	movs	r2, #1
 801953e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	2200      	movs	r2, #0
 8019546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 801954a:	2300      	movs	r3, #0
}
 801954c:	4618      	mov	r0, r3
 801954e:	3710      	adds	r7, #16
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}

08019554 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019554:	b480      	push	{r7}
 8019556:	b083      	sub	sp, #12
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019562:	b2db      	uxtb	r3, r3
 8019564:	2b02      	cmp	r3, #2
 8019566:	d004      	beq.n	8019572 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2280      	movs	r2, #128	; 0x80
 801956c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801956e:	2301      	movs	r3, #1
 8019570:	e00c      	b.n	801958c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2205      	movs	r2, #5
 8019576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	681a      	ldr	r2, [r3, #0]
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	f022 0201 	bic.w	r2, r2, #1
 8019588:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801958a:	2300      	movs	r3, #0
}
 801958c:	4618      	mov	r0, r3
 801958e:	370c      	adds	r7, #12
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr

08019598 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b084      	sub	sp, #16
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d101      	bne.n	80195aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80195a6:	2301      	movs	r3, #1
 80195a8:	e06a      	b.n	8019680 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d106      	bne.n	80195c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	2223      	movs	r2, #35	; 0x23
 80195b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80195bc:	6878      	ldr	r0, [r7, #4]
 80195be:	f006 fbaf 	bl	801fd20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80195c2:	4b31      	ldr	r3, [pc, #196]	; (8019688 <HAL_ETH_Init+0xf0>)
 80195c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195c6:	4a30      	ldr	r2, [pc, #192]	; (8019688 <HAL_ETH_Init+0xf0>)
 80195c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80195cc:	6453      	str	r3, [r2, #68]	; 0x44
 80195ce:	4b2e      	ldr	r3, [pc, #184]	; (8019688 <HAL_ETH_Init+0xf0>)
 80195d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80195d6:	60bb      	str	r3, [r7, #8]
 80195d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80195da:	4b2c      	ldr	r3, [pc, #176]	; (801968c <HAL_ETH_Init+0xf4>)
 80195dc:	685b      	ldr	r3, [r3, #4]
 80195de:	4a2b      	ldr	r2, [pc, #172]	; (801968c <HAL_ETH_Init+0xf4>)
 80195e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80195e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80195e6:	4b29      	ldr	r3, [pc, #164]	; (801968c <HAL_ETH_Init+0xf4>)
 80195e8:	685a      	ldr	r2, [r3, #4]
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	689b      	ldr	r3, [r3, #8]
 80195ee:	4927      	ldr	r1, [pc, #156]	; (801968c <HAL_ETH_Init+0xf4>)
 80195f0:	4313      	orrs	r3, r2
 80195f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80195f4:	4b25      	ldr	r3, [pc, #148]	; (801968c <HAL_ETH_Init+0xf4>)
 80195f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	687a      	ldr	r2, [r7, #4]
 8019604:	6812      	ldr	r2, [r2, #0]
 8019606:	f043 0301 	orr.w	r3, r3, #1
 801960a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801960e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019610:	f7fe fe9c 	bl	801834c <HAL_GetTick>
 8019614:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8019616:	e011      	b.n	801963c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8019618:	f7fe fe98 	bl	801834c <HAL_GetTick>
 801961c:	4602      	mov	r2, r0
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	1ad3      	subs	r3, r2, r3
 8019622:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8019626:	d909      	bls.n	801963c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2204      	movs	r2, #4
 801962c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	22e0      	movs	r2, #224	; 0xe0
 8019634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8019638:	2301      	movs	r3, #1
 801963a:	e021      	b.n	8019680 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	f003 0301 	and.w	r3, r3, #1
 801964a:	2b00      	cmp	r3, #0
 801964c:	d1e4      	bne.n	8019618 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801964e:	6878      	ldr	r0, [r7, #4]
 8019650:	f000 fee4 	bl	801a41c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8019654:	6878      	ldr	r0, [r7, #4]
 8019656:	f000 ff8b 	bl	801a570 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f000 ffe1 	bl	801a622 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	685b      	ldr	r3, [r3, #4]
 8019664:	461a      	mov	r2, r3
 8019666:	2100      	movs	r1, #0
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f000 ff49 	bl	801a500 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	2200      	movs	r2, #0
 8019672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	2210      	movs	r2, #16
 801967a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801967e:	2300      	movs	r3, #0
}
 8019680:	4618      	mov	r0, r3
 8019682:	3710      	adds	r7, #16
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}
 8019688:	40023800 	.word	0x40023800
 801968c:	40013800 	.word	0x40013800

08019690 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b084      	sub	sp, #16
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801969e:	2b10      	cmp	r3, #16
 80196a0:	d150      	bne.n	8019744 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	2223      	movs	r2, #35	; 0x23
 80196a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	2204      	movs	r2, #4
 80196ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80196b0:	6878      	ldr	r0, [r7, #4]
 80196b2:	f000 f9fd 	bl	8019ab0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	681a      	ldr	r2, [r3, #0]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	f042 0208 	orr.w	r2, r2, #8
 80196c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80196ce:	2001      	movs	r0, #1
 80196d0:	f7fe fe48 	bl	8018364 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	68fa      	ldr	r2, [r7, #12]
 80196da:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	681a      	ldr	r2, [r3, #0]
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	f042 0204 	orr.w	r2, r2, #4
 80196ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80196f4:	2001      	movs	r0, #1
 80196f6:	f7fe fe35 	bl	8018364 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	68fa      	ldr	r2, [r7, #12]
 8019700:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8019702:	6878      	ldr	r0, [r7, #4]
 8019704:	f000 fd2a 	bl	801a15c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019710:	699b      	ldr	r3, [r3, #24]
 8019712:	687a      	ldr	r2, [r7, #4]
 8019714:	6812      	ldr	r2, [r2, #0]
 8019716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801971a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801971e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019728:	699b      	ldr	r3, [r3, #24]
 801972a:	687a      	ldr	r2, [r7, #4]
 801972c:	6812      	ldr	r2, [r2, #0]
 801972e:	f043 0302 	orr.w	r3, r3, #2
 8019732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019736:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	2223      	movs	r2, #35	; 0x23
 801973c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8019740:	2300      	movs	r3, #0
 8019742:	e000      	b.n	8019746 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8019744:	2301      	movs	r3, #1
  }
}
 8019746:	4618      	mov	r0, r3
 8019748:	3710      	adds	r7, #16
 801974a:	46bd      	mov	sp, r7
 801974c:	bd80      	pop	{r7, pc}

0801974e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 801974e:	b580      	push	{r7, lr}
 8019750:	b084      	sub	sp, #16
 8019752:	af00      	add	r7, sp, #0
 8019754:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801975c:	2b23      	cmp	r3, #35	; 0x23
 801975e:	d14a      	bne.n	80197f6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	2223      	movs	r2, #35	; 0x23
 8019764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019770:	699b      	ldr	r3, [r3, #24]
 8019772:	687a      	ldr	r2, [r7, #4]
 8019774:	6812      	ldr	r2, [r2, #0]
 8019776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801977a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801977e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019788:	699b      	ldr	r3, [r3, #24]
 801978a:	687a      	ldr	r2, [r7, #4]
 801978c:	6812      	ldr	r2, [r2, #0]
 801978e:	f023 0302 	bic.w	r3, r3, #2
 8019792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019796:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	681a      	ldr	r2, [r3, #0]
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	f022 0204 	bic.w	r2, r2, #4
 80197a6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80197b0:	2001      	movs	r0, #1
 80197b2:	f7fe fdd7 	bl	8018364 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	68fa      	ldr	r2, [r7, #12]
 80197bc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80197be:	6878      	ldr	r0, [r7, #4]
 80197c0:	f000 fccc 	bl	801a15c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	681a      	ldr	r2, [r3, #0]
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	f022 0208 	bic.w	r2, r2, #8
 80197d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80197dc:	2001      	movs	r0, #1
 80197de:	f7fe fdc1 	bl	8018364 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	68fa      	ldr	r2, [r7, #12]
 80197e8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	2210      	movs	r2, #16
 80197ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80197f2:	2300      	movs	r3, #0
 80197f4:	e000      	b.n	80197f8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80197f6:	2301      	movs	r3, #1
  }
}
 80197f8:	4618      	mov	r0, r3
 80197fa:	3710      	adds	r7, #16
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b086      	sub	sp, #24
 8019804:	af00      	add	r7, sp, #0
 8019806:	60f8      	str	r0, [r7, #12]
 8019808:	60b9      	str	r1, [r7, #8]
 801980a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 801980c:	68bb      	ldr	r3, [r7, #8]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d109      	bne.n	8019826 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019818:	f043 0201 	orr.w	r2, r3, #1
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8019822:	2301      	movs	r3, #1
 8019824:	e07c      	b.n	8019920 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801982c:	2b23      	cmp	r3, #35	; 0x23
 801982e:	d176      	bne.n	801991e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8019830:	2200      	movs	r2, #0
 8019832:	68b9      	ldr	r1, [r7, #8]
 8019834:	68f8      	ldr	r0, [r7, #12]
 8019836:	f000 ff61 	bl	801a6fc <ETH_Prepare_Tx_Descriptors>
 801983a:	4603      	mov	r3, r0
 801983c:	2b00      	cmp	r3, #0
 801983e:	d009      	beq.n	8019854 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019846:	f043 0202 	orr.w	r2, r3, #2
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8019850:	2301      	movs	r3, #1
 8019852:	e065      	b.n	8019920 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8019854:	f3bf 8f4f 	dsb	sy
}
 8019858:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	3206      	adds	r2, #6
 8019862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019866:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801986c:	1c5a      	adds	r2, r3, #1
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	629a      	str	r2, [r3, #40]	; 0x28
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019876:	2b03      	cmp	r3, #3
 8019878:	d904      	bls.n	8019884 <HAL_ETH_Transmit+0x84>
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801987e:	1f1a      	subs	r2, r3, #4
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	681a      	ldr	r2, [r3, #0]
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	3106      	adds	r1, #6
 8019890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019898:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 801989a:	f7fe fd57 	bl	801834c <HAL_GetTick>
 801989e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80198a0:	e037      	b.n	8019912 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80198aa:	695b      	ldr	r3, [r3, #20]
 80198ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d011      	beq.n	80198d8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80198ba:	f043 0208 	orr.w	r2, r3, #8
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80198cc:	695a      	ldr	r2, [r3, #20]
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80198d4:	2301      	movs	r3, #1
 80198d6:	e023      	b.n	8019920 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198de:	d018      	beq.n	8019912 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80198e0:	f7fe fd34 	bl	801834c <HAL_GetTick>
 80198e4:	4602      	mov	r2, r0
 80198e6:	693b      	ldr	r3, [r7, #16]
 80198e8:	1ad3      	subs	r3, r2, r3
 80198ea:	687a      	ldr	r2, [r7, #4]
 80198ec:	429a      	cmp	r2, r3
 80198ee:	d302      	bcc.n	80198f6 <HAL_ETH_Transmit+0xf6>
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d10d      	bne.n	8019912 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80198fc:	f043 0204 	orr.w	r2, r3, #4
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801990c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801990e:	2301      	movs	r3, #1
 8019910:	e006      	b.n	8019920 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	2b00      	cmp	r3, #0
 8019918:	dbc3      	blt.n	80198a2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 801991a:	2300      	movs	r3, #0
 801991c:	e000      	b.n	8019920 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801991e:	2301      	movs	r3, #1
  }
}
 8019920:	4618      	mov	r0, r3
 8019922:	3718      	adds	r7, #24
 8019924:	46bd      	mov	sp, r7
 8019926:	bd80      	pop	{r7, pc}

08019928 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b088      	sub	sp, #32
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
 8019930:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8019932:	2300      	movs	r3, #0
 8019934:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8019936:	2300      	movs	r3, #0
 8019938:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 801993a:	683b      	ldr	r3, [r7, #0]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d109      	bne.n	8019954 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019946:	f043 0201 	orr.w	r2, r3, #1
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8019950:	2301      	movs	r3, #1
 8019952:	e0a8      	b.n	8019aa6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801995a:	2b23      	cmp	r3, #35	; 0x23
 801995c:	d001      	beq.n	8019962 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 801995e:	2301      	movs	r3, #1
 8019960:	e0a1      	b.n	8019aa6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019966:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	69fa      	ldr	r2, [r7, #28]
 801996c:	3212      	adds	r2, #18
 801996e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019972:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019978:	f1c3 0304 	rsb	r3, r3, #4
 801997c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801997e:	e06a      	b.n	8019a56 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8019980:	69bb      	ldr	r3, [r7, #24]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019988:	2b00      	cmp	r3, #0
 801998a:	d007      	beq.n	801999c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 801998c:	69bb      	ldr	r3, [r7, #24]
 801998e:	699a      	ldr	r2, [r3, #24]
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8019994:	69bb      	ldr	r3, [r7, #24]
 8019996:	69da      	ldr	r2, [r3, #28]
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 801999c:	69bb      	ldr	r3, [r7, #24]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d103      	bne.n	80199b0 <HAL_ETH_ReadData+0x88>
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d040      	beq.n	8019a32 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80199b0:	69bb      	ldr	r3, [r7, #24]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d005      	beq.n	80199c8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	2200      	movs	r2, #0
 80199c0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	2200      	movs	r2, #0
 80199c6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	695b      	ldr	r3, [r3, #20]
 80199cc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80199ce:	69bb      	ldr	r3, [r7, #24]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d00c      	beq.n	80199f4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80199da:	69bb      	ldr	r3, [r7, #24]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	0c1b      	lsrs	r3, r3, #16
 80199e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80199e4:	3b04      	subs	r3, #4
 80199e6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80199e8:	69bb      	ldr	r3, [r7, #24]
 80199ea:	681a      	ldr	r2, [r3, #0]
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80199f0:	2301      	movs	r3, #1
 80199f2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80199f4:	69bb      	ldr	r3, [r7, #24]
 80199f6:	689a      	ldr	r2, [r3, #8]
 80199f8:	69bb      	ldr	r3, [r7, #24]
 80199fa:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8019a08:	69bb      	ldr	r3, [r7, #24]
 8019a0a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8019a0c:	461a      	mov	r2, r3
 8019a0e:	693b      	ldr	r3, [r7, #16]
 8019a10:	b29b      	uxth	r3, r3
 8019a12:	f006 fb4f 	bl	80200b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019a1a:	1c5a      	adds	r2, r3, #1
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8019a24:	693b      	ldr	r3, [r7, #16]
 8019a26:	441a      	add	r2, r3
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8019a2c:	69bb      	ldr	r3, [r7, #24]
 8019a2e:	2200      	movs	r2, #0
 8019a30:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8019a32:	69fb      	ldr	r3, [r7, #28]
 8019a34:	3301      	adds	r3, #1
 8019a36:	61fb      	str	r3, [r7, #28]
 8019a38:	69fb      	ldr	r3, [r7, #28]
 8019a3a:	2b03      	cmp	r3, #3
 8019a3c:	d902      	bls.n	8019a44 <HAL_ETH_ReadData+0x11c>
 8019a3e:	69fb      	ldr	r3, [r7, #28]
 8019a40:	3b04      	subs	r3, #4
 8019a42:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	69fa      	ldr	r2, [r7, #28]
 8019a48:	3212      	adds	r2, #18
 8019a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a4e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	3301      	adds	r3, #1
 8019a54:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8019a56:	69bb      	ldr	r3, [r7, #24]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	db06      	blt.n	8019a6c <HAL_ETH_ReadData+0x144>
 8019a5e:	697a      	ldr	r2, [r7, #20]
 8019a60:	68bb      	ldr	r3, [r7, #8]
 8019a62:	429a      	cmp	r2, r3
 8019a64:	d202      	bcs.n	8019a6c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8019a66:	7bfb      	ldrb	r3, [r7, #15]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d089      	beq.n	8019980 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	441a      	add	r2, r3
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d002      	beq.n	8019a86 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8019a80:	6878      	ldr	r0, [r7, #4]
 8019a82:	f000 f815 	bl	8019ab0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	69fa      	ldr	r2, [r7, #28]
 8019a8a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8019a8c:	7bfb      	ldrb	r3, [r7, #15]
 8019a8e:	2b01      	cmp	r3, #1
 8019a90:	d108      	bne.n	8019aa4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8019a96:	683b      	ldr	r3, [r7, #0]
 8019a98:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	e000      	b.n	8019aa6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8019aa4:	2301      	movs	r3, #1
}
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	3720      	adds	r7, #32
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	bd80      	pop	{r7, pc}
	...

08019ab0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b088      	sub	sp, #32
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8019ab8:	2300      	movs	r3, #0
 8019aba:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8019abc:	2301      	movs	r3, #1
 8019abe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019ac4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	69fa      	ldr	r2, [r7, #28]
 8019aca:	3212      	adds	r2, #18
 8019acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019ad0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ad6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8019ad8:	e040      	b.n	8019b5c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8019ada:	697b      	ldr	r3, [r7, #20]
 8019adc:	6a1b      	ldr	r3, [r3, #32]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d112      	bne.n	8019b08 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8019ae2:	f107 030c 	add.w	r3, r7, #12
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f006 fab4 	bl	8020054 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d102      	bne.n	8019af8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8019af2:	2300      	movs	r3, #0
 8019af4:	74fb      	strb	r3, [r7, #19]
 8019af6:	e007      	b.n	8019b08 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	461a      	mov	r2, r3
 8019afc:	697b      	ldr	r3, [r7, #20]
 8019afe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	461a      	mov	r2, r3
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8019b08:	7cfb      	ldrb	r3, [r7, #19]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d026      	beq.n	8019b5c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d103      	bne.n	8019b1e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	4a1e      	ldr	r2, [pc, #120]	; (8019b94 <ETH_UpdateDescriptor+0xe4>)
 8019b1a:	605a      	str	r2, [r3, #4]
 8019b1c:	e003      	b.n	8019b26 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8019b24:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8019b26:	f3bf 8f5f 	dmb	sy
}
 8019b2a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8019b2c:	697b      	ldr	r3, [r7, #20]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019b34:	697b      	ldr	r3, [r7, #20]
 8019b36:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8019b38:	69fb      	ldr	r3, [r7, #28]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	61fb      	str	r3, [r7, #28]
 8019b3e:	69fb      	ldr	r3, [r7, #28]
 8019b40:	2b03      	cmp	r3, #3
 8019b42:	d902      	bls.n	8019b4a <ETH_UpdateDescriptor+0x9a>
 8019b44:	69fb      	ldr	r3, [r7, #28]
 8019b46:	3b04      	subs	r3, #4
 8019b48:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	69fa      	ldr	r2, [r7, #28]
 8019b4e:	3212      	adds	r2, #18
 8019b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019b54:	617b      	str	r3, [r7, #20]
      desccount--;
 8019b56:	69bb      	ldr	r3, [r7, #24]
 8019b58:	3b01      	subs	r3, #1
 8019b5a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8019b5c:	69bb      	ldr	r3, [r7, #24]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d002      	beq.n	8019b68 <ETH_UpdateDescriptor+0xb8>
 8019b62:	7cfb      	ldrb	r3, [r7, #19]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d1b8      	bne.n	8019ada <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b6c:	69ba      	ldr	r2, [r7, #24]
 8019b6e:	429a      	cmp	r2, r3
 8019b70:	d00c      	beq.n	8019b8c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019b7a:	461a      	mov	r2, r3
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	69fa      	ldr	r2, [r7, #28]
 8019b84:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	69ba      	ldr	r2, [r7, #24]
 8019b8a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8019b8c:	bf00      	nop
 8019b8e:	3720      	adds	r7, #32
 8019b90:	46bd      	mov	sp, r7
 8019b92:	bd80      	pop	{r7, pc}
 8019b94:	800045f8 	.word	0x800045f8

08019b98 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b082      	sub	sp, #8
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019ba8:	695b      	ldr	r3, [r3, #20]
 8019baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019bae:	2b40      	cmp	r3, #64	; 0x40
 8019bb0:	d112      	bne.n	8019bd8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019bba:	69db      	ldr	r3, [r3, #28]
 8019bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019bc0:	2b40      	cmp	r3, #64	; 0x40
 8019bc2:	d109      	bne.n	8019bd8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019bcc:	461a      	mov	r2, r3
 8019bce:	4b50      	ldr	r3, [pc, #320]	; (8019d10 <HAL_ETH_IRQHandler+0x178>)
 8019bd0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8019bd2:	6878      	ldr	r0, [r7, #4]
 8019bd4:	f000 f8ac 	bl	8019d30 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019be0:	695b      	ldr	r3, [r3, #20]
 8019be2:	f003 0301 	and.w	r3, r3, #1
 8019be6:	2b01      	cmp	r3, #1
 8019be8:	d113      	bne.n	8019c12 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019bf2:	69db      	ldr	r3, [r3, #28]
 8019bf4:	f003 0301 	and.w	r3, r3, #1
 8019bf8:	2b01      	cmp	r3, #1
 8019bfa:	d10a      	bne.n	8019c12 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c04:	461a      	mov	r2, r3
 8019c06:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8019c0a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8019c0c:	6878      	ldr	r0, [r7, #4]
 8019c0e:	f000 f885 	bl	8019d1c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c1a:	695b      	ldr	r3, [r3, #20]
 8019c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019c24:	d14c      	bne.n	8019cc0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c2e:	69db      	ldr	r3, [r3, #28]
 8019c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019c38:	d142      	bne.n	8019cc0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019c40:	f043 0208 	orr.w	r2, r3, #8
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c52:	695b      	ldr	r3, [r3, #20]
 8019c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019c5c:	d11a      	bne.n	8019c94 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c66:	695a      	ldr	r2, [r3, #20]
 8019c68:	4b2a      	ldr	r3, [pc, #168]	; (8019d14 <HAL_ETH_IRQHandler+0x17c>)
 8019c6a:	4013      	ands	r3, r2
 8019c6c:	687a      	ldr	r2, [r7, #4]
 8019c6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c7a:	69db      	ldr	r3, [r3, #28]
 8019c7c:	687a      	ldr	r2, [r7, #4]
 8019c7e:	6812      	ldr	r2, [r2, #0]
 8019c80:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8019c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019c88:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	22e0      	movs	r2, #224	; 0xe0
 8019c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8019c92:	e012      	b.n	8019cba <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c9c:	695a      	ldr	r2, [r3, #20]
 8019c9e:	f248 6380 	movw	r3, #34432	; 0x8680
 8019ca2:	4013      	ands	r3, r2
 8019ca4:	687a      	ldr	r2, [r7, #4]
 8019ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019cb2:	461a      	mov	r2, r3
 8019cb4:	f248 6380 	movw	r3, #34432	; 0x8680
 8019cb8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8019cba:	6878      	ldr	r0, [r7, #4]
 8019cbc:	f000 f842 	bl	8019d44 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cc6:	f003 0308 	and.w	r3, r3, #8
 8019cca:	2b08      	cmp	r3, #8
 8019ccc:	d10e      	bne.n	8019cec <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cd4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8019cde:	6878      	ldr	r0, [r7, #4]
 8019ce0:	f000 f83a 	bl	8019d58 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8019cec:	4b0a      	ldr	r3, [pc, #40]	; (8019d18 <HAL_ETH_IRQHandler+0x180>)
 8019cee:	695b      	ldr	r3, [r3, #20]
 8019cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d006      	beq.n	8019d06 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8019cf8:	4b07      	ldr	r3, [pc, #28]	; (8019d18 <HAL_ETH_IRQHandler+0x180>)
 8019cfa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019cfe:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8019d00:	6878      	ldr	r0, [r7, #4]
 8019d02:	f000 f833 	bl	8019d6c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8019d06:	bf00      	nop
 8019d08:	3708      	adds	r7, #8
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	bd80      	pop	{r7, pc}
 8019d0e:	bf00      	nop
 8019d10:	00010040 	.word	0x00010040
 8019d14:	007e2000 	.word	0x007e2000
 8019d18:	40013c00 	.word	0x40013c00

08019d1c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8019d1c:	b480      	push	{r7}
 8019d1e:	b083      	sub	sp, #12
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8019d24:	bf00      	nop
 8019d26:	370c      	adds	r7, #12
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2e:	4770      	bx	lr

08019d30 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8019d30:	b480      	push	{r7}
 8019d32:	b083      	sub	sp, #12
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8019d38:	bf00      	nop
 8019d3a:	370c      	adds	r7, #12
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d42:	4770      	bx	lr

08019d44 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8019d44:	b480      	push	{r7}
 8019d46:	b083      	sub	sp, #12
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8019d4c:	bf00      	nop
 8019d4e:	370c      	adds	r7, #12
 8019d50:	46bd      	mov	sp, r7
 8019d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d56:	4770      	bx	lr

08019d58 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8019d58:	b480      	push	{r7}
 8019d5a:	b083      	sub	sp, #12
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8019d60:	bf00      	nop
 8019d62:	370c      	adds	r7, #12
 8019d64:	46bd      	mov	sp, r7
 8019d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d6a:	4770      	bx	lr

08019d6c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8019d6c:	b480      	push	{r7}
 8019d6e:	b083      	sub	sp, #12
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8019d74:	bf00      	nop
 8019d76:	370c      	adds	r7, #12
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7e:	4770      	bx	lr

08019d80 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	b086      	sub	sp, #24
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	60f8      	str	r0, [r7, #12]
 8019d88:	60b9      	str	r1, [r7, #8]
 8019d8a:	607a      	str	r2, [r7, #4]
 8019d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	691b      	ldr	r3, [r3, #16]
 8019d94:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8019d96:	697b      	ldr	r3, [r7, #20]
 8019d98:	f003 031c 	and.w	r3, r3, #28
 8019d9c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8019d9e:	68bb      	ldr	r3, [r7, #8]
 8019da0:	02db      	lsls	r3, r3, #11
 8019da2:	b29b      	uxth	r3, r3
 8019da4:	697a      	ldr	r2, [r7, #20]
 8019da6:	4313      	orrs	r3, r2
 8019da8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	019b      	lsls	r3, r3, #6
 8019dae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8019db2:	697a      	ldr	r2, [r7, #20]
 8019db4:	4313      	orrs	r3, r2
 8019db6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8019db8:	697b      	ldr	r3, [r7, #20]
 8019dba:	f023 0302 	bic.w	r3, r3, #2
 8019dbe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8019dc0:	697b      	ldr	r3, [r7, #20]
 8019dc2:	f043 0301 	orr.w	r3, r3, #1
 8019dc6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	697a      	ldr	r2, [r7, #20]
 8019dce:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8019dd0:	f7fe fabc 	bl	801834c <HAL_GetTick>
 8019dd4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8019dd6:	e00d      	b.n	8019df4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8019dd8:	f7fe fab8 	bl	801834c <HAL_GetTick>
 8019ddc:	4602      	mov	r2, r0
 8019dde:	693b      	ldr	r3, [r7, #16]
 8019de0:	1ad3      	subs	r3, r2, r3
 8019de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019de6:	d301      	bcc.n	8019dec <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8019de8:	2301      	movs	r3, #1
 8019dea:	e010      	b.n	8019e0e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	691b      	ldr	r3, [r3, #16]
 8019df2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8019df4:	697b      	ldr	r3, [r7, #20]
 8019df6:	f003 0301 	and.w	r3, r3, #1
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d1ec      	bne.n	8019dd8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	695b      	ldr	r3, [r3, #20]
 8019e04:	b29b      	uxth	r3, r3
 8019e06:	461a      	mov	r2, r3
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019e0c:	2300      	movs	r3, #0
}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	3718      	adds	r7, #24
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}

08019e16 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8019e16:	b580      	push	{r7, lr}
 8019e18:	b086      	sub	sp, #24
 8019e1a:	af00      	add	r7, sp, #0
 8019e1c:	60f8      	str	r0, [r7, #12]
 8019e1e:	60b9      	str	r1, [r7, #8]
 8019e20:	607a      	str	r2, [r7, #4]
 8019e22:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	691b      	ldr	r3, [r3, #16]
 8019e2a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8019e2c:	697b      	ldr	r3, [r7, #20]
 8019e2e:	f003 031c 	and.w	r3, r3, #28
 8019e32:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	02db      	lsls	r3, r3, #11
 8019e38:	b29b      	uxth	r3, r3
 8019e3a:	697a      	ldr	r2, [r7, #20]
 8019e3c:	4313      	orrs	r3, r2
 8019e3e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	019b      	lsls	r3, r3, #6
 8019e44:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8019e48:	697a      	ldr	r2, [r7, #20]
 8019e4a:	4313      	orrs	r3, r2
 8019e4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8019e4e:	697b      	ldr	r3, [r7, #20]
 8019e50:	f043 0302 	orr.w	r3, r3, #2
 8019e54:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8019e56:	697b      	ldr	r3, [r7, #20]
 8019e58:	f043 0301 	orr.w	r3, r3, #1
 8019e5c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	b29a      	uxth	r2, r3
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	697a      	ldr	r2, [r7, #20]
 8019e6e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019e70:	f7fe fa6c 	bl	801834c <HAL_GetTick>
 8019e74:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8019e76:	e00d      	b.n	8019e94 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8019e78:	f7fe fa68 	bl	801834c <HAL_GetTick>
 8019e7c:	4602      	mov	r2, r0
 8019e7e:	693b      	ldr	r3, [r7, #16]
 8019e80:	1ad3      	subs	r3, r2, r3
 8019e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e86:	d301      	bcc.n	8019e8c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8019e88:	2301      	movs	r3, #1
 8019e8a:	e009      	b.n	8019ea0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	691b      	ldr	r3, [r3, #16]
 8019e92:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8019e94:	697b      	ldr	r3, [r7, #20]
 8019e96:	f003 0301 	and.w	r3, r3, #1
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d1ec      	bne.n	8019e78 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8019e9e:	2300      	movs	r3, #0
}
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	3718      	adds	r7, #24
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bd80      	pop	{r7, pc}

08019ea8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8019ea8:	b480      	push	{r7}
 8019eaa:	b083      	sub	sp, #12
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	6078      	str	r0, [r7, #4]
 8019eb0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d101      	bne.n	8019ebc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8019eb8:	2301      	movs	r3, #1
 8019eba:	e0d9      	b.n	801a070 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	f003 0310 	and.w	r3, r3, #16
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	bf14      	ite	ne
 8019eca:	2301      	movne	r3, #1
 8019ecc:	2300      	moveq	r3, #0
 8019ece:	b2db      	uxtb	r3, r3
 8019ed0:	461a      	mov	r2, r3
 8019ed2:	683b      	ldr	r3, [r7, #0]
 8019ed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8019ee2:	683b      	ldr	r3, [r7, #0]
 8019ee4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	bf0c      	ite	eq
 8019ef4:	2301      	moveq	r3, #1
 8019ef6:	2300      	movne	r3, #0
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	461a      	mov	r2, r3
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	bf14      	ite	ne
 8019f10:	2301      	movne	r3, #1
 8019f12:	2300      	moveq	r3, #0
 8019f14:	b2db      	uxtb	r3, r3
 8019f16:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	bf0c      	ite	eq
 8019f2a:	2301      	moveq	r3, #1
 8019f2c:	2300      	movne	r3, #0
 8019f2e:	b2db      	uxtb	r3, r3
 8019f30:	461a      	mov	r2, r3
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	bf14      	ite	ne
 8019f44:	2301      	movne	r3, #1
 8019f46:	2300      	moveq	r3, #0
 8019f48:	b2db      	uxtb	r3, r3
 8019f4a:	461a      	mov	r2, r3
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8019f5a:	683b      	ldr	r3, [r7, #0]
 8019f5c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	bf0c      	ite	eq
 8019f7a:	2301      	moveq	r3, #1
 8019f7c:	2300      	movne	r3, #0
 8019f7e:	b2db      	uxtb	r3, r3
 8019f80:	461a      	mov	r2, r3
 8019f82:	683b      	ldr	r3, [r7, #0]
 8019f84:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	bf0c      	ite	eq
 8019f94:	2301      	moveq	r3, #1
 8019f96:	2300      	movne	r3, #0
 8019f98:	b2db      	uxtb	r3, r3
 8019f9a:	461a      	mov	r2, r3
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	bf14      	ite	ne
 8019fae:	2301      	movne	r3, #1
 8019fb0:	2300      	moveq	r3, #0
 8019fb2:	b2db      	uxtb	r3, r3
 8019fb4:	461a      	mov	r2, r3
 8019fb6:	683b      	ldr	r3, [r7, #0]
 8019fb8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	bf14      	ite	ne
 8019fd6:	2301      	movne	r3, #1
 8019fd8:	2300      	moveq	r3, #0
 8019fda:	b2db      	uxtb	r3, r3
 8019fdc:	461a      	mov	r2, r3
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	699b      	ldr	r3, [r3, #24]
 8019fe8:	f003 0302 	and.w	r3, r3, #2
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	bf14      	ite	ne
 8019ff0:	2301      	movne	r3, #1
 8019ff2:	2300      	moveq	r3, #0
 8019ff4:	b2db      	uxtb	r3, r3
 8019ff6:	461a      	mov	r2, r3
 8019ff8:	683b      	ldr	r3, [r7, #0]
 8019ffa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	699b      	ldr	r3, [r3, #24]
 801a004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a008:	2b00      	cmp	r3, #0
 801a00a:	bf0c      	ite	eq
 801a00c:	2301      	moveq	r3, #1
 801a00e:	2300      	movne	r3, #0
 801a010:	b2db      	uxtb	r3, r3
 801a012:	461a      	mov	r2, r3
 801a014:	683b      	ldr	r3, [r7, #0]
 801a016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	699b      	ldr	r3, [r3, #24]
 801a020:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801a024:	683b      	ldr	r3, [r7, #0]
 801a026:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	699b      	ldr	r3, [r3, #24]
 801a02e:	0c1b      	lsrs	r3, r3, #16
 801a030:	b29a      	uxth	r2, r3
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	699b      	ldr	r3, [r3, #24]
 801a03c:	f003 0304 	and.w	r3, r3, #4
 801a040:	2b00      	cmp	r3, #0
 801a042:	bf14      	ite	ne
 801a044:	2301      	movne	r3, #1
 801a046:	2300      	moveq	r3, #0
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	461a      	mov	r2, r3
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	699b      	ldr	r3, [r3, #24]
 801a058:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	bf14      	ite	ne
 801a060:	2301      	movne	r3, #1
 801a062:	2300      	moveq	r3, #0
 801a064:	b2db      	uxtb	r3, r3
 801a066:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 801a06e:	2300      	movs	r3, #0
}
 801a070:	4618      	mov	r0, r3
 801a072:	370c      	adds	r7, #12
 801a074:	46bd      	mov	sp, r7
 801a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07a:	4770      	bx	lr

0801a07c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
 801a084:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d101      	bne.n	801a090 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 801a08c:	2301      	movs	r3, #1
 801a08e:	e00b      	b.n	801a0a8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a096:	2b10      	cmp	r3, #16
 801a098:	d105      	bne.n	801a0a6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 801a09a:	6839      	ldr	r1, [r7, #0]
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	f000 f883 	bl	801a1a8 <ETH_SetMACConfig>

    return HAL_OK;
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	e000      	b.n	801a0a8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801a0a6:	2301      	movs	r3, #1
  }
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	3708      	adds	r7, #8
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd80      	pop	{r7, pc}

0801a0b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801a0b0:	b580      	push	{r7, lr}
 801a0b2:	b084      	sub	sp, #16
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	691b      	ldr	r3, [r3, #16]
 801a0be:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	f023 031c 	bic.w	r3, r3, #28
 801a0c6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801a0c8:	f002 f916 	bl	801c2f8 <HAL_RCC_GetHCLKFreq>
 801a0cc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801a0ce:	68bb      	ldr	r3, [r7, #8]
 801a0d0:	4a1d      	ldr	r2, [pc, #116]	; (801a148 <HAL_ETH_SetMDIOClockRange+0x98>)
 801a0d2:	4293      	cmp	r3, r2
 801a0d4:	d908      	bls.n	801a0e8 <HAL_ETH_SetMDIOClockRange+0x38>
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	4a1c      	ldr	r2, [pc, #112]	; (801a14c <HAL_ETH_SetMDIOClockRange+0x9c>)
 801a0da:	4293      	cmp	r3, r2
 801a0dc:	d804      	bhi.n	801a0e8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	f043 0308 	orr.w	r3, r3, #8
 801a0e4:	60fb      	str	r3, [r7, #12]
 801a0e6:	e027      	b.n	801a138 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 801a0e8:	68bb      	ldr	r3, [r7, #8]
 801a0ea:	4a18      	ldr	r2, [pc, #96]	; (801a14c <HAL_ETH_SetMDIOClockRange+0x9c>)
 801a0ec:	4293      	cmp	r3, r2
 801a0ee:	d908      	bls.n	801a102 <HAL_ETH_SetMDIOClockRange+0x52>
 801a0f0:	68bb      	ldr	r3, [r7, #8]
 801a0f2:	4a17      	ldr	r2, [pc, #92]	; (801a150 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801a0f4:	4293      	cmp	r3, r2
 801a0f6:	d204      	bcs.n	801a102 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	f043 030c 	orr.w	r3, r3, #12
 801a0fe:	60fb      	str	r3, [r7, #12]
 801a100:	e01a      	b.n	801a138 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801a102:	68bb      	ldr	r3, [r7, #8]
 801a104:	4a12      	ldr	r2, [pc, #72]	; (801a150 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801a106:	4293      	cmp	r3, r2
 801a108:	d303      	bcc.n	801a112 <HAL_ETH_SetMDIOClockRange+0x62>
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	4a11      	ldr	r2, [pc, #68]	; (801a154 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801a10e:	4293      	cmp	r3, r2
 801a110:	d911      	bls.n	801a136 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801a112:	68bb      	ldr	r3, [r7, #8]
 801a114:	4a0f      	ldr	r2, [pc, #60]	; (801a154 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801a116:	4293      	cmp	r3, r2
 801a118:	d908      	bls.n	801a12c <HAL_ETH_SetMDIOClockRange+0x7c>
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	4a0e      	ldr	r2, [pc, #56]	; (801a158 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801a11e:	4293      	cmp	r3, r2
 801a120:	d804      	bhi.n	801a12c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	f043 0304 	orr.w	r3, r3, #4
 801a128:	60fb      	str	r3, [r7, #12]
 801a12a:	e005      	b.n	801a138 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	f043 0310 	orr.w	r3, r3, #16
 801a132:	60fb      	str	r3, [r7, #12]
 801a134:	e000      	b.n	801a138 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801a136:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	68fa      	ldr	r2, [r7, #12]
 801a13e:	611a      	str	r2, [r3, #16]
}
 801a140:	bf00      	nop
 801a142:	3710      	adds	r7, #16
 801a144:	46bd      	mov	sp, r7
 801a146:	bd80      	pop	{r7, pc}
 801a148:	01312cff 	.word	0x01312cff
 801a14c:	02160ebf 	.word	0x02160ebf
 801a150:	03938700 	.word	0x03938700
 801a154:	05f5e0ff 	.word	0x05f5e0ff
 801a158:	08f0d17f 	.word	0x08f0d17f

0801a15c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b084      	sub	sp, #16
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801a164:	2300      	movs	r3, #0
 801a166:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a170:	699b      	ldr	r3, [r3, #24]
 801a172:	687a      	ldr	r2, [r7, #4]
 801a174:	6812      	ldr	r2, [r2, #0]
 801a176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a17a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a17e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a188:	699b      	ldr	r3, [r3, #24]
 801a18a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a18c:	2001      	movs	r0, #1
 801a18e:	f7fe f8e9 	bl	8018364 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	681a      	ldr	r2, [r3, #0]
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a19c:	6193      	str	r3, [r2, #24]
}
 801a19e:	bf00      	nop
 801a1a0:	3710      	adds	r7, #16
 801a1a2:	46bd      	mov	sp, r7
 801a1a4:	bd80      	pop	{r7, pc}
	...

0801a1a8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b084      	sub	sp, #16
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
 801a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801a1ba:	68fa      	ldr	r2, [r7, #12]
 801a1bc:	4b51      	ldr	r3, [pc, #324]	; (801a304 <ETH_SetMACConfig+0x15c>)
 801a1be:	4013      	ands	r3, r2
 801a1c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	7c1b      	ldrb	r3, [r3, #16]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d102      	bne.n	801a1d0 <ETH_SetMACConfig+0x28>
 801a1ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801a1ce:	e000      	b.n	801a1d2 <ETH_SetMACConfig+0x2a>
 801a1d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	7c5b      	ldrb	r3, [r3, #17]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d102      	bne.n	801a1e0 <ETH_SetMACConfig+0x38>
 801a1da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801a1de:	e000      	b.n	801a1e2 <ETH_SetMACConfig+0x3a>
 801a1e0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801a1e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801a1e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	7fdb      	ldrb	r3, [r3, #31]
 801a1ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801a1f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 801a1f2:	683b      	ldr	r3, [r7, #0]
 801a1f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801a1f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801a1f8:	683a      	ldr	r2, [r7, #0]
 801a1fa:	7f92      	ldrb	r2, [r2, #30]
 801a1fc:	2a00      	cmp	r2, #0
 801a1fe:	d102      	bne.n	801a206 <ETH_SetMACConfig+0x5e>
 801a200:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801a204:	e000      	b.n	801a208 <ETH_SetMACConfig+0x60>
 801a206:	2200      	movs	r2, #0
                        macconf->Speed |
 801a208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	7f1b      	ldrb	r3, [r3, #28]
 801a20e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801a210:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801a216:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	791b      	ldrb	r3, [r3, #4]
 801a21c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801a21e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801a220:	683a      	ldr	r2, [r7, #0]
 801a222:	f892 2020 	ldrb.w	r2, [r2, #32]
 801a226:	2a00      	cmp	r2, #0
 801a228:	d102      	bne.n	801a230 <ETH_SetMACConfig+0x88>
 801a22a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a22e:	e000      	b.n	801a232 <ETH_SetMACConfig+0x8a>
 801a230:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801a232:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801a234:	683b      	ldr	r3, [r7, #0]
 801a236:	7bdb      	ldrb	r3, [r3, #15]
 801a238:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801a23a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 801a23c:	683b      	ldr	r3, [r7, #0]
 801a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801a240:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801a242:	683b      	ldr	r3, [r7, #0]
 801a244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a248:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801a24a:	4313      	orrs	r3, r2
 801a24c:	68fa      	ldr	r2, [r7, #12]
 801a24e:	4313      	orrs	r3, r2
 801a250:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	68fa      	ldr	r2, [r7, #12]
 801a258:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a262:	2001      	movs	r0, #1
 801a264:	f7fe f87e 	bl	8018364 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	68fa      	ldr	r2, [r7, #12]
 801a26e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	699b      	ldr	r3, [r3, #24]
 801a276:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 801a278:	68fa      	ldr	r2, [r7, #12]
 801a27a:	f64f 7341 	movw	r3, #65345	; 0xff41
 801a27e:	4013      	ands	r3, r2
 801a280:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a286:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801a288:	683a      	ldr	r2, [r7, #0]
 801a28a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801a28e:	2a00      	cmp	r2, #0
 801a290:	d101      	bne.n	801a296 <ETH_SetMACConfig+0xee>
 801a292:	2280      	movs	r2, #128	; 0x80
 801a294:	e000      	b.n	801a298 <ETH_SetMACConfig+0xf0>
 801a296:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801a298:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 801a29a:	683b      	ldr	r3, [r7, #0]
 801a29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801a29e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801a2a0:	683a      	ldr	r2, [r7, #0]
 801a2a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801a2a6:	2a01      	cmp	r2, #1
 801a2a8:	d101      	bne.n	801a2ae <ETH_SetMACConfig+0x106>
 801a2aa:	2208      	movs	r2, #8
 801a2ac:	e000      	b.n	801a2b0 <ETH_SetMACConfig+0x108>
 801a2ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 801a2b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801a2b2:	683a      	ldr	r2, [r7, #0]
 801a2b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801a2b8:	2a01      	cmp	r2, #1
 801a2ba:	d101      	bne.n	801a2c0 <ETH_SetMACConfig+0x118>
 801a2bc:	2204      	movs	r2, #4
 801a2be:	e000      	b.n	801a2c2 <ETH_SetMACConfig+0x11a>
 801a2c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801a2c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 801a2c4:	683a      	ldr	r2, [r7, #0]
 801a2c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801a2ca:	2a01      	cmp	r2, #1
 801a2cc:	d101      	bne.n	801a2d2 <ETH_SetMACConfig+0x12a>
 801a2ce:	2202      	movs	r2, #2
 801a2d0:	e000      	b.n	801a2d4 <ETH_SetMACConfig+0x12c>
 801a2d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801a2d4:	4313      	orrs	r3, r2
 801a2d6:	68fa      	ldr	r2, [r7, #12]
 801a2d8:	4313      	orrs	r3, r2
 801a2da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	68fa      	ldr	r2, [r7, #12]
 801a2e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	699b      	ldr	r3, [r3, #24]
 801a2ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a2ec:	2001      	movs	r0, #1
 801a2ee:	f7fe f839 	bl	8018364 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	68fa      	ldr	r2, [r7, #12]
 801a2f8:	619a      	str	r2, [r3, #24]
}
 801a2fa:	bf00      	nop
 801a2fc:	3710      	adds	r7, #16
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}
 801a302:	bf00      	nop
 801a304:	ff20810f 	.word	0xff20810f

0801a308 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b084      	sub	sp, #16
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
 801a310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a31a:	699b      	ldr	r3, [r3, #24]
 801a31c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801a31e:	68fa      	ldr	r2, [r7, #12]
 801a320:	4b3d      	ldr	r3, [pc, #244]	; (801a418 <ETH_SetDMAConfig+0x110>)
 801a322:	4013      	ands	r3, r2
 801a324:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	7b1b      	ldrb	r3, [r3, #12]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d102      	bne.n	801a334 <ETH_SetDMAConfig+0x2c>
 801a32e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801a332:	e000      	b.n	801a336 <ETH_SetDMAConfig+0x2e>
 801a334:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	7b5b      	ldrb	r3, [r3, #13]
 801a33a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801a33c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801a33e:	683a      	ldr	r2, [r7, #0]
 801a340:	7f52      	ldrb	r2, [r2, #29]
 801a342:	2a00      	cmp	r2, #0
 801a344:	d102      	bne.n	801a34c <ETH_SetDMAConfig+0x44>
 801a346:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801a34a:	e000      	b.n	801a34e <ETH_SetDMAConfig+0x46>
 801a34c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801a34e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801a350:	683b      	ldr	r3, [r7, #0]
 801a352:	7b9b      	ldrb	r3, [r3, #14]
 801a354:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801a356:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801a35c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	7f1b      	ldrb	r3, [r3, #28]
 801a362:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801a364:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801a366:	683b      	ldr	r3, [r7, #0]
 801a368:	7f9b      	ldrb	r3, [r3, #30]
 801a36a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801a36c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801a36e:	683b      	ldr	r3, [r7, #0]
 801a370:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801a372:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a37a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801a37c:	4313      	orrs	r3, r2
 801a37e:	68fa      	ldr	r2, [r7, #12]
 801a380:	4313      	orrs	r3, r2
 801a382:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a38c:	461a      	mov	r2, r3
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a39a:	699b      	ldr	r3, [r3, #24]
 801a39c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a39e:	2001      	movs	r0, #1
 801a3a0:	f7fd ffe0 	bl	8018364 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3ac:	461a      	mov	r2, r3
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801a3b2:	683b      	ldr	r3, [r7, #0]
 801a3b4:	791b      	ldrb	r3, [r3, #4]
 801a3b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 801a3b8:	683b      	ldr	r3, [r7, #0]
 801a3ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801a3bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801a3be:	683b      	ldr	r3, [r7, #0]
 801a3c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801a3c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 801a3c4:	683b      	ldr	r3, [r7, #0]
 801a3c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801a3c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a3d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801a3d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801a3d4:	683b      	ldr	r3, [r7, #0]
 801a3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801a3da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 801a3dc:	683b      	ldr	r3, [r7, #0]
 801a3de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801a3e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801a3e2:	687a      	ldr	r2, [r7, #4]
 801a3e4:	6812      	ldr	r2, [r2, #0]
 801a3e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a3ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a3ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a3fc:	2001      	movs	r0, #1
 801a3fe:	f7fd ffb1 	bl	8018364 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a40a:	461a      	mov	r2, r3
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	6013      	str	r3, [r2, #0]
}
 801a410:	bf00      	nop
 801a412:	3710      	adds	r7, #16
 801a414:	46bd      	mov	sp, r7
 801a416:	bd80      	pop	{r7, pc}
 801a418:	f8de3f23 	.word	0xf8de3f23

0801a41c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b0a6      	sub	sp, #152	; 0x98
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 801a424:	2301      	movs	r3, #1
 801a426:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801a42a:	2301      	movs	r3, #1
 801a42c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801a430:	2300      	movs	r3, #0
 801a432:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801a434:	2300      	movs	r3, #0
 801a436:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801a43a:	2301      	movs	r3, #1
 801a43c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801a440:	2300      	movs	r3, #0
 801a442:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801a446:	2301      	movs	r3, #1
 801a448:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 801a44c:	2300      	movs	r3, #0
 801a44e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801a452:	2300      	movs	r3, #0
 801a454:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801a458:	2300      	movs	r3, #0
 801a45a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 801a45c:	2300      	movs	r3, #0
 801a45e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801a462:	2300      	movs	r3, #0
 801a464:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801a466:	2300      	movs	r3, #0
 801a468:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801a46c:	2300      	movs	r3, #0
 801a46e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801a472:	2300      	movs	r3, #0
 801a474:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 801a478:	2300      	movs	r3, #0
 801a47a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801a47e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a482:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801a484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a488:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801a48a:	2300      	movs	r3, #0
 801a48c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801a490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a494:	4619      	mov	r1, r3
 801a496:	6878      	ldr	r0, [r7, #4]
 801a498:	f7ff fe86 	bl	801a1a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 801a49c:	2301      	movs	r3, #1
 801a49e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801a4a0:	2301      	movs	r3, #1
 801a4a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 801a4aa:	2301      	movs	r3, #1
 801a4ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801a4be:	2300      	movs	r3, #0
 801a4c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801a4c2:	2301      	movs	r3, #1
 801a4c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801a4c8:	2301      	movs	r3, #1
 801a4ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801a4cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a4d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801a4d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801a4d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801a4d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a4dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801a4de:	2301      	movs	r3, #1
 801a4e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801a4ec:	f107 0308 	add.w	r3, r7, #8
 801a4f0:	4619      	mov	r1, r3
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	f7ff ff08 	bl	801a308 <ETH_SetDMAConfig>
}
 801a4f8:	bf00      	nop
 801a4fa:	3798      	adds	r7, #152	; 0x98
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}

0801a500 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801a500:	b480      	push	{r7}
 801a502:	b087      	sub	sp, #28
 801a504:	af00      	add	r7, sp, #0
 801a506:	60f8      	str	r0, [r7, #12]
 801a508:	60b9      	str	r1, [r7, #8]
 801a50a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	3305      	adds	r3, #5
 801a510:	781b      	ldrb	r3, [r3, #0]
 801a512:	021b      	lsls	r3, r3, #8
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	3204      	adds	r2, #4
 801a518:	7812      	ldrb	r2, [r2, #0]
 801a51a:	4313      	orrs	r3, r2
 801a51c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801a51e:	68ba      	ldr	r2, [r7, #8]
 801a520:	4b11      	ldr	r3, [pc, #68]	; (801a568 <ETH_MACAddressConfig+0x68>)
 801a522:	4413      	add	r3, r2
 801a524:	461a      	mov	r2, r3
 801a526:	697b      	ldr	r3, [r7, #20]
 801a528:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	3303      	adds	r3, #3
 801a52e:	781b      	ldrb	r3, [r3, #0]
 801a530:	061a      	lsls	r2, r3, #24
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	3302      	adds	r3, #2
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	041b      	lsls	r3, r3, #16
 801a53a:	431a      	orrs	r2, r3
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	3301      	adds	r3, #1
 801a540:	781b      	ldrb	r3, [r3, #0]
 801a542:	021b      	lsls	r3, r3, #8
 801a544:	4313      	orrs	r3, r2
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	7812      	ldrb	r2, [r2, #0]
 801a54a:	4313      	orrs	r3, r2
 801a54c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801a54e:	68ba      	ldr	r2, [r7, #8]
 801a550:	4b06      	ldr	r3, [pc, #24]	; (801a56c <ETH_MACAddressConfig+0x6c>)
 801a552:	4413      	add	r3, r2
 801a554:	461a      	mov	r2, r3
 801a556:	697b      	ldr	r3, [r7, #20]
 801a558:	6013      	str	r3, [r2, #0]
}
 801a55a:	bf00      	nop
 801a55c:	371c      	adds	r7, #28
 801a55e:	46bd      	mov	sp, r7
 801a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a564:	4770      	bx	lr
 801a566:	bf00      	nop
 801a568:	40028040 	.word	0x40028040
 801a56c:	40028044 	.word	0x40028044

0801a570 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801a570:	b480      	push	{r7}
 801a572:	b085      	sub	sp, #20
 801a574:	af00      	add	r7, sp, #0
 801a576:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801a578:	2300      	movs	r3, #0
 801a57a:	60fb      	str	r3, [r7, #12]
 801a57c:	e03e      	b.n	801a5fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	68d9      	ldr	r1, [r3, #12]
 801a582:	68fa      	ldr	r2, [r7, #12]
 801a584:	4613      	mov	r3, r2
 801a586:	009b      	lsls	r3, r3, #2
 801a588:	4413      	add	r3, r2
 801a58a:	00db      	lsls	r3, r3, #3
 801a58c:	440b      	add	r3, r1
 801a58e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	2200      	movs	r2, #0
 801a594:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 801a596:	68bb      	ldr	r3, [r7, #8]
 801a598:	2200      	movs	r2, #0
 801a59a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 801a59c:	68bb      	ldr	r3, [r7, #8]
 801a59e:	2200      	movs	r2, #0
 801a5a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801a5a2:	68bb      	ldr	r3, [r7, #8]
 801a5a4:	2200      	movs	r2, #0
 801a5a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801a5a8:	68b9      	ldr	r1, [r7, #8]
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	68fa      	ldr	r2, [r7, #12]
 801a5ae:	3206      	adds	r2, #6
 801a5b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801a5bc:	68bb      	ldr	r3, [r7, #8]
 801a5be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	2b02      	cmp	r3, #2
 801a5c4:	d80c      	bhi.n	801a5e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	68d9      	ldr	r1, [r3, #12]
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	1c5a      	adds	r2, r3, #1
 801a5ce:	4613      	mov	r3, r2
 801a5d0:	009b      	lsls	r3, r3, #2
 801a5d2:	4413      	add	r3, r2
 801a5d4:	00db      	lsls	r3, r3, #3
 801a5d6:	440b      	add	r3, r1
 801a5d8:	461a      	mov	r2, r3
 801a5da:	68bb      	ldr	r3, [r7, #8]
 801a5dc:	60da      	str	r2, [r3, #12]
 801a5de:	e004      	b.n	801a5ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	68db      	ldr	r3, [r3, #12]
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	68bb      	ldr	r3, [r7, #8]
 801a5e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801a5ea:	68bb      	ldr	r3, [r7, #8]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801a5f2:	68bb      	ldr	r3, [r7, #8]
 801a5f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	3301      	adds	r3, #1
 801a5fa:	60fb      	str	r3, [r7, #12]
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	2b03      	cmp	r3, #3
 801a600:	d9bd      	bls.n	801a57e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	2200      	movs	r2, #0
 801a606:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	68da      	ldr	r2, [r3, #12]
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a614:	611a      	str	r2, [r3, #16]
}
 801a616:	bf00      	nop
 801a618:	3714      	adds	r7, #20
 801a61a:	46bd      	mov	sp, r7
 801a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a620:	4770      	bx	lr

0801a622 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801a622:	b480      	push	{r7}
 801a624:	b085      	sub	sp, #20
 801a626:	af00      	add	r7, sp, #0
 801a628:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801a62a:	2300      	movs	r3, #0
 801a62c:	60fb      	str	r3, [r7, #12]
 801a62e:	e046      	b.n	801a6be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	6919      	ldr	r1, [r3, #16]
 801a634:	68fa      	ldr	r2, [r7, #12]
 801a636:	4613      	mov	r3, r2
 801a638:	009b      	lsls	r3, r3, #2
 801a63a:	4413      	add	r3, r2
 801a63c:	00db      	lsls	r3, r3, #3
 801a63e:	440b      	add	r3, r1
 801a640:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801a642:	68bb      	ldr	r3, [r7, #8]
 801a644:	2200      	movs	r2, #0
 801a646:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801a648:	68bb      	ldr	r3, [r7, #8]
 801a64a:	2200      	movs	r2, #0
 801a64c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801a64e:	68bb      	ldr	r3, [r7, #8]
 801a650:	2200      	movs	r2, #0
 801a652:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	2200      	movs	r2, #0
 801a658:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801a65a:	68bb      	ldr	r3, [r7, #8]
 801a65c:	2200      	movs	r2, #0
 801a65e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	2200      	movs	r2, #0
 801a664:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a66c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801a66e:	68bb      	ldr	r3, [r7, #8]
 801a670:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801a674:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 801a676:	68bb      	ldr	r3, [r7, #8]
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a67e:	68bb      	ldr	r3, [r7, #8]
 801a680:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801a682:	68b9      	ldr	r1, [r7, #8]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	68fa      	ldr	r2, [r7, #12]
 801a688:	3212      	adds	r2, #18
 801a68a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	2b02      	cmp	r3, #2
 801a692:	d80c      	bhi.n	801a6ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	6919      	ldr	r1, [r3, #16]
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	1c5a      	adds	r2, r3, #1
 801a69c:	4613      	mov	r3, r2
 801a69e:	009b      	lsls	r3, r3, #2
 801a6a0:	4413      	add	r3, r2
 801a6a2:	00db      	lsls	r3, r3, #3
 801a6a4:	440b      	add	r3, r1
 801a6a6:	461a      	mov	r2, r3
 801a6a8:	68bb      	ldr	r3, [r7, #8]
 801a6aa:	60da      	str	r2, [r3, #12]
 801a6ac:	e004      	b.n	801a6b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	691b      	ldr	r3, [r3, #16]
 801a6b2:	461a      	mov	r2, r3
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	3301      	adds	r3, #1
 801a6bc:	60fb      	str	r3, [r7, #12]
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	2b03      	cmp	r3, #3
 801a6c2:	d9b5      	bls.n	801a630 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	2200      	movs	r2, #0
 801a6da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2200      	movs	r2, #0
 801a6e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	691a      	ldr	r2, [r3, #16]
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a6ee:	60da      	str	r2, [r3, #12]
}
 801a6f0:	bf00      	nop
 801a6f2:	3714      	adds	r7, #20
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fa:	4770      	bx	lr

0801a6fc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 801a6fc:	b480      	push	{r7}
 801a6fe:	b08d      	sub	sp, #52	; 0x34
 801a700:	af00      	add	r7, sp, #0
 801a702:	60f8      	str	r0, [r7, #12]
 801a704:	60b9      	str	r1, [r7, #8]
 801a706:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	3318      	adds	r3, #24
 801a70c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801a70e:	697b      	ldr	r3, [r7, #20]
 801a710:	691b      	ldr	r3, [r3, #16]
 801a712:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801a714:	697b      	ldr	r3, [r7, #20]
 801a716:	691b      	ldr	r3, [r3, #16]
 801a718:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801a71a:	2300      	movs	r3, #0
 801a71c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801a71e:	697b      	ldr	r3, [r7, #20]
 801a720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a726:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	689b      	ldr	r3, [r3, #8]
 801a72c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801a72e:	2300      	movs	r3, #0
 801a730:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801a732:	6a3b      	ldr	r3, [r7, #32]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a73a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a73e:	d007      	beq.n	801a750 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801a740:	697a      	ldr	r2, [r7, #20]
 801a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a744:	3304      	adds	r3, #4
 801a746:	009b      	lsls	r3, r3, #2
 801a748:	4413      	add	r3, r2
 801a74a:	685b      	ldr	r3, [r3, #4]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d001      	beq.n	801a754 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801a750:	2302      	movs	r3, #2
 801a752:	e0ff      	b.n	801a954 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 801a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a756:	3301      	adds	r3, #1
 801a758:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801a75a:	69fb      	ldr	r3, [r7, #28]
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	461a      	mov	r2, r3
 801a760:	6a3b      	ldr	r3, [r7, #32]
 801a762:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801a764:	6a3b      	ldr	r3, [r7, #32]
 801a766:	685a      	ldr	r2, [r3, #4]
 801a768:	4b7d      	ldr	r3, [pc, #500]	; (801a960 <ETH_Prepare_Tx_Descriptors+0x264>)
 801a76a:	4013      	ands	r3, r2
 801a76c:	69fa      	ldr	r2, [r7, #28]
 801a76e:	6852      	ldr	r2, [r2, #4]
 801a770:	431a      	orrs	r2, r3
 801a772:	6a3b      	ldr	r3, [r7, #32]
 801a774:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 801a776:	68bb      	ldr	r3, [r7, #8]
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	f003 0301 	and.w	r3, r3, #1
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d008      	beq.n	801a794 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801a782:	6a3b      	ldr	r3, [r7, #32]
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801a78a:	68bb      	ldr	r3, [r7, #8]
 801a78c:	695b      	ldr	r3, [r3, #20]
 801a78e:	431a      	orrs	r2, r3
 801a790:	6a3b      	ldr	r3, [r7, #32]
 801a792:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	f003 0320 	and.w	r3, r3, #32
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d008      	beq.n	801a7b2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801a7a0:	6a3b      	ldr	r3, [r7, #32]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801a7a8:	68bb      	ldr	r3, [r7, #8]
 801a7aa:	691b      	ldr	r3, [r3, #16]
 801a7ac:	431a      	orrs	r2, r3
 801a7ae:	6a3b      	ldr	r3, [r7, #32]
 801a7b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	f003 0304 	and.w	r3, r3, #4
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d005      	beq.n	801a7ca <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801a7be:	6a3b      	ldr	r3, [r7, #32]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a7c6:	6a3b      	ldr	r3, [r7, #32]
 801a7c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801a7ca:	6a3b      	ldr	r3, [r7, #32]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801a7d2:	6a3b      	ldr	r3, [r7, #32]
 801a7d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801a7d6:	f3bf 8f5f 	dmb	sy
}
 801a7da:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801a7dc:	6a3b      	ldr	r3, [r7, #32]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a7e4:	6a3b      	ldr	r3, [r7, #32]
 801a7e6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 801a7e8:	e082      	b.n	801a8f0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801a7ea:	6a3b      	ldr	r3, [r7, #32]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801a7f2:	6a3b      	ldr	r3, [r7, #32]
 801a7f4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d006      	beq.n	801a80a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801a7fc:	6a3b      	ldr	r3, [r7, #32]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801a804:	6a3b      	ldr	r3, [r7, #32]
 801a806:	601a      	str	r2, [r3, #0]
 801a808:	e005      	b.n	801a816 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801a80a:	6a3b      	ldr	r3, [r7, #32]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801a812:	6a3b      	ldr	r3, [r7, #32]
 801a814:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 801a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a818:	3301      	adds	r3, #1
 801a81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a81e:	2b03      	cmp	r3, #3
 801a820:	d902      	bls.n	801a828 <ETH_Prepare_Tx_Descriptors+0x12c>
 801a822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a824:	3b04      	subs	r3, #4
 801a826:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801a828:	697b      	ldr	r3, [r7, #20]
 801a82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a830:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801a832:	6a3b      	ldr	r3, [r7, #32]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801a83a:	6a3b      	ldr	r3, [r7, #32]
 801a83c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801a83e:	6a3b      	ldr	r3, [r7, #32]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a84a:	d007      	beq.n	801a85c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801a84c:	697a      	ldr	r2, [r7, #20]
 801a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a850:	3304      	adds	r3, #4
 801a852:	009b      	lsls	r3, r3, #2
 801a854:	4413      	add	r3, r2
 801a856:	685b      	ldr	r3, [r3, #4]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d029      	beq.n	801a8b0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 801a85c:	693b      	ldr	r3, [r7, #16]
 801a85e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801a860:	697b      	ldr	r3, [r7, #20]
 801a862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a868:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 801a86a:	2300      	movs	r3, #0
 801a86c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a86e:	e019      	b.n	801a8a4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801a870:	f3bf 8f5f 	dmb	sy
}
 801a874:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801a876:	6a3b      	ldr	r3, [r7, #32]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a87e:	6a3b      	ldr	r3, [r7, #32]
 801a880:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a884:	3301      	adds	r3, #1
 801a886:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a88a:	2b03      	cmp	r3, #3
 801a88c:	d902      	bls.n	801a894 <ETH_Prepare_Tx_Descriptors+0x198>
 801a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a890:	3b04      	subs	r3, #4
 801a892:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a89c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8a0:	3301      	adds	r3, #1
 801a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8a8:	429a      	cmp	r2, r3
 801a8aa:	d3e1      	bcc.n	801a870 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 801a8ac:	2302      	movs	r3, #2
 801a8ae:	e051      	b.n	801a954 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b2:	3301      	adds	r3, #1
 801a8b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 801a8b6:	69fb      	ldr	r3, [r7, #28]
 801a8b8:	689b      	ldr	r3, [r3, #8]
 801a8ba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801a8bc:	69fb      	ldr	r3, [r7, #28]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	461a      	mov	r2, r3
 801a8c2:	6a3b      	ldr	r3, [r7, #32]
 801a8c4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801a8c6:	6a3b      	ldr	r3, [r7, #32]
 801a8c8:	685a      	ldr	r2, [r3, #4]
 801a8ca:	4b25      	ldr	r3, [pc, #148]	; (801a960 <ETH_Prepare_Tx_Descriptors+0x264>)
 801a8cc:	4013      	ands	r3, r2
 801a8ce:	69fa      	ldr	r2, [r7, #28]
 801a8d0:	6852      	ldr	r2, [r2, #4]
 801a8d2:	431a      	orrs	r2, r3
 801a8d4:	6a3b      	ldr	r3, [r7, #32]
 801a8d6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 801a8d8:	69bb      	ldr	r3, [r7, #24]
 801a8da:	3301      	adds	r3, #1
 801a8dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801a8de:	f3bf 8f5f 	dmb	sy
}
 801a8e2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801a8e4:	6a3b      	ldr	r3, [r7, #32]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a8ec:	6a3b      	ldr	r3, [r7, #32]
 801a8ee:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801a8f0:	69fb      	ldr	r3, [r7, #28]
 801a8f2:	689b      	ldr	r3, [r3, #8]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f47f af78 	bne.w	801a7ea <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d006      	beq.n	801a90e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801a900:	6a3b      	ldr	r3, [r7, #32]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801a908:	6a3b      	ldr	r3, [r7, #32]
 801a90a:	601a      	str	r2, [r3, #0]
 801a90c:	e005      	b.n	801a91a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801a90e:	6a3b      	ldr	r3, [r7, #32]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801a916:	6a3b      	ldr	r3, [r7, #32]
 801a918:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801a91a:	6a3b      	ldr	r3, [r7, #32]
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801a922:	6a3b      	ldr	r3, [r7, #32]
 801a924:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 801a926:	697b      	ldr	r3, [r7, #20]
 801a928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a92a:	6979      	ldr	r1, [r7, #20]
 801a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a92e:	3304      	adds	r3, #4
 801a930:	009b      	lsls	r3, r3, #2
 801a932:	440b      	add	r3, r1
 801a934:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 801a936:	697b      	ldr	r3, [r7, #20]
 801a938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a93a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a93c:	b672      	cpsid	i
}
 801a93e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a944:	69bb      	ldr	r3, [r7, #24]
 801a946:	4413      	add	r3, r2
 801a948:	1c5a      	adds	r2, r3, #1
 801a94a:	697b      	ldr	r3, [r7, #20]
 801a94c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801a94e:	b662      	cpsie	i
}
 801a950:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801a952:	2300      	movs	r3, #0
}
 801a954:	4618      	mov	r0, r3
 801a956:	3734      	adds	r7, #52	; 0x34
 801a958:	46bd      	mov	sp, r7
 801a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a95e:	4770      	bx	lr
 801a960:	ffffe000 	.word	0xffffe000

0801a964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a964:	b480      	push	{r7}
 801a966:	b089      	sub	sp, #36	; 0x24
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
 801a96c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801a96e:	2300      	movs	r3, #0
 801a970:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801a972:	2300      	movs	r3, #0
 801a974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 801a976:	2300      	movs	r3, #0
 801a978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 801a97a:	2300      	movs	r3, #0
 801a97c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801a97e:	2300      	movs	r3, #0
 801a980:	61fb      	str	r3, [r7, #28]
 801a982:	e175      	b.n	801ac70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801a984:	2201      	movs	r2, #1
 801a986:	69fb      	ldr	r3, [r7, #28]
 801a988:	fa02 f303 	lsl.w	r3, r2, r3
 801a98c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801a98e:	683b      	ldr	r3, [r7, #0]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	697a      	ldr	r2, [r7, #20]
 801a994:	4013      	ands	r3, r2
 801a996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801a998:	693a      	ldr	r2, [r7, #16]
 801a99a:	697b      	ldr	r3, [r7, #20]
 801a99c:	429a      	cmp	r2, r3
 801a99e:	f040 8164 	bne.w	801ac6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a9a2:	683b      	ldr	r3, [r7, #0]
 801a9a4:	685b      	ldr	r3, [r3, #4]
 801a9a6:	f003 0303 	and.w	r3, r3, #3
 801a9aa:	2b01      	cmp	r3, #1
 801a9ac:	d005      	beq.n	801a9ba <HAL_GPIO_Init+0x56>
 801a9ae:	683b      	ldr	r3, [r7, #0]
 801a9b0:	685b      	ldr	r3, [r3, #4]
 801a9b2:	f003 0303 	and.w	r3, r3, #3
 801a9b6:	2b02      	cmp	r3, #2
 801a9b8:	d130      	bne.n	801aa1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	689b      	ldr	r3, [r3, #8]
 801a9be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801a9c0:	69fb      	ldr	r3, [r7, #28]
 801a9c2:	005b      	lsls	r3, r3, #1
 801a9c4:	2203      	movs	r2, #3
 801a9c6:	fa02 f303 	lsl.w	r3, r2, r3
 801a9ca:	43db      	mvns	r3, r3
 801a9cc:	69ba      	ldr	r2, [r7, #24]
 801a9ce:	4013      	ands	r3, r2
 801a9d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801a9d2:	683b      	ldr	r3, [r7, #0]
 801a9d4:	68da      	ldr	r2, [r3, #12]
 801a9d6:	69fb      	ldr	r3, [r7, #28]
 801a9d8:	005b      	lsls	r3, r3, #1
 801a9da:	fa02 f303 	lsl.w	r3, r2, r3
 801a9de:	69ba      	ldr	r2, [r7, #24]
 801a9e0:	4313      	orrs	r3, r2
 801a9e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	69ba      	ldr	r2, [r7, #24]
 801a9e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	685b      	ldr	r3, [r3, #4]
 801a9ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801a9f0:	2201      	movs	r2, #1
 801a9f2:	69fb      	ldr	r3, [r7, #28]
 801a9f4:	fa02 f303 	lsl.w	r3, r2, r3
 801a9f8:	43db      	mvns	r3, r3
 801a9fa:	69ba      	ldr	r2, [r7, #24]
 801a9fc:	4013      	ands	r3, r2
 801a9fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801aa00:	683b      	ldr	r3, [r7, #0]
 801aa02:	685b      	ldr	r3, [r3, #4]
 801aa04:	091b      	lsrs	r3, r3, #4
 801aa06:	f003 0201 	and.w	r2, r3, #1
 801aa0a:	69fb      	ldr	r3, [r7, #28]
 801aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 801aa10:	69ba      	ldr	r2, [r7, #24]
 801aa12:	4313      	orrs	r3, r2
 801aa14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	69ba      	ldr	r2, [r7, #24]
 801aa1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801aa1c:	683b      	ldr	r3, [r7, #0]
 801aa1e:	685b      	ldr	r3, [r3, #4]
 801aa20:	f003 0303 	and.w	r3, r3, #3
 801aa24:	2b03      	cmp	r3, #3
 801aa26:	d017      	beq.n	801aa58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	68db      	ldr	r3, [r3, #12]
 801aa2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801aa2e:	69fb      	ldr	r3, [r7, #28]
 801aa30:	005b      	lsls	r3, r3, #1
 801aa32:	2203      	movs	r2, #3
 801aa34:	fa02 f303 	lsl.w	r3, r2, r3
 801aa38:	43db      	mvns	r3, r3
 801aa3a:	69ba      	ldr	r2, [r7, #24]
 801aa3c:	4013      	ands	r3, r2
 801aa3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801aa40:	683b      	ldr	r3, [r7, #0]
 801aa42:	689a      	ldr	r2, [r3, #8]
 801aa44:	69fb      	ldr	r3, [r7, #28]
 801aa46:	005b      	lsls	r3, r3, #1
 801aa48:	fa02 f303 	lsl.w	r3, r2, r3
 801aa4c:	69ba      	ldr	r2, [r7, #24]
 801aa4e:	4313      	orrs	r3, r2
 801aa50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	69ba      	ldr	r2, [r7, #24]
 801aa56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801aa58:	683b      	ldr	r3, [r7, #0]
 801aa5a:	685b      	ldr	r3, [r3, #4]
 801aa5c:	f003 0303 	and.w	r3, r3, #3
 801aa60:	2b02      	cmp	r3, #2
 801aa62:	d123      	bne.n	801aaac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801aa64:	69fb      	ldr	r3, [r7, #28]
 801aa66:	08da      	lsrs	r2, r3, #3
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	3208      	adds	r2, #8
 801aa6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aa70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801aa72:	69fb      	ldr	r3, [r7, #28]
 801aa74:	f003 0307 	and.w	r3, r3, #7
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	220f      	movs	r2, #15
 801aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 801aa80:	43db      	mvns	r3, r3
 801aa82:	69ba      	ldr	r2, [r7, #24]
 801aa84:	4013      	ands	r3, r2
 801aa86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801aa88:	683b      	ldr	r3, [r7, #0]
 801aa8a:	691a      	ldr	r2, [r3, #16]
 801aa8c:	69fb      	ldr	r3, [r7, #28]
 801aa8e:	f003 0307 	and.w	r3, r3, #7
 801aa92:	009b      	lsls	r3, r3, #2
 801aa94:	fa02 f303 	lsl.w	r3, r2, r3
 801aa98:	69ba      	ldr	r2, [r7, #24]
 801aa9a:	4313      	orrs	r3, r2
 801aa9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801aa9e:	69fb      	ldr	r3, [r7, #28]
 801aaa0:	08da      	lsrs	r2, r3, #3
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	3208      	adds	r2, #8
 801aaa6:	69b9      	ldr	r1, [r7, #24]
 801aaa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801aab2:	69fb      	ldr	r3, [r7, #28]
 801aab4:	005b      	lsls	r3, r3, #1
 801aab6:	2203      	movs	r2, #3
 801aab8:	fa02 f303 	lsl.w	r3, r2, r3
 801aabc:	43db      	mvns	r3, r3
 801aabe:	69ba      	ldr	r2, [r7, #24]
 801aac0:	4013      	ands	r3, r2
 801aac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	685b      	ldr	r3, [r3, #4]
 801aac8:	f003 0203 	and.w	r2, r3, #3
 801aacc:	69fb      	ldr	r3, [r7, #28]
 801aace:	005b      	lsls	r3, r3, #1
 801aad0:	fa02 f303 	lsl.w	r3, r2, r3
 801aad4:	69ba      	ldr	r2, [r7, #24]
 801aad6:	4313      	orrs	r3, r2
 801aad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	69ba      	ldr	r2, [r7, #24]
 801aade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801aae0:	683b      	ldr	r3, [r7, #0]
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	f000 80be 	beq.w	801ac6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801aaee:	4b66      	ldr	r3, [pc, #408]	; (801ac88 <HAL_GPIO_Init+0x324>)
 801aaf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aaf2:	4a65      	ldr	r2, [pc, #404]	; (801ac88 <HAL_GPIO_Init+0x324>)
 801aaf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801aaf8:	6453      	str	r3, [r2, #68]	; 0x44
 801aafa:	4b63      	ldr	r3, [pc, #396]	; (801ac88 <HAL_GPIO_Init+0x324>)
 801aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aafe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ab02:	60fb      	str	r3, [r7, #12]
 801ab04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801ab06:	4a61      	ldr	r2, [pc, #388]	; (801ac8c <HAL_GPIO_Init+0x328>)
 801ab08:	69fb      	ldr	r3, [r7, #28]
 801ab0a:	089b      	lsrs	r3, r3, #2
 801ab0c:	3302      	adds	r3, #2
 801ab0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ab12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801ab14:	69fb      	ldr	r3, [r7, #28]
 801ab16:	f003 0303 	and.w	r3, r3, #3
 801ab1a:	009b      	lsls	r3, r3, #2
 801ab1c:	220f      	movs	r2, #15
 801ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab22:	43db      	mvns	r3, r3
 801ab24:	69ba      	ldr	r2, [r7, #24]
 801ab26:	4013      	ands	r3, r2
 801ab28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	4a58      	ldr	r2, [pc, #352]	; (801ac90 <HAL_GPIO_Init+0x32c>)
 801ab2e:	4293      	cmp	r3, r2
 801ab30:	d037      	beq.n	801aba2 <HAL_GPIO_Init+0x23e>
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	4a57      	ldr	r2, [pc, #348]	; (801ac94 <HAL_GPIO_Init+0x330>)
 801ab36:	4293      	cmp	r3, r2
 801ab38:	d031      	beq.n	801ab9e <HAL_GPIO_Init+0x23a>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	4a56      	ldr	r2, [pc, #344]	; (801ac98 <HAL_GPIO_Init+0x334>)
 801ab3e:	4293      	cmp	r3, r2
 801ab40:	d02b      	beq.n	801ab9a <HAL_GPIO_Init+0x236>
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	4a55      	ldr	r2, [pc, #340]	; (801ac9c <HAL_GPIO_Init+0x338>)
 801ab46:	4293      	cmp	r3, r2
 801ab48:	d025      	beq.n	801ab96 <HAL_GPIO_Init+0x232>
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	4a54      	ldr	r2, [pc, #336]	; (801aca0 <HAL_GPIO_Init+0x33c>)
 801ab4e:	4293      	cmp	r3, r2
 801ab50:	d01f      	beq.n	801ab92 <HAL_GPIO_Init+0x22e>
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	4a53      	ldr	r2, [pc, #332]	; (801aca4 <HAL_GPIO_Init+0x340>)
 801ab56:	4293      	cmp	r3, r2
 801ab58:	d019      	beq.n	801ab8e <HAL_GPIO_Init+0x22a>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	4a52      	ldr	r2, [pc, #328]	; (801aca8 <HAL_GPIO_Init+0x344>)
 801ab5e:	4293      	cmp	r3, r2
 801ab60:	d013      	beq.n	801ab8a <HAL_GPIO_Init+0x226>
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	4a51      	ldr	r2, [pc, #324]	; (801acac <HAL_GPIO_Init+0x348>)
 801ab66:	4293      	cmp	r3, r2
 801ab68:	d00d      	beq.n	801ab86 <HAL_GPIO_Init+0x222>
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	4a50      	ldr	r2, [pc, #320]	; (801acb0 <HAL_GPIO_Init+0x34c>)
 801ab6e:	4293      	cmp	r3, r2
 801ab70:	d007      	beq.n	801ab82 <HAL_GPIO_Init+0x21e>
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	4a4f      	ldr	r2, [pc, #316]	; (801acb4 <HAL_GPIO_Init+0x350>)
 801ab76:	4293      	cmp	r3, r2
 801ab78:	d101      	bne.n	801ab7e <HAL_GPIO_Init+0x21a>
 801ab7a:	2309      	movs	r3, #9
 801ab7c:	e012      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab7e:	230a      	movs	r3, #10
 801ab80:	e010      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab82:	2308      	movs	r3, #8
 801ab84:	e00e      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab86:	2307      	movs	r3, #7
 801ab88:	e00c      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab8a:	2306      	movs	r3, #6
 801ab8c:	e00a      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab8e:	2305      	movs	r3, #5
 801ab90:	e008      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab92:	2304      	movs	r3, #4
 801ab94:	e006      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab96:	2303      	movs	r3, #3
 801ab98:	e004      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab9a:	2302      	movs	r3, #2
 801ab9c:	e002      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801ab9e:	2301      	movs	r3, #1
 801aba0:	e000      	b.n	801aba4 <HAL_GPIO_Init+0x240>
 801aba2:	2300      	movs	r3, #0
 801aba4:	69fa      	ldr	r2, [r7, #28]
 801aba6:	f002 0203 	and.w	r2, r2, #3
 801abaa:	0092      	lsls	r2, r2, #2
 801abac:	4093      	lsls	r3, r2
 801abae:	69ba      	ldr	r2, [r7, #24]
 801abb0:	4313      	orrs	r3, r2
 801abb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801abb4:	4935      	ldr	r1, [pc, #212]	; (801ac8c <HAL_GPIO_Init+0x328>)
 801abb6:	69fb      	ldr	r3, [r7, #28]
 801abb8:	089b      	lsrs	r3, r3, #2
 801abba:	3302      	adds	r3, #2
 801abbc:	69ba      	ldr	r2, [r7, #24]
 801abbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801abc2:	4b3d      	ldr	r3, [pc, #244]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801abc4:	689b      	ldr	r3, [r3, #8]
 801abc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801abc8:	693b      	ldr	r3, [r7, #16]
 801abca:	43db      	mvns	r3, r3
 801abcc:	69ba      	ldr	r2, [r7, #24]
 801abce:	4013      	ands	r3, r2
 801abd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801abd2:	683b      	ldr	r3, [r7, #0]
 801abd4:	685b      	ldr	r3, [r3, #4]
 801abd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d003      	beq.n	801abe6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801abde:	69ba      	ldr	r2, [r7, #24]
 801abe0:	693b      	ldr	r3, [r7, #16]
 801abe2:	4313      	orrs	r3, r2
 801abe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801abe6:	4a34      	ldr	r2, [pc, #208]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801abe8:	69bb      	ldr	r3, [r7, #24]
 801abea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801abec:	4b32      	ldr	r3, [pc, #200]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801abee:	68db      	ldr	r3, [r3, #12]
 801abf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801abf2:	693b      	ldr	r3, [r7, #16]
 801abf4:	43db      	mvns	r3, r3
 801abf6:	69ba      	ldr	r2, [r7, #24]
 801abf8:	4013      	ands	r3, r2
 801abfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801abfc:	683b      	ldr	r3, [r7, #0]
 801abfe:	685b      	ldr	r3, [r3, #4]
 801ac00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d003      	beq.n	801ac10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801ac08:	69ba      	ldr	r2, [r7, #24]
 801ac0a:	693b      	ldr	r3, [r7, #16]
 801ac0c:	4313      	orrs	r3, r2
 801ac0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801ac10:	4a29      	ldr	r2, [pc, #164]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801ac12:	69bb      	ldr	r3, [r7, #24]
 801ac14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801ac16:	4b28      	ldr	r3, [pc, #160]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801ac18:	685b      	ldr	r3, [r3, #4]
 801ac1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ac1c:	693b      	ldr	r3, [r7, #16]
 801ac1e:	43db      	mvns	r3, r3
 801ac20:	69ba      	ldr	r2, [r7, #24]
 801ac22:	4013      	ands	r3, r2
 801ac24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	685b      	ldr	r3, [r3, #4]
 801ac2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d003      	beq.n	801ac3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801ac32:	69ba      	ldr	r2, [r7, #24]
 801ac34:	693b      	ldr	r3, [r7, #16]
 801ac36:	4313      	orrs	r3, r2
 801ac38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801ac3a:	4a1f      	ldr	r2, [pc, #124]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801ac3c:	69bb      	ldr	r3, [r7, #24]
 801ac3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801ac40:	4b1d      	ldr	r3, [pc, #116]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	43db      	mvns	r3, r3
 801ac4a:	69ba      	ldr	r2, [r7, #24]
 801ac4c:	4013      	ands	r3, r2
 801ac4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	685b      	ldr	r3, [r3, #4]
 801ac54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d003      	beq.n	801ac64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801ac5c:	69ba      	ldr	r2, [r7, #24]
 801ac5e:	693b      	ldr	r3, [r7, #16]
 801ac60:	4313      	orrs	r3, r2
 801ac62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801ac64:	4a14      	ldr	r2, [pc, #80]	; (801acb8 <HAL_GPIO_Init+0x354>)
 801ac66:	69bb      	ldr	r3, [r7, #24]
 801ac68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801ac6a:	69fb      	ldr	r3, [r7, #28]
 801ac6c:	3301      	adds	r3, #1
 801ac6e:	61fb      	str	r3, [r7, #28]
 801ac70:	69fb      	ldr	r3, [r7, #28]
 801ac72:	2b0f      	cmp	r3, #15
 801ac74:	f67f ae86 	bls.w	801a984 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801ac78:	bf00      	nop
 801ac7a:	bf00      	nop
 801ac7c:	3724      	adds	r7, #36	; 0x24
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac84:	4770      	bx	lr
 801ac86:	bf00      	nop
 801ac88:	40023800 	.word	0x40023800
 801ac8c:	40013800 	.word	0x40013800
 801ac90:	40020000 	.word	0x40020000
 801ac94:	40020400 	.word	0x40020400
 801ac98:	40020800 	.word	0x40020800
 801ac9c:	40020c00 	.word	0x40020c00
 801aca0:	40021000 	.word	0x40021000
 801aca4:	40021400 	.word	0x40021400
 801aca8:	40021800 	.word	0x40021800
 801acac:	40021c00 	.word	0x40021c00
 801acb0:	40022000 	.word	0x40022000
 801acb4:	40022400 	.word	0x40022400
 801acb8:	40013c00 	.word	0x40013c00

0801acbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801acbc:	b480      	push	{r7}
 801acbe:	b085      	sub	sp, #20
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	460b      	mov	r3, r1
 801acc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	691a      	ldr	r2, [r3, #16]
 801accc:	887b      	ldrh	r3, [r7, #2]
 801acce:	4013      	ands	r3, r2
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d002      	beq.n	801acda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801acd4:	2301      	movs	r3, #1
 801acd6:	73fb      	strb	r3, [r7, #15]
 801acd8:	e001      	b.n	801acde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801acda:	2300      	movs	r3, #0
 801acdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801acde:	7bfb      	ldrb	r3, [r7, #15]
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3714      	adds	r7, #20
 801ace4:	46bd      	mov	sp, r7
 801ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acea:	4770      	bx	lr

0801acec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801acec:	b480      	push	{r7}
 801acee:	b083      	sub	sp, #12
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
 801acf4:	460b      	mov	r3, r1
 801acf6:	807b      	strh	r3, [r7, #2]
 801acf8:	4613      	mov	r3, r2
 801acfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801acfc:	787b      	ldrb	r3, [r7, #1]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d003      	beq.n	801ad0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ad02:	887a      	ldrh	r2, [r7, #2]
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 801ad08:	e003      	b.n	801ad12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801ad0a:	887b      	ldrh	r3, [r7, #2]
 801ad0c:	041a      	lsls	r2, r3, #16
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	619a      	str	r2, [r3, #24]
}
 801ad12:	bf00      	nop
 801ad14:	370c      	adds	r7, #12
 801ad16:	46bd      	mov	sp, r7
 801ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1c:	4770      	bx	lr

0801ad1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801ad1e:	b480      	push	{r7}
 801ad20:	b085      	sub	sp, #20
 801ad22:	af00      	add	r7, sp, #0
 801ad24:	6078      	str	r0, [r7, #4]
 801ad26:	460b      	mov	r3, r1
 801ad28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	695b      	ldr	r3, [r3, #20]
 801ad2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801ad30:	887a      	ldrh	r2, [r7, #2]
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	4013      	ands	r3, r2
 801ad36:	041a      	lsls	r2, r3, #16
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	43d9      	mvns	r1, r3
 801ad3c:	887b      	ldrh	r3, [r7, #2]
 801ad3e:	400b      	ands	r3, r1
 801ad40:	431a      	orrs	r2, r3
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	619a      	str	r2, [r3, #24]
}
 801ad46:	bf00      	nop
 801ad48:	3714      	adds	r7, #20
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad50:	4770      	bx	lr
	...

0801ad54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b082      	sub	sp, #8
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801ad5e:	4b08      	ldr	r3, [pc, #32]	; (801ad80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801ad60:	695a      	ldr	r2, [r3, #20]
 801ad62:	88fb      	ldrh	r3, [r7, #6]
 801ad64:	4013      	ands	r3, r2
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d006      	beq.n	801ad78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801ad6a:	4a05      	ldr	r2, [pc, #20]	; (801ad80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801ad6c:	88fb      	ldrh	r3, [r7, #6]
 801ad6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801ad70:	88fb      	ldrh	r3, [r7, #6]
 801ad72:	4618      	mov	r0, r3
 801ad74:	f000 f806 	bl	801ad84 <HAL_GPIO_EXTI_Callback>
  }
}
 801ad78:	bf00      	nop
 801ad7a:	3708      	adds	r7, #8
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	bd80      	pop	{r7, pc}
 801ad80:	40013c00 	.word	0x40013c00

0801ad84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801ad84:	b480      	push	{r7}
 801ad86:	b083      	sub	sp, #12
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	4603      	mov	r3, r0
 801ad8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801ad8e:	bf00      	nop
 801ad90:	370c      	adds	r7, #12
 801ad92:	46bd      	mov	sp, r7
 801ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad98:	4770      	bx	lr
	...

0801ad9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b082      	sub	sp, #8
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d101      	bne.n	801adae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801adaa:	2301      	movs	r3, #1
 801adac:	e07f      	b.n	801aeae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801adb4:	b2db      	uxtb	r3, r3
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d106      	bne.n	801adc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	2200      	movs	r2, #0
 801adbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801adc2:	6878      	ldr	r0, [r7, #4]
 801adc4:	f7fa f8c0 	bl	8014f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	2224      	movs	r2, #36	; 0x24
 801adcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	681a      	ldr	r2, [r3, #0]
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	f022 0201 	bic.w	r2, r2, #1
 801adde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	685a      	ldr	r2, [r3, #4]
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801adec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	689a      	ldr	r2, [r3, #8]
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801adfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	68db      	ldr	r3, [r3, #12]
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d107      	bne.n	801ae16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	689a      	ldr	r2, [r3, #8]
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ae12:	609a      	str	r2, [r3, #8]
 801ae14:	e006      	b.n	801ae24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	689a      	ldr	r2, [r3, #8]
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801ae22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	68db      	ldr	r3, [r3, #12]
 801ae28:	2b02      	cmp	r3, #2
 801ae2a:	d104      	bne.n	801ae36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ae34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	6859      	ldr	r1, [r3, #4]
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681a      	ldr	r2, [r3, #0]
 801ae40:	4b1d      	ldr	r3, [pc, #116]	; (801aeb8 <HAL_I2C_Init+0x11c>)
 801ae42:	430b      	orrs	r3, r1
 801ae44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	68da      	ldr	r2, [r3, #12]
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801ae54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	691a      	ldr	r2, [r3, #16]
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	695b      	ldr	r3, [r3, #20]
 801ae5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	699b      	ldr	r3, [r3, #24]
 801ae66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	430a      	orrs	r2, r1
 801ae6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	69d9      	ldr	r1, [r3, #28]
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	6a1a      	ldr	r2, [r3, #32]
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	430a      	orrs	r2, r1
 801ae7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	681a      	ldr	r2, [r3, #0]
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	f042 0201 	orr.w	r2, r2, #1
 801ae8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	2200      	movs	r2, #0
 801ae94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	2220      	movs	r2, #32
 801ae9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	2200      	movs	r2, #0
 801aea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	2200      	movs	r2, #0
 801aea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801aeac:	2300      	movs	r3, #0
}
 801aeae:	4618      	mov	r0, r3
 801aeb0:	3708      	adds	r7, #8
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bd80      	pop	{r7, pc}
 801aeb6:	bf00      	nop
 801aeb8:	02008000 	.word	0x02008000

0801aebc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b088      	sub	sp, #32
 801aec0:	af02      	add	r7, sp, #8
 801aec2:	60f8      	str	r0, [r7, #12]
 801aec4:	4608      	mov	r0, r1
 801aec6:	4611      	mov	r1, r2
 801aec8:	461a      	mov	r2, r3
 801aeca:	4603      	mov	r3, r0
 801aecc:	817b      	strh	r3, [r7, #10]
 801aece:	460b      	mov	r3, r1
 801aed0:	813b      	strh	r3, [r7, #8]
 801aed2:	4613      	mov	r3, r2
 801aed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aedc:	b2db      	uxtb	r3, r3
 801aede:	2b20      	cmp	r3, #32
 801aee0:	f040 80f9 	bne.w	801b0d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801aee4:	6a3b      	ldr	r3, [r7, #32]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d002      	beq.n	801aef0 <HAL_I2C_Mem_Write+0x34>
 801aeea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d105      	bne.n	801aefc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801aef6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801aef8:	2301      	movs	r3, #1
 801aefa:	e0ed      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801af02:	2b01      	cmp	r3, #1
 801af04:	d101      	bne.n	801af0a <HAL_I2C_Mem_Write+0x4e>
 801af06:	2302      	movs	r3, #2
 801af08:	e0e6      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	2201      	movs	r2, #1
 801af0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801af12:	f7fd fa1b 	bl	801834c <HAL_GetTick>
 801af16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801af18:	697b      	ldr	r3, [r7, #20]
 801af1a:	9300      	str	r3, [sp, #0]
 801af1c:	2319      	movs	r3, #25
 801af1e:	2201      	movs	r2, #1
 801af20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801af24:	68f8      	ldr	r0, [r7, #12]
 801af26:	f000 fac3 	bl	801b4b0 <I2C_WaitOnFlagUntilTimeout>
 801af2a:	4603      	mov	r3, r0
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d001      	beq.n	801af34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801af30:	2301      	movs	r3, #1
 801af32:	e0d1      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	2221      	movs	r2, #33	; 0x21
 801af38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	2240      	movs	r2, #64	; 0x40
 801af40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	2200      	movs	r2, #0
 801af48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	6a3a      	ldr	r2, [r7, #32]
 801af4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801af54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	2200      	movs	r2, #0
 801af5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801af5c:	88f8      	ldrh	r0, [r7, #6]
 801af5e:	893a      	ldrh	r2, [r7, #8]
 801af60:	8979      	ldrh	r1, [r7, #10]
 801af62:	697b      	ldr	r3, [r7, #20]
 801af64:	9301      	str	r3, [sp, #4]
 801af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af68:	9300      	str	r3, [sp, #0]
 801af6a:	4603      	mov	r3, r0
 801af6c:	68f8      	ldr	r0, [r7, #12]
 801af6e:	f000 f9d3 	bl	801b318 <I2C_RequestMemoryWrite>
 801af72:	4603      	mov	r3, r0
 801af74:	2b00      	cmp	r3, #0
 801af76:	d005      	beq.n	801af84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	2200      	movs	r2, #0
 801af7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801af80:	2301      	movs	r3, #1
 801af82:	e0a9      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af88:	b29b      	uxth	r3, r3
 801af8a:	2bff      	cmp	r3, #255	; 0xff
 801af8c:	d90e      	bls.n	801afac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	22ff      	movs	r2, #255	; 0xff
 801af92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801af98:	b2da      	uxtb	r2, r3
 801af9a:	8979      	ldrh	r1, [r7, #10]
 801af9c:	2300      	movs	r3, #0
 801af9e:	9300      	str	r3, [sp, #0]
 801afa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801afa4:	68f8      	ldr	r0, [r7, #12]
 801afa6:	f000 fc1f 	bl	801b7e8 <I2C_TransferConfig>
 801afaa:	e00f      	b.n	801afcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801afb0:	b29a      	uxth	r2, r3
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801afba:	b2da      	uxtb	r2, r3
 801afbc:	8979      	ldrh	r1, [r7, #10]
 801afbe:	2300      	movs	r3, #0
 801afc0:	9300      	str	r3, [sp, #0]
 801afc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801afc6:	68f8      	ldr	r0, [r7, #12]
 801afc8:	f000 fc0e 	bl	801b7e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801afcc:	697a      	ldr	r2, [r7, #20]
 801afce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801afd0:	68f8      	ldr	r0, [r7, #12]
 801afd2:	f000 faad 	bl	801b530 <I2C_WaitOnTXISFlagUntilTimeout>
 801afd6:	4603      	mov	r3, r0
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d001      	beq.n	801afe0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801afdc:	2301      	movs	r3, #1
 801afde:	e07b      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afe4:	781a      	ldrb	r2, [r3, #0]
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aff0:	1c5a      	adds	r2, r3, #1
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801affa:	b29b      	uxth	r3, r3
 801affc:	3b01      	subs	r3, #1
 801affe:	b29a      	uxth	r2, r3
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b008:	3b01      	subs	r3, #1
 801b00a:	b29a      	uxth	r2, r3
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b014:	b29b      	uxth	r3, r3
 801b016:	2b00      	cmp	r3, #0
 801b018:	d034      	beq.n	801b084 <HAL_I2C_Mem_Write+0x1c8>
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d130      	bne.n	801b084 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	9300      	str	r3, [sp, #0]
 801b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b028:	2200      	movs	r2, #0
 801b02a:	2180      	movs	r1, #128	; 0x80
 801b02c:	68f8      	ldr	r0, [r7, #12]
 801b02e:	f000 fa3f 	bl	801b4b0 <I2C_WaitOnFlagUntilTimeout>
 801b032:	4603      	mov	r3, r0
 801b034:	2b00      	cmp	r3, #0
 801b036:	d001      	beq.n	801b03c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801b038:	2301      	movs	r3, #1
 801b03a:	e04d      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b040:	b29b      	uxth	r3, r3
 801b042:	2bff      	cmp	r3, #255	; 0xff
 801b044:	d90e      	bls.n	801b064 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	22ff      	movs	r2, #255	; 0xff
 801b04a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b050:	b2da      	uxtb	r2, r3
 801b052:	8979      	ldrh	r1, [r7, #10]
 801b054:	2300      	movs	r3, #0
 801b056:	9300      	str	r3, [sp, #0]
 801b058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b05c:	68f8      	ldr	r0, [r7, #12]
 801b05e:	f000 fbc3 	bl	801b7e8 <I2C_TransferConfig>
 801b062:	e00f      	b.n	801b084 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b068:	b29a      	uxth	r2, r3
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b072:	b2da      	uxtb	r2, r3
 801b074:	8979      	ldrh	r1, [r7, #10]
 801b076:	2300      	movs	r3, #0
 801b078:	9300      	str	r3, [sp, #0]
 801b07a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b07e:	68f8      	ldr	r0, [r7, #12]
 801b080:	f000 fbb2 	bl	801b7e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b088:	b29b      	uxth	r3, r3
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d19e      	bne.n	801afcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b08e:	697a      	ldr	r2, [r7, #20]
 801b090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b092:	68f8      	ldr	r0, [r7, #12]
 801b094:	f000 fa8c 	bl	801b5b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801b098:	4603      	mov	r3, r0
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d001      	beq.n	801b0a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801b09e:	2301      	movs	r3, #1
 801b0a0:	e01a      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	2220      	movs	r2, #32
 801b0a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	6859      	ldr	r1, [r3, #4]
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	681a      	ldr	r2, [r3, #0]
 801b0b4:	4b0a      	ldr	r3, [pc, #40]	; (801b0e0 <HAL_I2C_Mem_Write+0x224>)
 801b0b6:	400b      	ands	r3, r1
 801b0b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	2220      	movs	r2, #32
 801b0be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	e000      	b.n	801b0d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801b0d6:	2302      	movs	r3, #2
  }
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	3718      	adds	r7, #24
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}
 801b0e0:	fe00e800 	.word	0xfe00e800

0801b0e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b088      	sub	sp, #32
 801b0e8:	af02      	add	r7, sp, #8
 801b0ea:	60f8      	str	r0, [r7, #12]
 801b0ec:	4608      	mov	r0, r1
 801b0ee:	4611      	mov	r1, r2
 801b0f0:	461a      	mov	r2, r3
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	817b      	strh	r3, [r7, #10]
 801b0f6:	460b      	mov	r3, r1
 801b0f8:	813b      	strh	r3, [r7, #8]
 801b0fa:	4613      	mov	r3, r2
 801b0fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b104:	b2db      	uxtb	r3, r3
 801b106:	2b20      	cmp	r3, #32
 801b108:	f040 80fd 	bne.w	801b306 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801b10c:	6a3b      	ldr	r3, [r7, #32]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d002      	beq.n	801b118 <HAL_I2C_Mem_Read+0x34>
 801b112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b114:	2b00      	cmp	r3, #0
 801b116:	d105      	bne.n	801b124 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b11e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801b120:	2301      	movs	r3, #1
 801b122:	e0f1      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b12a:	2b01      	cmp	r3, #1
 801b12c:	d101      	bne.n	801b132 <HAL_I2C_Mem_Read+0x4e>
 801b12e:	2302      	movs	r3, #2
 801b130:	e0ea      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	2201      	movs	r2, #1
 801b136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801b13a:	f7fd f907 	bl	801834c <HAL_GetTick>
 801b13e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801b140:	697b      	ldr	r3, [r7, #20]
 801b142:	9300      	str	r3, [sp, #0]
 801b144:	2319      	movs	r3, #25
 801b146:	2201      	movs	r2, #1
 801b148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801b14c:	68f8      	ldr	r0, [r7, #12]
 801b14e:	f000 f9af 	bl	801b4b0 <I2C_WaitOnFlagUntilTimeout>
 801b152:	4603      	mov	r3, r0
 801b154:	2b00      	cmp	r3, #0
 801b156:	d001      	beq.n	801b15c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801b158:	2301      	movs	r3, #1
 801b15a:	e0d5      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	2222      	movs	r2, #34	; 0x22
 801b160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	2240      	movs	r2, #64	; 0x40
 801b168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	2200      	movs	r2, #0
 801b170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	6a3a      	ldr	r2, [r7, #32]
 801b176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b17c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	2200      	movs	r2, #0
 801b182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801b184:	88f8      	ldrh	r0, [r7, #6]
 801b186:	893a      	ldrh	r2, [r7, #8]
 801b188:	8979      	ldrh	r1, [r7, #10]
 801b18a:	697b      	ldr	r3, [r7, #20]
 801b18c:	9301      	str	r3, [sp, #4]
 801b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b190:	9300      	str	r3, [sp, #0]
 801b192:	4603      	mov	r3, r0
 801b194:	68f8      	ldr	r0, [r7, #12]
 801b196:	f000 f913 	bl	801b3c0 <I2C_RequestMemoryRead>
 801b19a:	4603      	mov	r3, r0
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d005      	beq.n	801b1ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	2200      	movs	r2, #0
 801b1a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801b1a8:	2301      	movs	r3, #1
 801b1aa:	e0ad      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b1b0:	b29b      	uxth	r3, r3
 801b1b2:	2bff      	cmp	r3, #255	; 0xff
 801b1b4:	d90e      	bls.n	801b1d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	22ff      	movs	r2, #255	; 0xff
 801b1ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b1c0:	b2da      	uxtb	r2, r3
 801b1c2:	8979      	ldrh	r1, [r7, #10]
 801b1c4:	4b52      	ldr	r3, [pc, #328]	; (801b310 <HAL_I2C_Mem_Read+0x22c>)
 801b1c6:	9300      	str	r3, [sp, #0]
 801b1c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b1cc:	68f8      	ldr	r0, [r7, #12]
 801b1ce:	f000 fb0b 	bl	801b7e8 <I2C_TransferConfig>
 801b1d2:	e00f      	b.n	801b1f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b1d8:	b29a      	uxth	r2, r3
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b1e2:	b2da      	uxtb	r2, r3
 801b1e4:	8979      	ldrh	r1, [r7, #10]
 801b1e6:	4b4a      	ldr	r3, [pc, #296]	; (801b310 <HAL_I2C_Mem_Read+0x22c>)
 801b1e8:	9300      	str	r3, [sp, #0]
 801b1ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b1ee:	68f8      	ldr	r0, [r7, #12]
 801b1f0:	f000 fafa 	bl	801b7e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801b1f4:	697b      	ldr	r3, [r7, #20]
 801b1f6:	9300      	str	r3, [sp, #0]
 801b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	2104      	movs	r1, #4
 801b1fe:	68f8      	ldr	r0, [r7, #12]
 801b200:	f000 f956 	bl	801b4b0 <I2C_WaitOnFlagUntilTimeout>
 801b204:	4603      	mov	r3, r0
 801b206:	2b00      	cmp	r3, #0
 801b208:	d001      	beq.n	801b20e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801b20a:	2301      	movs	r3, #1
 801b20c:	e07c      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b218:	b2d2      	uxtb	r2, r2
 801b21a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b220:	1c5a      	adds	r2, r3, #1
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b22a:	3b01      	subs	r3, #1
 801b22c:	b29a      	uxth	r2, r3
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b236:	b29b      	uxth	r3, r3
 801b238:	3b01      	subs	r3, #1
 801b23a:	b29a      	uxth	r2, r3
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b244:	b29b      	uxth	r3, r3
 801b246:	2b00      	cmp	r3, #0
 801b248:	d034      	beq.n	801b2b4 <HAL_I2C_Mem_Read+0x1d0>
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d130      	bne.n	801b2b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801b252:	697b      	ldr	r3, [r7, #20]
 801b254:	9300      	str	r3, [sp, #0]
 801b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b258:	2200      	movs	r2, #0
 801b25a:	2180      	movs	r1, #128	; 0x80
 801b25c:	68f8      	ldr	r0, [r7, #12]
 801b25e:	f000 f927 	bl	801b4b0 <I2C_WaitOnFlagUntilTimeout>
 801b262:	4603      	mov	r3, r0
 801b264:	2b00      	cmp	r3, #0
 801b266:	d001      	beq.n	801b26c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801b268:	2301      	movs	r3, #1
 801b26a:	e04d      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b270:	b29b      	uxth	r3, r3
 801b272:	2bff      	cmp	r3, #255	; 0xff
 801b274:	d90e      	bls.n	801b294 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	22ff      	movs	r2, #255	; 0xff
 801b27a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b280:	b2da      	uxtb	r2, r3
 801b282:	8979      	ldrh	r1, [r7, #10]
 801b284:	2300      	movs	r3, #0
 801b286:	9300      	str	r3, [sp, #0]
 801b288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b28c:	68f8      	ldr	r0, [r7, #12]
 801b28e:	f000 faab 	bl	801b7e8 <I2C_TransferConfig>
 801b292:	e00f      	b.n	801b2b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b298:	b29a      	uxth	r2, r3
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b2a2:	b2da      	uxtb	r2, r3
 801b2a4:	8979      	ldrh	r1, [r7, #10]
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	9300      	str	r3, [sp, #0]
 801b2aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b2ae:	68f8      	ldr	r0, [r7, #12]
 801b2b0:	f000 fa9a 	bl	801b7e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b2b8:	b29b      	uxth	r3, r3
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d19a      	bne.n	801b1f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b2be:	697a      	ldr	r2, [r7, #20]
 801b2c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b2c2:	68f8      	ldr	r0, [r7, #12]
 801b2c4:	f000 f974 	bl	801b5b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801b2c8:	4603      	mov	r3, r0
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d001      	beq.n	801b2d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801b2ce:	2301      	movs	r3, #1
 801b2d0:	e01a      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2220      	movs	r2, #32
 801b2d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	6859      	ldr	r1, [r3, #4]
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	681a      	ldr	r2, [r3, #0]
 801b2e4:	4b0b      	ldr	r3, [pc, #44]	; (801b314 <HAL_I2C_Mem_Read+0x230>)
 801b2e6:	400b      	ands	r3, r1
 801b2e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	2220      	movs	r2, #32
 801b2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	2200      	movs	r2, #0
 801b2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	2200      	movs	r2, #0
 801b2fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b302:	2300      	movs	r3, #0
 801b304:	e000      	b.n	801b308 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801b306:	2302      	movs	r3, #2
  }
}
 801b308:	4618      	mov	r0, r3
 801b30a:	3718      	adds	r7, #24
 801b30c:	46bd      	mov	sp, r7
 801b30e:	bd80      	pop	{r7, pc}
 801b310:	80002400 	.word	0x80002400
 801b314:	fe00e800 	.word	0xfe00e800

0801b318 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b086      	sub	sp, #24
 801b31c:	af02      	add	r7, sp, #8
 801b31e:	60f8      	str	r0, [r7, #12]
 801b320:	4608      	mov	r0, r1
 801b322:	4611      	mov	r1, r2
 801b324:	461a      	mov	r2, r3
 801b326:	4603      	mov	r3, r0
 801b328:	817b      	strh	r3, [r7, #10]
 801b32a:	460b      	mov	r3, r1
 801b32c:	813b      	strh	r3, [r7, #8]
 801b32e:	4613      	mov	r3, r2
 801b330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801b332:	88fb      	ldrh	r3, [r7, #6]
 801b334:	b2da      	uxtb	r2, r3
 801b336:	8979      	ldrh	r1, [r7, #10]
 801b338:	4b20      	ldr	r3, [pc, #128]	; (801b3bc <I2C_RequestMemoryWrite+0xa4>)
 801b33a:	9300      	str	r3, [sp, #0]
 801b33c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b340:	68f8      	ldr	r0, [r7, #12]
 801b342:	f000 fa51 	bl	801b7e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801b346:	69fa      	ldr	r2, [r7, #28]
 801b348:	69b9      	ldr	r1, [r7, #24]
 801b34a:	68f8      	ldr	r0, [r7, #12]
 801b34c:	f000 f8f0 	bl	801b530 <I2C_WaitOnTXISFlagUntilTimeout>
 801b350:	4603      	mov	r3, r0
 801b352:	2b00      	cmp	r3, #0
 801b354:	d001      	beq.n	801b35a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801b356:	2301      	movs	r3, #1
 801b358:	e02c      	b.n	801b3b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801b35a:	88fb      	ldrh	r3, [r7, #6]
 801b35c:	2b01      	cmp	r3, #1
 801b35e:	d105      	bne.n	801b36c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801b360:	893b      	ldrh	r3, [r7, #8]
 801b362:	b2da      	uxtb	r2, r3
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	629a      	str	r2, [r3, #40]	; 0x28
 801b36a:	e015      	b.n	801b398 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801b36c:	893b      	ldrh	r3, [r7, #8]
 801b36e:	0a1b      	lsrs	r3, r3, #8
 801b370:	b29b      	uxth	r3, r3
 801b372:	b2da      	uxtb	r2, r3
 801b374:	68fb      	ldr	r3, [r7, #12]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801b37a:	69fa      	ldr	r2, [r7, #28]
 801b37c:	69b9      	ldr	r1, [r7, #24]
 801b37e:	68f8      	ldr	r0, [r7, #12]
 801b380:	f000 f8d6 	bl	801b530 <I2C_WaitOnTXISFlagUntilTimeout>
 801b384:	4603      	mov	r3, r0
 801b386:	2b00      	cmp	r3, #0
 801b388:	d001      	beq.n	801b38e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801b38a:	2301      	movs	r3, #1
 801b38c:	e012      	b.n	801b3b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801b38e:	893b      	ldrh	r3, [r7, #8]
 801b390:	b2da      	uxtb	r2, r3
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801b398:	69fb      	ldr	r3, [r7, #28]
 801b39a:	9300      	str	r3, [sp, #0]
 801b39c:	69bb      	ldr	r3, [r7, #24]
 801b39e:	2200      	movs	r2, #0
 801b3a0:	2180      	movs	r1, #128	; 0x80
 801b3a2:	68f8      	ldr	r0, [r7, #12]
 801b3a4:	f000 f884 	bl	801b4b0 <I2C_WaitOnFlagUntilTimeout>
 801b3a8:	4603      	mov	r3, r0
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d001      	beq.n	801b3b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801b3ae:	2301      	movs	r3, #1
 801b3b0:	e000      	b.n	801b3b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801b3b2:	2300      	movs	r3, #0
}
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	3710      	adds	r7, #16
 801b3b8:	46bd      	mov	sp, r7
 801b3ba:	bd80      	pop	{r7, pc}
 801b3bc:	80002000 	.word	0x80002000

0801b3c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b086      	sub	sp, #24
 801b3c4:	af02      	add	r7, sp, #8
 801b3c6:	60f8      	str	r0, [r7, #12]
 801b3c8:	4608      	mov	r0, r1
 801b3ca:	4611      	mov	r1, r2
 801b3cc:	461a      	mov	r2, r3
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	817b      	strh	r3, [r7, #10]
 801b3d2:	460b      	mov	r3, r1
 801b3d4:	813b      	strh	r3, [r7, #8]
 801b3d6:	4613      	mov	r3, r2
 801b3d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801b3da:	88fb      	ldrh	r3, [r7, #6]
 801b3dc:	b2da      	uxtb	r2, r3
 801b3de:	8979      	ldrh	r1, [r7, #10]
 801b3e0:	4b20      	ldr	r3, [pc, #128]	; (801b464 <I2C_RequestMemoryRead+0xa4>)
 801b3e2:	9300      	str	r3, [sp, #0]
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	68f8      	ldr	r0, [r7, #12]
 801b3e8:	f000 f9fe 	bl	801b7e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801b3ec:	69fa      	ldr	r2, [r7, #28]
 801b3ee:	69b9      	ldr	r1, [r7, #24]
 801b3f0:	68f8      	ldr	r0, [r7, #12]
 801b3f2:	f000 f89d 	bl	801b530 <I2C_WaitOnTXISFlagUntilTimeout>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d001      	beq.n	801b400 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801b3fc:	2301      	movs	r3, #1
 801b3fe:	e02c      	b.n	801b45a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801b400:	88fb      	ldrh	r3, [r7, #6]
 801b402:	2b01      	cmp	r3, #1
 801b404:	d105      	bne.n	801b412 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801b406:	893b      	ldrh	r3, [r7, #8]
 801b408:	b2da      	uxtb	r2, r3
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	629a      	str	r2, [r3, #40]	; 0x28
 801b410:	e015      	b.n	801b43e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801b412:	893b      	ldrh	r3, [r7, #8]
 801b414:	0a1b      	lsrs	r3, r3, #8
 801b416:	b29b      	uxth	r3, r3
 801b418:	b2da      	uxtb	r2, r3
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801b420:	69fa      	ldr	r2, [r7, #28]
 801b422:	69b9      	ldr	r1, [r7, #24]
 801b424:	68f8      	ldr	r0, [r7, #12]
 801b426:	f000 f883 	bl	801b530 <I2C_WaitOnTXISFlagUntilTimeout>
 801b42a:	4603      	mov	r3, r0
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d001      	beq.n	801b434 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801b430:	2301      	movs	r3, #1
 801b432:	e012      	b.n	801b45a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801b434:	893b      	ldrh	r3, [r7, #8]
 801b436:	b2da      	uxtb	r2, r3
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801b43e:	69fb      	ldr	r3, [r7, #28]
 801b440:	9300      	str	r3, [sp, #0]
 801b442:	69bb      	ldr	r3, [r7, #24]
 801b444:	2200      	movs	r2, #0
 801b446:	2140      	movs	r1, #64	; 0x40
 801b448:	68f8      	ldr	r0, [r7, #12]
 801b44a:	f000 f831 	bl	801b4b0 <I2C_WaitOnFlagUntilTimeout>
 801b44e:	4603      	mov	r3, r0
 801b450:	2b00      	cmp	r3, #0
 801b452:	d001      	beq.n	801b458 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801b454:	2301      	movs	r3, #1
 801b456:	e000      	b.n	801b45a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801b458:	2300      	movs	r3, #0
}
 801b45a:	4618      	mov	r0, r3
 801b45c:	3710      	adds	r7, #16
 801b45e:	46bd      	mov	sp, r7
 801b460:	bd80      	pop	{r7, pc}
 801b462:	bf00      	nop
 801b464:	80002000 	.word	0x80002000

0801b468 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801b468:	b480      	push	{r7}
 801b46a:	b083      	sub	sp, #12
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	699b      	ldr	r3, [r3, #24]
 801b476:	f003 0302 	and.w	r3, r3, #2
 801b47a:	2b02      	cmp	r3, #2
 801b47c:	d103      	bne.n	801b486 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	2200      	movs	r2, #0
 801b484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	699b      	ldr	r3, [r3, #24]
 801b48c:	f003 0301 	and.w	r3, r3, #1
 801b490:	2b01      	cmp	r3, #1
 801b492:	d007      	beq.n	801b4a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	699a      	ldr	r2, [r3, #24]
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	f042 0201 	orr.w	r2, r2, #1
 801b4a2:	619a      	str	r2, [r3, #24]
  }
}
 801b4a4:	bf00      	nop
 801b4a6:	370c      	adds	r7, #12
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ae:	4770      	bx	lr

0801b4b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	b084      	sub	sp, #16
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	60f8      	str	r0, [r7, #12]
 801b4b8:	60b9      	str	r1, [r7, #8]
 801b4ba:	603b      	str	r3, [r7, #0]
 801b4bc:	4613      	mov	r3, r2
 801b4be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b4c0:	e022      	b.n	801b508 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b4c2:	683b      	ldr	r3, [r7, #0]
 801b4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b4c8:	d01e      	beq.n	801b508 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b4ca:	f7fc ff3f 	bl	801834c <HAL_GetTick>
 801b4ce:	4602      	mov	r2, r0
 801b4d0:	69bb      	ldr	r3, [r7, #24]
 801b4d2:	1ad3      	subs	r3, r2, r3
 801b4d4:	683a      	ldr	r2, [r7, #0]
 801b4d6:	429a      	cmp	r2, r3
 801b4d8:	d302      	bcc.n	801b4e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 801b4da:	683b      	ldr	r3, [r7, #0]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d113      	bne.n	801b508 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b4e0:	68fb      	ldr	r3, [r7, #12]
 801b4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4e4:	f043 0220 	orr.w	r2, r3, #32
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	2220      	movs	r2, #32
 801b4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	2200      	movs	r2, #0
 801b4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	2200      	movs	r2, #0
 801b500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801b504:	2301      	movs	r3, #1
 801b506:	e00f      	b.n	801b528 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	699a      	ldr	r2, [r3, #24]
 801b50e:	68bb      	ldr	r3, [r7, #8]
 801b510:	4013      	ands	r3, r2
 801b512:	68ba      	ldr	r2, [r7, #8]
 801b514:	429a      	cmp	r2, r3
 801b516:	bf0c      	ite	eq
 801b518:	2301      	moveq	r3, #1
 801b51a:	2300      	movne	r3, #0
 801b51c:	b2db      	uxtb	r3, r3
 801b51e:	461a      	mov	r2, r3
 801b520:	79fb      	ldrb	r3, [r7, #7]
 801b522:	429a      	cmp	r2, r3
 801b524:	d0cd      	beq.n	801b4c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801b526:	2300      	movs	r3, #0
}
 801b528:	4618      	mov	r0, r3
 801b52a:	3710      	adds	r7, #16
 801b52c:	46bd      	mov	sp, r7
 801b52e:	bd80      	pop	{r7, pc}

0801b530 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b530:	b580      	push	{r7, lr}
 801b532:	b084      	sub	sp, #16
 801b534:	af00      	add	r7, sp, #0
 801b536:	60f8      	str	r0, [r7, #12]
 801b538:	60b9      	str	r1, [r7, #8]
 801b53a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801b53c:	e02c      	b.n	801b598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b53e:	687a      	ldr	r2, [r7, #4]
 801b540:	68b9      	ldr	r1, [r7, #8]
 801b542:	68f8      	ldr	r0, [r7, #12]
 801b544:	f000 f870 	bl	801b628 <I2C_IsErrorOccurred>
 801b548:	4603      	mov	r3, r0
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d001      	beq.n	801b552 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b54e:	2301      	movs	r3, #1
 801b550:	e02a      	b.n	801b5a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b558:	d01e      	beq.n	801b598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b55a:	f7fc fef7 	bl	801834c <HAL_GetTick>
 801b55e:	4602      	mov	r2, r0
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	1ad3      	subs	r3, r2, r3
 801b564:	68ba      	ldr	r2, [r7, #8]
 801b566:	429a      	cmp	r2, r3
 801b568:	d302      	bcc.n	801b570 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801b56a:	68bb      	ldr	r3, [r7, #8]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d113      	bne.n	801b598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b574:	f043 0220 	orr.w	r2, r3, #32
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	2220      	movs	r2, #32
 801b580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	2200      	movs	r2, #0
 801b588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	2200      	movs	r2, #0
 801b590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801b594:	2301      	movs	r3, #1
 801b596:	e007      	b.n	801b5a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	699b      	ldr	r3, [r3, #24]
 801b59e:	f003 0302 	and.w	r3, r3, #2
 801b5a2:	2b02      	cmp	r3, #2
 801b5a4:	d1cb      	bne.n	801b53e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801b5a6:	2300      	movs	r3, #0
}
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	3710      	adds	r7, #16
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}

0801b5b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b084      	sub	sp, #16
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	60f8      	str	r0, [r7, #12]
 801b5b8:	60b9      	str	r1, [r7, #8]
 801b5ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b5bc:	e028      	b.n	801b610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b5be:	687a      	ldr	r2, [r7, #4]
 801b5c0:	68b9      	ldr	r1, [r7, #8]
 801b5c2:	68f8      	ldr	r0, [r7, #12]
 801b5c4:	f000 f830 	bl	801b628 <I2C_IsErrorOccurred>
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d001      	beq.n	801b5d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b5ce:	2301      	movs	r3, #1
 801b5d0:	e026      	b.n	801b620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b5d2:	f7fc febb 	bl	801834c <HAL_GetTick>
 801b5d6:	4602      	mov	r2, r0
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	1ad3      	subs	r3, r2, r3
 801b5dc:	68ba      	ldr	r2, [r7, #8]
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	d302      	bcc.n	801b5e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801b5e2:	68bb      	ldr	r3, [r7, #8]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d113      	bne.n	801b610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5ec:	f043 0220 	orr.w	r2, r3, #32
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	2220      	movs	r2, #32
 801b5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	2200      	movs	r2, #0
 801b600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	2200      	movs	r2, #0
 801b608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801b60c:	2301      	movs	r3, #1
 801b60e:	e007      	b.n	801b620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	699b      	ldr	r3, [r3, #24]
 801b616:	f003 0320 	and.w	r3, r3, #32
 801b61a:	2b20      	cmp	r3, #32
 801b61c:	d1cf      	bne.n	801b5be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801b61e:	2300      	movs	r3, #0
}
 801b620:	4618      	mov	r0, r3
 801b622:	3710      	adds	r7, #16
 801b624:	46bd      	mov	sp, r7
 801b626:	bd80      	pop	{r7, pc}

0801b628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b08a      	sub	sp, #40	; 0x28
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	60f8      	str	r0, [r7, #12]
 801b630:	60b9      	str	r1, [r7, #8]
 801b632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b634:	2300      	movs	r3, #0
 801b636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	699b      	ldr	r3, [r3, #24]
 801b640:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801b642:	2300      	movs	r3, #0
 801b644:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801b64a:	69bb      	ldr	r3, [r7, #24]
 801b64c:	f003 0310 	and.w	r3, r3, #16
 801b650:	2b00      	cmp	r3, #0
 801b652:	d068      	beq.n	801b726 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	2210      	movs	r2, #16
 801b65a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801b65c:	e049      	b.n	801b6f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801b65e:	68bb      	ldr	r3, [r7, #8]
 801b660:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b664:	d045      	beq.n	801b6f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801b666:	f7fc fe71 	bl	801834c <HAL_GetTick>
 801b66a:	4602      	mov	r2, r0
 801b66c:	69fb      	ldr	r3, [r7, #28]
 801b66e:	1ad3      	subs	r3, r2, r3
 801b670:	68ba      	ldr	r2, [r7, #8]
 801b672:	429a      	cmp	r2, r3
 801b674:	d302      	bcc.n	801b67c <I2C_IsErrorOccurred+0x54>
 801b676:	68bb      	ldr	r3, [r7, #8]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d13a      	bne.n	801b6f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	685b      	ldr	r3, [r3, #4]
 801b682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b68e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	699b      	ldr	r3, [r3, #24]
 801b696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b69a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b69e:	d121      	bne.n	801b6e4 <I2C_IsErrorOccurred+0xbc>
 801b6a0:	697b      	ldr	r3, [r7, #20]
 801b6a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b6a6:	d01d      	beq.n	801b6e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801b6a8:	7cfb      	ldrb	r3, [r7, #19]
 801b6aa:	2b20      	cmp	r3, #32
 801b6ac:	d01a      	beq.n	801b6e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	685a      	ldr	r2, [r3, #4]
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b6bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801b6be:	f7fc fe45 	bl	801834c <HAL_GetTick>
 801b6c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b6c4:	e00e      	b.n	801b6e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801b6c6:	f7fc fe41 	bl	801834c <HAL_GetTick>
 801b6ca:	4602      	mov	r2, r0
 801b6cc:	69fb      	ldr	r3, [r7, #28]
 801b6ce:	1ad3      	subs	r3, r2, r3
 801b6d0:	2b19      	cmp	r3, #25
 801b6d2:	d907      	bls.n	801b6e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 801b6d4:	6a3b      	ldr	r3, [r7, #32]
 801b6d6:	f043 0320 	orr.w	r3, r3, #32
 801b6da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801b6dc:	2301      	movs	r3, #1
 801b6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801b6e2:	e006      	b.n	801b6f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	699b      	ldr	r3, [r3, #24]
 801b6ea:	f003 0320 	and.w	r3, r3, #32
 801b6ee:	2b20      	cmp	r3, #32
 801b6f0:	d1e9      	bne.n	801b6c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	699b      	ldr	r3, [r3, #24]
 801b6f8:	f003 0320 	and.w	r3, r3, #32
 801b6fc:	2b20      	cmp	r3, #32
 801b6fe:	d003      	beq.n	801b708 <I2C_IsErrorOccurred+0xe0>
 801b700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b704:	2b00      	cmp	r3, #0
 801b706:	d0aa      	beq.n	801b65e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801b708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d103      	bne.n	801b718 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	2220      	movs	r2, #32
 801b716:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801b718:	6a3b      	ldr	r3, [r7, #32]
 801b71a:	f043 0304 	orr.w	r3, r3, #4
 801b71e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801b720:	2301      	movs	r3, #1
 801b722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	699b      	ldr	r3, [r3, #24]
 801b72c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801b72e:	69bb      	ldr	r3, [r7, #24]
 801b730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b734:	2b00      	cmp	r3, #0
 801b736:	d00b      	beq.n	801b750 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801b738:	6a3b      	ldr	r3, [r7, #32]
 801b73a:	f043 0301 	orr.w	r3, r3, #1
 801b73e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801b74a:	2301      	movs	r3, #1
 801b74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801b750:	69bb      	ldr	r3, [r7, #24]
 801b752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b756:	2b00      	cmp	r3, #0
 801b758:	d00b      	beq.n	801b772 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801b75a:	6a3b      	ldr	r3, [r7, #32]
 801b75c:	f043 0308 	orr.w	r3, r3, #8
 801b760:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b76a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801b76c:	2301      	movs	r3, #1
 801b76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801b772:	69bb      	ldr	r3, [r7, #24]
 801b774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d00b      	beq.n	801b794 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801b77c:	6a3b      	ldr	r3, [r7, #32]
 801b77e:	f043 0302 	orr.w	r3, r3, #2
 801b782:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b78c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801b78e:	2301      	movs	r3, #1
 801b790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801b794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d01c      	beq.n	801b7d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801b79c:	68f8      	ldr	r0, [r7, #12]
 801b79e:	f7ff fe63 	bl	801b468 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	6859      	ldr	r1, [r3, #4]
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	681a      	ldr	r2, [r3, #0]
 801b7ac:	4b0d      	ldr	r3, [pc, #52]	; (801b7e4 <I2C_IsErrorOccurred+0x1bc>)
 801b7ae:	400b      	ands	r3, r1
 801b7b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b7b6:	6a3b      	ldr	r3, [r7, #32]
 801b7b8:	431a      	orrs	r2, r3
 801b7ba:	68fb      	ldr	r3, [r7, #12]
 801b7bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	2220      	movs	r2, #32
 801b7c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	2200      	movs	r2, #0
 801b7d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801b7d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801b7da:	4618      	mov	r0, r3
 801b7dc:	3728      	adds	r7, #40	; 0x28
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	bd80      	pop	{r7, pc}
 801b7e2:	bf00      	nop
 801b7e4:	fe00e800 	.word	0xfe00e800

0801b7e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b087      	sub	sp, #28
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	60f8      	str	r0, [r7, #12]
 801b7f0:	607b      	str	r3, [r7, #4]
 801b7f2:	460b      	mov	r3, r1
 801b7f4:	817b      	strh	r3, [r7, #10]
 801b7f6:	4613      	mov	r3, r2
 801b7f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801b7fa:	897b      	ldrh	r3, [r7, #10]
 801b7fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801b800:	7a7b      	ldrb	r3, [r7, #9]
 801b802:	041b      	lsls	r3, r3, #16
 801b804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801b808:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801b80e:	6a3b      	ldr	r3, [r7, #32]
 801b810:	4313      	orrs	r3, r2
 801b812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b816:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	685a      	ldr	r2, [r3, #4]
 801b81e:	6a3b      	ldr	r3, [r7, #32]
 801b820:	0d5b      	lsrs	r3, r3, #21
 801b822:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801b826:	4b08      	ldr	r3, [pc, #32]	; (801b848 <I2C_TransferConfig+0x60>)
 801b828:	430b      	orrs	r3, r1
 801b82a:	43db      	mvns	r3, r3
 801b82c:	ea02 0103 	and.w	r1, r2, r3
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	697a      	ldr	r2, [r7, #20]
 801b836:	430a      	orrs	r2, r1
 801b838:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801b83a:	bf00      	nop
 801b83c:	371c      	adds	r7, #28
 801b83e:	46bd      	mov	sp, r7
 801b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	03ff63ff 	.word	0x03ff63ff

0801b84c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801b84c:	b480      	push	{r7}
 801b84e:	b083      	sub	sp, #12
 801b850:	af00      	add	r7, sp, #0
 801b852:	6078      	str	r0, [r7, #4]
 801b854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b85c:	b2db      	uxtb	r3, r3
 801b85e:	2b20      	cmp	r3, #32
 801b860:	d138      	bne.n	801b8d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b868:	2b01      	cmp	r3, #1
 801b86a:	d101      	bne.n	801b870 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801b86c:	2302      	movs	r3, #2
 801b86e:	e032      	b.n	801b8d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	2201      	movs	r2, #1
 801b874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	2224      	movs	r2, #36	; 0x24
 801b87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	681a      	ldr	r2, [r3, #0]
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	f022 0201 	bic.w	r2, r2, #1
 801b88e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	681a      	ldr	r2, [r3, #0]
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801b89e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	6819      	ldr	r1, [r3, #0]
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	683a      	ldr	r2, [r7, #0]
 801b8ac:	430a      	orrs	r2, r1
 801b8ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	681a      	ldr	r2, [r3, #0]
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	f042 0201 	orr.w	r2, r2, #1
 801b8be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	2220      	movs	r2, #32
 801b8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	e000      	b.n	801b8d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801b8d4:	2302      	movs	r3, #2
  }
}
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	370c      	adds	r7, #12
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e0:	4770      	bx	lr

0801b8e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801b8e2:	b480      	push	{r7}
 801b8e4:	b085      	sub	sp, #20
 801b8e6:	af00      	add	r7, sp, #0
 801b8e8:	6078      	str	r0, [r7, #4]
 801b8ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	2b20      	cmp	r3, #32
 801b8f6:	d139      	bne.n	801b96c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b8fe:	2b01      	cmp	r3, #1
 801b900:	d101      	bne.n	801b906 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801b902:	2302      	movs	r3, #2
 801b904:	e033      	b.n	801b96e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	2201      	movs	r2, #1
 801b90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	2224      	movs	r2, #36	; 0x24
 801b912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	681a      	ldr	r2, [r3, #0]
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	f022 0201 	bic.w	r2, r2, #1
 801b924:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b934:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801b936:	683b      	ldr	r3, [r7, #0]
 801b938:	021b      	lsls	r3, r3, #8
 801b93a:	68fa      	ldr	r2, [r7, #12]
 801b93c:	4313      	orrs	r3, r2
 801b93e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	68fa      	ldr	r2, [r7, #12]
 801b946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	681a      	ldr	r2, [r3, #0]
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	f042 0201 	orr.w	r2, r2, #1
 801b956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	2220      	movs	r2, #32
 801b95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	2200      	movs	r2, #0
 801b964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b968:	2300      	movs	r3, #0
 801b96a:	e000      	b.n	801b96e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801b96c:	2302      	movs	r3, #2
  }
}
 801b96e:	4618      	mov	r0, r3
 801b970:	3714      	adds	r7, #20
 801b972:	46bd      	mov	sp, r7
 801b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b978:	4770      	bx	lr

0801b97a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801b97a:	b580      	push	{r7, lr}
 801b97c:	b084      	sub	sp, #16
 801b97e:	af00      	add	r7, sp, #0
 801b980:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d101      	bne.n	801b98c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801b988:	2301      	movs	r3, #1
 801b98a:	e041      	b.n	801ba10 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801b994:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	f245 5255 	movw	r2, #21845	; 0x5555
 801b99e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	687a      	ldr	r2, [r7, #4]
 801b9a6:	6852      	ldr	r2, [r2, #4]
 801b9a8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	687a      	ldr	r2, [r7, #4]
 801b9b0:	6892      	ldr	r2, [r2, #8]
 801b9b2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801b9b4:	f7fc fcca 	bl	801834c <HAL_GetTick>
 801b9b8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801b9ba:	e00f      	b.n	801b9dc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801b9bc:	f7fc fcc6 	bl	801834c <HAL_GetTick>
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	1ad3      	subs	r3, r2, r3
 801b9c6:	2b31      	cmp	r3, #49	; 0x31
 801b9c8:	d908      	bls.n	801b9dc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	68db      	ldr	r3, [r3, #12]
 801b9d0:	f003 0307 	and.w	r3, r3, #7
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d001      	beq.n	801b9dc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801b9d8:	2303      	movs	r3, #3
 801b9da:	e019      	b.n	801ba10 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	68db      	ldr	r3, [r3, #12]
 801b9e2:	f003 0307 	and.w	r3, r3, #7
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d1e8      	bne.n	801b9bc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	691a      	ldr	r2, [r3, #16]
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	68db      	ldr	r3, [r3, #12]
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d005      	beq.n	801ba04 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	687a      	ldr	r2, [r7, #4]
 801b9fe:	68d2      	ldr	r2, [r2, #12]
 801ba00:	611a      	str	r2, [r3, #16]
 801ba02:	e004      	b.n	801ba0e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801ba0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ba0e:	2300      	movs	r3, #0
}
 801ba10:	4618      	mov	r0, r3
 801ba12:	3710      	adds	r7, #16
 801ba14:	46bd      	mov	sp, r7
 801ba16:	bd80      	pop	{r7, pc}

0801ba18 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801ba18:	b480      	push	{r7}
 801ba1a:	b083      	sub	sp, #12
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801ba28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801ba2a:	2300      	movs	r3, #0
}
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	370c      	adds	r7, #12
 801ba30:	46bd      	mov	sp, r7
 801ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba36:	4770      	bx	lr

0801ba38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b086      	sub	sp, #24
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801ba40:	2300      	movs	r3, #0
 801ba42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d101      	bne.n	801ba4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801ba4a:	2301      	movs	r3, #1
 801ba4c:	e29b      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	f003 0301 	and.w	r3, r3, #1
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	f000 8087 	beq.w	801bb6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801ba5c:	4b96      	ldr	r3, [pc, #600]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801ba5e:	689b      	ldr	r3, [r3, #8]
 801ba60:	f003 030c 	and.w	r3, r3, #12
 801ba64:	2b04      	cmp	r3, #4
 801ba66:	d00c      	beq.n	801ba82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801ba68:	4b93      	ldr	r3, [pc, #588]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801ba6a:	689b      	ldr	r3, [r3, #8]
 801ba6c:	f003 030c 	and.w	r3, r3, #12
 801ba70:	2b08      	cmp	r3, #8
 801ba72:	d112      	bne.n	801ba9a <HAL_RCC_OscConfig+0x62>
 801ba74:	4b90      	ldr	r3, [pc, #576]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801ba76:	685b      	ldr	r3, [r3, #4]
 801ba78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ba7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ba80:	d10b      	bne.n	801ba9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ba82:	4b8d      	ldr	r3, [pc, #564]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	d06c      	beq.n	801bb68 <HAL_RCC_OscConfig+0x130>
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	685b      	ldr	r3, [r3, #4]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d168      	bne.n	801bb68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801ba96:	2301      	movs	r3, #1
 801ba98:	e275      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	685b      	ldr	r3, [r3, #4]
 801ba9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801baa2:	d106      	bne.n	801bab2 <HAL_RCC_OscConfig+0x7a>
 801baa4:	4b84      	ldr	r3, [pc, #528]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	4a83      	ldr	r2, [pc, #524]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801baaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801baae:	6013      	str	r3, [r2, #0]
 801bab0:	e02e      	b.n	801bb10 <HAL_RCC_OscConfig+0xd8>
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	685b      	ldr	r3, [r3, #4]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d10c      	bne.n	801bad4 <HAL_RCC_OscConfig+0x9c>
 801baba:	4b7f      	ldr	r3, [pc, #508]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	4a7e      	ldr	r2, [pc, #504]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bac4:	6013      	str	r3, [r2, #0]
 801bac6:	4b7c      	ldr	r3, [pc, #496]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	4a7b      	ldr	r2, [pc, #492]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bacc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bad0:	6013      	str	r3, [r2, #0]
 801bad2:	e01d      	b.n	801bb10 <HAL_RCC_OscConfig+0xd8>
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	685b      	ldr	r3, [r3, #4]
 801bad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801badc:	d10c      	bne.n	801baf8 <HAL_RCC_OscConfig+0xc0>
 801bade:	4b76      	ldr	r3, [pc, #472]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	4a75      	ldr	r2, [pc, #468]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bae8:	6013      	str	r3, [r2, #0]
 801baea:	4b73      	ldr	r3, [pc, #460]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	4a72      	ldr	r2, [pc, #456]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801baf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801baf4:	6013      	str	r3, [r2, #0]
 801baf6:	e00b      	b.n	801bb10 <HAL_RCC_OscConfig+0xd8>
 801baf8:	4b6f      	ldr	r3, [pc, #444]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	4a6e      	ldr	r2, [pc, #440]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bafe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bb02:	6013      	str	r3, [r2, #0]
 801bb04:	4b6c      	ldr	r3, [pc, #432]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	4a6b      	ldr	r2, [pc, #428]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bb0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	685b      	ldr	r3, [r3, #4]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d013      	beq.n	801bb40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb18:	f7fc fc18 	bl	801834c <HAL_GetTick>
 801bb1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bb1e:	e008      	b.n	801bb32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bb20:	f7fc fc14 	bl	801834c <HAL_GetTick>
 801bb24:	4602      	mov	r2, r0
 801bb26:	693b      	ldr	r3, [r7, #16]
 801bb28:	1ad3      	subs	r3, r2, r3
 801bb2a:	2b64      	cmp	r3, #100	; 0x64
 801bb2c:	d901      	bls.n	801bb32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801bb2e:	2303      	movs	r3, #3
 801bb30:	e229      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bb32:	4b61      	ldr	r3, [pc, #388]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d0f0      	beq.n	801bb20 <HAL_RCC_OscConfig+0xe8>
 801bb3e:	e014      	b.n	801bb6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb40:	f7fc fc04 	bl	801834c <HAL_GetTick>
 801bb44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bb46:	e008      	b.n	801bb5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bb48:	f7fc fc00 	bl	801834c <HAL_GetTick>
 801bb4c:	4602      	mov	r2, r0
 801bb4e:	693b      	ldr	r3, [r7, #16]
 801bb50:	1ad3      	subs	r3, r2, r3
 801bb52:	2b64      	cmp	r3, #100	; 0x64
 801bb54:	d901      	bls.n	801bb5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801bb56:	2303      	movs	r3, #3
 801bb58:	e215      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bb5a:	4b57      	ldr	r3, [pc, #348]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d1f0      	bne.n	801bb48 <HAL_RCC_OscConfig+0x110>
 801bb66:	e000      	b.n	801bb6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	f003 0302 	and.w	r3, r3, #2
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d069      	beq.n	801bc4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801bb76:	4b50      	ldr	r3, [pc, #320]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb78:	689b      	ldr	r3, [r3, #8]
 801bb7a:	f003 030c 	and.w	r3, r3, #12
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d00b      	beq.n	801bb9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bb82:	4b4d      	ldr	r3, [pc, #308]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb84:	689b      	ldr	r3, [r3, #8]
 801bb86:	f003 030c 	and.w	r3, r3, #12
 801bb8a:	2b08      	cmp	r3, #8
 801bb8c:	d11c      	bne.n	801bbc8 <HAL_RCC_OscConfig+0x190>
 801bb8e:	4b4a      	ldr	r3, [pc, #296]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb90:	685b      	ldr	r3, [r3, #4]
 801bb92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d116      	bne.n	801bbc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bb9a:	4b47      	ldr	r3, [pc, #284]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	f003 0302 	and.w	r3, r3, #2
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d005      	beq.n	801bbb2 <HAL_RCC_OscConfig+0x17a>
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	68db      	ldr	r3, [r3, #12]
 801bbaa:	2b01      	cmp	r3, #1
 801bbac:	d001      	beq.n	801bbb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801bbae:	2301      	movs	r3, #1
 801bbb0:	e1e9      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bbb2:	4b41      	ldr	r3, [pc, #260]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	691b      	ldr	r3, [r3, #16]
 801bbbe:	00db      	lsls	r3, r3, #3
 801bbc0:	493d      	ldr	r1, [pc, #244]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bbc2:	4313      	orrs	r3, r2
 801bbc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bbc6:	e040      	b.n	801bc4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	68db      	ldr	r3, [r3, #12]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d023      	beq.n	801bc18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bbd0:	4b39      	ldr	r3, [pc, #228]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	4a38      	ldr	r2, [pc, #224]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bbd6:	f043 0301 	orr.w	r3, r3, #1
 801bbda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbdc:	f7fc fbb6 	bl	801834c <HAL_GetTick>
 801bbe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bbe2:	e008      	b.n	801bbf6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bbe4:	f7fc fbb2 	bl	801834c <HAL_GetTick>
 801bbe8:	4602      	mov	r2, r0
 801bbea:	693b      	ldr	r3, [r7, #16]
 801bbec:	1ad3      	subs	r3, r2, r3
 801bbee:	2b02      	cmp	r3, #2
 801bbf0:	d901      	bls.n	801bbf6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801bbf2:	2303      	movs	r3, #3
 801bbf4:	e1c7      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bbf6:	4b30      	ldr	r3, [pc, #192]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	f003 0302 	and.w	r3, r3, #2
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d0f0      	beq.n	801bbe4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc02:	4b2d      	ldr	r3, [pc, #180]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	691b      	ldr	r3, [r3, #16]
 801bc0e:	00db      	lsls	r3, r3, #3
 801bc10:	4929      	ldr	r1, [pc, #164]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc12:	4313      	orrs	r3, r2
 801bc14:	600b      	str	r3, [r1, #0]
 801bc16:	e018      	b.n	801bc4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bc18:	4b27      	ldr	r3, [pc, #156]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	4a26      	ldr	r2, [pc, #152]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc1e:	f023 0301 	bic.w	r3, r3, #1
 801bc22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc24:	f7fc fb92 	bl	801834c <HAL_GetTick>
 801bc28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bc2a:	e008      	b.n	801bc3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bc2c:	f7fc fb8e 	bl	801834c <HAL_GetTick>
 801bc30:	4602      	mov	r2, r0
 801bc32:	693b      	ldr	r3, [r7, #16]
 801bc34:	1ad3      	subs	r3, r2, r3
 801bc36:	2b02      	cmp	r3, #2
 801bc38:	d901      	bls.n	801bc3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bc3a:	2303      	movs	r3, #3
 801bc3c:	e1a3      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bc3e:	4b1e      	ldr	r3, [pc, #120]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	f003 0302 	and.w	r3, r3, #2
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d1f0      	bne.n	801bc2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	f003 0308 	and.w	r3, r3, #8
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d038      	beq.n	801bcc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	695b      	ldr	r3, [r3, #20]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d019      	beq.n	801bc92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bc5e:	4b16      	ldr	r3, [pc, #88]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bc62:	4a15      	ldr	r2, [pc, #84]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc64:	f043 0301 	orr.w	r3, r3, #1
 801bc68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bc6a:	f7fc fb6f 	bl	801834c <HAL_GetTick>
 801bc6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bc70:	e008      	b.n	801bc84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bc72:	f7fc fb6b 	bl	801834c <HAL_GetTick>
 801bc76:	4602      	mov	r2, r0
 801bc78:	693b      	ldr	r3, [r7, #16]
 801bc7a:	1ad3      	subs	r3, r2, r3
 801bc7c:	2b02      	cmp	r3, #2
 801bc7e:	d901      	bls.n	801bc84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801bc80:	2303      	movs	r3, #3
 801bc82:	e180      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bc84:	4b0c      	ldr	r3, [pc, #48]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bc88:	f003 0302 	and.w	r3, r3, #2
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d0f0      	beq.n	801bc72 <HAL_RCC_OscConfig+0x23a>
 801bc90:	e01a      	b.n	801bcc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bc92:	4b09      	ldr	r3, [pc, #36]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bc96:	4a08      	ldr	r2, [pc, #32]	; (801bcb8 <HAL_RCC_OscConfig+0x280>)
 801bc98:	f023 0301 	bic.w	r3, r3, #1
 801bc9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bc9e:	f7fc fb55 	bl	801834c <HAL_GetTick>
 801bca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bca4:	e00a      	b.n	801bcbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bca6:	f7fc fb51 	bl	801834c <HAL_GetTick>
 801bcaa:	4602      	mov	r2, r0
 801bcac:	693b      	ldr	r3, [r7, #16]
 801bcae:	1ad3      	subs	r3, r2, r3
 801bcb0:	2b02      	cmp	r3, #2
 801bcb2:	d903      	bls.n	801bcbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801bcb4:	2303      	movs	r3, #3
 801bcb6:	e166      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
 801bcb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bcbc:	4b92      	ldr	r3, [pc, #584]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bcbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bcc0:	f003 0302 	and.w	r3, r3, #2
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d1ee      	bne.n	801bca6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	f003 0304 	and.w	r3, r3, #4
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	f000 80a4 	beq.w	801be1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bcd6:	4b8c      	ldr	r3, [pc, #560]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bcda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d10d      	bne.n	801bcfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801bce2:	4b89      	ldr	r3, [pc, #548]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bce6:	4a88      	ldr	r2, [pc, #544]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bcec:	6413      	str	r3, [r2, #64]	; 0x40
 801bcee:	4b86      	ldr	r3, [pc, #536]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bcf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bcf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bcf6:	60bb      	str	r3, [r7, #8]
 801bcf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bcfa:	2301      	movs	r3, #1
 801bcfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801bcfe:	4b83      	ldr	r3, [pc, #524]	; (801bf0c <HAL_RCC_OscConfig+0x4d4>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d118      	bne.n	801bd3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801bd0a:	4b80      	ldr	r3, [pc, #512]	; (801bf0c <HAL_RCC_OscConfig+0x4d4>)
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	4a7f      	ldr	r2, [pc, #508]	; (801bf0c <HAL_RCC_OscConfig+0x4d4>)
 801bd10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bd14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bd16:	f7fc fb19 	bl	801834c <HAL_GetTick>
 801bd1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801bd1c:	e008      	b.n	801bd30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bd1e:	f7fc fb15 	bl	801834c <HAL_GetTick>
 801bd22:	4602      	mov	r2, r0
 801bd24:	693b      	ldr	r3, [r7, #16]
 801bd26:	1ad3      	subs	r3, r2, r3
 801bd28:	2b64      	cmp	r3, #100	; 0x64
 801bd2a:	d901      	bls.n	801bd30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801bd2c:	2303      	movs	r3, #3
 801bd2e:	e12a      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801bd30:	4b76      	ldr	r3, [pc, #472]	; (801bf0c <HAL_RCC_OscConfig+0x4d4>)
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d0f0      	beq.n	801bd1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	689b      	ldr	r3, [r3, #8]
 801bd40:	2b01      	cmp	r3, #1
 801bd42:	d106      	bne.n	801bd52 <HAL_RCC_OscConfig+0x31a>
 801bd44:	4b70      	ldr	r3, [pc, #448]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd48:	4a6f      	ldr	r2, [pc, #444]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd4a:	f043 0301 	orr.w	r3, r3, #1
 801bd4e:	6713      	str	r3, [r2, #112]	; 0x70
 801bd50:	e02d      	b.n	801bdae <HAL_RCC_OscConfig+0x376>
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	689b      	ldr	r3, [r3, #8]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d10c      	bne.n	801bd74 <HAL_RCC_OscConfig+0x33c>
 801bd5a:	4b6b      	ldr	r3, [pc, #428]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd5e:	4a6a      	ldr	r2, [pc, #424]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd60:	f023 0301 	bic.w	r3, r3, #1
 801bd64:	6713      	str	r3, [r2, #112]	; 0x70
 801bd66:	4b68      	ldr	r3, [pc, #416]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd6a:	4a67      	ldr	r2, [pc, #412]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd6c:	f023 0304 	bic.w	r3, r3, #4
 801bd70:	6713      	str	r3, [r2, #112]	; 0x70
 801bd72:	e01c      	b.n	801bdae <HAL_RCC_OscConfig+0x376>
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	689b      	ldr	r3, [r3, #8]
 801bd78:	2b05      	cmp	r3, #5
 801bd7a:	d10c      	bne.n	801bd96 <HAL_RCC_OscConfig+0x35e>
 801bd7c:	4b62      	ldr	r3, [pc, #392]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd80:	4a61      	ldr	r2, [pc, #388]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd82:	f043 0304 	orr.w	r3, r3, #4
 801bd86:	6713      	str	r3, [r2, #112]	; 0x70
 801bd88:	4b5f      	ldr	r3, [pc, #380]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd8c:	4a5e      	ldr	r2, [pc, #376]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd8e:	f043 0301 	orr.w	r3, r3, #1
 801bd92:	6713      	str	r3, [r2, #112]	; 0x70
 801bd94:	e00b      	b.n	801bdae <HAL_RCC_OscConfig+0x376>
 801bd96:	4b5c      	ldr	r3, [pc, #368]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd9a:	4a5b      	ldr	r2, [pc, #364]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bd9c:	f023 0301 	bic.w	r3, r3, #1
 801bda0:	6713      	str	r3, [r2, #112]	; 0x70
 801bda2:	4b59      	ldr	r3, [pc, #356]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bda6:	4a58      	ldr	r2, [pc, #352]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bda8:	f023 0304 	bic.w	r3, r3, #4
 801bdac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	689b      	ldr	r3, [r3, #8]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d015      	beq.n	801bde2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bdb6:	f7fc fac9 	bl	801834c <HAL_GetTick>
 801bdba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bdbc:	e00a      	b.n	801bdd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bdbe:	f7fc fac5 	bl	801834c <HAL_GetTick>
 801bdc2:	4602      	mov	r2, r0
 801bdc4:	693b      	ldr	r3, [r7, #16]
 801bdc6:	1ad3      	subs	r3, r2, r3
 801bdc8:	f241 3288 	movw	r2, #5000	; 0x1388
 801bdcc:	4293      	cmp	r3, r2
 801bdce:	d901      	bls.n	801bdd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801bdd0:	2303      	movs	r3, #3
 801bdd2:	e0d8      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bdd4:	4b4c      	ldr	r3, [pc, #304]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdd8:	f003 0302 	and.w	r3, r3, #2
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d0ee      	beq.n	801bdbe <HAL_RCC_OscConfig+0x386>
 801bde0:	e014      	b.n	801be0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bde2:	f7fc fab3 	bl	801834c <HAL_GetTick>
 801bde6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bde8:	e00a      	b.n	801be00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bdea:	f7fc faaf 	bl	801834c <HAL_GetTick>
 801bdee:	4602      	mov	r2, r0
 801bdf0:	693b      	ldr	r3, [r7, #16]
 801bdf2:	1ad3      	subs	r3, r2, r3
 801bdf4:	f241 3288 	movw	r2, #5000	; 0x1388
 801bdf8:	4293      	cmp	r3, r2
 801bdfa:	d901      	bls.n	801be00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801bdfc:	2303      	movs	r3, #3
 801bdfe:	e0c2      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be00:	4b41      	ldr	r3, [pc, #260]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be04:	f003 0302 	and.w	r3, r3, #2
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d1ee      	bne.n	801bdea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801be0c:	7dfb      	ldrb	r3, [r7, #23]
 801be0e:	2b01      	cmp	r3, #1
 801be10:	d105      	bne.n	801be1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801be12:	4b3d      	ldr	r3, [pc, #244]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be16:	4a3c      	ldr	r2, [pc, #240]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801be1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	699b      	ldr	r3, [r3, #24]
 801be22:	2b00      	cmp	r3, #0
 801be24:	f000 80ae 	beq.w	801bf84 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801be28:	4b37      	ldr	r3, [pc, #220]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be2a:	689b      	ldr	r3, [r3, #8]
 801be2c:	f003 030c 	and.w	r3, r3, #12
 801be30:	2b08      	cmp	r3, #8
 801be32:	d06d      	beq.n	801bf10 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	699b      	ldr	r3, [r3, #24]
 801be38:	2b02      	cmp	r3, #2
 801be3a:	d14b      	bne.n	801bed4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801be3c:	4b32      	ldr	r3, [pc, #200]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	4a31      	ldr	r2, [pc, #196]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801be46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801be48:	f7fc fa80 	bl	801834c <HAL_GetTick>
 801be4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801be4e:	e008      	b.n	801be62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801be50:	f7fc fa7c 	bl	801834c <HAL_GetTick>
 801be54:	4602      	mov	r2, r0
 801be56:	693b      	ldr	r3, [r7, #16]
 801be58:	1ad3      	subs	r3, r2, r3
 801be5a:	2b02      	cmp	r3, #2
 801be5c:	d901      	bls.n	801be62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801be5e:	2303      	movs	r3, #3
 801be60:	e091      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801be62:	4b29      	ldr	r3, [pc, #164]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d1f0      	bne.n	801be50 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	69da      	ldr	r2, [r3, #28]
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	6a1b      	ldr	r3, [r3, #32]
 801be76:	431a      	orrs	r2, r3
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be7c:	019b      	lsls	r3, r3, #6
 801be7e:	431a      	orrs	r2, r3
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be84:	085b      	lsrs	r3, r3, #1
 801be86:	3b01      	subs	r3, #1
 801be88:	041b      	lsls	r3, r3, #16
 801be8a:	431a      	orrs	r2, r3
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be90:	061b      	lsls	r3, r3, #24
 801be92:	431a      	orrs	r2, r3
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be98:	071b      	lsls	r3, r3, #28
 801be9a:	491b      	ldr	r1, [pc, #108]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801be9c:	4313      	orrs	r3, r2
 801be9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bea0:	4b19      	ldr	r3, [pc, #100]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	4a18      	ldr	r2, [pc, #96]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801beaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801beac:	f7fc fa4e 	bl	801834c <HAL_GetTick>
 801beb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801beb2:	e008      	b.n	801bec6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801beb4:	f7fc fa4a 	bl	801834c <HAL_GetTick>
 801beb8:	4602      	mov	r2, r0
 801beba:	693b      	ldr	r3, [r7, #16]
 801bebc:	1ad3      	subs	r3, r2, r3
 801bebe:	2b02      	cmp	r3, #2
 801bec0:	d901      	bls.n	801bec6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801bec2:	2303      	movs	r3, #3
 801bec4:	e05f      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bec6:	4b10      	ldr	r3, [pc, #64]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d0f0      	beq.n	801beb4 <HAL_RCC_OscConfig+0x47c>
 801bed2:	e057      	b.n	801bf84 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bed4:	4b0c      	ldr	r3, [pc, #48]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	4a0b      	ldr	r2, [pc, #44]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801beda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801bede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bee0:	f7fc fa34 	bl	801834c <HAL_GetTick>
 801bee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bee6:	e008      	b.n	801befa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bee8:	f7fc fa30 	bl	801834c <HAL_GetTick>
 801beec:	4602      	mov	r2, r0
 801beee:	693b      	ldr	r3, [r7, #16]
 801bef0:	1ad3      	subs	r3, r2, r3
 801bef2:	2b02      	cmp	r3, #2
 801bef4:	d901      	bls.n	801befa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801bef6:	2303      	movs	r3, #3
 801bef8:	e045      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801befa:	4b03      	ldr	r3, [pc, #12]	; (801bf08 <HAL_RCC_OscConfig+0x4d0>)
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d1f0      	bne.n	801bee8 <HAL_RCC_OscConfig+0x4b0>
 801bf06:	e03d      	b.n	801bf84 <HAL_RCC_OscConfig+0x54c>
 801bf08:	40023800 	.word	0x40023800
 801bf0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801bf10:	4b1f      	ldr	r3, [pc, #124]	; (801bf90 <HAL_RCC_OscConfig+0x558>)
 801bf12:	685b      	ldr	r3, [r3, #4]
 801bf14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	699b      	ldr	r3, [r3, #24]
 801bf1a:	2b01      	cmp	r3, #1
 801bf1c:	d030      	beq.n	801bf80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bf28:	429a      	cmp	r2, r3
 801bf2a:	d129      	bne.n	801bf80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bf36:	429a      	cmp	r2, r3
 801bf38:	d122      	bne.n	801bf80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801bf3a:	68fa      	ldr	r2, [r7, #12]
 801bf3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801bf40:	4013      	ands	r3, r2
 801bf42:	687a      	ldr	r2, [r7, #4]
 801bf44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801bf46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801bf48:	4293      	cmp	r3, r2
 801bf4a:	d119      	bne.n	801bf80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf56:	085b      	lsrs	r3, r3, #1
 801bf58:	3b01      	subs	r3, #1
 801bf5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	d10f      	bne.n	801bf80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801bf6c:	429a      	cmp	r2, r3
 801bf6e:	d107      	bne.n	801bf80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801bf70:	68fb      	ldr	r3, [r7, #12]
 801bf72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf7a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bf7c:	429a      	cmp	r2, r3
 801bf7e:	d001      	beq.n	801bf84 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801bf80:	2301      	movs	r3, #1
 801bf82:	e000      	b.n	801bf86 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801bf84:	2300      	movs	r3, #0
}
 801bf86:	4618      	mov	r0, r3
 801bf88:	3718      	adds	r7, #24
 801bf8a:	46bd      	mov	sp, r7
 801bf8c:	bd80      	pop	{r7, pc}
 801bf8e:	bf00      	nop
 801bf90:	40023800 	.word	0x40023800

0801bf94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b084      	sub	sp, #16
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
 801bf9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d101      	bne.n	801bfac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801bfa8:	2301      	movs	r3, #1
 801bfaa:	e0d0      	b.n	801c14e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801bfac:	4b6a      	ldr	r3, [pc, #424]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	f003 030f 	and.w	r3, r3, #15
 801bfb4:	683a      	ldr	r2, [r7, #0]
 801bfb6:	429a      	cmp	r2, r3
 801bfb8:	d910      	bls.n	801bfdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bfba:	4b67      	ldr	r3, [pc, #412]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	f023 020f 	bic.w	r2, r3, #15
 801bfc2:	4965      	ldr	r1, [pc, #404]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801bfc4:	683b      	ldr	r3, [r7, #0]
 801bfc6:	4313      	orrs	r3, r2
 801bfc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bfca:	4b63      	ldr	r3, [pc, #396]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	f003 030f 	and.w	r3, r3, #15
 801bfd2:	683a      	ldr	r2, [r7, #0]
 801bfd4:	429a      	cmp	r2, r3
 801bfd6:	d001      	beq.n	801bfdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801bfd8:	2301      	movs	r3, #1
 801bfda:	e0b8      	b.n	801c14e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	f003 0302 	and.w	r3, r3, #2
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d020      	beq.n	801c02a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	f003 0304 	and.w	r3, r3, #4
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d005      	beq.n	801c000 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801bff4:	4b59      	ldr	r3, [pc, #356]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801bff6:	689b      	ldr	r3, [r3, #8]
 801bff8:	4a58      	ldr	r2, [pc, #352]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801bffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801bffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	f003 0308 	and.w	r3, r3, #8
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d005      	beq.n	801c018 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801c00c:	4b53      	ldr	r3, [pc, #332]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c00e:	689b      	ldr	r3, [r3, #8]
 801c010:	4a52      	ldr	r2, [pc, #328]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801c016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c018:	4b50      	ldr	r3, [pc, #320]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c01a:	689b      	ldr	r3, [r3, #8]
 801c01c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	689b      	ldr	r3, [r3, #8]
 801c024:	494d      	ldr	r1, [pc, #308]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c026:	4313      	orrs	r3, r2
 801c028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	f003 0301 	and.w	r3, r3, #1
 801c032:	2b00      	cmp	r3, #0
 801c034:	d040      	beq.n	801c0b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	685b      	ldr	r3, [r3, #4]
 801c03a:	2b01      	cmp	r3, #1
 801c03c:	d107      	bne.n	801c04e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c03e:	4b47      	ldr	r3, [pc, #284]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c046:	2b00      	cmp	r3, #0
 801c048:	d115      	bne.n	801c076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801c04a:	2301      	movs	r3, #1
 801c04c:	e07f      	b.n	801c14e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	685b      	ldr	r3, [r3, #4]
 801c052:	2b02      	cmp	r3, #2
 801c054:	d107      	bne.n	801c066 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c056:	4b41      	ldr	r3, [pc, #260]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d109      	bne.n	801c076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801c062:	2301      	movs	r3, #1
 801c064:	e073      	b.n	801c14e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c066:	4b3d      	ldr	r3, [pc, #244]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	f003 0302 	and.w	r3, r3, #2
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d101      	bne.n	801c076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801c072:	2301      	movs	r3, #1
 801c074:	e06b      	b.n	801c14e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801c076:	4b39      	ldr	r3, [pc, #228]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c078:	689b      	ldr	r3, [r3, #8]
 801c07a:	f023 0203 	bic.w	r2, r3, #3
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	685b      	ldr	r3, [r3, #4]
 801c082:	4936      	ldr	r1, [pc, #216]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c084:	4313      	orrs	r3, r2
 801c086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c088:	f7fc f960 	bl	801834c <HAL_GetTick>
 801c08c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c08e:	e00a      	b.n	801c0a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c090:	f7fc f95c 	bl	801834c <HAL_GetTick>
 801c094:	4602      	mov	r2, r0
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	1ad3      	subs	r3, r2, r3
 801c09a:	f241 3288 	movw	r2, #5000	; 0x1388
 801c09e:	4293      	cmp	r3, r2
 801c0a0:	d901      	bls.n	801c0a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801c0a2:	2303      	movs	r3, #3
 801c0a4:	e053      	b.n	801c14e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c0a6:	4b2d      	ldr	r3, [pc, #180]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c0a8:	689b      	ldr	r3, [r3, #8]
 801c0aa:	f003 020c 	and.w	r2, r3, #12
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	685b      	ldr	r3, [r3, #4]
 801c0b2:	009b      	lsls	r3, r3, #2
 801c0b4:	429a      	cmp	r2, r3
 801c0b6:	d1eb      	bne.n	801c090 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c0b8:	4b27      	ldr	r3, [pc, #156]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	f003 030f 	and.w	r3, r3, #15
 801c0c0:	683a      	ldr	r2, [r7, #0]
 801c0c2:	429a      	cmp	r2, r3
 801c0c4:	d210      	bcs.n	801c0e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c0c6:	4b24      	ldr	r3, [pc, #144]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	f023 020f 	bic.w	r2, r3, #15
 801c0ce:	4922      	ldr	r1, [pc, #136]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801c0d0:	683b      	ldr	r3, [r7, #0]
 801c0d2:	4313      	orrs	r3, r2
 801c0d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c0d6:	4b20      	ldr	r3, [pc, #128]	; (801c158 <HAL_RCC_ClockConfig+0x1c4>)
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	f003 030f 	and.w	r3, r3, #15
 801c0de:	683a      	ldr	r2, [r7, #0]
 801c0e0:	429a      	cmp	r2, r3
 801c0e2:	d001      	beq.n	801c0e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801c0e4:	2301      	movs	r3, #1
 801c0e6:	e032      	b.n	801c14e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	f003 0304 	and.w	r3, r3, #4
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d008      	beq.n	801c106 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c0f4:	4b19      	ldr	r3, [pc, #100]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c0f6:	689b      	ldr	r3, [r3, #8]
 801c0f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	68db      	ldr	r3, [r3, #12]
 801c100:	4916      	ldr	r1, [pc, #88]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c102:	4313      	orrs	r3, r2
 801c104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	f003 0308 	and.w	r3, r3, #8
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d009      	beq.n	801c126 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801c112:	4b12      	ldr	r3, [pc, #72]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c114:	689b      	ldr	r3, [r3, #8]
 801c116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	691b      	ldr	r3, [r3, #16]
 801c11e:	00db      	lsls	r3, r3, #3
 801c120:	490e      	ldr	r1, [pc, #56]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c122:	4313      	orrs	r3, r2
 801c124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801c126:	f000 f821 	bl	801c16c <HAL_RCC_GetSysClockFreq>
 801c12a:	4602      	mov	r2, r0
 801c12c:	4b0b      	ldr	r3, [pc, #44]	; (801c15c <HAL_RCC_ClockConfig+0x1c8>)
 801c12e:	689b      	ldr	r3, [r3, #8]
 801c130:	091b      	lsrs	r3, r3, #4
 801c132:	f003 030f 	and.w	r3, r3, #15
 801c136:	490a      	ldr	r1, [pc, #40]	; (801c160 <HAL_RCC_ClockConfig+0x1cc>)
 801c138:	5ccb      	ldrb	r3, [r1, r3]
 801c13a:	fa22 f303 	lsr.w	r3, r2, r3
 801c13e:	4a09      	ldr	r2, [pc, #36]	; (801c164 <HAL_RCC_ClockConfig+0x1d0>)
 801c140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801c142:	4b09      	ldr	r3, [pc, #36]	; (801c168 <HAL_RCC_ClockConfig+0x1d4>)
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	4618      	mov	r0, r3
 801c148:	f7fc f8bc 	bl	80182c4 <HAL_InitTick>

  return HAL_OK;
 801c14c:	2300      	movs	r3, #0
}
 801c14e:	4618      	mov	r0, r3
 801c150:	3710      	adds	r7, #16
 801c152:	46bd      	mov	sp, r7
 801c154:	bd80      	pop	{r7, pc}
 801c156:	bf00      	nop
 801c158:	40023c00 	.word	0x40023c00
 801c15c:	40023800 	.word	0x40023800
 801c160:	0802c274 	.word	0x0802c274
 801c164:	2000011c 	.word	0x2000011c
 801c168:	20000120 	.word	0x20000120

0801c16c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c16c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c170:	b090      	sub	sp, #64	; 0x40
 801c172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801c174:	2300      	movs	r3, #0
 801c176:	637b      	str	r3, [r7, #52]	; 0x34
 801c178:	2300      	movs	r3, #0
 801c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c17c:	2300      	movs	r3, #0
 801c17e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801c180:	2300      	movs	r3, #0
 801c182:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c184:	4b59      	ldr	r3, [pc, #356]	; (801c2ec <HAL_RCC_GetSysClockFreq+0x180>)
 801c186:	689b      	ldr	r3, [r3, #8]
 801c188:	f003 030c 	and.w	r3, r3, #12
 801c18c:	2b08      	cmp	r3, #8
 801c18e:	d00d      	beq.n	801c1ac <HAL_RCC_GetSysClockFreq+0x40>
 801c190:	2b08      	cmp	r3, #8
 801c192:	f200 80a1 	bhi.w	801c2d8 <HAL_RCC_GetSysClockFreq+0x16c>
 801c196:	2b00      	cmp	r3, #0
 801c198:	d002      	beq.n	801c1a0 <HAL_RCC_GetSysClockFreq+0x34>
 801c19a:	2b04      	cmp	r3, #4
 801c19c:	d003      	beq.n	801c1a6 <HAL_RCC_GetSysClockFreq+0x3a>
 801c19e:	e09b      	b.n	801c2d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801c1a0:	4b53      	ldr	r3, [pc, #332]	; (801c2f0 <HAL_RCC_GetSysClockFreq+0x184>)
 801c1a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c1a4:	e09b      	b.n	801c2de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801c1a6:	4b53      	ldr	r3, [pc, #332]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x188>)
 801c1a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c1aa:	e098      	b.n	801c2de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801c1ac:	4b4f      	ldr	r3, [pc, #316]	; (801c2ec <HAL_RCC_GetSysClockFreq+0x180>)
 801c1ae:	685b      	ldr	r3, [r3, #4]
 801c1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c1b4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801c1b6:	4b4d      	ldr	r3, [pc, #308]	; (801c2ec <HAL_RCC_GetSysClockFreq+0x180>)
 801c1b8:	685b      	ldr	r3, [r3, #4]
 801c1ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d028      	beq.n	801c214 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c1c2:	4b4a      	ldr	r3, [pc, #296]	; (801c2ec <HAL_RCC_GetSysClockFreq+0x180>)
 801c1c4:	685b      	ldr	r3, [r3, #4]
 801c1c6:	099b      	lsrs	r3, r3, #6
 801c1c8:	2200      	movs	r2, #0
 801c1ca:	623b      	str	r3, [r7, #32]
 801c1cc:	627a      	str	r2, [r7, #36]	; 0x24
 801c1ce:	6a3b      	ldr	r3, [r7, #32]
 801c1d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801c1d4:	2100      	movs	r1, #0
 801c1d6:	4b47      	ldr	r3, [pc, #284]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x188>)
 801c1d8:	fb03 f201 	mul.w	r2, r3, r1
 801c1dc:	2300      	movs	r3, #0
 801c1de:	fb00 f303 	mul.w	r3, r0, r3
 801c1e2:	4413      	add	r3, r2
 801c1e4:	4a43      	ldr	r2, [pc, #268]	; (801c2f4 <HAL_RCC_GetSysClockFreq+0x188>)
 801c1e6:	fba0 1202 	umull	r1, r2, r0, r2
 801c1ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c1ec:	460a      	mov	r2, r1
 801c1ee:	62ba      	str	r2, [r7, #40]	; 0x28
 801c1f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c1f2:	4413      	add	r3, r2
 801c1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	61bb      	str	r3, [r7, #24]
 801c1fc:	61fa      	str	r2, [r7, #28]
 801c1fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c202:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c206:	f7e4 f883 	bl	8000310 <__aeabi_uldivmod>
 801c20a:	4602      	mov	r2, r0
 801c20c:	460b      	mov	r3, r1
 801c20e:	4613      	mov	r3, r2
 801c210:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c212:	e053      	b.n	801c2bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c214:	4b35      	ldr	r3, [pc, #212]	; (801c2ec <HAL_RCC_GetSysClockFreq+0x180>)
 801c216:	685b      	ldr	r3, [r3, #4]
 801c218:	099b      	lsrs	r3, r3, #6
 801c21a:	2200      	movs	r2, #0
 801c21c:	613b      	str	r3, [r7, #16]
 801c21e:	617a      	str	r2, [r7, #20]
 801c220:	693b      	ldr	r3, [r7, #16]
 801c222:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801c226:	f04f 0b00 	mov.w	fp, #0
 801c22a:	4652      	mov	r2, sl
 801c22c:	465b      	mov	r3, fp
 801c22e:	f04f 0000 	mov.w	r0, #0
 801c232:	f04f 0100 	mov.w	r1, #0
 801c236:	0159      	lsls	r1, r3, #5
 801c238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801c23c:	0150      	lsls	r0, r2, #5
 801c23e:	4602      	mov	r2, r0
 801c240:	460b      	mov	r3, r1
 801c242:	ebb2 080a 	subs.w	r8, r2, sl
 801c246:	eb63 090b 	sbc.w	r9, r3, fp
 801c24a:	f04f 0200 	mov.w	r2, #0
 801c24e:	f04f 0300 	mov.w	r3, #0
 801c252:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801c256:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801c25a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801c25e:	ebb2 0408 	subs.w	r4, r2, r8
 801c262:	eb63 0509 	sbc.w	r5, r3, r9
 801c266:	f04f 0200 	mov.w	r2, #0
 801c26a:	f04f 0300 	mov.w	r3, #0
 801c26e:	00eb      	lsls	r3, r5, #3
 801c270:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801c274:	00e2      	lsls	r2, r4, #3
 801c276:	4614      	mov	r4, r2
 801c278:	461d      	mov	r5, r3
 801c27a:	eb14 030a 	adds.w	r3, r4, sl
 801c27e:	603b      	str	r3, [r7, #0]
 801c280:	eb45 030b 	adc.w	r3, r5, fp
 801c284:	607b      	str	r3, [r7, #4]
 801c286:	f04f 0200 	mov.w	r2, #0
 801c28a:	f04f 0300 	mov.w	r3, #0
 801c28e:	e9d7 4500 	ldrd	r4, r5, [r7]
 801c292:	4629      	mov	r1, r5
 801c294:	028b      	lsls	r3, r1, #10
 801c296:	4621      	mov	r1, r4
 801c298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801c29c:	4621      	mov	r1, r4
 801c29e:	028a      	lsls	r2, r1, #10
 801c2a0:	4610      	mov	r0, r2
 801c2a2:	4619      	mov	r1, r3
 801c2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2a6:	2200      	movs	r2, #0
 801c2a8:	60bb      	str	r3, [r7, #8]
 801c2aa:	60fa      	str	r2, [r7, #12]
 801c2ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c2b0:	f7e4 f82e 	bl	8000310 <__aeabi_uldivmod>
 801c2b4:	4602      	mov	r2, r0
 801c2b6:	460b      	mov	r3, r1
 801c2b8:	4613      	mov	r3, r2
 801c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801c2bc:	4b0b      	ldr	r3, [pc, #44]	; (801c2ec <HAL_RCC_GetSysClockFreq+0x180>)
 801c2be:	685b      	ldr	r3, [r3, #4]
 801c2c0:	0c1b      	lsrs	r3, r3, #16
 801c2c2:	f003 0303 	and.w	r3, r3, #3
 801c2c6:	3301      	adds	r3, #1
 801c2c8:	005b      	lsls	r3, r3, #1
 801c2ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801c2cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801c2d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c2d6:	e002      	b.n	801c2de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801c2d8:	4b05      	ldr	r3, [pc, #20]	; (801c2f0 <HAL_RCC_GetSysClockFreq+0x184>)
 801c2da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c2dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 801c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	3740      	adds	r7, #64	; 0x40
 801c2e4:	46bd      	mov	sp, r7
 801c2e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c2ea:	bf00      	nop
 801c2ec:	40023800 	.word	0x40023800
 801c2f0:	00f42400 	.word	0x00f42400
 801c2f4:	00b71b00 	.word	0x00b71b00

0801c2f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c2f8:	b480      	push	{r7}
 801c2fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c2fc:	4b03      	ldr	r3, [pc, #12]	; (801c30c <HAL_RCC_GetHCLKFreq+0x14>)
 801c2fe:	681b      	ldr	r3, [r3, #0]
}
 801c300:	4618      	mov	r0, r3
 801c302:	46bd      	mov	sp, r7
 801c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c308:	4770      	bx	lr
 801c30a:	bf00      	nop
 801c30c:	2000011c 	.word	0x2000011c

0801c310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c310:	b580      	push	{r7, lr}
 801c312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801c314:	f7ff fff0 	bl	801c2f8 <HAL_RCC_GetHCLKFreq>
 801c318:	4602      	mov	r2, r0
 801c31a:	4b05      	ldr	r3, [pc, #20]	; (801c330 <HAL_RCC_GetPCLK1Freq+0x20>)
 801c31c:	689b      	ldr	r3, [r3, #8]
 801c31e:	0a9b      	lsrs	r3, r3, #10
 801c320:	f003 0307 	and.w	r3, r3, #7
 801c324:	4903      	ldr	r1, [pc, #12]	; (801c334 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c326:	5ccb      	ldrb	r3, [r1, r3]
 801c328:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c32c:	4618      	mov	r0, r3
 801c32e:	bd80      	pop	{r7, pc}
 801c330:	40023800 	.word	0x40023800
 801c334:	0802c284 	.word	0x0802c284

0801c338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801c33c:	f7ff ffdc 	bl	801c2f8 <HAL_RCC_GetHCLKFreq>
 801c340:	4602      	mov	r2, r0
 801c342:	4b05      	ldr	r3, [pc, #20]	; (801c358 <HAL_RCC_GetPCLK2Freq+0x20>)
 801c344:	689b      	ldr	r3, [r3, #8]
 801c346:	0b5b      	lsrs	r3, r3, #13
 801c348:	f003 0307 	and.w	r3, r3, #7
 801c34c:	4903      	ldr	r1, [pc, #12]	; (801c35c <HAL_RCC_GetPCLK2Freq+0x24>)
 801c34e:	5ccb      	ldrb	r3, [r1, r3]
 801c350:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c354:	4618      	mov	r0, r3
 801c356:	bd80      	pop	{r7, pc}
 801c358:	40023800 	.word	0x40023800
 801c35c:	0802c284 	.word	0x0802c284

0801c360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b088      	sub	sp, #32
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801c368:	2300      	movs	r3, #0
 801c36a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801c36c:	2300      	movs	r3, #0
 801c36e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801c370:	2300      	movs	r3, #0
 801c372:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801c374:	2300      	movs	r3, #0
 801c376:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801c378:	2300      	movs	r3, #0
 801c37a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	f003 0301 	and.w	r3, r3, #1
 801c384:	2b00      	cmp	r3, #0
 801c386:	d012      	beq.n	801c3ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801c388:	4b69      	ldr	r3, [pc, #420]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c38a:	689b      	ldr	r3, [r3, #8]
 801c38c:	4a68      	ldr	r2, [pc, #416]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c38e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801c392:	6093      	str	r3, [r2, #8]
 801c394:	4b66      	ldr	r3, [pc, #408]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c396:	689a      	ldr	r2, [r3, #8]
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c39c:	4964      	ldr	r1, [pc, #400]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c39e:	4313      	orrs	r3, r2
 801c3a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d101      	bne.n	801c3ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801c3aa:	2301      	movs	r3, #1
 801c3ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d017      	beq.n	801c3ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c3ba:	4b5d      	ldr	r3, [pc, #372]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c3c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c3c8:	4959      	ldr	r1, [pc, #356]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c3ca:	4313      	orrs	r3, r2
 801c3cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c3d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c3d8:	d101      	bne.n	801c3de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801c3da:	2301      	movs	r3, #1
 801c3dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d101      	bne.n	801c3ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801c3e6:	2301      	movs	r3, #1
 801c3e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d017      	beq.n	801c426 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801c3f6:	4b4e      	ldr	r3, [pc, #312]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c3f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c3fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c404:	494a      	ldr	r1, [pc, #296]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c406:	4313      	orrs	r3, r2
 801c408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c414:	d101      	bne.n	801c41a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801c416:	2301      	movs	r3, #1
 801c418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d101      	bne.n	801c426 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801c422:	2301      	movs	r3, #1
 801c424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d001      	beq.n	801c436 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801c432:	2301      	movs	r3, #1
 801c434:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	f003 0320 	and.w	r3, r3, #32
 801c43e:	2b00      	cmp	r3, #0
 801c440:	f000 808b 	beq.w	801c55a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801c444:	4b3a      	ldr	r3, [pc, #232]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c448:	4a39      	ldr	r2, [pc, #228]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c44a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c44e:	6413      	str	r3, [r2, #64]	; 0x40
 801c450:	4b37      	ldr	r3, [pc, #220]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c458:	60bb      	str	r3, [r7, #8]
 801c45a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c45c:	4b35      	ldr	r3, [pc, #212]	; (801c534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	4a34      	ldr	r2, [pc, #208]	; (801c534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c468:	f7fb ff70 	bl	801834c <HAL_GetTick>
 801c46c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801c46e:	e008      	b.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c470:	f7fb ff6c 	bl	801834c <HAL_GetTick>
 801c474:	4602      	mov	r2, r0
 801c476:	697b      	ldr	r3, [r7, #20]
 801c478:	1ad3      	subs	r3, r2, r3
 801c47a:	2b64      	cmp	r3, #100	; 0x64
 801c47c:	d901      	bls.n	801c482 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801c47e:	2303      	movs	r3, #3
 801c480:	e38f      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801c482:	4b2c      	ldr	r3, [pc, #176]	; (801c534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d0f0      	beq.n	801c470 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801c48e:	4b28      	ldr	r3, [pc, #160]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c496:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801c498:	693b      	ldr	r3, [r7, #16]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d035      	beq.n	801c50a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c4a6:	693a      	ldr	r2, [r7, #16]
 801c4a8:	429a      	cmp	r2, r3
 801c4aa:	d02e      	beq.n	801c50a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c4ac:	4b20      	ldr	r3, [pc, #128]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c4b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801c4b6:	4b1e      	ldr	r3, [pc, #120]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4ba:	4a1d      	ldr	r2, [pc, #116]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c4bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c4c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801c4c2:	4b1b      	ldr	r3, [pc, #108]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4c6:	4a1a      	ldr	r2, [pc, #104]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c4c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c4cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801c4ce:	4a18      	ldr	r2, [pc, #96]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c4d0:	693b      	ldr	r3, [r7, #16]
 801c4d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801c4d4:	4b16      	ldr	r3, [pc, #88]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4d8:	f003 0301 	and.w	r3, r3, #1
 801c4dc:	2b01      	cmp	r3, #1
 801c4de:	d114      	bne.n	801c50a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4e0:	f7fb ff34 	bl	801834c <HAL_GetTick>
 801c4e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c4e6:	e00a      	b.n	801c4fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c4e8:	f7fb ff30 	bl	801834c <HAL_GetTick>
 801c4ec:	4602      	mov	r2, r0
 801c4ee:	697b      	ldr	r3, [r7, #20]
 801c4f0:	1ad3      	subs	r3, r2, r3
 801c4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 801c4f6:	4293      	cmp	r3, r2
 801c4f8:	d901      	bls.n	801c4fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801c4fa:	2303      	movs	r3, #3
 801c4fc:	e351      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c4fe:	4b0c      	ldr	r3, [pc, #48]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c502:	f003 0302 	and.w	r3, r3, #2
 801c506:	2b00      	cmp	r3, #0
 801c508:	d0ee      	beq.n	801c4e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c50e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c516:	d111      	bne.n	801c53c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801c518:	4b05      	ldr	r3, [pc, #20]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c51a:	689b      	ldr	r3, [r3, #8]
 801c51c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c524:	4b04      	ldr	r3, [pc, #16]	; (801c538 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801c526:	400b      	ands	r3, r1
 801c528:	4901      	ldr	r1, [pc, #4]	; (801c530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c52a:	4313      	orrs	r3, r2
 801c52c:	608b      	str	r3, [r1, #8]
 801c52e:	e00b      	b.n	801c548 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801c530:	40023800 	.word	0x40023800
 801c534:	40007000 	.word	0x40007000
 801c538:	0ffffcff 	.word	0x0ffffcff
 801c53c:	4bac      	ldr	r3, [pc, #688]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c53e:	689b      	ldr	r3, [r3, #8]
 801c540:	4aab      	ldr	r2, [pc, #684]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c542:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801c546:	6093      	str	r3, [r2, #8]
 801c548:	4ba9      	ldr	r3, [pc, #676]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c54a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c554:	49a6      	ldr	r1, [pc, #664]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c556:	4313      	orrs	r3, r2
 801c558:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	f003 0310 	and.w	r3, r3, #16
 801c562:	2b00      	cmp	r3, #0
 801c564:	d010      	beq.n	801c588 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801c566:	4ba2      	ldr	r3, [pc, #648]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c56c:	4aa0      	ldr	r2, [pc, #640]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c56e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c572:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801c576:	4b9e      	ldr	r3, [pc, #632]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c578:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c580:	499b      	ldr	r1, [pc, #620]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c582:	4313      	orrs	r3, r2
 801c584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c590:	2b00      	cmp	r3, #0
 801c592:	d00a      	beq.n	801c5aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c594:	4b96      	ldr	r3, [pc, #600]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c59a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c5a2:	4993      	ldr	r1, [pc, #588]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5a4:	4313      	orrs	r3, r2
 801c5a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d00a      	beq.n	801c5cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801c5b6:	4b8e      	ldr	r3, [pc, #568]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c5c4:	498a      	ldr	r1, [pc, #552]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5c6:	4313      	orrs	r3, r2
 801c5c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d00a      	beq.n	801c5ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c5d8:	4b85      	ldr	r3, [pc, #532]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5e6:	4982      	ldr	r1, [pc, #520]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5e8:	4313      	orrs	r3, r2
 801c5ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d00a      	beq.n	801c610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801c5fa:	4b7d      	ldr	r3, [pc, #500]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c600:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c608:	4979      	ldr	r1, [pc, #484]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c60a:	4313      	orrs	r3, r2
 801c60c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d00a      	beq.n	801c632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c61c:	4b74      	ldr	r3, [pc, #464]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c622:	f023 0203 	bic.w	r2, r3, #3
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c62a:	4971      	ldr	r1, [pc, #452]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c62c:	4313      	orrs	r3, r2
 801c62e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d00a      	beq.n	801c654 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c63e:	4b6c      	ldr	r3, [pc, #432]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c644:	f023 020c 	bic.w	r2, r3, #12
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c64c:	4968      	ldr	r1, [pc, #416]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c64e:	4313      	orrs	r3, r2
 801c650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d00a      	beq.n	801c676 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801c660:	4b63      	ldr	r3, [pc, #396]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c666:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c66e:	4960      	ldr	r1, [pc, #384]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c670:	4313      	orrs	r3, r2
 801c672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d00a      	beq.n	801c698 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801c682:	4b5b      	ldr	r3, [pc, #364]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c688:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c690:	4957      	ldr	r1, [pc, #348]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c692:	4313      	orrs	r3, r2
 801c694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d00a      	beq.n	801c6ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801c6a4:	4b52      	ldr	r3, [pc, #328]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c6a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c6b2:	494f      	ldr	r1, [pc, #316]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c6b4:	4313      	orrs	r3, r2
 801c6b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d00a      	beq.n	801c6dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801c6c6:	4b4a      	ldr	r3, [pc, #296]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c6d4:	4946      	ldr	r1, [pc, #280]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c6d6:	4313      	orrs	r3, r2
 801c6d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d00a      	beq.n	801c6fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801c6e8:	4b41      	ldr	r3, [pc, #260]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c6f6:	493e      	ldr	r1, [pc, #248]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c6f8:	4313      	orrs	r3, r2
 801c6fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c706:	2b00      	cmp	r3, #0
 801c708:	d00a      	beq.n	801c720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801c70a:	4b39      	ldr	r3, [pc, #228]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c718:	4935      	ldr	r1, [pc, #212]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c71a:	4313      	orrs	r3, r2
 801c71c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d00a      	beq.n	801c742 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801c72c:	4b30      	ldr	r3, [pc, #192]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c732:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c73a:	492d      	ldr	r1, [pc, #180]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c73c:	4313      	orrs	r3, r2
 801c73e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d011      	beq.n	801c772 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801c74e:	4b28      	ldr	r3, [pc, #160]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c754:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c75c:	4924      	ldr	r1, [pc, #144]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c75e:	4313      	orrs	r3, r2
 801c760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801c76c:	d101      	bne.n	801c772 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801c76e:	2301      	movs	r3, #1
 801c770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	f003 0308 	and.w	r3, r3, #8
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d001      	beq.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801c77e:	2301      	movs	r3, #1
 801c780:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d00a      	beq.n	801c7a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c78e:	4b18      	ldr	r3, [pc, #96]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c794:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c79c:	4914      	ldr	r1, [pc, #80]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c79e:	4313      	orrs	r3, r2
 801c7a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d00b      	beq.n	801c7c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801c7b0:	4b0f      	ldr	r3, [pc, #60]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c7b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c7b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c7c0:	490b      	ldr	r1, [pc, #44]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c7c2:	4313      	orrs	r3, r2
 801c7c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d00f      	beq.n	801c7f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801c7d4:	4b06      	ldr	r3, [pc, #24]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c7da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c7e4:	4902      	ldr	r1, [pc, #8]	; (801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801c7e6:	4313      	orrs	r3, r2
 801c7e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801c7ec:	e002      	b.n	801c7f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801c7ee:	bf00      	nop
 801c7f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d00b      	beq.n	801c818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801c800:	4b8a      	ldr	r3, [pc, #552]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c806:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c810:	4986      	ldr	r1, [pc, #536]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c812:	4313      	orrs	r3, r2
 801c814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c820:	2b00      	cmp	r3, #0
 801c822:	d00b      	beq.n	801c83c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801c824:	4b81      	ldr	r3, [pc, #516]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c82a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c834:	497d      	ldr	r1, [pc, #500]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c836:	4313      	orrs	r3, r2
 801c838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801c83c:	69fb      	ldr	r3, [r7, #28]
 801c83e:	2b01      	cmp	r3, #1
 801c840:	d006      	beq.n	801c850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	f000 80d6 	beq.w	801c9fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801c850:	4b76      	ldr	r3, [pc, #472]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	4a75      	ldr	r2, [pc, #468]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c856:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801c85a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c85c:	f7fb fd76 	bl	801834c <HAL_GetTick>
 801c860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801c862:	e008      	b.n	801c876 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801c864:	f7fb fd72 	bl	801834c <HAL_GetTick>
 801c868:	4602      	mov	r2, r0
 801c86a:	697b      	ldr	r3, [r7, #20]
 801c86c:	1ad3      	subs	r3, r2, r3
 801c86e:	2b64      	cmp	r3, #100	; 0x64
 801c870:	d901      	bls.n	801c876 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c872:	2303      	movs	r3, #3
 801c874:	e195      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801c876:	4b6d      	ldr	r3, [pc, #436]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d1f0      	bne.n	801c864 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	f003 0301 	and.w	r3, r3, #1
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d021      	beq.n	801c8d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c892:	2b00      	cmp	r3, #0
 801c894:	d11d      	bne.n	801c8d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801c896:	4b65      	ldr	r3, [pc, #404]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c89c:	0c1b      	lsrs	r3, r3, #16
 801c89e:	f003 0303 	and.w	r3, r3, #3
 801c8a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801c8a4:	4b61      	ldr	r3, [pc, #388]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c8a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c8aa:	0e1b      	lsrs	r3, r3, #24
 801c8ac:	f003 030f 	and.w	r3, r3, #15
 801c8b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	685b      	ldr	r3, [r3, #4]
 801c8b6:	019a      	lsls	r2, r3, #6
 801c8b8:	693b      	ldr	r3, [r7, #16]
 801c8ba:	041b      	lsls	r3, r3, #16
 801c8bc:	431a      	orrs	r2, r3
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	061b      	lsls	r3, r3, #24
 801c8c2:	431a      	orrs	r2, r3
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	689b      	ldr	r3, [r3, #8]
 801c8c8:	071b      	lsls	r3, r3, #28
 801c8ca:	4958      	ldr	r1, [pc, #352]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c8cc:	4313      	orrs	r3, r2
 801c8ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d004      	beq.n	801c8e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c8e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c8e6:	d00a      	beq.n	801c8fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d02e      	beq.n	801c952 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c8fc:	d129      	bne.n	801c952 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801c8fe:	4b4b      	ldr	r3, [pc, #300]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c904:	0c1b      	lsrs	r3, r3, #16
 801c906:	f003 0303 	and.w	r3, r3, #3
 801c90a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801c90c:	4b47      	ldr	r3, [pc, #284]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c912:	0f1b      	lsrs	r3, r3, #28
 801c914:	f003 0307 	and.w	r3, r3, #7
 801c918:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	685b      	ldr	r3, [r3, #4]
 801c91e:	019a      	lsls	r2, r3, #6
 801c920:	693b      	ldr	r3, [r7, #16]
 801c922:	041b      	lsls	r3, r3, #16
 801c924:	431a      	orrs	r2, r3
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	68db      	ldr	r3, [r3, #12]
 801c92a:	061b      	lsls	r3, r3, #24
 801c92c:	431a      	orrs	r2, r3
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	071b      	lsls	r3, r3, #28
 801c932:	493e      	ldr	r1, [pc, #248]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c934:	4313      	orrs	r3, r2
 801c936:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801c93a:	4b3c      	ldr	r3, [pc, #240]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c940:	f023 021f 	bic.w	r2, r3, #31
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c948:	3b01      	subs	r3, #1
 801c94a:	4938      	ldr	r1, [pc, #224]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c94c:	4313      	orrs	r3, r2
 801c94e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d01d      	beq.n	801c99a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801c95e:	4b33      	ldr	r3, [pc, #204]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c964:	0e1b      	lsrs	r3, r3, #24
 801c966:	f003 030f 	and.w	r3, r3, #15
 801c96a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801c96c:	4b2f      	ldr	r3, [pc, #188]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c96e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c972:	0f1b      	lsrs	r3, r3, #28
 801c974:	f003 0307 	and.w	r3, r3, #7
 801c978:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	685b      	ldr	r3, [r3, #4]
 801c97e:	019a      	lsls	r2, r3, #6
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	691b      	ldr	r3, [r3, #16]
 801c984:	041b      	lsls	r3, r3, #16
 801c986:	431a      	orrs	r2, r3
 801c988:	693b      	ldr	r3, [r7, #16]
 801c98a:	061b      	lsls	r3, r3, #24
 801c98c:	431a      	orrs	r2, r3
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	071b      	lsls	r3, r3, #28
 801c992:	4926      	ldr	r1, [pc, #152]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c994:	4313      	orrs	r3, r2
 801c996:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d011      	beq.n	801c9ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	685b      	ldr	r3, [r3, #4]
 801c9aa:	019a      	lsls	r2, r3, #6
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	691b      	ldr	r3, [r3, #16]
 801c9b0:	041b      	lsls	r3, r3, #16
 801c9b2:	431a      	orrs	r2, r3
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	68db      	ldr	r3, [r3, #12]
 801c9b8:	061b      	lsls	r3, r3, #24
 801c9ba:	431a      	orrs	r2, r3
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	689b      	ldr	r3, [r3, #8]
 801c9c0:	071b      	lsls	r3, r3, #28
 801c9c2:	491a      	ldr	r1, [pc, #104]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c9c4:	4313      	orrs	r3, r2
 801c9c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801c9ca:	4b18      	ldr	r3, [pc, #96]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	4a17      	ldr	r2, [pc, #92]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c9d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c9d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c9d6:	f7fb fcb9 	bl	801834c <HAL_GetTick>
 801c9da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801c9dc:	e008      	b.n	801c9f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801c9de:	f7fb fcb5 	bl	801834c <HAL_GetTick>
 801c9e2:	4602      	mov	r2, r0
 801c9e4:	697b      	ldr	r3, [r7, #20]
 801c9e6:	1ad3      	subs	r3, r2, r3
 801c9e8:	2b64      	cmp	r3, #100	; 0x64
 801c9ea:	d901      	bls.n	801c9f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c9ec:	2303      	movs	r3, #3
 801c9ee:	e0d8      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801c9f0:	4b0e      	ldr	r3, [pc, #56]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d0f0      	beq.n	801c9de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801c9fc:	69bb      	ldr	r3, [r7, #24]
 801c9fe:	2b01      	cmp	r3, #1
 801ca00:	f040 80ce 	bne.w	801cba0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801ca04:	4b09      	ldr	r3, [pc, #36]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	4a08      	ldr	r2, [pc, #32]	; (801ca2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801ca0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ca0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ca10:	f7fb fc9c 	bl	801834c <HAL_GetTick>
 801ca14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801ca16:	e00b      	b.n	801ca30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801ca18:	f7fb fc98 	bl	801834c <HAL_GetTick>
 801ca1c:	4602      	mov	r2, r0
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	1ad3      	subs	r3, r2, r3
 801ca22:	2b64      	cmp	r3, #100	; 0x64
 801ca24:	d904      	bls.n	801ca30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801ca26:	2303      	movs	r3, #3
 801ca28:	e0bb      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 801ca2a:	bf00      	nop
 801ca2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801ca30:	4b5e      	ldr	r3, [pc, #376]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801ca38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ca3c:	d0ec      	beq.n	801ca18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d003      	beq.n	801ca52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d009      	beq.n	801ca66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d02e      	beq.n	801cabc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d12a      	bne.n	801cabc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801ca66:	4b51      	ldr	r3, [pc, #324]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801ca68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca6c:	0c1b      	lsrs	r3, r3, #16
 801ca6e:	f003 0303 	and.w	r3, r3, #3
 801ca72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801ca74:	4b4d      	ldr	r3, [pc, #308]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801ca76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca7a:	0f1b      	lsrs	r3, r3, #28
 801ca7c:	f003 0307 	and.w	r3, r3, #7
 801ca80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	695b      	ldr	r3, [r3, #20]
 801ca86:	019a      	lsls	r2, r3, #6
 801ca88:	693b      	ldr	r3, [r7, #16]
 801ca8a:	041b      	lsls	r3, r3, #16
 801ca8c:	431a      	orrs	r2, r3
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	699b      	ldr	r3, [r3, #24]
 801ca92:	061b      	lsls	r3, r3, #24
 801ca94:	431a      	orrs	r2, r3
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	071b      	lsls	r3, r3, #28
 801ca9a:	4944      	ldr	r1, [pc, #272]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801ca9c:	4313      	orrs	r3, r2
 801ca9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801caa2:	4b42      	ldr	r3, [pc, #264]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801caa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801caa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cab0:	3b01      	subs	r3, #1
 801cab2:	021b      	lsls	r3, r3, #8
 801cab4:	493d      	ldr	r1, [pc, #244]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cab6:	4313      	orrs	r3, r2
 801cab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d022      	beq.n	801cb0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cacc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cad0:	d11d      	bne.n	801cb0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801cad2:	4b36      	ldr	r3, [pc, #216]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cad8:	0e1b      	lsrs	r3, r3, #24
 801cada:	f003 030f 	and.w	r3, r3, #15
 801cade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801cae0:	4b32      	ldr	r3, [pc, #200]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cae6:	0f1b      	lsrs	r3, r3, #28
 801cae8:	f003 0307 	and.w	r3, r3, #7
 801caec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	695b      	ldr	r3, [r3, #20]
 801caf2:	019a      	lsls	r2, r3, #6
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	6a1b      	ldr	r3, [r3, #32]
 801caf8:	041b      	lsls	r3, r3, #16
 801cafa:	431a      	orrs	r2, r3
 801cafc:	693b      	ldr	r3, [r7, #16]
 801cafe:	061b      	lsls	r3, r3, #24
 801cb00:	431a      	orrs	r2, r3
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	071b      	lsls	r3, r3, #28
 801cb06:	4929      	ldr	r1, [pc, #164]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb08:	4313      	orrs	r3, r2
 801cb0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	f003 0308 	and.w	r3, r3, #8
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d028      	beq.n	801cb6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801cb1a:	4b24      	ldr	r3, [pc, #144]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb20:	0e1b      	lsrs	r3, r3, #24
 801cb22:	f003 030f 	and.w	r3, r3, #15
 801cb26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801cb28:	4b20      	ldr	r3, [pc, #128]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb2e:	0c1b      	lsrs	r3, r3, #16
 801cb30:	f003 0303 	and.w	r3, r3, #3
 801cb34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	695b      	ldr	r3, [r3, #20]
 801cb3a:	019a      	lsls	r2, r3, #6
 801cb3c:	68fb      	ldr	r3, [r7, #12]
 801cb3e:	041b      	lsls	r3, r3, #16
 801cb40:	431a      	orrs	r2, r3
 801cb42:	693b      	ldr	r3, [r7, #16]
 801cb44:	061b      	lsls	r3, r3, #24
 801cb46:	431a      	orrs	r2, r3
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	69db      	ldr	r3, [r3, #28]
 801cb4c:	071b      	lsls	r3, r3, #28
 801cb4e:	4917      	ldr	r1, [pc, #92]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb50:	4313      	orrs	r3, r2
 801cb52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801cb56:	4b15      	ldr	r3, [pc, #84]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cb5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb64:	4911      	ldr	r1, [pc, #68]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb66:	4313      	orrs	r3, r2
 801cb68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801cb6c:	4b0f      	ldr	r3, [pc, #60]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	4a0e      	ldr	r2, [pc, #56]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cb76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cb78:	f7fb fbe8 	bl	801834c <HAL_GetTick>
 801cb7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801cb7e:	e008      	b.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801cb80:	f7fb fbe4 	bl	801834c <HAL_GetTick>
 801cb84:	4602      	mov	r2, r0
 801cb86:	697b      	ldr	r3, [r7, #20]
 801cb88:	1ad3      	subs	r3, r2, r3
 801cb8a:	2b64      	cmp	r3, #100	; 0x64
 801cb8c:	d901      	bls.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801cb8e:	2303      	movs	r3, #3
 801cb90:	e007      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801cb92:	4b06      	ldr	r3, [pc, #24]	; (801cbac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801cb9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cb9e:	d1ef      	bne.n	801cb80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801cba0:	2300      	movs	r3, #0
}
 801cba2:	4618      	mov	r0, r3
 801cba4:	3720      	adds	r7, #32
 801cba6:	46bd      	mov	sp, r7
 801cba8:	bd80      	pop	{r7, pc}
 801cbaa:	bf00      	nop
 801cbac:	40023800 	.word	0x40023800

0801cbb0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b082      	sub	sp, #8
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d101      	bne.n	801cbc2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801cbbe:	2301      	movs	r3, #1
 801cbc0:	e01c      	b.n	801cbfc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	795b      	ldrb	r3, [r3, #5]
 801cbc6:	b2db      	uxtb	r3, r3
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d105      	bne.n	801cbd8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	2200      	movs	r2, #0
 801cbd0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801cbd2:	6878      	ldr	r0, [r7, #4]
 801cbd4:	f7f9 fe16 	bl	8016804 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	2202      	movs	r2, #2
 801cbdc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	681a      	ldr	r2, [r3, #0]
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	f042 0204 	orr.w	r2, r2, #4
 801cbec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	2201      	movs	r2, #1
 801cbf2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801cbfa:	2300      	movs	r3, #0
}
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	3708      	adds	r7, #8
 801cc00:	46bd      	mov	sp, r7
 801cc02:	bd80      	pop	{r7, pc}

0801cc04 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b084      	sub	sp, #16
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	6078      	str	r0, [r7, #4]
 801cc0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801cc0e:	2300      	movs	r3, #0
 801cc10:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	791b      	ldrb	r3, [r3, #4]
 801cc16:	2b01      	cmp	r3, #1
 801cc18:	d101      	bne.n	801cc1e <HAL_RNG_GenerateRandomNumber+0x1a>
 801cc1a:	2302      	movs	r3, #2
 801cc1c:	e044      	b.n	801cca8 <HAL_RNG_GenerateRandomNumber+0xa4>
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	2201      	movs	r2, #1
 801cc22:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	795b      	ldrb	r3, [r3, #5]
 801cc28:	b2db      	uxtb	r3, r3
 801cc2a:	2b01      	cmp	r3, #1
 801cc2c:	d133      	bne.n	801cc96 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	2202      	movs	r2, #2
 801cc32:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801cc34:	f7fb fb8a 	bl	801834c <HAL_GetTick>
 801cc38:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801cc3a:	e018      	b.n	801cc6e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801cc3c:	f7fb fb86 	bl	801834c <HAL_GetTick>
 801cc40:	4602      	mov	r2, r0
 801cc42:	68bb      	ldr	r3, [r7, #8]
 801cc44:	1ad3      	subs	r3, r2, r3
 801cc46:	2b02      	cmp	r3, #2
 801cc48:	d911      	bls.n	801cc6e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	685b      	ldr	r3, [r3, #4]
 801cc50:	f003 0301 	and.w	r3, r3, #1
 801cc54:	2b01      	cmp	r3, #1
 801cc56:	d00a      	beq.n	801cc6e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2201      	movs	r2, #1
 801cc5c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	2202      	movs	r2, #2
 801cc62:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	2200      	movs	r2, #0
 801cc68:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801cc6a:	2301      	movs	r3, #1
 801cc6c:	e01c      	b.n	801cca8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	685b      	ldr	r3, [r3, #4]
 801cc74:	f003 0301 	and.w	r3, r3, #1
 801cc78:	2b01      	cmp	r3, #1
 801cc7a:	d1df      	bne.n	801cc3c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	689a      	ldr	r2, [r3, #8]
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	68da      	ldr	r2, [r3, #12]
 801cc8a:	683b      	ldr	r3, [r7, #0]
 801cc8c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	2201      	movs	r2, #1
 801cc92:	715a      	strb	r2, [r3, #5]
 801cc94:	e004      	b.n	801cca0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	2204      	movs	r2, #4
 801cc9a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801cc9c:	2301      	movs	r3, #1
 801cc9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	2200      	movs	r2, #0
 801cca4:	711a      	strb	r2, [r3, #4]

  return status;
 801cca6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cca8:	4618      	mov	r0, r3
 801ccaa:	3710      	adds	r7, #16
 801ccac:	46bd      	mov	sp, r7
 801ccae:	bd80      	pop	{r7, pc}

0801ccb0 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b082      	sub	sp, #8
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	330c      	adds	r3, #12
 801ccbc:	4619      	mov	r1, r3
 801ccbe:	6878      	ldr	r0, [r7, #4]
 801ccc0:	f7ff ffa0 	bl	801cc04 <HAL_RNG_GenerateRandomNumber>
 801ccc4:	4603      	mov	r3, r0
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d102      	bne.n	801ccd0 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	68db      	ldr	r3, [r3, #12]
 801ccce:	e000      	b.n	801ccd2 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801ccd0:	2300      	movs	r3, #0
  }
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3708      	adds	r7, #8
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}

0801ccda <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801ccda:	b580      	push	{r7, lr}
 801ccdc:	b084      	sub	sp, #16
 801ccde:	af00      	add	r7, sp, #0
 801cce0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d101      	bne.n	801ccec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801cce8:	2301      	movs	r3, #1
 801ccea:	e09d      	b.n	801ce28 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d108      	bne.n	801cd06 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	685b      	ldr	r3, [r3, #4]
 801ccf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccfc:	d009      	beq.n	801cd12 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	2200      	movs	r2, #0
 801cd02:	61da      	str	r2, [r3, #28]
 801cd04:	e005      	b.n	801cd12 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	2200      	movs	r2, #0
 801cd0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	2200      	movs	r2, #0
 801cd10:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	2200      	movs	r2, #0
 801cd16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801cd1e:	b2db      	uxtb	r3, r3
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d106      	bne.n	801cd32 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2200      	movs	r2, #0
 801cd28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801cd2c:	6878      	ldr	r0, [r7, #4]
 801cd2e:	f7f9 fdf1 	bl	8016914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	2202      	movs	r2, #2
 801cd36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	681a      	ldr	r2, [r3, #0]
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cd48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	68db      	ldr	r3, [r3, #12]
 801cd4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cd52:	d902      	bls.n	801cd5a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801cd54:	2300      	movs	r3, #0
 801cd56:	60fb      	str	r3, [r7, #12]
 801cd58:	e002      	b.n	801cd60 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801cd5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801cd5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	68db      	ldr	r3, [r3, #12]
 801cd64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801cd68:	d007      	beq.n	801cd7a <HAL_SPI_Init+0xa0>
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	68db      	ldr	r3, [r3, #12]
 801cd6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cd72:	d002      	beq.n	801cd7a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	2200      	movs	r2, #0
 801cd78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	685b      	ldr	r3, [r3, #4]
 801cd7e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	689b      	ldr	r3, [r3, #8]
 801cd86:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801cd8a:	431a      	orrs	r2, r3
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	691b      	ldr	r3, [r3, #16]
 801cd90:	f003 0302 	and.w	r3, r3, #2
 801cd94:	431a      	orrs	r2, r3
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	695b      	ldr	r3, [r3, #20]
 801cd9a:	f003 0301 	and.w	r3, r3, #1
 801cd9e:	431a      	orrs	r2, r3
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	699b      	ldr	r3, [r3, #24]
 801cda4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cda8:	431a      	orrs	r2, r3
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	69db      	ldr	r3, [r3, #28]
 801cdae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801cdb2:	431a      	orrs	r2, r3
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	6a1b      	ldr	r3, [r3, #32]
 801cdb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cdbc:	ea42 0103 	orr.w	r1, r2, r3
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	430a      	orrs	r2, r1
 801cdce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	699b      	ldr	r3, [r3, #24]
 801cdd4:	0c1b      	lsrs	r3, r3, #16
 801cdd6:	f003 0204 	and.w	r2, r3, #4
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdde:	f003 0310 	and.w	r3, r3, #16
 801cde2:	431a      	orrs	r2, r3
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cde8:	f003 0308 	and.w	r3, r3, #8
 801cdec:	431a      	orrs	r2, r3
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	68db      	ldr	r3, [r3, #12]
 801cdf2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cdf6:	ea42 0103 	orr.w	r1, r2, r3
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	430a      	orrs	r2, r1
 801ce06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	69da      	ldr	r2, [r3, #28]
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ce16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	2201      	movs	r2, #1
 801ce22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801ce26:	2300      	movs	r3, #0
}
 801ce28:	4618      	mov	r0, r3
 801ce2a:	3710      	adds	r7, #16
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}

0801ce30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b088      	sub	sp, #32
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	60f8      	str	r0, [r7, #12]
 801ce38:	60b9      	str	r1, [r7, #8]
 801ce3a:	603b      	str	r3, [r7, #0]
 801ce3c:	4613      	mov	r3, r2
 801ce3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801ce40:	2300      	movs	r3, #0
 801ce42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ce4a:	2b01      	cmp	r3, #1
 801ce4c:	d101      	bne.n	801ce52 <HAL_SPI_Transmit+0x22>
 801ce4e:	2302      	movs	r3, #2
 801ce50:	e158      	b.n	801d104 <HAL_SPI_Transmit+0x2d4>
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	2201      	movs	r2, #1
 801ce56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ce5a:	f7fb fa77 	bl	801834c <HAL_GetTick>
 801ce5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801ce60:	88fb      	ldrh	r3, [r7, #6]
 801ce62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ce6a:	b2db      	uxtb	r3, r3
 801ce6c:	2b01      	cmp	r3, #1
 801ce6e:	d002      	beq.n	801ce76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801ce70:	2302      	movs	r3, #2
 801ce72:	77fb      	strb	r3, [r7, #31]
    goto error;
 801ce74:	e13d      	b.n	801d0f2 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801ce76:	68bb      	ldr	r3, [r7, #8]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d002      	beq.n	801ce82 <HAL_SPI_Transmit+0x52>
 801ce7c:	88fb      	ldrh	r3, [r7, #6]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d102      	bne.n	801ce88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801ce82:	2301      	movs	r3, #1
 801ce84:	77fb      	strb	r3, [r7, #31]
    goto error;
 801ce86:	e134      	b.n	801d0f2 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	2203      	movs	r2, #3
 801ce8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	2200      	movs	r2, #0
 801ce94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	68ba      	ldr	r2, [r7, #8]
 801ce9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	88fa      	ldrh	r2, [r7, #6]
 801cea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	88fa      	ldrh	r2, [r7, #6]
 801cea6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	2200      	movs	r2, #0
 801ceac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	2200      	movs	r2, #0
 801ceb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	2200      	movs	r2, #0
 801ceba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	2200      	movs	r2, #0
 801cec2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	2200      	movs	r2, #0
 801cec8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	689b      	ldr	r3, [r3, #8]
 801cece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ced2:	d10f      	bne.n	801cef4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	681a      	ldr	r2, [r3, #0]
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cee2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801cee4:	68fb      	ldr	r3, [r7, #12]
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	681a      	ldr	r2, [r3, #0]
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801cef2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cefe:	2b40      	cmp	r3, #64	; 0x40
 801cf00:	d007      	beq.n	801cf12 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	681a      	ldr	r2, [r3, #0]
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cf10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	68db      	ldr	r3, [r3, #12]
 801cf16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cf1a:	d94b      	bls.n	801cfb4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	685b      	ldr	r3, [r3, #4]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d002      	beq.n	801cf2a <HAL_SPI_Transmit+0xfa>
 801cf24:	8afb      	ldrh	r3, [r7, #22]
 801cf26:	2b01      	cmp	r3, #1
 801cf28:	d13e      	bne.n	801cfa8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf2e:	881a      	ldrh	r2, [r3, #0]
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf3a:	1c9a      	adds	r2, r3, #2
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cf44:	b29b      	uxth	r3, r3
 801cf46:	3b01      	subs	r3, #1
 801cf48:	b29a      	uxth	r2, r3
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801cf4e:	e02b      	b.n	801cfa8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	689b      	ldr	r3, [r3, #8]
 801cf56:	f003 0302 	and.w	r3, r3, #2
 801cf5a:	2b02      	cmp	r3, #2
 801cf5c:	d112      	bne.n	801cf84 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf62:	881a      	ldrh	r2, [r3, #0]
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf6e:	1c9a      	adds	r2, r3, #2
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cf78:	b29b      	uxth	r3, r3
 801cf7a:	3b01      	subs	r3, #1
 801cf7c:	b29a      	uxth	r2, r3
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cf82:	e011      	b.n	801cfa8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801cf84:	f7fb f9e2 	bl	801834c <HAL_GetTick>
 801cf88:	4602      	mov	r2, r0
 801cf8a:	69bb      	ldr	r3, [r7, #24]
 801cf8c:	1ad3      	subs	r3, r2, r3
 801cf8e:	683a      	ldr	r2, [r7, #0]
 801cf90:	429a      	cmp	r2, r3
 801cf92:	d803      	bhi.n	801cf9c <HAL_SPI_Transmit+0x16c>
 801cf94:	683b      	ldr	r3, [r7, #0]
 801cf96:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf9a:	d102      	bne.n	801cfa2 <HAL_SPI_Transmit+0x172>
 801cf9c:	683b      	ldr	r3, [r7, #0]
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d102      	bne.n	801cfa8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801cfa2:	2303      	movs	r3, #3
 801cfa4:	77fb      	strb	r3, [r7, #31]
          goto error;
 801cfa6:	e0a4      	b.n	801d0f2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cfac:	b29b      	uxth	r3, r3
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d1ce      	bne.n	801cf50 <HAL_SPI_Transmit+0x120>
 801cfb2:	e07c      	b.n	801d0ae <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	685b      	ldr	r3, [r3, #4]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d002      	beq.n	801cfc2 <HAL_SPI_Transmit+0x192>
 801cfbc:	8afb      	ldrh	r3, [r7, #22]
 801cfbe:	2b01      	cmp	r3, #1
 801cfc0:	d170      	bne.n	801d0a4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801cfc2:	68fb      	ldr	r3, [r7, #12]
 801cfc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cfc6:	b29b      	uxth	r3, r3
 801cfc8:	2b01      	cmp	r3, #1
 801cfca:	d912      	bls.n	801cff2 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfd0:	881a      	ldrh	r2, [r3, #0]
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cfd8:	68fb      	ldr	r3, [r7, #12]
 801cfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfdc:	1c9a      	adds	r2, r3, #2
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801cfe2:	68fb      	ldr	r3, [r7, #12]
 801cfe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cfe6:	b29b      	uxth	r3, r3
 801cfe8:	3b02      	subs	r3, #2
 801cfea:	b29a      	uxth	r2, r3
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cff0:	e058      	b.n	801d0a4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	330c      	adds	r3, #12
 801cffc:	7812      	ldrb	r2, [r2, #0]
 801cffe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d004:	1c5a      	adds	r2, r3, #1
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d00e:	b29b      	uxth	r3, r3
 801d010:	3b01      	subs	r3, #1
 801d012:	b29a      	uxth	r2, r3
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d018:	e044      	b.n	801d0a4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	689b      	ldr	r3, [r3, #8]
 801d020:	f003 0302 	and.w	r3, r3, #2
 801d024:	2b02      	cmp	r3, #2
 801d026:	d12b      	bne.n	801d080 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	2b01      	cmp	r3, #1
 801d030:	d912      	bls.n	801d058 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d036:	881a      	ldrh	r2, [r3, #0]
 801d038:	68fb      	ldr	r3, [r7, #12]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d042:	1c9a      	adds	r2, r3, #2
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d048:	68fb      	ldr	r3, [r7, #12]
 801d04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d04c:	b29b      	uxth	r3, r3
 801d04e:	3b02      	subs	r3, #2
 801d050:	b29a      	uxth	r2, r3
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d056:	e025      	b.n	801d0a4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d05c:	68fb      	ldr	r3, [r7, #12]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	330c      	adds	r3, #12
 801d062:	7812      	ldrb	r2, [r2, #0]
 801d064:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d06a:	1c5a      	adds	r2, r3, #1
 801d06c:	68fb      	ldr	r3, [r7, #12]
 801d06e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d074:	b29b      	uxth	r3, r3
 801d076:	3b01      	subs	r3, #1
 801d078:	b29a      	uxth	r2, r3
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d07e:	e011      	b.n	801d0a4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d080:	f7fb f964 	bl	801834c <HAL_GetTick>
 801d084:	4602      	mov	r2, r0
 801d086:	69bb      	ldr	r3, [r7, #24]
 801d088:	1ad3      	subs	r3, r2, r3
 801d08a:	683a      	ldr	r2, [r7, #0]
 801d08c:	429a      	cmp	r2, r3
 801d08e:	d803      	bhi.n	801d098 <HAL_SPI_Transmit+0x268>
 801d090:	683b      	ldr	r3, [r7, #0]
 801d092:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d096:	d102      	bne.n	801d09e <HAL_SPI_Transmit+0x26e>
 801d098:	683b      	ldr	r3, [r7, #0]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d102      	bne.n	801d0a4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d09e:	2303      	movs	r3, #3
 801d0a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d0a2:	e026      	b.n	801d0f2 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d0a8:	b29b      	uxth	r3, r3
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d1b5      	bne.n	801d01a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d0ae:	69ba      	ldr	r2, [r7, #24]
 801d0b0:	6839      	ldr	r1, [r7, #0]
 801d0b2:	68f8      	ldr	r0, [r7, #12]
 801d0b4:	f000 fd08 	bl	801dac8 <SPI_EndRxTxTransaction>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d002      	beq.n	801d0c4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	2220      	movs	r2, #32
 801d0c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	689b      	ldr	r3, [r3, #8]
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d10a      	bne.n	801d0e2 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	613b      	str	r3, [r7, #16]
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	68db      	ldr	r3, [r3, #12]
 801d0d6:	613b      	str	r3, [r7, #16]
 801d0d8:	68fb      	ldr	r3, [r7, #12]
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	689b      	ldr	r3, [r3, #8]
 801d0de:	613b      	str	r3, [r7, #16]
 801d0e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d002      	beq.n	801d0f0 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d0ea:	2301      	movs	r3, #1
 801d0ec:	77fb      	strb	r3, [r7, #31]
 801d0ee:	e000      	b.n	801d0f2 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d0f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d0f2:	68fb      	ldr	r3, [r7, #12]
 801d0f4:	2201      	movs	r2, #1
 801d0f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d0fa:	68fb      	ldr	r3, [r7, #12]
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d102:	7ffb      	ldrb	r3, [r7, #31]
}
 801d104:	4618      	mov	r0, r3
 801d106:	3720      	adds	r7, #32
 801d108:	46bd      	mov	sp, r7
 801d10a:	bd80      	pop	{r7, pc}

0801d10c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b088      	sub	sp, #32
 801d110:	af02      	add	r7, sp, #8
 801d112:	60f8      	str	r0, [r7, #12]
 801d114:	60b9      	str	r1, [r7, #8]
 801d116:	603b      	str	r3, [r7, #0]
 801d118:	4613      	mov	r3, r2
 801d11a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d11c:	2300      	movs	r3, #0
 801d11e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	685b      	ldr	r3, [r3, #4]
 801d124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d128:	d112      	bne.n	801d150 <HAL_SPI_Receive+0x44>
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	689b      	ldr	r3, [r3, #8]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d10e      	bne.n	801d150 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d132:	68fb      	ldr	r3, [r7, #12]
 801d134:	2204      	movs	r2, #4
 801d136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d13a:	88fa      	ldrh	r2, [r7, #6]
 801d13c:	683b      	ldr	r3, [r7, #0]
 801d13e:	9300      	str	r3, [sp, #0]
 801d140:	4613      	mov	r3, r2
 801d142:	68ba      	ldr	r2, [r7, #8]
 801d144:	68b9      	ldr	r1, [r7, #8]
 801d146:	68f8      	ldr	r0, [r7, #12]
 801d148:	f000 f910 	bl	801d36c <HAL_SPI_TransmitReceive>
 801d14c:	4603      	mov	r3, r0
 801d14e:	e109      	b.n	801d364 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d156:	2b01      	cmp	r3, #1
 801d158:	d101      	bne.n	801d15e <HAL_SPI_Receive+0x52>
 801d15a:	2302      	movs	r3, #2
 801d15c:	e102      	b.n	801d364 <HAL_SPI_Receive+0x258>
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	2201      	movs	r2, #1
 801d162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d166:	f7fb f8f1 	bl	801834c <HAL_GetTick>
 801d16a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d172:	b2db      	uxtb	r3, r3
 801d174:	2b01      	cmp	r3, #1
 801d176:	d002      	beq.n	801d17e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d178:	2302      	movs	r3, #2
 801d17a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d17c:	e0e9      	b.n	801d352 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d17e:	68bb      	ldr	r3, [r7, #8]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d002      	beq.n	801d18a <HAL_SPI_Receive+0x7e>
 801d184:	88fb      	ldrh	r3, [r7, #6]
 801d186:	2b00      	cmp	r3, #0
 801d188:	d102      	bne.n	801d190 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d18a:	2301      	movs	r3, #1
 801d18c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d18e:	e0e0      	b.n	801d352 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	2204      	movs	r2, #4
 801d194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	2200      	movs	r2, #0
 801d19c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	68ba      	ldr	r2, [r7, #8]
 801d1a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	88fa      	ldrh	r2, [r7, #6]
 801d1a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	88fa      	ldrh	r2, [r7, #6]
 801d1b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	2200      	movs	r2, #0
 801d1b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	2200      	movs	r2, #0
 801d1be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	2200      	movs	r2, #0
 801d1c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	2200      	movs	r2, #0
 801d1ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	68db      	ldr	r3, [r3, #12]
 801d1d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d1da:	d908      	bls.n	801d1ee <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	685a      	ldr	r2, [r3, #4]
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d1ea:	605a      	str	r2, [r3, #4]
 801d1ec:	e007      	b.n	801d1fe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	685a      	ldr	r2, [r3, #4]
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d1fc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	689b      	ldr	r3, [r3, #8]
 801d202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d206:	d10f      	bne.n	801d228 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	681a      	ldr	r2, [r3, #0]
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d216:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	681a      	ldr	r2, [r3, #0]
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d226:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d232:	2b40      	cmp	r3, #64	; 0x40
 801d234:	d007      	beq.n	801d246 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	681a      	ldr	r2, [r3, #0]
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d244:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	68db      	ldr	r3, [r3, #12]
 801d24a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d24e:	d867      	bhi.n	801d320 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d250:	e030      	b.n	801d2b4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	689b      	ldr	r3, [r3, #8]
 801d258:	f003 0301 	and.w	r3, r3, #1
 801d25c:	2b01      	cmp	r3, #1
 801d25e:	d117      	bne.n	801d290 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	f103 020c 	add.w	r2, r3, #12
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d26c:	7812      	ldrb	r2, [r2, #0]
 801d26e:	b2d2      	uxtb	r2, r2
 801d270:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d276:	1c5a      	adds	r2, r3, #1
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d27c:	68fb      	ldr	r3, [r7, #12]
 801d27e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d282:	b29b      	uxth	r3, r3
 801d284:	3b01      	subs	r3, #1
 801d286:	b29a      	uxth	r2, r3
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d28e:	e011      	b.n	801d2b4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d290:	f7fb f85c 	bl	801834c <HAL_GetTick>
 801d294:	4602      	mov	r2, r0
 801d296:	693b      	ldr	r3, [r7, #16]
 801d298:	1ad3      	subs	r3, r2, r3
 801d29a:	683a      	ldr	r2, [r7, #0]
 801d29c:	429a      	cmp	r2, r3
 801d29e:	d803      	bhi.n	801d2a8 <HAL_SPI_Receive+0x19c>
 801d2a0:	683b      	ldr	r3, [r7, #0]
 801d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2a6:	d102      	bne.n	801d2ae <HAL_SPI_Receive+0x1a2>
 801d2a8:	683b      	ldr	r3, [r7, #0]
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d102      	bne.n	801d2b4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d2ae:	2303      	movs	r3, #3
 801d2b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d2b2:	e04e      	b.n	801d352 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d2ba:	b29b      	uxth	r3, r3
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d1c8      	bne.n	801d252 <HAL_SPI_Receive+0x146>
 801d2c0:	e034      	b.n	801d32c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	689b      	ldr	r3, [r3, #8]
 801d2c8:	f003 0301 	and.w	r3, r3, #1
 801d2cc:	2b01      	cmp	r3, #1
 801d2ce:	d115      	bne.n	801d2fc <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d2d0:	68fb      	ldr	r3, [r7, #12]
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	68da      	ldr	r2, [r3, #12]
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2da:	b292      	uxth	r2, r2
 801d2dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2e2:	1c9a      	adds	r2, r3, #2
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d2ee:	b29b      	uxth	r3, r3
 801d2f0:	3b01      	subs	r3, #1
 801d2f2:	b29a      	uxth	r2, r3
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d2fa:	e011      	b.n	801d320 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d2fc:	f7fb f826 	bl	801834c <HAL_GetTick>
 801d300:	4602      	mov	r2, r0
 801d302:	693b      	ldr	r3, [r7, #16]
 801d304:	1ad3      	subs	r3, r2, r3
 801d306:	683a      	ldr	r2, [r7, #0]
 801d308:	429a      	cmp	r2, r3
 801d30a:	d803      	bhi.n	801d314 <HAL_SPI_Receive+0x208>
 801d30c:	683b      	ldr	r3, [r7, #0]
 801d30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d312:	d102      	bne.n	801d31a <HAL_SPI_Receive+0x20e>
 801d314:	683b      	ldr	r3, [r7, #0]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d102      	bne.n	801d320 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d31a:	2303      	movs	r3, #3
 801d31c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d31e:	e018      	b.n	801d352 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d326:	b29b      	uxth	r3, r3
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d1ca      	bne.n	801d2c2 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d32c:	693a      	ldr	r2, [r7, #16]
 801d32e:	6839      	ldr	r1, [r7, #0]
 801d330:	68f8      	ldr	r0, [r7, #12]
 801d332:	f000 fb4d 	bl	801d9d0 <SPI_EndRxTransaction>
 801d336:	4603      	mov	r3, r0
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d002      	beq.n	801d342 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d33c:	68fb      	ldr	r3, [r7, #12]
 801d33e:	2220      	movs	r2, #32
 801d340:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d346:	2b00      	cmp	r3, #0
 801d348:	d002      	beq.n	801d350 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d34a:	2301      	movs	r3, #1
 801d34c:	75fb      	strb	r3, [r7, #23]
 801d34e:	e000      	b.n	801d352 <HAL_SPI_Receive+0x246>
  }

error :
 801d350:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	2201      	movs	r2, #1
 801d356:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	2200      	movs	r2, #0
 801d35e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d362:	7dfb      	ldrb	r3, [r7, #23]
}
 801d364:	4618      	mov	r0, r3
 801d366:	3718      	adds	r7, #24
 801d368:	46bd      	mov	sp, r7
 801d36a:	bd80      	pop	{r7, pc}

0801d36c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b08a      	sub	sp, #40	; 0x28
 801d370:	af00      	add	r7, sp, #0
 801d372:	60f8      	str	r0, [r7, #12]
 801d374:	60b9      	str	r1, [r7, #8]
 801d376:	607a      	str	r2, [r7, #4]
 801d378:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d37a:	2301      	movs	r3, #1
 801d37c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d37e:	2300      	movs	r3, #0
 801d380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d38a:	2b01      	cmp	r3, #1
 801d38c:	d101      	bne.n	801d392 <HAL_SPI_TransmitReceive+0x26>
 801d38e:	2302      	movs	r3, #2
 801d390:	e1fb      	b.n	801d78a <HAL_SPI_TransmitReceive+0x41e>
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	2201      	movs	r2, #1
 801d396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d39a:	f7fa ffd7 	bl	801834c <HAL_GetTick>
 801d39e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d3a6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	685b      	ldr	r3, [r3, #4]
 801d3ac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d3ae:	887b      	ldrh	r3, [r7, #2]
 801d3b0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d3b2:	887b      	ldrh	r3, [r7, #2]
 801d3b4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d3b6:	7efb      	ldrb	r3, [r7, #27]
 801d3b8:	2b01      	cmp	r3, #1
 801d3ba:	d00e      	beq.n	801d3da <HAL_SPI_TransmitReceive+0x6e>
 801d3bc:	697b      	ldr	r3, [r7, #20]
 801d3be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d3c2:	d106      	bne.n	801d3d2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	689b      	ldr	r3, [r3, #8]
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d102      	bne.n	801d3d2 <HAL_SPI_TransmitReceive+0x66>
 801d3cc:	7efb      	ldrb	r3, [r7, #27]
 801d3ce:	2b04      	cmp	r3, #4
 801d3d0:	d003      	beq.n	801d3da <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d3d2:	2302      	movs	r3, #2
 801d3d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d3d8:	e1cd      	b.n	801d776 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d3da:	68bb      	ldr	r3, [r7, #8]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d005      	beq.n	801d3ec <HAL_SPI_TransmitReceive+0x80>
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d002      	beq.n	801d3ec <HAL_SPI_TransmitReceive+0x80>
 801d3e6:	887b      	ldrh	r3, [r7, #2]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d103      	bne.n	801d3f4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d3ec:	2301      	movs	r3, #1
 801d3ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d3f2:	e1c0      	b.n	801d776 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d3fa:	b2db      	uxtb	r3, r3
 801d3fc:	2b04      	cmp	r3, #4
 801d3fe:	d003      	beq.n	801d408 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	2205      	movs	r2, #5
 801d404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	2200      	movs	r2, #0
 801d40c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	687a      	ldr	r2, [r7, #4]
 801d412:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	887a      	ldrh	r2, [r7, #2]
 801d418:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	887a      	ldrh	r2, [r7, #2]
 801d420:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	68ba      	ldr	r2, [r7, #8]
 801d428:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	887a      	ldrh	r2, [r7, #2]
 801d42e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	887a      	ldrh	r2, [r7, #2]
 801d434:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	2200      	movs	r2, #0
 801d43a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	2200      	movs	r2, #0
 801d440:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	68db      	ldr	r3, [r3, #12]
 801d446:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d44a:	d802      	bhi.n	801d452 <HAL_SPI_TransmitReceive+0xe6>
 801d44c:	8a3b      	ldrh	r3, [r7, #16]
 801d44e:	2b01      	cmp	r3, #1
 801d450:	d908      	bls.n	801d464 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	685a      	ldr	r2, [r3, #4]
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d460:	605a      	str	r2, [r3, #4]
 801d462:	e007      	b.n	801d474 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	685a      	ldr	r2, [r3, #4]
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d472:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d47e:	2b40      	cmp	r3, #64	; 0x40
 801d480:	d007      	beq.n	801d492 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	681a      	ldr	r2, [r3, #0]
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	68db      	ldr	r3, [r3, #12]
 801d496:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d49a:	d97c      	bls.n	801d596 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	685b      	ldr	r3, [r3, #4]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d002      	beq.n	801d4aa <HAL_SPI_TransmitReceive+0x13e>
 801d4a4:	8a7b      	ldrh	r3, [r7, #18]
 801d4a6:	2b01      	cmp	r3, #1
 801d4a8:	d169      	bne.n	801d57e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4ae:	881a      	ldrh	r2, [r3, #0]
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4ba:	1c9a      	adds	r2, r3, #2
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4c4:	b29b      	uxth	r3, r3
 801d4c6:	3b01      	subs	r3, #1
 801d4c8:	b29a      	uxth	r2, r3
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d4ce:	e056      	b.n	801d57e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	689b      	ldr	r3, [r3, #8]
 801d4d6:	f003 0302 	and.w	r3, r3, #2
 801d4da:	2b02      	cmp	r3, #2
 801d4dc:	d11b      	bne.n	801d516 <HAL_SPI_TransmitReceive+0x1aa>
 801d4de:	68fb      	ldr	r3, [r7, #12]
 801d4e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4e2:	b29b      	uxth	r3, r3
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d016      	beq.n	801d516 <HAL_SPI_TransmitReceive+0x1aa>
 801d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4ea:	2b01      	cmp	r3, #1
 801d4ec:	d113      	bne.n	801d516 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4f2:	881a      	ldrh	r2, [r3, #0]
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4fe:	1c9a      	adds	r2, r3, #2
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d508:	b29b      	uxth	r3, r3
 801d50a:	3b01      	subs	r3, #1
 801d50c:	b29a      	uxth	r2, r3
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d512:	2300      	movs	r3, #0
 801d514:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	689b      	ldr	r3, [r3, #8]
 801d51c:	f003 0301 	and.w	r3, r3, #1
 801d520:	2b01      	cmp	r3, #1
 801d522:	d11c      	bne.n	801d55e <HAL_SPI_TransmitReceive+0x1f2>
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d52a:	b29b      	uxth	r3, r3
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d016      	beq.n	801d55e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	68da      	ldr	r2, [r3, #12]
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d53a:	b292      	uxth	r2, r2
 801d53c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d542:	1c9a      	adds	r2, r3, #2
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d54e:	b29b      	uxth	r3, r3
 801d550:	3b01      	subs	r3, #1
 801d552:	b29a      	uxth	r2, r3
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d55a:	2301      	movs	r3, #1
 801d55c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801d55e:	f7fa fef5 	bl	801834c <HAL_GetTick>
 801d562:	4602      	mov	r2, r0
 801d564:	69fb      	ldr	r3, [r7, #28]
 801d566:	1ad3      	subs	r3, r2, r3
 801d568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d56a:	429a      	cmp	r2, r3
 801d56c:	d807      	bhi.n	801d57e <HAL_SPI_TransmitReceive+0x212>
 801d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d570:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d574:	d003      	beq.n	801d57e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801d576:	2303      	movs	r3, #3
 801d578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d57c:	e0fb      	b.n	801d776 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d582:	b29b      	uxth	r3, r3
 801d584:	2b00      	cmp	r3, #0
 801d586:	d1a3      	bne.n	801d4d0 <HAL_SPI_TransmitReceive+0x164>
 801d588:	68fb      	ldr	r3, [r7, #12]
 801d58a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d58e:	b29b      	uxth	r3, r3
 801d590:	2b00      	cmp	r3, #0
 801d592:	d19d      	bne.n	801d4d0 <HAL_SPI_TransmitReceive+0x164>
 801d594:	e0df      	b.n	801d756 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	685b      	ldr	r3, [r3, #4]
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d003      	beq.n	801d5a6 <HAL_SPI_TransmitReceive+0x23a>
 801d59e:	8a7b      	ldrh	r3, [r7, #18]
 801d5a0:	2b01      	cmp	r3, #1
 801d5a2:	f040 80cb 	bne.w	801d73c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d5aa:	b29b      	uxth	r3, r3
 801d5ac:	2b01      	cmp	r3, #1
 801d5ae:	d912      	bls.n	801d5d6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5b4:	881a      	ldrh	r2, [r3, #0]
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5c0:	1c9a      	adds	r2, r3, #2
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d5ca:	b29b      	uxth	r3, r3
 801d5cc:	3b02      	subs	r3, #2
 801d5ce:	b29a      	uxth	r2, r3
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d5d4:	e0b2      	b.n	801d73c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	330c      	adds	r3, #12
 801d5e0:	7812      	ldrb	r2, [r2, #0]
 801d5e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5e8:	1c5a      	adds	r2, r3, #1
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d5f2:	b29b      	uxth	r3, r3
 801d5f4:	3b01      	subs	r3, #1
 801d5f6:	b29a      	uxth	r2, r3
 801d5f8:	68fb      	ldr	r3, [r7, #12]
 801d5fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d5fc:	e09e      	b.n	801d73c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	689b      	ldr	r3, [r3, #8]
 801d604:	f003 0302 	and.w	r3, r3, #2
 801d608:	2b02      	cmp	r3, #2
 801d60a:	d134      	bne.n	801d676 <HAL_SPI_TransmitReceive+0x30a>
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d610:	b29b      	uxth	r3, r3
 801d612:	2b00      	cmp	r3, #0
 801d614:	d02f      	beq.n	801d676 <HAL_SPI_TransmitReceive+0x30a>
 801d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d618:	2b01      	cmp	r3, #1
 801d61a:	d12c      	bne.n	801d676 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d620:	b29b      	uxth	r3, r3
 801d622:	2b01      	cmp	r3, #1
 801d624:	d912      	bls.n	801d64c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d62a:	881a      	ldrh	r2, [r3, #0]
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d636:	1c9a      	adds	r2, r3, #2
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d640:	b29b      	uxth	r3, r3
 801d642:	3b02      	subs	r3, #2
 801d644:	b29a      	uxth	r2, r3
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d64a:	e012      	b.n	801d672 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	330c      	adds	r3, #12
 801d656:	7812      	ldrb	r2, [r2, #0]
 801d658:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d65e:	1c5a      	adds	r2, r3, #1
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d668:	b29b      	uxth	r3, r3
 801d66a:	3b01      	subs	r3, #1
 801d66c:	b29a      	uxth	r2, r3
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d672:	2300      	movs	r3, #0
 801d674:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	689b      	ldr	r3, [r3, #8]
 801d67c:	f003 0301 	and.w	r3, r3, #1
 801d680:	2b01      	cmp	r3, #1
 801d682:	d148      	bne.n	801d716 <HAL_SPI_TransmitReceive+0x3aa>
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d68a:	b29b      	uxth	r3, r3
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d042      	beq.n	801d716 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801d690:	68fb      	ldr	r3, [r7, #12]
 801d692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d696:	b29b      	uxth	r3, r3
 801d698:	2b01      	cmp	r3, #1
 801d69a:	d923      	bls.n	801d6e4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	68da      	ldr	r2, [r3, #12]
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6a6:	b292      	uxth	r2, r2
 801d6a8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801d6aa:	68fb      	ldr	r3, [r7, #12]
 801d6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6ae:	1c9a      	adds	r2, r3, #2
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6ba:	b29b      	uxth	r3, r3
 801d6bc:	3b02      	subs	r3, #2
 801d6be:	b29a      	uxth	r2, r3
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801d6c6:	68fb      	ldr	r3, [r7, #12]
 801d6c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6cc:	b29b      	uxth	r3, r3
 801d6ce:	2b01      	cmp	r3, #1
 801d6d0:	d81f      	bhi.n	801d712 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	685a      	ldr	r2, [r3, #4]
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d6e0:	605a      	str	r2, [r3, #4]
 801d6e2:	e016      	b.n	801d712 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	f103 020c 	add.w	r2, r3, #12
 801d6ec:	68fb      	ldr	r3, [r7, #12]
 801d6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6f0:	7812      	ldrb	r2, [r2, #0]
 801d6f2:	b2d2      	uxtb	r2, r2
 801d6f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6fa:	1c5a      	adds	r2, r3, #1
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d706:	b29b      	uxth	r3, r3
 801d708:	3b01      	subs	r3, #1
 801d70a:	b29a      	uxth	r2, r3
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d712:	2301      	movs	r3, #1
 801d714:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801d716:	f7fa fe19 	bl	801834c <HAL_GetTick>
 801d71a:	4602      	mov	r2, r0
 801d71c:	69fb      	ldr	r3, [r7, #28]
 801d71e:	1ad3      	subs	r3, r2, r3
 801d720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d722:	429a      	cmp	r2, r3
 801d724:	d803      	bhi.n	801d72e <HAL_SPI_TransmitReceive+0x3c2>
 801d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d72c:	d102      	bne.n	801d734 <HAL_SPI_TransmitReceive+0x3c8>
 801d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d730:	2b00      	cmp	r3, #0
 801d732:	d103      	bne.n	801d73c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801d734:	2303      	movs	r3, #3
 801d736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d73a:	e01c      	b.n	801d776 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d740:	b29b      	uxth	r3, r3
 801d742:	2b00      	cmp	r3, #0
 801d744:	f47f af5b 	bne.w	801d5fe <HAL_SPI_TransmitReceive+0x292>
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d74e:	b29b      	uxth	r3, r3
 801d750:	2b00      	cmp	r3, #0
 801d752:	f47f af54 	bne.w	801d5fe <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d756:	69fa      	ldr	r2, [r7, #28]
 801d758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d75a:	68f8      	ldr	r0, [r7, #12]
 801d75c:	f000 f9b4 	bl	801dac8 <SPI_EndRxTxTransaction>
 801d760:	4603      	mov	r3, r0
 801d762:	2b00      	cmp	r3, #0
 801d764:	d006      	beq.n	801d774 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801d766:	2301      	movs	r3, #1
 801d768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	2220      	movs	r2, #32
 801d770:	661a      	str	r2, [r3, #96]	; 0x60
 801d772:	e000      	b.n	801d776 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801d774:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	2201      	movs	r2, #1
 801d77a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	2200      	movs	r2, #0
 801d782:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801d78a:	4618      	mov	r0, r3
 801d78c:	3728      	adds	r7, #40	; 0x28
 801d78e:	46bd      	mov	sp, r7
 801d790:	bd80      	pop	{r7, pc}
	...

0801d794 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801d794:	b580      	push	{r7, lr}
 801d796:	b088      	sub	sp, #32
 801d798:	af00      	add	r7, sp, #0
 801d79a:	60f8      	str	r0, [r7, #12]
 801d79c:	60b9      	str	r1, [r7, #8]
 801d79e:	603b      	str	r3, [r7, #0]
 801d7a0:	4613      	mov	r3, r2
 801d7a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801d7a4:	f7fa fdd2 	bl	801834c <HAL_GetTick>
 801d7a8:	4602      	mov	r2, r0
 801d7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7ac:	1a9b      	subs	r3, r3, r2
 801d7ae:	683a      	ldr	r2, [r7, #0]
 801d7b0:	4413      	add	r3, r2
 801d7b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801d7b4:	f7fa fdca 	bl	801834c <HAL_GetTick>
 801d7b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801d7ba:	4b39      	ldr	r3, [pc, #228]	; (801d8a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	015b      	lsls	r3, r3, #5
 801d7c0:	0d1b      	lsrs	r3, r3, #20
 801d7c2:	69fa      	ldr	r2, [r7, #28]
 801d7c4:	fb02 f303 	mul.w	r3, r2, r3
 801d7c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d7ca:	e054      	b.n	801d876 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801d7cc:	683b      	ldr	r3, [r7, #0]
 801d7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7d2:	d050      	beq.n	801d876 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d7d4:	f7fa fdba 	bl	801834c <HAL_GetTick>
 801d7d8:	4602      	mov	r2, r0
 801d7da:	69bb      	ldr	r3, [r7, #24]
 801d7dc:	1ad3      	subs	r3, r2, r3
 801d7de:	69fa      	ldr	r2, [r7, #28]
 801d7e0:	429a      	cmp	r2, r3
 801d7e2:	d902      	bls.n	801d7ea <SPI_WaitFlagStateUntilTimeout+0x56>
 801d7e4:	69fb      	ldr	r3, [r7, #28]
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d13d      	bne.n	801d866 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d7ea:	68fb      	ldr	r3, [r7, #12]
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	685a      	ldr	r2, [r3, #4]
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d7f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	685b      	ldr	r3, [r3, #4]
 801d7fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d802:	d111      	bne.n	801d828 <SPI_WaitFlagStateUntilTimeout+0x94>
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	689b      	ldr	r3, [r3, #8]
 801d808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d80c:	d004      	beq.n	801d818 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	689b      	ldr	r3, [r3, #8]
 801d812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d816:	d107      	bne.n	801d828 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	681a      	ldr	r2, [r3, #0]
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d826:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d82c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d830:	d10f      	bne.n	801d852 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	681a      	ldr	r2, [r3, #0]
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d840:	601a      	str	r2, [r3, #0]
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	681a      	ldr	r2, [r3, #0]
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d850:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	2201      	movs	r2, #1
 801d856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	2200      	movs	r2, #0
 801d85e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801d862:	2303      	movs	r3, #3
 801d864:	e017      	b.n	801d896 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801d866:	697b      	ldr	r3, [r7, #20]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d101      	bne.n	801d870 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801d86c:	2300      	movs	r3, #0
 801d86e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801d870:	697b      	ldr	r3, [r7, #20]
 801d872:	3b01      	subs	r3, #1
 801d874:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	689a      	ldr	r2, [r3, #8]
 801d87c:	68bb      	ldr	r3, [r7, #8]
 801d87e:	4013      	ands	r3, r2
 801d880:	68ba      	ldr	r2, [r7, #8]
 801d882:	429a      	cmp	r2, r3
 801d884:	bf0c      	ite	eq
 801d886:	2301      	moveq	r3, #1
 801d888:	2300      	movne	r3, #0
 801d88a:	b2db      	uxtb	r3, r3
 801d88c:	461a      	mov	r2, r3
 801d88e:	79fb      	ldrb	r3, [r7, #7]
 801d890:	429a      	cmp	r2, r3
 801d892:	d19b      	bne.n	801d7cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801d894:	2300      	movs	r3, #0
}
 801d896:	4618      	mov	r0, r3
 801d898:	3720      	adds	r7, #32
 801d89a:	46bd      	mov	sp, r7
 801d89c:	bd80      	pop	{r7, pc}
 801d89e:	bf00      	nop
 801d8a0:	2000011c 	.word	0x2000011c

0801d8a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b08a      	sub	sp, #40	; 0x28
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	60f8      	str	r0, [r7, #12]
 801d8ac:	60b9      	str	r1, [r7, #8]
 801d8ae:	607a      	str	r2, [r7, #4]
 801d8b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801d8b2:	2300      	movs	r3, #0
 801d8b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801d8b6:	f7fa fd49 	bl	801834c <HAL_GetTick>
 801d8ba:	4602      	mov	r2, r0
 801d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8be:	1a9b      	subs	r3, r3, r2
 801d8c0:	683a      	ldr	r2, [r7, #0]
 801d8c2:	4413      	add	r3, r2
 801d8c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801d8c6:	f7fa fd41 	bl	801834c <HAL_GetTick>
 801d8ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	330c      	adds	r3, #12
 801d8d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801d8d4:	4b3d      	ldr	r3, [pc, #244]	; (801d9cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 801d8d6:	681a      	ldr	r2, [r3, #0]
 801d8d8:	4613      	mov	r3, r2
 801d8da:	009b      	lsls	r3, r3, #2
 801d8dc:	4413      	add	r3, r2
 801d8de:	00da      	lsls	r2, r3, #3
 801d8e0:	1ad3      	subs	r3, r2, r3
 801d8e2:	0d1b      	lsrs	r3, r3, #20
 801d8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d8e6:	fb02 f303 	mul.w	r3, r2, r3
 801d8ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801d8ec:	e060      	b.n	801d9b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801d8ee:	68bb      	ldr	r3, [r7, #8]
 801d8f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801d8f4:	d107      	bne.n	801d906 <SPI_WaitFifoStateUntilTimeout+0x62>
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d104      	bne.n	801d906 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801d8fc:	69fb      	ldr	r3, [r7, #28]
 801d8fe:	781b      	ldrb	r3, [r3, #0]
 801d900:	b2db      	uxtb	r3, r3
 801d902:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801d904:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801d906:	683b      	ldr	r3, [r7, #0]
 801d908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d90c:	d050      	beq.n	801d9b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d90e:	f7fa fd1d 	bl	801834c <HAL_GetTick>
 801d912:	4602      	mov	r2, r0
 801d914:	6a3b      	ldr	r3, [r7, #32]
 801d916:	1ad3      	subs	r3, r2, r3
 801d918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d91a:	429a      	cmp	r2, r3
 801d91c:	d902      	bls.n	801d924 <SPI_WaitFifoStateUntilTimeout+0x80>
 801d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d920:	2b00      	cmp	r3, #0
 801d922:	d13d      	bne.n	801d9a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	685a      	ldr	r2, [r3, #4]
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d934:	68fb      	ldr	r3, [r7, #12]
 801d936:	685b      	ldr	r3, [r3, #4]
 801d938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d93c:	d111      	bne.n	801d962 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	689b      	ldr	r3, [r3, #8]
 801d942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d946:	d004      	beq.n	801d952 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d948:	68fb      	ldr	r3, [r7, #12]
 801d94a:	689b      	ldr	r3, [r3, #8]
 801d94c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d950:	d107      	bne.n	801d962 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	681a      	ldr	r2, [r3, #0]
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d96a:	d10f      	bne.n	801d98c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	681a      	ldr	r2, [r3, #0]
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d97a:	601a      	str	r2, [r3, #0]
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	681a      	ldr	r2, [r3, #0]
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d98a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	2201      	movs	r2, #1
 801d990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	2200      	movs	r2, #0
 801d998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801d99c:	2303      	movs	r3, #3
 801d99e:	e010      	b.n	801d9c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801d9a0:	69bb      	ldr	r3, [r7, #24]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d101      	bne.n	801d9aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801d9aa:	69bb      	ldr	r3, [r7, #24]
 801d9ac:	3b01      	subs	r3, #1
 801d9ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	681b      	ldr	r3, [r3, #0]
 801d9b4:	689a      	ldr	r2, [r3, #8]
 801d9b6:	68bb      	ldr	r3, [r7, #8]
 801d9b8:	4013      	ands	r3, r2
 801d9ba:	687a      	ldr	r2, [r7, #4]
 801d9bc:	429a      	cmp	r2, r3
 801d9be:	d196      	bne.n	801d8ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801d9c0:	2300      	movs	r3, #0
}
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	3728      	adds	r7, #40	; 0x28
 801d9c6:	46bd      	mov	sp, r7
 801d9c8:	bd80      	pop	{r7, pc}
 801d9ca:	bf00      	nop
 801d9cc:	2000011c 	.word	0x2000011c

0801d9d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801d9d0:	b580      	push	{r7, lr}
 801d9d2:	b088      	sub	sp, #32
 801d9d4:	af02      	add	r7, sp, #8
 801d9d6:	60f8      	str	r0, [r7, #12]
 801d9d8:	60b9      	str	r1, [r7, #8]
 801d9da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	685b      	ldr	r3, [r3, #4]
 801d9e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d9e4:	d111      	bne.n	801da0a <SPI_EndRxTransaction+0x3a>
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	689b      	ldr	r3, [r3, #8]
 801d9ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d9ee:	d004      	beq.n	801d9fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	689b      	ldr	r3, [r3, #8]
 801d9f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d9f8:	d107      	bne.n	801da0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	681a      	ldr	r2, [r3, #0]
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	681b      	ldr	r3, [r3, #0]
 801da04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801da08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	685b      	ldr	r3, [r3, #4]
 801da0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801da12:	d112      	bne.n	801da3a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	9300      	str	r3, [sp, #0]
 801da18:	68bb      	ldr	r3, [r7, #8]
 801da1a:	2200      	movs	r2, #0
 801da1c:	2180      	movs	r1, #128	; 0x80
 801da1e:	68f8      	ldr	r0, [r7, #12]
 801da20:	f7ff feb8 	bl	801d794 <SPI_WaitFlagStateUntilTimeout>
 801da24:	4603      	mov	r3, r0
 801da26:	2b00      	cmp	r3, #0
 801da28:	d021      	beq.n	801da6e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da2e:	f043 0220 	orr.w	r2, r3, #32
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801da36:	2303      	movs	r3, #3
 801da38:	e03d      	b.n	801dab6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801da3a:	4b21      	ldr	r3, [pc, #132]	; (801dac0 <SPI_EndRxTransaction+0xf0>)
 801da3c:	681b      	ldr	r3, [r3, #0]
 801da3e:	4a21      	ldr	r2, [pc, #132]	; (801dac4 <SPI_EndRxTransaction+0xf4>)
 801da40:	fba2 2303 	umull	r2, r3, r2, r3
 801da44:	0d5b      	lsrs	r3, r3, #21
 801da46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801da4a:	fb02 f303 	mul.w	r3, r2, r3
 801da4e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801da50:	697b      	ldr	r3, [r7, #20]
 801da52:	2b00      	cmp	r3, #0
 801da54:	d00a      	beq.n	801da6c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801da56:	697b      	ldr	r3, [r7, #20]
 801da58:	3b01      	subs	r3, #1
 801da5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	689b      	ldr	r3, [r3, #8]
 801da62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801da66:	2b80      	cmp	r3, #128	; 0x80
 801da68:	d0f2      	beq.n	801da50 <SPI_EndRxTransaction+0x80>
 801da6a:	e000      	b.n	801da6e <SPI_EndRxTransaction+0x9e>
        break;
 801da6c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801da6e:	68fb      	ldr	r3, [r7, #12]
 801da70:	685b      	ldr	r3, [r3, #4]
 801da72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801da76:	d11d      	bne.n	801dab4 <SPI_EndRxTransaction+0xe4>
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	689b      	ldr	r3, [r3, #8]
 801da7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801da80:	d004      	beq.n	801da8c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	689b      	ldr	r3, [r3, #8]
 801da86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801da8a:	d113      	bne.n	801dab4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	9300      	str	r3, [sp, #0]
 801da90:	68bb      	ldr	r3, [r7, #8]
 801da92:	2200      	movs	r2, #0
 801da94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801da98:	68f8      	ldr	r0, [r7, #12]
 801da9a:	f7ff ff03 	bl	801d8a4 <SPI_WaitFifoStateUntilTimeout>
 801da9e:	4603      	mov	r3, r0
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d007      	beq.n	801dab4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801daa8:	f043 0220 	orr.w	r2, r3, #32
 801daac:	68fb      	ldr	r3, [r7, #12]
 801daae:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801dab0:	2303      	movs	r3, #3
 801dab2:	e000      	b.n	801dab6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801dab4:	2300      	movs	r3, #0
}
 801dab6:	4618      	mov	r0, r3
 801dab8:	3718      	adds	r7, #24
 801daba:	46bd      	mov	sp, r7
 801dabc:	bd80      	pop	{r7, pc}
 801dabe:	bf00      	nop
 801dac0:	2000011c 	.word	0x2000011c
 801dac4:	165e9f81 	.word	0x165e9f81

0801dac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b088      	sub	sp, #32
 801dacc:	af02      	add	r7, sp, #8
 801dace:	60f8      	str	r0, [r7, #12]
 801dad0:	60b9      	str	r1, [r7, #8]
 801dad2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	9300      	str	r3, [sp, #0]
 801dad8:	68bb      	ldr	r3, [r7, #8]
 801dada:	2200      	movs	r2, #0
 801dadc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801dae0:	68f8      	ldr	r0, [r7, #12]
 801dae2:	f7ff fedf 	bl	801d8a4 <SPI_WaitFifoStateUntilTimeout>
 801dae6:	4603      	mov	r3, r0
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d007      	beq.n	801dafc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801daec:	68fb      	ldr	r3, [r7, #12]
 801daee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801daf0:	f043 0220 	orr.w	r2, r3, #32
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801daf8:	2303      	movs	r3, #3
 801dafa:	e046      	b.n	801db8a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801dafc:	4b25      	ldr	r3, [pc, #148]	; (801db94 <SPI_EndRxTxTransaction+0xcc>)
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	4a25      	ldr	r2, [pc, #148]	; (801db98 <SPI_EndRxTxTransaction+0xd0>)
 801db02:	fba2 2303 	umull	r2, r3, r2, r3
 801db06:	0d5b      	lsrs	r3, r3, #21
 801db08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801db0c:	fb02 f303 	mul.w	r3, r2, r3
 801db10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	685b      	ldr	r3, [r3, #4]
 801db16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801db1a:	d112      	bne.n	801db42 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	9300      	str	r3, [sp, #0]
 801db20:	68bb      	ldr	r3, [r7, #8]
 801db22:	2200      	movs	r2, #0
 801db24:	2180      	movs	r1, #128	; 0x80
 801db26:	68f8      	ldr	r0, [r7, #12]
 801db28:	f7ff fe34 	bl	801d794 <SPI_WaitFlagStateUntilTimeout>
 801db2c:	4603      	mov	r3, r0
 801db2e:	2b00      	cmp	r3, #0
 801db30:	d016      	beq.n	801db60 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801db36:	f043 0220 	orr.w	r2, r3, #32
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801db3e:	2303      	movs	r3, #3
 801db40:	e023      	b.n	801db8a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801db42:	697b      	ldr	r3, [r7, #20]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d00a      	beq.n	801db5e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801db48:	697b      	ldr	r3, [r7, #20]
 801db4a:	3b01      	subs	r3, #1
 801db4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	689b      	ldr	r3, [r3, #8]
 801db54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db58:	2b80      	cmp	r3, #128	; 0x80
 801db5a:	d0f2      	beq.n	801db42 <SPI_EndRxTxTransaction+0x7a>
 801db5c:	e000      	b.n	801db60 <SPI_EndRxTxTransaction+0x98>
        break;
 801db5e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	9300      	str	r3, [sp, #0]
 801db64:	68bb      	ldr	r3, [r7, #8]
 801db66:	2200      	movs	r2, #0
 801db68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801db6c:	68f8      	ldr	r0, [r7, #12]
 801db6e:	f7ff fe99 	bl	801d8a4 <SPI_WaitFifoStateUntilTimeout>
 801db72:	4603      	mov	r3, r0
 801db74:	2b00      	cmp	r3, #0
 801db76:	d007      	beq.n	801db88 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801db7c:	f043 0220 	orr.w	r2, r3, #32
 801db80:	68fb      	ldr	r3, [r7, #12]
 801db82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801db84:	2303      	movs	r3, #3
 801db86:	e000      	b.n	801db8a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801db88:	2300      	movs	r3, #0
}
 801db8a:	4618      	mov	r0, r3
 801db8c:	3718      	adds	r7, #24
 801db8e:	46bd      	mov	sp, r7
 801db90:	bd80      	pop	{r7, pc}
 801db92:	bf00      	nop
 801db94:	2000011c 	.word	0x2000011c
 801db98:	165e9f81 	.word	0x165e9f81

0801db9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801db9c:	b580      	push	{r7, lr}
 801db9e:	b082      	sub	sp, #8
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	691b      	ldr	r3, [r3, #16]
 801dbaa:	f003 0302 	and.w	r3, r3, #2
 801dbae:	2b02      	cmp	r3, #2
 801dbb0:	d128      	bne.n	801dc04 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	68db      	ldr	r3, [r3, #12]
 801dbb8:	f003 0302 	and.w	r3, r3, #2
 801dbbc:	2b02      	cmp	r3, #2
 801dbbe:	d121      	bne.n	801dc04 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	f06f 0202 	mvn.w	r2, #2
 801dbc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	2201      	movs	r2, #1
 801dbce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	699b      	ldr	r3, [r3, #24]
 801dbd6:	f003 0303 	and.w	r3, r3, #3
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d005      	beq.n	801dbea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801dbe4:	6878      	ldr	r0, [r7, #4]
 801dbe6:	4798      	blx	r3
 801dbe8:	e009      	b.n	801dbfe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801dbf0:	6878      	ldr	r0, [r7, #4]
 801dbf2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801dbfa:	6878      	ldr	r0, [r7, #4]
 801dbfc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	2200      	movs	r2, #0
 801dc02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	691b      	ldr	r3, [r3, #16]
 801dc0a:	f003 0304 	and.w	r3, r3, #4
 801dc0e:	2b04      	cmp	r3, #4
 801dc10:	d128      	bne.n	801dc64 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	68db      	ldr	r3, [r3, #12]
 801dc18:	f003 0304 	and.w	r3, r3, #4
 801dc1c:	2b04      	cmp	r3, #4
 801dc1e:	d121      	bne.n	801dc64 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	f06f 0204 	mvn.w	r2, #4
 801dc28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	2202      	movs	r2, #2
 801dc2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	699b      	ldr	r3, [r3, #24]
 801dc36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d005      	beq.n	801dc4a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801dc44:	6878      	ldr	r0, [r7, #4]
 801dc46:	4798      	blx	r3
 801dc48:	e009      	b.n	801dc5e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801dc50:	6878      	ldr	r0, [r7, #4]
 801dc52:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801dc5a:	6878      	ldr	r0, [r7, #4]
 801dc5c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	2200      	movs	r2, #0
 801dc62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	681b      	ldr	r3, [r3, #0]
 801dc68:	691b      	ldr	r3, [r3, #16]
 801dc6a:	f003 0308 	and.w	r3, r3, #8
 801dc6e:	2b08      	cmp	r3, #8
 801dc70:	d128      	bne.n	801dcc4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	68db      	ldr	r3, [r3, #12]
 801dc78:	f003 0308 	and.w	r3, r3, #8
 801dc7c:	2b08      	cmp	r3, #8
 801dc7e:	d121      	bne.n	801dcc4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	f06f 0208 	mvn.w	r2, #8
 801dc88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	2204      	movs	r2, #4
 801dc8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	69db      	ldr	r3, [r3, #28]
 801dc96:	f003 0303 	and.w	r3, r3, #3
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d005      	beq.n	801dcaa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801dca4:	6878      	ldr	r0, [r7, #4]
 801dca6:	4798      	blx	r3
 801dca8:	e009      	b.n	801dcbe <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801dcb0:	6878      	ldr	r0, [r7, #4]
 801dcb2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801dcba:	6878      	ldr	r0, [r7, #4]
 801dcbc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	2200      	movs	r2, #0
 801dcc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	691b      	ldr	r3, [r3, #16]
 801dcca:	f003 0310 	and.w	r3, r3, #16
 801dcce:	2b10      	cmp	r3, #16
 801dcd0:	d128      	bne.n	801dd24 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	68db      	ldr	r3, [r3, #12]
 801dcd8:	f003 0310 	and.w	r3, r3, #16
 801dcdc:	2b10      	cmp	r3, #16
 801dcde:	d121      	bne.n	801dd24 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	f06f 0210 	mvn.w	r2, #16
 801dce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	2208      	movs	r2, #8
 801dcee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	69db      	ldr	r3, [r3, #28]
 801dcf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	d005      	beq.n	801dd0a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801dd04:	6878      	ldr	r0, [r7, #4]
 801dd06:	4798      	blx	r3
 801dd08:	e009      	b.n	801dd1e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801dd10:	6878      	ldr	r0, [r7, #4]
 801dd12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801dd1a:	6878      	ldr	r0, [r7, #4]
 801dd1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	2200      	movs	r2, #0
 801dd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	691b      	ldr	r3, [r3, #16]
 801dd2a:	f003 0301 	and.w	r3, r3, #1
 801dd2e:	2b01      	cmp	r3, #1
 801dd30:	d110      	bne.n	801dd54 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	68db      	ldr	r3, [r3, #12]
 801dd38:	f003 0301 	and.w	r3, r3, #1
 801dd3c:	2b01      	cmp	r3, #1
 801dd3e:	d109      	bne.n	801dd54 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	f06f 0201 	mvn.w	r2, #1
 801dd48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dd50:	6878      	ldr	r0, [r7, #4]
 801dd52:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	691b      	ldr	r3, [r3, #16]
 801dd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dd5e:	2b80      	cmp	r3, #128	; 0x80
 801dd60:	d110      	bne.n	801dd84 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801dd62:	687b      	ldr	r3, [r7, #4]
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	68db      	ldr	r3, [r3, #12]
 801dd68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dd6c:	2b80      	cmp	r3, #128	; 0x80
 801dd6e:	d109      	bne.n	801dd84 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801dd78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801dd80:	6878      	ldr	r0, [r7, #4]
 801dd82:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	691b      	ldr	r3, [r3, #16]
 801dd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dd92:	d110      	bne.n	801ddb6 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	68db      	ldr	r3, [r3, #12]
 801dd9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dd9e:	2b80      	cmp	r3, #128	; 0x80
 801dda0:	d109      	bne.n	801ddb6 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	681b      	ldr	r3, [r3, #0]
 801dda6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801ddaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801ddb2:	6878      	ldr	r0, [r7, #4]
 801ddb4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	691b      	ldr	r3, [r3, #16]
 801ddbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ddc0:	2b40      	cmp	r3, #64	; 0x40
 801ddc2:	d110      	bne.n	801dde6 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	68db      	ldr	r3, [r3, #12]
 801ddca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ddce:	2b40      	cmp	r3, #64	; 0x40
 801ddd0:	d109      	bne.n	801dde6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ddda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dde2:	6878      	ldr	r0, [r7, #4]
 801dde4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	691b      	ldr	r3, [r3, #16]
 801ddec:	f003 0320 	and.w	r3, r3, #32
 801ddf0:	2b20      	cmp	r3, #32
 801ddf2:	d110      	bne.n	801de16 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	68db      	ldr	r3, [r3, #12]
 801ddfa:	f003 0320 	and.w	r3, r3, #32
 801ddfe:	2b20      	cmp	r3, #32
 801de00:	d109      	bne.n	801de16 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	f06f 0220 	mvn.w	r2, #32
 801de0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801de12:	6878      	ldr	r0, [r7, #4]
 801de14:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801de16:	bf00      	nop
 801de18:	3708      	adds	r7, #8
 801de1a:	46bd      	mov	sp, r7
 801de1c:	bd80      	pop	{r7, pc}
	...

0801de20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b082      	sub	sp, #8
 801de24:	af00      	add	r7, sp, #0
 801de26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d101      	bne.n	801de32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801de2e:	2301      	movs	r3, #1
 801de30:	e04e      	b.n	801ded0 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801de36:	2b00      	cmp	r3, #0
 801de38:	d114      	bne.n	801de64 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	2200      	movs	r2, #0
 801de3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801de42:	6878      	ldr	r0, [r7, #4]
 801de44:	f000 fc1c 	bl	801e680 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d103      	bne.n	801de5a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	4a20      	ldr	r2, [pc, #128]	; (801ded8 <HAL_UART_Init+0xb8>)
 801de56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801de60:	6878      	ldr	r0, [r7, #4]
 801de62:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	2224      	movs	r2, #36	; 0x24
 801de68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	681a      	ldr	r2, [r3, #0]
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	f022 0201 	bic.w	r2, r2, #1
 801de78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801de7a:	6878      	ldr	r0, [r7, #4]
 801de7c:	f000 fc46 	bl	801e70c <UART_SetConfig>
 801de80:	4603      	mov	r3, r0
 801de82:	2b01      	cmp	r3, #1
 801de84:	d101      	bne.n	801de8a <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801de86:	2301      	movs	r3, #1
 801de88:	e022      	b.n	801ded0 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d002      	beq.n	801de98 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801de92:	6878      	ldr	r0, [r7, #4]
 801de94:	f000 fe9e 	bl	801ebd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	685a      	ldr	r2, [r3, #4]
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801dea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	689a      	ldr	r2, [r3, #8]
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801deb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	681a      	ldr	r2, [r3, #0]
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f042 0201 	orr.w	r2, r2, #1
 801dec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801dec8:	6878      	ldr	r0, [r7, #4]
 801deca:	f000 ff25 	bl	801ed18 <UART_CheckIdleState>
 801dece:	4603      	mov	r3, r0
}
 801ded0:	4618      	mov	r0, r3
 801ded2:	3708      	adds	r7, #8
 801ded4:	46bd      	mov	sp, r7
 801ded6:	bd80      	pop	{r7, pc}
 801ded8:	08017721 	.word	0x08017721

0801dedc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b08a      	sub	sp, #40	; 0x28
 801dee0:	af02      	add	r7, sp, #8
 801dee2:	60f8      	str	r0, [r7, #12]
 801dee4:	60b9      	str	r1, [r7, #8]
 801dee6:	603b      	str	r3, [r7, #0]
 801dee8:	4613      	mov	r3, r2
 801deea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801def0:	2b20      	cmp	r3, #32
 801def2:	d171      	bne.n	801dfd8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801def4:	68bb      	ldr	r3, [r7, #8]
 801def6:	2b00      	cmp	r3, #0
 801def8:	d002      	beq.n	801df00 <HAL_UART_Transmit+0x24>
 801defa:	88fb      	ldrh	r3, [r7, #6]
 801defc:	2b00      	cmp	r3, #0
 801defe:	d101      	bne.n	801df04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801df00:	2301      	movs	r3, #1
 801df02:	e06a      	b.n	801dfda <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801df04:	68fb      	ldr	r3, [r7, #12]
 801df06:	2200      	movs	r2, #0
 801df08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	2221      	movs	r2, #33	; 0x21
 801df10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801df12:	f7fa fa1b 	bl	801834c <HAL_GetTick>
 801df16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	88fa      	ldrh	r2, [r7, #6]
 801df1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	88fa      	ldrh	r2, [r7, #6]
 801df24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	689b      	ldr	r3, [r3, #8]
 801df2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801df30:	d108      	bne.n	801df44 <HAL_UART_Transmit+0x68>
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	691b      	ldr	r3, [r3, #16]
 801df36:	2b00      	cmp	r3, #0
 801df38:	d104      	bne.n	801df44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801df3a:	2300      	movs	r3, #0
 801df3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801df3e:	68bb      	ldr	r3, [r7, #8]
 801df40:	61bb      	str	r3, [r7, #24]
 801df42:	e003      	b.n	801df4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801df44:	68bb      	ldr	r3, [r7, #8]
 801df46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801df48:	2300      	movs	r3, #0
 801df4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801df4c:	e02c      	b.n	801dfa8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801df4e:	683b      	ldr	r3, [r7, #0]
 801df50:	9300      	str	r3, [sp, #0]
 801df52:	697b      	ldr	r3, [r7, #20]
 801df54:	2200      	movs	r2, #0
 801df56:	2180      	movs	r1, #128	; 0x80
 801df58:	68f8      	ldr	r0, [r7, #12]
 801df5a:	f000 ff2a 	bl	801edb2 <UART_WaitOnFlagUntilTimeout>
 801df5e:	4603      	mov	r3, r0
 801df60:	2b00      	cmp	r3, #0
 801df62:	d001      	beq.n	801df68 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801df64:	2303      	movs	r3, #3
 801df66:	e038      	b.n	801dfda <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801df68:	69fb      	ldr	r3, [r7, #28]
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d10b      	bne.n	801df86 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801df6e:	69bb      	ldr	r3, [r7, #24]
 801df70:	881b      	ldrh	r3, [r3, #0]
 801df72:	461a      	mov	r2, r3
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801df7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801df7e:	69bb      	ldr	r3, [r7, #24]
 801df80:	3302      	adds	r3, #2
 801df82:	61bb      	str	r3, [r7, #24]
 801df84:	e007      	b.n	801df96 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801df86:	69fb      	ldr	r3, [r7, #28]
 801df88:	781a      	ldrb	r2, [r3, #0]
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801df90:	69fb      	ldr	r3, [r7, #28]
 801df92:	3301      	adds	r3, #1
 801df94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801df96:	68fb      	ldr	r3, [r7, #12]
 801df98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801df9c:	b29b      	uxth	r3, r3
 801df9e:	3b01      	subs	r3, #1
 801dfa0:	b29a      	uxth	r2, r3
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801dfae:	b29b      	uxth	r3, r3
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d1cc      	bne.n	801df4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801dfb4:	683b      	ldr	r3, [r7, #0]
 801dfb6:	9300      	str	r3, [sp, #0]
 801dfb8:	697b      	ldr	r3, [r7, #20]
 801dfba:	2200      	movs	r2, #0
 801dfbc:	2140      	movs	r1, #64	; 0x40
 801dfbe:	68f8      	ldr	r0, [r7, #12]
 801dfc0:	f000 fef7 	bl	801edb2 <UART_WaitOnFlagUntilTimeout>
 801dfc4:	4603      	mov	r3, r0
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d001      	beq.n	801dfce <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801dfca:	2303      	movs	r3, #3
 801dfcc:	e005      	b.n	801dfda <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	2220      	movs	r2, #32
 801dfd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	e000      	b.n	801dfda <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801dfd8:	2302      	movs	r3, #2
  }
}
 801dfda:	4618      	mov	r0, r3
 801dfdc:	3720      	adds	r7, #32
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	bd80      	pop	{r7, pc}
	...

0801dfe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801dfe4:	b580      	push	{r7, lr}
 801dfe6:	b0ba      	sub	sp, #232	; 0xe8
 801dfe8:	af00      	add	r7, sp, #0
 801dfea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	681b      	ldr	r3, [r3, #0]
 801dff0:	69db      	ldr	r3, [r3, #28]
 801dff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	689b      	ldr	r3, [r3, #8]
 801e006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801e00a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e00e:	f640 030f 	movw	r3, #2063	; 0x80f
 801e012:	4013      	ands	r3, r2
 801e014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801e018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d115      	bne.n	801e04c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801e020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e024:	f003 0320 	and.w	r3, r3, #32
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d00f      	beq.n	801e04c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801e02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e030:	f003 0320 	and.w	r3, r3, #32
 801e034:	2b00      	cmp	r3, #0
 801e036:	d009      	beq.n	801e04c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	f000 82b8 	beq.w	801e5b2 <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e046:	6878      	ldr	r0, [r7, #4]
 801e048:	4798      	blx	r3
      }
      return;
 801e04a:	e2b2      	b.n	801e5b2 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801e04c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e050:	2b00      	cmp	r3, #0
 801e052:	f000 811d 	beq.w	801e290 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801e056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e05a:	f003 0301 	and.w	r3, r3, #1
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d106      	bne.n	801e070 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801e062:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801e066:	4b88      	ldr	r3, [pc, #544]	; (801e288 <HAL_UART_IRQHandler+0x2a4>)
 801e068:	4013      	ands	r3, r2
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	f000 8110 	beq.w	801e290 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801e070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e074:	f003 0301 	and.w	r3, r3, #1
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d011      	beq.n	801e0a0 <HAL_UART_IRQHandler+0xbc>
 801e07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e084:	2b00      	cmp	r3, #0
 801e086:	d00b      	beq.n	801e0a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	2201      	movs	r2, #1
 801e08e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e096:	f043 0201 	orr.w	r2, r3, #1
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e0a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e0a4:	f003 0302 	and.w	r3, r3, #2
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d011      	beq.n	801e0d0 <HAL_UART_IRQHandler+0xec>
 801e0ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e0b0:	f003 0301 	and.w	r3, r3, #1
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d00b      	beq.n	801e0d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	2202      	movs	r2, #2
 801e0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e0c6:	f043 0204 	orr.w	r2, r3, #4
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e0d4:	f003 0304 	and.w	r3, r3, #4
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d011      	beq.n	801e100 <HAL_UART_IRQHandler+0x11c>
 801e0dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e0e0:	f003 0301 	and.w	r3, r3, #1
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d00b      	beq.n	801e100 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	2204      	movs	r2, #4
 801e0ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e0f6:	f043 0202 	orr.w	r2, r3, #2
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801e100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e104:	f003 0308 	and.w	r3, r3, #8
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d017      	beq.n	801e13c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801e10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e110:	f003 0320 	and.w	r3, r3, #32
 801e114:	2b00      	cmp	r3, #0
 801e116:	d105      	bne.n	801e124 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801e118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e11c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801e120:	2b00      	cmp	r3, #0
 801e122:	d00b      	beq.n	801e13c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	681b      	ldr	r3, [r3, #0]
 801e128:	2208      	movs	r2, #8
 801e12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e132:	f043 0208 	orr.w	r2, r3, #8
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801e13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e144:	2b00      	cmp	r3, #0
 801e146:	d012      	beq.n	801e16e <HAL_UART_IRQHandler+0x18a>
 801e148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e14c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801e150:	2b00      	cmp	r3, #0
 801e152:	d00c      	beq.n	801e16e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e15c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e164:	f043 0220 	orr.w	r2, r3, #32
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e174:	2b00      	cmp	r3, #0
 801e176:	f000 821e 	beq.w	801e5b6 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801e17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e17e:	f003 0320 	and.w	r3, r3, #32
 801e182:	2b00      	cmp	r3, #0
 801e184:	d00d      	beq.n	801e1a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801e186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e18a:	f003 0320 	and.w	r3, r3, #32
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d007      	beq.n	801e1a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e196:	2b00      	cmp	r3, #0
 801e198:	d003      	beq.n	801e1a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e19e:	6878      	ldr	r0, [r7, #4]
 801e1a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e1a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	689b      	ldr	r3, [r3, #8]
 801e1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1b6:	2b40      	cmp	r3, #64	; 0x40
 801e1b8:	d005      	beq.n	801e1c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801e1ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e1be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d053      	beq.n	801e26e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801e1c6:	6878      	ldr	r0, [r7, #4]
 801e1c8:	f000 ff80 	bl	801f0cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	689b      	ldr	r3, [r3, #8]
 801e1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1d6:	2b40      	cmp	r3, #64	; 0x40
 801e1d8:	d143      	bne.n	801e262 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	3308      	adds	r3, #8
 801e1e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e1e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e1e8:	e853 3f00 	ldrex	r3, [r3]
 801e1ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801e1f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e1f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e1f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	3308      	adds	r3, #8
 801e202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801e206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801e20a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e20e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801e212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e216:	e841 2300 	strex	r3, r2, [r1]
 801e21a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801e21e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e222:	2b00      	cmp	r3, #0
 801e224:	d1d9      	bne.n	801e1da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d013      	beq.n	801e256 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e232:	4a16      	ldr	r2, [pc, #88]	; (801e28c <HAL_UART_IRQHandler+0x2a8>)
 801e234:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e23a:	4618      	mov	r0, r3
 801e23c:	f7fb f98a 	bl	8019554 <HAL_DMA_Abort_IT>
 801e240:	4603      	mov	r3, r0
 801e242:	2b00      	cmp	r3, #0
 801e244:	d01d      	beq.n	801e282 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e24c:	687a      	ldr	r2, [r7, #4]
 801e24e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801e250:	4610      	mov	r0, r2
 801e252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e254:	e015      	b.n	801e282 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e260:	e00f      	b.n	801e282 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e268:	6878      	ldr	r0, [r7, #4]
 801e26a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e26c:	e009      	b.n	801e282 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e274:	6878      	ldr	r0, [r7, #4]
 801e276:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	2200      	movs	r2, #0
 801e27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801e280:	e199      	b.n	801e5b6 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e282:	bf00      	nop
    return;
 801e284:	e197      	b.n	801e5b6 <HAL_UART_IRQHandler+0x5d2>
 801e286:	bf00      	nop
 801e288:	04000120 	.word	0x04000120
 801e28c:	0801f195 	.word	0x0801f195

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e294:	2b01      	cmp	r3, #1
 801e296:	f040 8150 	bne.w	801e53a <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801e29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e29e:	f003 0310 	and.w	r3, r3, #16
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	f000 8149 	beq.w	801e53a <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801e2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e2ac:	f003 0310 	and.w	r3, r3, #16
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	f000 8142 	beq.w	801e53a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	2210      	movs	r2, #16
 801e2bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	689b      	ldr	r3, [r3, #8]
 801e2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e2c8:	2b40      	cmp	r3, #64	; 0x40
 801e2ca:	f040 80b8 	bne.w	801e43e <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	685b      	ldr	r3, [r3, #4]
 801e2d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801e2da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	f000 816b 	beq.w	801e5ba <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801e2ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801e2ee:	429a      	cmp	r2, r3
 801e2f0:	f080 8163 	bcs.w	801e5ba <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801e2fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e302:	69db      	ldr	r3, [r3, #28]
 801e304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e308:	f000 8086 	beq.w	801e418 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e318:	e853 3f00 	ldrex	r3, [r3]
 801e31c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801e320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801e324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	461a      	mov	r2, r3
 801e332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801e33a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e33e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801e342:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801e346:	e841 2300 	strex	r3, r2, [r1]
 801e34a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801e34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e352:	2b00      	cmp	r3, #0
 801e354:	d1da      	bne.n	801e30c <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	3308      	adds	r3, #8
 801e35c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e35e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e360:	e853 3f00 	ldrex	r3, [r3]
 801e364:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801e366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e368:	f023 0301 	bic.w	r3, r3, #1
 801e36c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	3308      	adds	r3, #8
 801e376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e37a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801e37e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e380:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801e382:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801e386:	e841 2300 	strex	r3, r2, [r1]
 801e38a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801e38c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e38e:	2b00      	cmp	r3, #0
 801e390:	d1e1      	bne.n	801e356 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	3308      	adds	r3, #8
 801e398:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e39a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e39c:	e853 3f00 	ldrex	r3, [r3]
 801e3a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801e3a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e3a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e3a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	3308      	adds	r3, #8
 801e3b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801e3b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 801e3b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e3ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801e3bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e3be:	e841 2300 	strex	r3, r2, [r1]
 801e3c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801e3c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d1e3      	bne.n	801e392 <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	2220      	movs	r2, #32
 801e3ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	2200      	movs	r2, #0
 801e3d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e3e0:	e853 3f00 	ldrex	r3, [r3]
 801e3e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801e3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e3e8:	f023 0310 	bic.w	r3, r3, #16
 801e3ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	461a      	mov	r2, r3
 801e3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e3fa:	65bb      	str	r3, [r7, #88]	; 0x58
 801e3fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e3fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e402:	e841 2300 	strex	r3, r2, [r1]
 801e406:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801e408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d1e4      	bne.n	801e3d8 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e412:	4618      	mov	r0, r3
 801e414:	f7fb f82e 	bl	8019474 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	2202      	movs	r2, #2
 801e41c:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801e424:	687a      	ldr	r2, [r7, #4]
 801e426:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801e42a:	687a      	ldr	r2, [r7, #4]
 801e42c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801e430:	b292      	uxth	r2, r2
 801e432:	1a8a      	subs	r2, r1, r2
 801e434:	b292      	uxth	r2, r2
 801e436:	4611      	mov	r1, r2
 801e438:	6878      	ldr	r0, [r7, #4]
 801e43a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801e43c:	e0bd      	b.n	801e5ba <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801e43e:	687b      	ldr	r3, [r7, #4]
 801e440:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e44a:	b29b      	uxth	r3, r3
 801e44c:	1ad3      	subs	r3, r2, r3
 801e44e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e458:	b29b      	uxth	r3, r3
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	f000 80af 	beq.w	801e5be <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801e460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801e464:	2b00      	cmp	r3, #0
 801e466:	f000 80aa 	beq.w	801e5be <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e472:	e853 3f00 	ldrex	r3, [r3]
 801e476:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801e478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e47a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801e47e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	461a      	mov	r2, r3
 801e488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e48c:	647b      	str	r3, [r7, #68]	; 0x44
 801e48e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e494:	e841 2300 	strex	r3, r2, [r1]
 801e498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801e49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d1e4      	bne.n	801e46a <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	3308      	adds	r3, #8
 801e4a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4aa:	e853 3f00 	ldrex	r3, [r3]
 801e4ae:	623b      	str	r3, [r7, #32]
   return(result);
 801e4b0:	6a3b      	ldr	r3, [r7, #32]
 801e4b2:	f023 0301 	bic.w	r3, r3, #1
 801e4b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	3308      	adds	r3, #8
 801e4c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e4c4:	633a      	str	r2, [r7, #48]	; 0x30
 801e4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e4c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e4ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4cc:	e841 2300 	strex	r3, r2, [r1]
 801e4d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801e4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d1e3      	bne.n	801e4a0 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	2220      	movs	r2, #32
 801e4dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	2200      	movs	r2, #0
 801e4e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e4f2:	693b      	ldr	r3, [r7, #16]
 801e4f4:	e853 3f00 	ldrex	r3, [r3]
 801e4f8:	60fb      	str	r3, [r7, #12]
   return(result);
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	f023 0310 	bic.w	r3, r3, #16
 801e500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	461a      	mov	r2, r3
 801e50a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e50e:	61fb      	str	r3, [r7, #28]
 801e510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e512:	69b9      	ldr	r1, [r7, #24]
 801e514:	69fa      	ldr	r2, [r7, #28]
 801e516:	e841 2300 	strex	r3, r2, [r1]
 801e51a:	617b      	str	r3, [r7, #20]
   return(result);
 801e51c:	697b      	ldr	r3, [r7, #20]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d1e4      	bne.n	801e4ec <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	2202      	movs	r2, #2
 801e526:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801e52e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801e532:	4611      	mov	r1, r2
 801e534:	6878      	ldr	r0, [r7, #4]
 801e536:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801e538:	e041      	b.n	801e5be <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801e53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e53e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e542:	2b00      	cmp	r3, #0
 801e544:	d010      	beq.n	801e568 <HAL_UART_IRQHandler+0x584>
 801e546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e54a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e54e:	2b00      	cmp	r3, #0
 801e550:	d00a      	beq.n	801e568 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801e55a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801e562:	6878      	ldr	r0, [r7, #4]
 801e564:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801e566:	e02d      	b.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801e568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e56c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e570:	2b00      	cmp	r3, #0
 801e572:	d00e      	beq.n	801e592 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801e574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d008      	beq.n	801e592 <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e584:	2b00      	cmp	r3, #0
 801e586:	d01c      	beq.n	801e5c2 <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e58c:	6878      	ldr	r0, [r7, #4]
 801e58e:	4798      	blx	r3
    }
    return;
 801e590:	e017      	b.n	801e5c2 <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801e592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d012      	beq.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
 801e59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d00c      	beq.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801e5aa:	6878      	ldr	r0, [r7, #4]
 801e5ac:	f000 fe0a 	bl	801f1c4 <UART_EndTransmit_IT>
    return;
 801e5b0:	e008      	b.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
      return;
 801e5b2:	bf00      	nop
 801e5b4:	e006      	b.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
    return;
 801e5b6:	bf00      	nop
 801e5b8:	e004      	b.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
      return;
 801e5ba:	bf00      	nop
 801e5bc:	e002      	b.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
      return;
 801e5be:	bf00      	nop
 801e5c0:	e000      	b.n	801e5c4 <HAL_UART_IRQHandler+0x5e0>
    return;
 801e5c2:	bf00      	nop
  }

}
 801e5c4:	37e8      	adds	r7, #232	; 0xe8
 801e5c6:	46bd      	mov	sp, r7
 801e5c8:	bd80      	pop	{r7, pc}
 801e5ca:	bf00      	nop

0801e5cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801e5cc:	b480      	push	{r7}
 801e5ce:	b083      	sub	sp, #12
 801e5d0:	af00      	add	r7, sp, #0
 801e5d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801e5d4:	bf00      	nop
 801e5d6:	370c      	adds	r7, #12
 801e5d8:	46bd      	mov	sp, r7
 801e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5de:	4770      	bx	lr

0801e5e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e5e0:	b480      	push	{r7}
 801e5e2:	b083      	sub	sp, #12
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801e5e8:	bf00      	nop
 801e5ea:	370c      	adds	r7, #12
 801e5ec:	46bd      	mov	sp, r7
 801e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5f2:	4770      	bx	lr

0801e5f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801e5f4:	b480      	push	{r7}
 801e5f6:	b083      	sub	sp, #12
 801e5f8:	af00      	add	r7, sp, #0
 801e5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801e5fc:	bf00      	nop
 801e5fe:	370c      	adds	r7, #12
 801e600:	46bd      	mov	sp, r7
 801e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e606:	4770      	bx	lr

0801e608 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801e608:	b480      	push	{r7}
 801e60a:	b083      	sub	sp, #12
 801e60c:	af00      	add	r7, sp, #0
 801e60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801e610:	bf00      	nop
 801e612:	370c      	adds	r7, #12
 801e614:	46bd      	mov	sp, r7
 801e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e61a:	4770      	bx	lr

0801e61c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801e61c:	b480      	push	{r7}
 801e61e:	b083      	sub	sp, #12
 801e620:	af00      	add	r7, sp, #0
 801e622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801e624:	bf00      	nop
 801e626:	370c      	adds	r7, #12
 801e628:	46bd      	mov	sp, r7
 801e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e62e:	4770      	bx	lr

0801e630 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801e630:	b480      	push	{r7}
 801e632:	b083      	sub	sp, #12
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801e638:	bf00      	nop
 801e63a:	370c      	adds	r7, #12
 801e63c:	46bd      	mov	sp, r7
 801e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e642:	4770      	bx	lr

0801e644 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801e644:	b480      	push	{r7}
 801e646:	b083      	sub	sp, #12
 801e648:	af00      	add	r7, sp, #0
 801e64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801e64c:	bf00      	nop
 801e64e:	370c      	adds	r7, #12
 801e650:	46bd      	mov	sp, r7
 801e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e656:	4770      	bx	lr

0801e658 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801e658:	b480      	push	{r7}
 801e65a:	b083      	sub	sp, #12
 801e65c:	af00      	add	r7, sp, #0
 801e65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801e660:	bf00      	nop
 801e662:	370c      	adds	r7, #12
 801e664:	46bd      	mov	sp, r7
 801e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e66a:	4770      	bx	lr

0801e66c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e66c:	b480      	push	{r7}
 801e66e:	b083      	sub	sp, #12
 801e670:	af00      	add	r7, sp, #0
 801e672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e674:	bf00      	nop
 801e676:	370c      	adds	r7, #12
 801e678:	46bd      	mov	sp, r7
 801e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e67e:	4770      	bx	lr

0801e680 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801e680:	b480      	push	{r7}
 801e682:	b083      	sub	sp, #12
 801e684:	af00      	add	r7, sp, #0
 801e686:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	4a16      	ldr	r2, [pc, #88]	; (801e6e4 <UART_InitCallbacksToDefault+0x64>)
 801e68c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	4a15      	ldr	r2, [pc, #84]	; (801e6e8 <UART_InitCallbacksToDefault+0x68>)
 801e694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	4a14      	ldr	r2, [pc, #80]	; (801e6ec <UART_InitCallbacksToDefault+0x6c>)
 801e69c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	4a13      	ldr	r2, [pc, #76]	; (801e6f0 <UART_InitCallbacksToDefault+0x70>)
 801e6a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	4a12      	ldr	r2, [pc, #72]	; (801e6f4 <UART_InitCallbacksToDefault+0x74>)
 801e6ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	4a11      	ldr	r2, [pc, #68]	; (801e6f8 <UART_InitCallbacksToDefault+0x78>)
 801e6b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	4a10      	ldr	r2, [pc, #64]	; (801e6fc <UART_InitCallbacksToDefault+0x7c>)
 801e6bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	4a0f      	ldr	r2, [pc, #60]	; (801e700 <UART_InitCallbacksToDefault+0x80>)
 801e6c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801e6c8:	687b      	ldr	r3, [r7, #4]
 801e6ca:	4a0e      	ldr	r2, [pc, #56]	; (801e704 <UART_InitCallbacksToDefault+0x84>)
 801e6cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	4a0d      	ldr	r2, [pc, #52]	; (801e708 <UART_InitCallbacksToDefault+0x88>)
 801e6d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801e6d8:	bf00      	nop
 801e6da:	370c      	adds	r7, #12
 801e6dc:	46bd      	mov	sp, r7
 801e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6e2:	4770      	bx	lr
 801e6e4:	0801e5e1 	.word	0x0801e5e1
 801e6e8:	0801e5cd 	.word	0x0801e5cd
 801e6ec:	0801e609 	.word	0x0801e609
 801e6f0:	0801e5f5 	.word	0x0801e5f5
 801e6f4:	0801e61d 	.word	0x0801e61d
 801e6f8:	0801e631 	.word	0x0801e631
 801e6fc:	0801e645 	.word	0x0801e645
 801e700:	0801e659 	.word	0x0801e659
 801e704:	0801e66d 	.word	0x0801e66d
 801e708:	08017a85 	.word	0x08017a85

0801e70c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b088      	sub	sp, #32
 801e710:	af00      	add	r7, sp, #0
 801e712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e714:	2300      	movs	r3, #0
 801e716:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	689a      	ldr	r2, [r3, #8]
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	691b      	ldr	r3, [r3, #16]
 801e720:	431a      	orrs	r2, r3
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	695b      	ldr	r3, [r3, #20]
 801e726:	431a      	orrs	r2, r3
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	69db      	ldr	r3, [r3, #28]
 801e72c:	4313      	orrs	r3, r2
 801e72e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	681a      	ldr	r2, [r3, #0]
 801e736:	4ba6      	ldr	r3, [pc, #664]	; (801e9d0 <UART_SetConfig+0x2c4>)
 801e738:	4013      	ands	r3, r2
 801e73a:	687a      	ldr	r2, [r7, #4]
 801e73c:	6812      	ldr	r2, [r2, #0]
 801e73e:	6979      	ldr	r1, [r7, #20]
 801e740:	430b      	orrs	r3, r1
 801e742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	685b      	ldr	r3, [r3, #4]
 801e74a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	68da      	ldr	r2, [r3, #12]
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	430a      	orrs	r2, r1
 801e758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	699b      	ldr	r3, [r3, #24]
 801e75e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	6a1b      	ldr	r3, [r3, #32]
 801e764:	697a      	ldr	r2, [r7, #20]
 801e766:	4313      	orrs	r3, r2
 801e768:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	689b      	ldr	r3, [r3, #8]
 801e770:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	697a      	ldr	r2, [r7, #20]
 801e77a:	430a      	orrs	r2, r1
 801e77c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	4a94      	ldr	r2, [pc, #592]	; (801e9d4 <UART_SetConfig+0x2c8>)
 801e784:	4293      	cmp	r3, r2
 801e786:	d120      	bne.n	801e7ca <UART_SetConfig+0xbe>
 801e788:	4b93      	ldr	r3, [pc, #588]	; (801e9d8 <UART_SetConfig+0x2cc>)
 801e78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e78e:	f003 0303 	and.w	r3, r3, #3
 801e792:	2b03      	cmp	r3, #3
 801e794:	d816      	bhi.n	801e7c4 <UART_SetConfig+0xb8>
 801e796:	a201      	add	r2, pc, #4	; (adr r2, 801e79c <UART_SetConfig+0x90>)
 801e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e79c:	0801e7ad 	.word	0x0801e7ad
 801e7a0:	0801e7b9 	.word	0x0801e7b9
 801e7a4:	0801e7b3 	.word	0x0801e7b3
 801e7a8:	0801e7bf 	.word	0x0801e7bf
 801e7ac:	2301      	movs	r3, #1
 801e7ae:	77fb      	strb	r3, [r7, #31]
 801e7b0:	e150      	b.n	801ea54 <UART_SetConfig+0x348>
 801e7b2:	2302      	movs	r3, #2
 801e7b4:	77fb      	strb	r3, [r7, #31]
 801e7b6:	e14d      	b.n	801ea54 <UART_SetConfig+0x348>
 801e7b8:	2304      	movs	r3, #4
 801e7ba:	77fb      	strb	r3, [r7, #31]
 801e7bc:	e14a      	b.n	801ea54 <UART_SetConfig+0x348>
 801e7be:	2308      	movs	r3, #8
 801e7c0:	77fb      	strb	r3, [r7, #31]
 801e7c2:	e147      	b.n	801ea54 <UART_SetConfig+0x348>
 801e7c4:	2310      	movs	r3, #16
 801e7c6:	77fb      	strb	r3, [r7, #31]
 801e7c8:	e144      	b.n	801ea54 <UART_SetConfig+0x348>
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	4a83      	ldr	r2, [pc, #524]	; (801e9dc <UART_SetConfig+0x2d0>)
 801e7d0:	4293      	cmp	r3, r2
 801e7d2:	d132      	bne.n	801e83a <UART_SetConfig+0x12e>
 801e7d4:	4b80      	ldr	r3, [pc, #512]	; (801e9d8 <UART_SetConfig+0x2cc>)
 801e7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e7da:	f003 030c 	and.w	r3, r3, #12
 801e7de:	2b0c      	cmp	r3, #12
 801e7e0:	d828      	bhi.n	801e834 <UART_SetConfig+0x128>
 801e7e2:	a201      	add	r2, pc, #4	; (adr r2, 801e7e8 <UART_SetConfig+0xdc>)
 801e7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7e8:	0801e81d 	.word	0x0801e81d
 801e7ec:	0801e835 	.word	0x0801e835
 801e7f0:	0801e835 	.word	0x0801e835
 801e7f4:	0801e835 	.word	0x0801e835
 801e7f8:	0801e829 	.word	0x0801e829
 801e7fc:	0801e835 	.word	0x0801e835
 801e800:	0801e835 	.word	0x0801e835
 801e804:	0801e835 	.word	0x0801e835
 801e808:	0801e823 	.word	0x0801e823
 801e80c:	0801e835 	.word	0x0801e835
 801e810:	0801e835 	.word	0x0801e835
 801e814:	0801e835 	.word	0x0801e835
 801e818:	0801e82f 	.word	0x0801e82f
 801e81c:	2300      	movs	r3, #0
 801e81e:	77fb      	strb	r3, [r7, #31]
 801e820:	e118      	b.n	801ea54 <UART_SetConfig+0x348>
 801e822:	2302      	movs	r3, #2
 801e824:	77fb      	strb	r3, [r7, #31]
 801e826:	e115      	b.n	801ea54 <UART_SetConfig+0x348>
 801e828:	2304      	movs	r3, #4
 801e82a:	77fb      	strb	r3, [r7, #31]
 801e82c:	e112      	b.n	801ea54 <UART_SetConfig+0x348>
 801e82e:	2308      	movs	r3, #8
 801e830:	77fb      	strb	r3, [r7, #31]
 801e832:	e10f      	b.n	801ea54 <UART_SetConfig+0x348>
 801e834:	2310      	movs	r3, #16
 801e836:	77fb      	strb	r3, [r7, #31]
 801e838:	e10c      	b.n	801ea54 <UART_SetConfig+0x348>
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	4a68      	ldr	r2, [pc, #416]	; (801e9e0 <UART_SetConfig+0x2d4>)
 801e840:	4293      	cmp	r3, r2
 801e842:	d120      	bne.n	801e886 <UART_SetConfig+0x17a>
 801e844:	4b64      	ldr	r3, [pc, #400]	; (801e9d8 <UART_SetConfig+0x2cc>)
 801e846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e84a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801e84e:	2b30      	cmp	r3, #48	; 0x30
 801e850:	d013      	beq.n	801e87a <UART_SetConfig+0x16e>
 801e852:	2b30      	cmp	r3, #48	; 0x30
 801e854:	d814      	bhi.n	801e880 <UART_SetConfig+0x174>
 801e856:	2b20      	cmp	r3, #32
 801e858:	d009      	beq.n	801e86e <UART_SetConfig+0x162>
 801e85a:	2b20      	cmp	r3, #32
 801e85c:	d810      	bhi.n	801e880 <UART_SetConfig+0x174>
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d002      	beq.n	801e868 <UART_SetConfig+0x15c>
 801e862:	2b10      	cmp	r3, #16
 801e864:	d006      	beq.n	801e874 <UART_SetConfig+0x168>
 801e866:	e00b      	b.n	801e880 <UART_SetConfig+0x174>
 801e868:	2300      	movs	r3, #0
 801e86a:	77fb      	strb	r3, [r7, #31]
 801e86c:	e0f2      	b.n	801ea54 <UART_SetConfig+0x348>
 801e86e:	2302      	movs	r3, #2
 801e870:	77fb      	strb	r3, [r7, #31]
 801e872:	e0ef      	b.n	801ea54 <UART_SetConfig+0x348>
 801e874:	2304      	movs	r3, #4
 801e876:	77fb      	strb	r3, [r7, #31]
 801e878:	e0ec      	b.n	801ea54 <UART_SetConfig+0x348>
 801e87a:	2308      	movs	r3, #8
 801e87c:	77fb      	strb	r3, [r7, #31]
 801e87e:	e0e9      	b.n	801ea54 <UART_SetConfig+0x348>
 801e880:	2310      	movs	r3, #16
 801e882:	77fb      	strb	r3, [r7, #31]
 801e884:	e0e6      	b.n	801ea54 <UART_SetConfig+0x348>
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	4a56      	ldr	r2, [pc, #344]	; (801e9e4 <UART_SetConfig+0x2d8>)
 801e88c:	4293      	cmp	r3, r2
 801e88e:	d120      	bne.n	801e8d2 <UART_SetConfig+0x1c6>
 801e890:	4b51      	ldr	r3, [pc, #324]	; (801e9d8 <UART_SetConfig+0x2cc>)
 801e892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e89a:	2bc0      	cmp	r3, #192	; 0xc0
 801e89c:	d013      	beq.n	801e8c6 <UART_SetConfig+0x1ba>
 801e89e:	2bc0      	cmp	r3, #192	; 0xc0
 801e8a0:	d814      	bhi.n	801e8cc <UART_SetConfig+0x1c0>
 801e8a2:	2b80      	cmp	r3, #128	; 0x80
 801e8a4:	d009      	beq.n	801e8ba <UART_SetConfig+0x1ae>
 801e8a6:	2b80      	cmp	r3, #128	; 0x80
 801e8a8:	d810      	bhi.n	801e8cc <UART_SetConfig+0x1c0>
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d002      	beq.n	801e8b4 <UART_SetConfig+0x1a8>
 801e8ae:	2b40      	cmp	r3, #64	; 0x40
 801e8b0:	d006      	beq.n	801e8c0 <UART_SetConfig+0x1b4>
 801e8b2:	e00b      	b.n	801e8cc <UART_SetConfig+0x1c0>
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	77fb      	strb	r3, [r7, #31]
 801e8b8:	e0cc      	b.n	801ea54 <UART_SetConfig+0x348>
 801e8ba:	2302      	movs	r3, #2
 801e8bc:	77fb      	strb	r3, [r7, #31]
 801e8be:	e0c9      	b.n	801ea54 <UART_SetConfig+0x348>
 801e8c0:	2304      	movs	r3, #4
 801e8c2:	77fb      	strb	r3, [r7, #31]
 801e8c4:	e0c6      	b.n	801ea54 <UART_SetConfig+0x348>
 801e8c6:	2308      	movs	r3, #8
 801e8c8:	77fb      	strb	r3, [r7, #31]
 801e8ca:	e0c3      	b.n	801ea54 <UART_SetConfig+0x348>
 801e8cc:	2310      	movs	r3, #16
 801e8ce:	77fb      	strb	r3, [r7, #31]
 801e8d0:	e0c0      	b.n	801ea54 <UART_SetConfig+0x348>
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	4a44      	ldr	r2, [pc, #272]	; (801e9e8 <UART_SetConfig+0x2dc>)
 801e8d8:	4293      	cmp	r3, r2
 801e8da:	d125      	bne.n	801e928 <UART_SetConfig+0x21c>
 801e8dc:	4b3e      	ldr	r3, [pc, #248]	; (801e9d8 <UART_SetConfig+0x2cc>)
 801e8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e8e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e8ea:	d017      	beq.n	801e91c <UART_SetConfig+0x210>
 801e8ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e8f0:	d817      	bhi.n	801e922 <UART_SetConfig+0x216>
 801e8f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e8f6:	d00b      	beq.n	801e910 <UART_SetConfig+0x204>
 801e8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e8fc:	d811      	bhi.n	801e922 <UART_SetConfig+0x216>
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d003      	beq.n	801e90a <UART_SetConfig+0x1fe>
 801e902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e906:	d006      	beq.n	801e916 <UART_SetConfig+0x20a>
 801e908:	e00b      	b.n	801e922 <UART_SetConfig+0x216>
 801e90a:	2300      	movs	r3, #0
 801e90c:	77fb      	strb	r3, [r7, #31]
 801e90e:	e0a1      	b.n	801ea54 <UART_SetConfig+0x348>
 801e910:	2302      	movs	r3, #2
 801e912:	77fb      	strb	r3, [r7, #31]
 801e914:	e09e      	b.n	801ea54 <UART_SetConfig+0x348>
 801e916:	2304      	movs	r3, #4
 801e918:	77fb      	strb	r3, [r7, #31]
 801e91a:	e09b      	b.n	801ea54 <UART_SetConfig+0x348>
 801e91c:	2308      	movs	r3, #8
 801e91e:	77fb      	strb	r3, [r7, #31]
 801e920:	e098      	b.n	801ea54 <UART_SetConfig+0x348>
 801e922:	2310      	movs	r3, #16
 801e924:	77fb      	strb	r3, [r7, #31]
 801e926:	e095      	b.n	801ea54 <UART_SetConfig+0x348>
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	4a2f      	ldr	r2, [pc, #188]	; (801e9ec <UART_SetConfig+0x2e0>)
 801e92e:	4293      	cmp	r3, r2
 801e930:	d125      	bne.n	801e97e <UART_SetConfig+0x272>
 801e932:	4b29      	ldr	r3, [pc, #164]	; (801e9d8 <UART_SetConfig+0x2cc>)
 801e934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801e93c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e940:	d017      	beq.n	801e972 <UART_SetConfig+0x266>
 801e942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e946:	d817      	bhi.n	801e978 <UART_SetConfig+0x26c>
 801e948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e94c:	d00b      	beq.n	801e966 <UART_SetConfig+0x25a>
 801e94e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e952:	d811      	bhi.n	801e978 <UART_SetConfig+0x26c>
 801e954:	2b00      	cmp	r3, #0
 801e956:	d003      	beq.n	801e960 <UART_SetConfig+0x254>
 801e958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e95c:	d006      	beq.n	801e96c <UART_SetConfig+0x260>
 801e95e:	e00b      	b.n	801e978 <UART_SetConfig+0x26c>
 801e960:	2301      	movs	r3, #1
 801e962:	77fb      	strb	r3, [r7, #31]
 801e964:	e076      	b.n	801ea54 <UART_SetConfig+0x348>
 801e966:	2302      	movs	r3, #2
 801e968:	77fb      	strb	r3, [r7, #31]
 801e96a:	e073      	b.n	801ea54 <UART_SetConfig+0x348>
 801e96c:	2304      	movs	r3, #4
 801e96e:	77fb      	strb	r3, [r7, #31]
 801e970:	e070      	b.n	801ea54 <UART_SetConfig+0x348>
 801e972:	2308      	movs	r3, #8
 801e974:	77fb      	strb	r3, [r7, #31]
 801e976:	e06d      	b.n	801ea54 <UART_SetConfig+0x348>
 801e978:	2310      	movs	r3, #16
 801e97a:	77fb      	strb	r3, [r7, #31]
 801e97c:	e06a      	b.n	801ea54 <UART_SetConfig+0x348>
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	4a1b      	ldr	r2, [pc, #108]	; (801e9f0 <UART_SetConfig+0x2e4>)
 801e984:	4293      	cmp	r3, r2
 801e986:	d138      	bne.n	801e9fa <UART_SetConfig+0x2ee>
 801e988:	4b13      	ldr	r3, [pc, #76]	; (801e9d8 <UART_SetConfig+0x2cc>)
 801e98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e98e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801e992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801e996:	d017      	beq.n	801e9c8 <UART_SetConfig+0x2bc>
 801e998:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801e99c:	d82a      	bhi.n	801e9f4 <UART_SetConfig+0x2e8>
 801e99e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e9a2:	d00b      	beq.n	801e9bc <UART_SetConfig+0x2b0>
 801e9a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e9a8:	d824      	bhi.n	801e9f4 <UART_SetConfig+0x2e8>
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d003      	beq.n	801e9b6 <UART_SetConfig+0x2aa>
 801e9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e9b2:	d006      	beq.n	801e9c2 <UART_SetConfig+0x2b6>
 801e9b4:	e01e      	b.n	801e9f4 <UART_SetConfig+0x2e8>
 801e9b6:	2300      	movs	r3, #0
 801e9b8:	77fb      	strb	r3, [r7, #31]
 801e9ba:	e04b      	b.n	801ea54 <UART_SetConfig+0x348>
 801e9bc:	2302      	movs	r3, #2
 801e9be:	77fb      	strb	r3, [r7, #31]
 801e9c0:	e048      	b.n	801ea54 <UART_SetConfig+0x348>
 801e9c2:	2304      	movs	r3, #4
 801e9c4:	77fb      	strb	r3, [r7, #31]
 801e9c6:	e045      	b.n	801ea54 <UART_SetConfig+0x348>
 801e9c8:	2308      	movs	r3, #8
 801e9ca:	77fb      	strb	r3, [r7, #31]
 801e9cc:	e042      	b.n	801ea54 <UART_SetConfig+0x348>
 801e9ce:	bf00      	nop
 801e9d0:	efff69f3 	.word	0xefff69f3
 801e9d4:	40011000 	.word	0x40011000
 801e9d8:	40023800 	.word	0x40023800
 801e9dc:	40004400 	.word	0x40004400
 801e9e0:	40004800 	.word	0x40004800
 801e9e4:	40004c00 	.word	0x40004c00
 801e9e8:	40005000 	.word	0x40005000
 801e9ec:	40011400 	.word	0x40011400
 801e9f0:	40007800 	.word	0x40007800
 801e9f4:	2310      	movs	r3, #16
 801e9f6:	77fb      	strb	r3, [r7, #31]
 801e9f8:	e02c      	b.n	801ea54 <UART_SetConfig+0x348>
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	681b      	ldr	r3, [r3, #0]
 801e9fe:	4a72      	ldr	r2, [pc, #456]	; (801ebc8 <UART_SetConfig+0x4bc>)
 801ea00:	4293      	cmp	r3, r2
 801ea02:	d125      	bne.n	801ea50 <UART_SetConfig+0x344>
 801ea04:	4b71      	ldr	r3, [pc, #452]	; (801ebcc <UART_SetConfig+0x4c0>)
 801ea06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ea0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801ea0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801ea12:	d017      	beq.n	801ea44 <UART_SetConfig+0x338>
 801ea14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801ea18:	d817      	bhi.n	801ea4a <UART_SetConfig+0x33e>
 801ea1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ea1e:	d00b      	beq.n	801ea38 <UART_SetConfig+0x32c>
 801ea20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ea24:	d811      	bhi.n	801ea4a <UART_SetConfig+0x33e>
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	d003      	beq.n	801ea32 <UART_SetConfig+0x326>
 801ea2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ea2e:	d006      	beq.n	801ea3e <UART_SetConfig+0x332>
 801ea30:	e00b      	b.n	801ea4a <UART_SetConfig+0x33e>
 801ea32:	2300      	movs	r3, #0
 801ea34:	77fb      	strb	r3, [r7, #31]
 801ea36:	e00d      	b.n	801ea54 <UART_SetConfig+0x348>
 801ea38:	2302      	movs	r3, #2
 801ea3a:	77fb      	strb	r3, [r7, #31]
 801ea3c:	e00a      	b.n	801ea54 <UART_SetConfig+0x348>
 801ea3e:	2304      	movs	r3, #4
 801ea40:	77fb      	strb	r3, [r7, #31]
 801ea42:	e007      	b.n	801ea54 <UART_SetConfig+0x348>
 801ea44:	2308      	movs	r3, #8
 801ea46:	77fb      	strb	r3, [r7, #31]
 801ea48:	e004      	b.n	801ea54 <UART_SetConfig+0x348>
 801ea4a:	2310      	movs	r3, #16
 801ea4c:	77fb      	strb	r3, [r7, #31]
 801ea4e:	e001      	b.n	801ea54 <UART_SetConfig+0x348>
 801ea50:	2310      	movs	r3, #16
 801ea52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	69db      	ldr	r3, [r3, #28]
 801ea58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ea5c:	d15b      	bne.n	801eb16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801ea5e:	7ffb      	ldrb	r3, [r7, #31]
 801ea60:	2b08      	cmp	r3, #8
 801ea62:	d828      	bhi.n	801eab6 <UART_SetConfig+0x3aa>
 801ea64:	a201      	add	r2, pc, #4	; (adr r2, 801ea6c <UART_SetConfig+0x360>)
 801ea66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea6a:	bf00      	nop
 801ea6c:	0801ea91 	.word	0x0801ea91
 801ea70:	0801ea99 	.word	0x0801ea99
 801ea74:	0801eaa1 	.word	0x0801eaa1
 801ea78:	0801eab7 	.word	0x0801eab7
 801ea7c:	0801eaa7 	.word	0x0801eaa7
 801ea80:	0801eab7 	.word	0x0801eab7
 801ea84:	0801eab7 	.word	0x0801eab7
 801ea88:	0801eab7 	.word	0x0801eab7
 801ea8c:	0801eaaf 	.word	0x0801eaaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ea90:	f7fd fc3e 	bl	801c310 <HAL_RCC_GetPCLK1Freq>
 801ea94:	61b8      	str	r0, [r7, #24]
        break;
 801ea96:	e013      	b.n	801eac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ea98:	f7fd fc4e 	bl	801c338 <HAL_RCC_GetPCLK2Freq>
 801ea9c:	61b8      	str	r0, [r7, #24]
        break;
 801ea9e:	e00f      	b.n	801eac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801eaa0:	4b4b      	ldr	r3, [pc, #300]	; (801ebd0 <UART_SetConfig+0x4c4>)
 801eaa2:	61bb      	str	r3, [r7, #24]
        break;
 801eaa4:	e00c      	b.n	801eac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801eaa6:	f7fd fb61 	bl	801c16c <HAL_RCC_GetSysClockFreq>
 801eaaa:	61b8      	str	r0, [r7, #24]
        break;
 801eaac:	e008      	b.n	801eac0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801eaae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eab2:	61bb      	str	r3, [r7, #24]
        break;
 801eab4:	e004      	b.n	801eac0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801eab6:	2300      	movs	r3, #0
 801eab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801eaba:	2301      	movs	r3, #1
 801eabc:	77bb      	strb	r3, [r7, #30]
        break;
 801eabe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801eac0:	69bb      	ldr	r3, [r7, #24]
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d074      	beq.n	801ebb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801eac6:	69bb      	ldr	r3, [r7, #24]
 801eac8:	005a      	lsls	r2, r3, #1
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	685b      	ldr	r3, [r3, #4]
 801eace:	085b      	lsrs	r3, r3, #1
 801ead0:	441a      	add	r2, r3
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	685b      	ldr	r3, [r3, #4]
 801ead6:	fbb2 f3f3 	udiv	r3, r2, r3
 801eada:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801eadc:	693b      	ldr	r3, [r7, #16]
 801eade:	2b0f      	cmp	r3, #15
 801eae0:	d916      	bls.n	801eb10 <UART_SetConfig+0x404>
 801eae2:	693b      	ldr	r3, [r7, #16]
 801eae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eae8:	d212      	bcs.n	801eb10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801eaea:	693b      	ldr	r3, [r7, #16]
 801eaec:	b29b      	uxth	r3, r3
 801eaee:	f023 030f 	bic.w	r3, r3, #15
 801eaf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801eaf4:	693b      	ldr	r3, [r7, #16]
 801eaf6:	085b      	lsrs	r3, r3, #1
 801eaf8:	b29b      	uxth	r3, r3
 801eafa:	f003 0307 	and.w	r3, r3, #7
 801eafe:	b29a      	uxth	r2, r3
 801eb00:	89fb      	ldrh	r3, [r7, #14]
 801eb02:	4313      	orrs	r3, r2
 801eb04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	89fa      	ldrh	r2, [r7, #14]
 801eb0c:	60da      	str	r2, [r3, #12]
 801eb0e:	e04f      	b.n	801ebb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801eb10:	2301      	movs	r3, #1
 801eb12:	77bb      	strb	r3, [r7, #30]
 801eb14:	e04c      	b.n	801ebb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801eb16:	7ffb      	ldrb	r3, [r7, #31]
 801eb18:	2b08      	cmp	r3, #8
 801eb1a:	d828      	bhi.n	801eb6e <UART_SetConfig+0x462>
 801eb1c:	a201      	add	r2, pc, #4	; (adr r2, 801eb24 <UART_SetConfig+0x418>)
 801eb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eb22:	bf00      	nop
 801eb24:	0801eb49 	.word	0x0801eb49
 801eb28:	0801eb51 	.word	0x0801eb51
 801eb2c:	0801eb59 	.word	0x0801eb59
 801eb30:	0801eb6f 	.word	0x0801eb6f
 801eb34:	0801eb5f 	.word	0x0801eb5f
 801eb38:	0801eb6f 	.word	0x0801eb6f
 801eb3c:	0801eb6f 	.word	0x0801eb6f
 801eb40:	0801eb6f 	.word	0x0801eb6f
 801eb44:	0801eb67 	.word	0x0801eb67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801eb48:	f7fd fbe2 	bl	801c310 <HAL_RCC_GetPCLK1Freq>
 801eb4c:	61b8      	str	r0, [r7, #24]
        break;
 801eb4e:	e013      	b.n	801eb78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801eb50:	f7fd fbf2 	bl	801c338 <HAL_RCC_GetPCLK2Freq>
 801eb54:	61b8      	str	r0, [r7, #24]
        break;
 801eb56:	e00f      	b.n	801eb78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801eb58:	4b1d      	ldr	r3, [pc, #116]	; (801ebd0 <UART_SetConfig+0x4c4>)
 801eb5a:	61bb      	str	r3, [r7, #24]
        break;
 801eb5c:	e00c      	b.n	801eb78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801eb5e:	f7fd fb05 	bl	801c16c <HAL_RCC_GetSysClockFreq>
 801eb62:	61b8      	str	r0, [r7, #24]
        break;
 801eb64:	e008      	b.n	801eb78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801eb66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eb6a:	61bb      	str	r3, [r7, #24]
        break;
 801eb6c:	e004      	b.n	801eb78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801eb6e:	2300      	movs	r3, #0
 801eb70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801eb72:	2301      	movs	r3, #1
 801eb74:	77bb      	strb	r3, [r7, #30]
        break;
 801eb76:	bf00      	nop
    }

    if (pclk != 0U)
 801eb78:	69bb      	ldr	r3, [r7, #24]
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d018      	beq.n	801ebb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	685b      	ldr	r3, [r3, #4]
 801eb82:	085a      	lsrs	r2, r3, #1
 801eb84:	69bb      	ldr	r3, [r7, #24]
 801eb86:	441a      	add	r2, r3
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	685b      	ldr	r3, [r3, #4]
 801eb8c:	fbb2 f3f3 	udiv	r3, r2, r3
 801eb90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801eb92:	693b      	ldr	r3, [r7, #16]
 801eb94:	2b0f      	cmp	r3, #15
 801eb96:	d909      	bls.n	801ebac <UART_SetConfig+0x4a0>
 801eb98:	693b      	ldr	r3, [r7, #16]
 801eb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eb9e:	d205      	bcs.n	801ebac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801eba0:	693b      	ldr	r3, [r7, #16]
 801eba2:	b29a      	uxth	r2, r3
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	60da      	str	r2, [r3, #12]
 801ebaa:	e001      	b.n	801ebb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801ebac:	2301      	movs	r3, #1
 801ebae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	2200      	movs	r2, #0
 801ebba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801ebbc:	7fbb      	ldrb	r3, [r7, #30]
}
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	3720      	adds	r7, #32
 801ebc2:	46bd      	mov	sp, r7
 801ebc4:	bd80      	pop	{r7, pc}
 801ebc6:	bf00      	nop
 801ebc8:	40007c00 	.word	0x40007c00
 801ebcc:	40023800 	.word	0x40023800
 801ebd0:	00f42400 	.word	0x00f42400

0801ebd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801ebd4:	b480      	push	{r7}
 801ebd6:	b083      	sub	sp, #12
 801ebd8:	af00      	add	r7, sp, #0
 801ebda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebe0:	f003 0301 	and.w	r3, r3, #1
 801ebe4:	2b00      	cmp	r3, #0
 801ebe6:	d00a      	beq.n	801ebfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	685b      	ldr	r3, [r3, #4]
 801ebee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	681b      	ldr	r3, [r3, #0]
 801ebfa:	430a      	orrs	r2, r1
 801ebfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec02:	f003 0302 	and.w	r3, r3, #2
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d00a      	beq.n	801ec20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	681b      	ldr	r3, [r3, #0]
 801ec0e:	685b      	ldr	r3, [r3, #4]
 801ec10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	430a      	orrs	r2, r1
 801ec1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec24:	f003 0304 	and.w	r3, r3, #4
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d00a      	beq.n	801ec42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	685b      	ldr	r3, [r3, #4]
 801ec32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	681b      	ldr	r3, [r3, #0]
 801ec3e:	430a      	orrs	r2, r1
 801ec40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec46:	f003 0308 	and.w	r3, r3, #8
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d00a      	beq.n	801ec64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	685b      	ldr	r3, [r3, #4]
 801ec54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	430a      	orrs	r2, r1
 801ec62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec68:	f003 0310 	and.w	r3, r3, #16
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d00a      	beq.n	801ec86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	689b      	ldr	r3, [r3, #8]
 801ec76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	430a      	orrs	r2, r1
 801ec84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec8a:	f003 0320 	and.w	r3, r3, #32
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	d00a      	beq.n	801eca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	689b      	ldr	r3, [r3, #8]
 801ec98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	430a      	orrs	r2, r1
 801eca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	d01a      	beq.n	801ecea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	685b      	ldr	r3, [r3, #4]
 801ecba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	430a      	orrs	r2, r1
 801ecc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ecd2:	d10a      	bne.n	801ecea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	685b      	ldr	r3, [r3, #4]
 801ecda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	430a      	orrs	r2, r1
 801ece8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d00a      	beq.n	801ed0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	685b      	ldr	r3, [r3, #4]
 801ecfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	430a      	orrs	r2, r1
 801ed0a:	605a      	str	r2, [r3, #4]
  }
}
 801ed0c:	bf00      	nop
 801ed0e:	370c      	adds	r7, #12
 801ed10:	46bd      	mov	sp, r7
 801ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed16:	4770      	bx	lr

0801ed18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ed18:	b580      	push	{r7, lr}
 801ed1a:	b086      	sub	sp, #24
 801ed1c:	af02      	add	r7, sp, #8
 801ed1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	2200      	movs	r2, #0
 801ed24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801ed28:	f7f9 fb10 	bl	801834c <HAL_GetTick>
 801ed2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	f003 0308 	and.w	r3, r3, #8
 801ed38:	2b08      	cmp	r3, #8
 801ed3a:	d10e      	bne.n	801ed5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ed3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801ed40:	9300      	str	r3, [sp, #0]
 801ed42:	68fb      	ldr	r3, [r7, #12]
 801ed44:	2200      	movs	r2, #0
 801ed46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ed4a:	6878      	ldr	r0, [r7, #4]
 801ed4c:	f000 f831 	bl	801edb2 <UART_WaitOnFlagUntilTimeout>
 801ed50:	4603      	mov	r3, r0
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d001      	beq.n	801ed5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ed56:	2303      	movs	r3, #3
 801ed58:	e027      	b.n	801edaa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	f003 0304 	and.w	r3, r3, #4
 801ed64:	2b04      	cmp	r3, #4
 801ed66:	d10e      	bne.n	801ed86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ed68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801ed6c:	9300      	str	r3, [sp, #0]
 801ed6e:	68fb      	ldr	r3, [r7, #12]
 801ed70:	2200      	movs	r2, #0
 801ed72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801ed76:	6878      	ldr	r0, [r7, #4]
 801ed78:	f000 f81b 	bl	801edb2 <UART_WaitOnFlagUntilTimeout>
 801ed7c:	4603      	mov	r3, r0
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d001      	beq.n	801ed86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ed82:	2303      	movs	r3, #3
 801ed84:	e011      	b.n	801edaa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	2220      	movs	r2, #32
 801ed8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	2220      	movs	r2, #32
 801ed90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	2200      	movs	r2, #0
 801ed98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	2200      	movs	r2, #0
 801ed9e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	2200      	movs	r2, #0
 801eda4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801eda8:	2300      	movs	r3, #0
}
 801edaa:	4618      	mov	r0, r3
 801edac:	3710      	adds	r7, #16
 801edae:	46bd      	mov	sp, r7
 801edb0:	bd80      	pop	{r7, pc}

0801edb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801edb2:	b580      	push	{r7, lr}
 801edb4:	b09c      	sub	sp, #112	; 0x70
 801edb6:	af00      	add	r7, sp, #0
 801edb8:	60f8      	str	r0, [r7, #12]
 801edba:	60b9      	str	r1, [r7, #8]
 801edbc:	603b      	str	r3, [r7, #0]
 801edbe:	4613      	mov	r3, r2
 801edc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801edc2:	e0a7      	b.n	801ef14 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801edc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801edc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edca:	f000 80a3 	beq.w	801ef14 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801edce:	f7f9 fabd 	bl	801834c <HAL_GetTick>
 801edd2:	4602      	mov	r2, r0
 801edd4:	683b      	ldr	r3, [r7, #0]
 801edd6:	1ad3      	subs	r3, r2, r3
 801edd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801edda:	429a      	cmp	r2, r3
 801eddc:	d302      	bcc.n	801ede4 <UART_WaitOnFlagUntilTimeout+0x32>
 801edde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d13f      	bne.n	801ee64 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801edea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801edec:	e853 3f00 	ldrex	r3, [r3]
 801edf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801edf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801edf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801edf8:	667b      	str	r3, [r7, #100]	; 0x64
 801edfa:	68fb      	ldr	r3, [r7, #12]
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	461a      	mov	r2, r3
 801ee00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ee02:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ee04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ee06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ee08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ee0a:	e841 2300 	strex	r3, r2, [r1]
 801ee0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ee10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d1e6      	bne.n	801ede4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	3308      	adds	r3, #8
 801ee1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ee20:	e853 3f00 	ldrex	r3, [r3]
 801ee24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ee26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee28:	f023 0301 	bic.w	r3, r3, #1
 801ee2c:	663b      	str	r3, [r7, #96]	; 0x60
 801ee2e:	68fb      	ldr	r3, [r7, #12]
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	3308      	adds	r3, #8
 801ee34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ee36:	64ba      	str	r2, [r7, #72]	; 0x48
 801ee38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ee3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ee3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ee3e:	e841 2300 	strex	r3, r2, [r1]
 801ee42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801ee44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d1e5      	bne.n	801ee16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	2220      	movs	r2, #32
 801ee4e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	2220      	movs	r2, #32
 801ee54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	2200      	movs	r2, #0
 801ee5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801ee60:	2303      	movs	r3, #3
 801ee62:	e068      	b.n	801ef36 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ee64:	68fb      	ldr	r3, [r7, #12]
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	f003 0304 	and.w	r3, r3, #4
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d050      	beq.n	801ef14 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	69db      	ldr	r3, [r3, #28]
 801ee78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ee7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ee80:	d148      	bne.n	801ef14 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ee82:	68fb      	ldr	r3, [r7, #12]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ee8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801ee8c:	68fb      	ldr	r3, [r7, #12]
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee94:	e853 3f00 	ldrex	r3, [r3]
 801ee98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801eea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	461a      	mov	r2, r3
 801eea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eeaa:	637b      	str	r3, [r7, #52]	; 0x34
 801eeac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eeae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801eeb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eeb2:	e841 2300 	strex	r3, r2, [r1]
 801eeb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	d1e6      	bne.n	801ee8c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	3308      	adds	r3, #8
 801eec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eec6:	697b      	ldr	r3, [r7, #20]
 801eec8:	e853 3f00 	ldrex	r3, [r3]
 801eecc:	613b      	str	r3, [r7, #16]
   return(result);
 801eece:	693b      	ldr	r3, [r7, #16]
 801eed0:	f023 0301 	bic.w	r3, r3, #1
 801eed4:	66bb      	str	r3, [r7, #104]	; 0x68
 801eed6:	68fb      	ldr	r3, [r7, #12]
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	3308      	adds	r3, #8
 801eedc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eede:	623a      	str	r2, [r7, #32]
 801eee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eee2:	69f9      	ldr	r1, [r7, #28]
 801eee4:	6a3a      	ldr	r2, [r7, #32]
 801eee6:	e841 2300 	strex	r3, r2, [r1]
 801eeea:	61bb      	str	r3, [r7, #24]
   return(result);
 801eeec:	69bb      	ldr	r3, [r7, #24]
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d1e5      	bne.n	801eebe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	2220      	movs	r2, #32
 801eef6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	2220      	movs	r2, #32
 801eefc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	2220      	movs	r2, #32
 801ef04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	2200      	movs	r2, #0
 801ef0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801ef10:	2303      	movs	r3, #3
 801ef12:	e010      	b.n	801ef36 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ef14:	68fb      	ldr	r3, [r7, #12]
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	69da      	ldr	r2, [r3, #28]
 801ef1a:	68bb      	ldr	r3, [r7, #8]
 801ef1c:	4013      	ands	r3, r2
 801ef1e:	68ba      	ldr	r2, [r7, #8]
 801ef20:	429a      	cmp	r2, r3
 801ef22:	bf0c      	ite	eq
 801ef24:	2301      	moveq	r3, #1
 801ef26:	2300      	movne	r3, #0
 801ef28:	b2db      	uxtb	r3, r3
 801ef2a:	461a      	mov	r2, r3
 801ef2c:	79fb      	ldrb	r3, [r7, #7]
 801ef2e:	429a      	cmp	r2, r3
 801ef30:	f43f af48 	beq.w	801edc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ef34:	2300      	movs	r3, #0
}
 801ef36:	4618      	mov	r0, r3
 801ef38:	3770      	adds	r7, #112	; 0x70
 801ef3a:	46bd      	mov	sp, r7
 801ef3c:	bd80      	pop	{r7, pc}
	...

0801ef40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ef40:	b480      	push	{r7}
 801ef42:	b097      	sub	sp, #92	; 0x5c
 801ef44:	af00      	add	r7, sp, #0
 801ef46:	60f8      	str	r0, [r7, #12]
 801ef48:	60b9      	str	r1, [r7, #8]
 801ef4a:	4613      	mov	r3, r2
 801ef4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801ef4e:	68fb      	ldr	r3, [r7, #12]
 801ef50:	68ba      	ldr	r2, [r7, #8]
 801ef52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801ef54:	68fb      	ldr	r3, [r7, #12]
 801ef56:	88fa      	ldrh	r2, [r7, #6]
 801ef58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	88fa      	ldrh	r2, [r7, #6]
 801ef60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	2200      	movs	r2, #0
 801ef68:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	689b      	ldr	r3, [r3, #8]
 801ef6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ef72:	d10e      	bne.n	801ef92 <UART_Start_Receive_IT+0x52>
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	691b      	ldr	r3, [r3, #16]
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	d105      	bne.n	801ef88 <UART_Start_Receive_IT+0x48>
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 801ef82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801ef86:	e02d      	b.n	801efe4 <UART_Start_Receive_IT+0xa4>
 801ef88:	68fb      	ldr	r3, [r7, #12]
 801ef8a:	22ff      	movs	r2, #255	; 0xff
 801ef8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801ef90:	e028      	b.n	801efe4 <UART_Start_Receive_IT+0xa4>
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	689b      	ldr	r3, [r3, #8]
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d10d      	bne.n	801efb6 <UART_Start_Receive_IT+0x76>
 801ef9a:	68fb      	ldr	r3, [r7, #12]
 801ef9c:	691b      	ldr	r3, [r3, #16]
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	d104      	bne.n	801efac <UART_Start_Receive_IT+0x6c>
 801efa2:	68fb      	ldr	r3, [r7, #12]
 801efa4:	22ff      	movs	r2, #255	; 0xff
 801efa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801efaa:	e01b      	b.n	801efe4 <UART_Start_Receive_IT+0xa4>
 801efac:	68fb      	ldr	r3, [r7, #12]
 801efae:	227f      	movs	r2, #127	; 0x7f
 801efb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801efb4:	e016      	b.n	801efe4 <UART_Start_Receive_IT+0xa4>
 801efb6:	68fb      	ldr	r3, [r7, #12]
 801efb8:	689b      	ldr	r3, [r3, #8]
 801efba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801efbe:	d10d      	bne.n	801efdc <UART_Start_Receive_IT+0x9c>
 801efc0:	68fb      	ldr	r3, [r7, #12]
 801efc2:	691b      	ldr	r3, [r3, #16]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d104      	bne.n	801efd2 <UART_Start_Receive_IT+0x92>
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	227f      	movs	r2, #127	; 0x7f
 801efcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801efd0:	e008      	b.n	801efe4 <UART_Start_Receive_IT+0xa4>
 801efd2:	68fb      	ldr	r3, [r7, #12]
 801efd4:	223f      	movs	r2, #63	; 0x3f
 801efd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801efda:	e003      	b.n	801efe4 <UART_Start_Receive_IT+0xa4>
 801efdc:	68fb      	ldr	r3, [r7, #12]
 801efde:	2200      	movs	r2, #0
 801efe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801efe4:	68fb      	ldr	r3, [r7, #12]
 801efe6:	2200      	movs	r2, #0
 801efe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801efec:	68fb      	ldr	r3, [r7, #12]
 801efee:	2222      	movs	r2, #34	; 0x22
 801eff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eff4:	68fb      	ldr	r3, [r7, #12]
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	3308      	adds	r3, #8
 801effa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801effc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801effe:	e853 3f00 	ldrex	r3, [r3]
 801f002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f006:	f043 0301 	orr.w	r3, r3, #1
 801f00a:	657b      	str	r3, [r7, #84]	; 0x54
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	3308      	adds	r3, #8
 801f012:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f014:	64ba      	str	r2, [r7, #72]	; 0x48
 801f016:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f018:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801f01a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f01c:	e841 2300 	strex	r3, r2, [r1]
 801f020:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801f022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f024:	2b00      	cmp	r3, #0
 801f026:	d1e5      	bne.n	801eff4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	689b      	ldr	r3, [r3, #8]
 801f02c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f030:	d107      	bne.n	801f042 <UART_Start_Receive_IT+0x102>
 801f032:	68fb      	ldr	r3, [r7, #12]
 801f034:	691b      	ldr	r3, [r3, #16]
 801f036:	2b00      	cmp	r3, #0
 801f038:	d103      	bne.n	801f042 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801f03a:	68fb      	ldr	r3, [r7, #12]
 801f03c:	4a21      	ldr	r2, [pc, #132]	; (801f0c4 <UART_Start_Receive_IT+0x184>)
 801f03e:	669a      	str	r2, [r3, #104]	; 0x68
 801f040:	e002      	b.n	801f048 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801f042:	68fb      	ldr	r3, [r7, #12]
 801f044:	4a20      	ldr	r2, [pc, #128]	; (801f0c8 <UART_Start_Receive_IT+0x188>)
 801f046:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	691b      	ldr	r3, [r3, #16]
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d019      	beq.n	801f084 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f058:	e853 3f00 	ldrex	r3, [r3]
 801f05c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801f05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f060:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801f064:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	461a      	mov	r2, r3
 801f06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f06e:	637b      	str	r3, [r7, #52]	; 0x34
 801f070:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f076:	e841 2300 	strex	r3, r2, [r1]
 801f07a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f07e:	2b00      	cmp	r3, #0
 801f080:	d1e6      	bne.n	801f050 <UART_Start_Receive_IT+0x110>
 801f082:	e018      	b.n	801f0b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801f084:	68fb      	ldr	r3, [r7, #12]
 801f086:	681b      	ldr	r3, [r3, #0]
 801f088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f08a:	697b      	ldr	r3, [r7, #20]
 801f08c:	e853 3f00 	ldrex	r3, [r3]
 801f090:	613b      	str	r3, [r7, #16]
   return(result);
 801f092:	693b      	ldr	r3, [r7, #16]
 801f094:	f043 0320 	orr.w	r3, r3, #32
 801f098:	653b      	str	r3, [r7, #80]	; 0x50
 801f09a:	68fb      	ldr	r3, [r7, #12]
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	461a      	mov	r2, r3
 801f0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0a2:	623b      	str	r3, [r7, #32]
 801f0a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f0a6:	69f9      	ldr	r1, [r7, #28]
 801f0a8:	6a3a      	ldr	r2, [r7, #32]
 801f0aa:	e841 2300 	strex	r3, r2, [r1]
 801f0ae:	61bb      	str	r3, [r7, #24]
   return(result);
 801f0b0:	69bb      	ldr	r3, [r7, #24]
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d1e6      	bne.n	801f084 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801f0b6:	2300      	movs	r3, #0
}
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	375c      	adds	r7, #92	; 0x5c
 801f0bc:	46bd      	mov	sp, r7
 801f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0c2:	4770      	bx	lr
 801f0c4:	0801f38b 	.word	0x0801f38b
 801f0c8:	0801f21d 	.word	0x0801f21d

0801f0cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801f0cc:	b480      	push	{r7}
 801f0ce:	b095      	sub	sp, #84	; 0x54
 801f0d0:	af00      	add	r7, sp, #0
 801f0d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f0dc:	e853 3f00 	ldrex	r3, [r3]
 801f0e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	461a      	mov	r2, r3
 801f0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f0f2:	643b      	str	r3, [r7, #64]	; 0x40
 801f0f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f0f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f0f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f0fa:	e841 2300 	strex	r3, r2, [r1]
 801f0fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f102:	2b00      	cmp	r3, #0
 801f104:	d1e6      	bne.n	801f0d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	3308      	adds	r3, #8
 801f10c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f10e:	6a3b      	ldr	r3, [r7, #32]
 801f110:	e853 3f00 	ldrex	r3, [r3]
 801f114:	61fb      	str	r3, [r7, #28]
   return(result);
 801f116:	69fb      	ldr	r3, [r7, #28]
 801f118:	f023 0301 	bic.w	r3, r3, #1
 801f11c:	64bb      	str	r3, [r7, #72]	; 0x48
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	3308      	adds	r3, #8
 801f124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f126:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f128:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f12a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f12c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f12e:	e841 2300 	strex	r3, r2, [r1]
 801f132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f136:	2b00      	cmp	r3, #0
 801f138:	d1e5      	bne.n	801f106 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f13e:	2b01      	cmp	r3, #1
 801f140:	d118      	bne.n	801f174 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	e853 3f00 	ldrex	r3, [r3]
 801f14e:	60bb      	str	r3, [r7, #8]
   return(result);
 801f150:	68bb      	ldr	r3, [r7, #8]
 801f152:	f023 0310 	bic.w	r3, r3, #16
 801f156:	647b      	str	r3, [r7, #68]	; 0x44
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	461a      	mov	r2, r3
 801f15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f160:	61bb      	str	r3, [r7, #24]
 801f162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f164:	6979      	ldr	r1, [r7, #20]
 801f166:	69ba      	ldr	r2, [r7, #24]
 801f168:	e841 2300 	strex	r3, r2, [r1]
 801f16c:	613b      	str	r3, [r7, #16]
   return(result);
 801f16e:	693b      	ldr	r3, [r7, #16]
 801f170:	2b00      	cmp	r3, #0
 801f172:	d1e6      	bne.n	801f142 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	2220      	movs	r2, #32
 801f178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	2200      	movs	r2, #0
 801f180:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2200      	movs	r2, #0
 801f186:	669a      	str	r2, [r3, #104]	; 0x68
}
 801f188:	bf00      	nop
 801f18a:	3754      	adds	r7, #84	; 0x54
 801f18c:	46bd      	mov	sp, r7
 801f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f192:	4770      	bx	lr

0801f194 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f194:	b580      	push	{r7, lr}
 801f196:	b084      	sub	sp, #16
 801f198:	af00      	add	r7, sp, #0
 801f19a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f1a2:	68fb      	ldr	r3, [r7, #12]
 801f1a4:	2200      	movs	r2, #0
 801f1a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801f1aa:	68fb      	ldr	r3, [r7, #12]
 801f1ac:	2200      	movs	r2, #0
 801f1ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f1b8:	68f8      	ldr	r0, [r7, #12]
 801f1ba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f1bc:	bf00      	nop
 801f1be:	3710      	adds	r7, #16
 801f1c0:	46bd      	mov	sp, r7
 801f1c2:	bd80      	pop	{r7, pc}

0801f1c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f1c4:	b580      	push	{r7, lr}
 801f1c6:	b088      	sub	sp, #32
 801f1c8:	af00      	add	r7, sp, #0
 801f1ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f1d2:	68fb      	ldr	r3, [r7, #12]
 801f1d4:	e853 3f00 	ldrex	r3, [r3]
 801f1d8:	60bb      	str	r3, [r7, #8]
   return(result);
 801f1da:	68bb      	ldr	r3, [r7, #8]
 801f1dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f1e0:	61fb      	str	r3, [r7, #28]
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	461a      	mov	r2, r3
 801f1e8:	69fb      	ldr	r3, [r7, #28]
 801f1ea:	61bb      	str	r3, [r7, #24]
 801f1ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f1ee:	6979      	ldr	r1, [r7, #20]
 801f1f0:	69ba      	ldr	r2, [r7, #24]
 801f1f2:	e841 2300 	strex	r3, r2, [r1]
 801f1f6:	613b      	str	r3, [r7, #16]
   return(result);
 801f1f8:	693b      	ldr	r3, [r7, #16]
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d1e6      	bne.n	801f1cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	2220      	movs	r2, #32
 801f202:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	2200      	movs	r2, #0
 801f208:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f210:	6878      	ldr	r0, [r7, #4]
 801f212:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f214:	bf00      	nop
 801f216:	3720      	adds	r7, #32
 801f218:	46bd      	mov	sp, r7
 801f21a:	bd80      	pop	{r7, pc}

0801f21c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f21c:	b580      	push	{r7, lr}
 801f21e:	b096      	sub	sp, #88	; 0x58
 801f220:	af00      	add	r7, sp, #0
 801f222:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801f22a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f234:	2b22      	cmp	r3, #34	; 0x22
 801f236:	f040 809c 	bne.w	801f372 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	681b      	ldr	r3, [r3, #0]
 801f23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f240:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f244:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801f248:	b2d9      	uxtb	r1, r3
 801f24a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801f24e:	b2da      	uxtb	r2, r3
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f254:	400a      	ands	r2, r1
 801f256:	b2d2      	uxtb	r2, r2
 801f258:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f25a:	687b      	ldr	r3, [r7, #4]
 801f25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f25e:	1c5a      	adds	r2, r3, #1
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f26a:	b29b      	uxth	r3, r3
 801f26c:	3b01      	subs	r3, #1
 801f26e:	b29a      	uxth	r2, r3
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d17f      	bne.n	801f382 <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	681b      	ldr	r3, [r3, #0]
 801f286:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f28a:	e853 3f00 	ldrex	r3, [r3]
 801f28e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801f290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f296:	653b      	str	r3, [r7, #80]	; 0x50
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	461a      	mov	r2, r3
 801f29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f2a0:	647b      	str	r3, [r7, #68]	; 0x44
 801f2a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f2a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801f2a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f2a8:	e841 2300 	strex	r3, r2, [r1]
 801f2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801f2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d1e6      	bne.n	801f282 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	3308      	adds	r3, #8
 801f2ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2be:	e853 3f00 	ldrex	r3, [r3]
 801f2c2:	623b      	str	r3, [r7, #32]
   return(result);
 801f2c4:	6a3b      	ldr	r3, [r7, #32]
 801f2c6:	f023 0301 	bic.w	r3, r3, #1
 801f2ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	3308      	adds	r3, #8
 801f2d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f2d4:	633a      	str	r2, [r7, #48]	; 0x30
 801f2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f2d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f2da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f2dc:	e841 2300 	strex	r3, r2, [r1]
 801f2e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2e4:	2b00      	cmp	r3, #0
 801f2e6:	d1e5      	bne.n	801f2b4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	2220      	movs	r2, #32
 801f2ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	2200      	movs	r2, #0
 801f2f4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f300:	2b01      	cmp	r3, #1
 801f302:	d130      	bne.n	801f366 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	2200      	movs	r2, #0
 801f308:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f310:	693b      	ldr	r3, [r7, #16]
 801f312:	e853 3f00 	ldrex	r3, [r3]
 801f316:	60fb      	str	r3, [r7, #12]
   return(result);
 801f318:	68fb      	ldr	r3, [r7, #12]
 801f31a:	f023 0310 	bic.w	r3, r3, #16
 801f31e:	64bb      	str	r3, [r7, #72]	; 0x48
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	681b      	ldr	r3, [r3, #0]
 801f324:	461a      	mov	r2, r3
 801f326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f328:	61fb      	str	r3, [r7, #28]
 801f32a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f32c:	69b9      	ldr	r1, [r7, #24]
 801f32e:	69fa      	ldr	r2, [r7, #28]
 801f330:	e841 2300 	strex	r3, r2, [r1]
 801f334:	617b      	str	r3, [r7, #20]
   return(result);
 801f336:	697b      	ldr	r3, [r7, #20]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d1e6      	bne.n	801f30a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	69db      	ldr	r3, [r3, #28]
 801f342:	f003 0310 	and.w	r3, r3, #16
 801f346:	2b10      	cmp	r3, #16
 801f348:	d103      	bne.n	801f352 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	2210      	movs	r2, #16
 801f350:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f358:	687a      	ldr	r2, [r7, #4]
 801f35a:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801f35e:	4611      	mov	r1, r2
 801f360:	6878      	ldr	r0, [r7, #4]
 801f362:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f364:	e00d      	b.n	801f382 <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f36c:	6878      	ldr	r0, [r7, #4]
 801f36e:	4798      	blx	r3
}
 801f370:	e007      	b.n	801f382 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	681b      	ldr	r3, [r3, #0]
 801f376:	699a      	ldr	r2, [r3, #24]
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	f042 0208 	orr.w	r2, r2, #8
 801f380:	619a      	str	r2, [r3, #24]
}
 801f382:	bf00      	nop
 801f384:	3758      	adds	r7, #88	; 0x58
 801f386:	46bd      	mov	sp, r7
 801f388:	bd80      	pop	{r7, pc}

0801f38a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f38a:	b580      	push	{r7, lr}
 801f38c:	b096      	sub	sp, #88	; 0x58
 801f38e:	af00      	add	r7, sp, #0
 801f390:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801f398:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f3a2:	2b22      	cmp	r3, #34	; 0x22
 801f3a4:	f040 809c 	bne.w	801f4e0 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f3b2:	687b      	ldr	r3, [r7, #4]
 801f3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f3b6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801f3b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801f3bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801f3c0:	4013      	ands	r3, r2
 801f3c2:	b29a      	uxth	r2, r3
 801f3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f3c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f3cc:	1c9a      	adds	r2, r3, #2
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801f3d2:	687b      	ldr	r3, [r7, #4]
 801f3d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f3d8:	b29b      	uxth	r3, r3
 801f3da:	3b01      	subs	r3, #1
 801f3dc:	b29a      	uxth	r2, r3
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f3ea:	b29b      	uxth	r3, r3
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d17f      	bne.n	801f4f0 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f3f8:	e853 3f00 	ldrex	r3, [r3]
 801f3fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801f3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f404:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	461a      	mov	r2, r3
 801f40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f40e:	643b      	str	r3, [r7, #64]	; 0x40
 801f410:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f416:	e841 2300 	strex	r3, r2, [r1]
 801f41a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801f41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d1e6      	bne.n	801f3f0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	3308      	adds	r3, #8
 801f428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f42a:	6a3b      	ldr	r3, [r7, #32]
 801f42c:	e853 3f00 	ldrex	r3, [r3]
 801f430:	61fb      	str	r3, [r7, #28]
   return(result);
 801f432:	69fb      	ldr	r3, [r7, #28]
 801f434:	f023 0301 	bic.w	r3, r3, #1
 801f438:	64bb      	str	r3, [r7, #72]	; 0x48
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	3308      	adds	r3, #8
 801f440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f442:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f44a:	e841 2300 	strex	r3, r2, [r1]
 801f44e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f452:	2b00      	cmp	r3, #0
 801f454:	d1e5      	bne.n	801f422 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	2220      	movs	r2, #32
 801f45a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	2200      	movs	r2, #0
 801f462:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	2200      	movs	r2, #0
 801f468:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f46e:	2b01      	cmp	r3, #1
 801f470:	d130      	bne.n	801f4d4 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f472:	687b      	ldr	r3, [r7, #4]
 801f474:	2200      	movs	r2, #0
 801f476:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f47e:	68fb      	ldr	r3, [r7, #12]
 801f480:	e853 3f00 	ldrex	r3, [r3]
 801f484:	60bb      	str	r3, [r7, #8]
   return(result);
 801f486:	68bb      	ldr	r3, [r7, #8]
 801f488:	f023 0310 	bic.w	r3, r3, #16
 801f48c:	647b      	str	r3, [r7, #68]	; 0x44
 801f48e:	687b      	ldr	r3, [r7, #4]
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	461a      	mov	r2, r3
 801f494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f496:	61bb      	str	r3, [r7, #24]
 801f498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f49a:	6979      	ldr	r1, [r7, #20]
 801f49c:	69ba      	ldr	r2, [r7, #24]
 801f49e:	e841 2300 	strex	r3, r2, [r1]
 801f4a2:	613b      	str	r3, [r7, #16]
   return(result);
 801f4a4:	693b      	ldr	r3, [r7, #16]
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d1e6      	bne.n	801f478 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	69db      	ldr	r3, [r3, #28]
 801f4b0:	f003 0310 	and.w	r3, r3, #16
 801f4b4:	2b10      	cmp	r3, #16
 801f4b6:	d103      	bne.n	801f4c0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	681b      	ldr	r3, [r3, #0]
 801f4bc:	2210      	movs	r2, #16
 801f4be:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f4c6:	687a      	ldr	r2, [r7, #4]
 801f4c8:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801f4cc:	4611      	mov	r1, r2
 801f4ce:	6878      	ldr	r0, [r7, #4]
 801f4d0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f4d2:	e00d      	b.n	801f4f0 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f4da:	6878      	ldr	r0, [r7, #4]
 801f4dc:	4798      	blx	r3
}
 801f4de:	e007      	b.n	801f4f0 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	699a      	ldr	r2, [r3, #24]
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	f042 0208 	orr.w	r2, r2, #8
 801f4ee:	619a      	str	r2, [r3, #24]
}
 801f4f0:	bf00      	nop
 801f4f2:	3758      	adds	r7, #88	; 0x58
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	bd80      	pop	{r7, pc}

0801f4f8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801f4f8:	b580      	push	{r7, lr}
 801f4fa:	b08c      	sub	sp, #48	; 0x30
 801f4fc:	af00      	add	r7, sp, #0
 801f4fe:	60f8      	str	r0, [r7, #12]
 801f500:	60b9      	str	r1, [r7, #8]
 801f502:	4613      	mov	r3, r2
 801f504:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801f506:	68fb      	ldr	r3, [r7, #12]
 801f508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f50c:	2b20      	cmp	r3, #32
 801f50e:	d142      	bne.n	801f596 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801f510:	68bb      	ldr	r3, [r7, #8]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d002      	beq.n	801f51c <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801f516:	88fb      	ldrh	r3, [r7, #6]
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d101      	bne.n	801f520 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801f51c:	2301      	movs	r3, #1
 801f51e:	e03b      	b.n	801f598 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801f520:	68fb      	ldr	r3, [r7, #12]
 801f522:	2201      	movs	r2, #1
 801f524:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f526:	68fb      	ldr	r3, [r7, #12]
 801f528:	2200      	movs	r2, #0
 801f52a:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801f52c:	88fb      	ldrh	r3, [r7, #6]
 801f52e:	461a      	mov	r2, r3
 801f530:	68b9      	ldr	r1, [r7, #8]
 801f532:	68f8      	ldr	r0, [r7, #12]
 801f534:	f7ff fd04 	bl	801ef40 <UART_Start_Receive_IT>
 801f538:	4603      	mov	r3, r0
 801f53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801f53e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f542:	2b00      	cmp	r3, #0
 801f544:	d124      	bne.n	801f590 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f546:	68fb      	ldr	r3, [r7, #12]
 801f548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f54a:	2b01      	cmp	r3, #1
 801f54c:	d11d      	bne.n	801f58a <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f54e:	68fb      	ldr	r3, [r7, #12]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	2210      	movs	r2, #16
 801f554:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f556:	68fb      	ldr	r3, [r7, #12]
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f55c:	69bb      	ldr	r3, [r7, #24]
 801f55e:	e853 3f00 	ldrex	r3, [r3]
 801f562:	617b      	str	r3, [r7, #20]
   return(result);
 801f564:	697b      	ldr	r3, [r7, #20]
 801f566:	f043 0310 	orr.w	r3, r3, #16
 801f56a:	62bb      	str	r3, [r7, #40]	; 0x28
 801f56c:	68fb      	ldr	r3, [r7, #12]
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	461a      	mov	r2, r3
 801f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f574:	627b      	str	r3, [r7, #36]	; 0x24
 801f576:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f578:	6a39      	ldr	r1, [r7, #32]
 801f57a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f57c:	e841 2300 	strex	r3, r2, [r1]
 801f580:	61fb      	str	r3, [r7, #28]
   return(result);
 801f582:	69fb      	ldr	r3, [r7, #28]
 801f584:	2b00      	cmp	r3, #0
 801f586:	d1e6      	bne.n	801f556 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801f588:	e002      	b.n	801f590 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801f58a:	2301      	movs	r3, #1
 801f58c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801f590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f594:	e000      	b.n	801f598 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801f596:	2302      	movs	r3, #2
  }
}
 801f598:	4618      	mov	r0, r3
 801f59a:	3730      	adds	r7, #48	; 0x30
 801f59c:	46bd      	mov	sp, r7
 801f59e:	bd80      	pop	{r7, pc}

0801f5a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801f5a0:	b580      	push	{r7, lr}
 801f5a2:	b084      	sub	sp, #16
 801f5a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801f5a6:	4b2f      	ldr	r3, [pc, #188]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f5a8:	22c0      	movs	r2, #192	; 0xc0
 801f5aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801f5ac:	4b2d      	ldr	r3, [pc, #180]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f5ae:	22a8      	movs	r2, #168	; 0xa8
 801f5b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801f5b2:	4b2c      	ldr	r3, [pc, #176]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f5b4:	220c      	movs	r2, #12
 801f5b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801f5b8:	4b2a      	ldr	r3, [pc, #168]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f5ba:	2264      	movs	r2, #100	; 0x64
 801f5bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801f5be:	4b2a      	ldr	r3, [pc, #168]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f5c0:	22ff      	movs	r2, #255	; 0xff
 801f5c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801f5c4:	4b28      	ldr	r3, [pc, #160]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f5c6:	22ff      	movs	r2, #255	; 0xff
 801f5c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801f5ca:	4b27      	ldr	r3, [pc, #156]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f5cc:	22ff      	movs	r2, #255	; 0xff
 801f5ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801f5d0:	4b25      	ldr	r3, [pc, #148]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f5d2:	2200      	movs	r2, #0
 801f5d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801f5d6:	4b25      	ldr	r3, [pc, #148]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f5d8:	22c0      	movs	r2, #192	; 0xc0
 801f5da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801f5dc:	4b23      	ldr	r3, [pc, #140]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f5de:	22a8      	movs	r2, #168	; 0xa8
 801f5e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801f5e2:	4b22      	ldr	r3, [pc, #136]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f5e4:	220c      	movs	r2, #12
 801f5e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801f5e8:	4b20      	ldr	r3, [pc, #128]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f5ea:	2201      	movs	r2, #1
 801f5ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801f5ee:	4b20      	ldr	r3, [pc, #128]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f5f0:	781b      	ldrb	r3, [r3, #0]
 801f5f2:	2b01      	cmp	r3, #1
 801f5f4:	d002      	beq.n	801f5fc <MX_LWIP_Init+0x5c>
 801f5f6:	2b02      	cmp	r3, #2
 801f5f8:	d03c      	beq.n	801f674 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801f5fa:	e162      	b.n	801f8c2 <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801f5fc:	4b1c      	ldr	r3, [pc, #112]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f5fe:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801f602:	4b18      	ldr	r3, [pc, #96]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f604:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801f606:	4b1a      	ldr	r3, [pc, #104]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f608:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801f60c:	4b15      	ldr	r3, [pc, #84]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f60e:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801f610:	4b17      	ldr	r3, [pc, #92]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f612:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801f616:	4b13      	ldr	r3, [pc, #76]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f618:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801f61a:	4b15      	ldr	r3, [pc, #84]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f61c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 801f620:	4b10      	ldr	r3, [pc, #64]	; (801f664 <MX_LWIP_Init+0xc4>)
 801f622:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801f624:	4b10      	ldr	r3, [pc, #64]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f626:	22ff      	movs	r2, #255	; 0xff
 801f628:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801f62a:	4b0f      	ldr	r3, [pc, #60]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f62c:	22ff      	movs	r2, #255	; 0xff
 801f62e:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801f630:	4b0d      	ldr	r3, [pc, #52]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f632:	22ff      	movs	r2, #255	; 0xff
 801f634:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801f636:	4b0c      	ldr	r3, [pc, #48]	; (801f668 <MX_LWIP_Init+0xc8>)
 801f638:	2200      	movs	r2, #0
 801f63a:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801f63c:	4b0c      	ldr	r3, [pc, #48]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f63e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801f642:	4b0a      	ldr	r3, [pc, #40]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f644:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801f646:	4b0a      	ldr	r3, [pc, #40]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f648:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801f64c:	4b07      	ldr	r3, [pc, #28]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f64e:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801f650:	4b07      	ldr	r3, [pc, #28]	; (801f670 <MX_LWIP_Init+0xd0>)
 801f652:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801f656:	4b05      	ldr	r3, [pc, #20]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f658:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801f65a:	4b04      	ldr	r3, [pc, #16]	; (801f66c <MX_LWIP_Init+0xcc>)
 801f65c:	2201      	movs	r2, #1
 801f65e:	70da      	strb	r2, [r3, #3]
		break;
 801f660:	e03b      	b.n	801f6da <MX_LWIP_Init+0x13a>
 801f662:	bf00      	nop
 801f664:	2000cab8 	.word	0x2000cab8
 801f668:	2000cabc 	.word	0x2000cabc
 801f66c:	2000cac0 	.word	0x2000cac0
 801f670:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801f674:	4b94      	ldr	r3, [pc, #592]	; (801f8c8 <MX_LWIP_Init+0x328>)
 801f676:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801f67a:	4b94      	ldr	r3, [pc, #592]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f67c:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801f67e:	4b92      	ldr	r3, [pc, #584]	; (801f8c8 <MX_LWIP_Init+0x328>)
 801f680:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801f684:	4b91      	ldr	r3, [pc, #580]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f686:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801f688:	4b8f      	ldr	r3, [pc, #572]	; (801f8c8 <MX_LWIP_Init+0x328>)
 801f68a:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801f68e:	4b8f      	ldr	r3, [pc, #572]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f690:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801f692:	4b8d      	ldr	r3, [pc, #564]	; (801f8c8 <MX_LWIP_Init+0x328>)
 801f694:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 801f698:	4b8c      	ldr	r3, [pc, #560]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f69a:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801f69c:	4b8c      	ldr	r3, [pc, #560]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f69e:	22ff      	movs	r2, #255	; 0xff
 801f6a0:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801f6a2:	4b8b      	ldr	r3, [pc, #556]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f6a4:	22ff      	movs	r2, #255	; 0xff
 801f6a6:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801f6a8:	4b89      	ldr	r3, [pc, #548]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f6aa:	22ff      	movs	r2, #255	; 0xff
 801f6ac:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801f6ae:	4b88      	ldr	r3, [pc, #544]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f6b0:	2200      	movs	r2, #0
 801f6b2:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801f6b4:	4b84      	ldr	r3, [pc, #528]	; (801f8c8 <MX_LWIP_Init+0x328>)
 801f6b6:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801f6ba:	4b86      	ldr	r3, [pc, #536]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f6bc:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801f6be:	4b82      	ldr	r3, [pc, #520]	; (801f8c8 <MX_LWIP_Init+0x328>)
 801f6c0:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801f6c4:	4b83      	ldr	r3, [pc, #524]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f6c6:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801f6c8:	4b7f      	ldr	r3, [pc, #508]	; (801f8c8 <MX_LWIP_Init+0x328>)
 801f6ca:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801f6ce:	4b81      	ldr	r3, [pc, #516]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f6d0:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801f6d2:	4b80      	ldr	r3, [pc, #512]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f6d4:	2201      	movs	r2, #1
 801f6d6:	70da      	strb	r2, [r3, #3]
		break;
 801f6d8:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801f6da:	f000 fd42 	bl	8020162 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801f6de:	4b7b      	ldr	r3, [pc, #492]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f6e0:	781b      	ldrb	r3, [r3, #0]
 801f6e2:	061a      	lsls	r2, r3, #24
 801f6e4:	4b79      	ldr	r3, [pc, #484]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f6e6:	785b      	ldrb	r3, [r3, #1]
 801f6e8:	041b      	lsls	r3, r3, #16
 801f6ea:	431a      	orrs	r2, r3
 801f6ec:	4b77      	ldr	r3, [pc, #476]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f6ee:	789b      	ldrb	r3, [r3, #2]
 801f6f0:	021b      	lsls	r3, r3, #8
 801f6f2:	4313      	orrs	r3, r2
 801f6f4:	4a75      	ldr	r2, [pc, #468]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f6f6:	78d2      	ldrb	r2, [r2, #3]
 801f6f8:	4313      	orrs	r3, r2
 801f6fa:	061a      	lsls	r2, r3, #24
 801f6fc:	4b73      	ldr	r3, [pc, #460]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f6fe:	781b      	ldrb	r3, [r3, #0]
 801f700:	0619      	lsls	r1, r3, #24
 801f702:	4b72      	ldr	r3, [pc, #456]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f704:	785b      	ldrb	r3, [r3, #1]
 801f706:	041b      	lsls	r3, r3, #16
 801f708:	4319      	orrs	r1, r3
 801f70a:	4b70      	ldr	r3, [pc, #448]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f70c:	789b      	ldrb	r3, [r3, #2]
 801f70e:	021b      	lsls	r3, r3, #8
 801f710:	430b      	orrs	r3, r1
 801f712:	496e      	ldr	r1, [pc, #440]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f714:	78c9      	ldrb	r1, [r1, #3]
 801f716:	430b      	orrs	r3, r1
 801f718:	021b      	lsls	r3, r3, #8
 801f71a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801f71e:	431a      	orrs	r2, r3
 801f720:	4b6a      	ldr	r3, [pc, #424]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f722:	781b      	ldrb	r3, [r3, #0]
 801f724:	0619      	lsls	r1, r3, #24
 801f726:	4b69      	ldr	r3, [pc, #420]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f728:	785b      	ldrb	r3, [r3, #1]
 801f72a:	041b      	lsls	r3, r3, #16
 801f72c:	4319      	orrs	r1, r3
 801f72e:	4b67      	ldr	r3, [pc, #412]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f730:	789b      	ldrb	r3, [r3, #2]
 801f732:	021b      	lsls	r3, r3, #8
 801f734:	430b      	orrs	r3, r1
 801f736:	4965      	ldr	r1, [pc, #404]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f738:	78c9      	ldrb	r1, [r1, #3]
 801f73a:	430b      	orrs	r3, r1
 801f73c:	0a1b      	lsrs	r3, r3, #8
 801f73e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f742:	431a      	orrs	r2, r3
 801f744:	4b61      	ldr	r3, [pc, #388]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f746:	781b      	ldrb	r3, [r3, #0]
 801f748:	0619      	lsls	r1, r3, #24
 801f74a:	4b60      	ldr	r3, [pc, #384]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f74c:	785b      	ldrb	r3, [r3, #1]
 801f74e:	041b      	lsls	r3, r3, #16
 801f750:	4319      	orrs	r1, r3
 801f752:	4b5e      	ldr	r3, [pc, #376]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f754:	789b      	ldrb	r3, [r3, #2]
 801f756:	021b      	lsls	r3, r3, #8
 801f758:	430b      	orrs	r3, r1
 801f75a:	495c      	ldr	r1, [pc, #368]	; (801f8cc <MX_LWIP_Init+0x32c>)
 801f75c:	78c9      	ldrb	r1, [r1, #3]
 801f75e:	430b      	orrs	r3, r1
 801f760:	0e1b      	lsrs	r3, r3, #24
 801f762:	4313      	orrs	r3, r2
 801f764:	4a5c      	ldr	r2, [pc, #368]	; (801f8d8 <MX_LWIP_Init+0x338>)
 801f766:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801f768:	4b59      	ldr	r3, [pc, #356]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f76a:	781b      	ldrb	r3, [r3, #0]
 801f76c:	061a      	lsls	r2, r3, #24
 801f76e:	4b58      	ldr	r3, [pc, #352]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f770:	785b      	ldrb	r3, [r3, #1]
 801f772:	041b      	lsls	r3, r3, #16
 801f774:	431a      	orrs	r2, r3
 801f776:	4b56      	ldr	r3, [pc, #344]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f778:	789b      	ldrb	r3, [r3, #2]
 801f77a:	021b      	lsls	r3, r3, #8
 801f77c:	4313      	orrs	r3, r2
 801f77e:	4a54      	ldr	r2, [pc, #336]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f780:	78d2      	ldrb	r2, [r2, #3]
 801f782:	4313      	orrs	r3, r2
 801f784:	061a      	lsls	r2, r3, #24
 801f786:	4b52      	ldr	r3, [pc, #328]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f788:	781b      	ldrb	r3, [r3, #0]
 801f78a:	0619      	lsls	r1, r3, #24
 801f78c:	4b50      	ldr	r3, [pc, #320]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f78e:	785b      	ldrb	r3, [r3, #1]
 801f790:	041b      	lsls	r3, r3, #16
 801f792:	4319      	orrs	r1, r3
 801f794:	4b4e      	ldr	r3, [pc, #312]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f796:	789b      	ldrb	r3, [r3, #2]
 801f798:	021b      	lsls	r3, r3, #8
 801f79a:	430b      	orrs	r3, r1
 801f79c:	494c      	ldr	r1, [pc, #304]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f79e:	78c9      	ldrb	r1, [r1, #3]
 801f7a0:	430b      	orrs	r3, r1
 801f7a2:	021b      	lsls	r3, r3, #8
 801f7a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801f7a8:	431a      	orrs	r2, r3
 801f7aa:	4b49      	ldr	r3, [pc, #292]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7ac:	781b      	ldrb	r3, [r3, #0]
 801f7ae:	0619      	lsls	r1, r3, #24
 801f7b0:	4b47      	ldr	r3, [pc, #284]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7b2:	785b      	ldrb	r3, [r3, #1]
 801f7b4:	041b      	lsls	r3, r3, #16
 801f7b6:	4319      	orrs	r1, r3
 801f7b8:	4b45      	ldr	r3, [pc, #276]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7ba:	789b      	ldrb	r3, [r3, #2]
 801f7bc:	021b      	lsls	r3, r3, #8
 801f7be:	430b      	orrs	r3, r1
 801f7c0:	4943      	ldr	r1, [pc, #268]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7c2:	78c9      	ldrb	r1, [r1, #3]
 801f7c4:	430b      	orrs	r3, r1
 801f7c6:	0a1b      	lsrs	r3, r3, #8
 801f7c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7cc:	431a      	orrs	r2, r3
 801f7ce:	4b40      	ldr	r3, [pc, #256]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7d0:	781b      	ldrb	r3, [r3, #0]
 801f7d2:	0619      	lsls	r1, r3, #24
 801f7d4:	4b3e      	ldr	r3, [pc, #248]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7d6:	785b      	ldrb	r3, [r3, #1]
 801f7d8:	041b      	lsls	r3, r3, #16
 801f7da:	4319      	orrs	r1, r3
 801f7dc:	4b3c      	ldr	r3, [pc, #240]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7de:	789b      	ldrb	r3, [r3, #2]
 801f7e0:	021b      	lsls	r3, r3, #8
 801f7e2:	430b      	orrs	r3, r1
 801f7e4:	493a      	ldr	r1, [pc, #232]	; (801f8d0 <MX_LWIP_Init+0x330>)
 801f7e6:	78c9      	ldrb	r1, [r1, #3]
 801f7e8:	430b      	orrs	r3, r1
 801f7ea:	0e1b      	lsrs	r3, r3, #24
 801f7ec:	4313      	orrs	r3, r2
 801f7ee:	4a3b      	ldr	r2, [pc, #236]	; (801f8dc <MX_LWIP_Init+0x33c>)
 801f7f0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801f7f2:	4b38      	ldr	r3, [pc, #224]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f7f4:	781b      	ldrb	r3, [r3, #0]
 801f7f6:	061a      	lsls	r2, r3, #24
 801f7f8:	4b36      	ldr	r3, [pc, #216]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f7fa:	785b      	ldrb	r3, [r3, #1]
 801f7fc:	041b      	lsls	r3, r3, #16
 801f7fe:	431a      	orrs	r2, r3
 801f800:	4b34      	ldr	r3, [pc, #208]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f802:	789b      	ldrb	r3, [r3, #2]
 801f804:	021b      	lsls	r3, r3, #8
 801f806:	4313      	orrs	r3, r2
 801f808:	4a32      	ldr	r2, [pc, #200]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f80a:	78d2      	ldrb	r2, [r2, #3]
 801f80c:	4313      	orrs	r3, r2
 801f80e:	061a      	lsls	r2, r3, #24
 801f810:	4b30      	ldr	r3, [pc, #192]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f812:	781b      	ldrb	r3, [r3, #0]
 801f814:	0619      	lsls	r1, r3, #24
 801f816:	4b2f      	ldr	r3, [pc, #188]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f818:	785b      	ldrb	r3, [r3, #1]
 801f81a:	041b      	lsls	r3, r3, #16
 801f81c:	4319      	orrs	r1, r3
 801f81e:	4b2d      	ldr	r3, [pc, #180]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f820:	789b      	ldrb	r3, [r3, #2]
 801f822:	021b      	lsls	r3, r3, #8
 801f824:	430b      	orrs	r3, r1
 801f826:	492b      	ldr	r1, [pc, #172]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f828:	78c9      	ldrb	r1, [r1, #3]
 801f82a:	430b      	orrs	r3, r1
 801f82c:	021b      	lsls	r3, r3, #8
 801f82e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801f832:	431a      	orrs	r2, r3
 801f834:	4b27      	ldr	r3, [pc, #156]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f836:	781b      	ldrb	r3, [r3, #0]
 801f838:	0619      	lsls	r1, r3, #24
 801f83a:	4b26      	ldr	r3, [pc, #152]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f83c:	785b      	ldrb	r3, [r3, #1]
 801f83e:	041b      	lsls	r3, r3, #16
 801f840:	4319      	orrs	r1, r3
 801f842:	4b24      	ldr	r3, [pc, #144]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f844:	789b      	ldrb	r3, [r3, #2]
 801f846:	021b      	lsls	r3, r3, #8
 801f848:	430b      	orrs	r3, r1
 801f84a:	4922      	ldr	r1, [pc, #136]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f84c:	78c9      	ldrb	r1, [r1, #3]
 801f84e:	430b      	orrs	r3, r1
 801f850:	0a1b      	lsrs	r3, r3, #8
 801f852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f856:	431a      	orrs	r2, r3
 801f858:	4b1e      	ldr	r3, [pc, #120]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f85a:	781b      	ldrb	r3, [r3, #0]
 801f85c:	0619      	lsls	r1, r3, #24
 801f85e:	4b1d      	ldr	r3, [pc, #116]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f860:	785b      	ldrb	r3, [r3, #1]
 801f862:	041b      	lsls	r3, r3, #16
 801f864:	4319      	orrs	r1, r3
 801f866:	4b1b      	ldr	r3, [pc, #108]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f868:	789b      	ldrb	r3, [r3, #2]
 801f86a:	021b      	lsls	r3, r3, #8
 801f86c:	430b      	orrs	r3, r1
 801f86e:	4919      	ldr	r1, [pc, #100]	; (801f8d4 <MX_LWIP_Init+0x334>)
 801f870:	78c9      	ldrb	r1, [r1, #3]
 801f872:	430b      	orrs	r3, r1
 801f874:	0e1b      	lsrs	r3, r3, #24
 801f876:	4313      	orrs	r3, r2
 801f878:	4a19      	ldr	r2, [pc, #100]	; (801f8e0 <MX_LWIP_Init+0x340>)
 801f87a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801f87c:	4b19      	ldr	r3, [pc, #100]	; (801f8e4 <MX_LWIP_Init+0x344>)
 801f87e:	9302      	str	r3, [sp, #8]
 801f880:	4b19      	ldr	r3, [pc, #100]	; (801f8e8 <MX_LWIP_Init+0x348>)
 801f882:	9301      	str	r3, [sp, #4]
 801f884:	2300      	movs	r3, #0
 801f886:	9300      	str	r3, [sp, #0]
 801f888:	4b15      	ldr	r3, [pc, #84]	; (801f8e0 <MX_LWIP_Init+0x340>)
 801f88a:	4a14      	ldr	r2, [pc, #80]	; (801f8dc <MX_LWIP_Init+0x33c>)
 801f88c:	4912      	ldr	r1, [pc, #72]	; (801f8d8 <MX_LWIP_Init+0x338>)
 801f88e:	4817      	ldr	r0, [pc, #92]	; (801f8ec <MX_LWIP_Init+0x34c>)
 801f890:	f001 f998 	bl	8020bc4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801f894:	4815      	ldr	r0, [pc, #84]	; (801f8ec <MX_LWIP_Init+0x34c>)
 801f896:	f001 fb49 	bl	8020f2c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801f89a:	4b14      	ldr	r3, [pc, #80]	; (801f8ec <MX_LWIP_Init+0x34c>)
 801f89c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f8a0:	089b      	lsrs	r3, r3, #2
 801f8a2:	f003 0301 	and.w	r3, r3, #1
 801f8a6:	b2db      	uxtb	r3, r3
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d003      	beq.n	801f8b4 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801f8ac:	480f      	ldr	r0, [pc, #60]	; (801f8ec <MX_LWIP_Init+0x34c>)
 801f8ae:	f001 fb4d 	bl	8020f4c <netif_set_up>
 801f8b2:	e002      	b.n	801f8ba <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801f8b4:	480d      	ldr	r0, [pc, #52]	; (801f8ec <MX_LWIP_Init+0x34c>)
 801f8b6:	f001 fbb5 	bl	8021024 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801f8ba:	490d      	ldr	r1, [pc, #52]	; (801f8f0 <MX_LWIP_Init+0x350>)
 801f8bc:	480b      	ldr	r0, [pc, #44]	; (801f8ec <MX_LWIP_Init+0x34c>)
 801f8be:	f001 fc47 	bl	8021150 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801f8c2:	46bd      	mov	sp, r7
 801f8c4:	bd80      	pop	{r7, pc}
 801f8c6:	bf00      	nop
 801f8c8:	20000304 	.word	0x20000304
 801f8cc:	2000cab8 	.word	0x2000cab8
 801f8d0:	2000cabc 	.word	0x2000cabc
 801f8d4:	2000cac0 	.word	0x2000cac0
 801f8d8:	2000caac 	.word	0x2000caac
 801f8dc:	2000cab0 	.word	0x2000cab0
 801f8e0:	2000cab4 	.word	0x2000cab4
 801f8e4:	08024f0d 	.word	0x08024f0d
 801f8e8:	0801fc81 	.word	0x0801fc81
 801f8ec:	2000ca6c 	.word	0x2000ca6c
 801f8f0:	0801f945 	.word	0x0801f945

0801f8f4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	b082      	sub	sp, #8
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801f8fc:	f7f8 fd26 	bl	801834c <HAL_GetTick>
 801f900:	4602      	mov	r2, r0
 801f902:	4b08      	ldr	r3, [pc, #32]	; (801f924 <Ethernet_Link_Periodic_Handle+0x30>)
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	1ad3      	subs	r3, r2, r3
 801f908:	2b63      	cmp	r3, #99	; 0x63
 801f90a:	d907      	bls.n	801f91c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801f90c:	f7f8 fd1e 	bl	801834c <HAL_GetTick>
 801f910:	4603      	mov	r3, r0
 801f912:	4a04      	ldr	r2, [pc, #16]	; (801f924 <Ethernet_Link_Periodic_Handle+0x30>)
 801f914:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801f916:	6878      	ldr	r0, [r7, #4]
 801f918:	f000 fb10 	bl	801ff3c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801f91c:	bf00      	nop
 801f91e:	3708      	adds	r7, #8
 801f920:	46bd      	mov	sp, r7
 801f922:	bd80      	pop	{r7, pc}
 801f924:	2000ca68 	.word	0x2000ca68

0801f928 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801f928:	b580      	push	{r7, lr}
 801f92a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801f92c:	4804      	ldr	r0, [pc, #16]	; (801f940 <MX_LWIP_Process+0x18>)
 801f92e:	f000 f987 	bl	801fc40 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801f932:	f002 fb83 	bl	802203c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801f936:	4802      	ldr	r0, [pc, #8]	; (801f940 <MX_LWIP_Process+0x18>)
 801f938:	f7ff ffdc 	bl	801f8f4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801f93c:	bf00      	nop
 801f93e:	bd80      	pop	{r7, pc}
 801f940:	2000ca6c 	.word	0x2000ca6c

0801f944 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801f944:	b480      	push	{r7}
 801f946:	b083      	sub	sp, #12
 801f948:	af00      	add	r7, sp, #0
 801f94a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801f94c:	bf00      	nop
 801f94e:	370c      	adds	r7, #12
 801f950:	46bd      	mov	sp, r7
 801f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f956:	4770      	bx	lr

0801f958 <SCB_InvalidateDCache_by_Addr>:
{
 801f958:	b480      	push	{r7}
 801f95a:	b087      	sub	sp, #28
 801f95c:	af00      	add	r7, sp, #0
 801f95e:	6078      	str	r0, [r7, #4]
 801f960:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801f962:	683b      	ldr	r3, [r7, #0]
 801f964:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801f96a:	2320      	movs	r3, #32
 801f96c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801f96e:	f3bf 8f4f 	dsb	sy
}
 801f972:	bf00      	nop
    while (op_size > 0) {
 801f974:	e00b      	b.n	801f98e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801f976:	4a0d      	ldr	r2, [pc, #52]	; (801f9ac <SCB_InvalidateDCache_by_Addr+0x54>)
 801f978:	693b      	ldr	r3, [r7, #16]
 801f97a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801f97e:	68fb      	ldr	r3, [r7, #12]
 801f980:	693a      	ldr	r2, [r7, #16]
 801f982:	4413      	add	r3, r2
 801f984:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801f986:	697a      	ldr	r2, [r7, #20]
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	1ad3      	subs	r3, r2, r3
 801f98c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801f98e:	697b      	ldr	r3, [r7, #20]
 801f990:	2b00      	cmp	r3, #0
 801f992:	dcf0      	bgt.n	801f976 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801f994:	f3bf 8f4f 	dsb	sy
}
 801f998:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801f99a:	f3bf 8f6f 	isb	sy
}
 801f99e:	bf00      	nop
}
 801f9a0:	bf00      	nop
 801f9a2:	371c      	adds	r7, #28
 801f9a4:	46bd      	mov	sp, r7
 801f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9aa:	4770      	bx	lr
 801f9ac:	e000ed00 	.word	0xe000ed00

0801f9b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801f9b0:	b580      	push	{r7, lr}
 801f9b2:	b084      	sub	sp, #16
 801f9b4:	af00      	add	r7, sp, #0
 801f9b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801f9b8:	2300      	movs	r3, #0
 801f9ba:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801f9bc:	4b47      	ldr	r3, [pc, #284]	; (801fadc <low_level_init+0x12c>)
 801f9be:	4a48      	ldr	r2, [pc, #288]	; (801fae0 <low_level_init+0x130>)
 801f9c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801f9c2:	2300      	movs	r3, #0
 801f9c4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801f9c6:	2380      	movs	r3, #128	; 0x80
 801f9c8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801f9ca:	23e1      	movs	r3, #225	; 0xe1
 801f9cc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801f9ce:	2300      	movs	r3, #0
 801f9d0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801f9d2:	2300      	movs	r3, #0
 801f9d4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801f9d6:	2300      	movs	r3, #0
 801f9d8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801f9da:	4a40      	ldr	r2, [pc, #256]	; (801fadc <low_level_init+0x12c>)
 801f9dc:	f107 0308 	add.w	r3, r7, #8
 801f9e0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801f9e2:	4b3e      	ldr	r3, [pc, #248]	; (801fadc <low_level_init+0x12c>)
 801f9e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801f9e8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801f9ea:	4b3c      	ldr	r3, [pc, #240]	; (801fadc <low_level_init+0x12c>)
 801f9ec:	4a3d      	ldr	r2, [pc, #244]	; (801fae4 <low_level_init+0x134>)
 801f9ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801f9f0:	4b3a      	ldr	r3, [pc, #232]	; (801fadc <low_level_init+0x12c>)
 801f9f2:	4a3d      	ldr	r2, [pc, #244]	; (801fae8 <low_level_init+0x138>)
 801f9f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801f9f6:	4b39      	ldr	r3, [pc, #228]	; (801fadc <low_level_init+0x12c>)
 801f9f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801f9fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801f9fe:	4b3b      	ldr	r3, [pc, #236]	; (801faec <low_level_init+0x13c>)
 801fa00:	781b      	ldrb	r3, [r3, #0]
 801fa02:	2b01      	cmp	r3, #1
 801fa04:	d002      	beq.n	801fa0c <low_level_init+0x5c>
 801fa06:	2b02      	cmp	r3, #2
 801fa08:	d004      	beq.n	801fa14 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801fa0a:	e063      	b.n	801fad4 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801fa0c:	4b33      	ldr	r3, [pc, #204]	; (801fadc <low_level_init+0x12c>)
 801fa0e:	4a38      	ldr	r2, [pc, #224]	; (801faf0 <low_level_init+0x140>)
 801fa10:	605a      	str	r2, [r3, #4]
		break;
 801fa12:	e003      	b.n	801fa1c <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801fa14:	4b31      	ldr	r3, [pc, #196]	; (801fadc <low_level_init+0x12c>)
 801fa16:	4a37      	ldr	r2, [pc, #220]	; (801faf4 <low_level_init+0x144>)
 801fa18:	605a      	str	r2, [r3, #4]
		break;
 801fa1a:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801fa1c:	482f      	ldr	r0, [pc, #188]	; (801fadc <low_level_init+0x12c>)
 801fa1e:	f7f9 fdbb 	bl	8019598 <HAL_ETH_Init>
 801fa22:	4603      	mov	r3, r0
 801fa24:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801fa26:	2238      	movs	r2, #56	; 0x38
 801fa28:	2100      	movs	r1, #0
 801fa2a:	4833      	ldr	r0, [pc, #204]	; (801faf8 <low_level_init+0x148>)
 801fa2c:	f005 fbb0 	bl	8025190 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801fa30:	4b31      	ldr	r3, [pc, #196]	; (801faf8 <low_level_init+0x148>)
 801fa32:	2221      	movs	r2, #33	; 0x21
 801fa34:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801fa36:	4b30      	ldr	r3, [pc, #192]	; (801faf8 <low_level_init+0x148>)
 801fa38:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801fa3c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801fa3e:	4b2e      	ldr	r3, [pc, #184]	; (801faf8 <low_level_init+0x148>)
 801fa40:	2200      	movs	r2, #0
 801fa42:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801fa44:	482d      	ldr	r0, [pc, #180]	; (801fafc <low_level_init+0x14c>)
 801fa46:	f000 ff3d 	bl	80208c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801fa4a:	687b      	ldr	r3, [r7, #4]
 801fa4c:	2206      	movs	r2, #6
 801fa4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801fa52:	4b22      	ldr	r3, [pc, #136]	; (801fadc <low_level_init+0x12c>)
 801fa54:	685b      	ldr	r3, [r3, #4]
 801fa56:	781a      	ldrb	r2, [r3, #0]
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801fa5e:	4b1f      	ldr	r3, [pc, #124]	; (801fadc <low_level_init+0x12c>)
 801fa60:	685b      	ldr	r3, [r3, #4]
 801fa62:	785a      	ldrb	r2, [r3, #1]
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801fa6a:	4b1c      	ldr	r3, [pc, #112]	; (801fadc <low_level_init+0x12c>)
 801fa6c:	685b      	ldr	r3, [r3, #4]
 801fa6e:	789a      	ldrb	r2, [r3, #2]
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801fa76:	4b19      	ldr	r3, [pc, #100]	; (801fadc <low_level_init+0x12c>)
 801fa78:	685b      	ldr	r3, [r3, #4]
 801fa7a:	78da      	ldrb	r2, [r3, #3]
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801fa82:	4b16      	ldr	r3, [pc, #88]	; (801fadc <low_level_init+0x12c>)
 801fa84:	685b      	ldr	r3, [r3, #4]
 801fa86:	791a      	ldrb	r2, [r3, #4]
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801fa8e:	4b13      	ldr	r3, [pc, #76]	; (801fadc <low_level_init+0x12c>)
 801fa90:	685b      	ldr	r3, [r3, #4]
 801fa92:	795a      	ldrb	r2, [r3, #5]
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801faa0:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801faa2:	687b      	ldr	r3, [r7, #4]
 801faa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801faa8:	f043 030a 	orr.w	r3, r3, #10
 801faac:	b2da      	uxtb	r2, r3
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801fab4:	4912      	ldr	r1, [pc, #72]	; (801fb00 <low_level_init+0x150>)
 801fab6:	4813      	ldr	r0, [pc, #76]	; (801fb04 <low_level_init+0x154>)
 801fab8:	f7f8 fa87 	bl	8017fca <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801fabc:	4811      	ldr	r0, [pc, #68]	; (801fb04 <low_level_init+0x154>)
 801fabe:	f7f8 fab6 	bl	801802e <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801fac2:	7bfb      	ldrb	r3, [r7, #15]
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	d103      	bne.n	801fad0 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801fac8:	6878      	ldr	r0, [r7, #4]
 801faca:	f000 fa37 	bl	801ff3c <ethernet_link_check_state>
 801face:	e001      	b.n	801fad4 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801fad0:	f7f6 fe7e 	bl	80167d0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801fad4:	3710      	adds	r7, #16
 801fad6:	46bd      	mov	sp, r7
 801fad8:	bd80      	pop	{r7, pc}
 801fada:	bf00      	nop
 801fadc:	200113c0 	.word	0x200113c0
 801fae0:	40028000 	.word	0x40028000
 801fae4:	20000244 	.word	0x20000244
 801fae8:	200001a4 	.word	0x200001a4
 801faec:	20000304 	.word	0x20000304
 801faf0:	20000343 	.word	0x20000343
 801faf4:	200005b1 	.word	0x200005b1
 801faf8:	20011470 	.word	0x20011470
 801fafc:	0802c28c 	.word	0x0802c28c
 801fb00:	20000128 	.word	0x20000128
 801fb04:	200114a8 	.word	0x200114a8

0801fb08 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801fb08:	b580      	push	{r7, lr}
 801fb0a:	b092      	sub	sp, #72	; 0x48
 801fb0c:	af00      	add	r7, sp, #0
 801fb0e:	6078      	str	r0, [r7, #4]
 801fb10:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801fb12:	2300      	movs	r3, #0
 801fb14:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801fb16:	2300      	movs	r3, #0
 801fb18:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801fb1a:	2300      	movs	r3, #0
 801fb1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801fb20:	f107 030c 	add.w	r3, r7, #12
 801fb24:	2230      	movs	r2, #48	; 0x30
 801fb26:	2100      	movs	r1, #0
 801fb28:	4618      	mov	r0, r3
 801fb2a:	f005 fb31 	bl	8025190 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801fb2e:	f107 030c 	add.w	r3, r7, #12
 801fb32:	2230      	movs	r2, #48	; 0x30
 801fb34:	2100      	movs	r1, #0
 801fb36:	4618      	mov	r0, r3
 801fb38:	f005 fb2a 	bl	8025190 <memset>

  for(q = p; q != NULL; q = q->next)
 801fb3c:	683b      	ldr	r3, [r7, #0]
 801fb3e:	643b      	str	r3, [r7, #64]	; 0x40
 801fb40:	e045      	b.n	801fbce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801fb42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb44:	2b03      	cmp	r3, #3
 801fb46:	d902      	bls.n	801fb4e <low_level_output+0x46>
      return ERR_IF;
 801fb48:	f06f 030b 	mvn.w	r3, #11
 801fb4c:	e055      	b.n	801fbfa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801fb4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb50:	6859      	ldr	r1, [r3, #4]
 801fb52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb54:	4613      	mov	r3, r2
 801fb56:	005b      	lsls	r3, r3, #1
 801fb58:	4413      	add	r3, r2
 801fb5a:	009b      	lsls	r3, r3, #2
 801fb5c:	3348      	adds	r3, #72	; 0x48
 801fb5e:	443b      	add	r3, r7
 801fb60:	3b3c      	subs	r3, #60	; 0x3c
 801fb62:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801fb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb66:	895b      	ldrh	r3, [r3, #10]
 801fb68:	4619      	mov	r1, r3
 801fb6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb6c:	4613      	mov	r3, r2
 801fb6e:	005b      	lsls	r3, r3, #1
 801fb70:	4413      	add	r3, r2
 801fb72:	009b      	lsls	r3, r3, #2
 801fb74:	3348      	adds	r3, #72	; 0x48
 801fb76:	443b      	add	r3, r7
 801fb78:	3b38      	subs	r3, #56	; 0x38
 801fb7a:	6019      	str	r1, [r3, #0]

    if(i>0)
 801fb7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d011      	beq.n	801fba6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801fb82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb84:	1e5a      	subs	r2, r3, #1
 801fb86:	f107 000c 	add.w	r0, r7, #12
 801fb8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fb8c:	460b      	mov	r3, r1
 801fb8e:	005b      	lsls	r3, r3, #1
 801fb90:	440b      	add	r3, r1
 801fb92:	009b      	lsls	r3, r3, #2
 801fb94:	18c1      	adds	r1, r0, r3
 801fb96:	4613      	mov	r3, r2
 801fb98:	005b      	lsls	r3, r3, #1
 801fb9a:	4413      	add	r3, r2
 801fb9c:	009b      	lsls	r3, r3, #2
 801fb9e:	3348      	adds	r3, #72	; 0x48
 801fba0:	443b      	add	r3, r7
 801fba2:	3b34      	subs	r3, #52	; 0x34
 801fba4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801fba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	d109      	bne.n	801fbc2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801fbae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fbb0:	4613      	mov	r3, r2
 801fbb2:	005b      	lsls	r3, r3, #1
 801fbb4:	4413      	add	r3, r2
 801fbb6:	009b      	lsls	r3, r3, #2
 801fbb8:	3348      	adds	r3, #72	; 0x48
 801fbba:	443b      	add	r3, r7
 801fbbc:	3b34      	subs	r3, #52	; 0x34
 801fbbe:	2200      	movs	r2, #0
 801fbc0:	601a      	str	r2, [r3, #0]
    }

    i++;
 801fbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbc4:	3301      	adds	r3, #1
 801fbc6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801fbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	643b      	str	r3, [r7, #64]	; 0x40
 801fbce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d1b6      	bne.n	801fb42 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801fbd4:	683b      	ldr	r3, [r7, #0]
 801fbd6:	891b      	ldrh	r3, [r3, #8]
 801fbd8:	461a      	mov	r2, r3
 801fbda:	4b0a      	ldr	r3, [pc, #40]	; (801fc04 <low_level_output+0xfc>)
 801fbdc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801fbde:	4a09      	ldr	r2, [pc, #36]	; (801fc04 <low_level_output+0xfc>)
 801fbe0:	f107 030c 	add.w	r3, r7, #12
 801fbe4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801fbe6:	4a07      	ldr	r2, [pc, #28]	; (801fc04 <low_level_output+0xfc>)
 801fbe8:	683b      	ldr	r3, [r7, #0]
 801fbea:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801fbec:	2214      	movs	r2, #20
 801fbee:	4905      	ldr	r1, [pc, #20]	; (801fc04 <low_level_output+0xfc>)
 801fbf0:	4805      	ldr	r0, [pc, #20]	; (801fc08 <low_level_output+0x100>)
 801fbf2:	f7f9 fe05 	bl	8019800 <HAL_ETH_Transmit>

  return errval;
 801fbf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	3748      	adds	r7, #72	; 0x48
 801fbfe:	46bd      	mov	sp, r7
 801fc00:	bd80      	pop	{r7, pc}
 801fc02:	bf00      	nop
 801fc04:	20011470 	.word	0x20011470
 801fc08:	200113c0 	.word	0x200113c0

0801fc0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801fc0c:	b580      	push	{r7, lr}
 801fc0e:	b084      	sub	sp, #16
 801fc10:	af00      	add	r7, sp, #0
 801fc12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801fc14:	2300      	movs	r3, #0
 801fc16:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801fc18:	4b07      	ldr	r3, [pc, #28]	; (801fc38 <low_level_input+0x2c>)
 801fc1a:	781b      	ldrb	r3, [r3, #0]
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d105      	bne.n	801fc2c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801fc20:	f107 030c 	add.w	r3, r7, #12
 801fc24:	4619      	mov	r1, r3
 801fc26:	4805      	ldr	r0, [pc, #20]	; (801fc3c <low_level_input+0x30>)
 801fc28:	f7f9 fe7e 	bl	8019928 <HAL_ETH_ReadData>
  }

  return p;
 801fc2c:	68fb      	ldr	r3, [r7, #12]
}
 801fc2e:	4618      	mov	r0, r3
 801fc30:	3710      	adds	r7, #16
 801fc32:	46bd      	mov	sp, r7
 801fc34:	bd80      	pop	{r7, pc}
 801fc36:	bf00      	nop
 801fc38:	200113bc 	.word	0x200113bc
 801fc3c:	200113c0 	.word	0x200113c0

0801fc40 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801fc40:	b580      	push	{r7, lr}
 801fc42:	b084      	sub	sp, #16
 801fc44:	af00      	add	r7, sp, #0
 801fc46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801fc48:	2300      	movs	r3, #0
 801fc4a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801fc4c:	6878      	ldr	r0, [r7, #4]
 801fc4e:	f7ff ffdd 	bl	801fc0c <low_level_input>
 801fc52:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801fc54:	68fb      	ldr	r3, [r7, #12]
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d00a      	beq.n	801fc70 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	691b      	ldr	r3, [r3, #16]
 801fc5e:	6879      	ldr	r1, [r7, #4]
 801fc60:	68f8      	ldr	r0, [r7, #12]
 801fc62:	4798      	blx	r3
 801fc64:	4603      	mov	r3, r0
 801fc66:	2b00      	cmp	r3, #0
 801fc68:	d002      	beq.n	801fc70 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801fc6a:	68f8      	ldr	r0, [r7, #12]
 801fc6c:	f001 fe40 	bl	80218f0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 801fc70:	68fb      	ldr	r3, [r7, #12]
 801fc72:	2b00      	cmp	r3, #0
 801fc74:	d1ea      	bne.n	801fc4c <ethernetif_input+0xc>
}
 801fc76:	bf00      	nop
 801fc78:	bf00      	nop
 801fc7a:	3710      	adds	r7, #16
 801fc7c:	46bd      	mov	sp, r7
 801fc7e:	bd80      	pop	{r7, pc}

0801fc80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801fc80:	b580      	push	{r7, lr}
 801fc82:	b082      	sub	sp, #8
 801fc84:	af00      	add	r7, sp, #0
 801fc86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d106      	bne.n	801fc9c <ethernetif_init+0x1c>
 801fc8e:	4b0e      	ldr	r3, [pc, #56]	; (801fcc8 <ethernetif_init+0x48>)
 801fc90:	f240 1287 	movw	r2, #391	; 0x187
 801fc94:	490d      	ldr	r1, [pc, #52]	; (801fccc <ethernetif_init+0x4c>)
 801fc96:	480e      	ldr	r0, [pc, #56]	; (801fcd0 <ethernetif_init+0x50>)
 801fc98:	f005 fb62 	bl	8025360 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	2273      	movs	r2, #115	; 0x73
 801fca0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	2274      	movs	r2, #116	; 0x74
 801fca8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	4a09      	ldr	r2, [pc, #36]	; (801fcd4 <ethernetif_init+0x54>)
 801fcb0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	4a08      	ldr	r2, [pc, #32]	; (801fcd8 <ethernetif_init+0x58>)
 801fcb6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801fcb8:	6878      	ldr	r0, [r7, #4]
 801fcba:	f7ff fe79 	bl	801f9b0 <low_level_init>

  return ERR_OK;
 801fcbe:	2300      	movs	r3, #0
}
 801fcc0:	4618      	mov	r0, r3
 801fcc2:	3708      	adds	r7, #8
 801fcc4:	46bd      	mov	sp, r7
 801fcc6:	bd80      	pop	{r7, pc}
 801fcc8:	0802a7e4 	.word	0x0802a7e4
 801fccc:	0802a800 	.word	0x0802a800
 801fcd0:	0802a810 	.word	0x0802a810
 801fcd4:	0802329d 	.word	0x0802329d
 801fcd8:	0801fb09 	.word	0x0801fb09

0801fcdc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801fcdc:	b580      	push	{r7, lr}
 801fcde:	b084      	sub	sp, #16
 801fce0:	af00      	add	r7, sp, #0
 801fce2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801fce8:	68f9      	ldr	r1, [r7, #12]
 801fcea:	4807      	ldr	r0, [pc, #28]	; (801fd08 <pbuf_free_custom+0x2c>)
 801fcec:	f000 fecc 	bl	8020a88 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801fcf0:	4b06      	ldr	r3, [pc, #24]	; (801fd0c <pbuf_free_custom+0x30>)
 801fcf2:	781b      	ldrb	r3, [r3, #0]
 801fcf4:	2b01      	cmp	r3, #1
 801fcf6:	d102      	bne.n	801fcfe <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801fcf8:	4b04      	ldr	r3, [pc, #16]	; (801fd0c <pbuf_free_custom+0x30>)
 801fcfa:	2200      	movs	r2, #0
 801fcfc:	701a      	strb	r2, [r3, #0]
  }
}
 801fcfe:	bf00      	nop
 801fd00:	3710      	adds	r7, #16
 801fd02:	46bd      	mov	sp, r7
 801fd04:	bd80      	pop	{r7, pc}
 801fd06:	bf00      	nop
 801fd08:	0802c28c 	.word	0x0802c28c
 801fd0c:	200113bc 	.word	0x200113bc

0801fd10 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801fd10:	b580      	push	{r7, lr}
 801fd12:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801fd14:	f7f8 fb1a 	bl	801834c <HAL_GetTick>
 801fd18:	4603      	mov	r3, r0
}
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	bd80      	pop	{r7, pc}
	...

0801fd20 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801fd20:	b580      	push	{r7, lr}
 801fd22:	b08e      	sub	sp, #56	; 0x38
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801fd28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd2c:	2200      	movs	r2, #0
 801fd2e:	601a      	str	r2, [r3, #0]
 801fd30:	605a      	str	r2, [r3, #4]
 801fd32:	609a      	str	r2, [r3, #8]
 801fd34:	60da      	str	r2, [r3, #12]
 801fd36:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	4a52      	ldr	r2, [pc, #328]	; (801fe88 <HAL_ETH_MspInit+0x168>)
 801fd3e:	4293      	cmp	r3, r2
 801fd40:	f040 809e 	bne.w	801fe80 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801fd44:	4b51      	ldr	r3, [pc, #324]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd48:	4a50      	ldr	r2, [pc, #320]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801fd4e:	6313      	str	r3, [r2, #48]	; 0x30
 801fd50:	4b4e      	ldr	r3, [pc, #312]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fd58:	623b      	str	r3, [r7, #32]
 801fd5a:	6a3b      	ldr	r3, [r7, #32]
 801fd5c:	4b4b      	ldr	r3, [pc, #300]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd60:	4a4a      	ldr	r2, [pc, #296]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801fd66:	6313      	str	r3, [r2, #48]	; 0x30
 801fd68:	4b48      	ldr	r3, [pc, #288]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801fd70:	61fb      	str	r3, [r7, #28]
 801fd72:	69fb      	ldr	r3, [r7, #28]
 801fd74:	4b45      	ldr	r3, [pc, #276]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd78:	4a44      	ldr	r2, [pc, #272]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801fd7e:	6313      	str	r3, [r2, #48]	; 0x30
 801fd80:	4b42      	ldr	r3, [pc, #264]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801fd88:	61bb      	str	r3, [r7, #24]
 801fd8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801fd8c:	4b3f      	ldr	r3, [pc, #252]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd90:	4a3e      	ldr	r2, [pc, #248]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd92:	f043 0304 	orr.w	r3, r3, #4
 801fd96:	6313      	str	r3, [r2, #48]	; 0x30
 801fd98:	4b3c      	ldr	r3, [pc, #240]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd9c:	f003 0304 	and.w	r3, r3, #4
 801fda0:	617b      	str	r3, [r7, #20]
 801fda2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801fda4:	4b39      	ldr	r3, [pc, #228]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fda8:	4a38      	ldr	r2, [pc, #224]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fdaa:	f043 0301 	orr.w	r3, r3, #1
 801fdae:	6313      	str	r3, [r2, #48]	; 0x30
 801fdb0:	4b36      	ldr	r3, [pc, #216]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fdb4:	f003 0301 	and.w	r3, r3, #1
 801fdb8:	613b      	str	r3, [r7, #16]
 801fdba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801fdbc:	4b33      	ldr	r3, [pc, #204]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fdbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fdc0:	4a32      	ldr	r2, [pc, #200]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fdc2:	f043 0302 	orr.w	r3, r3, #2
 801fdc6:	6313      	str	r3, [r2, #48]	; 0x30
 801fdc8:	4b30      	ldr	r3, [pc, #192]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fdcc:	f003 0302 	and.w	r3, r3, #2
 801fdd0:	60fb      	str	r3, [r7, #12]
 801fdd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801fdd4:	4b2d      	ldr	r3, [pc, #180]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fdd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fdd8:	4a2c      	ldr	r2, [pc, #176]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fdda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fdde:	6313      	str	r3, [r2, #48]	; 0x30
 801fde0:	4b2a      	ldr	r3, [pc, #168]	; (801fe8c <HAL_ETH_MspInit+0x16c>)
 801fde2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fde4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fde8:	60bb      	str	r3, [r7, #8]
 801fdea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801fdec:	2332      	movs	r3, #50	; 0x32
 801fdee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fdf0:	2302      	movs	r3, #2
 801fdf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdf4:	2300      	movs	r3, #0
 801fdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fdf8:	2303      	movs	r3, #3
 801fdfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801fdfc:	230b      	movs	r3, #11
 801fdfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fe00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe04:	4619      	mov	r1, r3
 801fe06:	4822      	ldr	r0, [pc, #136]	; (801fe90 <HAL_ETH_MspInit+0x170>)
 801fe08:	f7fa fdac 	bl	801a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801fe0c:	2386      	movs	r3, #134	; 0x86
 801fe0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fe10:	2302      	movs	r3, #2
 801fe12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe14:	2300      	movs	r3, #0
 801fe16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fe18:	2303      	movs	r3, #3
 801fe1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801fe1c:	230b      	movs	r3, #11
 801fe1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fe20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe24:	4619      	mov	r1, r3
 801fe26:	481b      	ldr	r0, [pc, #108]	; (801fe94 <HAL_ETH_MspInit+0x174>)
 801fe28:	f7fa fd9c 	bl	801a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801fe2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fe30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fe32:	2302      	movs	r3, #2
 801fe34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe36:	2300      	movs	r3, #0
 801fe38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fe3a:	2303      	movs	r3, #3
 801fe3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801fe3e:	230b      	movs	r3, #11
 801fe40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801fe42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe46:	4619      	mov	r1, r3
 801fe48:	4813      	ldr	r0, [pc, #76]	; (801fe98 <HAL_ETH_MspInit+0x178>)
 801fe4a:	f7fa fd8b 	bl	801a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801fe4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801fe52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fe54:	2302      	movs	r3, #2
 801fe56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe58:	2300      	movs	r3, #0
 801fe5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fe5c:	2303      	movs	r3, #3
 801fe5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801fe60:	230b      	movs	r3, #11
 801fe62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fe64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe68:	4619      	mov	r1, r3
 801fe6a:	480c      	ldr	r0, [pc, #48]	; (801fe9c <HAL_ETH_MspInit+0x17c>)
 801fe6c:	f7fa fd7a 	bl	801a964 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801fe70:	2200      	movs	r2, #0
 801fe72:	2101      	movs	r1, #1
 801fe74:	203d      	movs	r0, #61	; 0x3d
 801fe76:	f7f9 fa4a 	bl	801930e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801fe7a:	203d      	movs	r0, #61	; 0x3d
 801fe7c:	f7f9 fa63 	bl	8019346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801fe80:	bf00      	nop
 801fe82:	3738      	adds	r7, #56	; 0x38
 801fe84:	46bd      	mov	sp, r7
 801fe86:	bd80      	pop	{r7, pc}
 801fe88:	40028000 	.word	0x40028000
 801fe8c:	40023800 	.word	0x40023800
 801fe90:	40020800 	.word	0x40020800
 801fe94:	40020000 	.word	0x40020000
 801fe98:	40020400 	.word	0x40020400
 801fe9c:	40021800 	.word	0x40021800

0801fea0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801fea0:	b580      	push	{r7, lr}
 801fea2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801fea4:	4802      	ldr	r0, [pc, #8]	; (801feb0 <ETH_PHY_IO_Init+0x10>)
 801fea6:	f7fa f903 	bl	801a0b0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801feaa:	2300      	movs	r3, #0
}
 801feac:	4618      	mov	r0, r3
 801feae:	bd80      	pop	{r7, pc}
 801feb0:	200113c0 	.word	0x200113c0

0801feb4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801feb4:	b480      	push	{r7}
 801feb6:	af00      	add	r7, sp, #0
  return 0;
 801feb8:	2300      	movs	r3, #0
}
 801feba:	4618      	mov	r0, r3
 801febc:	46bd      	mov	sp, r7
 801febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fec2:	4770      	bx	lr

0801fec4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801fec4:	b580      	push	{r7, lr}
 801fec6:	b084      	sub	sp, #16
 801fec8:	af00      	add	r7, sp, #0
 801feca:	60f8      	str	r0, [r7, #12]
 801fecc:	60b9      	str	r1, [r7, #8]
 801fece:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	68ba      	ldr	r2, [r7, #8]
 801fed4:	68f9      	ldr	r1, [r7, #12]
 801fed6:	4807      	ldr	r0, [pc, #28]	; (801fef4 <ETH_PHY_IO_ReadReg+0x30>)
 801fed8:	f7f9 ff52 	bl	8019d80 <HAL_ETH_ReadPHYRegister>
 801fedc:	4603      	mov	r3, r0
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d002      	beq.n	801fee8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801fee2:	f04f 33ff 	mov.w	r3, #4294967295
 801fee6:	e000      	b.n	801feea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801fee8:	2300      	movs	r3, #0
}
 801feea:	4618      	mov	r0, r3
 801feec:	3710      	adds	r7, #16
 801feee:	46bd      	mov	sp, r7
 801fef0:	bd80      	pop	{r7, pc}
 801fef2:	bf00      	nop
 801fef4:	200113c0 	.word	0x200113c0

0801fef8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801fef8:	b580      	push	{r7, lr}
 801fefa:	b084      	sub	sp, #16
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	60f8      	str	r0, [r7, #12]
 801ff00:	60b9      	str	r1, [r7, #8]
 801ff02:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	68ba      	ldr	r2, [r7, #8]
 801ff08:	68f9      	ldr	r1, [r7, #12]
 801ff0a:	4807      	ldr	r0, [pc, #28]	; (801ff28 <ETH_PHY_IO_WriteReg+0x30>)
 801ff0c:	f7f9 ff83 	bl	8019e16 <HAL_ETH_WritePHYRegister>
 801ff10:	4603      	mov	r3, r0
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	d002      	beq.n	801ff1c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801ff16:	f04f 33ff 	mov.w	r3, #4294967295
 801ff1a:	e000      	b.n	801ff1e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801ff1c:	2300      	movs	r3, #0
}
 801ff1e:	4618      	mov	r0, r3
 801ff20:	3710      	adds	r7, #16
 801ff22:	46bd      	mov	sp, r7
 801ff24:	bd80      	pop	{r7, pc}
 801ff26:	bf00      	nop
 801ff28:	200113c0 	.word	0x200113c0

0801ff2c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801ff2c:	b580      	push	{r7, lr}
 801ff2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801ff30:	f7f8 fa0c 	bl	801834c <HAL_GetTick>
 801ff34:	4603      	mov	r3, r0
}
 801ff36:	4618      	mov	r0, r3
 801ff38:	bd80      	pop	{r7, pc}
	...

0801ff3c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801ff3c:	b580      	push	{r7, lr}
 801ff3e:	b0a0      	sub	sp, #128	; 0x80
 801ff40:	af00      	add	r7, sp, #0
 801ff42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801ff44:	f107 030c 	add.w	r3, r7, #12
 801ff48:	2264      	movs	r2, #100	; 0x64
 801ff4a:	2100      	movs	r1, #0
 801ff4c:	4618      	mov	r0, r3
 801ff4e:	f005 f91f 	bl	8025190 <memset>
  int32_t PHYLinkState = 0;
 801ff52:	2300      	movs	r3, #0
 801ff54:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801ff56:	2300      	movs	r3, #0
 801ff58:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ff5a:	2300      	movs	r3, #0
 801ff5c:	67bb      	str	r3, [r7, #120]	; 0x78
 801ff5e:	2300      	movs	r3, #0
 801ff60:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801ff62:	483a      	ldr	r0, [pc, #232]	; (802004c <ethernet_link_check_state+0x110>)
 801ff64:	f7f8 f90b 	bl	801817e <DP83848_GetLinkState>
 801ff68:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ff70:	089b      	lsrs	r3, r3, #2
 801ff72:	f003 0301 	and.w	r3, r3, #1
 801ff76:	b2db      	uxtb	r3, r3
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	d00c      	beq.n	801ff96 <ethernet_link_check_state+0x5a>
 801ff7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ff7e:	2b01      	cmp	r3, #1
 801ff80:	dc09      	bgt.n	801ff96 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801ff82:	4833      	ldr	r0, [pc, #204]	; (8020050 <ethernet_link_check_state+0x114>)
 801ff84:	f7f9 fbe3 	bl	801974e <HAL_ETH_Stop>
    netif_set_down(netif);
 801ff88:	6878      	ldr	r0, [r7, #4]
 801ff8a:	f001 f84b 	bl	8021024 <netif_set_down>
    netif_set_link_down(netif);
 801ff8e:	6878      	ldr	r0, [r7, #4]
 801ff90:	f001 f8ae 	bl	80210f0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801ff94:	e055      	b.n	8020042 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ff9c:	f003 0304 	and.w	r3, r3, #4
 801ffa0:	2b00      	cmp	r3, #0
 801ffa2:	d14e      	bne.n	8020042 <ethernet_link_check_state+0x106>
 801ffa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ffa6:	2b01      	cmp	r3, #1
 801ffa8:	dd4b      	ble.n	8020042 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801ffaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ffac:	3b02      	subs	r3, #2
 801ffae:	2b03      	cmp	r3, #3
 801ffb0:	d82a      	bhi.n	8020008 <ethernet_link_check_state+0xcc>
 801ffb2:	a201      	add	r2, pc, #4	; (adr r2, 801ffb8 <ethernet_link_check_state+0x7c>)
 801ffb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ffb8:	0801ffc9 	.word	0x0801ffc9
 801ffbc:	0801ffdb 	.word	0x0801ffdb
 801ffc0:	0801ffeb 	.word	0x0801ffeb
 801ffc4:	0801fffb 	.word	0x0801fffb
      duplex = ETH_FULLDUPLEX_MODE;
 801ffc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ffcc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801ffce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ffd2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ffd4:	2301      	movs	r3, #1
 801ffd6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801ffd8:	e017      	b.n	802000a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801ffda:	2300      	movs	r3, #0
 801ffdc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801ffde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ffe2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ffe4:	2301      	movs	r3, #1
 801ffe6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801ffe8:	e00f      	b.n	802000a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801ffea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ffee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801fff0:	2300      	movs	r3, #0
 801fff2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801fff4:	2301      	movs	r3, #1
 801fff6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801fff8:	e007      	b.n	802000a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801fffa:	2300      	movs	r3, #0
 801fffc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801fffe:	2300      	movs	r3, #0
 8020000:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8020002:	2301      	movs	r3, #1
 8020004:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8020006:	e000      	b.n	802000a <ethernet_link_check_state+0xce>
      break;
 8020008:	bf00      	nop
    if(linkchanged)
 802000a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802000c:	2b00      	cmp	r3, #0
 802000e:	d018      	beq.n	8020042 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8020010:	f107 030c 	add.w	r3, r7, #12
 8020014:	4619      	mov	r1, r3
 8020016:	480e      	ldr	r0, [pc, #56]	; (8020050 <ethernet_link_check_state+0x114>)
 8020018:	f7f9 ff46 	bl	8019ea8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 802001c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802001e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8020020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020022:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8020024:	f107 030c 	add.w	r3, r7, #12
 8020028:	4619      	mov	r1, r3
 802002a:	4809      	ldr	r0, [pc, #36]	; (8020050 <ethernet_link_check_state+0x114>)
 802002c:	f7fa f826 	bl	801a07c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8020030:	4807      	ldr	r0, [pc, #28]	; (8020050 <ethernet_link_check_state+0x114>)
 8020032:	f7f9 fb2d 	bl	8019690 <HAL_ETH_Start>
      netif_set_up(netif);
 8020036:	6878      	ldr	r0, [r7, #4]
 8020038:	f000 ff88 	bl	8020f4c <netif_set_up>
      netif_set_link_up(netif);
 802003c:	6878      	ldr	r0, [r7, #4]
 802003e:	f001 f823 	bl	8021088 <netif_set_link_up>
}
 8020042:	bf00      	nop
 8020044:	3780      	adds	r7, #128	; 0x80
 8020046:	46bd      	mov	sp, r7
 8020048:	bd80      	pop	{r7, pc}
 802004a:	bf00      	nop
 802004c:	200114a8 	.word	0x200114a8
 8020050:	200113c0 	.word	0x200113c0

08020054 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8020054:	b580      	push	{r7, lr}
 8020056:	b086      	sub	sp, #24
 8020058:	af02      	add	r7, sp, #8
 802005a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 802005c:	4812      	ldr	r0, [pc, #72]	; (80200a8 <HAL_ETH_RxAllocateCallback+0x54>)
 802005e:	f000 fca5 	bl	80209ac <memp_malloc_pool>
 8020062:	60f8      	str	r0, [r7, #12]
	if (p)
 8020064:	68fb      	ldr	r3, [r7, #12]
 8020066:	2b00      	cmp	r3, #0
 8020068:	d014      	beq.n	8020094 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 802006a:	68fb      	ldr	r3, [r7, #12]
 802006c:	f103 0214 	add.w	r2, r3, #20
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 8020074:	68fb      	ldr	r3, [r7, #12]
 8020076:	4a0d      	ldr	r2, [pc, #52]	; (80200ac <HAL_ETH_RxAllocateCallback+0x58>)
 8020078:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8020082:	9201      	str	r2, [sp, #4]
 8020084:	9300      	str	r3, [sp, #0]
 8020086:	68fb      	ldr	r3, [r7, #12]
 8020088:	2241      	movs	r2, #65	; 0x41
 802008a:	2100      	movs	r1, #0
 802008c:	2000      	movs	r0, #0
 802008e:	f001 fa75 	bl	802157c <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8020092:	e005      	b.n	80200a0 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 8020094:	4b06      	ldr	r3, [pc, #24]	; (80200b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8020096:	2201      	movs	r2, #1
 8020098:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	2200      	movs	r2, #0
 802009e:	601a      	str	r2, [r3, #0]
}
 80200a0:	bf00      	nop
 80200a2:	3710      	adds	r7, #16
 80200a4:	46bd      	mov	sp, r7
 80200a6:	bd80      	pop	{r7, pc}
 80200a8:	0802c28c 	.word	0x0802c28c
 80200ac:	0801fcdd 	.word	0x0801fcdd
 80200b0:	200113bc 	.word	0x200113bc

080200b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80200b4:	b580      	push	{r7, lr}
 80200b6:	b088      	sub	sp, #32
 80200b8:	af00      	add	r7, sp, #0
 80200ba:	60f8      	str	r0, [r7, #12]
 80200bc:	60b9      	str	r1, [r7, #8]
 80200be:	607a      	str	r2, [r7, #4]
 80200c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 80200c2:	68fb      	ldr	r3, [r7, #12]
 80200c4:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80200c6:	68bb      	ldr	r3, [r7, #8]
 80200c8:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 80200ca:	2300      	movs	r3, #0
 80200cc:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	3b14      	subs	r3, #20
 80200d2:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 80200d4:	69fb      	ldr	r3, [r7, #28]
 80200d6:	2200      	movs	r2, #0
 80200d8:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 80200da:	69fb      	ldr	r3, [r7, #28]
 80200dc:	2200      	movs	r2, #0
 80200de:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 80200e0:	69fb      	ldr	r3, [r7, #28]
 80200e2:	887a      	ldrh	r2, [r7, #2]
 80200e4:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 80200e6:	69bb      	ldr	r3, [r7, #24]
 80200e8:	681b      	ldr	r3, [r3, #0]
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	d103      	bne.n	80200f6 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 80200ee:	69bb      	ldr	r3, [r7, #24]
 80200f0:	69fa      	ldr	r2, [r7, #28]
 80200f2:	601a      	str	r2, [r3, #0]
 80200f4:	e003      	b.n	80200fe <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 80200f6:	697b      	ldr	r3, [r7, #20]
 80200f8:	681b      	ldr	r3, [r3, #0]
 80200fa:	69fa      	ldr	r2, [r7, #28]
 80200fc:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 80200fe:	697b      	ldr	r3, [r7, #20]
 8020100:	69fa      	ldr	r2, [r7, #28]
 8020102:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 8020104:	69bb      	ldr	r3, [r7, #24]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	61fb      	str	r3, [r7, #28]
 802010a:	e009      	b.n	8020120 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 802010c:	69fb      	ldr	r3, [r7, #28]
 802010e:	891a      	ldrh	r2, [r3, #8]
 8020110:	887b      	ldrh	r3, [r7, #2]
 8020112:	4413      	add	r3, r2
 8020114:	b29a      	uxth	r2, r3
 8020116:	69fb      	ldr	r3, [r7, #28]
 8020118:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 802011a:	69fb      	ldr	r3, [r7, #28]
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	61fb      	str	r3, [r7, #28]
 8020120:	69fb      	ldr	r3, [r7, #28]
 8020122:	2b00      	cmp	r3, #0
 8020124:	d1f2      	bne.n	802010c <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8020126:	887b      	ldrh	r3, [r7, #2]
 8020128:	4619      	mov	r1, r3
 802012a:	6878      	ldr	r0, [r7, #4]
 802012c:	f7ff fc14 	bl	801f958 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8020130:	bf00      	nop
 8020132:	3720      	adds	r7, #32
 8020134:	46bd      	mov	sp, r7
 8020136:	bd80      	pop	{r7, pc}

08020138 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8020138:	b480      	push	{r7}
 802013a:	b083      	sub	sp, #12
 802013c:	af00      	add	r7, sp, #0
 802013e:	4603      	mov	r3, r0
 8020140:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8020142:	88fb      	ldrh	r3, [r7, #6]
 8020144:	021b      	lsls	r3, r3, #8
 8020146:	b21a      	sxth	r2, r3
 8020148:	88fb      	ldrh	r3, [r7, #6]
 802014a:	0a1b      	lsrs	r3, r3, #8
 802014c:	b29b      	uxth	r3, r3
 802014e:	b21b      	sxth	r3, r3
 8020150:	4313      	orrs	r3, r2
 8020152:	b21b      	sxth	r3, r3
 8020154:	b29b      	uxth	r3, r3
}
 8020156:	4618      	mov	r0, r3
 8020158:	370c      	adds	r7, #12
 802015a:	46bd      	mov	sp, r7
 802015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020160:	4770      	bx	lr

08020162 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8020162:	b580      	push	{r7, lr}
 8020164:	b082      	sub	sp, #8
 8020166:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8020168:	2300      	movs	r3, #0
 802016a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 802016c:	f000 f8d2 	bl	8020314 <mem_init>
  memp_init();
 8020170:	f000 fbd8 	bl	8020924 <memp_init>
  pbuf_init();
  netif_init();
 8020174:	f000 fcfc 	bl	8020b70 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8020178:	f001 ff9a 	bl	80220b0 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 802017c:	f001 ff16 	bl	8021fac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8020180:	bf00      	nop
 8020182:	3708      	adds	r7, #8
 8020184:	46bd      	mov	sp, r7
 8020186:	bd80      	pop	{r7, pc}

08020188 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8020188:	b480      	push	{r7}
 802018a:	b083      	sub	sp, #12
 802018c:	af00      	add	r7, sp, #0
 802018e:	4603      	mov	r3, r0
 8020190:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8020192:	4b05      	ldr	r3, [pc, #20]	; (80201a8 <ptr_to_mem+0x20>)
 8020194:	681a      	ldr	r2, [r3, #0]
 8020196:	88fb      	ldrh	r3, [r7, #6]
 8020198:	4413      	add	r3, r2
}
 802019a:	4618      	mov	r0, r3
 802019c:	370c      	adds	r7, #12
 802019e:	46bd      	mov	sp, r7
 80201a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201a4:	4770      	bx	lr
 80201a6:	bf00      	nop
 80201a8:	20011b34 	.word	0x20011b34

080201ac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80201ac:	b480      	push	{r7}
 80201ae:	b083      	sub	sp, #12
 80201b0:	af00      	add	r7, sp, #0
 80201b2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80201b4:	4b05      	ldr	r3, [pc, #20]	; (80201cc <mem_to_ptr+0x20>)
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	687a      	ldr	r2, [r7, #4]
 80201ba:	1ad3      	subs	r3, r2, r3
 80201bc:	b29b      	uxth	r3, r3
}
 80201be:	4618      	mov	r0, r3
 80201c0:	370c      	adds	r7, #12
 80201c2:	46bd      	mov	sp, r7
 80201c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201c8:	4770      	bx	lr
 80201ca:	bf00      	nop
 80201cc:	20011b34 	.word	0x20011b34

080201d0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80201d0:	b590      	push	{r4, r7, lr}
 80201d2:	b085      	sub	sp, #20
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80201d8:	4b45      	ldr	r3, [pc, #276]	; (80202f0 <plug_holes+0x120>)
 80201da:	681b      	ldr	r3, [r3, #0]
 80201dc:	687a      	ldr	r2, [r7, #4]
 80201de:	429a      	cmp	r2, r3
 80201e0:	d206      	bcs.n	80201f0 <plug_holes+0x20>
 80201e2:	4b44      	ldr	r3, [pc, #272]	; (80202f4 <plug_holes+0x124>)
 80201e4:	f240 12df 	movw	r2, #479	; 0x1df
 80201e8:	4943      	ldr	r1, [pc, #268]	; (80202f8 <plug_holes+0x128>)
 80201ea:	4844      	ldr	r0, [pc, #272]	; (80202fc <plug_holes+0x12c>)
 80201ec:	f005 f8b8 	bl	8025360 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80201f0:	4b43      	ldr	r3, [pc, #268]	; (8020300 <plug_holes+0x130>)
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	687a      	ldr	r2, [r7, #4]
 80201f6:	429a      	cmp	r2, r3
 80201f8:	d306      	bcc.n	8020208 <plug_holes+0x38>
 80201fa:	4b3e      	ldr	r3, [pc, #248]	; (80202f4 <plug_holes+0x124>)
 80201fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8020200:	4940      	ldr	r1, [pc, #256]	; (8020304 <plug_holes+0x134>)
 8020202:	483e      	ldr	r0, [pc, #248]	; (80202fc <plug_holes+0x12c>)
 8020204:	f005 f8ac 	bl	8025360 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	791b      	ldrb	r3, [r3, #4]
 802020c:	2b00      	cmp	r3, #0
 802020e:	d006      	beq.n	802021e <plug_holes+0x4e>
 8020210:	4b38      	ldr	r3, [pc, #224]	; (80202f4 <plug_holes+0x124>)
 8020212:	f240 12e1 	movw	r2, #481	; 0x1e1
 8020216:	493c      	ldr	r1, [pc, #240]	; (8020308 <plug_holes+0x138>)
 8020218:	4838      	ldr	r0, [pc, #224]	; (80202fc <plug_holes+0x12c>)
 802021a:	f005 f8a1 	bl	8025360 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	881b      	ldrh	r3, [r3, #0]
 8020222:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020226:	d906      	bls.n	8020236 <plug_holes+0x66>
 8020228:	4b32      	ldr	r3, [pc, #200]	; (80202f4 <plug_holes+0x124>)
 802022a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 802022e:	4937      	ldr	r1, [pc, #220]	; (802030c <plug_holes+0x13c>)
 8020230:	4832      	ldr	r0, [pc, #200]	; (80202fc <plug_holes+0x12c>)
 8020232:	f005 f895 	bl	8025360 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	881b      	ldrh	r3, [r3, #0]
 802023a:	4618      	mov	r0, r3
 802023c:	f7ff ffa4 	bl	8020188 <ptr_to_mem>
 8020240:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8020242:	687a      	ldr	r2, [r7, #4]
 8020244:	68fb      	ldr	r3, [r7, #12]
 8020246:	429a      	cmp	r2, r3
 8020248:	d024      	beq.n	8020294 <plug_holes+0xc4>
 802024a:	68fb      	ldr	r3, [r7, #12]
 802024c:	791b      	ldrb	r3, [r3, #4]
 802024e:	2b00      	cmp	r3, #0
 8020250:	d120      	bne.n	8020294 <plug_holes+0xc4>
 8020252:	4b2b      	ldr	r3, [pc, #172]	; (8020300 <plug_holes+0x130>)
 8020254:	681b      	ldr	r3, [r3, #0]
 8020256:	68fa      	ldr	r2, [r7, #12]
 8020258:	429a      	cmp	r2, r3
 802025a:	d01b      	beq.n	8020294 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 802025c:	4b2c      	ldr	r3, [pc, #176]	; (8020310 <plug_holes+0x140>)
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	68fa      	ldr	r2, [r7, #12]
 8020262:	429a      	cmp	r2, r3
 8020264:	d102      	bne.n	802026c <plug_holes+0x9c>
      lfree = mem;
 8020266:	4a2a      	ldr	r2, [pc, #168]	; (8020310 <plug_holes+0x140>)
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	881a      	ldrh	r2, [r3, #0]
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8020274:	68fb      	ldr	r3, [r7, #12]
 8020276:	881b      	ldrh	r3, [r3, #0]
 8020278:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802027c:	d00a      	beq.n	8020294 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 802027e:	68fb      	ldr	r3, [r7, #12]
 8020280:	881b      	ldrh	r3, [r3, #0]
 8020282:	4618      	mov	r0, r3
 8020284:	f7ff ff80 	bl	8020188 <ptr_to_mem>
 8020288:	4604      	mov	r4, r0
 802028a:	6878      	ldr	r0, [r7, #4]
 802028c:	f7ff ff8e 	bl	80201ac <mem_to_ptr>
 8020290:	4603      	mov	r3, r0
 8020292:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	885b      	ldrh	r3, [r3, #2]
 8020298:	4618      	mov	r0, r3
 802029a:	f7ff ff75 	bl	8020188 <ptr_to_mem>
 802029e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80202a0:	68ba      	ldr	r2, [r7, #8]
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	429a      	cmp	r2, r3
 80202a6:	d01f      	beq.n	80202e8 <plug_holes+0x118>
 80202a8:	68bb      	ldr	r3, [r7, #8]
 80202aa:	791b      	ldrb	r3, [r3, #4]
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d11b      	bne.n	80202e8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80202b0:	4b17      	ldr	r3, [pc, #92]	; (8020310 <plug_holes+0x140>)
 80202b2:	681b      	ldr	r3, [r3, #0]
 80202b4:	687a      	ldr	r2, [r7, #4]
 80202b6:	429a      	cmp	r2, r3
 80202b8:	d102      	bne.n	80202c0 <plug_holes+0xf0>
      lfree = pmem;
 80202ba:	4a15      	ldr	r2, [pc, #84]	; (8020310 <plug_holes+0x140>)
 80202bc:	68bb      	ldr	r3, [r7, #8]
 80202be:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	881a      	ldrh	r2, [r3, #0]
 80202c4:	68bb      	ldr	r3, [r7, #8]
 80202c6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	881b      	ldrh	r3, [r3, #0]
 80202cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80202d0:	d00a      	beq.n	80202e8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	881b      	ldrh	r3, [r3, #0]
 80202d6:	4618      	mov	r0, r3
 80202d8:	f7ff ff56 	bl	8020188 <ptr_to_mem>
 80202dc:	4604      	mov	r4, r0
 80202de:	68b8      	ldr	r0, [r7, #8]
 80202e0:	f7ff ff64 	bl	80201ac <mem_to_ptr>
 80202e4:	4603      	mov	r3, r0
 80202e6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80202e8:	bf00      	nop
 80202ea:	3714      	adds	r7, #20
 80202ec:	46bd      	mov	sp, r7
 80202ee:	bd90      	pop	{r4, r7, pc}
 80202f0:	20011b34 	.word	0x20011b34
 80202f4:	0802a838 	.word	0x0802a838
 80202f8:	0802a868 	.word	0x0802a868
 80202fc:	0802a880 	.word	0x0802a880
 8020300:	20011b38 	.word	0x20011b38
 8020304:	0802a8a8 	.word	0x0802a8a8
 8020308:	0802a8c4 	.word	0x0802a8c4
 802030c:	0802a8e0 	.word	0x0802a8e0
 8020310:	20011b3c 	.word	0x20011b3c

08020314 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8020314:	b580      	push	{r7, lr}
 8020316:	b082      	sub	sp, #8
 8020318:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 802031a:	4b18      	ldr	r3, [pc, #96]	; (802037c <mem_init+0x68>)
 802031c:	3303      	adds	r3, #3
 802031e:	f023 0303 	bic.w	r3, r3, #3
 8020322:	461a      	mov	r2, r3
 8020324:	4b16      	ldr	r3, [pc, #88]	; (8020380 <mem_init+0x6c>)
 8020326:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8020328:	4b15      	ldr	r3, [pc, #84]	; (8020380 <mem_init+0x6c>)
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020334:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	2200      	movs	r2, #0
 802033a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	2200      	movs	r2, #0
 8020340:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8020342:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8020346:	f7ff ff1f 	bl	8020188 <ptr_to_mem>
 802034a:	4603      	mov	r3, r0
 802034c:	4a0d      	ldr	r2, [pc, #52]	; (8020384 <mem_init+0x70>)
 802034e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8020350:	4b0c      	ldr	r3, [pc, #48]	; (8020384 <mem_init+0x70>)
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	2201      	movs	r2, #1
 8020356:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8020358:	4b0a      	ldr	r3, [pc, #40]	; (8020384 <mem_init+0x70>)
 802035a:	681b      	ldr	r3, [r3, #0]
 802035c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020360:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8020362:	4b08      	ldr	r3, [pc, #32]	; (8020384 <mem_init+0x70>)
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802036a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 802036c:	4b04      	ldr	r3, [pc, #16]	; (8020380 <mem_init+0x6c>)
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	4a05      	ldr	r2, [pc, #20]	; (8020388 <mem_init+0x74>)
 8020372:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8020374:	bf00      	nop
 8020376:	3708      	adds	r7, #8
 8020378:	46bd      	mov	sp, r7
 802037a:	bd80      	pop	{r7, pc}
 802037c:	200114e0 	.word	0x200114e0
 8020380:	20011b34 	.word	0x20011b34
 8020384:	20011b38 	.word	0x20011b38
 8020388:	20011b3c 	.word	0x20011b3c

0802038c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 802038c:	b580      	push	{r7, lr}
 802038e:	b086      	sub	sp, #24
 8020390:	af00      	add	r7, sp, #0
 8020392:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8020394:	6878      	ldr	r0, [r7, #4]
 8020396:	f7ff ff09 	bl	80201ac <mem_to_ptr>
 802039a:	4603      	mov	r3, r0
 802039c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	881b      	ldrh	r3, [r3, #0]
 80203a2:	4618      	mov	r0, r3
 80203a4:	f7ff fef0 	bl	8020188 <ptr_to_mem>
 80203a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	885b      	ldrh	r3, [r3, #2]
 80203ae:	4618      	mov	r0, r3
 80203b0:	f7ff feea 	bl	8020188 <ptr_to_mem>
 80203b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	881b      	ldrh	r3, [r3, #0]
 80203ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80203be:	d818      	bhi.n	80203f2 <mem_link_valid+0x66>
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	885b      	ldrh	r3, [r3, #2]
 80203c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80203c8:	d813      	bhi.n	80203f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80203ce:	8afa      	ldrh	r2, [r7, #22]
 80203d0:	429a      	cmp	r2, r3
 80203d2:	d004      	beq.n	80203de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80203d4:	68fb      	ldr	r3, [r7, #12]
 80203d6:	881b      	ldrh	r3, [r3, #0]
 80203d8:	8afa      	ldrh	r2, [r7, #22]
 80203da:	429a      	cmp	r2, r3
 80203dc:	d109      	bne.n	80203f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80203de:	4b08      	ldr	r3, [pc, #32]	; (8020400 <mem_link_valid+0x74>)
 80203e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80203e2:	693a      	ldr	r2, [r7, #16]
 80203e4:	429a      	cmp	r2, r3
 80203e6:	d006      	beq.n	80203f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80203e8:	693b      	ldr	r3, [r7, #16]
 80203ea:	885b      	ldrh	r3, [r3, #2]
 80203ec:	8afa      	ldrh	r2, [r7, #22]
 80203ee:	429a      	cmp	r2, r3
 80203f0:	d001      	beq.n	80203f6 <mem_link_valid+0x6a>
    return 0;
 80203f2:	2300      	movs	r3, #0
 80203f4:	e000      	b.n	80203f8 <mem_link_valid+0x6c>
  }
  return 1;
 80203f6:	2301      	movs	r3, #1
}
 80203f8:	4618      	mov	r0, r3
 80203fa:	3718      	adds	r7, #24
 80203fc:	46bd      	mov	sp, r7
 80203fe:	bd80      	pop	{r7, pc}
 8020400:	20011b38 	.word	0x20011b38

08020404 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8020404:	b580      	push	{r7, lr}
 8020406:	b084      	sub	sp, #16
 8020408:	af00      	add	r7, sp, #0
 802040a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	2b00      	cmp	r3, #0
 8020410:	d04c      	beq.n	80204ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	f003 0303 	and.w	r3, r3, #3
 8020418:	2b00      	cmp	r3, #0
 802041a:	d007      	beq.n	802042c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 802041c:	4b25      	ldr	r3, [pc, #148]	; (80204b4 <mem_free+0xb0>)
 802041e:	f240 2273 	movw	r2, #627	; 0x273
 8020422:	4925      	ldr	r1, [pc, #148]	; (80204b8 <mem_free+0xb4>)
 8020424:	4825      	ldr	r0, [pc, #148]	; (80204bc <mem_free+0xb8>)
 8020426:	f004 ff9b 	bl	8025360 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 802042a:	e040      	b.n	80204ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	3b08      	subs	r3, #8
 8020430:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8020432:	4b23      	ldr	r3, [pc, #140]	; (80204c0 <mem_free+0xbc>)
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	68fa      	ldr	r2, [r7, #12]
 8020438:	429a      	cmp	r2, r3
 802043a:	d306      	bcc.n	802044a <mem_free+0x46>
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	f103 020c 	add.w	r2, r3, #12
 8020442:	4b20      	ldr	r3, [pc, #128]	; (80204c4 <mem_free+0xc0>)
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	429a      	cmp	r2, r3
 8020448:	d907      	bls.n	802045a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 802044a:	4b1a      	ldr	r3, [pc, #104]	; (80204b4 <mem_free+0xb0>)
 802044c:	f240 227f 	movw	r2, #639	; 0x27f
 8020450:	491d      	ldr	r1, [pc, #116]	; (80204c8 <mem_free+0xc4>)
 8020452:	481a      	ldr	r0, [pc, #104]	; (80204bc <mem_free+0xb8>)
 8020454:	f004 ff84 	bl	8025360 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8020458:	e029      	b.n	80204ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 802045a:	68fb      	ldr	r3, [r7, #12]
 802045c:	791b      	ldrb	r3, [r3, #4]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d107      	bne.n	8020472 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8020462:	4b14      	ldr	r3, [pc, #80]	; (80204b4 <mem_free+0xb0>)
 8020464:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8020468:	4918      	ldr	r1, [pc, #96]	; (80204cc <mem_free+0xc8>)
 802046a:	4814      	ldr	r0, [pc, #80]	; (80204bc <mem_free+0xb8>)
 802046c:	f004 ff78 	bl	8025360 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8020470:	e01d      	b.n	80204ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8020472:	68f8      	ldr	r0, [r7, #12]
 8020474:	f7ff ff8a 	bl	802038c <mem_link_valid>
 8020478:	4603      	mov	r3, r0
 802047a:	2b00      	cmp	r3, #0
 802047c:	d107      	bne.n	802048e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 802047e:	4b0d      	ldr	r3, [pc, #52]	; (80204b4 <mem_free+0xb0>)
 8020480:	f240 2295 	movw	r2, #661	; 0x295
 8020484:	4912      	ldr	r1, [pc, #72]	; (80204d0 <mem_free+0xcc>)
 8020486:	480d      	ldr	r0, [pc, #52]	; (80204bc <mem_free+0xb8>)
 8020488:	f004 ff6a 	bl	8025360 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 802048c:	e00f      	b.n	80204ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 802048e:	68fb      	ldr	r3, [r7, #12]
 8020490:	2200      	movs	r2, #0
 8020492:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8020494:	4b0f      	ldr	r3, [pc, #60]	; (80204d4 <mem_free+0xd0>)
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	68fa      	ldr	r2, [r7, #12]
 802049a:	429a      	cmp	r2, r3
 802049c:	d202      	bcs.n	80204a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 802049e:	4a0d      	ldr	r2, [pc, #52]	; (80204d4 <mem_free+0xd0>)
 80204a0:	68fb      	ldr	r3, [r7, #12]
 80204a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80204a4:	68f8      	ldr	r0, [r7, #12]
 80204a6:	f7ff fe93 	bl	80201d0 <plug_holes>
 80204aa:	e000      	b.n	80204ae <mem_free+0xaa>
    return;
 80204ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80204ae:	3710      	adds	r7, #16
 80204b0:	46bd      	mov	sp, r7
 80204b2:	bd80      	pop	{r7, pc}
 80204b4:	0802a838 	.word	0x0802a838
 80204b8:	0802a90c 	.word	0x0802a90c
 80204bc:	0802a880 	.word	0x0802a880
 80204c0:	20011b34 	.word	0x20011b34
 80204c4:	20011b38 	.word	0x20011b38
 80204c8:	0802a930 	.word	0x0802a930
 80204cc:	0802a94c 	.word	0x0802a94c
 80204d0:	0802a974 	.word	0x0802a974
 80204d4:	20011b3c 	.word	0x20011b3c

080204d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b088      	sub	sp, #32
 80204dc:	af00      	add	r7, sp, #0
 80204de:	6078      	str	r0, [r7, #4]
 80204e0:	460b      	mov	r3, r1
 80204e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80204e4:	887b      	ldrh	r3, [r7, #2]
 80204e6:	3303      	adds	r3, #3
 80204e8:	b29b      	uxth	r3, r3
 80204ea:	f023 0303 	bic.w	r3, r3, #3
 80204ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80204f0:	8bfb      	ldrh	r3, [r7, #30]
 80204f2:	2b0b      	cmp	r3, #11
 80204f4:	d801      	bhi.n	80204fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80204f6:	230c      	movs	r3, #12
 80204f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80204fa:	8bfb      	ldrh	r3, [r7, #30]
 80204fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020500:	d803      	bhi.n	802050a <mem_trim+0x32>
 8020502:	8bfa      	ldrh	r2, [r7, #30]
 8020504:	887b      	ldrh	r3, [r7, #2]
 8020506:	429a      	cmp	r2, r3
 8020508:	d201      	bcs.n	802050e <mem_trim+0x36>
    return NULL;
 802050a:	2300      	movs	r3, #0
 802050c:	e0cc      	b.n	80206a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 802050e:	4b68      	ldr	r3, [pc, #416]	; (80206b0 <mem_trim+0x1d8>)
 8020510:	681b      	ldr	r3, [r3, #0]
 8020512:	687a      	ldr	r2, [r7, #4]
 8020514:	429a      	cmp	r2, r3
 8020516:	d304      	bcc.n	8020522 <mem_trim+0x4a>
 8020518:	4b66      	ldr	r3, [pc, #408]	; (80206b4 <mem_trim+0x1dc>)
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	687a      	ldr	r2, [r7, #4]
 802051e:	429a      	cmp	r2, r3
 8020520:	d306      	bcc.n	8020530 <mem_trim+0x58>
 8020522:	4b65      	ldr	r3, [pc, #404]	; (80206b8 <mem_trim+0x1e0>)
 8020524:	f240 22d1 	movw	r2, #721	; 0x2d1
 8020528:	4964      	ldr	r1, [pc, #400]	; (80206bc <mem_trim+0x1e4>)
 802052a:	4865      	ldr	r0, [pc, #404]	; (80206c0 <mem_trim+0x1e8>)
 802052c:	f004 ff18 	bl	8025360 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8020530:	4b5f      	ldr	r3, [pc, #380]	; (80206b0 <mem_trim+0x1d8>)
 8020532:	681b      	ldr	r3, [r3, #0]
 8020534:	687a      	ldr	r2, [r7, #4]
 8020536:	429a      	cmp	r2, r3
 8020538:	d304      	bcc.n	8020544 <mem_trim+0x6c>
 802053a:	4b5e      	ldr	r3, [pc, #376]	; (80206b4 <mem_trim+0x1dc>)
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	687a      	ldr	r2, [r7, #4]
 8020540:	429a      	cmp	r2, r3
 8020542:	d301      	bcc.n	8020548 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	e0af      	b.n	80206a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	3b08      	subs	r3, #8
 802054c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 802054e:	69b8      	ldr	r0, [r7, #24]
 8020550:	f7ff fe2c 	bl	80201ac <mem_to_ptr>
 8020554:	4603      	mov	r3, r0
 8020556:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8020558:	69bb      	ldr	r3, [r7, #24]
 802055a:	881a      	ldrh	r2, [r3, #0]
 802055c:	8afb      	ldrh	r3, [r7, #22]
 802055e:	1ad3      	subs	r3, r2, r3
 8020560:	b29b      	uxth	r3, r3
 8020562:	3b08      	subs	r3, #8
 8020564:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8020566:	8bfa      	ldrh	r2, [r7, #30]
 8020568:	8abb      	ldrh	r3, [r7, #20]
 802056a:	429a      	cmp	r2, r3
 802056c:	d906      	bls.n	802057c <mem_trim+0xa4>
 802056e:	4b52      	ldr	r3, [pc, #328]	; (80206b8 <mem_trim+0x1e0>)
 8020570:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8020574:	4953      	ldr	r1, [pc, #332]	; (80206c4 <mem_trim+0x1ec>)
 8020576:	4852      	ldr	r0, [pc, #328]	; (80206c0 <mem_trim+0x1e8>)
 8020578:	f004 fef2 	bl	8025360 <iprintf>
  if (newsize > size) {
 802057c:	8bfa      	ldrh	r2, [r7, #30]
 802057e:	8abb      	ldrh	r3, [r7, #20]
 8020580:	429a      	cmp	r2, r3
 8020582:	d901      	bls.n	8020588 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8020584:	2300      	movs	r3, #0
 8020586:	e08f      	b.n	80206a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8020588:	8bfa      	ldrh	r2, [r7, #30]
 802058a:	8abb      	ldrh	r3, [r7, #20]
 802058c:	429a      	cmp	r2, r3
 802058e:	d101      	bne.n	8020594 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	e089      	b.n	80206a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8020594:	69bb      	ldr	r3, [r7, #24]
 8020596:	881b      	ldrh	r3, [r3, #0]
 8020598:	4618      	mov	r0, r3
 802059a:	f7ff fdf5 	bl	8020188 <ptr_to_mem>
 802059e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80205a0:	693b      	ldr	r3, [r7, #16]
 80205a2:	791b      	ldrb	r3, [r3, #4]
 80205a4:	2b00      	cmp	r3, #0
 80205a6:	d13f      	bne.n	8020628 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80205a8:	69bb      	ldr	r3, [r7, #24]
 80205aa:	881b      	ldrh	r3, [r3, #0]
 80205ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80205b0:	d106      	bne.n	80205c0 <mem_trim+0xe8>
 80205b2:	4b41      	ldr	r3, [pc, #260]	; (80206b8 <mem_trim+0x1e0>)
 80205b4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80205b8:	4943      	ldr	r1, [pc, #268]	; (80206c8 <mem_trim+0x1f0>)
 80205ba:	4841      	ldr	r0, [pc, #260]	; (80206c0 <mem_trim+0x1e8>)
 80205bc:	f004 fed0 	bl	8025360 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80205c0:	693b      	ldr	r3, [r7, #16]
 80205c2:	881b      	ldrh	r3, [r3, #0]
 80205c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80205c6:	8afa      	ldrh	r2, [r7, #22]
 80205c8:	8bfb      	ldrh	r3, [r7, #30]
 80205ca:	4413      	add	r3, r2
 80205cc:	b29b      	uxth	r3, r3
 80205ce:	3308      	adds	r3, #8
 80205d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80205d2:	4b3e      	ldr	r3, [pc, #248]	; (80206cc <mem_trim+0x1f4>)
 80205d4:	681b      	ldr	r3, [r3, #0]
 80205d6:	693a      	ldr	r2, [r7, #16]
 80205d8:	429a      	cmp	r2, r3
 80205da:	d106      	bne.n	80205ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80205dc:	89fb      	ldrh	r3, [r7, #14]
 80205de:	4618      	mov	r0, r3
 80205e0:	f7ff fdd2 	bl	8020188 <ptr_to_mem>
 80205e4:	4603      	mov	r3, r0
 80205e6:	4a39      	ldr	r2, [pc, #228]	; (80206cc <mem_trim+0x1f4>)
 80205e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80205ea:	89fb      	ldrh	r3, [r7, #14]
 80205ec:	4618      	mov	r0, r3
 80205ee:	f7ff fdcb 	bl	8020188 <ptr_to_mem>
 80205f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80205f4:	693b      	ldr	r3, [r7, #16]
 80205f6:	2200      	movs	r2, #0
 80205f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80205fa:	693b      	ldr	r3, [r7, #16]
 80205fc:	89ba      	ldrh	r2, [r7, #12]
 80205fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8020600:	693b      	ldr	r3, [r7, #16]
 8020602:	8afa      	ldrh	r2, [r7, #22]
 8020604:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8020606:	69bb      	ldr	r3, [r7, #24]
 8020608:	89fa      	ldrh	r2, [r7, #14]
 802060a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802060c:	693b      	ldr	r3, [r7, #16]
 802060e:	881b      	ldrh	r3, [r3, #0]
 8020610:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020614:	d047      	beq.n	80206a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8020616:	693b      	ldr	r3, [r7, #16]
 8020618:	881b      	ldrh	r3, [r3, #0]
 802061a:	4618      	mov	r0, r3
 802061c:	f7ff fdb4 	bl	8020188 <ptr_to_mem>
 8020620:	4602      	mov	r2, r0
 8020622:	89fb      	ldrh	r3, [r7, #14]
 8020624:	8053      	strh	r3, [r2, #2]
 8020626:	e03e      	b.n	80206a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8020628:	8bfb      	ldrh	r3, [r7, #30]
 802062a:	f103 0214 	add.w	r2, r3, #20
 802062e:	8abb      	ldrh	r3, [r7, #20]
 8020630:	429a      	cmp	r2, r3
 8020632:	d838      	bhi.n	80206a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8020634:	8afa      	ldrh	r2, [r7, #22]
 8020636:	8bfb      	ldrh	r3, [r7, #30]
 8020638:	4413      	add	r3, r2
 802063a:	b29b      	uxth	r3, r3
 802063c:	3308      	adds	r3, #8
 802063e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8020640:	69bb      	ldr	r3, [r7, #24]
 8020642:	881b      	ldrh	r3, [r3, #0]
 8020644:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020648:	d106      	bne.n	8020658 <mem_trim+0x180>
 802064a:	4b1b      	ldr	r3, [pc, #108]	; (80206b8 <mem_trim+0x1e0>)
 802064c:	f240 3216 	movw	r2, #790	; 0x316
 8020650:	491d      	ldr	r1, [pc, #116]	; (80206c8 <mem_trim+0x1f0>)
 8020652:	481b      	ldr	r0, [pc, #108]	; (80206c0 <mem_trim+0x1e8>)
 8020654:	f004 fe84 	bl	8025360 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8020658:	89fb      	ldrh	r3, [r7, #14]
 802065a:	4618      	mov	r0, r3
 802065c:	f7ff fd94 	bl	8020188 <ptr_to_mem>
 8020660:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8020662:	4b1a      	ldr	r3, [pc, #104]	; (80206cc <mem_trim+0x1f4>)
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	693a      	ldr	r2, [r7, #16]
 8020668:	429a      	cmp	r2, r3
 802066a:	d202      	bcs.n	8020672 <mem_trim+0x19a>
      lfree = mem2;
 802066c:	4a17      	ldr	r2, [pc, #92]	; (80206cc <mem_trim+0x1f4>)
 802066e:	693b      	ldr	r3, [r7, #16]
 8020670:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8020672:	693b      	ldr	r3, [r7, #16]
 8020674:	2200      	movs	r2, #0
 8020676:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8020678:	69bb      	ldr	r3, [r7, #24]
 802067a:	881a      	ldrh	r2, [r3, #0]
 802067c:	693b      	ldr	r3, [r7, #16]
 802067e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8020680:	693b      	ldr	r3, [r7, #16]
 8020682:	8afa      	ldrh	r2, [r7, #22]
 8020684:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8020686:	69bb      	ldr	r3, [r7, #24]
 8020688:	89fa      	ldrh	r2, [r7, #14]
 802068a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802068c:	693b      	ldr	r3, [r7, #16]
 802068e:	881b      	ldrh	r3, [r3, #0]
 8020690:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020694:	d007      	beq.n	80206a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8020696:	693b      	ldr	r3, [r7, #16]
 8020698:	881b      	ldrh	r3, [r3, #0]
 802069a:	4618      	mov	r0, r3
 802069c:	f7ff fd74 	bl	8020188 <ptr_to_mem>
 80206a0:	4602      	mov	r2, r0
 80206a2:	89fb      	ldrh	r3, [r7, #14]
 80206a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80206a6:	687b      	ldr	r3, [r7, #4]
}
 80206a8:	4618      	mov	r0, r3
 80206aa:	3720      	adds	r7, #32
 80206ac:	46bd      	mov	sp, r7
 80206ae:	bd80      	pop	{r7, pc}
 80206b0:	20011b34 	.word	0x20011b34
 80206b4:	20011b38 	.word	0x20011b38
 80206b8:	0802a838 	.word	0x0802a838
 80206bc:	0802a9a8 	.word	0x0802a9a8
 80206c0:	0802a880 	.word	0x0802a880
 80206c4:	0802a9c0 	.word	0x0802a9c0
 80206c8:	0802a9e0 	.word	0x0802a9e0
 80206cc:	20011b3c 	.word	0x20011b3c

080206d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80206d0:	b580      	push	{r7, lr}
 80206d2:	b088      	sub	sp, #32
 80206d4:	af00      	add	r7, sp, #0
 80206d6:	4603      	mov	r3, r0
 80206d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80206da:	88fb      	ldrh	r3, [r7, #6]
 80206dc:	2b00      	cmp	r3, #0
 80206de:	d101      	bne.n	80206e4 <mem_malloc+0x14>
    return NULL;
 80206e0:	2300      	movs	r3, #0
 80206e2:	e0d9      	b.n	8020898 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80206e4:	88fb      	ldrh	r3, [r7, #6]
 80206e6:	3303      	adds	r3, #3
 80206e8:	b29b      	uxth	r3, r3
 80206ea:	f023 0303 	bic.w	r3, r3, #3
 80206ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80206f0:	8bbb      	ldrh	r3, [r7, #28]
 80206f2:	2b0b      	cmp	r3, #11
 80206f4:	d801      	bhi.n	80206fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80206f6:	230c      	movs	r3, #12
 80206f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80206fa:	8bbb      	ldrh	r3, [r7, #28]
 80206fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020700:	d803      	bhi.n	802070a <mem_malloc+0x3a>
 8020702:	8bba      	ldrh	r2, [r7, #28]
 8020704:	88fb      	ldrh	r3, [r7, #6]
 8020706:	429a      	cmp	r2, r3
 8020708:	d201      	bcs.n	802070e <mem_malloc+0x3e>
    return NULL;
 802070a:	2300      	movs	r3, #0
 802070c:	e0c4      	b.n	8020898 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 802070e:	4b64      	ldr	r3, [pc, #400]	; (80208a0 <mem_malloc+0x1d0>)
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	4618      	mov	r0, r3
 8020714:	f7ff fd4a 	bl	80201ac <mem_to_ptr>
 8020718:	4603      	mov	r3, r0
 802071a:	83fb      	strh	r3, [r7, #30]
 802071c:	e0b4      	b.n	8020888 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 802071e:	8bfb      	ldrh	r3, [r7, #30]
 8020720:	4618      	mov	r0, r3
 8020722:	f7ff fd31 	bl	8020188 <ptr_to_mem>
 8020726:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8020728:	697b      	ldr	r3, [r7, #20]
 802072a:	791b      	ldrb	r3, [r3, #4]
 802072c:	2b00      	cmp	r3, #0
 802072e:	f040 80a4 	bne.w	802087a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8020732:	697b      	ldr	r3, [r7, #20]
 8020734:	881b      	ldrh	r3, [r3, #0]
 8020736:	461a      	mov	r2, r3
 8020738:	8bfb      	ldrh	r3, [r7, #30]
 802073a:	1ad3      	subs	r3, r2, r3
 802073c:	f1a3 0208 	sub.w	r2, r3, #8
 8020740:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8020742:	429a      	cmp	r2, r3
 8020744:	f0c0 8099 	bcc.w	802087a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8020748:	697b      	ldr	r3, [r7, #20]
 802074a:	881b      	ldrh	r3, [r3, #0]
 802074c:	461a      	mov	r2, r3
 802074e:	8bfb      	ldrh	r3, [r7, #30]
 8020750:	1ad3      	subs	r3, r2, r3
 8020752:	f1a3 0208 	sub.w	r2, r3, #8
 8020756:	8bbb      	ldrh	r3, [r7, #28]
 8020758:	3314      	adds	r3, #20
 802075a:	429a      	cmp	r2, r3
 802075c:	d333      	bcc.n	80207c6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 802075e:	8bfa      	ldrh	r2, [r7, #30]
 8020760:	8bbb      	ldrh	r3, [r7, #28]
 8020762:	4413      	add	r3, r2
 8020764:	b29b      	uxth	r3, r3
 8020766:	3308      	adds	r3, #8
 8020768:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 802076a:	8a7b      	ldrh	r3, [r7, #18]
 802076c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020770:	d106      	bne.n	8020780 <mem_malloc+0xb0>
 8020772:	4b4c      	ldr	r3, [pc, #304]	; (80208a4 <mem_malloc+0x1d4>)
 8020774:	f240 3287 	movw	r2, #903	; 0x387
 8020778:	494b      	ldr	r1, [pc, #300]	; (80208a8 <mem_malloc+0x1d8>)
 802077a:	484c      	ldr	r0, [pc, #304]	; (80208ac <mem_malloc+0x1dc>)
 802077c:	f004 fdf0 	bl	8025360 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8020780:	8a7b      	ldrh	r3, [r7, #18]
 8020782:	4618      	mov	r0, r3
 8020784:	f7ff fd00 	bl	8020188 <ptr_to_mem>
 8020788:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	2200      	movs	r2, #0
 802078e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8020790:	697b      	ldr	r3, [r7, #20]
 8020792:	881a      	ldrh	r2, [r3, #0]
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	8bfa      	ldrh	r2, [r7, #30]
 802079c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 802079e:	697b      	ldr	r3, [r7, #20]
 80207a0:	8a7a      	ldrh	r2, [r7, #18]
 80207a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80207a4:	697b      	ldr	r3, [r7, #20]
 80207a6:	2201      	movs	r2, #1
 80207a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	881b      	ldrh	r3, [r3, #0]
 80207ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80207b2:	d00b      	beq.n	80207cc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	881b      	ldrh	r3, [r3, #0]
 80207b8:	4618      	mov	r0, r3
 80207ba:	f7ff fce5 	bl	8020188 <ptr_to_mem>
 80207be:	4602      	mov	r2, r0
 80207c0:	8a7b      	ldrh	r3, [r7, #18]
 80207c2:	8053      	strh	r3, [r2, #2]
 80207c4:	e002      	b.n	80207cc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80207c6:	697b      	ldr	r3, [r7, #20]
 80207c8:	2201      	movs	r2, #1
 80207ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80207cc:	4b34      	ldr	r3, [pc, #208]	; (80208a0 <mem_malloc+0x1d0>)
 80207ce:	681b      	ldr	r3, [r3, #0]
 80207d0:	697a      	ldr	r2, [r7, #20]
 80207d2:	429a      	cmp	r2, r3
 80207d4:	d127      	bne.n	8020826 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80207d6:	4b32      	ldr	r3, [pc, #200]	; (80208a0 <mem_malloc+0x1d0>)
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80207dc:	e005      	b.n	80207ea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80207de:	69bb      	ldr	r3, [r7, #24]
 80207e0:	881b      	ldrh	r3, [r3, #0]
 80207e2:	4618      	mov	r0, r3
 80207e4:	f7ff fcd0 	bl	8020188 <ptr_to_mem>
 80207e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80207ea:	69bb      	ldr	r3, [r7, #24]
 80207ec:	791b      	ldrb	r3, [r3, #4]
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d004      	beq.n	80207fc <mem_malloc+0x12c>
 80207f2:	4b2f      	ldr	r3, [pc, #188]	; (80208b0 <mem_malloc+0x1e0>)
 80207f4:	681b      	ldr	r3, [r3, #0]
 80207f6:	69ba      	ldr	r2, [r7, #24]
 80207f8:	429a      	cmp	r2, r3
 80207fa:	d1f0      	bne.n	80207de <mem_malloc+0x10e>
          }
          lfree = cur;
 80207fc:	4a28      	ldr	r2, [pc, #160]	; (80208a0 <mem_malloc+0x1d0>)
 80207fe:	69bb      	ldr	r3, [r7, #24]
 8020800:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8020802:	4b27      	ldr	r3, [pc, #156]	; (80208a0 <mem_malloc+0x1d0>)
 8020804:	681a      	ldr	r2, [r3, #0]
 8020806:	4b2a      	ldr	r3, [pc, #168]	; (80208b0 <mem_malloc+0x1e0>)
 8020808:	681b      	ldr	r3, [r3, #0]
 802080a:	429a      	cmp	r2, r3
 802080c:	d00b      	beq.n	8020826 <mem_malloc+0x156>
 802080e:	4b24      	ldr	r3, [pc, #144]	; (80208a0 <mem_malloc+0x1d0>)
 8020810:	681b      	ldr	r3, [r3, #0]
 8020812:	791b      	ldrb	r3, [r3, #4]
 8020814:	2b00      	cmp	r3, #0
 8020816:	d006      	beq.n	8020826 <mem_malloc+0x156>
 8020818:	4b22      	ldr	r3, [pc, #136]	; (80208a4 <mem_malloc+0x1d4>)
 802081a:	f240 32b5 	movw	r2, #949	; 0x3b5
 802081e:	4925      	ldr	r1, [pc, #148]	; (80208b4 <mem_malloc+0x1e4>)
 8020820:	4822      	ldr	r0, [pc, #136]	; (80208ac <mem_malloc+0x1dc>)
 8020822:	f004 fd9d 	bl	8025360 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8020826:	8bba      	ldrh	r2, [r7, #28]
 8020828:	697b      	ldr	r3, [r7, #20]
 802082a:	4413      	add	r3, r2
 802082c:	3308      	adds	r3, #8
 802082e:	4a20      	ldr	r2, [pc, #128]	; (80208b0 <mem_malloc+0x1e0>)
 8020830:	6812      	ldr	r2, [r2, #0]
 8020832:	4293      	cmp	r3, r2
 8020834:	d906      	bls.n	8020844 <mem_malloc+0x174>
 8020836:	4b1b      	ldr	r3, [pc, #108]	; (80208a4 <mem_malloc+0x1d4>)
 8020838:	f240 32b9 	movw	r2, #953	; 0x3b9
 802083c:	491e      	ldr	r1, [pc, #120]	; (80208b8 <mem_malloc+0x1e8>)
 802083e:	481b      	ldr	r0, [pc, #108]	; (80208ac <mem_malloc+0x1dc>)
 8020840:	f004 fd8e 	bl	8025360 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8020844:	697b      	ldr	r3, [r7, #20]
 8020846:	f003 0303 	and.w	r3, r3, #3
 802084a:	2b00      	cmp	r3, #0
 802084c:	d006      	beq.n	802085c <mem_malloc+0x18c>
 802084e:	4b15      	ldr	r3, [pc, #84]	; (80208a4 <mem_malloc+0x1d4>)
 8020850:	f240 32bb 	movw	r2, #955	; 0x3bb
 8020854:	4919      	ldr	r1, [pc, #100]	; (80208bc <mem_malloc+0x1ec>)
 8020856:	4815      	ldr	r0, [pc, #84]	; (80208ac <mem_malloc+0x1dc>)
 8020858:	f004 fd82 	bl	8025360 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 802085c:	697b      	ldr	r3, [r7, #20]
 802085e:	f003 0303 	and.w	r3, r3, #3
 8020862:	2b00      	cmp	r3, #0
 8020864:	d006      	beq.n	8020874 <mem_malloc+0x1a4>
 8020866:	4b0f      	ldr	r3, [pc, #60]	; (80208a4 <mem_malloc+0x1d4>)
 8020868:	f240 32bd 	movw	r2, #957	; 0x3bd
 802086c:	4914      	ldr	r1, [pc, #80]	; (80208c0 <mem_malloc+0x1f0>)
 802086e:	480f      	ldr	r0, [pc, #60]	; (80208ac <mem_malloc+0x1dc>)
 8020870:	f004 fd76 	bl	8025360 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8020874:	697b      	ldr	r3, [r7, #20]
 8020876:	3308      	adds	r3, #8
 8020878:	e00e      	b.n	8020898 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 802087a:	8bfb      	ldrh	r3, [r7, #30]
 802087c:	4618      	mov	r0, r3
 802087e:	f7ff fc83 	bl	8020188 <ptr_to_mem>
 8020882:	4603      	mov	r3, r0
 8020884:	881b      	ldrh	r3, [r3, #0]
 8020886:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8020888:	8bfa      	ldrh	r2, [r7, #30]
 802088a:	8bbb      	ldrh	r3, [r7, #28]
 802088c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8020890:	429a      	cmp	r2, r3
 8020892:	f4ff af44 	bcc.w	802071e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8020896:	2300      	movs	r3, #0
}
 8020898:	4618      	mov	r0, r3
 802089a:	3720      	adds	r7, #32
 802089c:	46bd      	mov	sp, r7
 802089e:	bd80      	pop	{r7, pc}
 80208a0:	20011b3c 	.word	0x20011b3c
 80208a4:	0802a838 	.word	0x0802a838
 80208a8:	0802a9e0 	.word	0x0802a9e0
 80208ac:	0802a880 	.word	0x0802a880
 80208b0:	20011b38 	.word	0x20011b38
 80208b4:	0802a9f4 	.word	0x0802a9f4
 80208b8:	0802aa10 	.word	0x0802aa10
 80208bc:	0802aa40 	.word	0x0802aa40
 80208c0:	0802aa70 	.word	0x0802aa70

080208c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80208c4:	b480      	push	{r7}
 80208c6:	b085      	sub	sp, #20
 80208c8:	af00      	add	r7, sp, #0
 80208ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	689b      	ldr	r3, [r3, #8]
 80208d0:	2200      	movs	r2, #0
 80208d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	685b      	ldr	r3, [r3, #4]
 80208d8:	3303      	adds	r3, #3
 80208da:	f023 0303 	bic.w	r3, r3, #3
 80208de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80208e0:	2300      	movs	r3, #0
 80208e2:	60fb      	str	r3, [r7, #12]
 80208e4:	e011      	b.n	802090a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	689b      	ldr	r3, [r3, #8]
 80208ea:	681a      	ldr	r2, [r3, #0]
 80208ec:	68bb      	ldr	r3, [r7, #8]
 80208ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	689b      	ldr	r3, [r3, #8]
 80208f4:	68ba      	ldr	r2, [r7, #8]
 80208f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	881b      	ldrh	r3, [r3, #0]
 80208fc:	461a      	mov	r2, r3
 80208fe:	68bb      	ldr	r3, [r7, #8]
 8020900:	4413      	add	r3, r2
 8020902:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8020904:	68fb      	ldr	r3, [r7, #12]
 8020906:	3301      	adds	r3, #1
 8020908:	60fb      	str	r3, [r7, #12]
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	885b      	ldrh	r3, [r3, #2]
 802090e:	461a      	mov	r2, r3
 8020910:	68fb      	ldr	r3, [r7, #12]
 8020912:	4293      	cmp	r3, r2
 8020914:	dbe7      	blt.n	80208e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8020916:	bf00      	nop
 8020918:	bf00      	nop
 802091a:	3714      	adds	r7, #20
 802091c:	46bd      	mov	sp, r7
 802091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020922:	4770      	bx	lr

08020924 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8020924:	b580      	push	{r7, lr}
 8020926:	b082      	sub	sp, #8
 8020928:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802092a:	2300      	movs	r3, #0
 802092c:	80fb      	strh	r3, [r7, #6]
 802092e:	e009      	b.n	8020944 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8020930:	88fb      	ldrh	r3, [r7, #6]
 8020932:	4a08      	ldr	r2, [pc, #32]	; (8020954 <memp_init+0x30>)
 8020934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020938:	4618      	mov	r0, r3
 802093a:	f7ff ffc3 	bl	80208c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802093e:	88fb      	ldrh	r3, [r7, #6]
 8020940:	3301      	adds	r3, #1
 8020942:	80fb      	strh	r3, [r7, #6]
 8020944:	88fb      	ldrh	r3, [r7, #6]
 8020946:	2b05      	cmp	r3, #5
 8020948:	d9f2      	bls.n	8020930 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 802094a:	bf00      	nop
 802094c:	bf00      	nop
 802094e:	3708      	adds	r7, #8
 8020950:	46bd      	mov	sp, r7
 8020952:	bd80      	pop	{r7, pc}
 8020954:	0802c2e0 	.word	0x0802c2e0

08020958 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8020958:	b580      	push	{r7, lr}
 802095a:	b084      	sub	sp, #16
 802095c:	af00      	add	r7, sp, #0
 802095e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	689b      	ldr	r3, [r3, #8]
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8020968:	68fb      	ldr	r3, [r7, #12]
 802096a:	2b00      	cmp	r3, #0
 802096c:	d012      	beq.n	8020994 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	689b      	ldr	r3, [r3, #8]
 8020972:	68fa      	ldr	r2, [r7, #12]
 8020974:	6812      	ldr	r2, [r2, #0]
 8020976:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8020978:	68fb      	ldr	r3, [r7, #12]
 802097a:	f003 0303 	and.w	r3, r3, #3
 802097e:	2b00      	cmp	r3, #0
 8020980:	d006      	beq.n	8020990 <do_memp_malloc_pool+0x38>
 8020982:	4b07      	ldr	r3, [pc, #28]	; (80209a0 <do_memp_malloc_pool+0x48>)
 8020984:	f44f 728c 	mov.w	r2, #280	; 0x118
 8020988:	4906      	ldr	r1, [pc, #24]	; (80209a4 <do_memp_malloc_pool+0x4c>)
 802098a:	4807      	ldr	r0, [pc, #28]	; (80209a8 <do_memp_malloc_pool+0x50>)
 802098c:	f004 fce8 	bl	8025360 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	e000      	b.n	8020996 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8020994:	2300      	movs	r3, #0
}
 8020996:	4618      	mov	r0, r3
 8020998:	3710      	adds	r7, #16
 802099a:	46bd      	mov	sp, r7
 802099c:	bd80      	pop	{r7, pc}
 802099e:	bf00      	nop
 80209a0:	0802aa94 	.word	0x0802aa94
 80209a4:	0802aac4 	.word	0x0802aac4
 80209a8:	0802aae8 	.word	0x0802aae8

080209ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80209ac:	b580      	push	{r7, lr}
 80209ae:	b082      	sub	sp, #8
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d106      	bne.n	80209c8 <memp_malloc_pool+0x1c>
 80209ba:	4b0a      	ldr	r3, [pc, #40]	; (80209e4 <memp_malloc_pool+0x38>)
 80209bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80209c0:	4909      	ldr	r1, [pc, #36]	; (80209e8 <memp_malloc_pool+0x3c>)
 80209c2:	480a      	ldr	r0, [pc, #40]	; (80209ec <memp_malloc_pool+0x40>)
 80209c4:	f004 fccc 	bl	8025360 <iprintf>
  if (desc == NULL) {
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d101      	bne.n	80209d2 <memp_malloc_pool+0x26>
    return NULL;
 80209ce:	2300      	movs	r3, #0
 80209d0:	e003      	b.n	80209da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80209d2:	6878      	ldr	r0, [r7, #4]
 80209d4:	f7ff ffc0 	bl	8020958 <do_memp_malloc_pool>
 80209d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80209da:	4618      	mov	r0, r3
 80209dc:	3708      	adds	r7, #8
 80209de:	46bd      	mov	sp, r7
 80209e0:	bd80      	pop	{r7, pc}
 80209e2:	bf00      	nop
 80209e4:	0802aa94 	.word	0x0802aa94
 80209e8:	0802ab10 	.word	0x0802ab10
 80209ec:	0802aae8 	.word	0x0802aae8

080209f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80209f0:	b580      	push	{r7, lr}
 80209f2:	b084      	sub	sp, #16
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	4603      	mov	r3, r0
 80209f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80209fa:	79fb      	ldrb	r3, [r7, #7]
 80209fc:	2b05      	cmp	r3, #5
 80209fe:	d908      	bls.n	8020a12 <memp_malloc+0x22>
 8020a00:	4b0a      	ldr	r3, [pc, #40]	; (8020a2c <memp_malloc+0x3c>)
 8020a02:	f240 1257 	movw	r2, #343	; 0x157
 8020a06:	490a      	ldr	r1, [pc, #40]	; (8020a30 <memp_malloc+0x40>)
 8020a08:	480a      	ldr	r0, [pc, #40]	; (8020a34 <memp_malloc+0x44>)
 8020a0a:	f004 fca9 	bl	8025360 <iprintf>
 8020a0e:	2300      	movs	r3, #0
 8020a10:	e008      	b.n	8020a24 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8020a12:	79fb      	ldrb	r3, [r7, #7]
 8020a14:	4a08      	ldr	r2, [pc, #32]	; (8020a38 <memp_malloc+0x48>)
 8020a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020a1a:	4618      	mov	r0, r3
 8020a1c:	f7ff ff9c 	bl	8020958 <do_memp_malloc_pool>
 8020a20:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8020a22:	68fb      	ldr	r3, [r7, #12]
}
 8020a24:	4618      	mov	r0, r3
 8020a26:	3710      	adds	r7, #16
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bd80      	pop	{r7, pc}
 8020a2c:	0802aa94 	.word	0x0802aa94
 8020a30:	0802ab24 	.word	0x0802ab24
 8020a34:	0802aae8 	.word	0x0802aae8
 8020a38:	0802c2e0 	.word	0x0802c2e0

08020a3c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8020a3c:	b580      	push	{r7, lr}
 8020a3e:	b084      	sub	sp, #16
 8020a40:	af00      	add	r7, sp, #0
 8020a42:	6078      	str	r0, [r7, #4]
 8020a44:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8020a46:	683b      	ldr	r3, [r7, #0]
 8020a48:	f003 0303 	and.w	r3, r3, #3
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	d006      	beq.n	8020a5e <do_memp_free_pool+0x22>
 8020a50:	4b0a      	ldr	r3, [pc, #40]	; (8020a7c <do_memp_free_pool+0x40>)
 8020a52:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8020a56:	490a      	ldr	r1, [pc, #40]	; (8020a80 <do_memp_free_pool+0x44>)
 8020a58:	480a      	ldr	r0, [pc, #40]	; (8020a84 <do_memp_free_pool+0x48>)
 8020a5a:	f004 fc81 	bl	8025360 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8020a5e:	683b      	ldr	r3, [r7, #0]
 8020a60:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	689b      	ldr	r3, [r3, #8]
 8020a66:	681a      	ldr	r2, [r3, #0]
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	689b      	ldr	r3, [r3, #8]
 8020a70:	68fa      	ldr	r2, [r7, #12]
 8020a72:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8020a74:	bf00      	nop
 8020a76:	3710      	adds	r7, #16
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	bd80      	pop	{r7, pc}
 8020a7c:	0802aa94 	.word	0x0802aa94
 8020a80:	0802ab44 	.word	0x0802ab44
 8020a84:	0802aae8 	.word	0x0802aae8

08020a88 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8020a88:	b580      	push	{r7, lr}
 8020a8a:	b082      	sub	sp, #8
 8020a8c:	af00      	add	r7, sp, #0
 8020a8e:	6078      	str	r0, [r7, #4]
 8020a90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d106      	bne.n	8020aa6 <memp_free_pool+0x1e>
 8020a98:	4b0a      	ldr	r3, [pc, #40]	; (8020ac4 <memp_free_pool+0x3c>)
 8020a9a:	f240 1295 	movw	r2, #405	; 0x195
 8020a9e:	490a      	ldr	r1, [pc, #40]	; (8020ac8 <memp_free_pool+0x40>)
 8020aa0:	480a      	ldr	r0, [pc, #40]	; (8020acc <memp_free_pool+0x44>)
 8020aa2:	f004 fc5d 	bl	8025360 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d007      	beq.n	8020abc <memp_free_pool+0x34>
 8020aac:	683b      	ldr	r3, [r7, #0]
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	d004      	beq.n	8020abc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8020ab2:	6839      	ldr	r1, [r7, #0]
 8020ab4:	6878      	ldr	r0, [r7, #4]
 8020ab6:	f7ff ffc1 	bl	8020a3c <do_memp_free_pool>
 8020aba:	e000      	b.n	8020abe <memp_free_pool+0x36>
    return;
 8020abc:	bf00      	nop
}
 8020abe:	3708      	adds	r7, #8
 8020ac0:	46bd      	mov	sp, r7
 8020ac2:	bd80      	pop	{r7, pc}
 8020ac4:	0802aa94 	.word	0x0802aa94
 8020ac8:	0802ab10 	.word	0x0802ab10
 8020acc:	0802aae8 	.word	0x0802aae8

08020ad0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8020ad0:	b580      	push	{r7, lr}
 8020ad2:	b082      	sub	sp, #8
 8020ad4:	af00      	add	r7, sp, #0
 8020ad6:	4603      	mov	r3, r0
 8020ad8:	6039      	str	r1, [r7, #0]
 8020ada:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8020adc:	79fb      	ldrb	r3, [r7, #7]
 8020ade:	2b05      	cmp	r3, #5
 8020ae0:	d907      	bls.n	8020af2 <memp_free+0x22>
 8020ae2:	4b0c      	ldr	r3, [pc, #48]	; (8020b14 <memp_free+0x44>)
 8020ae4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8020ae8:	490b      	ldr	r1, [pc, #44]	; (8020b18 <memp_free+0x48>)
 8020aea:	480c      	ldr	r0, [pc, #48]	; (8020b1c <memp_free+0x4c>)
 8020aec:	f004 fc38 	bl	8025360 <iprintf>
 8020af0:	e00c      	b.n	8020b0c <memp_free+0x3c>

  if (mem == NULL) {
 8020af2:	683b      	ldr	r3, [r7, #0]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d008      	beq.n	8020b0a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8020af8:	79fb      	ldrb	r3, [r7, #7]
 8020afa:	4a09      	ldr	r2, [pc, #36]	; (8020b20 <memp_free+0x50>)
 8020afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020b00:	6839      	ldr	r1, [r7, #0]
 8020b02:	4618      	mov	r0, r3
 8020b04:	f7ff ff9a 	bl	8020a3c <do_memp_free_pool>
 8020b08:	e000      	b.n	8020b0c <memp_free+0x3c>
    return;
 8020b0a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8020b0c:	3708      	adds	r7, #8
 8020b0e:	46bd      	mov	sp, r7
 8020b10:	bd80      	pop	{r7, pc}
 8020b12:	bf00      	nop
 8020b14:	0802aa94 	.word	0x0802aa94
 8020b18:	0802ab64 	.word	0x0802ab64
 8020b1c:	0802aae8 	.word	0x0802aae8
 8020b20:	0802c2e0 	.word	0x0802c2e0

08020b24 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 8020b24:	b580      	push	{r7, lr}
 8020b26:	b082      	sub	sp, #8
 8020b28:	af00      	add	r7, sp, #0
 8020b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d105      	bne.n	8020b3e <netif_loopif_init+0x1a>
 8020b32:	4b0b      	ldr	r3, [pc, #44]	; (8020b60 <netif_loopif_init+0x3c>)
 8020b34:	2299      	movs	r2, #153	; 0x99
 8020b36:	490b      	ldr	r1, [pc, #44]	; (8020b64 <netif_loopif_init+0x40>)
 8020b38:	480b      	ldr	r0, [pc, #44]	; (8020b68 <netif_loopif_init+0x44>)
 8020b3a:	f004 fc11 	bl	8025360 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	226c      	movs	r2, #108	; 0x6c
 8020b42:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	226f      	movs	r2, #111	; 0x6f
 8020b4a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	4a06      	ldr	r2, [pc, #24]	; (8020b6c <netif_loopif_init+0x48>)
 8020b52:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 8020b54:	2300      	movs	r3, #0
}
 8020b56:	4618      	mov	r0, r3
 8020b58:	3708      	adds	r7, #8
 8020b5a:	46bd      	mov	sp, r7
 8020b5c:	bd80      	pop	{r7, pc}
 8020b5e:	bf00      	nop
 8020b60:	0802ab80 	.word	0x0802ab80
 8020b64:	0802abb4 	.word	0x0802abb4
 8020b68:	0802abd8 	.word	0x0802abd8
 8020b6c:	08021251 	.word	0x08021251

08020b70 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8020b70:	b580      	push	{r7, lr}
 8020b72:	b088      	sub	sp, #32
 8020b74:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 8020b76:	4b0f      	ldr	r3, [pc, #60]	; (8020bb4 <netif_init+0x44>)
 8020b78:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 8020b7a:	4b0e      	ldr	r3, [pc, #56]	; (8020bb4 <netif_init+0x44>)
 8020b7c:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 8020b7e:	23ff      	movs	r3, #255	; 0xff
 8020b80:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 8020b82:	1d3b      	adds	r3, r7, #4
 8020b84:	f107 0208 	add.w	r2, r7, #8
 8020b88:	f107 010c 	add.w	r1, r7, #12
 8020b8c:	480a      	ldr	r0, [pc, #40]	; (8020bb8 <netif_init+0x48>)
 8020b8e:	9002      	str	r0, [sp, #8]
 8020b90:	480a      	ldr	r0, [pc, #40]	; (8020bbc <netif_init+0x4c>)
 8020b92:	9001      	str	r0, [sp, #4]
 8020b94:	2000      	movs	r0, #0
 8020b96:	9000      	str	r0, [sp, #0]
 8020b98:	4809      	ldr	r0, [pc, #36]	; (8020bc0 <netif_init+0x50>)
 8020b9a:	f000 f813 	bl	8020bc4 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 8020b9e:	4808      	ldr	r0, [pc, #32]	; (8020bc0 <netif_init+0x50>)
 8020ba0:	f000 fa72 	bl	8021088 <netif_set_link_up>
  netif_set_up(&loop_netif);
 8020ba4:	4806      	ldr	r0, [pc, #24]	; (8020bc0 <netif_init+0x50>)
 8020ba6:	f000 f9d1 	bl	8020f4c <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 8020baa:	bf00      	nop
 8020bac:	3710      	adds	r7, #16
 8020bae:	46bd      	mov	sp, r7
 8020bb0:	bd80      	pop	{r7, pc}
 8020bb2:	bf00      	nop
 8020bb4:	0100007f 	.word	0x0100007f
 8020bb8:	08023ced 	.word	0x08023ced
 8020bbc:	08020b25 	.word	0x08020b25
 8020bc0:	20014ae4 	.word	0x20014ae4

08020bc4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8020bc4:	b580      	push	{r7, lr}
 8020bc6:	b086      	sub	sp, #24
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	60f8      	str	r0, [r7, #12]
 8020bcc:	60b9      	str	r1, [r7, #8]
 8020bce:	607a      	str	r2, [r7, #4]
 8020bd0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8020bd2:	68fb      	ldr	r3, [r7, #12]
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	d108      	bne.n	8020bea <netif_add+0x26>
 8020bd8:	4b5a      	ldr	r3, [pc, #360]	; (8020d44 <netif_add+0x180>)
 8020bda:	f240 1227 	movw	r2, #295	; 0x127
 8020bde:	495a      	ldr	r1, [pc, #360]	; (8020d48 <netif_add+0x184>)
 8020be0:	485a      	ldr	r0, [pc, #360]	; (8020d4c <netif_add+0x188>)
 8020be2:	f004 fbbd 	bl	8025360 <iprintf>
 8020be6:	2300      	movs	r3, #0
 8020be8:	e0a8      	b.n	8020d3c <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8020bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bec:	2b00      	cmp	r3, #0
 8020bee:	d108      	bne.n	8020c02 <netif_add+0x3e>
 8020bf0:	4b54      	ldr	r3, [pc, #336]	; (8020d44 <netif_add+0x180>)
 8020bf2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8020bf6:	4956      	ldr	r1, [pc, #344]	; (8020d50 <netif_add+0x18c>)
 8020bf8:	4854      	ldr	r0, [pc, #336]	; (8020d4c <netif_add+0x188>)
 8020bfa:	f004 fbb1 	bl	8025360 <iprintf>
 8020bfe:	2300      	movs	r3, #0
 8020c00:	e09c      	b.n	8020d3c <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8020c02:	68bb      	ldr	r3, [r7, #8]
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	d101      	bne.n	8020c0c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8020c08:	4b52      	ldr	r3, [pc, #328]	; (8020d54 <netif_add+0x190>)
 8020c0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	d101      	bne.n	8020c16 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8020c12:	4b50      	ldr	r3, [pc, #320]	; (8020d54 <netif_add+0x190>)
 8020c14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8020c16:	683b      	ldr	r3, [r7, #0]
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d101      	bne.n	8020c20 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8020c1c:	4b4d      	ldr	r3, [pc, #308]	; (8020d54 <netif_add+0x190>)
 8020c1e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8020c20:	68fb      	ldr	r3, [r7, #12]
 8020c22:	2200      	movs	r2, #0
 8020c24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8020c26:	68fb      	ldr	r3, [r7, #12]
 8020c28:	2200      	movs	r2, #0
 8020c2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8020c2c:	68fb      	ldr	r3, [r7, #12]
 8020c2e:	2200      	movs	r2, #0
 8020c30:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8020c32:	68fb      	ldr	r3, [r7, #12]
 8020c34:	4a48      	ldr	r2, [pc, #288]	; (8020d58 <netif_add+0x194>)
 8020c36:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8020c38:	68fb      	ldr	r3, [r7, #12]
 8020c3a:	2200      	movs	r2, #0
 8020c3c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8020c3e:	68fb      	ldr	r3, [r7, #12]
 8020c40:	2200      	movs	r2, #0
 8020c42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8020c46:	68fb      	ldr	r3, [r7, #12]
 8020c48:	2200      	movs	r2, #0
 8020c4a:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 8020c4c:	68fb      	ldr	r3, [r7, #12]
 8020c4e:	2200      	movs	r2, #0
 8020c50:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	2200      	movs	r2, #0
 8020c56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8020c58:	68fb      	ldr	r3, [r7, #12]
 8020c5a:	6a3a      	ldr	r2, [r7, #32]
 8020c5c:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8020c5e:	4b3f      	ldr	r3, [pc, #252]	; (8020d5c <netif_add+0x198>)
 8020c60:	781a      	ldrb	r2, [r3, #0]
 8020c62:	68fb      	ldr	r3, [r7, #12]
 8020c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8020c68:	68fb      	ldr	r3, [r7, #12]
 8020c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020c6c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8020c6e:	683b      	ldr	r3, [r7, #0]
 8020c70:	687a      	ldr	r2, [r7, #4]
 8020c72:	68b9      	ldr	r1, [r7, #8]
 8020c74:	68f8      	ldr	r0, [r7, #12]
 8020c76:	f000 f90f 	bl	8020e98 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8020c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c7c:	68f8      	ldr	r0, [r7, #12]
 8020c7e:	4798      	blx	r3
 8020c80:	4603      	mov	r3, r0
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d001      	beq.n	8020c8a <netif_add+0xc6>
    return NULL;
 8020c86:	2300      	movs	r3, #0
 8020c88:	e058      	b.n	8020d3c <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8020c8a:	68fb      	ldr	r3, [r7, #12]
 8020c8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020c90:	2bff      	cmp	r3, #255	; 0xff
 8020c92:	d103      	bne.n	8020c9c <netif_add+0xd8>
        netif->num = 0;
 8020c94:	68fb      	ldr	r3, [r7, #12]
 8020c96:	2200      	movs	r2, #0
 8020c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8020ca0:	4b2f      	ldr	r3, [pc, #188]	; (8020d60 <netif_add+0x19c>)
 8020ca2:	681b      	ldr	r3, [r3, #0]
 8020ca4:	617b      	str	r3, [r7, #20]
 8020ca6:	e02b      	b.n	8020d00 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8020ca8:	697a      	ldr	r2, [r7, #20]
 8020caa:	68fb      	ldr	r3, [r7, #12]
 8020cac:	429a      	cmp	r2, r3
 8020cae:	d106      	bne.n	8020cbe <netif_add+0xfa>
 8020cb0:	4b24      	ldr	r3, [pc, #144]	; (8020d44 <netif_add+0x180>)
 8020cb2:	f240 128b 	movw	r2, #395	; 0x18b
 8020cb6:	492b      	ldr	r1, [pc, #172]	; (8020d64 <netif_add+0x1a0>)
 8020cb8:	4824      	ldr	r0, [pc, #144]	; (8020d4c <netif_add+0x188>)
 8020cba:	f004 fb51 	bl	8025360 <iprintf>
        num_netifs++;
 8020cbe:	693b      	ldr	r3, [r7, #16]
 8020cc0:	3301      	adds	r3, #1
 8020cc2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8020cc4:	693b      	ldr	r3, [r7, #16]
 8020cc6:	2bff      	cmp	r3, #255	; 0xff
 8020cc8:	dd06      	ble.n	8020cd8 <netif_add+0x114>
 8020cca:	4b1e      	ldr	r3, [pc, #120]	; (8020d44 <netif_add+0x180>)
 8020ccc:	f240 128d 	movw	r2, #397	; 0x18d
 8020cd0:	4925      	ldr	r1, [pc, #148]	; (8020d68 <netif_add+0x1a4>)
 8020cd2:	481e      	ldr	r0, [pc, #120]	; (8020d4c <netif_add+0x188>)
 8020cd4:	f004 fb44 	bl	8025360 <iprintf>
        if (netif2->num == netif->num) {
 8020cd8:	697b      	ldr	r3, [r7, #20]
 8020cda:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8020cde:	68fb      	ldr	r3, [r7, #12]
 8020ce0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020ce4:	429a      	cmp	r2, r3
 8020ce6:	d108      	bne.n	8020cfa <netif_add+0x136>
          netif->num++;
 8020ce8:	68fb      	ldr	r3, [r7, #12]
 8020cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020cee:	3301      	adds	r3, #1
 8020cf0:	b2da      	uxtb	r2, r3
 8020cf2:	68fb      	ldr	r3, [r7, #12]
 8020cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8020cf8:	e005      	b.n	8020d06 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8020cfa:	697b      	ldr	r3, [r7, #20]
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	617b      	str	r3, [r7, #20]
 8020d00:	697b      	ldr	r3, [r7, #20]
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	d1d0      	bne.n	8020ca8 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 8020d06:	697b      	ldr	r3, [r7, #20]
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d1be      	bne.n	8020c8a <netif_add+0xc6>
  }
  if (netif->num == 254) {
 8020d0c:	68fb      	ldr	r3, [r7, #12]
 8020d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020d12:	2bfe      	cmp	r3, #254	; 0xfe
 8020d14:	d103      	bne.n	8020d1e <netif_add+0x15a>
    netif_num = 0;
 8020d16:	4b11      	ldr	r3, [pc, #68]	; (8020d5c <netif_add+0x198>)
 8020d18:	2200      	movs	r2, #0
 8020d1a:	701a      	strb	r2, [r3, #0]
 8020d1c:	e006      	b.n	8020d2c <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8020d1e:	68fb      	ldr	r3, [r7, #12]
 8020d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020d24:	3301      	adds	r3, #1
 8020d26:	b2da      	uxtb	r2, r3
 8020d28:	4b0c      	ldr	r3, [pc, #48]	; (8020d5c <netif_add+0x198>)
 8020d2a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8020d2c:	4b0c      	ldr	r3, [pc, #48]	; (8020d60 <netif_add+0x19c>)
 8020d2e:	681a      	ldr	r2, [r3, #0]
 8020d30:	68fb      	ldr	r3, [r7, #12]
 8020d32:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8020d34:	4a0a      	ldr	r2, [pc, #40]	; (8020d60 <netif_add+0x19c>)
 8020d36:	68fb      	ldr	r3, [r7, #12]
 8020d38:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8020d3a:	68fb      	ldr	r3, [r7, #12]
}
 8020d3c:	4618      	mov	r0, r3
 8020d3e:	3718      	adds	r7, #24
 8020d40:	46bd      	mov	sp, r7
 8020d42:	bd80      	pop	{r7, pc}
 8020d44:	0802ab80 	.word	0x0802ab80
 8020d48:	0802ac38 	.word	0x0802ac38
 8020d4c:	0802abd8 	.word	0x0802abd8
 8020d50:	0802ac54 	.word	0x0802ac54
 8020d54:	0802c308 	.word	0x0802c308
 8020d58:	0802126f 	.word	0x0802126f
 8020d5c:	20014ae0 	.word	0x20014ae0
 8020d60:	20014ad8 	.word	0x20014ad8
 8020d64:	0802ac78 	.word	0x0802ac78
 8020d68:	0802ac8c 	.word	0x0802ac8c

08020d6c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8020d6c:	b580      	push	{r7, lr}
 8020d6e:	b082      	sub	sp, #8
 8020d70:	af00      	add	r7, sp, #0
 8020d72:	6078      	str	r0, [r7, #4]
 8020d74:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8020d76:	6839      	ldr	r1, [r7, #0]
 8020d78:	6878      	ldr	r0, [r7, #4]
 8020d7a:	f001 fe13 	bl	80229a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8020d7e:	bf00      	nop
 8020d80:	3708      	adds	r7, #8
 8020d82:	46bd      	mov	sp, r7
 8020d84:	bd80      	pop	{r7, pc}
	...

08020d88 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8020d88:	b580      	push	{r7, lr}
 8020d8a:	b086      	sub	sp, #24
 8020d8c:	af00      	add	r7, sp, #0
 8020d8e:	60f8      	str	r0, [r7, #12]
 8020d90:	60b9      	str	r1, [r7, #8]
 8020d92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8020d94:	68bb      	ldr	r3, [r7, #8]
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	d106      	bne.n	8020da8 <netif_do_set_ipaddr+0x20>
 8020d9a:	4b1d      	ldr	r3, [pc, #116]	; (8020e10 <netif_do_set_ipaddr+0x88>)
 8020d9c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8020da0:	491c      	ldr	r1, [pc, #112]	; (8020e14 <netif_do_set_ipaddr+0x8c>)
 8020da2:	481d      	ldr	r0, [pc, #116]	; (8020e18 <netif_do_set_ipaddr+0x90>)
 8020da4:	f004 fadc 	bl	8025360 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d106      	bne.n	8020dbc <netif_do_set_ipaddr+0x34>
 8020dae:	4b18      	ldr	r3, [pc, #96]	; (8020e10 <netif_do_set_ipaddr+0x88>)
 8020db0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8020db4:	4917      	ldr	r1, [pc, #92]	; (8020e14 <netif_do_set_ipaddr+0x8c>)
 8020db6:	4818      	ldr	r0, [pc, #96]	; (8020e18 <netif_do_set_ipaddr+0x90>)
 8020db8:	f004 fad2 	bl	8025360 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8020dbc:	68bb      	ldr	r3, [r7, #8]
 8020dbe:	681a      	ldr	r2, [r3, #0]
 8020dc0:	68fb      	ldr	r3, [r7, #12]
 8020dc2:	3304      	adds	r3, #4
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	429a      	cmp	r2, r3
 8020dc8:	d01c      	beq.n	8020e04 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8020dca:	68bb      	ldr	r3, [r7, #8]
 8020dcc:	681b      	ldr	r3, [r3, #0]
 8020dce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8020dd0:	68fb      	ldr	r3, [r7, #12]
 8020dd2:	3304      	adds	r3, #4
 8020dd4:	681a      	ldr	r2, [r3, #0]
 8020dd6:	687b      	ldr	r3, [r7, #4]
 8020dd8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8020dda:	f107 0314 	add.w	r3, r7, #20
 8020dde:	4619      	mov	r1, r3
 8020de0:	6878      	ldr	r0, [r7, #4]
 8020de2:	f7ff ffc3 	bl	8020d6c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8020de6:	68bb      	ldr	r3, [r7, #8]
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	d002      	beq.n	8020df2 <netif_do_set_ipaddr+0x6a>
 8020dec:	68bb      	ldr	r3, [r7, #8]
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	e000      	b.n	8020df4 <netif_do_set_ipaddr+0x6c>
 8020df2:	2300      	movs	r3, #0
 8020df4:	68fa      	ldr	r2, [r7, #12]
 8020df6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8020df8:	2101      	movs	r1, #1
 8020dfa:	68f8      	ldr	r0, [r7, #12]
 8020dfc:	f000 f8d2 	bl	8020fa4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8020e00:	2301      	movs	r3, #1
 8020e02:	e000      	b.n	8020e06 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8020e04:	2300      	movs	r3, #0
}
 8020e06:	4618      	mov	r0, r3
 8020e08:	3718      	adds	r7, #24
 8020e0a:	46bd      	mov	sp, r7
 8020e0c:	bd80      	pop	{r7, pc}
 8020e0e:	bf00      	nop
 8020e10:	0802ab80 	.word	0x0802ab80
 8020e14:	0802acbc 	.word	0x0802acbc
 8020e18:	0802abd8 	.word	0x0802abd8

08020e1c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8020e1c:	b480      	push	{r7}
 8020e1e:	b085      	sub	sp, #20
 8020e20:	af00      	add	r7, sp, #0
 8020e22:	60f8      	str	r0, [r7, #12]
 8020e24:	60b9      	str	r1, [r7, #8]
 8020e26:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8020e28:	68bb      	ldr	r3, [r7, #8]
 8020e2a:	681a      	ldr	r2, [r3, #0]
 8020e2c:	68fb      	ldr	r3, [r7, #12]
 8020e2e:	3308      	adds	r3, #8
 8020e30:	681b      	ldr	r3, [r3, #0]
 8020e32:	429a      	cmp	r2, r3
 8020e34:	d00a      	beq.n	8020e4c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8020e36:	68bb      	ldr	r3, [r7, #8]
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	d002      	beq.n	8020e42 <netif_do_set_netmask+0x26>
 8020e3c:	68bb      	ldr	r3, [r7, #8]
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	e000      	b.n	8020e44 <netif_do_set_netmask+0x28>
 8020e42:	2300      	movs	r3, #0
 8020e44:	68fa      	ldr	r2, [r7, #12]
 8020e46:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8020e48:	2301      	movs	r3, #1
 8020e4a:	e000      	b.n	8020e4e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8020e4c:	2300      	movs	r3, #0
}
 8020e4e:	4618      	mov	r0, r3
 8020e50:	3714      	adds	r7, #20
 8020e52:	46bd      	mov	sp, r7
 8020e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e58:	4770      	bx	lr

08020e5a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8020e5a:	b480      	push	{r7}
 8020e5c:	b085      	sub	sp, #20
 8020e5e:	af00      	add	r7, sp, #0
 8020e60:	60f8      	str	r0, [r7, #12]
 8020e62:	60b9      	str	r1, [r7, #8]
 8020e64:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8020e66:	68bb      	ldr	r3, [r7, #8]
 8020e68:	681a      	ldr	r2, [r3, #0]
 8020e6a:	68fb      	ldr	r3, [r7, #12]
 8020e6c:	330c      	adds	r3, #12
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	429a      	cmp	r2, r3
 8020e72:	d00a      	beq.n	8020e8a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8020e74:	68bb      	ldr	r3, [r7, #8]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d002      	beq.n	8020e80 <netif_do_set_gw+0x26>
 8020e7a:	68bb      	ldr	r3, [r7, #8]
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	e000      	b.n	8020e82 <netif_do_set_gw+0x28>
 8020e80:	2300      	movs	r3, #0
 8020e82:	68fa      	ldr	r2, [r7, #12]
 8020e84:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8020e86:	2301      	movs	r3, #1
 8020e88:	e000      	b.n	8020e8c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8020e8a:	2300      	movs	r3, #0
}
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	3714      	adds	r7, #20
 8020e90:	46bd      	mov	sp, r7
 8020e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e96:	4770      	bx	lr

08020e98 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8020e98:	b580      	push	{r7, lr}
 8020e9a:	b088      	sub	sp, #32
 8020e9c:	af00      	add	r7, sp, #0
 8020e9e:	60f8      	str	r0, [r7, #12]
 8020ea0:	60b9      	str	r1, [r7, #8]
 8020ea2:	607a      	str	r2, [r7, #4]
 8020ea4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8020ea6:	2300      	movs	r3, #0
 8020ea8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8020eaa:	2300      	movs	r3, #0
 8020eac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8020eae:	68bb      	ldr	r3, [r7, #8]
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d101      	bne.n	8020eb8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8020eb4:	4b1c      	ldr	r3, [pc, #112]	; (8020f28 <netif_set_addr+0x90>)
 8020eb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d101      	bne.n	8020ec2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8020ebe:	4b1a      	ldr	r3, [pc, #104]	; (8020f28 <netif_set_addr+0x90>)
 8020ec0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8020ec2:	683b      	ldr	r3, [r7, #0]
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	d101      	bne.n	8020ecc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8020ec8:	4b17      	ldr	r3, [pc, #92]	; (8020f28 <netif_set_addr+0x90>)
 8020eca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8020ecc:	68bb      	ldr	r3, [r7, #8]
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d003      	beq.n	8020eda <netif_set_addr+0x42>
 8020ed2:	68bb      	ldr	r3, [r7, #8]
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d101      	bne.n	8020ede <netif_set_addr+0x46>
 8020eda:	2301      	movs	r3, #1
 8020edc:	e000      	b.n	8020ee0 <netif_set_addr+0x48>
 8020ede:	2300      	movs	r3, #0
 8020ee0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8020ee2:	697b      	ldr	r3, [r7, #20]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	d006      	beq.n	8020ef6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8020ee8:	f107 0310 	add.w	r3, r7, #16
 8020eec:	461a      	mov	r2, r3
 8020eee:	68b9      	ldr	r1, [r7, #8]
 8020ef0:	68f8      	ldr	r0, [r7, #12]
 8020ef2:	f7ff ff49 	bl	8020d88 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8020ef6:	69fa      	ldr	r2, [r7, #28]
 8020ef8:	6879      	ldr	r1, [r7, #4]
 8020efa:	68f8      	ldr	r0, [r7, #12]
 8020efc:	f7ff ff8e 	bl	8020e1c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8020f00:	69ba      	ldr	r2, [r7, #24]
 8020f02:	6839      	ldr	r1, [r7, #0]
 8020f04:	68f8      	ldr	r0, [r7, #12]
 8020f06:	f7ff ffa8 	bl	8020e5a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8020f0a:	697b      	ldr	r3, [r7, #20]
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d106      	bne.n	8020f1e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8020f10:	f107 0310 	add.w	r3, r7, #16
 8020f14:	461a      	mov	r2, r3
 8020f16:	68b9      	ldr	r1, [r7, #8]
 8020f18:	68f8      	ldr	r0, [r7, #12]
 8020f1a:	f7ff ff35 	bl	8020d88 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8020f1e:	bf00      	nop
 8020f20:	3720      	adds	r7, #32
 8020f22:	46bd      	mov	sp, r7
 8020f24:	bd80      	pop	{r7, pc}
 8020f26:	bf00      	nop
 8020f28:	0802c308 	.word	0x0802c308

08020f2c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8020f2c:	b480      	push	{r7}
 8020f2e:	b083      	sub	sp, #12
 8020f30:	af00      	add	r7, sp, #0
 8020f32:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8020f34:	4a04      	ldr	r2, [pc, #16]	; (8020f48 <netif_set_default+0x1c>)
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8020f3a:	bf00      	nop
 8020f3c:	370c      	adds	r7, #12
 8020f3e:	46bd      	mov	sp, r7
 8020f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f44:	4770      	bx	lr
 8020f46:	bf00      	nop
 8020f48:	20014adc 	.word	0x20014adc

08020f4c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8020f4c:	b580      	push	{r7, lr}
 8020f4e:	b082      	sub	sp, #8
 8020f50:	af00      	add	r7, sp, #0
 8020f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	2b00      	cmp	r3, #0
 8020f58:	d107      	bne.n	8020f6a <netif_set_up+0x1e>
 8020f5a:	4b0f      	ldr	r3, [pc, #60]	; (8020f98 <netif_set_up+0x4c>)
 8020f5c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8020f60:	490e      	ldr	r1, [pc, #56]	; (8020f9c <netif_set_up+0x50>)
 8020f62:	480f      	ldr	r0, [pc, #60]	; (8020fa0 <netif_set_up+0x54>)
 8020f64:	f004 f9fc 	bl	8025360 <iprintf>
 8020f68:	e013      	b.n	8020f92 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8020f6a:	687b      	ldr	r3, [r7, #4]
 8020f6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020f70:	f003 0301 	and.w	r3, r3, #1
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d10c      	bne.n	8020f92 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020f7e:	f043 0301 	orr.w	r3, r3, #1
 8020f82:	b2da      	uxtb	r2, r3
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8020f8a:	2103      	movs	r1, #3
 8020f8c:	6878      	ldr	r0, [r7, #4]
 8020f8e:	f000 f809 	bl	8020fa4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8020f92:	3708      	adds	r7, #8
 8020f94:	46bd      	mov	sp, r7
 8020f96:	bd80      	pop	{r7, pc}
 8020f98:	0802ab80 	.word	0x0802ab80
 8020f9c:	0802ad2c 	.word	0x0802ad2c
 8020fa0:	0802abd8 	.word	0x0802abd8

08020fa4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	b082      	sub	sp, #8
 8020fa8:	af00      	add	r7, sp, #0
 8020faa:	6078      	str	r0, [r7, #4]
 8020fac:	460b      	mov	r3, r1
 8020fae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d106      	bne.n	8020fc4 <netif_issue_reports+0x20>
 8020fb6:	4b18      	ldr	r3, [pc, #96]	; (8021018 <netif_issue_reports+0x74>)
 8020fb8:	f240 326d 	movw	r2, #877	; 0x36d
 8020fbc:	4917      	ldr	r1, [pc, #92]	; (802101c <netif_issue_reports+0x78>)
 8020fbe:	4818      	ldr	r0, [pc, #96]	; (8021020 <netif_issue_reports+0x7c>)
 8020fc0:	f004 f9ce 	bl	8025360 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020fca:	f003 0304 	and.w	r3, r3, #4
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d01e      	beq.n	8021010 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020fd8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	d017      	beq.n	8021010 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8020fe0:	78fb      	ldrb	r3, [r7, #3]
 8020fe2:	f003 0301 	and.w	r3, r3, #1
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	d013      	beq.n	8021012 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	3304      	adds	r3, #4
 8020fee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8020ff0:	2b00      	cmp	r3, #0
 8020ff2:	d00e      	beq.n	8021012 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020ffa:	f003 0308 	and.w	r3, r3, #8
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d007      	beq.n	8021012 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	3304      	adds	r3, #4
 8021006:	4619      	mov	r1, r3
 8021008:	6878      	ldr	r0, [r7, #4]
 802100a:	f002 fc35 	bl	8023878 <etharp_request>
 802100e:	e000      	b.n	8021012 <netif_issue_reports+0x6e>
    return;
 8021010:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8021012:	3708      	adds	r7, #8
 8021014:	46bd      	mov	sp, r7
 8021016:	bd80      	pop	{r7, pc}
 8021018:	0802ab80 	.word	0x0802ab80
 802101c:	0802ad48 	.word	0x0802ad48
 8021020:	0802abd8 	.word	0x0802abd8

08021024 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8021024:	b580      	push	{r7, lr}
 8021026:	b082      	sub	sp, #8
 8021028:	af00      	add	r7, sp, #0
 802102a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	2b00      	cmp	r3, #0
 8021030:	d107      	bne.n	8021042 <netif_set_down+0x1e>
 8021032:	4b12      	ldr	r3, [pc, #72]	; (802107c <netif_set_down+0x58>)
 8021034:	f240 329b 	movw	r2, #923	; 0x39b
 8021038:	4911      	ldr	r1, [pc, #68]	; (8021080 <netif_set_down+0x5c>)
 802103a:	4812      	ldr	r0, [pc, #72]	; (8021084 <netif_set_down+0x60>)
 802103c:	f004 f990 	bl	8025360 <iprintf>
 8021040:	e019      	b.n	8021076 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021048:	f003 0301 	and.w	r3, r3, #1
 802104c:	2b00      	cmp	r3, #0
 802104e:	d012      	beq.n	8021076 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021056:	f023 0301 	bic.w	r3, r3, #1
 802105a:	b2da      	uxtb	r2, r3
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021068:	f003 0308 	and.w	r3, r3, #8
 802106c:	2b00      	cmp	r3, #0
 802106e:	d002      	beq.n	8021076 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8021070:	6878      	ldr	r0, [r7, #4]
 8021072:	f001 ffbf 	bl	8022ff4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8021076:	3708      	adds	r7, #8
 8021078:	46bd      	mov	sp, r7
 802107a:	bd80      	pop	{r7, pc}
 802107c:	0802ab80 	.word	0x0802ab80
 8021080:	0802ad6c 	.word	0x0802ad6c
 8021084:	0802abd8 	.word	0x0802abd8

08021088 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8021088:	b580      	push	{r7, lr}
 802108a:	b082      	sub	sp, #8
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	2b00      	cmp	r3, #0
 8021094:	d107      	bne.n	80210a6 <netif_set_link_up+0x1e>
 8021096:	4b13      	ldr	r3, [pc, #76]	; (80210e4 <netif_set_link_up+0x5c>)
 8021098:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 802109c:	4912      	ldr	r1, [pc, #72]	; (80210e8 <netif_set_link_up+0x60>)
 802109e:	4813      	ldr	r0, [pc, #76]	; (80210ec <netif_set_link_up+0x64>)
 80210a0:	f004 f95e 	bl	8025360 <iprintf>
 80210a4:	e01b      	b.n	80210de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80210ac:	f003 0304 	and.w	r3, r3, #4
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d114      	bne.n	80210de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80210ba:	f043 0304 	orr.w	r3, r3, #4
 80210be:	b2da      	uxtb	r2, r3
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80210c6:	2103      	movs	r1, #3
 80210c8:	6878      	ldr	r0, [r7, #4]
 80210ca:	f7ff ff6b 	bl	8020fa4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	69db      	ldr	r3, [r3, #28]
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d003      	beq.n	80210de <netif_set_link_up+0x56>
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	69db      	ldr	r3, [r3, #28]
 80210da:	6878      	ldr	r0, [r7, #4]
 80210dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80210de:	3708      	adds	r7, #8
 80210e0:	46bd      	mov	sp, r7
 80210e2:	bd80      	pop	{r7, pc}
 80210e4:	0802ab80 	.word	0x0802ab80
 80210e8:	0802ad8c 	.word	0x0802ad8c
 80210ec:	0802abd8 	.word	0x0802abd8

080210f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80210f0:	b580      	push	{r7, lr}
 80210f2:	b082      	sub	sp, #8
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	2b00      	cmp	r3, #0
 80210fc:	d107      	bne.n	802110e <netif_set_link_down+0x1e>
 80210fe:	4b11      	ldr	r3, [pc, #68]	; (8021144 <netif_set_link_down+0x54>)
 8021100:	f240 4206 	movw	r2, #1030	; 0x406
 8021104:	4910      	ldr	r1, [pc, #64]	; (8021148 <netif_set_link_down+0x58>)
 8021106:	4811      	ldr	r0, [pc, #68]	; (802114c <netif_set_link_down+0x5c>)
 8021108:	f004 f92a 	bl	8025360 <iprintf>
 802110c:	e017      	b.n	802113e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021114:	f003 0304 	and.w	r3, r3, #4
 8021118:	2b00      	cmp	r3, #0
 802111a:	d010      	beq.n	802113e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021122:	f023 0304 	bic.w	r3, r3, #4
 8021126:	b2da      	uxtb	r2, r3
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	69db      	ldr	r3, [r3, #28]
 8021132:	2b00      	cmp	r3, #0
 8021134:	d003      	beq.n	802113e <netif_set_link_down+0x4e>
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	69db      	ldr	r3, [r3, #28]
 802113a:	6878      	ldr	r0, [r7, #4]
 802113c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 802113e:	3708      	adds	r7, #8
 8021140:	46bd      	mov	sp, r7
 8021142:	bd80      	pop	{r7, pc}
 8021144:	0802ab80 	.word	0x0802ab80
 8021148:	0802adb0 	.word	0x0802adb0
 802114c:	0802abd8 	.word	0x0802abd8

08021150 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8021150:	b480      	push	{r7}
 8021152:	b083      	sub	sp, #12
 8021154:	af00      	add	r7, sp, #0
 8021156:	6078      	str	r0, [r7, #4]
 8021158:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	2b00      	cmp	r3, #0
 802115e:	d002      	beq.n	8021166 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	683a      	ldr	r2, [r7, #0]
 8021164:	61da      	str	r2, [r3, #28]
  }
}
 8021166:	bf00      	nop
 8021168:	370c      	adds	r7, #12
 802116a:	46bd      	mov	sp, r7
 802116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021170:	4770      	bx	lr
	...

08021174 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 8021174:	b580      	push	{r7, lr}
 8021176:	b086      	sub	sp, #24
 8021178:	af00      	add	r7, sp, #0
 802117a:	6078      	str	r0, [r7, #4]
 802117c:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d106      	bne.n	8021192 <netif_loop_output+0x1e>
 8021184:	4b2d      	ldr	r3, [pc, #180]	; (802123c <netif_loop_output+0xc8>)
 8021186:	f240 424b 	movw	r2, #1099	; 0x44b
 802118a:	492d      	ldr	r1, [pc, #180]	; (8021240 <netif_loop_output+0xcc>)
 802118c:	482d      	ldr	r0, [pc, #180]	; (8021244 <netif_loop_output+0xd0>)
 802118e:	f004 f8e7 	bl	8025360 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 8021192:	683b      	ldr	r3, [r7, #0]
 8021194:	2b00      	cmp	r3, #0
 8021196:	d106      	bne.n	80211a6 <netif_loop_output+0x32>
 8021198:	4b28      	ldr	r3, [pc, #160]	; (802123c <netif_loop_output+0xc8>)
 802119a:	f240 424c 	movw	r2, #1100	; 0x44c
 802119e:	492a      	ldr	r1, [pc, #168]	; (8021248 <netif_loop_output+0xd4>)
 80211a0:	4828      	ldr	r0, [pc, #160]	; (8021244 <netif_loop_output+0xd0>)
 80211a2:	f004 f8dd 	bl	8025360 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80211a6:	683b      	ldr	r3, [r7, #0]
 80211a8:	891b      	ldrh	r3, [r3, #8]
 80211aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80211ae:	4619      	mov	r1, r3
 80211b0:	200e      	movs	r0, #14
 80211b2:	f000 f8bb 	bl	802132c <pbuf_alloc>
 80211b6:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 80211b8:	693b      	ldr	r3, [r7, #16]
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	d102      	bne.n	80211c4 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 80211be:	f04f 33ff 	mov.w	r3, #4294967295
 80211c2:	e037      	b.n	8021234 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 80211c4:	6839      	ldr	r1, [r7, #0]
 80211c6:	6938      	ldr	r0, [r7, #16]
 80211c8:	f000 fcba 	bl	8021b40 <pbuf_copy>
 80211cc:	4603      	mov	r3, r0
 80211ce:	73fb      	strb	r3, [r7, #15]
 80211d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d005      	beq.n	80211e4 <netif_loop_output+0x70>
    pbuf_free(r);
 80211d8:	6938      	ldr	r0, [r7, #16]
 80211da:	f000 fb89 	bl	80218f0 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 80211de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80211e2:	e027      	b.n	8021234 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 80211e4:	693b      	ldr	r3, [r7, #16]
 80211e6:	617b      	str	r3, [r7, #20]
 80211e8:	e002      	b.n	80211f0 <netif_loop_output+0x7c>
 80211ea:	697b      	ldr	r3, [r7, #20]
 80211ec:	681b      	ldr	r3, [r3, #0]
 80211ee:	617b      	str	r3, [r7, #20]
 80211f0:	697b      	ldr	r3, [r7, #20]
 80211f2:	681b      	ldr	r3, [r3, #0]
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	d1f8      	bne.n	80211ea <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d012      	beq.n	8021226 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021204:	2b00      	cmp	r3, #0
 8021206:	d106      	bne.n	8021216 <netif_loop_output+0xa2>
 8021208:	4b0c      	ldr	r3, [pc, #48]	; (802123c <netif_loop_output+0xc8>)
 802120a:	f240 4277 	movw	r2, #1143	; 0x477
 802120e:	490f      	ldr	r1, [pc, #60]	; (802124c <netif_loop_output+0xd8>)
 8021210:	480c      	ldr	r0, [pc, #48]	; (8021244 <netif_loop_output+0xd0>)
 8021212:	f004 f8a5 	bl	8025360 <iprintf>
    netif->loop_last->next = r;
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802121a:	693a      	ldr	r2, [r7, #16]
 802121c:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	697a      	ldr	r2, [r7, #20]
 8021222:	63da      	str	r2, [r3, #60]	; 0x3c
 8021224:	e005      	b.n	8021232 <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	693a      	ldr	r2, [r7, #16]
 802122a:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 802122c:	687b      	ldr	r3, [r7, #4]
 802122e:	697a      	ldr	r2, [r7, #20]
 8021230:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 8021232:	2300      	movs	r3, #0
}
 8021234:	4618      	mov	r0, r3
 8021236:	3718      	adds	r7, #24
 8021238:	46bd      	mov	sp, r7
 802123a:	bd80      	pop	{r7, pc}
 802123c:	0802ab80 	.word	0x0802ab80
 8021240:	0802add4 	.word	0x0802add4
 8021244:	0802abd8 	.word	0x0802abd8
 8021248:	0802adf8 	.word	0x0802adf8
 802124c:	0802ae18 	.word	0x0802ae18

08021250 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8021250:	b580      	push	{r7, lr}
 8021252:	b084      	sub	sp, #16
 8021254:	af00      	add	r7, sp, #0
 8021256:	60f8      	str	r0, [r7, #12]
 8021258:	60b9      	str	r1, [r7, #8]
 802125a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 802125c:	68b9      	ldr	r1, [r7, #8]
 802125e:	68f8      	ldr	r0, [r7, #12]
 8021260:	f7ff ff88 	bl	8021174 <netif_loop_output>
 8021264:	4603      	mov	r3, r0
}
 8021266:	4618      	mov	r0, r3
 8021268:	3710      	adds	r7, #16
 802126a:	46bd      	mov	sp, r7
 802126c:	bd80      	pop	{r7, pc}

0802126e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 802126e:	b480      	push	{r7}
 8021270:	b085      	sub	sp, #20
 8021272:	af00      	add	r7, sp, #0
 8021274:	60f8      	str	r0, [r7, #12]
 8021276:	60b9      	str	r1, [r7, #8]
 8021278:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 802127a:	f06f 030b 	mvn.w	r3, #11
}
 802127e:	4618      	mov	r0, r3
 8021280:	3714      	adds	r7, #20
 8021282:	46bd      	mov	sp, r7
 8021284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021288:	4770      	bx	lr
	...

0802128c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 802128c:	b480      	push	{r7}
 802128e:	b085      	sub	sp, #20
 8021290:	af00      	add	r7, sp, #0
 8021292:	4603      	mov	r3, r0
 8021294:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8021296:	79fb      	ldrb	r3, [r7, #7]
 8021298:	2b00      	cmp	r3, #0
 802129a:	d013      	beq.n	80212c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 802129c:	4b0d      	ldr	r3, [pc, #52]	; (80212d4 <netif_get_by_index+0x48>)
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	60fb      	str	r3, [r7, #12]
 80212a2:	e00c      	b.n	80212be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80212a4:	68fb      	ldr	r3, [r7, #12]
 80212a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80212aa:	3301      	adds	r3, #1
 80212ac:	b2db      	uxtb	r3, r3
 80212ae:	79fa      	ldrb	r2, [r7, #7]
 80212b0:	429a      	cmp	r2, r3
 80212b2:	d101      	bne.n	80212b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80212b4:	68fb      	ldr	r3, [r7, #12]
 80212b6:	e006      	b.n	80212c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80212b8:	68fb      	ldr	r3, [r7, #12]
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	60fb      	str	r3, [r7, #12]
 80212be:	68fb      	ldr	r3, [r7, #12]
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	d1ef      	bne.n	80212a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80212c4:	2300      	movs	r3, #0
}
 80212c6:	4618      	mov	r0, r3
 80212c8:	3714      	adds	r7, #20
 80212ca:	46bd      	mov	sp, r7
 80212cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d0:	4770      	bx	lr
 80212d2:	bf00      	nop
 80212d4:	20014ad8 	.word	0x20014ad8

080212d8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80212d8:	b480      	push	{r7}
 80212da:	b085      	sub	sp, #20
 80212dc:	af00      	add	r7, sp, #0
 80212de:	60f8      	str	r0, [r7, #12]
 80212e0:	60b9      	str	r1, [r7, #8]
 80212e2:	4611      	mov	r1, r2
 80212e4:	461a      	mov	r2, r3
 80212e6:	460b      	mov	r3, r1
 80212e8:	80fb      	strh	r3, [r7, #6]
 80212ea:	4613      	mov	r3, r2
 80212ec:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	2200      	movs	r2, #0
 80212f2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80212f4:	68fb      	ldr	r3, [r7, #12]
 80212f6:	68ba      	ldr	r2, [r7, #8]
 80212f8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80212fa:	68fb      	ldr	r3, [r7, #12]
 80212fc:	88fa      	ldrh	r2, [r7, #6]
 80212fe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8021300:	68fb      	ldr	r3, [r7, #12]
 8021302:	88ba      	ldrh	r2, [r7, #4]
 8021304:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8021306:	8b3b      	ldrh	r3, [r7, #24]
 8021308:	b2da      	uxtb	r2, r3
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 802130e:	68fb      	ldr	r3, [r7, #12]
 8021310:	7f3a      	ldrb	r2, [r7, #28]
 8021312:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8021314:	68fb      	ldr	r3, [r7, #12]
 8021316:	2201      	movs	r2, #1
 8021318:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	2200      	movs	r2, #0
 802131e:	73da      	strb	r2, [r3, #15]
}
 8021320:	bf00      	nop
 8021322:	3714      	adds	r7, #20
 8021324:	46bd      	mov	sp, r7
 8021326:	f85d 7b04 	ldr.w	r7, [sp], #4
 802132a:	4770      	bx	lr

0802132c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 802132c:	b580      	push	{r7, lr}
 802132e:	b08c      	sub	sp, #48	; 0x30
 8021330:	af02      	add	r7, sp, #8
 8021332:	4603      	mov	r3, r0
 8021334:	71fb      	strb	r3, [r7, #7]
 8021336:	460b      	mov	r3, r1
 8021338:	80bb      	strh	r3, [r7, #4]
 802133a:	4613      	mov	r3, r2
 802133c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 802133e:	79fb      	ldrb	r3, [r7, #7]
 8021340:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8021342:	887b      	ldrh	r3, [r7, #2]
 8021344:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8021348:	d07d      	beq.n	8021446 <pbuf_alloc+0x11a>
 802134a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 802134e:	f300 80c6 	bgt.w	80214de <pbuf_alloc+0x1b2>
 8021352:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8021356:	d010      	beq.n	802137a <pbuf_alloc+0x4e>
 8021358:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 802135c:	f300 80bf 	bgt.w	80214de <pbuf_alloc+0x1b2>
 8021360:	2b01      	cmp	r3, #1
 8021362:	d002      	beq.n	802136a <pbuf_alloc+0x3e>
 8021364:	2b41      	cmp	r3, #65	; 0x41
 8021366:	f040 80ba 	bne.w	80214de <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 802136a:	887a      	ldrh	r2, [r7, #2]
 802136c:	88bb      	ldrh	r3, [r7, #4]
 802136e:	4619      	mov	r1, r3
 8021370:	2000      	movs	r0, #0
 8021372:	f000 f8cf 	bl	8021514 <pbuf_alloc_reference>
 8021376:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8021378:	e0bb      	b.n	80214f2 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 802137a:	2300      	movs	r3, #0
 802137c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 802137e:	2300      	movs	r3, #0
 8021380:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8021382:	88bb      	ldrh	r3, [r7, #4]
 8021384:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8021386:	2005      	movs	r0, #5
 8021388:	f7ff fb32 	bl	80209f0 <memp_malloc>
 802138c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 802138e:	693b      	ldr	r3, [r7, #16]
 8021390:	2b00      	cmp	r3, #0
 8021392:	d107      	bne.n	80213a4 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8021394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021396:	2b00      	cmp	r3, #0
 8021398:	d002      	beq.n	80213a0 <pbuf_alloc+0x74>
            pbuf_free(p);
 802139a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802139c:	f000 faa8 	bl	80218f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80213a0:	2300      	movs	r3, #0
 80213a2:	e0a7      	b.n	80214f4 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80213a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213a6:	3303      	adds	r3, #3
 80213a8:	b29b      	uxth	r3, r3
 80213aa:	f023 0303 	bic.w	r3, r3, #3
 80213ae:	b29b      	uxth	r3, r3
 80213b0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80213b4:	b29b      	uxth	r3, r3
 80213b6:	8b7a      	ldrh	r2, [r7, #26]
 80213b8:	4293      	cmp	r3, r2
 80213ba:	bf28      	it	cs
 80213bc:	4613      	movcs	r3, r2
 80213be:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80213c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213c2:	3310      	adds	r3, #16
 80213c4:	693a      	ldr	r2, [r7, #16]
 80213c6:	4413      	add	r3, r2
 80213c8:	3303      	adds	r3, #3
 80213ca:	f023 0303 	bic.w	r3, r3, #3
 80213ce:	4618      	mov	r0, r3
 80213d0:	89f9      	ldrh	r1, [r7, #14]
 80213d2:	8b7a      	ldrh	r2, [r7, #26]
 80213d4:	2300      	movs	r3, #0
 80213d6:	9301      	str	r3, [sp, #4]
 80213d8:	887b      	ldrh	r3, [r7, #2]
 80213da:	9300      	str	r3, [sp, #0]
 80213dc:	460b      	mov	r3, r1
 80213de:	4601      	mov	r1, r0
 80213e0:	6938      	ldr	r0, [r7, #16]
 80213e2:	f7ff ff79 	bl	80212d8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80213e6:	693b      	ldr	r3, [r7, #16]
 80213e8:	685b      	ldr	r3, [r3, #4]
 80213ea:	f003 0303 	and.w	r3, r3, #3
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d006      	beq.n	8021400 <pbuf_alloc+0xd4>
 80213f2:	4b42      	ldr	r3, [pc, #264]	; (80214fc <pbuf_alloc+0x1d0>)
 80213f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80213f8:	4941      	ldr	r1, [pc, #260]	; (8021500 <pbuf_alloc+0x1d4>)
 80213fa:	4842      	ldr	r0, [pc, #264]	; (8021504 <pbuf_alloc+0x1d8>)
 80213fc:	f003 ffb0 	bl	8025360 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8021400:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021402:	3303      	adds	r3, #3
 8021404:	f023 0303 	bic.w	r3, r3, #3
 8021408:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 802140c:	d106      	bne.n	802141c <pbuf_alloc+0xf0>
 802140e:	4b3b      	ldr	r3, [pc, #236]	; (80214fc <pbuf_alloc+0x1d0>)
 8021410:	f44f 7281 	mov.w	r2, #258	; 0x102
 8021414:	493c      	ldr	r1, [pc, #240]	; (8021508 <pbuf_alloc+0x1dc>)
 8021416:	483b      	ldr	r0, [pc, #236]	; (8021504 <pbuf_alloc+0x1d8>)
 8021418:	f003 ffa2 	bl	8025360 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 802141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802141e:	2b00      	cmp	r3, #0
 8021420:	d102      	bne.n	8021428 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8021422:	693b      	ldr	r3, [r7, #16]
 8021424:	627b      	str	r3, [r7, #36]	; 0x24
 8021426:	e002      	b.n	802142e <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8021428:	69fb      	ldr	r3, [r7, #28]
 802142a:	693a      	ldr	r2, [r7, #16]
 802142c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 802142e:	693b      	ldr	r3, [r7, #16]
 8021430:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8021432:	8b7a      	ldrh	r2, [r7, #26]
 8021434:	89fb      	ldrh	r3, [r7, #14]
 8021436:	1ad3      	subs	r3, r2, r3
 8021438:	837b      	strh	r3, [r7, #26]
        offset = 0;
 802143a:	2300      	movs	r3, #0
 802143c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 802143e:	8b7b      	ldrh	r3, [r7, #26]
 8021440:	2b00      	cmp	r3, #0
 8021442:	d1a0      	bne.n	8021386 <pbuf_alloc+0x5a>
      break;
 8021444:	e055      	b.n	80214f2 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8021446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021448:	3303      	adds	r3, #3
 802144a:	b29b      	uxth	r3, r3
 802144c:	f023 0303 	bic.w	r3, r3, #3
 8021450:	b29a      	uxth	r2, r3
 8021452:	88bb      	ldrh	r3, [r7, #4]
 8021454:	3303      	adds	r3, #3
 8021456:	b29b      	uxth	r3, r3
 8021458:	f023 0303 	bic.w	r3, r3, #3
 802145c:	b29b      	uxth	r3, r3
 802145e:	4413      	add	r3, r2
 8021460:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8021462:	8b3b      	ldrh	r3, [r7, #24]
 8021464:	3310      	adds	r3, #16
 8021466:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8021468:	8b3a      	ldrh	r2, [r7, #24]
 802146a:	88bb      	ldrh	r3, [r7, #4]
 802146c:	3303      	adds	r3, #3
 802146e:	f023 0303 	bic.w	r3, r3, #3
 8021472:	429a      	cmp	r2, r3
 8021474:	d306      	bcc.n	8021484 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8021476:	8afa      	ldrh	r2, [r7, #22]
 8021478:	88bb      	ldrh	r3, [r7, #4]
 802147a:	3303      	adds	r3, #3
 802147c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8021480:	429a      	cmp	r2, r3
 8021482:	d201      	bcs.n	8021488 <pbuf_alloc+0x15c>
        return NULL;
 8021484:	2300      	movs	r3, #0
 8021486:	e035      	b.n	80214f4 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8021488:	8afb      	ldrh	r3, [r7, #22]
 802148a:	4618      	mov	r0, r3
 802148c:	f7ff f920 	bl	80206d0 <mem_malloc>
 8021490:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8021492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021494:	2b00      	cmp	r3, #0
 8021496:	d101      	bne.n	802149c <pbuf_alloc+0x170>
        return NULL;
 8021498:	2300      	movs	r3, #0
 802149a:	e02b      	b.n	80214f4 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 802149c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802149e:	3310      	adds	r3, #16
 80214a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80214a2:	4413      	add	r3, r2
 80214a4:	3303      	adds	r3, #3
 80214a6:	f023 0303 	bic.w	r3, r3, #3
 80214aa:	4618      	mov	r0, r3
 80214ac:	88b9      	ldrh	r1, [r7, #4]
 80214ae:	88ba      	ldrh	r2, [r7, #4]
 80214b0:	2300      	movs	r3, #0
 80214b2:	9301      	str	r3, [sp, #4]
 80214b4:	887b      	ldrh	r3, [r7, #2]
 80214b6:	9300      	str	r3, [sp, #0]
 80214b8:	460b      	mov	r3, r1
 80214ba:	4601      	mov	r1, r0
 80214bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80214be:	f7ff ff0b 	bl	80212d8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80214c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214c4:	685b      	ldr	r3, [r3, #4]
 80214c6:	f003 0303 	and.w	r3, r3, #3
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d010      	beq.n	80214f0 <pbuf_alloc+0x1c4>
 80214ce:	4b0b      	ldr	r3, [pc, #44]	; (80214fc <pbuf_alloc+0x1d0>)
 80214d0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80214d4:	490d      	ldr	r1, [pc, #52]	; (802150c <pbuf_alloc+0x1e0>)
 80214d6:	480b      	ldr	r0, [pc, #44]	; (8021504 <pbuf_alloc+0x1d8>)
 80214d8:	f003 ff42 	bl	8025360 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80214dc:	e008      	b.n	80214f0 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80214de:	4b07      	ldr	r3, [pc, #28]	; (80214fc <pbuf_alloc+0x1d0>)
 80214e0:	f240 1227 	movw	r2, #295	; 0x127
 80214e4:	490a      	ldr	r1, [pc, #40]	; (8021510 <pbuf_alloc+0x1e4>)
 80214e6:	4807      	ldr	r0, [pc, #28]	; (8021504 <pbuf_alloc+0x1d8>)
 80214e8:	f003 ff3a 	bl	8025360 <iprintf>
      return NULL;
 80214ec:	2300      	movs	r3, #0
 80214ee:	e001      	b.n	80214f4 <pbuf_alloc+0x1c8>
      break;
 80214f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80214f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80214f4:	4618      	mov	r0, r3
 80214f6:	3728      	adds	r7, #40	; 0x28
 80214f8:	46bd      	mov	sp, r7
 80214fa:	bd80      	pop	{r7, pc}
 80214fc:	0802aeb8 	.word	0x0802aeb8
 8021500:	0802aee8 	.word	0x0802aee8
 8021504:	0802af18 	.word	0x0802af18
 8021508:	0802af40 	.word	0x0802af40
 802150c:	0802af74 	.word	0x0802af74
 8021510:	0802afa0 	.word	0x0802afa0

08021514 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8021514:	b580      	push	{r7, lr}
 8021516:	b086      	sub	sp, #24
 8021518:	af02      	add	r7, sp, #8
 802151a:	6078      	str	r0, [r7, #4]
 802151c:	460b      	mov	r3, r1
 802151e:	807b      	strh	r3, [r7, #2]
 8021520:	4613      	mov	r3, r2
 8021522:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8021524:	883b      	ldrh	r3, [r7, #0]
 8021526:	2b41      	cmp	r3, #65	; 0x41
 8021528:	d009      	beq.n	802153e <pbuf_alloc_reference+0x2a>
 802152a:	883b      	ldrh	r3, [r7, #0]
 802152c:	2b01      	cmp	r3, #1
 802152e:	d006      	beq.n	802153e <pbuf_alloc_reference+0x2a>
 8021530:	4b0f      	ldr	r3, [pc, #60]	; (8021570 <pbuf_alloc_reference+0x5c>)
 8021532:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8021536:	490f      	ldr	r1, [pc, #60]	; (8021574 <pbuf_alloc_reference+0x60>)
 8021538:	480f      	ldr	r0, [pc, #60]	; (8021578 <pbuf_alloc_reference+0x64>)
 802153a:	f003 ff11 	bl	8025360 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 802153e:	2004      	movs	r0, #4
 8021540:	f7ff fa56 	bl	80209f0 <memp_malloc>
 8021544:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8021546:	68fb      	ldr	r3, [r7, #12]
 8021548:	2b00      	cmp	r3, #0
 802154a:	d101      	bne.n	8021550 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 802154c:	2300      	movs	r3, #0
 802154e:	e00b      	b.n	8021568 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8021550:	8879      	ldrh	r1, [r7, #2]
 8021552:	887a      	ldrh	r2, [r7, #2]
 8021554:	2300      	movs	r3, #0
 8021556:	9301      	str	r3, [sp, #4]
 8021558:	883b      	ldrh	r3, [r7, #0]
 802155a:	9300      	str	r3, [sp, #0]
 802155c:	460b      	mov	r3, r1
 802155e:	6879      	ldr	r1, [r7, #4]
 8021560:	68f8      	ldr	r0, [r7, #12]
 8021562:	f7ff feb9 	bl	80212d8 <pbuf_init_alloced_pbuf>
  return p;
 8021566:	68fb      	ldr	r3, [r7, #12]
}
 8021568:	4618      	mov	r0, r3
 802156a:	3710      	adds	r7, #16
 802156c:	46bd      	mov	sp, r7
 802156e:	bd80      	pop	{r7, pc}
 8021570:	0802aeb8 	.word	0x0802aeb8
 8021574:	0802afbc 	.word	0x0802afbc
 8021578:	0802af18 	.word	0x0802af18

0802157c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 802157c:	b580      	push	{r7, lr}
 802157e:	b088      	sub	sp, #32
 8021580:	af02      	add	r7, sp, #8
 8021582:	607b      	str	r3, [r7, #4]
 8021584:	4603      	mov	r3, r0
 8021586:	73fb      	strb	r3, [r7, #15]
 8021588:	460b      	mov	r3, r1
 802158a:	81bb      	strh	r3, [r7, #12]
 802158c:	4613      	mov	r3, r2
 802158e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8021590:	7bfb      	ldrb	r3, [r7, #15]
 8021592:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8021594:	8a7b      	ldrh	r3, [r7, #18]
 8021596:	3303      	adds	r3, #3
 8021598:	f023 0203 	bic.w	r2, r3, #3
 802159c:	89bb      	ldrh	r3, [r7, #12]
 802159e:	441a      	add	r2, r3
 80215a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80215a2:	429a      	cmp	r2, r3
 80215a4:	d901      	bls.n	80215aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80215a6:	2300      	movs	r3, #0
 80215a8:	e018      	b.n	80215dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80215aa:	6a3b      	ldr	r3, [r7, #32]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d007      	beq.n	80215c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80215b0:	8a7b      	ldrh	r3, [r7, #18]
 80215b2:	3303      	adds	r3, #3
 80215b4:	f023 0303 	bic.w	r3, r3, #3
 80215b8:	6a3a      	ldr	r2, [r7, #32]
 80215ba:	4413      	add	r3, r2
 80215bc:	617b      	str	r3, [r7, #20]
 80215be:	e001      	b.n	80215c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80215c0:	2300      	movs	r3, #0
 80215c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80215c4:	6878      	ldr	r0, [r7, #4]
 80215c6:	89b9      	ldrh	r1, [r7, #12]
 80215c8:	89ba      	ldrh	r2, [r7, #12]
 80215ca:	2302      	movs	r3, #2
 80215cc:	9301      	str	r3, [sp, #4]
 80215ce:	897b      	ldrh	r3, [r7, #10]
 80215d0:	9300      	str	r3, [sp, #0]
 80215d2:	460b      	mov	r3, r1
 80215d4:	6979      	ldr	r1, [r7, #20]
 80215d6:	f7ff fe7f 	bl	80212d8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80215da:	687b      	ldr	r3, [r7, #4]
}
 80215dc:	4618      	mov	r0, r3
 80215de:	3718      	adds	r7, #24
 80215e0:	46bd      	mov	sp, r7
 80215e2:	bd80      	pop	{r7, pc}

080215e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80215e4:	b580      	push	{r7, lr}
 80215e6:	b084      	sub	sp, #16
 80215e8:	af00      	add	r7, sp, #0
 80215ea:	6078      	str	r0, [r7, #4]
 80215ec:	460b      	mov	r3, r1
 80215ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d106      	bne.n	8021604 <pbuf_realloc+0x20>
 80215f6:	4b3a      	ldr	r3, [pc, #232]	; (80216e0 <pbuf_realloc+0xfc>)
 80215f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80215fc:	4939      	ldr	r1, [pc, #228]	; (80216e4 <pbuf_realloc+0x100>)
 80215fe:	483a      	ldr	r0, [pc, #232]	; (80216e8 <pbuf_realloc+0x104>)
 8021600:	f003 feae 	bl	8025360 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	891b      	ldrh	r3, [r3, #8]
 8021608:	887a      	ldrh	r2, [r7, #2]
 802160a:	429a      	cmp	r2, r3
 802160c:	d263      	bcs.n	80216d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	891a      	ldrh	r2, [r3, #8]
 8021612:	887b      	ldrh	r3, [r7, #2]
 8021614:	1ad3      	subs	r3, r2, r3
 8021616:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8021618:	887b      	ldrh	r3, [r7, #2]
 802161a:	817b      	strh	r3, [r7, #10]
  q = p;
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8021620:	e018      	b.n	8021654 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8021622:	68fb      	ldr	r3, [r7, #12]
 8021624:	895b      	ldrh	r3, [r3, #10]
 8021626:	897a      	ldrh	r2, [r7, #10]
 8021628:	1ad3      	subs	r3, r2, r3
 802162a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 802162c:	68fb      	ldr	r3, [r7, #12]
 802162e:	891a      	ldrh	r2, [r3, #8]
 8021630:	893b      	ldrh	r3, [r7, #8]
 8021632:	1ad3      	subs	r3, r2, r3
 8021634:	b29a      	uxth	r2, r3
 8021636:	68fb      	ldr	r3, [r7, #12]
 8021638:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 802163a:	68fb      	ldr	r3, [r7, #12]
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8021640:	68fb      	ldr	r3, [r7, #12]
 8021642:	2b00      	cmp	r3, #0
 8021644:	d106      	bne.n	8021654 <pbuf_realloc+0x70>
 8021646:	4b26      	ldr	r3, [pc, #152]	; (80216e0 <pbuf_realloc+0xfc>)
 8021648:	f240 12af 	movw	r2, #431	; 0x1af
 802164c:	4927      	ldr	r1, [pc, #156]	; (80216ec <pbuf_realloc+0x108>)
 802164e:	4826      	ldr	r0, [pc, #152]	; (80216e8 <pbuf_realloc+0x104>)
 8021650:	f003 fe86 	bl	8025360 <iprintf>
  while (rem_len > q->len) {
 8021654:	68fb      	ldr	r3, [r7, #12]
 8021656:	895b      	ldrh	r3, [r3, #10]
 8021658:	897a      	ldrh	r2, [r7, #10]
 802165a:	429a      	cmp	r2, r3
 802165c:	d8e1      	bhi.n	8021622 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 802165e:	68fb      	ldr	r3, [r7, #12]
 8021660:	7b1b      	ldrb	r3, [r3, #12]
 8021662:	f003 030f 	and.w	r3, r3, #15
 8021666:	2b00      	cmp	r3, #0
 8021668:	d121      	bne.n	80216ae <pbuf_realloc+0xca>
 802166a:	68fb      	ldr	r3, [r7, #12]
 802166c:	895b      	ldrh	r3, [r3, #10]
 802166e:	897a      	ldrh	r2, [r7, #10]
 8021670:	429a      	cmp	r2, r3
 8021672:	d01c      	beq.n	80216ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8021674:	68fb      	ldr	r3, [r7, #12]
 8021676:	7b5b      	ldrb	r3, [r3, #13]
 8021678:	f003 0302 	and.w	r3, r3, #2
 802167c:	2b00      	cmp	r3, #0
 802167e:	d116      	bne.n	80216ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8021680:	68fb      	ldr	r3, [r7, #12]
 8021682:	685a      	ldr	r2, [r3, #4]
 8021684:	68fb      	ldr	r3, [r7, #12]
 8021686:	1ad3      	subs	r3, r2, r3
 8021688:	b29a      	uxth	r2, r3
 802168a:	897b      	ldrh	r3, [r7, #10]
 802168c:	4413      	add	r3, r2
 802168e:	b29b      	uxth	r3, r3
 8021690:	4619      	mov	r1, r3
 8021692:	68f8      	ldr	r0, [r7, #12]
 8021694:	f7fe ff20 	bl	80204d8 <mem_trim>
 8021698:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 802169a:	68fb      	ldr	r3, [r7, #12]
 802169c:	2b00      	cmp	r3, #0
 802169e:	d106      	bne.n	80216ae <pbuf_realloc+0xca>
 80216a0:	4b0f      	ldr	r3, [pc, #60]	; (80216e0 <pbuf_realloc+0xfc>)
 80216a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80216a6:	4912      	ldr	r1, [pc, #72]	; (80216f0 <pbuf_realloc+0x10c>)
 80216a8:	480f      	ldr	r0, [pc, #60]	; (80216e8 <pbuf_realloc+0x104>)
 80216aa:	f003 fe59 	bl	8025360 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	897a      	ldrh	r2, [r7, #10]
 80216b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80216b4:	68fb      	ldr	r3, [r7, #12]
 80216b6:	895a      	ldrh	r2, [r3, #10]
 80216b8:	68fb      	ldr	r3, [r7, #12]
 80216ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80216bc:	68fb      	ldr	r3, [r7, #12]
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d004      	beq.n	80216ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80216c4:	68fb      	ldr	r3, [r7, #12]
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	4618      	mov	r0, r3
 80216ca:	f000 f911 	bl	80218f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	2200      	movs	r2, #0
 80216d2:	601a      	str	r2, [r3, #0]
 80216d4:	e000      	b.n	80216d8 <pbuf_realloc+0xf4>
    return;
 80216d6:	bf00      	nop

}
 80216d8:	3710      	adds	r7, #16
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}
 80216de:	bf00      	nop
 80216e0:	0802aeb8 	.word	0x0802aeb8
 80216e4:	0802afd0 	.word	0x0802afd0
 80216e8:	0802af18 	.word	0x0802af18
 80216ec:	0802afe8 	.word	0x0802afe8
 80216f0:	0802b000 	.word	0x0802b000

080216f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80216f4:	b580      	push	{r7, lr}
 80216f6:	b086      	sub	sp, #24
 80216f8:	af00      	add	r7, sp, #0
 80216fa:	60f8      	str	r0, [r7, #12]
 80216fc:	60b9      	str	r1, [r7, #8]
 80216fe:	4613      	mov	r3, r2
 8021700:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8021702:	68fb      	ldr	r3, [r7, #12]
 8021704:	2b00      	cmp	r3, #0
 8021706:	d106      	bne.n	8021716 <pbuf_add_header_impl+0x22>
 8021708:	4b2b      	ldr	r3, [pc, #172]	; (80217b8 <pbuf_add_header_impl+0xc4>)
 802170a:	f240 12df 	movw	r2, #479	; 0x1df
 802170e:	492b      	ldr	r1, [pc, #172]	; (80217bc <pbuf_add_header_impl+0xc8>)
 8021710:	482b      	ldr	r0, [pc, #172]	; (80217c0 <pbuf_add_header_impl+0xcc>)
 8021712:	f003 fe25 	bl	8025360 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8021716:	68fb      	ldr	r3, [r7, #12]
 8021718:	2b00      	cmp	r3, #0
 802171a:	d003      	beq.n	8021724 <pbuf_add_header_impl+0x30>
 802171c:	68bb      	ldr	r3, [r7, #8]
 802171e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021722:	d301      	bcc.n	8021728 <pbuf_add_header_impl+0x34>
    return 1;
 8021724:	2301      	movs	r3, #1
 8021726:	e043      	b.n	80217b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8021728:	68bb      	ldr	r3, [r7, #8]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d101      	bne.n	8021732 <pbuf_add_header_impl+0x3e>
    return 0;
 802172e:	2300      	movs	r3, #0
 8021730:	e03e      	b.n	80217b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8021732:	68bb      	ldr	r3, [r7, #8]
 8021734:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8021736:	68fb      	ldr	r3, [r7, #12]
 8021738:	891a      	ldrh	r2, [r3, #8]
 802173a:	8a7b      	ldrh	r3, [r7, #18]
 802173c:	4413      	add	r3, r2
 802173e:	b29b      	uxth	r3, r3
 8021740:	8a7a      	ldrh	r2, [r7, #18]
 8021742:	429a      	cmp	r2, r3
 8021744:	d901      	bls.n	802174a <pbuf_add_header_impl+0x56>
    return 1;
 8021746:	2301      	movs	r3, #1
 8021748:	e032      	b.n	80217b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 802174a:	68fb      	ldr	r3, [r7, #12]
 802174c:	7b1b      	ldrb	r3, [r3, #12]
 802174e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8021750:	8a3b      	ldrh	r3, [r7, #16]
 8021752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021756:	2b00      	cmp	r3, #0
 8021758:	d00c      	beq.n	8021774 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 802175a:	68fb      	ldr	r3, [r7, #12]
 802175c:	685a      	ldr	r2, [r3, #4]
 802175e:	68bb      	ldr	r3, [r7, #8]
 8021760:	425b      	negs	r3, r3
 8021762:	4413      	add	r3, r2
 8021764:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8021766:	68fb      	ldr	r3, [r7, #12]
 8021768:	3310      	adds	r3, #16
 802176a:	697a      	ldr	r2, [r7, #20]
 802176c:	429a      	cmp	r2, r3
 802176e:	d20d      	bcs.n	802178c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8021770:	2301      	movs	r3, #1
 8021772:	e01d      	b.n	80217b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8021774:	79fb      	ldrb	r3, [r7, #7]
 8021776:	2b00      	cmp	r3, #0
 8021778:	d006      	beq.n	8021788 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 802177a:	68fb      	ldr	r3, [r7, #12]
 802177c:	685a      	ldr	r2, [r3, #4]
 802177e:	68bb      	ldr	r3, [r7, #8]
 8021780:	425b      	negs	r3, r3
 8021782:	4413      	add	r3, r2
 8021784:	617b      	str	r3, [r7, #20]
 8021786:	e001      	b.n	802178c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8021788:	2301      	movs	r3, #1
 802178a:	e011      	b.n	80217b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	697a      	ldr	r2, [r7, #20]
 8021790:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8021792:	68fb      	ldr	r3, [r7, #12]
 8021794:	895a      	ldrh	r2, [r3, #10]
 8021796:	8a7b      	ldrh	r3, [r7, #18]
 8021798:	4413      	add	r3, r2
 802179a:	b29a      	uxth	r2, r3
 802179c:	68fb      	ldr	r3, [r7, #12]
 802179e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80217a0:	68fb      	ldr	r3, [r7, #12]
 80217a2:	891a      	ldrh	r2, [r3, #8]
 80217a4:	8a7b      	ldrh	r3, [r7, #18]
 80217a6:	4413      	add	r3, r2
 80217a8:	b29a      	uxth	r2, r3
 80217aa:	68fb      	ldr	r3, [r7, #12]
 80217ac:	811a      	strh	r2, [r3, #8]


  return 0;
 80217ae:	2300      	movs	r3, #0
}
 80217b0:	4618      	mov	r0, r3
 80217b2:	3718      	adds	r7, #24
 80217b4:	46bd      	mov	sp, r7
 80217b6:	bd80      	pop	{r7, pc}
 80217b8:	0802aeb8 	.word	0x0802aeb8
 80217bc:	0802b01c 	.word	0x0802b01c
 80217c0:	0802af18 	.word	0x0802af18

080217c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80217c4:	b580      	push	{r7, lr}
 80217c6:	b082      	sub	sp, #8
 80217c8:	af00      	add	r7, sp, #0
 80217ca:	6078      	str	r0, [r7, #4]
 80217cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80217ce:	2200      	movs	r2, #0
 80217d0:	6839      	ldr	r1, [r7, #0]
 80217d2:	6878      	ldr	r0, [r7, #4]
 80217d4:	f7ff ff8e 	bl	80216f4 <pbuf_add_header_impl>
 80217d8:	4603      	mov	r3, r0
}
 80217da:	4618      	mov	r0, r3
 80217dc:	3708      	adds	r7, #8
 80217de:	46bd      	mov	sp, r7
 80217e0:	bd80      	pop	{r7, pc}
	...

080217e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80217e4:	b580      	push	{r7, lr}
 80217e6:	b084      	sub	sp, #16
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
 80217ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80217ee:	687b      	ldr	r3, [r7, #4]
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d106      	bne.n	8021802 <pbuf_remove_header+0x1e>
 80217f4:	4b20      	ldr	r3, [pc, #128]	; (8021878 <pbuf_remove_header+0x94>)
 80217f6:	f240 224b 	movw	r2, #587	; 0x24b
 80217fa:	4920      	ldr	r1, [pc, #128]	; (802187c <pbuf_remove_header+0x98>)
 80217fc:	4820      	ldr	r0, [pc, #128]	; (8021880 <pbuf_remove_header+0x9c>)
 80217fe:	f003 fdaf 	bl	8025360 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d003      	beq.n	8021810 <pbuf_remove_header+0x2c>
 8021808:	683b      	ldr	r3, [r7, #0]
 802180a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802180e:	d301      	bcc.n	8021814 <pbuf_remove_header+0x30>
    return 1;
 8021810:	2301      	movs	r3, #1
 8021812:	e02c      	b.n	802186e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8021814:	683b      	ldr	r3, [r7, #0]
 8021816:	2b00      	cmp	r3, #0
 8021818:	d101      	bne.n	802181e <pbuf_remove_header+0x3a>
    return 0;
 802181a:	2300      	movs	r3, #0
 802181c:	e027      	b.n	802186e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 802181e:	683b      	ldr	r3, [r7, #0]
 8021820:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	895b      	ldrh	r3, [r3, #10]
 8021826:	89fa      	ldrh	r2, [r7, #14]
 8021828:	429a      	cmp	r2, r3
 802182a:	d908      	bls.n	802183e <pbuf_remove_header+0x5a>
 802182c:	4b12      	ldr	r3, [pc, #72]	; (8021878 <pbuf_remove_header+0x94>)
 802182e:	f240 2255 	movw	r2, #597	; 0x255
 8021832:	4914      	ldr	r1, [pc, #80]	; (8021884 <pbuf_remove_header+0xa0>)
 8021834:	4812      	ldr	r0, [pc, #72]	; (8021880 <pbuf_remove_header+0x9c>)
 8021836:	f003 fd93 	bl	8025360 <iprintf>
 802183a:	2301      	movs	r3, #1
 802183c:	e017      	b.n	802186e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	685b      	ldr	r3, [r3, #4]
 8021842:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8021844:	687b      	ldr	r3, [r7, #4]
 8021846:	685a      	ldr	r2, [r3, #4]
 8021848:	683b      	ldr	r3, [r7, #0]
 802184a:	441a      	add	r2, r3
 802184c:	687b      	ldr	r3, [r7, #4]
 802184e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	895a      	ldrh	r2, [r3, #10]
 8021854:	89fb      	ldrh	r3, [r7, #14]
 8021856:	1ad3      	subs	r3, r2, r3
 8021858:	b29a      	uxth	r2, r3
 802185a:	687b      	ldr	r3, [r7, #4]
 802185c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	891a      	ldrh	r2, [r3, #8]
 8021862:	89fb      	ldrh	r3, [r7, #14]
 8021864:	1ad3      	subs	r3, r2, r3
 8021866:	b29a      	uxth	r2, r3
 8021868:	687b      	ldr	r3, [r7, #4]
 802186a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 802186c:	2300      	movs	r3, #0
}
 802186e:	4618      	mov	r0, r3
 8021870:	3710      	adds	r7, #16
 8021872:	46bd      	mov	sp, r7
 8021874:	bd80      	pop	{r7, pc}
 8021876:	bf00      	nop
 8021878:	0802aeb8 	.word	0x0802aeb8
 802187c:	0802b01c 	.word	0x0802b01c
 8021880:	0802af18 	.word	0x0802af18
 8021884:	0802b028 	.word	0x0802b028

08021888 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8021888:	b580      	push	{r7, lr}
 802188a:	b082      	sub	sp, #8
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
 8021890:	460b      	mov	r3, r1
 8021892:	807b      	strh	r3, [r7, #2]
 8021894:	4613      	mov	r3, r2
 8021896:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8021898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802189c:	2b00      	cmp	r3, #0
 802189e:	da08      	bge.n	80218b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80218a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80218a4:	425b      	negs	r3, r3
 80218a6:	4619      	mov	r1, r3
 80218a8:	6878      	ldr	r0, [r7, #4]
 80218aa:	f7ff ff9b 	bl	80217e4 <pbuf_remove_header>
 80218ae:	4603      	mov	r3, r0
 80218b0:	e007      	b.n	80218c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80218b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80218b6:	787a      	ldrb	r2, [r7, #1]
 80218b8:	4619      	mov	r1, r3
 80218ba:	6878      	ldr	r0, [r7, #4]
 80218bc:	f7ff ff1a 	bl	80216f4 <pbuf_add_header_impl>
 80218c0:	4603      	mov	r3, r0
  }
}
 80218c2:	4618      	mov	r0, r3
 80218c4:	3708      	adds	r7, #8
 80218c6:	46bd      	mov	sp, r7
 80218c8:	bd80      	pop	{r7, pc}

080218ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80218ca:	b580      	push	{r7, lr}
 80218cc:	b082      	sub	sp, #8
 80218ce:	af00      	add	r7, sp, #0
 80218d0:	6078      	str	r0, [r7, #4]
 80218d2:	460b      	mov	r3, r1
 80218d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80218d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80218da:	2201      	movs	r2, #1
 80218dc:	4619      	mov	r1, r3
 80218de:	6878      	ldr	r0, [r7, #4]
 80218e0:	f7ff ffd2 	bl	8021888 <pbuf_header_impl>
 80218e4:	4603      	mov	r3, r0
}
 80218e6:	4618      	mov	r0, r3
 80218e8:	3708      	adds	r7, #8
 80218ea:	46bd      	mov	sp, r7
 80218ec:	bd80      	pop	{r7, pc}
	...

080218f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	b086      	sub	sp, #24
 80218f4:	af00      	add	r7, sp, #0
 80218f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	2b00      	cmp	r3, #0
 80218fc:	d10b      	bne.n	8021916 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80218fe:	687b      	ldr	r3, [r7, #4]
 8021900:	2b00      	cmp	r3, #0
 8021902:	d106      	bne.n	8021912 <pbuf_free+0x22>
 8021904:	4b38      	ldr	r3, [pc, #224]	; (80219e8 <pbuf_free+0xf8>)
 8021906:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 802190a:	4938      	ldr	r1, [pc, #224]	; (80219ec <pbuf_free+0xfc>)
 802190c:	4838      	ldr	r0, [pc, #224]	; (80219f0 <pbuf_free+0x100>)
 802190e:	f003 fd27 	bl	8025360 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8021912:	2300      	movs	r3, #0
 8021914:	e063      	b.n	80219de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8021916:	2300      	movs	r3, #0
 8021918:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 802191a:	e05c      	b.n	80219d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	7b9b      	ldrb	r3, [r3, #14]
 8021920:	2b00      	cmp	r3, #0
 8021922:	d106      	bne.n	8021932 <pbuf_free+0x42>
 8021924:	4b30      	ldr	r3, [pc, #192]	; (80219e8 <pbuf_free+0xf8>)
 8021926:	f240 22f1 	movw	r2, #753	; 0x2f1
 802192a:	4932      	ldr	r1, [pc, #200]	; (80219f4 <pbuf_free+0x104>)
 802192c:	4830      	ldr	r0, [pc, #192]	; (80219f0 <pbuf_free+0x100>)
 802192e:	f003 fd17 	bl	8025360 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	7b9b      	ldrb	r3, [r3, #14]
 8021936:	3b01      	subs	r3, #1
 8021938:	b2da      	uxtb	r2, r3
 802193a:	687b      	ldr	r3, [r7, #4]
 802193c:	739a      	strb	r2, [r3, #14]
 802193e:	687b      	ldr	r3, [r7, #4]
 8021940:	7b9b      	ldrb	r3, [r3, #14]
 8021942:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8021944:	7dbb      	ldrb	r3, [r7, #22]
 8021946:	2b00      	cmp	r3, #0
 8021948:	d143      	bne.n	80219d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	7b1b      	ldrb	r3, [r3, #12]
 8021954:	f003 030f 	and.w	r3, r3, #15
 8021958:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	7b5b      	ldrb	r3, [r3, #13]
 802195e:	f003 0302 	and.w	r3, r3, #2
 8021962:	2b00      	cmp	r3, #0
 8021964:	d011      	beq.n	802198a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 802196a:	68bb      	ldr	r3, [r7, #8]
 802196c:	691b      	ldr	r3, [r3, #16]
 802196e:	2b00      	cmp	r3, #0
 8021970:	d106      	bne.n	8021980 <pbuf_free+0x90>
 8021972:	4b1d      	ldr	r3, [pc, #116]	; (80219e8 <pbuf_free+0xf8>)
 8021974:	f240 22ff 	movw	r2, #767	; 0x2ff
 8021978:	491f      	ldr	r1, [pc, #124]	; (80219f8 <pbuf_free+0x108>)
 802197a:	481d      	ldr	r0, [pc, #116]	; (80219f0 <pbuf_free+0x100>)
 802197c:	f003 fcf0 	bl	8025360 <iprintf>
        pc->custom_free_function(p);
 8021980:	68bb      	ldr	r3, [r7, #8]
 8021982:	691b      	ldr	r3, [r3, #16]
 8021984:	6878      	ldr	r0, [r7, #4]
 8021986:	4798      	blx	r3
 8021988:	e01d      	b.n	80219c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 802198a:	7bfb      	ldrb	r3, [r7, #15]
 802198c:	2b02      	cmp	r3, #2
 802198e:	d104      	bne.n	802199a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8021990:	6879      	ldr	r1, [r7, #4]
 8021992:	2005      	movs	r0, #5
 8021994:	f7ff f89c 	bl	8020ad0 <memp_free>
 8021998:	e015      	b.n	80219c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 802199a:	7bfb      	ldrb	r3, [r7, #15]
 802199c:	2b01      	cmp	r3, #1
 802199e:	d104      	bne.n	80219aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80219a0:	6879      	ldr	r1, [r7, #4]
 80219a2:	2004      	movs	r0, #4
 80219a4:	f7ff f894 	bl	8020ad0 <memp_free>
 80219a8:	e00d      	b.n	80219c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80219aa:	7bfb      	ldrb	r3, [r7, #15]
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d103      	bne.n	80219b8 <pbuf_free+0xc8>
          mem_free(p);
 80219b0:	6878      	ldr	r0, [r7, #4]
 80219b2:	f7fe fd27 	bl	8020404 <mem_free>
 80219b6:	e006      	b.n	80219c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80219b8:	4b0b      	ldr	r3, [pc, #44]	; (80219e8 <pbuf_free+0xf8>)
 80219ba:	f240 320f 	movw	r2, #783	; 0x30f
 80219be:	490f      	ldr	r1, [pc, #60]	; (80219fc <pbuf_free+0x10c>)
 80219c0:	480b      	ldr	r0, [pc, #44]	; (80219f0 <pbuf_free+0x100>)
 80219c2:	f003 fccd 	bl	8025360 <iprintf>
        }
      }
      count++;
 80219c6:	7dfb      	ldrb	r3, [r7, #23]
 80219c8:	3301      	adds	r3, #1
 80219ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80219cc:	693b      	ldr	r3, [r7, #16]
 80219ce:	607b      	str	r3, [r7, #4]
 80219d0:	e001      	b.n	80219d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80219d2:	2300      	movs	r3, #0
 80219d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80219d6:	687b      	ldr	r3, [r7, #4]
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d19f      	bne.n	802191c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80219dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80219de:	4618      	mov	r0, r3
 80219e0:	3718      	adds	r7, #24
 80219e2:	46bd      	mov	sp, r7
 80219e4:	bd80      	pop	{r7, pc}
 80219e6:	bf00      	nop
 80219e8:	0802aeb8 	.word	0x0802aeb8
 80219ec:	0802b01c 	.word	0x0802b01c
 80219f0:	0802af18 	.word	0x0802af18
 80219f4:	0802b048 	.word	0x0802b048
 80219f8:	0802b060 	.word	0x0802b060
 80219fc:	0802b084 	.word	0x0802b084

08021a00 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8021a00:	b480      	push	{r7}
 8021a02:	b085      	sub	sp, #20
 8021a04:	af00      	add	r7, sp, #0
 8021a06:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8021a08:	2300      	movs	r3, #0
 8021a0a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8021a0c:	e005      	b.n	8021a1a <pbuf_clen+0x1a>
    ++len;
 8021a0e:	89fb      	ldrh	r3, [r7, #14]
 8021a10:	3301      	adds	r3, #1
 8021a12:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	681b      	ldr	r3, [r3, #0]
 8021a18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d1f6      	bne.n	8021a0e <pbuf_clen+0xe>
  }
  return len;
 8021a20:	89fb      	ldrh	r3, [r7, #14]
}
 8021a22:	4618      	mov	r0, r3
 8021a24:	3714      	adds	r7, #20
 8021a26:	46bd      	mov	sp, r7
 8021a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a2c:	4770      	bx	lr
	...

08021a30 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8021a30:	b580      	push	{r7, lr}
 8021a32:	b082      	sub	sp, #8
 8021a34:	af00      	add	r7, sp, #0
 8021a36:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d010      	beq.n	8021a60 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	7b9b      	ldrb	r3, [r3, #14]
 8021a42:	3301      	adds	r3, #1
 8021a44:	b2da      	uxtb	r2, r3
 8021a46:	687b      	ldr	r3, [r7, #4]
 8021a48:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	7b9b      	ldrb	r3, [r3, #14]
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d106      	bne.n	8021a60 <pbuf_ref+0x30>
 8021a52:	4b05      	ldr	r3, [pc, #20]	; (8021a68 <pbuf_ref+0x38>)
 8021a54:	f240 3242 	movw	r2, #834	; 0x342
 8021a58:	4904      	ldr	r1, [pc, #16]	; (8021a6c <pbuf_ref+0x3c>)
 8021a5a:	4805      	ldr	r0, [pc, #20]	; (8021a70 <pbuf_ref+0x40>)
 8021a5c:	f003 fc80 	bl	8025360 <iprintf>
  }
}
 8021a60:	bf00      	nop
 8021a62:	3708      	adds	r7, #8
 8021a64:	46bd      	mov	sp, r7
 8021a66:	bd80      	pop	{r7, pc}
 8021a68:	0802aeb8 	.word	0x0802aeb8
 8021a6c:	0802b098 	.word	0x0802b098
 8021a70:	0802af18 	.word	0x0802af18

08021a74 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8021a74:	b580      	push	{r7, lr}
 8021a76:	b084      	sub	sp, #16
 8021a78:	af00      	add	r7, sp, #0
 8021a7a:	6078      	str	r0, [r7, #4]
 8021a7c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d002      	beq.n	8021a8a <pbuf_cat+0x16>
 8021a84:	683b      	ldr	r3, [r7, #0]
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	d107      	bne.n	8021a9a <pbuf_cat+0x26>
 8021a8a:	4b20      	ldr	r3, [pc, #128]	; (8021b0c <pbuf_cat+0x98>)
 8021a8c:	f240 3259 	movw	r2, #857	; 0x359
 8021a90:	491f      	ldr	r1, [pc, #124]	; (8021b10 <pbuf_cat+0x9c>)
 8021a92:	4820      	ldr	r0, [pc, #128]	; (8021b14 <pbuf_cat+0xa0>)
 8021a94:	f003 fc64 	bl	8025360 <iprintf>
 8021a98:	e034      	b.n	8021b04 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	60fb      	str	r3, [r7, #12]
 8021a9e:	e00a      	b.n	8021ab6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8021aa0:	68fb      	ldr	r3, [r7, #12]
 8021aa2:	891a      	ldrh	r2, [r3, #8]
 8021aa4:	683b      	ldr	r3, [r7, #0]
 8021aa6:	891b      	ldrh	r3, [r3, #8]
 8021aa8:	4413      	add	r3, r2
 8021aaa:	b29a      	uxth	r2, r3
 8021aac:	68fb      	ldr	r3, [r7, #12]
 8021aae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8021ab0:	68fb      	ldr	r3, [r7, #12]
 8021ab2:	681b      	ldr	r3, [r3, #0]
 8021ab4:	60fb      	str	r3, [r7, #12]
 8021ab6:	68fb      	ldr	r3, [r7, #12]
 8021ab8:	681b      	ldr	r3, [r3, #0]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d1f0      	bne.n	8021aa0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8021abe:	68fb      	ldr	r3, [r7, #12]
 8021ac0:	891a      	ldrh	r2, [r3, #8]
 8021ac2:	68fb      	ldr	r3, [r7, #12]
 8021ac4:	895b      	ldrh	r3, [r3, #10]
 8021ac6:	429a      	cmp	r2, r3
 8021ac8:	d006      	beq.n	8021ad8 <pbuf_cat+0x64>
 8021aca:	4b10      	ldr	r3, [pc, #64]	; (8021b0c <pbuf_cat+0x98>)
 8021acc:	f240 3262 	movw	r2, #866	; 0x362
 8021ad0:	4911      	ldr	r1, [pc, #68]	; (8021b18 <pbuf_cat+0xa4>)
 8021ad2:	4810      	ldr	r0, [pc, #64]	; (8021b14 <pbuf_cat+0xa0>)
 8021ad4:	f003 fc44 	bl	8025360 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8021ad8:	68fb      	ldr	r3, [r7, #12]
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d006      	beq.n	8021aee <pbuf_cat+0x7a>
 8021ae0:	4b0a      	ldr	r3, [pc, #40]	; (8021b0c <pbuf_cat+0x98>)
 8021ae2:	f240 3263 	movw	r2, #867	; 0x363
 8021ae6:	490d      	ldr	r1, [pc, #52]	; (8021b1c <pbuf_cat+0xa8>)
 8021ae8:	480a      	ldr	r0, [pc, #40]	; (8021b14 <pbuf_cat+0xa0>)
 8021aea:	f003 fc39 	bl	8025360 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8021aee:	68fb      	ldr	r3, [r7, #12]
 8021af0:	891a      	ldrh	r2, [r3, #8]
 8021af2:	683b      	ldr	r3, [r7, #0]
 8021af4:	891b      	ldrh	r3, [r3, #8]
 8021af6:	4413      	add	r3, r2
 8021af8:	b29a      	uxth	r2, r3
 8021afa:	68fb      	ldr	r3, [r7, #12]
 8021afc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8021afe:	68fb      	ldr	r3, [r7, #12]
 8021b00:	683a      	ldr	r2, [r7, #0]
 8021b02:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8021b04:	3710      	adds	r7, #16
 8021b06:	46bd      	mov	sp, r7
 8021b08:	bd80      	pop	{r7, pc}
 8021b0a:	bf00      	nop
 8021b0c:	0802aeb8 	.word	0x0802aeb8
 8021b10:	0802b0ac 	.word	0x0802b0ac
 8021b14:	0802af18 	.word	0x0802af18
 8021b18:	0802b0e4 	.word	0x0802b0e4
 8021b1c:	0802b114 	.word	0x0802b114

08021b20 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8021b20:	b580      	push	{r7, lr}
 8021b22:	b082      	sub	sp, #8
 8021b24:	af00      	add	r7, sp, #0
 8021b26:	6078      	str	r0, [r7, #4]
 8021b28:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8021b2a:	6839      	ldr	r1, [r7, #0]
 8021b2c:	6878      	ldr	r0, [r7, #4]
 8021b2e:	f7ff ffa1 	bl	8021a74 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8021b32:	6838      	ldr	r0, [r7, #0]
 8021b34:	f7ff ff7c 	bl	8021a30 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8021b38:	bf00      	nop
 8021b3a:	3708      	adds	r7, #8
 8021b3c:	46bd      	mov	sp, r7
 8021b3e:	bd80      	pop	{r7, pc}

08021b40 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b086      	sub	sp, #24
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	6078      	str	r0, [r7, #4]
 8021b48:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8021b4a:	2300      	movs	r3, #0
 8021b4c:	617b      	str	r3, [r7, #20]
 8021b4e:	2300      	movs	r3, #0
 8021b50:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	d008      	beq.n	8021b6a <pbuf_copy+0x2a>
 8021b58:	683b      	ldr	r3, [r7, #0]
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d005      	beq.n	8021b6a <pbuf_copy+0x2a>
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	891a      	ldrh	r2, [r3, #8]
 8021b62:	683b      	ldr	r3, [r7, #0]
 8021b64:	891b      	ldrh	r3, [r3, #8]
 8021b66:	429a      	cmp	r2, r3
 8021b68:	d209      	bcs.n	8021b7e <pbuf_copy+0x3e>
 8021b6a:	4b57      	ldr	r3, [pc, #348]	; (8021cc8 <pbuf_copy+0x188>)
 8021b6c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8021b70:	4956      	ldr	r1, [pc, #344]	; (8021ccc <pbuf_copy+0x18c>)
 8021b72:	4857      	ldr	r0, [pc, #348]	; (8021cd0 <pbuf_copy+0x190>)
 8021b74:	f003 fbf4 	bl	8025360 <iprintf>
 8021b78:	f06f 030f 	mvn.w	r3, #15
 8021b7c:	e09f      	b.n	8021cbe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8021b7e:	687b      	ldr	r3, [r7, #4]
 8021b80:	895b      	ldrh	r3, [r3, #10]
 8021b82:	461a      	mov	r2, r3
 8021b84:	697b      	ldr	r3, [r7, #20]
 8021b86:	1ad2      	subs	r2, r2, r3
 8021b88:	683b      	ldr	r3, [r7, #0]
 8021b8a:	895b      	ldrh	r3, [r3, #10]
 8021b8c:	4619      	mov	r1, r3
 8021b8e:	693b      	ldr	r3, [r7, #16]
 8021b90:	1acb      	subs	r3, r1, r3
 8021b92:	429a      	cmp	r2, r3
 8021b94:	d306      	bcc.n	8021ba4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8021b96:	683b      	ldr	r3, [r7, #0]
 8021b98:	895b      	ldrh	r3, [r3, #10]
 8021b9a:	461a      	mov	r2, r3
 8021b9c:	693b      	ldr	r3, [r7, #16]
 8021b9e:	1ad3      	subs	r3, r2, r3
 8021ba0:	60fb      	str	r3, [r7, #12]
 8021ba2:	e005      	b.n	8021bb0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	895b      	ldrh	r3, [r3, #10]
 8021ba8:	461a      	mov	r2, r3
 8021baa:	697b      	ldr	r3, [r7, #20]
 8021bac:	1ad3      	subs	r3, r2, r3
 8021bae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	685a      	ldr	r2, [r3, #4]
 8021bb4:	697b      	ldr	r3, [r7, #20]
 8021bb6:	18d0      	adds	r0, r2, r3
 8021bb8:	683b      	ldr	r3, [r7, #0]
 8021bba:	685a      	ldr	r2, [r3, #4]
 8021bbc:	693b      	ldr	r3, [r7, #16]
 8021bbe:	4413      	add	r3, r2
 8021bc0:	68fa      	ldr	r2, [r7, #12]
 8021bc2:	4619      	mov	r1, r3
 8021bc4:	f003 fabc 	bl	8025140 <memcpy>
    offset_to += len;
 8021bc8:	697a      	ldr	r2, [r7, #20]
 8021bca:	68fb      	ldr	r3, [r7, #12]
 8021bcc:	4413      	add	r3, r2
 8021bce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8021bd0:	693a      	ldr	r2, [r7, #16]
 8021bd2:	68fb      	ldr	r3, [r7, #12]
 8021bd4:	4413      	add	r3, r2
 8021bd6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	895b      	ldrh	r3, [r3, #10]
 8021bdc:	461a      	mov	r2, r3
 8021bde:	697b      	ldr	r3, [r7, #20]
 8021be0:	4293      	cmp	r3, r2
 8021be2:	d906      	bls.n	8021bf2 <pbuf_copy+0xb2>
 8021be4:	4b38      	ldr	r3, [pc, #224]	; (8021cc8 <pbuf_copy+0x188>)
 8021be6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8021bea:	493a      	ldr	r1, [pc, #232]	; (8021cd4 <pbuf_copy+0x194>)
 8021bec:	4838      	ldr	r0, [pc, #224]	; (8021cd0 <pbuf_copy+0x190>)
 8021bee:	f003 fbb7 	bl	8025360 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8021bf2:	683b      	ldr	r3, [r7, #0]
 8021bf4:	895b      	ldrh	r3, [r3, #10]
 8021bf6:	461a      	mov	r2, r3
 8021bf8:	693b      	ldr	r3, [r7, #16]
 8021bfa:	4293      	cmp	r3, r2
 8021bfc:	d906      	bls.n	8021c0c <pbuf_copy+0xcc>
 8021bfe:	4b32      	ldr	r3, [pc, #200]	; (8021cc8 <pbuf_copy+0x188>)
 8021c00:	f240 32da 	movw	r2, #986	; 0x3da
 8021c04:	4934      	ldr	r1, [pc, #208]	; (8021cd8 <pbuf_copy+0x198>)
 8021c06:	4832      	ldr	r0, [pc, #200]	; (8021cd0 <pbuf_copy+0x190>)
 8021c08:	f003 fbaa 	bl	8025360 <iprintf>
    if (offset_from >= p_from->len) {
 8021c0c:	683b      	ldr	r3, [r7, #0]
 8021c0e:	895b      	ldrh	r3, [r3, #10]
 8021c10:	461a      	mov	r2, r3
 8021c12:	693b      	ldr	r3, [r7, #16]
 8021c14:	4293      	cmp	r3, r2
 8021c16:	d304      	bcc.n	8021c22 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8021c18:	2300      	movs	r3, #0
 8021c1a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8021c1c:	683b      	ldr	r3, [r7, #0]
 8021c1e:	681b      	ldr	r3, [r3, #0]
 8021c20:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	895b      	ldrh	r3, [r3, #10]
 8021c26:	461a      	mov	r2, r3
 8021c28:	697b      	ldr	r3, [r7, #20]
 8021c2a:	4293      	cmp	r3, r2
 8021c2c:	d114      	bne.n	8021c58 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8021c2e:	2300      	movs	r3, #0
 8021c30:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	681b      	ldr	r3, [r3, #0]
 8021c36:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d10c      	bne.n	8021c58 <pbuf_copy+0x118>
 8021c3e:	683b      	ldr	r3, [r7, #0]
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	d009      	beq.n	8021c58 <pbuf_copy+0x118>
 8021c44:	4b20      	ldr	r3, [pc, #128]	; (8021cc8 <pbuf_copy+0x188>)
 8021c46:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8021c4a:	4924      	ldr	r1, [pc, #144]	; (8021cdc <pbuf_copy+0x19c>)
 8021c4c:	4820      	ldr	r0, [pc, #128]	; (8021cd0 <pbuf_copy+0x190>)
 8021c4e:	f003 fb87 	bl	8025360 <iprintf>
 8021c52:	f06f 030f 	mvn.w	r3, #15
 8021c56:	e032      	b.n	8021cbe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8021c58:	683b      	ldr	r3, [r7, #0]
 8021c5a:	2b00      	cmp	r3, #0
 8021c5c:	d013      	beq.n	8021c86 <pbuf_copy+0x146>
 8021c5e:	683b      	ldr	r3, [r7, #0]
 8021c60:	895a      	ldrh	r2, [r3, #10]
 8021c62:	683b      	ldr	r3, [r7, #0]
 8021c64:	891b      	ldrh	r3, [r3, #8]
 8021c66:	429a      	cmp	r2, r3
 8021c68:	d10d      	bne.n	8021c86 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8021c6a:	683b      	ldr	r3, [r7, #0]
 8021c6c:	681b      	ldr	r3, [r3, #0]
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	d009      	beq.n	8021c86 <pbuf_copy+0x146>
 8021c72:	4b15      	ldr	r3, [pc, #84]	; (8021cc8 <pbuf_copy+0x188>)
 8021c74:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8021c78:	4919      	ldr	r1, [pc, #100]	; (8021ce0 <pbuf_copy+0x1a0>)
 8021c7a:	4815      	ldr	r0, [pc, #84]	; (8021cd0 <pbuf_copy+0x190>)
 8021c7c:	f003 fb70 	bl	8025360 <iprintf>
 8021c80:	f06f 0305 	mvn.w	r3, #5
 8021c84:	e01b      	b.n	8021cbe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d013      	beq.n	8021cb4 <pbuf_copy+0x174>
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	895a      	ldrh	r2, [r3, #10]
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	891b      	ldrh	r3, [r3, #8]
 8021c94:	429a      	cmp	r2, r3
 8021c96:	d10d      	bne.n	8021cb4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8021c98:	687b      	ldr	r3, [r7, #4]
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d009      	beq.n	8021cb4 <pbuf_copy+0x174>
 8021ca0:	4b09      	ldr	r3, [pc, #36]	; (8021cc8 <pbuf_copy+0x188>)
 8021ca2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8021ca6:	490e      	ldr	r1, [pc, #56]	; (8021ce0 <pbuf_copy+0x1a0>)
 8021ca8:	4809      	ldr	r0, [pc, #36]	; (8021cd0 <pbuf_copy+0x190>)
 8021caa:	f003 fb59 	bl	8025360 <iprintf>
 8021cae:	f06f 0305 	mvn.w	r3, #5
 8021cb2:	e004      	b.n	8021cbe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8021cb4:	683b      	ldr	r3, [r7, #0]
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	f47f af61 	bne.w	8021b7e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8021cbc:	2300      	movs	r3, #0
}
 8021cbe:	4618      	mov	r0, r3
 8021cc0:	3718      	adds	r7, #24
 8021cc2:	46bd      	mov	sp, r7
 8021cc4:	bd80      	pop	{r7, pc}
 8021cc6:	bf00      	nop
 8021cc8:	0802aeb8 	.word	0x0802aeb8
 8021ccc:	0802b160 	.word	0x0802b160
 8021cd0:	0802af18 	.word	0x0802af18
 8021cd4:	0802b190 	.word	0x0802b190
 8021cd8:	0802b1a8 	.word	0x0802b1a8
 8021cdc:	0802b1c4 	.word	0x0802b1c4
 8021ce0:	0802b1d4 	.word	0x0802b1d4

08021ce4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8021ce4:	b580      	push	{r7, lr}
 8021ce6:	b088      	sub	sp, #32
 8021ce8:	af00      	add	r7, sp, #0
 8021cea:	60f8      	str	r0, [r7, #12]
 8021cec:	60b9      	str	r1, [r7, #8]
 8021cee:	4613      	mov	r3, r2
 8021cf0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8021cf2:	88fb      	ldrh	r3, [r7, #6]
 8021cf4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8021cfa:	68fb      	ldr	r3, [r7, #12]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d109      	bne.n	8021d14 <pbuf_take+0x30>
 8021d00:	4b3a      	ldr	r3, [pc, #232]	; (8021dec <pbuf_take+0x108>)
 8021d02:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8021d06:	493a      	ldr	r1, [pc, #232]	; (8021df0 <pbuf_take+0x10c>)
 8021d08:	483a      	ldr	r0, [pc, #232]	; (8021df4 <pbuf_take+0x110>)
 8021d0a:	f003 fb29 	bl	8025360 <iprintf>
 8021d0e:	f06f 030f 	mvn.w	r3, #15
 8021d12:	e067      	b.n	8021de4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8021d14:	68bb      	ldr	r3, [r7, #8]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d109      	bne.n	8021d2e <pbuf_take+0x4a>
 8021d1a:	4b34      	ldr	r3, [pc, #208]	; (8021dec <pbuf_take+0x108>)
 8021d1c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8021d20:	4935      	ldr	r1, [pc, #212]	; (8021df8 <pbuf_take+0x114>)
 8021d22:	4834      	ldr	r0, [pc, #208]	; (8021df4 <pbuf_take+0x110>)
 8021d24:	f003 fb1c 	bl	8025360 <iprintf>
 8021d28:	f06f 030f 	mvn.w	r3, #15
 8021d2c:	e05a      	b.n	8021de4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	891b      	ldrh	r3, [r3, #8]
 8021d32:	88fa      	ldrh	r2, [r7, #6]
 8021d34:	429a      	cmp	r2, r3
 8021d36:	d909      	bls.n	8021d4c <pbuf_take+0x68>
 8021d38:	4b2c      	ldr	r3, [pc, #176]	; (8021dec <pbuf_take+0x108>)
 8021d3a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8021d3e:	492f      	ldr	r1, [pc, #188]	; (8021dfc <pbuf_take+0x118>)
 8021d40:	482c      	ldr	r0, [pc, #176]	; (8021df4 <pbuf_take+0x110>)
 8021d42:	f003 fb0d 	bl	8025360 <iprintf>
 8021d46:	f04f 33ff 	mov.w	r3, #4294967295
 8021d4a:	e04b      	b.n	8021de4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8021d4c:	68fb      	ldr	r3, [r7, #12]
 8021d4e:	2b00      	cmp	r3, #0
 8021d50:	d007      	beq.n	8021d62 <pbuf_take+0x7e>
 8021d52:	68bb      	ldr	r3, [r7, #8]
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	d004      	beq.n	8021d62 <pbuf_take+0x7e>
 8021d58:	68fb      	ldr	r3, [r7, #12]
 8021d5a:	891b      	ldrh	r3, [r3, #8]
 8021d5c:	88fa      	ldrh	r2, [r7, #6]
 8021d5e:	429a      	cmp	r2, r3
 8021d60:	d902      	bls.n	8021d68 <pbuf_take+0x84>
    return ERR_ARG;
 8021d62:	f06f 030f 	mvn.w	r3, #15
 8021d66:	e03d      	b.n	8021de4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8021d68:	68fb      	ldr	r3, [r7, #12]
 8021d6a:	61fb      	str	r3, [r7, #28]
 8021d6c:	e028      	b.n	8021dc0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8021d6e:	69fb      	ldr	r3, [r7, #28]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d106      	bne.n	8021d82 <pbuf_take+0x9e>
 8021d74:	4b1d      	ldr	r3, [pc, #116]	; (8021dec <pbuf_take+0x108>)
 8021d76:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8021d7a:	4921      	ldr	r1, [pc, #132]	; (8021e00 <pbuf_take+0x11c>)
 8021d7c:	481d      	ldr	r0, [pc, #116]	; (8021df4 <pbuf_take+0x110>)
 8021d7e:	f003 faef 	bl	8025360 <iprintf>
    buf_copy_len = total_copy_len;
 8021d82:	697b      	ldr	r3, [r7, #20]
 8021d84:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8021d86:	69fb      	ldr	r3, [r7, #28]
 8021d88:	895b      	ldrh	r3, [r3, #10]
 8021d8a:	461a      	mov	r2, r3
 8021d8c:	69bb      	ldr	r3, [r7, #24]
 8021d8e:	4293      	cmp	r3, r2
 8021d90:	d902      	bls.n	8021d98 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8021d92:	69fb      	ldr	r3, [r7, #28]
 8021d94:	895b      	ldrh	r3, [r3, #10]
 8021d96:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8021d98:	69fb      	ldr	r3, [r7, #28]
 8021d9a:	6858      	ldr	r0, [r3, #4]
 8021d9c:	68ba      	ldr	r2, [r7, #8]
 8021d9e:	693b      	ldr	r3, [r7, #16]
 8021da0:	4413      	add	r3, r2
 8021da2:	69ba      	ldr	r2, [r7, #24]
 8021da4:	4619      	mov	r1, r3
 8021da6:	f003 f9cb 	bl	8025140 <memcpy>
    total_copy_len -= buf_copy_len;
 8021daa:	697a      	ldr	r2, [r7, #20]
 8021dac:	69bb      	ldr	r3, [r7, #24]
 8021dae:	1ad3      	subs	r3, r2, r3
 8021db0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8021db2:	693a      	ldr	r2, [r7, #16]
 8021db4:	69bb      	ldr	r3, [r7, #24]
 8021db6:	4413      	add	r3, r2
 8021db8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8021dba:	69fb      	ldr	r3, [r7, #28]
 8021dbc:	681b      	ldr	r3, [r3, #0]
 8021dbe:	61fb      	str	r3, [r7, #28]
 8021dc0:	697b      	ldr	r3, [r7, #20]
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d1d3      	bne.n	8021d6e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8021dc6:	697b      	ldr	r3, [r7, #20]
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d103      	bne.n	8021dd4 <pbuf_take+0xf0>
 8021dcc:	88fb      	ldrh	r3, [r7, #6]
 8021dce:	693a      	ldr	r2, [r7, #16]
 8021dd0:	429a      	cmp	r2, r3
 8021dd2:	d006      	beq.n	8021de2 <pbuf_take+0xfe>
 8021dd4:	4b05      	ldr	r3, [pc, #20]	; (8021dec <pbuf_take+0x108>)
 8021dd6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8021dda:	490a      	ldr	r1, [pc, #40]	; (8021e04 <pbuf_take+0x120>)
 8021ddc:	4805      	ldr	r0, [pc, #20]	; (8021df4 <pbuf_take+0x110>)
 8021dde:	f003 fabf 	bl	8025360 <iprintf>
  return ERR_OK;
 8021de2:	2300      	movs	r3, #0
}
 8021de4:	4618      	mov	r0, r3
 8021de6:	3720      	adds	r7, #32
 8021de8:	46bd      	mov	sp, r7
 8021dea:	bd80      	pop	{r7, pc}
 8021dec:	0802aeb8 	.word	0x0802aeb8
 8021df0:	0802b290 	.word	0x0802b290
 8021df4:	0802af18 	.word	0x0802af18
 8021df8:	0802b2a8 	.word	0x0802b2a8
 8021dfc:	0802b2c4 	.word	0x0802b2c4
 8021e00:	0802b2e4 	.word	0x0802b2e4
 8021e04:	0802b2fc 	.word	0x0802b2fc

08021e08 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8021e08:	b580      	push	{r7, lr}
 8021e0a:	b084      	sub	sp, #16
 8021e0c:	af00      	add	r7, sp, #0
 8021e0e:	4603      	mov	r3, r0
 8021e10:	603a      	str	r2, [r7, #0]
 8021e12:	71fb      	strb	r3, [r7, #7]
 8021e14:	460b      	mov	r3, r1
 8021e16:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8021e18:	683b      	ldr	r3, [r7, #0]
 8021e1a:	8919      	ldrh	r1, [r3, #8]
 8021e1c:	88ba      	ldrh	r2, [r7, #4]
 8021e1e:	79fb      	ldrb	r3, [r7, #7]
 8021e20:	4618      	mov	r0, r3
 8021e22:	f7ff fa83 	bl	802132c <pbuf_alloc>
 8021e26:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8021e28:	68fb      	ldr	r3, [r7, #12]
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d101      	bne.n	8021e32 <pbuf_clone+0x2a>
    return NULL;
 8021e2e:	2300      	movs	r3, #0
 8021e30:	e011      	b.n	8021e56 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8021e32:	6839      	ldr	r1, [r7, #0]
 8021e34:	68f8      	ldr	r0, [r7, #12]
 8021e36:	f7ff fe83 	bl	8021b40 <pbuf_copy>
 8021e3a:	4603      	mov	r3, r0
 8021e3c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8021e3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8021e42:	2b00      	cmp	r3, #0
 8021e44:	d006      	beq.n	8021e54 <pbuf_clone+0x4c>
 8021e46:	4b06      	ldr	r3, [pc, #24]	; (8021e60 <pbuf_clone+0x58>)
 8021e48:	f240 5224 	movw	r2, #1316	; 0x524
 8021e4c:	4905      	ldr	r1, [pc, #20]	; (8021e64 <pbuf_clone+0x5c>)
 8021e4e:	4806      	ldr	r0, [pc, #24]	; (8021e68 <pbuf_clone+0x60>)
 8021e50:	f003 fa86 	bl	8025360 <iprintf>
  return q;
 8021e54:	68fb      	ldr	r3, [r7, #12]
}
 8021e56:	4618      	mov	r0, r3
 8021e58:	3710      	adds	r7, #16
 8021e5a:	46bd      	mov	sp, r7
 8021e5c:	bd80      	pop	{r7, pc}
 8021e5e:	bf00      	nop
 8021e60:	0802aeb8 	.word	0x0802aeb8
 8021e64:	0802b32c 	.word	0x0802b32c
 8021e68:	0802af18 	.word	0x0802af18

08021e6c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b086      	sub	sp, #24
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	60f8      	str	r0, [r7, #12]
 8021e74:	60b9      	str	r1, [r7, #8]
 8021e76:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8021e78:	2003      	movs	r0, #3
 8021e7a:	f7fe fdb9 	bl	80209f0 <memp_malloc>
 8021e7e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8021e80:	693b      	ldr	r3, [r7, #16]
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d109      	bne.n	8021e9a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8021e86:	693b      	ldr	r3, [r7, #16]
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d151      	bne.n	8021f30 <sys_timeout_abs+0xc4>
 8021e8c:	4b2a      	ldr	r3, [pc, #168]	; (8021f38 <sys_timeout_abs+0xcc>)
 8021e8e:	22be      	movs	r2, #190	; 0xbe
 8021e90:	492a      	ldr	r1, [pc, #168]	; (8021f3c <sys_timeout_abs+0xd0>)
 8021e92:	482b      	ldr	r0, [pc, #172]	; (8021f40 <sys_timeout_abs+0xd4>)
 8021e94:	f003 fa64 	bl	8025360 <iprintf>
    return;
 8021e98:	e04a      	b.n	8021f30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8021e9a:	693b      	ldr	r3, [r7, #16]
 8021e9c:	2200      	movs	r2, #0
 8021e9e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8021ea0:	693b      	ldr	r3, [r7, #16]
 8021ea2:	68ba      	ldr	r2, [r7, #8]
 8021ea4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8021ea6:	693b      	ldr	r3, [r7, #16]
 8021ea8:	687a      	ldr	r2, [r7, #4]
 8021eaa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8021eac:	693b      	ldr	r3, [r7, #16]
 8021eae:	68fa      	ldr	r2, [r7, #12]
 8021eb0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8021eb2:	4b24      	ldr	r3, [pc, #144]	; (8021f44 <sys_timeout_abs+0xd8>)
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d103      	bne.n	8021ec2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8021eba:	4a22      	ldr	r2, [pc, #136]	; (8021f44 <sys_timeout_abs+0xd8>)
 8021ebc:	693b      	ldr	r3, [r7, #16]
 8021ebe:	6013      	str	r3, [r2, #0]
    return;
 8021ec0:	e037      	b.n	8021f32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8021ec2:	693b      	ldr	r3, [r7, #16]
 8021ec4:	685a      	ldr	r2, [r3, #4]
 8021ec6:	4b1f      	ldr	r3, [pc, #124]	; (8021f44 <sys_timeout_abs+0xd8>)
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	685b      	ldr	r3, [r3, #4]
 8021ecc:	1ad3      	subs	r3, r2, r3
 8021ece:	0fdb      	lsrs	r3, r3, #31
 8021ed0:	f003 0301 	and.w	r3, r3, #1
 8021ed4:	b2db      	uxtb	r3, r3
 8021ed6:	2b00      	cmp	r3, #0
 8021ed8:	d007      	beq.n	8021eea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8021eda:	4b1a      	ldr	r3, [pc, #104]	; (8021f44 <sys_timeout_abs+0xd8>)
 8021edc:	681a      	ldr	r2, [r3, #0]
 8021ede:	693b      	ldr	r3, [r7, #16]
 8021ee0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8021ee2:	4a18      	ldr	r2, [pc, #96]	; (8021f44 <sys_timeout_abs+0xd8>)
 8021ee4:	693b      	ldr	r3, [r7, #16]
 8021ee6:	6013      	str	r3, [r2, #0]
 8021ee8:	e023      	b.n	8021f32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8021eea:	4b16      	ldr	r3, [pc, #88]	; (8021f44 <sys_timeout_abs+0xd8>)
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	617b      	str	r3, [r7, #20]
 8021ef0:	e01a      	b.n	8021f28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8021ef2:	697b      	ldr	r3, [r7, #20]
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d00b      	beq.n	8021f12 <sys_timeout_abs+0xa6>
 8021efa:	693b      	ldr	r3, [r7, #16]
 8021efc:	685a      	ldr	r2, [r3, #4]
 8021efe:	697b      	ldr	r3, [r7, #20]
 8021f00:	681b      	ldr	r3, [r3, #0]
 8021f02:	685b      	ldr	r3, [r3, #4]
 8021f04:	1ad3      	subs	r3, r2, r3
 8021f06:	0fdb      	lsrs	r3, r3, #31
 8021f08:	f003 0301 	and.w	r3, r3, #1
 8021f0c:	b2db      	uxtb	r3, r3
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	d007      	beq.n	8021f22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8021f12:	697b      	ldr	r3, [r7, #20]
 8021f14:	681a      	ldr	r2, [r3, #0]
 8021f16:	693b      	ldr	r3, [r7, #16]
 8021f18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8021f1a:	697b      	ldr	r3, [r7, #20]
 8021f1c:	693a      	ldr	r2, [r7, #16]
 8021f1e:	601a      	str	r2, [r3, #0]
        break;
 8021f20:	e007      	b.n	8021f32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8021f22:	697b      	ldr	r3, [r7, #20]
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	617b      	str	r3, [r7, #20]
 8021f28:	697b      	ldr	r3, [r7, #20]
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d1e1      	bne.n	8021ef2 <sys_timeout_abs+0x86>
 8021f2e:	e000      	b.n	8021f32 <sys_timeout_abs+0xc6>
    return;
 8021f30:	bf00      	nop
      }
    }
  }
}
 8021f32:	3718      	adds	r7, #24
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd80      	pop	{r7, pc}
 8021f38:	0802b340 	.word	0x0802b340
 8021f3c:	0802b374 	.word	0x0802b374
 8021f40:	0802b3b4 	.word	0x0802b3b4
 8021f44:	20014b24 	.word	0x20014b24

08021f48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8021f48:	b580      	push	{r7, lr}
 8021f4a:	b086      	sub	sp, #24
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8021f54:	697b      	ldr	r3, [r7, #20]
 8021f56:	685b      	ldr	r3, [r3, #4]
 8021f58:	4798      	blx	r3

  now = sys_now();
 8021f5a:	f7fd fed9 	bl	801fd10 <sys_now>
 8021f5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8021f60:	697b      	ldr	r3, [r7, #20]
 8021f62:	681a      	ldr	r2, [r3, #0]
 8021f64:	4b0f      	ldr	r3, [pc, #60]	; (8021fa4 <lwip_cyclic_timer+0x5c>)
 8021f66:	681b      	ldr	r3, [r3, #0]
 8021f68:	4413      	add	r3, r2
 8021f6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8021f6c:	68fa      	ldr	r2, [r7, #12]
 8021f6e:	693b      	ldr	r3, [r7, #16]
 8021f70:	1ad3      	subs	r3, r2, r3
 8021f72:	0fdb      	lsrs	r3, r3, #31
 8021f74:	f003 0301 	and.w	r3, r3, #1
 8021f78:	b2db      	uxtb	r3, r3
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d009      	beq.n	8021f92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8021f7e:	697b      	ldr	r3, [r7, #20]
 8021f80:	681a      	ldr	r2, [r3, #0]
 8021f82:	693b      	ldr	r3, [r7, #16]
 8021f84:	4413      	add	r3, r2
 8021f86:	687a      	ldr	r2, [r7, #4]
 8021f88:	4907      	ldr	r1, [pc, #28]	; (8021fa8 <lwip_cyclic_timer+0x60>)
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	f7ff ff6e 	bl	8021e6c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8021f90:	e004      	b.n	8021f9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8021f92:	687a      	ldr	r2, [r7, #4]
 8021f94:	4904      	ldr	r1, [pc, #16]	; (8021fa8 <lwip_cyclic_timer+0x60>)
 8021f96:	68f8      	ldr	r0, [r7, #12]
 8021f98:	f7ff ff68 	bl	8021e6c <sys_timeout_abs>
}
 8021f9c:	bf00      	nop
 8021f9e:	3718      	adds	r7, #24
 8021fa0:	46bd      	mov	sp, r7
 8021fa2:	bd80      	pop	{r7, pc}
 8021fa4:	20014b28 	.word	0x20014b28
 8021fa8:	08021f49 	.word	0x08021f49

08021fac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8021fac:	b580      	push	{r7, lr}
 8021fae:	b082      	sub	sp, #8
 8021fb0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021fb2:	2300      	movs	r3, #0
 8021fb4:	607b      	str	r3, [r7, #4]
 8021fb6:	e00e      	b.n	8021fd6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8021fb8:	4a0b      	ldr	r2, [pc, #44]	; (8021fe8 <sys_timeouts_init+0x3c>)
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	00db      	lsls	r3, r3, #3
 8021fc4:	4a08      	ldr	r2, [pc, #32]	; (8021fe8 <sys_timeouts_init+0x3c>)
 8021fc6:	4413      	add	r3, r2
 8021fc8:	461a      	mov	r2, r3
 8021fca:	4908      	ldr	r1, [pc, #32]	; (8021fec <sys_timeouts_init+0x40>)
 8021fcc:	f000 f810 	bl	8021ff0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	3301      	adds	r3, #1
 8021fd4:	607b      	str	r3, [r7, #4]
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	2b01      	cmp	r3, #1
 8021fda:	d9ed      	bls.n	8021fb8 <sys_timeouts_init+0xc>
  }
}
 8021fdc:	bf00      	nop
 8021fde:	bf00      	nop
 8021fe0:	3708      	adds	r7, #8
 8021fe2:	46bd      	mov	sp, r7
 8021fe4:	bd80      	pop	{r7, pc}
 8021fe6:	bf00      	nop
 8021fe8:	0802c2f8 	.word	0x0802c2f8
 8021fec:	08021f49 	.word	0x08021f49

08021ff0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b086      	sub	sp, #24
 8021ff4:	af00      	add	r7, sp, #0
 8021ff6:	60f8      	str	r0, [r7, #12]
 8021ff8:	60b9      	str	r1, [r7, #8]
 8021ffa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022002:	d306      	bcc.n	8022012 <sys_timeout+0x22>
 8022004:	4b0a      	ldr	r3, [pc, #40]	; (8022030 <sys_timeout+0x40>)
 8022006:	f240 1229 	movw	r2, #297	; 0x129
 802200a:	490a      	ldr	r1, [pc, #40]	; (8022034 <sys_timeout+0x44>)
 802200c:	480a      	ldr	r0, [pc, #40]	; (8022038 <sys_timeout+0x48>)
 802200e:	f003 f9a7 	bl	8025360 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8022012:	f7fd fe7d 	bl	801fd10 <sys_now>
 8022016:	4602      	mov	r2, r0
 8022018:	68fb      	ldr	r3, [r7, #12]
 802201a:	4413      	add	r3, r2
 802201c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 802201e:	687a      	ldr	r2, [r7, #4]
 8022020:	68b9      	ldr	r1, [r7, #8]
 8022022:	6978      	ldr	r0, [r7, #20]
 8022024:	f7ff ff22 	bl	8021e6c <sys_timeout_abs>
#endif
}
 8022028:	bf00      	nop
 802202a:	3718      	adds	r7, #24
 802202c:	46bd      	mov	sp, r7
 802202e:	bd80      	pop	{r7, pc}
 8022030:	0802b340 	.word	0x0802b340
 8022034:	0802b3dc 	.word	0x0802b3dc
 8022038:	0802b3b4 	.word	0x0802b3b4

0802203c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 802203c:	b580      	push	{r7, lr}
 802203e:	b084      	sub	sp, #16
 8022040:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8022042:	f7fd fe65 	bl	801fd10 <sys_now>
 8022046:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8022048:	4b17      	ldr	r3, [pc, #92]	; (80220a8 <sys_check_timeouts+0x6c>)
 802204a:	681b      	ldr	r3, [r3, #0]
 802204c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 802204e:	68bb      	ldr	r3, [r7, #8]
 8022050:	2b00      	cmp	r3, #0
 8022052:	d022      	beq.n	802209a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8022054:	68bb      	ldr	r3, [r7, #8]
 8022056:	685b      	ldr	r3, [r3, #4]
 8022058:	68fa      	ldr	r2, [r7, #12]
 802205a:	1ad3      	subs	r3, r2, r3
 802205c:	0fdb      	lsrs	r3, r3, #31
 802205e:	f003 0301 	and.w	r3, r3, #1
 8022062:	b2db      	uxtb	r3, r3
 8022064:	2b00      	cmp	r3, #0
 8022066:	d11a      	bne.n	802209e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8022068:	68bb      	ldr	r3, [r7, #8]
 802206a:	681b      	ldr	r3, [r3, #0]
 802206c:	4a0e      	ldr	r2, [pc, #56]	; (80220a8 <sys_check_timeouts+0x6c>)
 802206e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8022070:	68bb      	ldr	r3, [r7, #8]
 8022072:	689b      	ldr	r3, [r3, #8]
 8022074:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8022076:	68bb      	ldr	r3, [r7, #8]
 8022078:	68db      	ldr	r3, [r3, #12]
 802207a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 802207c:	68bb      	ldr	r3, [r7, #8]
 802207e:	685b      	ldr	r3, [r3, #4]
 8022080:	4a0a      	ldr	r2, [pc, #40]	; (80220ac <sys_check_timeouts+0x70>)
 8022082:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8022084:	68b9      	ldr	r1, [r7, #8]
 8022086:	2003      	movs	r0, #3
 8022088:	f7fe fd22 	bl	8020ad0 <memp_free>
    if (handler != NULL) {
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	2b00      	cmp	r3, #0
 8022090:	d0da      	beq.n	8022048 <sys_check_timeouts+0xc>
      handler(arg);
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	6838      	ldr	r0, [r7, #0]
 8022096:	4798      	blx	r3
  do {
 8022098:	e7d6      	b.n	8022048 <sys_check_timeouts+0xc>
      return;
 802209a:	bf00      	nop
 802209c:	e000      	b.n	80220a0 <sys_check_timeouts+0x64>
      return;
 802209e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80220a0:	3710      	adds	r7, #16
 80220a2:	46bd      	mov	sp, r7
 80220a4:	bd80      	pop	{r7, pc}
 80220a6:	bf00      	nop
 80220a8:	20014b24 	.word	0x20014b24
 80220ac:	20014b28 	.word	0x20014b28

080220b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80220b0:	b580      	push	{r7, lr}
 80220b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80220b4:	f003 f9f8 	bl	80254a8 <rand>
 80220b8:	4603      	mov	r3, r0
 80220ba:	b29b      	uxth	r3, r3
 80220bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80220c0:	b29b      	uxth	r3, r3
 80220c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80220c6:	b29a      	uxth	r2, r3
 80220c8:	4b01      	ldr	r3, [pc, #4]	; (80220d0 <udp_init+0x20>)
 80220ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80220cc:	bf00      	nop
 80220ce:	bd80      	pop	{r7, pc}
 80220d0:	2000013c 	.word	0x2000013c

080220d4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80220d4:	b480      	push	{r7}
 80220d6:	b083      	sub	sp, #12
 80220d8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80220da:	2300      	movs	r3, #0
 80220dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80220de:	4b17      	ldr	r3, [pc, #92]	; (802213c <udp_new_port+0x68>)
 80220e0:	881b      	ldrh	r3, [r3, #0]
 80220e2:	1c5a      	adds	r2, r3, #1
 80220e4:	b291      	uxth	r1, r2
 80220e6:	4a15      	ldr	r2, [pc, #84]	; (802213c <udp_new_port+0x68>)
 80220e8:	8011      	strh	r1, [r2, #0]
 80220ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80220ee:	4293      	cmp	r3, r2
 80220f0:	d103      	bne.n	80220fa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80220f2:	4b12      	ldr	r3, [pc, #72]	; (802213c <udp_new_port+0x68>)
 80220f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80220f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80220fa:	4b11      	ldr	r3, [pc, #68]	; (8022140 <udp_new_port+0x6c>)
 80220fc:	681b      	ldr	r3, [r3, #0]
 80220fe:	603b      	str	r3, [r7, #0]
 8022100:	e011      	b.n	8022126 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8022102:	683b      	ldr	r3, [r7, #0]
 8022104:	8a5a      	ldrh	r2, [r3, #18]
 8022106:	4b0d      	ldr	r3, [pc, #52]	; (802213c <udp_new_port+0x68>)
 8022108:	881b      	ldrh	r3, [r3, #0]
 802210a:	429a      	cmp	r2, r3
 802210c:	d108      	bne.n	8022120 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 802210e:	88fb      	ldrh	r3, [r7, #6]
 8022110:	3301      	adds	r3, #1
 8022112:	80fb      	strh	r3, [r7, #6]
 8022114:	88fb      	ldrh	r3, [r7, #6]
 8022116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802211a:	d3e0      	bcc.n	80220de <udp_new_port+0xa>
        return 0;
 802211c:	2300      	movs	r3, #0
 802211e:	e007      	b.n	8022130 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022120:	683b      	ldr	r3, [r7, #0]
 8022122:	68db      	ldr	r3, [r3, #12]
 8022124:	603b      	str	r3, [r7, #0]
 8022126:	683b      	ldr	r3, [r7, #0]
 8022128:	2b00      	cmp	r3, #0
 802212a:	d1ea      	bne.n	8022102 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 802212c:	4b03      	ldr	r3, [pc, #12]	; (802213c <udp_new_port+0x68>)
 802212e:	881b      	ldrh	r3, [r3, #0]
}
 8022130:	4618      	mov	r0, r3
 8022132:	370c      	adds	r7, #12
 8022134:	46bd      	mov	sp, r7
 8022136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802213a:	4770      	bx	lr
 802213c:	2000013c 	.word	0x2000013c
 8022140:	20014b2c 	.word	0x20014b2c

08022144 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8022144:	b580      	push	{r7, lr}
 8022146:	b084      	sub	sp, #16
 8022148:	af00      	add	r7, sp, #0
 802214a:	60f8      	str	r0, [r7, #12]
 802214c:	60b9      	str	r1, [r7, #8]
 802214e:	4613      	mov	r3, r2
 8022150:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8022152:	68fb      	ldr	r3, [r7, #12]
 8022154:	2b00      	cmp	r3, #0
 8022156:	d105      	bne.n	8022164 <udp_input_local_match+0x20>
 8022158:	4b27      	ldr	r3, [pc, #156]	; (80221f8 <udp_input_local_match+0xb4>)
 802215a:	2287      	movs	r2, #135	; 0x87
 802215c:	4927      	ldr	r1, [pc, #156]	; (80221fc <udp_input_local_match+0xb8>)
 802215e:	4828      	ldr	r0, [pc, #160]	; (8022200 <udp_input_local_match+0xbc>)
 8022160:	f003 f8fe 	bl	8025360 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8022164:	68bb      	ldr	r3, [r7, #8]
 8022166:	2b00      	cmp	r3, #0
 8022168:	d105      	bne.n	8022176 <udp_input_local_match+0x32>
 802216a:	4b23      	ldr	r3, [pc, #140]	; (80221f8 <udp_input_local_match+0xb4>)
 802216c:	2288      	movs	r2, #136	; 0x88
 802216e:	4925      	ldr	r1, [pc, #148]	; (8022204 <udp_input_local_match+0xc0>)
 8022170:	4823      	ldr	r0, [pc, #140]	; (8022200 <udp_input_local_match+0xbc>)
 8022172:	f003 f8f5 	bl	8025360 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8022176:	68fb      	ldr	r3, [r7, #12]
 8022178:	7a1b      	ldrb	r3, [r3, #8]
 802217a:	2b00      	cmp	r3, #0
 802217c:	d00b      	beq.n	8022196 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	7a1a      	ldrb	r2, [r3, #8]
 8022182:	4b21      	ldr	r3, [pc, #132]	; (8022208 <udp_input_local_match+0xc4>)
 8022184:	685b      	ldr	r3, [r3, #4]
 8022186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802218a:	3301      	adds	r3, #1
 802218c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802218e:	429a      	cmp	r2, r3
 8022190:	d001      	beq.n	8022196 <udp_input_local_match+0x52>
    return 0;
 8022192:	2300      	movs	r3, #0
 8022194:	e02b      	b.n	80221ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8022196:	79fb      	ldrb	r3, [r7, #7]
 8022198:	2b00      	cmp	r3, #0
 802219a:	d018      	beq.n	80221ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802219c:	68fb      	ldr	r3, [r7, #12]
 802219e:	2b00      	cmp	r3, #0
 80221a0:	d013      	beq.n	80221ca <udp_input_local_match+0x86>
 80221a2:	68fb      	ldr	r3, [r7, #12]
 80221a4:	681b      	ldr	r3, [r3, #0]
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	d00f      	beq.n	80221ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80221aa:	4b17      	ldr	r3, [pc, #92]	; (8022208 <udp_input_local_match+0xc4>)
 80221ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80221ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221b2:	d00a      	beq.n	80221ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80221b4:	68fb      	ldr	r3, [r7, #12]
 80221b6:	681a      	ldr	r2, [r3, #0]
 80221b8:	4b13      	ldr	r3, [pc, #76]	; (8022208 <udp_input_local_match+0xc4>)
 80221ba:	695b      	ldr	r3, [r3, #20]
 80221bc:	405a      	eors	r2, r3
 80221be:	68bb      	ldr	r3, [r7, #8]
 80221c0:	3308      	adds	r3, #8
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d110      	bne.n	80221ec <udp_input_local_match+0xa8>
          return 1;
 80221ca:	2301      	movs	r3, #1
 80221cc:	e00f      	b.n	80221ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80221ce:	68fb      	ldr	r3, [r7, #12]
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d009      	beq.n	80221e8 <udp_input_local_match+0xa4>
 80221d4:	68fb      	ldr	r3, [r7, #12]
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d005      	beq.n	80221e8 <udp_input_local_match+0xa4>
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	681a      	ldr	r2, [r3, #0]
 80221e0:	4b09      	ldr	r3, [pc, #36]	; (8022208 <udp_input_local_match+0xc4>)
 80221e2:	695b      	ldr	r3, [r3, #20]
 80221e4:	429a      	cmp	r2, r3
 80221e6:	d101      	bne.n	80221ec <udp_input_local_match+0xa8>
        return 1;
 80221e8:	2301      	movs	r3, #1
 80221ea:	e000      	b.n	80221ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80221ec:	2300      	movs	r3, #0
}
 80221ee:	4618      	mov	r0, r3
 80221f0:	3710      	adds	r7, #16
 80221f2:	46bd      	mov	sp, r7
 80221f4:	bd80      	pop	{r7, pc}
 80221f6:	bf00      	nop
 80221f8:	0802b428 	.word	0x0802b428
 80221fc:	0802b458 	.word	0x0802b458
 8022200:	0802b47c 	.word	0x0802b47c
 8022204:	0802b4a4 	.word	0x0802b4a4
 8022208:	200114c8 	.word	0x200114c8

0802220c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 802220c:	b590      	push	{r4, r7, lr}
 802220e:	b08d      	sub	sp, #52	; 0x34
 8022210:	af02      	add	r7, sp, #8
 8022212:	6078      	str	r0, [r7, #4]
 8022214:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8022216:	2300      	movs	r3, #0
 8022218:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802221a:	687b      	ldr	r3, [r7, #4]
 802221c:	2b00      	cmp	r3, #0
 802221e:	d105      	bne.n	802222c <udp_input+0x20>
 8022220:	4b7c      	ldr	r3, [pc, #496]	; (8022414 <udp_input+0x208>)
 8022222:	22cf      	movs	r2, #207	; 0xcf
 8022224:	497c      	ldr	r1, [pc, #496]	; (8022418 <udp_input+0x20c>)
 8022226:	487d      	ldr	r0, [pc, #500]	; (802241c <udp_input+0x210>)
 8022228:	f003 f89a 	bl	8025360 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 802222c:	683b      	ldr	r3, [r7, #0]
 802222e:	2b00      	cmp	r3, #0
 8022230:	d105      	bne.n	802223e <udp_input+0x32>
 8022232:	4b78      	ldr	r3, [pc, #480]	; (8022414 <udp_input+0x208>)
 8022234:	22d0      	movs	r2, #208	; 0xd0
 8022236:	497a      	ldr	r1, [pc, #488]	; (8022420 <udp_input+0x214>)
 8022238:	4878      	ldr	r0, [pc, #480]	; (802241c <udp_input+0x210>)
 802223a:	f003 f891 	bl	8025360 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802223e:	687b      	ldr	r3, [r7, #4]
 8022240:	895b      	ldrh	r3, [r3, #10]
 8022242:	2b07      	cmp	r3, #7
 8022244:	d803      	bhi.n	802224e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8022246:	6878      	ldr	r0, [r7, #4]
 8022248:	f7ff fb52 	bl	80218f0 <pbuf_free>
    goto end;
 802224c:	e0de      	b.n	802240c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802224e:	687b      	ldr	r3, [r7, #4]
 8022250:	685b      	ldr	r3, [r3, #4]
 8022252:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8022254:	4b73      	ldr	r3, [pc, #460]	; (8022424 <udp_input+0x218>)
 8022256:	695b      	ldr	r3, [r3, #20]
 8022258:	4a72      	ldr	r2, [pc, #456]	; (8022424 <udp_input+0x218>)
 802225a:	6812      	ldr	r2, [r2, #0]
 802225c:	4611      	mov	r1, r2
 802225e:	4618      	mov	r0, r3
 8022260:	f001 ff44 	bl	80240ec <ip4_addr_isbroadcast_u32>
 8022264:	4603      	mov	r3, r0
 8022266:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8022268:	697b      	ldr	r3, [r7, #20]
 802226a:	881b      	ldrh	r3, [r3, #0]
 802226c:	b29b      	uxth	r3, r3
 802226e:	4618      	mov	r0, r3
 8022270:	f7fd ff62 	bl	8020138 <lwip_htons>
 8022274:	4603      	mov	r3, r0
 8022276:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8022278:	697b      	ldr	r3, [r7, #20]
 802227a:	885b      	ldrh	r3, [r3, #2]
 802227c:	b29b      	uxth	r3, r3
 802227e:	4618      	mov	r0, r3
 8022280:	f7fd ff5a 	bl	8020138 <lwip_htons>
 8022284:	4603      	mov	r3, r0
 8022286:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8022288:	2300      	movs	r3, #0
 802228a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 802228c:	2300      	movs	r3, #0
 802228e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8022290:	2300      	movs	r3, #0
 8022292:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022294:	4b64      	ldr	r3, [pc, #400]	; (8022428 <udp_input+0x21c>)
 8022296:	681b      	ldr	r3, [r3, #0]
 8022298:	627b      	str	r3, [r7, #36]	; 0x24
 802229a:	e054      	b.n	8022346 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 802229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802229e:	8a5b      	ldrh	r3, [r3, #18]
 80222a0:	89fa      	ldrh	r2, [r7, #14]
 80222a2:	429a      	cmp	r2, r3
 80222a4:	d14a      	bne.n	802233c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80222a6:	7cfb      	ldrb	r3, [r7, #19]
 80222a8:	461a      	mov	r2, r3
 80222aa:	6839      	ldr	r1, [r7, #0]
 80222ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80222ae:	f7ff ff49 	bl	8022144 <udp_input_local_match>
 80222b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	d041      	beq.n	802233c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80222b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ba:	7c1b      	ldrb	r3, [r3, #16]
 80222bc:	f003 0304 	and.w	r3, r3, #4
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	d11d      	bne.n	8022300 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80222c4:	69fb      	ldr	r3, [r7, #28]
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d102      	bne.n	80222d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80222ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222cc:	61fb      	str	r3, [r7, #28]
 80222ce:	e017      	b.n	8022300 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80222d0:	7cfb      	ldrb	r3, [r7, #19]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d014      	beq.n	8022300 <udp_input+0xf4>
 80222d6:	4b53      	ldr	r3, [pc, #332]	; (8022424 <udp_input+0x218>)
 80222d8:	695b      	ldr	r3, [r3, #20]
 80222da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80222de:	d10f      	bne.n	8022300 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80222e0:	69fb      	ldr	r3, [r7, #28]
 80222e2:	681a      	ldr	r2, [r3, #0]
 80222e4:	683b      	ldr	r3, [r7, #0]
 80222e6:	3304      	adds	r3, #4
 80222e8:	681b      	ldr	r3, [r3, #0]
 80222ea:	429a      	cmp	r2, r3
 80222ec:	d008      	beq.n	8022300 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80222ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222f0:	681a      	ldr	r2, [r3, #0]
 80222f2:	683b      	ldr	r3, [r7, #0]
 80222f4:	3304      	adds	r3, #4
 80222f6:	681b      	ldr	r3, [r3, #0]
 80222f8:	429a      	cmp	r2, r3
 80222fa:	d101      	bne.n	8022300 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80222fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8022300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022302:	8a9b      	ldrh	r3, [r3, #20]
 8022304:	8a3a      	ldrh	r2, [r7, #16]
 8022306:	429a      	cmp	r2, r3
 8022308:	d118      	bne.n	802233c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 802230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802230c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 802230e:	2b00      	cmp	r3, #0
 8022310:	d005      	beq.n	802231e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8022312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022314:	685a      	ldr	r2, [r3, #4]
 8022316:	4b43      	ldr	r3, [pc, #268]	; (8022424 <udp_input+0x218>)
 8022318:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802231a:	429a      	cmp	r2, r3
 802231c:	d10e      	bne.n	802233c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802231e:	6a3b      	ldr	r3, [r7, #32]
 8022320:	2b00      	cmp	r3, #0
 8022322:	d014      	beq.n	802234e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8022324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022326:	68da      	ldr	r2, [r3, #12]
 8022328:	6a3b      	ldr	r3, [r7, #32]
 802232a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802232c:	4b3e      	ldr	r3, [pc, #248]	; (8022428 <udp_input+0x21c>)
 802232e:	681a      	ldr	r2, [r3, #0]
 8022330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022332:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8022334:	4a3c      	ldr	r2, [pc, #240]	; (8022428 <udp_input+0x21c>)
 8022336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022338:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802233a:	e008      	b.n	802234e <udp_input+0x142>
      }
    }

    prev = pcb;
 802233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802233e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022342:	68db      	ldr	r3, [r3, #12]
 8022344:	627b      	str	r3, [r7, #36]	; 0x24
 8022346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022348:	2b00      	cmp	r3, #0
 802234a:	d1a7      	bne.n	802229c <udp_input+0x90>
 802234c:	e000      	b.n	8022350 <udp_input+0x144>
        break;
 802234e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8022350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022352:	2b00      	cmp	r3, #0
 8022354:	d101      	bne.n	802235a <udp_input+0x14e>
    pcb = uncon_pcb;
 8022356:	69fb      	ldr	r3, [r7, #28]
 8022358:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802235c:	2b00      	cmp	r3, #0
 802235e:	d002      	beq.n	8022366 <udp_input+0x15a>
    for_us = 1;
 8022360:	2301      	movs	r3, #1
 8022362:	76fb      	strb	r3, [r7, #27]
 8022364:	e00a      	b.n	802237c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8022366:	683b      	ldr	r3, [r7, #0]
 8022368:	3304      	adds	r3, #4
 802236a:	681a      	ldr	r2, [r3, #0]
 802236c:	4b2d      	ldr	r3, [pc, #180]	; (8022424 <udp_input+0x218>)
 802236e:	695b      	ldr	r3, [r3, #20]
 8022370:	429a      	cmp	r2, r3
 8022372:	bf0c      	ite	eq
 8022374:	2301      	moveq	r3, #1
 8022376:	2300      	movne	r3, #0
 8022378:	b2db      	uxtb	r3, r3
 802237a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 802237c:	7efb      	ldrb	r3, [r7, #27]
 802237e:	2b00      	cmp	r3, #0
 8022380:	d041      	beq.n	8022406 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8022382:	2108      	movs	r1, #8
 8022384:	6878      	ldr	r0, [r7, #4]
 8022386:	f7ff fa2d 	bl	80217e4 <pbuf_remove_header>
 802238a:	4603      	mov	r3, r0
 802238c:	2b00      	cmp	r3, #0
 802238e:	d00a      	beq.n	80223a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8022390:	4b20      	ldr	r3, [pc, #128]	; (8022414 <udp_input+0x208>)
 8022392:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8022396:	4925      	ldr	r1, [pc, #148]	; (802242c <udp_input+0x220>)
 8022398:	4820      	ldr	r0, [pc, #128]	; (802241c <udp_input+0x210>)
 802239a:	f002 ffe1 	bl	8025360 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 802239e:	6878      	ldr	r0, [r7, #4]
 80223a0:	f7ff faa6 	bl	80218f0 <pbuf_free>
      goto end;
 80223a4:	e032      	b.n	802240c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80223a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d012      	beq.n	80223d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80223ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223ae:	699b      	ldr	r3, [r3, #24]
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d00a      	beq.n	80223ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80223b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223b6:	699c      	ldr	r4, [r3, #24]
 80223b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223ba:	69d8      	ldr	r0, [r3, #28]
 80223bc:	8a3b      	ldrh	r3, [r7, #16]
 80223be:	9300      	str	r3, [sp, #0]
 80223c0:	4b1b      	ldr	r3, [pc, #108]	; (8022430 <udp_input+0x224>)
 80223c2:	687a      	ldr	r2, [r7, #4]
 80223c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80223c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80223c8:	e021      	b.n	802240e <udp_input+0x202>
        pbuf_free(p);
 80223ca:	6878      	ldr	r0, [r7, #4]
 80223cc:	f7ff fa90 	bl	80218f0 <pbuf_free>
        goto end;
 80223d0:	e01c      	b.n	802240c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80223d2:	7cfb      	ldrb	r3, [r7, #19]
 80223d4:	2b00      	cmp	r3, #0
 80223d6:	d112      	bne.n	80223fe <udp_input+0x1f2>
 80223d8:	4b12      	ldr	r3, [pc, #72]	; (8022424 <udp_input+0x218>)
 80223da:	695b      	ldr	r3, [r3, #20]
 80223dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80223e0:	2be0      	cmp	r3, #224	; 0xe0
 80223e2:	d00c      	beq.n	80223fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80223e4:	4b0f      	ldr	r3, [pc, #60]	; (8022424 <udp_input+0x218>)
 80223e6:	899b      	ldrh	r3, [r3, #12]
 80223e8:	3308      	adds	r3, #8
 80223ea:	b29b      	uxth	r3, r3
 80223ec:	b21b      	sxth	r3, r3
 80223ee:	4619      	mov	r1, r3
 80223f0:	6878      	ldr	r0, [r7, #4]
 80223f2:	f7ff fa6a 	bl	80218ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80223f6:	2103      	movs	r1, #3
 80223f8:	6878      	ldr	r0, [r7, #4]
 80223fa:	f001 fb53 	bl	8023aa4 <icmp_dest_unreach>
      pbuf_free(p);
 80223fe:	6878      	ldr	r0, [r7, #4]
 8022400:	f7ff fa76 	bl	80218f0 <pbuf_free>
  return;
 8022404:	e003      	b.n	802240e <udp_input+0x202>
    pbuf_free(p);
 8022406:	6878      	ldr	r0, [r7, #4]
 8022408:	f7ff fa72 	bl	80218f0 <pbuf_free>
  return;
 802240c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802240e:	372c      	adds	r7, #44	; 0x2c
 8022410:	46bd      	mov	sp, r7
 8022412:	bd90      	pop	{r4, r7, pc}
 8022414:	0802b428 	.word	0x0802b428
 8022418:	0802b4cc 	.word	0x0802b4cc
 802241c:	0802b47c 	.word	0x0802b47c
 8022420:	0802b4e4 	.word	0x0802b4e4
 8022424:	200114c8 	.word	0x200114c8
 8022428:	20014b2c 	.word	0x20014b2c
 802242c:	0802b500 	.word	0x0802b500
 8022430:	200114d8 	.word	0x200114d8

08022434 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8022434:	b580      	push	{r7, lr}
 8022436:	b088      	sub	sp, #32
 8022438:	af02      	add	r7, sp, #8
 802243a:	60f8      	str	r0, [r7, #12]
 802243c:	60b9      	str	r1, [r7, #8]
 802243e:	607a      	str	r2, [r7, #4]
 8022440:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8022442:	68fb      	ldr	r3, [r7, #12]
 8022444:	2b00      	cmp	r3, #0
 8022446:	d109      	bne.n	802245c <udp_sendto+0x28>
 8022448:	4b23      	ldr	r3, [pc, #140]	; (80224d8 <udp_sendto+0xa4>)
 802244a:	f44f 7206 	mov.w	r2, #536	; 0x218
 802244e:	4923      	ldr	r1, [pc, #140]	; (80224dc <udp_sendto+0xa8>)
 8022450:	4823      	ldr	r0, [pc, #140]	; (80224e0 <udp_sendto+0xac>)
 8022452:	f002 ff85 	bl	8025360 <iprintf>
 8022456:	f06f 030f 	mvn.w	r3, #15
 802245a:	e038      	b.n	80224ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 802245c:	68bb      	ldr	r3, [r7, #8]
 802245e:	2b00      	cmp	r3, #0
 8022460:	d109      	bne.n	8022476 <udp_sendto+0x42>
 8022462:	4b1d      	ldr	r3, [pc, #116]	; (80224d8 <udp_sendto+0xa4>)
 8022464:	f240 2219 	movw	r2, #537	; 0x219
 8022468:	491e      	ldr	r1, [pc, #120]	; (80224e4 <udp_sendto+0xb0>)
 802246a:	481d      	ldr	r0, [pc, #116]	; (80224e0 <udp_sendto+0xac>)
 802246c:	f002 ff78 	bl	8025360 <iprintf>
 8022470:	f06f 030f 	mvn.w	r3, #15
 8022474:	e02b      	b.n	80224ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	2b00      	cmp	r3, #0
 802247a:	d109      	bne.n	8022490 <udp_sendto+0x5c>
 802247c:	4b16      	ldr	r3, [pc, #88]	; (80224d8 <udp_sendto+0xa4>)
 802247e:	f240 221a 	movw	r2, #538	; 0x21a
 8022482:	4919      	ldr	r1, [pc, #100]	; (80224e8 <udp_sendto+0xb4>)
 8022484:	4816      	ldr	r0, [pc, #88]	; (80224e0 <udp_sendto+0xac>)
 8022486:	f002 ff6b 	bl	8025360 <iprintf>
 802248a:	f06f 030f 	mvn.w	r3, #15
 802248e:	e01e      	b.n	80224ce <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8022490:	68fb      	ldr	r3, [r7, #12]
 8022492:	7a1b      	ldrb	r3, [r3, #8]
 8022494:	2b00      	cmp	r3, #0
 8022496:	d006      	beq.n	80224a6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8022498:	68fb      	ldr	r3, [r7, #12]
 802249a:	7a1b      	ldrb	r3, [r3, #8]
 802249c:	4618      	mov	r0, r3
 802249e:	f7fe fef5 	bl	802128c <netif_get_by_index>
 80224a2:	6178      	str	r0, [r7, #20]
 80224a4:	e003      	b.n	80224ae <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80224a6:	6878      	ldr	r0, [r7, #4]
 80224a8:	f001 fb86 	bl	8023bb8 <ip4_route>
 80224ac:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80224ae:	697b      	ldr	r3, [r7, #20]
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d102      	bne.n	80224ba <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80224b4:	f06f 0303 	mvn.w	r3, #3
 80224b8:	e009      	b.n	80224ce <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80224ba:	887a      	ldrh	r2, [r7, #2]
 80224bc:	697b      	ldr	r3, [r7, #20]
 80224be:	9300      	str	r3, [sp, #0]
 80224c0:	4613      	mov	r3, r2
 80224c2:	687a      	ldr	r2, [r7, #4]
 80224c4:	68b9      	ldr	r1, [r7, #8]
 80224c6:	68f8      	ldr	r0, [r7, #12]
 80224c8:	f000 f810 	bl	80224ec <udp_sendto_if>
 80224cc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80224ce:	4618      	mov	r0, r3
 80224d0:	3718      	adds	r7, #24
 80224d2:	46bd      	mov	sp, r7
 80224d4:	bd80      	pop	{r7, pc}
 80224d6:	bf00      	nop
 80224d8:	0802b428 	.word	0x0802b428
 80224dc:	0802b54c 	.word	0x0802b54c
 80224e0:	0802b47c 	.word	0x0802b47c
 80224e4:	0802b564 	.word	0x0802b564
 80224e8:	0802b580 	.word	0x0802b580

080224ec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80224ec:	b580      	push	{r7, lr}
 80224ee:	b088      	sub	sp, #32
 80224f0:	af02      	add	r7, sp, #8
 80224f2:	60f8      	str	r0, [r7, #12]
 80224f4:	60b9      	str	r1, [r7, #8]
 80224f6:	607a      	str	r2, [r7, #4]
 80224f8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80224fa:	68fb      	ldr	r3, [r7, #12]
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	d109      	bne.n	8022514 <udp_sendto_if+0x28>
 8022500:	4b2e      	ldr	r3, [pc, #184]	; (80225bc <udp_sendto_if+0xd0>)
 8022502:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022506:	492e      	ldr	r1, [pc, #184]	; (80225c0 <udp_sendto_if+0xd4>)
 8022508:	482e      	ldr	r0, [pc, #184]	; (80225c4 <udp_sendto_if+0xd8>)
 802250a:	f002 ff29 	bl	8025360 <iprintf>
 802250e:	f06f 030f 	mvn.w	r3, #15
 8022512:	e04f      	b.n	80225b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8022514:	68bb      	ldr	r3, [r7, #8]
 8022516:	2b00      	cmp	r3, #0
 8022518:	d109      	bne.n	802252e <udp_sendto_if+0x42>
 802251a:	4b28      	ldr	r3, [pc, #160]	; (80225bc <udp_sendto_if+0xd0>)
 802251c:	f240 2281 	movw	r2, #641	; 0x281
 8022520:	4929      	ldr	r1, [pc, #164]	; (80225c8 <udp_sendto_if+0xdc>)
 8022522:	4828      	ldr	r0, [pc, #160]	; (80225c4 <udp_sendto_if+0xd8>)
 8022524:	f002 ff1c 	bl	8025360 <iprintf>
 8022528:	f06f 030f 	mvn.w	r3, #15
 802252c:	e042      	b.n	80225b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802252e:	687b      	ldr	r3, [r7, #4]
 8022530:	2b00      	cmp	r3, #0
 8022532:	d109      	bne.n	8022548 <udp_sendto_if+0x5c>
 8022534:	4b21      	ldr	r3, [pc, #132]	; (80225bc <udp_sendto_if+0xd0>)
 8022536:	f240 2282 	movw	r2, #642	; 0x282
 802253a:	4924      	ldr	r1, [pc, #144]	; (80225cc <udp_sendto_if+0xe0>)
 802253c:	4821      	ldr	r0, [pc, #132]	; (80225c4 <udp_sendto_if+0xd8>)
 802253e:	f002 ff0f 	bl	8025360 <iprintf>
 8022542:	f06f 030f 	mvn.w	r3, #15
 8022546:	e035      	b.n	80225b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8022548:	6a3b      	ldr	r3, [r7, #32]
 802254a:	2b00      	cmp	r3, #0
 802254c:	d109      	bne.n	8022562 <udp_sendto_if+0x76>
 802254e:	4b1b      	ldr	r3, [pc, #108]	; (80225bc <udp_sendto_if+0xd0>)
 8022550:	f240 2283 	movw	r2, #643	; 0x283
 8022554:	491e      	ldr	r1, [pc, #120]	; (80225d0 <udp_sendto_if+0xe4>)
 8022556:	481b      	ldr	r0, [pc, #108]	; (80225c4 <udp_sendto_if+0xd8>)
 8022558:	f002 ff02 	bl	8025360 <iprintf>
 802255c:	f06f 030f 	mvn.w	r3, #15
 8022560:	e028      	b.n	80225b4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022562:	68fb      	ldr	r3, [r7, #12]
 8022564:	2b00      	cmp	r3, #0
 8022566:	d009      	beq.n	802257c <udp_sendto_if+0x90>
 8022568:	68fb      	ldr	r3, [r7, #12]
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	2b00      	cmp	r3, #0
 802256e:	d005      	beq.n	802257c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8022570:	68fb      	ldr	r3, [r7, #12]
 8022572:	681b      	ldr	r3, [r3, #0]
 8022574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022578:	2be0      	cmp	r3, #224	; 0xe0
 802257a:	d103      	bne.n	8022584 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 802257c:	6a3b      	ldr	r3, [r7, #32]
 802257e:	3304      	adds	r3, #4
 8022580:	617b      	str	r3, [r7, #20]
 8022582:	e00b      	b.n	802259c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8022584:	68fb      	ldr	r3, [r7, #12]
 8022586:	681a      	ldr	r2, [r3, #0]
 8022588:	6a3b      	ldr	r3, [r7, #32]
 802258a:	3304      	adds	r3, #4
 802258c:	681b      	ldr	r3, [r3, #0]
 802258e:	429a      	cmp	r2, r3
 8022590:	d002      	beq.n	8022598 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8022592:	f06f 0303 	mvn.w	r3, #3
 8022596:	e00d      	b.n	80225b4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 802259c:	887a      	ldrh	r2, [r7, #2]
 802259e:	697b      	ldr	r3, [r7, #20]
 80225a0:	9301      	str	r3, [sp, #4]
 80225a2:	6a3b      	ldr	r3, [r7, #32]
 80225a4:	9300      	str	r3, [sp, #0]
 80225a6:	4613      	mov	r3, r2
 80225a8:	687a      	ldr	r2, [r7, #4]
 80225aa:	68b9      	ldr	r1, [r7, #8]
 80225ac:	68f8      	ldr	r0, [r7, #12]
 80225ae:	f000 f811 	bl	80225d4 <udp_sendto_if_src>
 80225b2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80225b4:	4618      	mov	r0, r3
 80225b6:	3718      	adds	r7, #24
 80225b8:	46bd      	mov	sp, r7
 80225ba:	bd80      	pop	{r7, pc}
 80225bc:	0802b428 	.word	0x0802b428
 80225c0:	0802b59c 	.word	0x0802b59c
 80225c4:	0802b47c 	.word	0x0802b47c
 80225c8:	0802b5b8 	.word	0x0802b5b8
 80225cc:	0802b5d4 	.word	0x0802b5d4
 80225d0:	0802b5f4 	.word	0x0802b5f4

080225d4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80225d4:	b580      	push	{r7, lr}
 80225d6:	b08c      	sub	sp, #48	; 0x30
 80225d8:	af04      	add	r7, sp, #16
 80225da:	60f8      	str	r0, [r7, #12]
 80225dc:	60b9      	str	r1, [r7, #8]
 80225de:	607a      	str	r2, [r7, #4]
 80225e0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80225e2:	68fb      	ldr	r3, [r7, #12]
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d109      	bne.n	80225fc <udp_sendto_if_src+0x28>
 80225e8:	4b65      	ldr	r3, [pc, #404]	; (8022780 <udp_sendto_if_src+0x1ac>)
 80225ea:	f240 22d1 	movw	r2, #721	; 0x2d1
 80225ee:	4965      	ldr	r1, [pc, #404]	; (8022784 <udp_sendto_if_src+0x1b0>)
 80225f0:	4865      	ldr	r0, [pc, #404]	; (8022788 <udp_sendto_if_src+0x1b4>)
 80225f2:	f002 feb5 	bl	8025360 <iprintf>
 80225f6:	f06f 030f 	mvn.w	r3, #15
 80225fa:	e0bc      	b.n	8022776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80225fc:	68bb      	ldr	r3, [r7, #8]
 80225fe:	2b00      	cmp	r3, #0
 8022600:	d109      	bne.n	8022616 <udp_sendto_if_src+0x42>
 8022602:	4b5f      	ldr	r3, [pc, #380]	; (8022780 <udp_sendto_if_src+0x1ac>)
 8022604:	f240 22d2 	movw	r2, #722	; 0x2d2
 8022608:	4960      	ldr	r1, [pc, #384]	; (802278c <udp_sendto_if_src+0x1b8>)
 802260a:	485f      	ldr	r0, [pc, #380]	; (8022788 <udp_sendto_if_src+0x1b4>)
 802260c:	f002 fea8 	bl	8025360 <iprintf>
 8022610:	f06f 030f 	mvn.w	r3, #15
 8022614:	e0af      	b.n	8022776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	2b00      	cmp	r3, #0
 802261a:	d109      	bne.n	8022630 <udp_sendto_if_src+0x5c>
 802261c:	4b58      	ldr	r3, [pc, #352]	; (8022780 <udp_sendto_if_src+0x1ac>)
 802261e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8022622:	495b      	ldr	r1, [pc, #364]	; (8022790 <udp_sendto_if_src+0x1bc>)
 8022624:	4858      	ldr	r0, [pc, #352]	; (8022788 <udp_sendto_if_src+0x1b4>)
 8022626:	f002 fe9b 	bl	8025360 <iprintf>
 802262a:	f06f 030f 	mvn.w	r3, #15
 802262e:	e0a2      	b.n	8022776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8022630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022632:	2b00      	cmp	r3, #0
 8022634:	d109      	bne.n	802264a <udp_sendto_if_src+0x76>
 8022636:	4b52      	ldr	r3, [pc, #328]	; (8022780 <udp_sendto_if_src+0x1ac>)
 8022638:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 802263c:	4955      	ldr	r1, [pc, #340]	; (8022794 <udp_sendto_if_src+0x1c0>)
 802263e:	4852      	ldr	r0, [pc, #328]	; (8022788 <udp_sendto_if_src+0x1b4>)
 8022640:	f002 fe8e 	bl	8025360 <iprintf>
 8022644:	f06f 030f 	mvn.w	r3, #15
 8022648:	e095      	b.n	8022776 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802264c:	2b00      	cmp	r3, #0
 802264e:	d109      	bne.n	8022664 <udp_sendto_if_src+0x90>
 8022650:	4b4b      	ldr	r3, [pc, #300]	; (8022780 <udp_sendto_if_src+0x1ac>)
 8022652:	f240 22d5 	movw	r2, #725	; 0x2d5
 8022656:	4950      	ldr	r1, [pc, #320]	; (8022798 <udp_sendto_if_src+0x1c4>)
 8022658:	484b      	ldr	r0, [pc, #300]	; (8022788 <udp_sendto_if_src+0x1b4>)
 802265a:	f002 fe81 	bl	8025360 <iprintf>
 802265e:	f06f 030f 	mvn.w	r3, #15
 8022662:	e088      	b.n	8022776 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8022664:	68fb      	ldr	r3, [r7, #12]
 8022666:	8a5b      	ldrh	r3, [r3, #18]
 8022668:	2b00      	cmp	r3, #0
 802266a:	d10f      	bne.n	802268c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802266c:	68f9      	ldr	r1, [r7, #12]
 802266e:	68fb      	ldr	r3, [r7, #12]
 8022670:	8a5b      	ldrh	r3, [r3, #18]
 8022672:	461a      	mov	r2, r3
 8022674:	68f8      	ldr	r0, [r7, #12]
 8022676:	f000 f893 	bl	80227a0 <udp_bind>
 802267a:	4603      	mov	r3, r0
 802267c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 802267e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8022682:	2b00      	cmp	r3, #0
 8022684:	d002      	beq.n	802268c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8022686:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802268a:	e074      	b.n	8022776 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 802268c:	68bb      	ldr	r3, [r7, #8]
 802268e:	891b      	ldrh	r3, [r3, #8]
 8022690:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8022694:	4293      	cmp	r3, r2
 8022696:	d902      	bls.n	802269e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8022698:	f04f 33ff 	mov.w	r3, #4294967295
 802269c:	e06b      	b.n	8022776 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 802269e:	2108      	movs	r1, #8
 80226a0:	68b8      	ldr	r0, [r7, #8]
 80226a2:	f7ff f88f 	bl	80217c4 <pbuf_add_header>
 80226a6:	4603      	mov	r3, r0
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	d015      	beq.n	80226d8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80226ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80226b0:	2108      	movs	r1, #8
 80226b2:	2022      	movs	r0, #34	; 0x22
 80226b4:	f7fe fe3a 	bl	802132c <pbuf_alloc>
 80226b8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80226ba:	69fb      	ldr	r3, [r7, #28]
 80226bc:	2b00      	cmp	r3, #0
 80226be:	d102      	bne.n	80226c6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80226c0:	f04f 33ff 	mov.w	r3, #4294967295
 80226c4:	e057      	b.n	8022776 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80226c6:	68bb      	ldr	r3, [r7, #8]
 80226c8:	891b      	ldrh	r3, [r3, #8]
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	d006      	beq.n	80226dc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80226ce:	68b9      	ldr	r1, [r7, #8]
 80226d0:	69f8      	ldr	r0, [r7, #28]
 80226d2:	f7ff fa25 	bl	8021b20 <pbuf_chain>
 80226d6:	e001      	b.n	80226dc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80226d8:	68bb      	ldr	r3, [r7, #8]
 80226da:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80226dc:	69fb      	ldr	r3, [r7, #28]
 80226de:	895b      	ldrh	r3, [r3, #10]
 80226e0:	2b07      	cmp	r3, #7
 80226e2:	d806      	bhi.n	80226f2 <udp_sendto_if_src+0x11e>
 80226e4:	4b26      	ldr	r3, [pc, #152]	; (8022780 <udp_sendto_if_src+0x1ac>)
 80226e6:	f240 320d 	movw	r2, #781	; 0x30d
 80226ea:	492c      	ldr	r1, [pc, #176]	; (802279c <udp_sendto_if_src+0x1c8>)
 80226ec:	4826      	ldr	r0, [pc, #152]	; (8022788 <udp_sendto_if_src+0x1b4>)
 80226ee:	f002 fe37 	bl	8025360 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80226f2:	69fb      	ldr	r3, [r7, #28]
 80226f4:	685b      	ldr	r3, [r3, #4]
 80226f6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	8a5b      	ldrh	r3, [r3, #18]
 80226fc:	4618      	mov	r0, r3
 80226fe:	f7fd fd1b 	bl	8020138 <lwip_htons>
 8022702:	4603      	mov	r3, r0
 8022704:	461a      	mov	r2, r3
 8022706:	697b      	ldr	r3, [r7, #20]
 8022708:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 802270a:	887b      	ldrh	r3, [r7, #2]
 802270c:	4618      	mov	r0, r3
 802270e:	f7fd fd13 	bl	8020138 <lwip_htons>
 8022712:	4603      	mov	r3, r0
 8022714:	461a      	mov	r2, r3
 8022716:	697b      	ldr	r3, [r7, #20]
 8022718:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 802271a:	697b      	ldr	r3, [r7, #20]
 802271c:	2200      	movs	r2, #0
 802271e:	719a      	strb	r2, [r3, #6]
 8022720:	2200      	movs	r2, #0
 8022722:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8022724:	69fb      	ldr	r3, [r7, #28]
 8022726:	891b      	ldrh	r3, [r3, #8]
 8022728:	4618      	mov	r0, r3
 802272a:	f7fd fd05 	bl	8020138 <lwip_htons>
 802272e:	4603      	mov	r3, r0
 8022730:	461a      	mov	r2, r3
 8022732:	697b      	ldr	r3, [r7, #20]
 8022734:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8022736:	2311      	movs	r3, #17
 8022738:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 802273a:	68fb      	ldr	r3, [r7, #12]
 802273c:	7adb      	ldrb	r3, [r3, #11]
 802273e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	7a9b      	ldrb	r3, [r3, #10]
 8022744:	7cb9      	ldrb	r1, [r7, #18]
 8022746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022748:	9202      	str	r2, [sp, #8]
 802274a:	7cfa      	ldrb	r2, [r7, #19]
 802274c:	9201      	str	r2, [sp, #4]
 802274e:	9300      	str	r3, [sp, #0]
 8022750:	460b      	mov	r3, r1
 8022752:	687a      	ldr	r2, [r7, #4]
 8022754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022756:	69f8      	ldr	r0, [r7, #28]
 8022758:	f001 fc0c 	bl	8023f74 <ip4_output_if_src>
 802275c:	4603      	mov	r3, r0
 802275e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8022760:	69fa      	ldr	r2, [r7, #28]
 8022762:	68bb      	ldr	r3, [r7, #8]
 8022764:	429a      	cmp	r2, r3
 8022766:	d004      	beq.n	8022772 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8022768:	69f8      	ldr	r0, [r7, #28]
 802276a:	f7ff f8c1 	bl	80218f0 <pbuf_free>
    q = NULL;
 802276e:	2300      	movs	r3, #0
 8022770:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8022772:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8022776:	4618      	mov	r0, r3
 8022778:	3720      	adds	r7, #32
 802277a:	46bd      	mov	sp, r7
 802277c:	bd80      	pop	{r7, pc}
 802277e:	bf00      	nop
 8022780:	0802b428 	.word	0x0802b428
 8022784:	0802b614 	.word	0x0802b614
 8022788:	0802b47c 	.word	0x0802b47c
 802278c:	0802b634 	.word	0x0802b634
 8022790:	0802b654 	.word	0x0802b654
 8022794:	0802b678 	.word	0x0802b678
 8022798:	0802b69c 	.word	0x0802b69c
 802279c:	0802b6c0 	.word	0x0802b6c0

080227a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80227a0:	b580      	push	{r7, lr}
 80227a2:	b086      	sub	sp, #24
 80227a4:	af00      	add	r7, sp, #0
 80227a6:	60f8      	str	r0, [r7, #12]
 80227a8:	60b9      	str	r1, [r7, #8]
 80227aa:	4613      	mov	r3, r2
 80227ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80227ae:	68bb      	ldr	r3, [r7, #8]
 80227b0:	2b00      	cmp	r3, #0
 80227b2:	d101      	bne.n	80227b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80227b4:	4b39      	ldr	r3, [pc, #228]	; (802289c <udp_bind+0xfc>)
 80227b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80227b8:	68fb      	ldr	r3, [r7, #12]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d109      	bne.n	80227d2 <udp_bind+0x32>
 80227be:	4b38      	ldr	r3, [pc, #224]	; (80228a0 <udp_bind+0x100>)
 80227c0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80227c4:	4937      	ldr	r1, [pc, #220]	; (80228a4 <udp_bind+0x104>)
 80227c6:	4838      	ldr	r0, [pc, #224]	; (80228a8 <udp_bind+0x108>)
 80227c8:	f002 fdca 	bl	8025360 <iprintf>
 80227cc:	f06f 030f 	mvn.w	r3, #15
 80227d0:	e060      	b.n	8022894 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80227d2:	2300      	movs	r3, #0
 80227d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80227d6:	4b35      	ldr	r3, [pc, #212]	; (80228ac <udp_bind+0x10c>)
 80227d8:	681b      	ldr	r3, [r3, #0]
 80227da:	617b      	str	r3, [r7, #20]
 80227dc:	e009      	b.n	80227f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80227de:	68fa      	ldr	r2, [r7, #12]
 80227e0:	697b      	ldr	r3, [r7, #20]
 80227e2:	429a      	cmp	r2, r3
 80227e4:	d102      	bne.n	80227ec <udp_bind+0x4c>
      rebind = 1;
 80227e6:	2301      	movs	r3, #1
 80227e8:	74fb      	strb	r3, [r7, #19]
      break;
 80227ea:	e005      	b.n	80227f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80227ec:	697b      	ldr	r3, [r7, #20]
 80227ee:	68db      	ldr	r3, [r3, #12]
 80227f0:	617b      	str	r3, [r7, #20]
 80227f2:	697b      	ldr	r3, [r7, #20]
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	d1f2      	bne.n	80227de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80227f8:	88fb      	ldrh	r3, [r7, #6]
 80227fa:	2b00      	cmp	r3, #0
 80227fc:	d109      	bne.n	8022812 <udp_bind+0x72>
    port = udp_new_port();
 80227fe:	f7ff fc69 	bl	80220d4 <udp_new_port>
 8022802:	4603      	mov	r3, r0
 8022804:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8022806:	88fb      	ldrh	r3, [r7, #6]
 8022808:	2b00      	cmp	r3, #0
 802280a:	d12c      	bne.n	8022866 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 802280c:	f06f 0307 	mvn.w	r3, #7
 8022810:	e040      	b.n	8022894 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022812:	4b26      	ldr	r3, [pc, #152]	; (80228ac <udp_bind+0x10c>)
 8022814:	681b      	ldr	r3, [r3, #0]
 8022816:	617b      	str	r3, [r7, #20]
 8022818:	e022      	b.n	8022860 <udp_bind+0xc0>
      if (pcb != ipcb) {
 802281a:	68fa      	ldr	r2, [r7, #12]
 802281c:	697b      	ldr	r3, [r7, #20]
 802281e:	429a      	cmp	r2, r3
 8022820:	d01b      	beq.n	802285a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8022822:	697b      	ldr	r3, [r7, #20]
 8022824:	8a5b      	ldrh	r3, [r3, #18]
 8022826:	88fa      	ldrh	r2, [r7, #6]
 8022828:	429a      	cmp	r2, r3
 802282a:	d116      	bne.n	802285a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802282c:	697b      	ldr	r3, [r7, #20]
 802282e:	681a      	ldr	r2, [r3, #0]
 8022830:	68bb      	ldr	r3, [r7, #8]
 8022832:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8022834:	429a      	cmp	r2, r3
 8022836:	d00d      	beq.n	8022854 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022838:	68bb      	ldr	r3, [r7, #8]
 802283a:	2b00      	cmp	r3, #0
 802283c:	d00a      	beq.n	8022854 <udp_bind+0xb4>
 802283e:	68bb      	ldr	r3, [r7, #8]
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	2b00      	cmp	r3, #0
 8022844:	d006      	beq.n	8022854 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8022846:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022848:	2b00      	cmp	r3, #0
 802284a:	d003      	beq.n	8022854 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802284c:	697b      	ldr	r3, [r7, #20]
 802284e:	681b      	ldr	r3, [r3, #0]
 8022850:	2b00      	cmp	r3, #0
 8022852:	d102      	bne.n	802285a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8022854:	f06f 0307 	mvn.w	r3, #7
 8022858:	e01c      	b.n	8022894 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802285a:	697b      	ldr	r3, [r7, #20]
 802285c:	68db      	ldr	r3, [r3, #12]
 802285e:	617b      	str	r3, [r7, #20]
 8022860:	697b      	ldr	r3, [r7, #20]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d1d9      	bne.n	802281a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8022866:	68bb      	ldr	r3, [r7, #8]
 8022868:	2b00      	cmp	r3, #0
 802286a:	d002      	beq.n	8022872 <udp_bind+0xd2>
 802286c:	68bb      	ldr	r3, [r7, #8]
 802286e:	681b      	ldr	r3, [r3, #0]
 8022870:	e000      	b.n	8022874 <udp_bind+0xd4>
 8022872:	2300      	movs	r3, #0
 8022874:	68fa      	ldr	r2, [r7, #12]
 8022876:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8022878:	68fb      	ldr	r3, [r7, #12]
 802287a:	88fa      	ldrh	r2, [r7, #6]
 802287c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 802287e:	7cfb      	ldrb	r3, [r7, #19]
 8022880:	2b00      	cmp	r3, #0
 8022882:	d106      	bne.n	8022892 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8022884:	4b09      	ldr	r3, [pc, #36]	; (80228ac <udp_bind+0x10c>)
 8022886:	681a      	ldr	r2, [r3, #0]
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 802288c:	4a07      	ldr	r2, [pc, #28]	; (80228ac <udp_bind+0x10c>)
 802288e:	68fb      	ldr	r3, [r7, #12]
 8022890:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8022892:	2300      	movs	r3, #0
}
 8022894:	4618      	mov	r0, r3
 8022896:	3718      	adds	r7, #24
 8022898:	46bd      	mov	sp, r7
 802289a:	bd80      	pop	{r7, pc}
 802289c:	0802c308 	.word	0x0802c308
 80228a0:	0802b428 	.word	0x0802b428
 80228a4:	0802b6f0 	.word	0x0802b6f0
 80228a8:	0802b47c 	.word	0x0802b47c
 80228ac:	20014b2c 	.word	0x20014b2c

080228b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80228b0:	b580      	push	{r7, lr}
 80228b2:	b084      	sub	sp, #16
 80228b4:	af00      	add	r7, sp, #0
 80228b6:	60f8      	str	r0, [r7, #12]
 80228b8:	60b9      	str	r1, [r7, #8]
 80228ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80228bc:	68fb      	ldr	r3, [r7, #12]
 80228be:	2b00      	cmp	r3, #0
 80228c0:	d107      	bne.n	80228d2 <udp_recv+0x22>
 80228c2:	4b08      	ldr	r3, [pc, #32]	; (80228e4 <udp_recv+0x34>)
 80228c4:	f240 428a 	movw	r2, #1162	; 0x48a
 80228c8:	4907      	ldr	r1, [pc, #28]	; (80228e8 <udp_recv+0x38>)
 80228ca:	4808      	ldr	r0, [pc, #32]	; (80228ec <udp_recv+0x3c>)
 80228cc:	f002 fd48 	bl	8025360 <iprintf>
 80228d0:	e005      	b.n	80228de <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80228d2:	68fb      	ldr	r3, [r7, #12]
 80228d4:	68ba      	ldr	r2, [r7, #8]
 80228d6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	687a      	ldr	r2, [r7, #4]
 80228dc:	61da      	str	r2, [r3, #28]
}
 80228de:	3710      	adds	r7, #16
 80228e0:	46bd      	mov	sp, r7
 80228e2:	bd80      	pop	{r7, pc}
 80228e4:	0802b428 	.word	0x0802b428
 80228e8:	0802b75c 	.word	0x0802b75c
 80228ec:	0802b47c 	.word	0x0802b47c

080228f0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80228f0:	b580      	push	{r7, lr}
 80228f2:	b084      	sub	sp, #16
 80228f4:	af00      	add	r7, sp, #0
 80228f6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	d107      	bne.n	802290e <udp_remove+0x1e>
 80228fe:	4b19      	ldr	r3, [pc, #100]	; (8022964 <udp_remove+0x74>)
 8022900:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8022904:	4918      	ldr	r1, [pc, #96]	; (8022968 <udp_remove+0x78>)
 8022906:	4819      	ldr	r0, [pc, #100]	; (802296c <udp_remove+0x7c>)
 8022908:	f002 fd2a 	bl	8025360 <iprintf>
 802290c:	e026      	b.n	802295c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 802290e:	4b18      	ldr	r3, [pc, #96]	; (8022970 <udp_remove+0x80>)
 8022910:	681b      	ldr	r3, [r3, #0]
 8022912:	687a      	ldr	r2, [r7, #4]
 8022914:	429a      	cmp	r2, r3
 8022916:	d105      	bne.n	8022924 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8022918:	4b15      	ldr	r3, [pc, #84]	; (8022970 <udp_remove+0x80>)
 802291a:	681b      	ldr	r3, [r3, #0]
 802291c:	68db      	ldr	r3, [r3, #12]
 802291e:	4a14      	ldr	r2, [pc, #80]	; (8022970 <udp_remove+0x80>)
 8022920:	6013      	str	r3, [r2, #0]
 8022922:	e017      	b.n	8022954 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022924:	4b12      	ldr	r3, [pc, #72]	; (8022970 <udp_remove+0x80>)
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	60fb      	str	r3, [r7, #12]
 802292a:	e010      	b.n	802294e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 802292c:	68fb      	ldr	r3, [r7, #12]
 802292e:	68db      	ldr	r3, [r3, #12]
 8022930:	2b00      	cmp	r3, #0
 8022932:	d009      	beq.n	8022948 <udp_remove+0x58>
 8022934:	68fb      	ldr	r3, [r7, #12]
 8022936:	68db      	ldr	r3, [r3, #12]
 8022938:	687a      	ldr	r2, [r7, #4]
 802293a:	429a      	cmp	r2, r3
 802293c:	d104      	bne.n	8022948 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 802293e:	687b      	ldr	r3, [r7, #4]
 8022940:	68da      	ldr	r2, [r3, #12]
 8022942:	68fb      	ldr	r3, [r7, #12]
 8022944:	60da      	str	r2, [r3, #12]
        break;
 8022946:	e005      	b.n	8022954 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022948:	68fb      	ldr	r3, [r7, #12]
 802294a:	68db      	ldr	r3, [r3, #12]
 802294c:	60fb      	str	r3, [r7, #12]
 802294e:	68fb      	ldr	r3, [r7, #12]
 8022950:	2b00      	cmp	r3, #0
 8022952:	d1eb      	bne.n	802292c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8022954:	6879      	ldr	r1, [r7, #4]
 8022956:	2000      	movs	r0, #0
 8022958:	f7fe f8ba 	bl	8020ad0 <memp_free>
}
 802295c:	3710      	adds	r7, #16
 802295e:	46bd      	mov	sp, r7
 8022960:	bd80      	pop	{r7, pc}
 8022962:	bf00      	nop
 8022964:	0802b428 	.word	0x0802b428
 8022968:	0802b774 	.word	0x0802b774
 802296c:	0802b47c 	.word	0x0802b47c
 8022970:	20014b2c 	.word	0x20014b2c

08022974 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8022974:	b580      	push	{r7, lr}
 8022976:	b082      	sub	sp, #8
 8022978:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802297a:	2000      	movs	r0, #0
 802297c:	f7fe f838 	bl	80209f0 <memp_malloc>
 8022980:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8022982:	687b      	ldr	r3, [r7, #4]
 8022984:	2b00      	cmp	r3, #0
 8022986:	d007      	beq.n	8022998 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8022988:	2220      	movs	r2, #32
 802298a:	2100      	movs	r1, #0
 802298c:	6878      	ldr	r0, [r7, #4]
 802298e:	f002 fbff 	bl	8025190 <memset>
    pcb->ttl = UDP_TTL;
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	22ff      	movs	r2, #255	; 0xff
 8022996:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8022998:	687b      	ldr	r3, [r7, #4]
}
 802299a:	4618      	mov	r0, r3
 802299c:	3708      	adds	r7, #8
 802299e:	46bd      	mov	sp, r7
 80229a0:	bd80      	pop	{r7, pc}
	...

080229a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80229a4:	b480      	push	{r7}
 80229a6:	b085      	sub	sp, #20
 80229a8:	af00      	add	r7, sp, #0
 80229aa:	6078      	str	r0, [r7, #4]
 80229ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80229ae:	687b      	ldr	r3, [r7, #4]
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	d01e      	beq.n	80229f2 <udp_netif_ip_addr_changed+0x4e>
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	681b      	ldr	r3, [r3, #0]
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d01a      	beq.n	80229f2 <udp_netif_ip_addr_changed+0x4e>
 80229bc:	683b      	ldr	r3, [r7, #0]
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d017      	beq.n	80229f2 <udp_netif_ip_addr_changed+0x4e>
 80229c2:	683b      	ldr	r3, [r7, #0]
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d013      	beq.n	80229f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80229ca:	4b0d      	ldr	r3, [pc, #52]	; (8022a00 <udp_netif_ip_addr_changed+0x5c>)
 80229cc:	681b      	ldr	r3, [r3, #0]
 80229ce:	60fb      	str	r3, [r7, #12]
 80229d0:	e00c      	b.n	80229ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80229d2:	68fb      	ldr	r3, [r7, #12]
 80229d4:	681a      	ldr	r2, [r3, #0]
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	429a      	cmp	r2, r3
 80229dc:	d103      	bne.n	80229e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80229de:	683b      	ldr	r3, [r7, #0]
 80229e0:	681a      	ldr	r2, [r3, #0]
 80229e2:	68fb      	ldr	r3, [r7, #12]
 80229e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80229e6:	68fb      	ldr	r3, [r7, #12]
 80229e8:	68db      	ldr	r3, [r3, #12]
 80229ea:	60fb      	str	r3, [r7, #12]
 80229ec:	68fb      	ldr	r3, [r7, #12]
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d1ef      	bne.n	80229d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80229f2:	bf00      	nop
 80229f4:	3714      	adds	r7, #20
 80229f6:	46bd      	mov	sp, r7
 80229f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229fc:	4770      	bx	lr
 80229fe:	bf00      	nop
 8022a00:	20014b2c 	.word	0x20014b2c

08022a04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8022a04:	b580      	push	{r7, lr}
 8022a06:	b082      	sub	sp, #8
 8022a08:	af00      	add	r7, sp, #0
 8022a0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8022a0c:	4915      	ldr	r1, [pc, #84]	; (8022a64 <etharp_free_entry+0x60>)
 8022a0e:	687a      	ldr	r2, [r7, #4]
 8022a10:	4613      	mov	r3, r2
 8022a12:	005b      	lsls	r3, r3, #1
 8022a14:	4413      	add	r3, r2
 8022a16:	00db      	lsls	r3, r3, #3
 8022a18:	440b      	add	r3, r1
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d013      	beq.n	8022a48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8022a20:	4910      	ldr	r1, [pc, #64]	; (8022a64 <etharp_free_entry+0x60>)
 8022a22:	687a      	ldr	r2, [r7, #4]
 8022a24:	4613      	mov	r3, r2
 8022a26:	005b      	lsls	r3, r3, #1
 8022a28:	4413      	add	r3, r2
 8022a2a:	00db      	lsls	r3, r3, #3
 8022a2c:	440b      	add	r3, r1
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	4618      	mov	r0, r3
 8022a32:	f7fe ff5d 	bl	80218f0 <pbuf_free>
    arp_table[i].q = NULL;
 8022a36:	490b      	ldr	r1, [pc, #44]	; (8022a64 <etharp_free_entry+0x60>)
 8022a38:	687a      	ldr	r2, [r7, #4]
 8022a3a:	4613      	mov	r3, r2
 8022a3c:	005b      	lsls	r3, r3, #1
 8022a3e:	4413      	add	r3, r2
 8022a40:	00db      	lsls	r3, r3, #3
 8022a42:	440b      	add	r3, r1
 8022a44:	2200      	movs	r2, #0
 8022a46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8022a48:	4906      	ldr	r1, [pc, #24]	; (8022a64 <etharp_free_entry+0x60>)
 8022a4a:	687a      	ldr	r2, [r7, #4]
 8022a4c:	4613      	mov	r3, r2
 8022a4e:	005b      	lsls	r3, r3, #1
 8022a50:	4413      	add	r3, r2
 8022a52:	00db      	lsls	r3, r3, #3
 8022a54:	440b      	add	r3, r1
 8022a56:	3314      	adds	r3, #20
 8022a58:	2200      	movs	r2, #0
 8022a5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8022a5c:	bf00      	nop
 8022a5e:	3708      	adds	r7, #8
 8022a60:	46bd      	mov	sp, r7
 8022a62:	bd80      	pop	{r7, pc}
 8022a64:	20014b30 	.word	0x20014b30

08022a68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8022a68:	b580      	push	{r7, lr}
 8022a6a:	b082      	sub	sp, #8
 8022a6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022a6e:	2300      	movs	r3, #0
 8022a70:	607b      	str	r3, [r7, #4]
 8022a72:	e096      	b.n	8022ba2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8022a74:	494f      	ldr	r1, [pc, #316]	; (8022bb4 <etharp_tmr+0x14c>)
 8022a76:	687a      	ldr	r2, [r7, #4]
 8022a78:	4613      	mov	r3, r2
 8022a7a:	005b      	lsls	r3, r3, #1
 8022a7c:	4413      	add	r3, r2
 8022a7e:	00db      	lsls	r3, r3, #3
 8022a80:	440b      	add	r3, r1
 8022a82:	3314      	adds	r3, #20
 8022a84:	781b      	ldrb	r3, [r3, #0]
 8022a86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8022a88:	78fb      	ldrb	r3, [r7, #3]
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	f000 8086 	beq.w	8022b9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8022a90:	4948      	ldr	r1, [pc, #288]	; (8022bb4 <etharp_tmr+0x14c>)
 8022a92:	687a      	ldr	r2, [r7, #4]
 8022a94:	4613      	mov	r3, r2
 8022a96:	005b      	lsls	r3, r3, #1
 8022a98:	4413      	add	r3, r2
 8022a9a:	00db      	lsls	r3, r3, #3
 8022a9c:	440b      	add	r3, r1
 8022a9e:	3312      	adds	r3, #18
 8022aa0:	881b      	ldrh	r3, [r3, #0]
 8022aa2:	3301      	adds	r3, #1
 8022aa4:	b298      	uxth	r0, r3
 8022aa6:	4943      	ldr	r1, [pc, #268]	; (8022bb4 <etharp_tmr+0x14c>)
 8022aa8:	687a      	ldr	r2, [r7, #4]
 8022aaa:	4613      	mov	r3, r2
 8022aac:	005b      	lsls	r3, r3, #1
 8022aae:	4413      	add	r3, r2
 8022ab0:	00db      	lsls	r3, r3, #3
 8022ab2:	440b      	add	r3, r1
 8022ab4:	3312      	adds	r3, #18
 8022ab6:	4602      	mov	r2, r0
 8022ab8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022aba:	493e      	ldr	r1, [pc, #248]	; (8022bb4 <etharp_tmr+0x14c>)
 8022abc:	687a      	ldr	r2, [r7, #4]
 8022abe:	4613      	mov	r3, r2
 8022ac0:	005b      	lsls	r3, r3, #1
 8022ac2:	4413      	add	r3, r2
 8022ac4:	00db      	lsls	r3, r3, #3
 8022ac6:	440b      	add	r3, r1
 8022ac8:	3312      	adds	r3, #18
 8022aca:	881b      	ldrh	r3, [r3, #0]
 8022acc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8022ad0:	d215      	bcs.n	8022afe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022ad2:	4938      	ldr	r1, [pc, #224]	; (8022bb4 <etharp_tmr+0x14c>)
 8022ad4:	687a      	ldr	r2, [r7, #4]
 8022ad6:	4613      	mov	r3, r2
 8022ad8:	005b      	lsls	r3, r3, #1
 8022ada:	4413      	add	r3, r2
 8022adc:	00db      	lsls	r3, r3, #3
 8022ade:	440b      	add	r3, r1
 8022ae0:	3314      	adds	r3, #20
 8022ae2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022ae4:	2b01      	cmp	r3, #1
 8022ae6:	d10e      	bne.n	8022b06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8022ae8:	4932      	ldr	r1, [pc, #200]	; (8022bb4 <etharp_tmr+0x14c>)
 8022aea:	687a      	ldr	r2, [r7, #4]
 8022aec:	4613      	mov	r3, r2
 8022aee:	005b      	lsls	r3, r3, #1
 8022af0:	4413      	add	r3, r2
 8022af2:	00db      	lsls	r3, r3, #3
 8022af4:	440b      	add	r3, r1
 8022af6:	3312      	adds	r3, #18
 8022af8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022afa:	2b04      	cmp	r3, #4
 8022afc:	d903      	bls.n	8022b06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8022afe:	6878      	ldr	r0, [r7, #4]
 8022b00:	f7ff ff80 	bl	8022a04 <etharp_free_entry>
 8022b04:	e04a      	b.n	8022b9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8022b06:	492b      	ldr	r1, [pc, #172]	; (8022bb4 <etharp_tmr+0x14c>)
 8022b08:	687a      	ldr	r2, [r7, #4]
 8022b0a:	4613      	mov	r3, r2
 8022b0c:	005b      	lsls	r3, r3, #1
 8022b0e:	4413      	add	r3, r2
 8022b10:	00db      	lsls	r3, r3, #3
 8022b12:	440b      	add	r3, r1
 8022b14:	3314      	adds	r3, #20
 8022b16:	781b      	ldrb	r3, [r3, #0]
 8022b18:	2b03      	cmp	r3, #3
 8022b1a:	d10a      	bne.n	8022b32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8022b1c:	4925      	ldr	r1, [pc, #148]	; (8022bb4 <etharp_tmr+0x14c>)
 8022b1e:	687a      	ldr	r2, [r7, #4]
 8022b20:	4613      	mov	r3, r2
 8022b22:	005b      	lsls	r3, r3, #1
 8022b24:	4413      	add	r3, r2
 8022b26:	00db      	lsls	r3, r3, #3
 8022b28:	440b      	add	r3, r1
 8022b2a:	3314      	adds	r3, #20
 8022b2c:	2204      	movs	r2, #4
 8022b2e:	701a      	strb	r2, [r3, #0]
 8022b30:	e034      	b.n	8022b9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8022b32:	4920      	ldr	r1, [pc, #128]	; (8022bb4 <etharp_tmr+0x14c>)
 8022b34:	687a      	ldr	r2, [r7, #4]
 8022b36:	4613      	mov	r3, r2
 8022b38:	005b      	lsls	r3, r3, #1
 8022b3a:	4413      	add	r3, r2
 8022b3c:	00db      	lsls	r3, r3, #3
 8022b3e:	440b      	add	r3, r1
 8022b40:	3314      	adds	r3, #20
 8022b42:	781b      	ldrb	r3, [r3, #0]
 8022b44:	2b04      	cmp	r3, #4
 8022b46:	d10a      	bne.n	8022b5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8022b48:	491a      	ldr	r1, [pc, #104]	; (8022bb4 <etharp_tmr+0x14c>)
 8022b4a:	687a      	ldr	r2, [r7, #4]
 8022b4c:	4613      	mov	r3, r2
 8022b4e:	005b      	lsls	r3, r3, #1
 8022b50:	4413      	add	r3, r2
 8022b52:	00db      	lsls	r3, r3, #3
 8022b54:	440b      	add	r3, r1
 8022b56:	3314      	adds	r3, #20
 8022b58:	2202      	movs	r2, #2
 8022b5a:	701a      	strb	r2, [r3, #0]
 8022b5c:	e01e      	b.n	8022b9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022b5e:	4915      	ldr	r1, [pc, #84]	; (8022bb4 <etharp_tmr+0x14c>)
 8022b60:	687a      	ldr	r2, [r7, #4]
 8022b62:	4613      	mov	r3, r2
 8022b64:	005b      	lsls	r3, r3, #1
 8022b66:	4413      	add	r3, r2
 8022b68:	00db      	lsls	r3, r3, #3
 8022b6a:	440b      	add	r3, r1
 8022b6c:	3314      	adds	r3, #20
 8022b6e:	781b      	ldrb	r3, [r3, #0]
 8022b70:	2b01      	cmp	r3, #1
 8022b72:	d113      	bne.n	8022b9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8022b74:	490f      	ldr	r1, [pc, #60]	; (8022bb4 <etharp_tmr+0x14c>)
 8022b76:	687a      	ldr	r2, [r7, #4]
 8022b78:	4613      	mov	r3, r2
 8022b7a:	005b      	lsls	r3, r3, #1
 8022b7c:	4413      	add	r3, r2
 8022b7e:	00db      	lsls	r3, r3, #3
 8022b80:	440b      	add	r3, r1
 8022b82:	3308      	adds	r3, #8
 8022b84:	6818      	ldr	r0, [r3, #0]
 8022b86:	687a      	ldr	r2, [r7, #4]
 8022b88:	4613      	mov	r3, r2
 8022b8a:	005b      	lsls	r3, r3, #1
 8022b8c:	4413      	add	r3, r2
 8022b8e:	00db      	lsls	r3, r3, #3
 8022b90:	4a08      	ldr	r2, [pc, #32]	; (8022bb4 <etharp_tmr+0x14c>)
 8022b92:	4413      	add	r3, r2
 8022b94:	3304      	adds	r3, #4
 8022b96:	4619      	mov	r1, r3
 8022b98:	f000 fe6e 	bl	8023878 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	3301      	adds	r3, #1
 8022ba0:	607b      	str	r3, [r7, #4]
 8022ba2:	687b      	ldr	r3, [r7, #4]
 8022ba4:	2b31      	cmp	r3, #49	; 0x31
 8022ba6:	f77f af65 	ble.w	8022a74 <etharp_tmr+0xc>
      }
    }
  }
}
 8022baa:	bf00      	nop
 8022bac:	bf00      	nop
 8022bae:	3708      	adds	r7, #8
 8022bb0:	46bd      	mov	sp, r7
 8022bb2:	bd80      	pop	{r7, pc}
 8022bb4:	20014b30 	.word	0x20014b30

08022bb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8022bb8:	b580      	push	{r7, lr}
 8022bba:	b08a      	sub	sp, #40	; 0x28
 8022bbc:	af00      	add	r7, sp, #0
 8022bbe:	60f8      	str	r0, [r7, #12]
 8022bc0:	460b      	mov	r3, r1
 8022bc2:	607a      	str	r2, [r7, #4]
 8022bc4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8022bc6:	2332      	movs	r3, #50	; 0x32
 8022bc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8022bca:	2332      	movs	r3, #50	; 0x32
 8022bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8022bce:	2332      	movs	r3, #50	; 0x32
 8022bd0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8022bd6:	2332      	movs	r3, #50	; 0x32
 8022bd8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8022bda:	2300      	movs	r3, #0
 8022bdc:	83bb      	strh	r3, [r7, #28]
 8022bde:	2300      	movs	r3, #0
 8022be0:	837b      	strh	r3, [r7, #26]
 8022be2:	2300      	movs	r3, #0
 8022be4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022be6:	2300      	movs	r3, #0
 8022be8:	843b      	strh	r3, [r7, #32]
 8022bea:	e0ae      	b.n	8022d4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8022bec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022bf0:	49a6      	ldr	r1, [pc, #664]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022bf2:	4613      	mov	r3, r2
 8022bf4:	005b      	lsls	r3, r3, #1
 8022bf6:	4413      	add	r3, r2
 8022bf8:	00db      	lsls	r3, r3, #3
 8022bfa:	440b      	add	r3, r1
 8022bfc:	3314      	adds	r3, #20
 8022bfe:	781b      	ldrb	r3, [r3, #0]
 8022c00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8022c02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022c06:	2b32      	cmp	r3, #50	; 0x32
 8022c08:	d105      	bne.n	8022c16 <etharp_find_entry+0x5e>
 8022c0a:	7dfb      	ldrb	r3, [r7, #23]
 8022c0c:	2b00      	cmp	r3, #0
 8022c0e:	d102      	bne.n	8022c16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8022c10:	8c3b      	ldrh	r3, [r7, #32]
 8022c12:	847b      	strh	r3, [r7, #34]	; 0x22
 8022c14:	e095      	b.n	8022d42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8022c16:	7dfb      	ldrb	r3, [r7, #23]
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	f000 8092 	beq.w	8022d42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8022c1e:	7dfb      	ldrb	r3, [r7, #23]
 8022c20:	2b01      	cmp	r3, #1
 8022c22:	d009      	beq.n	8022c38 <etharp_find_entry+0x80>
 8022c24:	7dfb      	ldrb	r3, [r7, #23]
 8022c26:	2b01      	cmp	r3, #1
 8022c28:	d806      	bhi.n	8022c38 <etharp_find_entry+0x80>
 8022c2a:	4b99      	ldr	r3, [pc, #612]	; (8022e90 <etharp_find_entry+0x2d8>)
 8022c2c:	f240 1223 	movw	r2, #291	; 0x123
 8022c30:	4998      	ldr	r1, [pc, #608]	; (8022e94 <etharp_find_entry+0x2dc>)
 8022c32:	4899      	ldr	r0, [pc, #612]	; (8022e98 <etharp_find_entry+0x2e0>)
 8022c34:	f002 fb94 	bl	8025360 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	d020      	beq.n	8022c80 <etharp_find_entry+0xc8>
 8022c3e:	68fb      	ldr	r3, [r7, #12]
 8022c40:	6819      	ldr	r1, [r3, #0]
 8022c42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022c46:	4891      	ldr	r0, [pc, #580]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022c48:	4613      	mov	r3, r2
 8022c4a:	005b      	lsls	r3, r3, #1
 8022c4c:	4413      	add	r3, r2
 8022c4e:	00db      	lsls	r3, r3, #3
 8022c50:	4403      	add	r3, r0
 8022c52:	3304      	adds	r3, #4
 8022c54:	681b      	ldr	r3, [r3, #0]
 8022c56:	4299      	cmp	r1, r3
 8022c58:	d112      	bne.n	8022c80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	2b00      	cmp	r3, #0
 8022c5e:	d00c      	beq.n	8022c7a <etharp_find_entry+0xc2>
 8022c60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022c64:	4989      	ldr	r1, [pc, #548]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022c66:	4613      	mov	r3, r2
 8022c68:	005b      	lsls	r3, r3, #1
 8022c6a:	4413      	add	r3, r2
 8022c6c:	00db      	lsls	r3, r3, #3
 8022c6e:	440b      	add	r3, r1
 8022c70:	3308      	adds	r3, #8
 8022c72:	681b      	ldr	r3, [r3, #0]
 8022c74:	687a      	ldr	r2, [r7, #4]
 8022c76:	429a      	cmp	r2, r3
 8022c78:	d102      	bne.n	8022c80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8022c7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022c7e:	e100      	b.n	8022e82 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8022c80:	7dfb      	ldrb	r3, [r7, #23]
 8022c82:	2b01      	cmp	r3, #1
 8022c84:	d140      	bne.n	8022d08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8022c86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022c8a:	4980      	ldr	r1, [pc, #512]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022c8c:	4613      	mov	r3, r2
 8022c8e:	005b      	lsls	r3, r3, #1
 8022c90:	4413      	add	r3, r2
 8022c92:	00db      	lsls	r3, r3, #3
 8022c94:	440b      	add	r3, r1
 8022c96:	681b      	ldr	r3, [r3, #0]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d01a      	beq.n	8022cd2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8022c9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022ca0:	497a      	ldr	r1, [pc, #488]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022ca2:	4613      	mov	r3, r2
 8022ca4:	005b      	lsls	r3, r3, #1
 8022ca6:	4413      	add	r3, r2
 8022ca8:	00db      	lsls	r3, r3, #3
 8022caa:	440b      	add	r3, r1
 8022cac:	3312      	adds	r3, #18
 8022cae:	881b      	ldrh	r3, [r3, #0]
 8022cb0:	8bba      	ldrh	r2, [r7, #28]
 8022cb2:	429a      	cmp	r2, r3
 8022cb4:	d845      	bhi.n	8022d42 <etharp_find_entry+0x18a>
            old_queue = i;
 8022cb6:	8c3b      	ldrh	r3, [r7, #32]
 8022cb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8022cba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022cbe:	4973      	ldr	r1, [pc, #460]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022cc0:	4613      	mov	r3, r2
 8022cc2:	005b      	lsls	r3, r3, #1
 8022cc4:	4413      	add	r3, r2
 8022cc6:	00db      	lsls	r3, r3, #3
 8022cc8:	440b      	add	r3, r1
 8022cca:	3312      	adds	r3, #18
 8022ccc:	881b      	ldrh	r3, [r3, #0]
 8022cce:	83bb      	strh	r3, [r7, #28]
 8022cd0:	e037      	b.n	8022d42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8022cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022cd6:	496d      	ldr	r1, [pc, #436]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022cd8:	4613      	mov	r3, r2
 8022cda:	005b      	lsls	r3, r3, #1
 8022cdc:	4413      	add	r3, r2
 8022cde:	00db      	lsls	r3, r3, #3
 8022ce0:	440b      	add	r3, r1
 8022ce2:	3312      	adds	r3, #18
 8022ce4:	881b      	ldrh	r3, [r3, #0]
 8022ce6:	8b7a      	ldrh	r2, [r7, #26]
 8022ce8:	429a      	cmp	r2, r3
 8022cea:	d82a      	bhi.n	8022d42 <etharp_find_entry+0x18a>
            old_pending = i;
 8022cec:	8c3b      	ldrh	r3, [r7, #32]
 8022cee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8022cf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022cf4:	4965      	ldr	r1, [pc, #404]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022cf6:	4613      	mov	r3, r2
 8022cf8:	005b      	lsls	r3, r3, #1
 8022cfa:	4413      	add	r3, r2
 8022cfc:	00db      	lsls	r3, r3, #3
 8022cfe:	440b      	add	r3, r1
 8022d00:	3312      	adds	r3, #18
 8022d02:	881b      	ldrh	r3, [r3, #0]
 8022d04:	837b      	strh	r3, [r7, #26]
 8022d06:	e01c      	b.n	8022d42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8022d08:	7dfb      	ldrb	r3, [r7, #23]
 8022d0a:	2b01      	cmp	r3, #1
 8022d0c:	d919      	bls.n	8022d42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8022d0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022d12:	495e      	ldr	r1, [pc, #376]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022d14:	4613      	mov	r3, r2
 8022d16:	005b      	lsls	r3, r3, #1
 8022d18:	4413      	add	r3, r2
 8022d1a:	00db      	lsls	r3, r3, #3
 8022d1c:	440b      	add	r3, r1
 8022d1e:	3312      	adds	r3, #18
 8022d20:	881b      	ldrh	r3, [r3, #0]
 8022d22:	8b3a      	ldrh	r2, [r7, #24]
 8022d24:	429a      	cmp	r2, r3
 8022d26:	d80c      	bhi.n	8022d42 <etharp_find_entry+0x18a>
            old_stable = i;
 8022d28:	8c3b      	ldrh	r3, [r7, #32]
 8022d2a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8022d2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022d30:	4956      	ldr	r1, [pc, #344]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022d32:	4613      	mov	r3, r2
 8022d34:	005b      	lsls	r3, r3, #1
 8022d36:	4413      	add	r3, r2
 8022d38:	00db      	lsls	r3, r3, #3
 8022d3a:	440b      	add	r3, r1
 8022d3c:	3312      	adds	r3, #18
 8022d3e:	881b      	ldrh	r3, [r3, #0]
 8022d40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022d42:	8c3b      	ldrh	r3, [r7, #32]
 8022d44:	3301      	adds	r3, #1
 8022d46:	b29b      	uxth	r3, r3
 8022d48:	843b      	strh	r3, [r7, #32]
 8022d4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022d4e:	2b31      	cmp	r3, #49	; 0x31
 8022d50:	f77f af4c 	ble.w	8022bec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8022d54:	7afb      	ldrb	r3, [r7, #11]
 8022d56:	f003 0302 	and.w	r3, r3, #2
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d108      	bne.n	8022d70 <etharp_find_entry+0x1b8>
 8022d5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022d62:	2b32      	cmp	r3, #50	; 0x32
 8022d64:	d107      	bne.n	8022d76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8022d66:	7afb      	ldrb	r3, [r7, #11]
 8022d68:	f003 0301 	and.w	r3, r3, #1
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	d102      	bne.n	8022d76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8022d70:	f04f 33ff 	mov.w	r3, #4294967295
 8022d74:	e085      	b.n	8022e82 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8022d76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022d7a:	2b31      	cmp	r3, #49	; 0x31
 8022d7c:	dc02      	bgt.n	8022d84 <etharp_find_entry+0x1cc>
    i = empty;
 8022d7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022d80:	843b      	strh	r3, [r7, #32]
 8022d82:	e039      	b.n	8022df8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8022d84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8022d88:	2b31      	cmp	r3, #49	; 0x31
 8022d8a:	dc14      	bgt.n	8022db6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8022d8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022d8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8022d90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022d94:	493d      	ldr	r1, [pc, #244]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022d96:	4613      	mov	r3, r2
 8022d98:	005b      	lsls	r3, r3, #1
 8022d9a:	4413      	add	r3, r2
 8022d9c:	00db      	lsls	r3, r3, #3
 8022d9e:	440b      	add	r3, r1
 8022da0:	681b      	ldr	r3, [r3, #0]
 8022da2:	2b00      	cmp	r3, #0
 8022da4:	d018      	beq.n	8022dd8 <etharp_find_entry+0x220>
 8022da6:	4b3a      	ldr	r3, [pc, #232]	; (8022e90 <etharp_find_entry+0x2d8>)
 8022da8:	f240 126d 	movw	r2, #365	; 0x16d
 8022dac:	493b      	ldr	r1, [pc, #236]	; (8022e9c <etharp_find_entry+0x2e4>)
 8022dae:	483a      	ldr	r0, [pc, #232]	; (8022e98 <etharp_find_entry+0x2e0>)
 8022db0:	f002 fad6 	bl	8025360 <iprintf>
 8022db4:	e010      	b.n	8022dd8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8022db6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8022dba:	2b31      	cmp	r3, #49	; 0x31
 8022dbc:	dc02      	bgt.n	8022dc4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8022dbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022dc0:	843b      	strh	r3, [r7, #32]
 8022dc2:	e009      	b.n	8022dd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8022dc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8022dc8:	2b31      	cmp	r3, #49	; 0x31
 8022dca:	dc02      	bgt.n	8022dd2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8022dcc:	8bfb      	ldrh	r3, [r7, #30]
 8022dce:	843b      	strh	r3, [r7, #32]
 8022dd0:	e002      	b.n	8022dd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8022dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8022dd6:	e054      	b.n	8022e82 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022dd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022ddc:	2b31      	cmp	r3, #49	; 0x31
 8022dde:	dd06      	ble.n	8022dee <etharp_find_entry+0x236>
 8022de0:	4b2b      	ldr	r3, [pc, #172]	; (8022e90 <etharp_find_entry+0x2d8>)
 8022de2:	f240 127f 	movw	r2, #383	; 0x17f
 8022de6:	492e      	ldr	r1, [pc, #184]	; (8022ea0 <etharp_find_entry+0x2e8>)
 8022de8:	482b      	ldr	r0, [pc, #172]	; (8022e98 <etharp_find_entry+0x2e0>)
 8022dea:	f002 fab9 	bl	8025360 <iprintf>
    etharp_free_entry(i);
 8022dee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022df2:	4618      	mov	r0, r3
 8022df4:	f7ff fe06 	bl	8022a04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022df8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022dfc:	2b31      	cmp	r3, #49	; 0x31
 8022dfe:	dd06      	ble.n	8022e0e <etharp_find_entry+0x256>
 8022e00:	4b23      	ldr	r3, [pc, #140]	; (8022e90 <etharp_find_entry+0x2d8>)
 8022e02:	f240 1283 	movw	r2, #387	; 0x183
 8022e06:	4926      	ldr	r1, [pc, #152]	; (8022ea0 <etharp_find_entry+0x2e8>)
 8022e08:	4823      	ldr	r0, [pc, #140]	; (8022e98 <etharp_find_entry+0x2e0>)
 8022e0a:	f002 faa9 	bl	8025360 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8022e0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022e12:	491e      	ldr	r1, [pc, #120]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022e14:	4613      	mov	r3, r2
 8022e16:	005b      	lsls	r3, r3, #1
 8022e18:	4413      	add	r3, r2
 8022e1a:	00db      	lsls	r3, r3, #3
 8022e1c:	440b      	add	r3, r1
 8022e1e:	3314      	adds	r3, #20
 8022e20:	781b      	ldrb	r3, [r3, #0]
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	d006      	beq.n	8022e34 <etharp_find_entry+0x27c>
 8022e26:	4b1a      	ldr	r3, [pc, #104]	; (8022e90 <etharp_find_entry+0x2d8>)
 8022e28:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8022e2c:	491d      	ldr	r1, [pc, #116]	; (8022ea4 <etharp_find_entry+0x2ec>)
 8022e2e:	481a      	ldr	r0, [pc, #104]	; (8022e98 <etharp_find_entry+0x2e0>)
 8022e30:	f002 fa96 	bl	8025360 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8022e34:	68fb      	ldr	r3, [r7, #12]
 8022e36:	2b00      	cmp	r3, #0
 8022e38:	d00b      	beq.n	8022e52 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8022e3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	6819      	ldr	r1, [r3, #0]
 8022e42:	4812      	ldr	r0, [pc, #72]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022e44:	4613      	mov	r3, r2
 8022e46:	005b      	lsls	r3, r3, #1
 8022e48:	4413      	add	r3, r2
 8022e4a:	00db      	lsls	r3, r3, #3
 8022e4c:	4403      	add	r3, r0
 8022e4e:	3304      	adds	r3, #4
 8022e50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8022e52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022e56:	490d      	ldr	r1, [pc, #52]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022e58:	4613      	mov	r3, r2
 8022e5a:	005b      	lsls	r3, r3, #1
 8022e5c:	4413      	add	r3, r2
 8022e5e:	00db      	lsls	r3, r3, #3
 8022e60:	440b      	add	r3, r1
 8022e62:	3312      	adds	r3, #18
 8022e64:	2200      	movs	r2, #0
 8022e66:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8022e68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022e6c:	4907      	ldr	r1, [pc, #28]	; (8022e8c <etharp_find_entry+0x2d4>)
 8022e6e:	4613      	mov	r3, r2
 8022e70:	005b      	lsls	r3, r3, #1
 8022e72:	4413      	add	r3, r2
 8022e74:	00db      	lsls	r3, r3, #3
 8022e76:	440b      	add	r3, r1
 8022e78:	3308      	adds	r3, #8
 8022e7a:	687a      	ldr	r2, [r7, #4]
 8022e7c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8022e7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8022e82:	4618      	mov	r0, r3
 8022e84:	3728      	adds	r7, #40	; 0x28
 8022e86:	46bd      	mov	sp, r7
 8022e88:	bd80      	pop	{r7, pc}
 8022e8a:	bf00      	nop
 8022e8c:	20014b30 	.word	0x20014b30
 8022e90:	0802b78c 	.word	0x0802b78c
 8022e94:	0802b7c4 	.word	0x0802b7c4
 8022e98:	0802b804 	.word	0x0802b804
 8022e9c:	0802b82c 	.word	0x0802b82c
 8022ea0:	0802b844 	.word	0x0802b844
 8022ea4:	0802b858 	.word	0x0802b858

08022ea8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b088      	sub	sp, #32
 8022eac:	af02      	add	r7, sp, #8
 8022eae:	60f8      	str	r0, [r7, #12]
 8022eb0:	60b9      	str	r1, [r7, #8]
 8022eb2:	607a      	str	r2, [r7, #4]
 8022eb4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8022eb6:	68fb      	ldr	r3, [r7, #12]
 8022eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022ebc:	2b06      	cmp	r3, #6
 8022ebe:	d006      	beq.n	8022ece <etharp_update_arp_entry+0x26>
 8022ec0:	4b48      	ldr	r3, [pc, #288]	; (8022fe4 <etharp_update_arp_entry+0x13c>)
 8022ec2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8022ec6:	4948      	ldr	r1, [pc, #288]	; (8022fe8 <etharp_update_arp_entry+0x140>)
 8022ec8:	4848      	ldr	r0, [pc, #288]	; (8022fec <etharp_update_arp_entry+0x144>)
 8022eca:	f002 fa49 	bl	8025360 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8022ece:	68bb      	ldr	r3, [r7, #8]
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d012      	beq.n	8022efa <etharp_update_arp_entry+0x52>
 8022ed4:	68bb      	ldr	r3, [r7, #8]
 8022ed6:	681b      	ldr	r3, [r3, #0]
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d00e      	beq.n	8022efa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8022edc:	68bb      	ldr	r3, [r7, #8]
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	68f9      	ldr	r1, [r7, #12]
 8022ee2:	4618      	mov	r0, r3
 8022ee4:	f001 f902 	bl	80240ec <ip4_addr_isbroadcast_u32>
 8022ee8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d105      	bne.n	8022efa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8022eee:	68bb      	ldr	r3, [r7, #8]
 8022ef0:	681b      	ldr	r3, [r3, #0]
 8022ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8022ef6:	2be0      	cmp	r3, #224	; 0xe0
 8022ef8:	d102      	bne.n	8022f00 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022efa:	f06f 030f 	mvn.w	r3, #15
 8022efe:	e06c      	b.n	8022fda <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8022f00:	78fb      	ldrb	r3, [r7, #3]
 8022f02:	68fa      	ldr	r2, [r7, #12]
 8022f04:	4619      	mov	r1, r3
 8022f06:	68b8      	ldr	r0, [r7, #8]
 8022f08:	f7ff fe56 	bl	8022bb8 <etharp_find_entry>
 8022f0c:	4603      	mov	r3, r0
 8022f0e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8022f10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022f14:	2b00      	cmp	r3, #0
 8022f16:	da02      	bge.n	8022f1e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8022f18:	8afb      	ldrh	r3, [r7, #22]
 8022f1a:	b25b      	sxtb	r3, r3
 8022f1c:	e05d      	b.n	8022fda <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8022f1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022f22:	4933      	ldr	r1, [pc, #204]	; (8022ff0 <etharp_update_arp_entry+0x148>)
 8022f24:	4613      	mov	r3, r2
 8022f26:	005b      	lsls	r3, r3, #1
 8022f28:	4413      	add	r3, r2
 8022f2a:	00db      	lsls	r3, r3, #3
 8022f2c:	440b      	add	r3, r1
 8022f2e:	3314      	adds	r3, #20
 8022f30:	2202      	movs	r2, #2
 8022f32:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8022f34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022f38:	492d      	ldr	r1, [pc, #180]	; (8022ff0 <etharp_update_arp_entry+0x148>)
 8022f3a:	4613      	mov	r3, r2
 8022f3c:	005b      	lsls	r3, r3, #1
 8022f3e:	4413      	add	r3, r2
 8022f40:	00db      	lsls	r3, r3, #3
 8022f42:	440b      	add	r3, r1
 8022f44:	3308      	adds	r3, #8
 8022f46:	68fa      	ldr	r2, [r7, #12]
 8022f48:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022f4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022f4e:	4613      	mov	r3, r2
 8022f50:	005b      	lsls	r3, r3, #1
 8022f52:	4413      	add	r3, r2
 8022f54:	00db      	lsls	r3, r3, #3
 8022f56:	3308      	adds	r3, #8
 8022f58:	4a25      	ldr	r2, [pc, #148]	; (8022ff0 <etharp_update_arp_entry+0x148>)
 8022f5a:	4413      	add	r3, r2
 8022f5c:	3304      	adds	r3, #4
 8022f5e:	2206      	movs	r2, #6
 8022f60:	6879      	ldr	r1, [r7, #4]
 8022f62:	4618      	mov	r0, r3
 8022f64:	f002 f8ec 	bl	8025140 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8022f68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022f6c:	4920      	ldr	r1, [pc, #128]	; (8022ff0 <etharp_update_arp_entry+0x148>)
 8022f6e:	4613      	mov	r3, r2
 8022f70:	005b      	lsls	r3, r3, #1
 8022f72:	4413      	add	r3, r2
 8022f74:	00db      	lsls	r3, r3, #3
 8022f76:	440b      	add	r3, r1
 8022f78:	3312      	adds	r3, #18
 8022f7a:	2200      	movs	r2, #0
 8022f7c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8022f7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022f82:	491b      	ldr	r1, [pc, #108]	; (8022ff0 <etharp_update_arp_entry+0x148>)
 8022f84:	4613      	mov	r3, r2
 8022f86:	005b      	lsls	r3, r3, #1
 8022f88:	4413      	add	r3, r2
 8022f8a:	00db      	lsls	r3, r3, #3
 8022f8c:	440b      	add	r3, r1
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d021      	beq.n	8022fd8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8022f94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022f98:	4915      	ldr	r1, [pc, #84]	; (8022ff0 <etharp_update_arp_entry+0x148>)
 8022f9a:	4613      	mov	r3, r2
 8022f9c:	005b      	lsls	r3, r3, #1
 8022f9e:	4413      	add	r3, r2
 8022fa0:	00db      	lsls	r3, r3, #3
 8022fa2:	440b      	add	r3, r1
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8022fa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022fac:	4910      	ldr	r1, [pc, #64]	; (8022ff0 <etharp_update_arp_entry+0x148>)
 8022fae:	4613      	mov	r3, r2
 8022fb0:	005b      	lsls	r3, r3, #1
 8022fb2:	4413      	add	r3, r2
 8022fb4:	00db      	lsls	r3, r3, #3
 8022fb6:	440b      	add	r3, r1
 8022fb8:	2200      	movs	r2, #0
 8022fba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8022fbc:	68fb      	ldr	r3, [r7, #12]
 8022fbe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8022fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022fc6:	9300      	str	r3, [sp, #0]
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	6939      	ldr	r1, [r7, #16]
 8022fcc:	68f8      	ldr	r0, [r7, #12]
 8022fce:	f002 f82b 	bl	8025028 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8022fd2:	6938      	ldr	r0, [r7, #16]
 8022fd4:	f7fe fc8c 	bl	80218f0 <pbuf_free>
  }
  return ERR_OK;
 8022fd8:	2300      	movs	r3, #0
}
 8022fda:	4618      	mov	r0, r3
 8022fdc:	3718      	adds	r7, #24
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	bd80      	pop	{r7, pc}
 8022fe2:	bf00      	nop
 8022fe4:	0802b78c 	.word	0x0802b78c
 8022fe8:	0802b884 	.word	0x0802b884
 8022fec:	0802b804 	.word	0x0802b804
 8022ff0:	20014b30 	.word	0x20014b30

08022ff4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8022ff4:	b580      	push	{r7, lr}
 8022ff6:	b084      	sub	sp, #16
 8022ff8:	af00      	add	r7, sp, #0
 8022ffa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022ffc:	2300      	movs	r3, #0
 8022ffe:	60fb      	str	r3, [r7, #12]
 8023000:	e01e      	b.n	8023040 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8023002:	4913      	ldr	r1, [pc, #76]	; (8023050 <etharp_cleanup_netif+0x5c>)
 8023004:	68fa      	ldr	r2, [r7, #12]
 8023006:	4613      	mov	r3, r2
 8023008:	005b      	lsls	r3, r3, #1
 802300a:	4413      	add	r3, r2
 802300c:	00db      	lsls	r3, r3, #3
 802300e:	440b      	add	r3, r1
 8023010:	3314      	adds	r3, #20
 8023012:	781b      	ldrb	r3, [r3, #0]
 8023014:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8023016:	7afb      	ldrb	r3, [r7, #11]
 8023018:	2b00      	cmp	r3, #0
 802301a:	d00e      	beq.n	802303a <etharp_cleanup_netif+0x46>
 802301c:	490c      	ldr	r1, [pc, #48]	; (8023050 <etharp_cleanup_netif+0x5c>)
 802301e:	68fa      	ldr	r2, [r7, #12]
 8023020:	4613      	mov	r3, r2
 8023022:	005b      	lsls	r3, r3, #1
 8023024:	4413      	add	r3, r2
 8023026:	00db      	lsls	r3, r3, #3
 8023028:	440b      	add	r3, r1
 802302a:	3308      	adds	r3, #8
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	687a      	ldr	r2, [r7, #4]
 8023030:	429a      	cmp	r2, r3
 8023032:	d102      	bne.n	802303a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8023034:	68f8      	ldr	r0, [r7, #12]
 8023036:	f7ff fce5 	bl	8022a04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802303a:	68fb      	ldr	r3, [r7, #12]
 802303c:	3301      	adds	r3, #1
 802303e:	60fb      	str	r3, [r7, #12]
 8023040:	68fb      	ldr	r3, [r7, #12]
 8023042:	2b31      	cmp	r3, #49	; 0x31
 8023044:	dddd      	ble.n	8023002 <etharp_cleanup_netif+0xe>
    }
  }
}
 8023046:	bf00      	nop
 8023048:	bf00      	nop
 802304a:	3710      	adds	r7, #16
 802304c:	46bd      	mov	sp, r7
 802304e:	bd80      	pop	{r7, pc}
 8023050:	20014b30 	.word	0x20014b30

08023054 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8023054:	b5b0      	push	{r4, r5, r7, lr}
 8023056:	b08a      	sub	sp, #40	; 0x28
 8023058:	af04      	add	r7, sp, #16
 802305a:	6078      	str	r0, [r7, #4]
 802305c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802305e:	683b      	ldr	r3, [r7, #0]
 8023060:	2b00      	cmp	r3, #0
 8023062:	d107      	bne.n	8023074 <etharp_input+0x20>
 8023064:	4b3d      	ldr	r3, [pc, #244]	; (802315c <etharp_input+0x108>)
 8023066:	f240 228a 	movw	r2, #650	; 0x28a
 802306a:	493d      	ldr	r1, [pc, #244]	; (8023160 <etharp_input+0x10c>)
 802306c:	483d      	ldr	r0, [pc, #244]	; (8023164 <etharp_input+0x110>)
 802306e:	f002 f977 	bl	8025360 <iprintf>
 8023072:	e06f      	b.n	8023154 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	685b      	ldr	r3, [r3, #4]
 8023078:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802307a:	693b      	ldr	r3, [r7, #16]
 802307c:	881b      	ldrh	r3, [r3, #0]
 802307e:	b29b      	uxth	r3, r3
 8023080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023084:	d10c      	bne.n	80230a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023086:	693b      	ldr	r3, [r7, #16]
 8023088:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802308a:	2b06      	cmp	r3, #6
 802308c:	d108      	bne.n	80230a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802308e:	693b      	ldr	r3, [r7, #16]
 8023090:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023092:	2b04      	cmp	r3, #4
 8023094:	d104      	bne.n	80230a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8023096:	693b      	ldr	r3, [r7, #16]
 8023098:	885b      	ldrh	r3, [r3, #2]
 802309a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802309c:	2b08      	cmp	r3, #8
 802309e:	d003      	beq.n	80230a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80230a0:	6878      	ldr	r0, [r7, #4]
 80230a2:	f7fe fc25 	bl	80218f0 <pbuf_free>
    return;
 80230a6:	e055      	b.n	8023154 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80230a8:	693b      	ldr	r3, [r7, #16]
 80230aa:	330e      	adds	r3, #14
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80230b0:	693b      	ldr	r3, [r7, #16]
 80230b2:	3318      	adds	r3, #24
 80230b4:	681b      	ldr	r3, [r3, #0]
 80230b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80230b8:	683b      	ldr	r3, [r7, #0]
 80230ba:	3304      	adds	r3, #4
 80230bc:	681b      	ldr	r3, [r3, #0]
 80230be:	2b00      	cmp	r3, #0
 80230c0:	d102      	bne.n	80230c8 <etharp_input+0x74>
    for_us = 0;
 80230c2:	2300      	movs	r3, #0
 80230c4:	75fb      	strb	r3, [r7, #23]
 80230c6:	e009      	b.n	80230dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80230c8:	68ba      	ldr	r2, [r7, #8]
 80230ca:	683b      	ldr	r3, [r7, #0]
 80230cc:	3304      	adds	r3, #4
 80230ce:	681b      	ldr	r3, [r3, #0]
 80230d0:	429a      	cmp	r2, r3
 80230d2:	bf0c      	ite	eq
 80230d4:	2301      	moveq	r3, #1
 80230d6:	2300      	movne	r3, #0
 80230d8:	b2db      	uxtb	r3, r3
 80230da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80230dc:	693b      	ldr	r3, [r7, #16]
 80230de:	f103 0208 	add.w	r2, r3, #8
 80230e2:	7dfb      	ldrb	r3, [r7, #23]
 80230e4:	2b00      	cmp	r3, #0
 80230e6:	d001      	beq.n	80230ec <etharp_input+0x98>
 80230e8:	2301      	movs	r3, #1
 80230ea:	e000      	b.n	80230ee <etharp_input+0x9a>
 80230ec:	2302      	movs	r3, #2
 80230ee:	f107 010c 	add.w	r1, r7, #12
 80230f2:	6838      	ldr	r0, [r7, #0]
 80230f4:	f7ff fed8 	bl	8022ea8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80230f8:	693b      	ldr	r3, [r7, #16]
 80230fa:	88db      	ldrh	r3, [r3, #6]
 80230fc:	b29b      	uxth	r3, r3
 80230fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023102:	d003      	beq.n	802310c <etharp_input+0xb8>
 8023104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023108:	d01e      	beq.n	8023148 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 802310a:	e020      	b.n	802314e <etharp_input+0xfa>
      if (for_us) {
 802310c:	7dfb      	ldrb	r3, [r7, #23]
 802310e:	2b00      	cmp	r3, #0
 8023110:	d01c      	beq.n	802314c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8023112:	683b      	ldr	r3, [r7, #0]
 8023114:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8023118:	693b      	ldr	r3, [r7, #16]
 802311a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802311e:	683b      	ldr	r3, [r7, #0]
 8023120:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8023124:	683b      	ldr	r3, [r7, #0]
 8023126:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8023128:	693a      	ldr	r2, [r7, #16]
 802312a:	3208      	adds	r2, #8
        etharp_raw(netif,
 802312c:	2102      	movs	r1, #2
 802312e:	9103      	str	r1, [sp, #12]
 8023130:	f107 010c 	add.w	r1, r7, #12
 8023134:	9102      	str	r1, [sp, #8]
 8023136:	9201      	str	r2, [sp, #4]
 8023138:	9300      	str	r3, [sp, #0]
 802313a:	462b      	mov	r3, r5
 802313c:	4622      	mov	r2, r4
 802313e:	4601      	mov	r1, r0
 8023140:	6838      	ldr	r0, [r7, #0]
 8023142:	f000 faeb 	bl	802371c <etharp_raw>
      break;
 8023146:	e001      	b.n	802314c <etharp_input+0xf8>
      break;
 8023148:	bf00      	nop
 802314a:	e000      	b.n	802314e <etharp_input+0xfa>
      break;
 802314c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802314e:	6878      	ldr	r0, [r7, #4]
 8023150:	f7fe fbce 	bl	80218f0 <pbuf_free>
}
 8023154:	3718      	adds	r7, #24
 8023156:	46bd      	mov	sp, r7
 8023158:	bdb0      	pop	{r4, r5, r7, pc}
 802315a:	bf00      	nop
 802315c:	0802b78c 	.word	0x0802b78c
 8023160:	0802b8dc 	.word	0x0802b8dc
 8023164:	0802b804 	.word	0x0802b804

08023168 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8023168:	b580      	push	{r7, lr}
 802316a:	b086      	sub	sp, #24
 802316c:	af02      	add	r7, sp, #8
 802316e:	60f8      	str	r0, [r7, #12]
 8023170:	60b9      	str	r1, [r7, #8]
 8023172:	4613      	mov	r3, r2
 8023174:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8023176:	79fa      	ldrb	r2, [r7, #7]
 8023178:	4944      	ldr	r1, [pc, #272]	; (802328c <etharp_output_to_arp_index+0x124>)
 802317a:	4613      	mov	r3, r2
 802317c:	005b      	lsls	r3, r3, #1
 802317e:	4413      	add	r3, r2
 8023180:	00db      	lsls	r3, r3, #3
 8023182:	440b      	add	r3, r1
 8023184:	3314      	adds	r3, #20
 8023186:	781b      	ldrb	r3, [r3, #0]
 8023188:	2b01      	cmp	r3, #1
 802318a:	d806      	bhi.n	802319a <etharp_output_to_arp_index+0x32>
 802318c:	4b40      	ldr	r3, [pc, #256]	; (8023290 <etharp_output_to_arp_index+0x128>)
 802318e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023192:	4940      	ldr	r1, [pc, #256]	; (8023294 <etharp_output_to_arp_index+0x12c>)
 8023194:	4840      	ldr	r0, [pc, #256]	; (8023298 <etharp_output_to_arp_index+0x130>)
 8023196:	f002 f8e3 	bl	8025360 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802319a:	79fa      	ldrb	r2, [r7, #7]
 802319c:	493b      	ldr	r1, [pc, #236]	; (802328c <etharp_output_to_arp_index+0x124>)
 802319e:	4613      	mov	r3, r2
 80231a0:	005b      	lsls	r3, r3, #1
 80231a2:	4413      	add	r3, r2
 80231a4:	00db      	lsls	r3, r3, #3
 80231a6:	440b      	add	r3, r1
 80231a8:	3314      	adds	r3, #20
 80231aa:	781b      	ldrb	r3, [r3, #0]
 80231ac:	2b02      	cmp	r3, #2
 80231ae:	d153      	bne.n	8023258 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80231b0:	79fa      	ldrb	r2, [r7, #7]
 80231b2:	4936      	ldr	r1, [pc, #216]	; (802328c <etharp_output_to_arp_index+0x124>)
 80231b4:	4613      	mov	r3, r2
 80231b6:	005b      	lsls	r3, r3, #1
 80231b8:	4413      	add	r3, r2
 80231ba:	00db      	lsls	r3, r3, #3
 80231bc:	440b      	add	r3, r1
 80231be:	3312      	adds	r3, #18
 80231c0:	881b      	ldrh	r3, [r3, #0]
 80231c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80231c6:	d919      	bls.n	80231fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80231c8:	79fa      	ldrb	r2, [r7, #7]
 80231ca:	4613      	mov	r3, r2
 80231cc:	005b      	lsls	r3, r3, #1
 80231ce:	4413      	add	r3, r2
 80231d0:	00db      	lsls	r3, r3, #3
 80231d2:	4a2e      	ldr	r2, [pc, #184]	; (802328c <etharp_output_to_arp_index+0x124>)
 80231d4:	4413      	add	r3, r2
 80231d6:	3304      	adds	r3, #4
 80231d8:	4619      	mov	r1, r3
 80231da:	68f8      	ldr	r0, [r7, #12]
 80231dc:	f000 fb4c 	bl	8023878 <etharp_request>
 80231e0:	4603      	mov	r3, r0
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	d138      	bne.n	8023258 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80231e6:	79fa      	ldrb	r2, [r7, #7]
 80231e8:	4928      	ldr	r1, [pc, #160]	; (802328c <etharp_output_to_arp_index+0x124>)
 80231ea:	4613      	mov	r3, r2
 80231ec:	005b      	lsls	r3, r3, #1
 80231ee:	4413      	add	r3, r2
 80231f0:	00db      	lsls	r3, r3, #3
 80231f2:	440b      	add	r3, r1
 80231f4:	3314      	adds	r3, #20
 80231f6:	2203      	movs	r2, #3
 80231f8:	701a      	strb	r2, [r3, #0]
 80231fa:	e02d      	b.n	8023258 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80231fc:	79fa      	ldrb	r2, [r7, #7]
 80231fe:	4923      	ldr	r1, [pc, #140]	; (802328c <etharp_output_to_arp_index+0x124>)
 8023200:	4613      	mov	r3, r2
 8023202:	005b      	lsls	r3, r3, #1
 8023204:	4413      	add	r3, r2
 8023206:	00db      	lsls	r3, r3, #3
 8023208:	440b      	add	r3, r1
 802320a:	3312      	adds	r3, #18
 802320c:	881b      	ldrh	r3, [r3, #0]
 802320e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8023212:	d321      	bcc.n	8023258 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023214:	79fa      	ldrb	r2, [r7, #7]
 8023216:	4613      	mov	r3, r2
 8023218:	005b      	lsls	r3, r3, #1
 802321a:	4413      	add	r3, r2
 802321c:	00db      	lsls	r3, r3, #3
 802321e:	4a1b      	ldr	r2, [pc, #108]	; (802328c <etharp_output_to_arp_index+0x124>)
 8023220:	4413      	add	r3, r2
 8023222:	1d19      	adds	r1, r3, #4
 8023224:	79fa      	ldrb	r2, [r7, #7]
 8023226:	4613      	mov	r3, r2
 8023228:	005b      	lsls	r3, r3, #1
 802322a:	4413      	add	r3, r2
 802322c:	00db      	lsls	r3, r3, #3
 802322e:	3308      	adds	r3, #8
 8023230:	4a16      	ldr	r2, [pc, #88]	; (802328c <etharp_output_to_arp_index+0x124>)
 8023232:	4413      	add	r3, r2
 8023234:	3304      	adds	r3, #4
 8023236:	461a      	mov	r2, r3
 8023238:	68f8      	ldr	r0, [r7, #12]
 802323a:	f000 fafb 	bl	8023834 <etharp_request_dst>
 802323e:	4603      	mov	r3, r0
 8023240:	2b00      	cmp	r3, #0
 8023242:	d109      	bne.n	8023258 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023244:	79fa      	ldrb	r2, [r7, #7]
 8023246:	4911      	ldr	r1, [pc, #68]	; (802328c <etharp_output_to_arp_index+0x124>)
 8023248:	4613      	mov	r3, r2
 802324a:	005b      	lsls	r3, r3, #1
 802324c:	4413      	add	r3, r2
 802324e:	00db      	lsls	r3, r3, #3
 8023250:	440b      	add	r3, r1
 8023252:	3314      	adds	r3, #20
 8023254:	2203      	movs	r2, #3
 8023256:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8023258:	68fb      	ldr	r3, [r7, #12]
 802325a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 802325e:	79fa      	ldrb	r2, [r7, #7]
 8023260:	4613      	mov	r3, r2
 8023262:	005b      	lsls	r3, r3, #1
 8023264:	4413      	add	r3, r2
 8023266:	00db      	lsls	r3, r3, #3
 8023268:	3308      	adds	r3, #8
 802326a:	4a08      	ldr	r2, [pc, #32]	; (802328c <etharp_output_to_arp_index+0x124>)
 802326c:	4413      	add	r3, r2
 802326e:	3304      	adds	r3, #4
 8023270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023274:	9200      	str	r2, [sp, #0]
 8023276:	460a      	mov	r2, r1
 8023278:	68b9      	ldr	r1, [r7, #8]
 802327a:	68f8      	ldr	r0, [r7, #12]
 802327c:	f001 fed4 	bl	8025028 <ethernet_output>
 8023280:	4603      	mov	r3, r0
}
 8023282:	4618      	mov	r0, r3
 8023284:	3710      	adds	r7, #16
 8023286:	46bd      	mov	sp, r7
 8023288:	bd80      	pop	{r7, pc}
 802328a:	bf00      	nop
 802328c:	20014b30 	.word	0x20014b30
 8023290:	0802b78c 	.word	0x0802b78c
 8023294:	0802b8fc 	.word	0x0802b8fc
 8023298:	0802b804 	.word	0x0802b804

0802329c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 802329c:	b580      	push	{r7, lr}
 802329e:	b08a      	sub	sp, #40	; 0x28
 80232a0:	af02      	add	r7, sp, #8
 80232a2:	60f8      	str	r0, [r7, #12]
 80232a4:	60b9      	str	r1, [r7, #8]
 80232a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80232a8:	687b      	ldr	r3, [r7, #4]
 80232aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80232ac:	68fb      	ldr	r3, [r7, #12]
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	d106      	bne.n	80232c0 <etharp_output+0x24>
 80232b2:	4b73      	ldr	r3, [pc, #460]	; (8023480 <etharp_output+0x1e4>)
 80232b4:	f240 321e 	movw	r2, #798	; 0x31e
 80232b8:	4972      	ldr	r1, [pc, #456]	; (8023484 <etharp_output+0x1e8>)
 80232ba:	4873      	ldr	r0, [pc, #460]	; (8023488 <etharp_output+0x1ec>)
 80232bc:	f002 f850 	bl	8025360 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80232c0:	68bb      	ldr	r3, [r7, #8]
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	d106      	bne.n	80232d4 <etharp_output+0x38>
 80232c6:	4b6e      	ldr	r3, [pc, #440]	; (8023480 <etharp_output+0x1e4>)
 80232c8:	f240 321f 	movw	r2, #799	; 0x31f
 80232cc:	496f      	ldr	r1, [pc, #444]	; (802348c <etharp_output+0x1f0>)
 80232ce:	486e      	ldr	r0, [pc, #440]	; (8023488 <etharp_output+0x1ec>)
 80232d0:	f002 f846 	bl	8025360 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80232d4:	687b      	ldr	r3, [r7, #4]
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	d106      	bne.n	80232e8 <etharp_output+0x4c>
 80232da:	4b69      	ldr	r3, [pc, #420]	; (8023480 <etharp_output+0x1e4>)
 80232dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80232e0:	496b      	ldr	r1, [pc, #428]	; (8023490 <etharp_output+0x1f4>)
 80232e2:	4869      	ldr	r0, [pc, #420]	; (8023488 <etharp_output+0x1ec>)
 80232e4:	f002 f83c 	bl	8025360 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80232e8:	687b      	ldr	r3, [r7, #4]
 80232ea:	681b      	ldr	r3, [r3, #0]
 80232ec:	68f9      	ldr	r1, [r7, #12]
 80232ee:	4618      	mov	r0, r3
 80232f0:	f000 fefc 	bl	80240ec <ip4_addr_isbroadcast_u32>
 80232f4:	4603      	mov	r3, r0
 80232f6:	2b00      	cmp	r3, #0
 80232f8:	d002      	beq.n	8023300 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80232fa:	4b66      	ldr	r3, [pc, #408]	; (8023494 <etharp_output+0x1f8>)
 80232fc:	61fb      	str	r3, [r7, #28]
 80232fe:	e0af      	b.n	8023460 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023308:	2be0      	cmp	r3, #224	; 0xe0
 802330a:	d118      	bne.n	802333e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802330c:	2301      	movs	r3, #1
 802330e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023310:	2300      	movs	r3, #0
 8023312:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023314:	235e      	movs	r3, #94	; 0x5e
 8023316:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023318:	687b      	ldr	r3, [r7, #4]
 802331a:	3301      	adds	r3, #1
 802331c:	781b      	ldrb	r3, [r3, #0]
 802331e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023322:	b2db      	uxtb	r3, r3
 8023324:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	3302      	adds	r3, #2
 802332a:	781b      	ldrb	r3, [r3, #0]
 802332c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802332e:	687b      	ldr	r3, [r7, #4]
 8023330:	3303      	adds	r3, #3
 8023332:	781b      	ldrb	r3, [r3, #0]
 8023334:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8023336:	f107 0310 	add.w	r3, r7, #16
 802333a:	61fb      	str	r3, [r7, #28]
 802333c:	e090      	b.n	8023460 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802333e:	687b      	ldr	r3, [r7, #4]
 8023340:	681a      	ldr	r2, [r3, #0]
 8023342:	68fb      	ldr	r3, [r7, #12]
 8023344:	3304      	adds	r3, #4
 8023346:	681b      	ldr	r3, [r3, #0]
 8023348:	405a      	eors	r2, r3
 802334a:	68fb      	ldr	r3, [r7, #12]
 802334c:	3308      	adds	r3, #8
 802334e:	681b      	ldr	r3, [r3, #0]
 8023350:	4013      	ands	r3, r2
 8023352:	2b00      	cmp	r3, #0
 8023354:	d012      	beq.n	802337c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8023356:	687b      	ldr	r3, [r7, #4]
 8023358:	681b      	ldr	r3, [r3, #0]
 802335a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802335c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8023360:	4293      	cmp	r3, r2
 8023362:	d00b      	beq.n	802337c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8023364:	68fb      	ldr	r3, [r7, #12]
 8023366:	330c      	adds	r3, #12
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	2b00      	cmp	r3, #0
 802336c:	d003      	beq.n	8023376 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 802336e:	68fb      	ldr	r3, [r7, #12]
 8023370:	330c      	adds	r3, #12
 8023372:	61bb      	str	r3, [r7, #24]
 8023374:	e002      	b.n	802337c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8023376:	f06f 0303 	mvn.w	r3, #3
 802337a:	e07d      	b.n	8023478 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802337c:	4b46      	ldr	r3, [pc, #280]	; (8023498 <etharp_output+0x1fc>)
 802337e:	781b      	ldrb	r3, [r3, #0]
 8023380:	4619      	mov	r1, r3
 8023382:	4a46      	ldr	r2, [pc, #280]	; (802349c <etharp_output+0x200>)
 8023384:	460b      	mov	r3, r1
 8023386:	005b      	lsls	r3, r3, #1
 8023388:	440b      	add	r3, r1
 802338a:	00db      	lsls	r3, r3, #3
 802338c:	4413      	add	r3, r2
 802338e:	3314      	adds	r3, #20
 8023390:	781b      	ldrb	r3, [r3, #0]
 8023392:	2b01      	cmp	r3, #1
 8023394:	d925      	bls.n	80233e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023396:	4b40      	ldr	r3, [pc, #256]	; (8023498 <etharp_output+0x1fc>)
 8023398:	781b      	ldrb	r3, [r3, #0]
 802339a:	4619      	mov	r1, r3
 802339c:	4a3f      	ldr	r2, [pc, #252]	; (802349c <etharp_output+0x200>)
 802339e:	460b      	mov	r3, r1
 80233a0:	005b      	lsls	r3, r3, #1
 80233a2:	440b      	add	r3, r1
 80233a4:	00db      	lsls	r3, r3, #3
 80233a6:	4413      	add	r3, r2
 80233a8:	3308      	adds	r3, #8
 80233aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80233ac:	68fa      	ldr	r2, [r7, #12]
 80233ae:	429a      	cmp	r2, r3
 80233b0:	d117      	bne.n	80233e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80233b2:	69bb      	ldr	r3, [r7, #24]
 80233b4:	681a      	ldr	r2, [r3, #0]
 80233b6:	4b38      	ldr	r3, [pc, #224]	; (8023498 <etharp_output+0x1fc>)
 80233b8:	781b      	ldrb	r3, [r3, #0]
 80233ba:	4618      	mov	r0, r3
 80233bc:	4937      	ldr	r1, [pc, #220]	; (802349c <etharp_output+0x200>)
 80233be:	4603      	mov	r3, r0
 80233c0:	005b      	lsls	r3, r3, #1
 80233c2:	4403      	add	r3, r0
 80233c4:	00db      	lsls	r3, r3, #3
 80233c6:	440b      	add	r3, r1
 80233c8:	3304      	adds	r3, #4
 80233ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80233cc:	429a      	cmp	r2, r3
 80233ce:	d108      	bne.n	80233e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80233d0:	4b31      	ldr	r3, [pc, #196]	; (8023498 <etharp_output+0x1fc>)
 80233d2:	781b      	ldrb	r3, [r3, #0]
 80233d4:	461a      	mov	r2, r3
 80233d6:	68b9      	ldr	r1, [r7, #8]
 80233d8:	68f8      	ldr	r0, [r7, #12]
 80233da:	f7ff fec5 	bl	8023168 <etharp_output_to_arp_index>
 80233de:	4603      	mov	r3, r0
 80233e0:	e04a      	b.n	8023478 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80233e2:	2300      	movs	r3, #0
 80233e4:	75fb      	strb	r3, [r7, #23]
 80233e6:	e031      	b.n	802344c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80233e8:	7dfa      	ldrb	r2, [r7, #23]
 80233ea:	492c      	ldr	r1, [pc, #176]	; (802349c <etharp_output+0x200>)
 80233ec:	4613      	mov	r3, r2
 80233ee:	005b      	lsls	r3, r3, #1
 80233f0:	4413      	add	r3, r2
 80233f2:	00db      	lsls	r3, r3, #3
 80233f4:	440b      	add	r3, r1
 80233f6:	3314      	adds	r3, #20
 80233f8:	781b      	ldrb	r3, [r3, #0]
 80233fa:	2b01      	cmp	r3, #1
 80233fc:	d923      	bls.n	8023446 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80233fe:	7dfa      	ldrb	r2, [r7, #23]
 8023400:	4926      	ldr	r1, [pc, #152]	; (802349c <etharp_output+0x200>)
 8023402:	4613      	mov	r3, r2
 8023404:	005b      	lsls	r3, r3, #1
 8023406:	4413      	add	r3, r2
 8023408:	00db      	lsls	r3, r3, #3
 802340a:	440b      	add	r3, r1
 802340c:	3308      	adds	r3, #8
 802340e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023410:	68fa      	ldr	r2, [r7, #12]
 8023412:	429a      	cmp	r2, r3
 8023414:	d117      	bne.n	8023446 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8023416:	69bb      	ldr	r3, [r7, #24]
 8023418:	6819      	ldr	r1, [r3, #0]
 802341a:	7dfa      	ldrb	r2, [r7, #23]
 802341c:	481f      	ldr	r0, [pc, #124]	; (802349c <etharp_output+0x200>)
 802341e:	4613      	mov	r3, r2
 8023420:	005b      	lsls	r3, r3, #1
 8023422:	4413      	add	r3, r2
 8023424:	00db      	lsls	r3, r3, #3
 8023426:	4403      	add	r3, r0
 8023428:	3304      	adds	r3, #4
 802342a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 802342c:	4299      	cmp	r1, r3
 802342e:	d10a      	bne.n	8023446 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8023430:	4a19      	ldr	r2, [pc, #100]	; (8023498 <etharp_output+0x1fc>)
 8023432:	7dfb      	ldrb	r3, [r7, #23]
 8023434:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8023436:	7dfb      	ldrb	r3, [r7, #23]
 8023438:	461a      	mov	r2, r3
 802343a:	68b9      	ldr	r1, [r7, #8]
 802343c:	68f8      	ldr	r0, [r7, #12]
 802343e:	f7ff fe93 	bl	8023168 <etharp_output_to_arp_index>
 8023442:	4603      	mov	r3, r0
 8023444:	e018      	b.n	8023478 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023446:	7dfb      	ldrb	r3, [r7, #23]
 8023448:	3301      	adds	r3, #1
 802344a:	75fb      	strb	r3, [r7, #23]
 802344c:	7dfb      	ldrb	r3, [r7, #23]
 802344e:	2b31      	cmp	r3, #49	; 0x31
 8023450:	d9ca      	bls.n	80233e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8023452:	68ba      	ldr	r2, [r7, #8]
 8023454:	69b9      	ldr	r1, [r7, #24]
 8023456:	68f8      	ldr	r0, [r7, #12]
 8023458:	f000 f822 	bl	80234a0 <etharp_query>
 802345c:	4603      	mov	r3, r0
 802345e:	e00b      	b.n	8023478 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8023460:	68fb      	ldr	r3, [r7, #12]
 8023462:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8023466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802346a:	9300      	str	r3, [sp, #0]
 802346c:	69fb      	ldr	r3, [r7, #28]
 802346e:	68b9      	ldr	r1, [r7, #8]
 8023470:	68f8      	ldr	r0, [r7, #12]
 8023472:	f001 fdd9 	bl	8025028 <ethernet_output>
 8023476:	4603      	mov	r3, r0
}
 8023478:	4618      	mov	r0, r3
 802347a:	3720      	adds	r7, #32
 802347c:	46bd      	mov	sp, r7
 802347e:	bd80      	pop	{r7, pc}
 8023480:	0802b78c 	.word	0x0802b78c
 8023484:	0802b8dc 	.word	0x0802b8dc
 8023488:	0802b804 	.word	0x0802b804
 802348c:	0802b92c 	.word	0x0802b92c
 8023490:	0802b8cc 	.word	0x0802b8cc
 8023494:	0802c30c 	.word	0x0802c30c
 8023498:	20014fe0 	.word	0x20014fe0
 802349c:	20014b30 	.word	0x20014b30

080234a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80234a0:	b580      	push	{r7, lr}
 80234a2:	b08c      	sub	sp, #48	; 0x30
 80234a4:	af02      	add	r7, sp, #8
 80234a6:	60f8      	str	r0, [r7, #12]
 80234a8:	60b9      	str	r1, [r7, #8]
 80234aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80234ac:	68fb      	ldr	r3, [r7, #12]
 80234ae:	332a      	adds	r3, #42	; 0x2a
 80234b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80234b2:	23ff      	movs	r3, #255	; 0xff
 80234b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80234b8:	2300      	movs	r3, #0
 80234ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80234bc:	68bb      	ldr	r3, [r7, #8]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	68f9      	ldr	r1, [r7, #12]
 80234c2:	4618      	mov	r0, r3
 80234c4:	f000 fe12 	bl	80240ec <ip4_addr_isbroadcast_u32>
 80234c8:	4603      	mov	r3, r0
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d10c      	bne.n	80234e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80234ce:	68bb      	ldr	r3, [r7, #8]
 80234d0:	681b      	ldr	r3, [r3, #0]
 80234d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80234d6:	2be0      	cmp	r3, #224	; 0xe0
 80234d8:	d006      	beq.n	80234e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80234da:	68bb      	ldr	r3, [r7, #8]
 80234dc:	2b00      	cmp	r3, #0
 80234de:	d003      	beq.n	80234e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80234e0:	68bb      	ldr	r3, [r7, #8]
 80234e2:	681b      	ldr	r3, [r3, #0]
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	d102      	bne.n	80234ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80234e8:	f06f 030f 	mvn.w	r3, #15
 80234ec:	e101      	b.n	80236f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80234ee:	68fa      	ldr	r2, [r7, #12]
 80234f0:	2101      	movs	r1, #1
 80234f2:	68b8      	ldr	r0, [r7, #8]
 80234f4:	f7ff fb60 	bl	8022bb8 <etharp_find_entry>
 80234f8:	4603      	mov	r3, r0
 80234fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80234fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8023500:	2b00      	cmp	r3, #0
 8023502:	da02      	bge.n	802350a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8023504:	8a7b      	ldrh	r3, [r7, #18]
 8023506:	b25b      	sxtb	r3, r3
 8023508:	e0f3      	b.n	80236f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802350a:	8a7b      	ldrh	r3, [r7, #18]
 802350c:	2b7e      	cmp	r3, #126	; 0x7e
 802350e:	d906      	bls.n	802351e <etharp_query+0x7e>
 8023510:	4b7a      	ldr	r3, [pc, #488]	; (80236fc <etharp_query+0x25c>)
 8023512:	f240 32c1 	movw	r2, #961	; 0x3c1
 8023516:	497a      	ldr	r1, [pc, #488]	; (8023700 <etharp_query+0x260>)
 8023518:	487a      	ldr	r0, [pc, #488]	; (8023704 <etharp_query+0x264>)
 802351a:	f001 ff21 	bl	8025360 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802351e:	8a7b      	ldrh	r3, [r7, #18]
 8023520:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023522:	7c7a      	ldrb	r2, [r7, #17]
 8023524:	4978      	ldr	r1, [pc, #480]	; (8023708 <etharp_query+0x268>)
 8023526:	4613      	mov	r3, r2
 8023528:	005b      	lsls	r3, r3, #1
 802352a:	4413      	add	r3, r2
 802352c:	00db      	lsls	r3, r3, #3
 802352e:	440b      	add	r3, r1
 8023530:	3314      	adds	r3, #20
 8023532:	781b      	ldrb	r3, [r3, #0]
 8023534:	2b00      	cmp	r3, #0
 8023536:	d115      	bne.n	8023564 <etharp_query+0xc4>
    is_new_entry = 1;
 8023538:	2301      	movs	r3, #1
 802353a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802353c:	7c7a      	ldrb	r2, [r7, #17]
 802353e:	4972      	ldr	r1, [pc, #456]	; (8023708 <etharp_query+0x268>)
 8023540:	4613      	mov	r3, r2
 8023542:	005b      	lsls	r3, r3, #1
 8023544:	4413      	add	r3, r2
 8023546:	00db      	lsls	r3, r3, #3
 8023548:	440b      	add	r3, r1
 802354a:	3314      	adds	r3, #20
 802354c:	2201      	movs	r2, #1
 802354e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8023550:	7c7a      	ldrb	r2, [r7, #17]
 8023552:	496d      	ldr	r1, [pc, #436]	; (8023708 <etharp_query+0x268>)
 8023554:	4613      	mov	r3, r2
 8023556:	005b      	lsls	r3, r3, #1
 8023558:	4413      	add	r3, r2
 802355a:	00db      	lsls	r3, r3, #3
 802355c:	440b      	add	r3, r1
 802355e:	3308      	adds	r3, #8
 8023560:	68fa      	ldr	r2, [r7, #12]
 8023562:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8023564:	7c7a      	ldrb	r2, [r7, #17]
 8023566:	4968      	ldr	r1, [pc, #416]	; (8023708 <etharp_query+0x268>)
 8023568:	4613      	mov	r3, r2
 802356a:	005b      	lsls	r3, r3, #1
 802356c:	4413      	add	r3, r2
 802356e:	00db      	lsls	r3, r3, #3
 8023570:	440b      	add	r3, r1
 8023572:	3314      	adds	r3, #20
 8023574:	781b      	ldrb	r3, [r3, #0]
 8023576:	2b01      	cmp	r3, #1
 8023578:	d011      	beq.n	802359e <etharp_query+0xfe>
 802357a:	7c7a      	ldrb	r2, [r7, #17]
 802357c:	4962      	ldr	r1, [pc, #392]	; (8023708 <etharp_query+0x268>)
 802357e:	4613      	mov	r3, r2
 8023580:	005b      	lsls	r3, r3, #1
 8023582:	4413      	add	r3, r2
 8023584:	00db      	lsls	r3, r3, #3
 8023586:	440b      	add	r3, r1
 8023588:	3314      	adds	r3, #20
 802358a:	781b      	ldrb	r3, [r3, #0]
 802358c:	2b01      	cmp	r3, #1
 802358e:	d806      	bhi.n	802359e <etharp_query+0xfe>
 8023590:	4b5a      	ldr	r3, [pc, #360]	; (80236fc <etharp_query+0x25c>)
 8023592:	f240 32cd 	movw	r2, #973	; 0x3cd
 8023596:	495d      	ldr	r1, [pc, #372]	; (802370c <etharp_query+0x26c>)
 8023598:	485a      	ldr	r0, [pc, #360]	; (8023704 <etharp_query+0x264>)
 802359a:	f001 fee1 	bl	8025360 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 802359e:	6a3b      	ldr	r3, [r7, #32]
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	d102      	bne.n	80235aa <etharp_query+0x10a>
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	2b00      	cmp	r3, #0
 80235a8:	d10c      	bne.n	80235c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80235aa:	68b9      	ldr	r1, [r7, #8]
 80235ac:	68f8      	ldr	r0, [r7, #12]
 80235ae:	f000 f963 	bl	8023878 <etharp_request>
 80235b2:	4603      	mov	r3, r0
 80235b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	2b00      	cmp	r3, #0
 80235bc:	d102      	bne.n	80235c4 <etharp_query+0x124>
      return result;
 80235be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80235c2:	e096      	b.n	80236f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	d106      	bne.n	80235d8 <etharp_query+0x138>
 80235ca:	4b4c      	ldr	r3, [pc, #304]	; (80236fc <etharp_query+0x25c>)
 80235cc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80235d0:	494f      	ldr	r1, [pc, #316]	; (8023710 <etharp_query+0x270>)
 80235d2:	484c      	ldr	r0, [pc, #304]	; (8023704 <etharp_query+0x264>)
 80235d4:	f001 fec4 	bl	8025360 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80235d8:	7c7a      	ldrb	r2, [r7, #17]
 80235da:	494b      	ldr	r1, [pc, #300]	; (8023708 <etharp_query+0x268>)
 80235dc:	4613      	mov	r3, r2
 80235de:	005b      	lsls	r3, r3, #1
 80235e0:	4413      	add	r3, r2
 80235e2:	00db      	lsls	r3, r3, #3
 80235e4:	440b      	add	r3, r1
 80235e6:	3314      	adds	r3, #20
 80235e8:	781b      	ldrb	r3, [r3, #0]
 80235ea:	2b01      	cmp	r3, #1
 80235ec:	d917      	bls.n	802361e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80235ee:	4a49      	ldr	r2, [pc, #292]	; (8023714 <etharp_query+0x274>)
 80235f0:	7c7b      	ldrb	r3, [r7, #17]
 80235f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80235f4:	7c7a      	ldrb	r2, [r7, #17]
 80235f6:	4613      	mov	r3, r2
 80235f8:	005b      	lsls	r3, r3, #1
 80235fa:	4413      	add	r3, r2
 80235fc:	00db      	lsls	r3, r3, #3
 80235fe:	3308      	adds	r3, #8
 8023600:	4a41      	ldr	r2, [pc, #260]	; (8023708 <etharp_query+0x268>)
 8023602:	4413      	add	r3, r2
 8023604:	3304      	adds	r3, #4
 8023606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802360a:	9200      	str	r2, [sp, #0]
 802360c:	697a      	ldr	r2, [r7, #20]
 802360e:	6879      	ldr	r1, [r7, #4]
 8023610:	68f8      	ldr	r0, [r7, #12]
 8023612:	f001 fd09 	bl	8025028 <ethernet_output>
 8023616:	4603      	mov	r3, r0
 8023618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802361c:	e067      	b.n	80236ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802361e:	7c7a      	ldrb	r2, [r7, #17]
 8023620:	4939      	ldr	r1, [pc, #228]	; (8023708 <etharp_query+0x268>)
 8023622:	4613      	mov	r3, r2
 8023624:	005b      	lsls	r3, r3, #1
 8023626:	4413      	add	r3, r2
 8023628:	00db      	lsls	r3, r3, #3
 802362a:	440b      	add	r3, r1
 802362c:	3314      	adds	r3, #20
 802362e:	781b      	ldrb	r3, [r3, #0]
 8023630:	2b01      	cmp	r3, #1
 8023632:	d15c      	bne.n	80236ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8023634:	2300      	movs	r3, #0
 8023636:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802363c:	e01c      	b.n	8023678 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802363e:	69fb      	ldr	r3, [r7, #28]
 8023640:	895a      	ldrh	r2, [r3, #10]
 8023642:	69fb      	ldr	r3, [r7, #28]
 8023644:	891b      	ldrh	r3, [r3, #8]
 8023646:	429a      	cmp	r2, r3
 8023648:	d10a      	bne.n	8023660 <etharp_query+0x1c0>
 802364a:	69fb      	ldr	r3, [r7, #28]
 802364c:	681b      	ldr	r3, [r3, #0]
 802364e:	2b00      	cmp	r3, #0
 8023650:	d006      	beq.n	8023660 <etharp_query+0x1c0>
 8023652:	4b2a      	ldr	r3, [pc, #168]	; (80236fc <etharp_query+0x25c>)
 8023654:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8023658:	492f      	ldr	r1, [pc, #188]	; (8023718 <etharp_query+0x278>)
 802365a:	482a      	ldr	r0, [pc, #168]	; (8023704 <etharp_query+0x264>)
 802365c:	f001 fe80 	bl	8025360 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8023660:	69fb      	ldr	r3, [r7, #28]
 8023662:	7b1b      	ldrb	r3, [r3, #12]
 8023664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023668:	2b00      	cmp	r3, #0
 802366a:	d002      	beq.n	8023672 <etharp_query+0x1d2>
        copy_needed = 1;
 802366c:	2301      	movs	r3, #1
 802366e:	61bb      	str	r3, [r7, #24]
        break;
 8023670:	e005      	b.n	802367e <etharp_query+0x1de>
      }
      p = p->next;
 8023672:	69fb      	ldr	r3, [r7, #28]
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023678:	69fb      	ldr	r3, [r7, #28]
 802367a:	2b00      	cmp	r3, #0
 802367c:	d1df      	bne.n	802363e <etharp_query+0x19e>
    }
    if (copy_needed) {
 802367e:	69bb      	ldr	r3, [r7, #24]
 8023680:	2b00      	cmp	r3, #0
 8023682:	d007      	beq.n	8023694 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8023684:	687a      	ldr	r2, [r7, #4]
 8023686:	f44f 7120 	mov.w	r1, #640	; 0x280
 802368a:	200e      	movs	r0, #14
 802368c:	f7fe fbbc 	bl	8021e08 <pbuf_clone>
 8023690:	61f8      	str	r0, [r7, #28]
 8023692:	e004      	b.n	802369e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8023698:	69f8      	ldr	r0, [r7, #28]
 802369a:	f7fe f9c9 	bl	8021a30 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 802369e:	69fb      	ldr	r3, [r7, #28]
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d021      	beq.n	80236e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80236a4:	7c7a      	ldrb	r2, [r7, #17]
 80236a6:	4918      	ldr	r1, [pc, #96]	; (8023708 <etharp_query+0x268>)
 80236a8:	4613      	mov	r3, r2
 80236aa:	005b      	lsls	r3, r3, #1
 80236ac:	4413      	add	r3, r2
 80236ae:	00db      	lsls	r3, r3, #3
 80236b0:	440b      	add	r3, r1
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	2b00      	cmp	r3, #0
 80236b6:	d00a      	beq.n	80236ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80236b8:	7c7a      	ldrb	r2, [r7, #17]
 80236ba:	4913      	ldr	r1, [pc, #76]	; (8023708 <etharp_query+0x268>)
 80236bc:	4613      	mov	r3, r2
 80236be:	005b      	lsls	r3, r3, #1
 80236c0:	4413      	add	r3, r2
 80236c2:	00db      	lsls	r3, r3, #3
 80236c4:	440b      	add	r3, r1
 80236c6:	681b      	ldr	r3, [r3, #0]
 80236c8:	4618      	mov	r0, r3
 80236ca:	f7fe f911 	bl	80218f0 <pbuf_free>
      }
      arp_table[i].q = p;
 80236ce:	7c7a      	ldrb	r2, [r7, #17]
 80236d0:	490d      	ldr	r1, [pc, #52]	; (8023708 <etharp_query+0x268>)
 80236d2:	4613      	mov	r3, r2
 80236d4:	005b      	lsls	r3, r3, #1
 80236d6:	4413      	add	r3, r2
 80236d8:	00db      	lsls	r3, r3, #3
 80236da:	440b      	add	r3, r1
 80236dc:	69fa      	ldr	r2, [r7, #28]
 80236de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80236e0:	2300      	movs	r3, #0
 80236e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80236e6:	e002      	b.n	80236ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80236e8:	23ff      	movs	r3, #255	; 0xff
 80236ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80236ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80236f2:	4618      	mov	r0, r3
 80236f4:	3728      	adds	r7, #40	; 0x28
 80236f6:	46bd      	mov	sp, r7
 80236f8:	bd80      	pop	{r7, pc}
 80236fa:	bf00      	nop
 80236fc:	0802b78c 	.word	0x0802b78c
 8023700:	0802b938 	.word	0x0802b938
 8023704:	0802b804 	.word	0x0802b804
 8023708:	20014b30 	.word	0x20014b30
 802370c:	0802b948 	.word	0x0802b948
 8023710:	0802b92c 	.word	0x0802b92c
 8023714:	20014fe0 	.word	0x20014fe0
 8023718:	0802b970 	.word	0x0802b970

0802371c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802371c:	b580      	push	{r7, lr}
 802371e:	b08a      	sub	sp, #40	; 0x28
 8023720:	af02      	add	r7, sp, #8
 8023722:	60f8      	str	r0, [r7, #12]
 8023724:	60b9      	str	r1, [r7, #8]
 8023726:	607a      	str	r2, [r7, #4]
 8023728:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802372a:	2300      	movs	r3, #0
 802372c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802372e:	68fb      	ldr	r3, [r7, #12]
 8023730:	2b00      	cmp	r3, #0
 8023732:	d106      	bne.n	8023742 <etharp_raw+0x26>
 8023734:	4b3a      	ldr	r3, [pc, #232]	; (8023820 <etharp_raw+0x104>)
 8023736:	f240 4257 	movw	r2, #1111	; 0x457
 802373a:	493a      	ldr	r1, [pc, #232]	; (8023824 <etharp_raw+0x108>)
 802373c:	483a      	ldr	r0, [pc, #232]	; (8023828 <etharp_raw+0x10c>)
 802373e:	f001 fe0f 	bl	8025360 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8023742:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023746:	211c      	movs	r1, #28
 8023748:	200e      	movs	r0, #14
 802374a:	f7fd fdef 	bl	802132c <pbuf_alloc>
 802374e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8023750:	69bb      	ldr	r3, [r7, #24]
 8023752:	2b00      	cmp	r3, #0
 8023754:	d102      	bne.n	802375c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8023756:	f04f 33ff 	mov.w	r3, #4294967295
 802375a:	e05d      	b.n	8023818 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 802375c:	69bb      	ldr	r3, [r7, #24]
 802375e:	895b      	ldrh	r3, [r3, #10]
 8023760:	2b1b      	cmp	r3, #27
 8023762:	d806      	bhi.n	8023772 <etharp_raw+0x56>
 8023764:	4b2e      	ldr	r3, [pc, #184]	; (8023820 <etharp_raw+0x104>)
 8023766:	f240 4262 	movw	r2, #1122	; 0x462
 802376a:	4930      	ldr	r1, [pc, #192]	; (802382c <etharp_raw+0x110>)
 802376c:	482e      	ldr	r0, [pc, #184]	; (8023828 <etharp_raw+0x10c>)
 802376e:	f001 fdf7 	bl	8025360 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8023772:	69bb      	ldr	r3, [r7, #24]
 8023774:	685b      	ldr	r3, [r3, #4]
 8023776:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8023778:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802377a:	4618      	mov	r0, r3
 802377c:	f7fc fcdc 	bl	8020138 <lwip_htons>
 8023780:	4603      	mov	r3, r0
 8023782:	461a      	mov	r2, r3
 8023784:	697b      	ldr	r3, [r7, #20]
 8023786:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8023788:	68fb      	ldr	r3, [r7, #12]
 802378a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802378e:	2b06      	cmp	r3, #6
 8023790:	d006      	beq.n	80237a0 <etharp_raw+0x84>
 8023792:	4b23      	ldr	r3, [pc, #140]	; (8023820 <etharp_raw+0x104>)
 8023794:	f240 4269 	movw	r2, #1129	; 0x469
 8023798:	4925      	ldr	r1, [pc, #148]	; (8023830 <etharp_raw+0x114>)
 802379a:	4823      	ldr	r0, [pc, #140]	; (8023828 <etharp_raw+0x10c>)
 802379c:	f001 fde0 	bl	8025360 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80237a0:	697b      	ldr	r3, [r7, #20]
 80237a2:	3308      	adds	r3, #8
 80237a4:	2206      	movs	r2, #6
 80237a6:	6839      	ldr	r1, [r7, #0]
 80237a8:	4618      	mov	r0, r3
 80237aa:	f001 fcc9 	bl	8025140 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80237ae:	697b      	ldr	r3, [r7, #20]
 80237b0:	3312      	adds	r3, #18
 80237b2:	2206      	movs	r2, #6
 80237b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80237b6:	4618      	mov	r0, r3
 80237b8:	f001 fcc2 	bl	8025140 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80237bc:	697b      	ldr	r3, [r7, #20]
 80237be:	330e      	adds	r3, #14
 80237c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80237c2:	6812      	ldr	r2, [r2, #0]
 80237c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80237c6:	697b      	ldr	r3, [r7, #20]
 80237c8:	3318      	adds	r3, #24
 80237ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80237cc:	6812      	ldr	r2, [r2, #0]
 80237ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80237d0:	697b      	ldr	r3, [r7, #20]
 80237d2:	2200      	movs	r2, #0
 80237d4:	701a      	strb	r2, [r3, #0]
 80237d6:	2200      	movs	r2, #0
 80237d8:	f042 0201 	orr.w	r2, r2, #1
 80237dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80237de:	697b      	ldr	r3, [r7, #20]
 80237e0:	2200      	movs	r2, #0
 80237e2:	f042 0208 	orr.w	r2, r2, #8
 80237e6:	709a      	strb	r2, [r3, #2]
 80237e8:	2200      	movs	r2, #0
 80237ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80237ec:	697b      	ldr	r3, [r7, #20]
 80237ee:	2206      	movs	r2, #6
 80237f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80237f2:	697b      	ldr	r3, [r7, #20]
 80237f4:	2204      	movs	r2, #4
 80237f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80237f8:	f640 0306 	movw	r3, #2054	; 0x806
 80237fc:	9300      	str	r3, [sp, #0]
 80237fe:	687b      	ldr	r3, [r7, #4]
 8023800:	68ba      	ldr	r2, [r7, #8]
 8023802:	69b9      	ldr	r1, [r7, #24]
 8023804:	68f8      	ldr	r0, [r7, #12]
 8023806:	f001 fc0f 	bl	8025028 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802380a:	69b8      	ldr	r0, [r7, #24]
 802380c:	f7fe f870 	bl	80218f0 <pbuf_free>
  p = NULL;
 8023810:	2300      	movs	r3, #0
 8023812:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8023814:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8023818:	4618      	mov	r0, r3
 802381a:	3720      	adds	r7, #32
 802381c:	46bd      	mov	sp, r7
 802381e:	bd80      	pop	{r7, pc}
 8023820:	0802b78c 	.word	0x0802b78c
 8023824:	0802b8dc 	.word	0x0802b8dc
 8023828:	0802b804 	.word	0x0802b804
 802382c:	0802b98c 	.word	0x0802b98c
 8023830:	0802b9c0 	.word	0x0802b9c0

08023834 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8023834:	b580      	push	{r7, lr}
 8023836:	b088      	sub	sp, #32
 8023838:	af04      	add	r7, sp, #16
 802383a:	60f8      	str	r0, [r7, #12]
 802383c:	60b9      	str	r1, [r7, #8]
 802383e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023840:	68fb      	ldr	r3, [r7, #12]
 8023842:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023846:	68fb      	ldr	r3, [r7, #12]
 8023848:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 802384c:	68fb      	ldr	r3, [r7, #12]
 802384e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023850:	2201      	movs	r2, #1
 8023852:	9203      	str	r2, [sp, #12]
 8023854:	68ba      	ldr	r2, [r7, #8]
 8023856:	9202      	str	r2, [sp, #8]
 8023858:	4a06      	ldr	r2, [pc, #24]	; (8023874 <etharp_request_dst+0x40>)
 802385a:	9201      	str	r2, [sp, #4]
 802385c:	9300      	str	r3, [sp, #0]
 802385e:	4603      	mov	r3, r0
 8023860:	687a      	ldr	r2, [r7, #4]
 8023862:	68f8      	ldr	r0, [r7, #12]
 8023864:	f7ff ff5a 	bl	802371c <etharp_raw>
 8023868:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802386a:	4618      	mov	r0, r3
 802386c:	3710      	adds	r7, #16
 802386e:	46bd      	mov	sp, r7
 8023870:	bd80      	pop	{r7, pc}
 8023872:	bf00      	nop
 8023874:	0802c314 	.word	0x0802c314

08023878 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023878:	b580      	push	{r7, lr}
 802387a:	b082      	sub	sp, #8
 802387c:	af00      	add	r7, sp, #0
 802387e:	6078      	str	r0, [r7, #4]
 8023880:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8023882:	4a05      	ldr	r2, [pc, #20]	; (8023898 <etharp_request+0x20>)
 8023884:	6839      	ldr	r1, [r7, #0]
 8023886:	6878      	ldr	r0, [r7, #4]
 8023888:	f7ff ffd4 	bl	8023834 <etharp_request_dst>
 802388c:	4603      	mov	r3, r0
}
 802388e:	4618      	mov	r0, r3
 8023890:	3708      	adds	r7, #8
 8023892:	46bd      	mov	sp, r7
 8023894:	bd80      	pop	{r7, pc}
 8023896:	bf00      	nop
 8023898:	0802c30c 	.word	0x0802c30c

0802389c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 802389c:	b580      	push	{r7, lr}
 802389e:	b08e      	sub	sp, #56	; 0x38
 80238a0:	af04      	add	r7, sp, #16
 80238a2:	6078      	str	r0, [r7, #4]
 80238a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80238a6:	4b79      	ldr	r3, [pc, #484]	; (8023a8c <icmp_input+0x1f0>)
 80238a8:	689b      	ldr	r3, [r3, #8]
 80238aa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80238ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238ae:	781b      	ldrb	r3, [r3, #0]
 80238b0:	f003 030f 	and.w	r3, r3, #15
 80238b4:	b2db      	uxtb	r3, r3
 80238b6:	009b      	lsls	r3, r3, #2
 80238b8:	b2db      	uxtb	r3, r3
 80238ba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80238bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80238be:	2b13      	cmp	r3, #19
 80238c0:	f240 80cd 	bls.w	8023a5e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	895b      	ldrh	r3, [r3, #10]
 80238c8:	2b03      	cmp	r3, #3
 80238ca:	f240 80ca 	bls.w	8023a62 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	685b      	ldr	r3, [r3, #4]
 80238d2:	781b      	ldrb	r3, [r3, #0]
 80238d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80238d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80238dc:	2b00      	cmp	r3, #0
 80238de:	f000 80b7 	beq.w	8023a50 <icmp_input+0x1b4>
 80238e2:	2b08      	cmp	r3, #8
 80238e4:	f040 80b7 	bne.w	8023a56 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80238e8:	4b69      	ldr	r3, [pc, #420]	; (8023a90 <icmp_input+0x1f4>)
 80238ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80238ec:	4b67      	ldr	r3, [pc, #412]	; (8023a8c <icmp_input+0x1f0>)
 80238ee:	695b      	ldr	r3, [r3, #20]
 80238f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80238f4:	2be0      	cmp	r3, #224	; 0xe0
 80238f6:	f000 80bb 	beq.w	8023a70 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80238fa:	4b64      	ldr	r3, [pc, #400]	; (8023a8c <icmp_input+0x1f0>)
 80238fc:	695b      	ldr	r3, [r3, #20]
 80238fe:	4a63      	ldr	r2, [pc, #396]	; (8023a8c <icmp_input+0x1f0>)
 8023900:	6812      	ldr	r2, [r2, #0]
 8023902:	4611      	mov	r1, r2
 8023904:	4618      	mov	r0, r3
 8023906:	f000 fbf1 	bl	80240ec <ip4_addr_isbroadcast_u32>
 802390a:	4603      	mov	r3, r0
 802390c:	2b00      	cmp	r3, #0
 802390e:	f040 80b1 	bne.w	8023a74 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8023912:	687b      	ldr	r3, [r7, #4]
 8023914:	891b      	ldrh	r3, [r3, #8]
 8023916:	2b07      	cmp	r3, #7
 8023918:	f240 80a5 	bls.w	8023a66 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802391c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802391e:	330e      	adds	r3, #14
 8023920:	4619      	mov	r1, r3
 8023922:	6878      	ldr	r0, [r7, #4]
 8023924:	f7fd ff4e 	bl	80217c4 <pbuf_add_header>
 8023928:	4603      	mov	r3, r0
 802392a:	2b00      	cmp	r3, #0
 802392c:	d04b      	beq.n	80239c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	891a      	ldrh	r2, [r3, #8]
 8023932:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023934:	4413      	add	r3, r2
 8023936:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	891b      	ldrh	r3, [r3, #8]
 802393c:	8b7a      	ldrh	r2, [r7, #26]
 802393e:	429a      	cmp	r2, r3
 8023940:	f0c0 809a 	bcc.w	8023a78 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8023944:	8b7b      	ldrh	r3, [r7, #26]
 8023946:	f44f 7220 	mov.w	r2, #640	; 0x280
 802394a:	4619      	mov	r1, r3
 802394c:	200e      	movs	r0, #14
 802394e:	f7fd fced 	bl	802132c <pbuf_alloc>
 8023952:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8023954:	697b      	ldr	r3, [r7, #20]
 8023956:	2b00      	cmp	r3, #0
 8023958:	f000 8090 	beq.w	8023a7c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 802395c:	697b      	ldr	r3, [r7, #20]
 802395e:	895b      	ldrh	r3, [r3, #10]
 8023960:	461a      	mov	r2, r3
 8023962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023964:	3308      	adds	r3, #8
 8023966:	429a      	cmp	r2, r3
 8023968:	d203      	bcs.n	8023972 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802396a:	6978      	ldr	r0, [r7, #20]
 802396c:	f7fd ffc0 	bl	80218f0 <pbuf_free>
          goto icmperr;
 8023970:	e085      	b.n	8023a7e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8023972:	697b      	ldr	r3, [r7, #20]
 8023974:	685b      	ldr	r3, [r3, #4]
 8023976:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8023978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802397a:	4618      	mov	r0, r3
 802397c:	f001 fbe0 	bl	8025140 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8023980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023982:	4619      	mov	r1, r3
 8023984:	6978      	ldr	r0, [r7, #20]
 8023986:	f7fd ff2d 	bl	80217e4 <pbuf_remove_header>
 802398a:	4603      	mov	r3, r0
 802398c:	2b00      	cmp	r3, #0
 802398e:	d009      	beq.n	80239a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8023990:	4b40      	ldr	r3, [pc, #256]	; (8023a94 <icmp_input+0x1f8>)
 8023992:	22b6      	movs	r2, #182	; 0xb6
 8023994:	4940      	ldr	r1, [pc, #256]	; (8023a98 <icmp_input+0x1fc>)
 8023996:	4841      	ldr	r0, [pc, #260]	; (8023a9c <icmp_input+0x200>)
 8023998:	f001 fce2 	bl	8025360 <iprintf>
          pbuf_free(r);
 802399c:	6978      	ldr	r0, [r7, #20]
 802399e:	f7fd ffa7 	bl	80218f0 <pbuf_free>
          goto icmperr;
 80239a2:	e06c      	b.n	8023a7e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80239a4:	6879      	ldr	r1, [r7, #4]
 80239a6:	6978      	ldr	r0, [r7, #20]
 80239a8:	f7fe f8ca 	bl	8021b40 <pbuf_copy>
 80239ac:	4603      	mov	r3, r0
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	d003      	beq.n	80239ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80239b2:	6978      	ldr	r0, [r7, #20]
 80239b4:	f7fd ff9c 	bl	80218f0 <pbuf_free>
          goto icmperr;
 80239b8:	e061      	b.n	8023a7e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80239ba:	6878      	ldr	r0, [r7, #4]
 80239bc:	f7fd ff98 	bl	80218f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80239c0:	697b      	ldr	r3, [r7, #20]
 80239c2:	607b      	str	r3, [r7, #4]
 80239c4:	e00f      	b.n	80239e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80239c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80239c8:	330e      	adds	r3, #14
 80239ca:	4619      	mov	r1, r3
 80239cc:	6878      	ldr	r0, [r7, #4]
 80239ce:	f7fd ff09 	bl	80217e4 <pbuf_remove_header>
 80239d2:	4603      	mov	r3, r0
 80239d4:	2b00      	cmp	r3, #0
 80239d6:	d006      	beq.n	80239e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80239d8:	4b2e      	ldr	r3, [pc, #184]	; (8023a94 <icmp_input+0x1f8>)
 80239da:	22c7      	movs	r2, #199	; 0xc7
 80239dc:	4930      	ldr	r1, [pc, #192]	; (8023aa0 <icmp_input+0x204>)
 80239de:	482f      	ldr	r0, [pc, #188]	; (8023a9c <icmp_input+0x200>)
 80239e0:	f001 fcbe 	bl	8025360 <iprintf>
          goto icmperr;
 80239e4:	e04b      	b.n	8023a7e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	685b      	ldr	r3, [r3, #4]
 80239ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80239ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80239ee:	4619      	mov	r1, r3
 80239f0:	6878      	ldr	r0, [r7, #4]
 80239f2:	f7fd fee7 	bl	80217c4 <pbuf_add_header>
 80239f6:	4603      	mov	r3, r0
 80239f8:	2b00      	cmp	r3, #0
 80239fa:	d12b      	bne.n	8023a54 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	685b      	ldr	r3, [r3, #4]
 8023a00:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8023a02:	69fb      	ldr	r3, [r7, #28]
 8023a04:	681a      	ldr	r2, [r3, #0]
 8023a06:	68fb      	ldr	r3, [r7, #12]
 8023a08:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023a0a:	4b20      	ldr	r3, [pc, #128]	; (8023a8c <icmp_input+0x1f0>)
 8023a0c:	691a      	ldr	r2, [r3, #16]
 8023a0e:	68fb      	ldr	r3, [r7, #12]
 8023a10:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8023a12:	693b      	ldr	r3, [r7, #16]
 8023a14:	2200      	movs	r2, #0
 8023a16:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8023a18:	693b      	ldr	r3, [r7, #16]
 8023a1a:	2200      	movs	r2, #0
 8023a1c:	709a      	strb	r2, [r3, #2]
 8023a1e:	2200      	movs	r2, #0
 8023a20:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023a22:	68fb      	ldr	r3, [r7, #12]
 8023a24:	22ff      	movs	r2, #255	; 0xff
 8023a26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8023a28:	68fb      	ldr	r3, [r7, #12]
 8023a2a:	2200      	movs	r2, #0
 8023a2c:	729a      	strb	r2, [r3, #10]
 8023a2e:	2200      	movs	r2, #0
 8023a30:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023a32:	683b      	ldr	r3, [r7, #0]
 8023a34:	9302      	str	r3, [sp, #8]
 8023a36:	2301      	movs	r3, #1
 8023a38:	9301      	str	r3, [sp, #4]
 8023a3a:	2300      	movs	r3, #0
 8023a3c:	9300      	str	r3, [sp, #0]
 8023a3e:	23ff      	movs	r3, #255	; 0xff
 8023a40:	2200      	movs	r2, #0
 8023a42:	69f9      	ldr	r1, [r7, #28]
 8023a44:	6878      	ldr	r0, [r7, #4]
 8023a46:	f000 fa6b 	bl	8023f20 <ip4_output_if>
 8023a4a:	4603      	mov	r3, r0
 8023a4c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8023a4e:	e001      	b.n	8023a54 <icmp_input+0x1b8>
      break;
 8023a50:	bf00      	nop
 8023a52:	e000      	b.n	8023a56 <icmp_input+0x1ba>
      break;
 8023a54:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8023a56:	6878      	ldr	r0, [r7, #4]
 8023a58:	f7fd ff4a 	bl	80218f0 <pbuf_free>
  return;
 8023a5c:	e013      	b.n	8023a86 <icmp_input+0x1ea>
    goto lenerr;
 8023a5e:	bf00      	nop
 8023a60:	e002      	b.n	8023a68 <icmp_input+0x1cc>
    goto lenerr;
 8023a62:	bf00      	nop
 8023a64:	e000      	b.n	8023a68 <icmp_input+0x1cc>
        goto lenerr;
 8023a66:	bf00      	nop
lenerr:
  pbuf_free(p);
 8023a68:	6878      	ldr	r0, [r7, #4]
 8023a6a:	f7fd ff41 	bl	80218f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8023a6e:	e00a      	b.n	8023a86 <icmp_input+0x1ea>
        goto icmperr;
 8023a70:	bf00      	nop
 8023a72:	e004      	b.n	8023a7e <icmp_input+0x1e2>
        goto icmperr;
 8023a74:	bf00      	nop
 8023a76:	e002      	b.n	8023a7e <icmp_input+0x1e2>
          goto icmperr;
 8023a78:	bf00      	nop
 8023a7a:	e000      	b.n	8023a7e <icmp_input+0x1e2>
          goto icmperr;
 8023a7c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8023a7e:	6878      	ldr	r0, [r7, #4]
 8023a80:	f7fd ff36 	bl	80218f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8023a84:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8023a86:	3728      	adds	r7, #40	; 0x28
 8023a88:	46bd      	mov	sp, r7
 8023a8a:	bd80      	pop	{r7, pc}
 8023a8c:	200114c8 	.word	0x200114c8
 8023a90:	200114dc 	.word	0x200114dc
 8023a94:	0802ba04 	.word	0x0802ba04
 8023a98:	0802ba3c 	.word	0x0802ba3c
 8023a9c:	0802ba74 	.word	0x0802ba74
 8023aa0:	0802ba9c 	.word	0x0802ba9c

08023aa4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8023aa4:	b580      	push	{r7, lr}
 8023aa6:	b082      	sub	sp, #8
 8023aa8:	af00      	add	r7, sp, #0
 8023aaa:	6078      	str	r0, [r7, #4]
 8023aac:	460b      	mov	r3, r1
 8023aae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8023ab0:	78fb      	ldrb	r3, [r7, #3]
 8023ab2:	461a      	mov	r2, r3
 8023ab4:	2103      	movs	r1, #3
 8023ab6:	6878      	ldr	r0, [r7, #4]
 8023ab8:	f000 f814 	bl	8023ae4 <icmp_send_response>
}
 8023abc:	bf00      	nop
 8023abe:	3708      	adds	r7, #8
 8023ac0:	46bd      	mov	sp, r7
 8023ac2:	bd80      	pop	{r7, pc}

08023ac4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8023ac4:	b580      	push	{r7, lr}
 8023ac6:	b082      	sub	sp, #8
 8023ac8:	af00      	add	r7, sp, #0
 8023aca:	6078      	str	r0, [r7, #4]
 8023acc:	460b      	mov	r3, r1
 8023ace:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8023ad0:	78fb      	ldrb	r3, [r7, #3]
 8023ad2:	461a      	mov	r2, r3
 8023ad4:	210b      	movs	r1, #11
 8023ad6:	6878      	ldr	r0, [r7, #4]
 8023ad8:	f000 f804 	bl	8023ae4 <icmp_send_response>
}
 8023adc:	bf00      	nop
 8023ade:	3708      	adds	r7, #8
 8023ae0:	46bd      	mov	sp, r7
 8023ae2:	bd80      	pop	{r7, pc}

08023ae4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023ae4:	b580      	push	{r7, lr}
 8023ae6:	b08c      	sub	sp, #48	; 0x30
 8023ae8:	af04      	add	r7, sp, #16
 8023aea:	6078      	str	r0, [r7, #4]
 8023aec:	460b      	mov	r3, r1
 8023aee:	70fb      	strb	r3, [r7, #3]
 8023af0:	4613      	mov	r3, r2
 8023af2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8023af4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023af8:	2124      	movs	r1, #36	; 0x24
 8023afa:	2022      	movs	r0, #34	; 0x22
 8023afc:	f7fd fc16 	bl	802132c <pbuf_alloc>
 8023b00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8023b02:	69fb      	ldr	r3, [r7, #28]
 8023b04:	2b00      	cmp	r3, #0
 8023b06:	d04c      	beq.n	8023ba2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023b08:	69fb      	ldr	r3, [r7, #28]
 8023b0a:	895b      	ldrh	r3, [r3, #10]
 8023b0c:	2b23      	cmp	r3, #35	; 0x23
 8023b0e:	d806      	bhi.n	8023b1e <icmp_send_response+0x3a>
 8023b10:	4b26      	ldr	r3, [pc, #152]	; (8023bac <icmp_send_response+0xc8>)
 8023b12:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023b16:	4926      	ldr	r1, [pc, #152]	; (8023bb0 <icmp_send_response+0xcc>)
 8023b18:	4826      	ldr	r0, [pc, #152]	; (8023bb4 <icmp_send_response+0xd0>)
 8023b1a:	f001 fc21 	bl	8025360 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	685b      	ldr	r3, [r3, #4]
 8023b22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8023b24:	69fb      	ldr	r3, [r7, #28]
 8023b26:	685b      	ldr	r3, [r3, #4]
 8023b28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8023b2a:	697b      	ldr	r3, [r7, #20]
 8023b2c:	78fa      	ldrb	r2, [r7, #3]
 8023b2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8023b30:	697b      	ldr	r3, [r7, #20]
 8023b32:	78ba      	ldrb	r2, [r7, #2]
 8023b34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8023b36:	697b      	ldr	r3, [r7, #20]
 8023b38:	2200      	movs	r2, #0
 8023b3a:	711a      	strb	r2, [r3, #4]
 8023b3c:	2200      	movs	r2, #0
 8023b3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8023b40:	697b      	ldr	r3, [r7, #20]
 8023b42:	2200      	movs	r2, #0
 8023b44:	719a      	strb	r2, [r3, #6]
 8023b46:	2200      	movs	r2, #0
 8023b48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023b4a:	69fb      	ldr	r3, [r7, #28]
 8023b4c:	685b      	ldr	r3, [r3, #4]
 8023b4e:	f103 0008 	add.w	r0, r3, #8
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	685b      	ldr	r3, [r3, #4]
 8023b56:	221c      	movs	r2, #28
 8023b58:	4619      	mov	r1, r3
 8023b5a:	f001 faf1 	bl	8025140 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8023b5e:	69bb      	ldr	r3, [r7, #24]
 8023b60:	68db      	ldr	r3, [r3, #12]
 8023b62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8023b64:	f107 030c 	add.w	r3, r7, #12
 8023b68:	4618      	mov	r0, r3
 8023b6a:	f000 f825 	bl	8023bb8 <ip4_route>
 8023b6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8023b70:	693b      	ldr	r3, [r7, #16]
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	d011      	beq.n	8023b9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8023b76:	697b      	ldr	r3, [r7, #20]
 8023b78:	2200      	movs	r2, #0
 8023b7a:	709a      	strb	r2, [r3, #2]
 8023b7c:	2200      	movs	r2, #0
 8023b7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023b80:	f107 020c 	add.w	r2, r7, #12
 8023b84:	693b      	ldr	r3, [r7, #16]
 8023b86:	9302      	str	r3, [sp, #8]
 8023b88:	2301      	movs	r3, #1
 8023b8a:	9301      	str	r3, [sp, #4]
 8023b8c:	2300      	movs	r3, #0
 8023b8e:	9300      	str	r3, [sp, #0]
 8023b90:	23ff      	movs	r3, #255	; 0xff
 8023b92:	2100      	movs	r1, #0
 8023b94:	69f8      	ldr	r0, [r7, #28]
 8023b96:	f000 f9c3 	bl	8023f20 <ip4_output_if>
  }
  pbuf_free(q);
 8023b9a:	69f8      	ldr	r0, [r7, #28]
 8023b9c:	f7fd fea8 	bl	80218f0 <pbuf_free>
 8023ba0:	e000      	b.n	8023ba4 <icmp_send_response+0xc0>
    return;
 8023ba2:	bf00      	nop
}
 8023ba4:	3720      	adds	r7, #32
 8023ba6:	46bd      	mov	sp, r7
 8023ba8:	bd80      	pop	{r7, pc}
 8023baa:	bf00      	nop
 8023bac:	0802ba04 	.word	0x0802ba04
 8023bb0:	0802bad0 	.word	0x0802bad0
 8023bb4:	0802ba74 	.word	0x0802ba74

08023bb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8023bb8:	b480      	push	{r7}
 8023bba:	b085      	sub	sp, #20
 8023bbc:	af00      	add	r7, sp, #0
 8023bbe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8023bc0:	4b33      	ldr	r3, [pc, #204]	; (8023c90 <ip4_route+0xd8>)
 8023bc2:	681b      	ldr	r3, [r3, #0]
 8023bc4:	60fb      	str	r3, [r7, #12]
 8023bc6:	e036      	b.n	8023c36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023bc8:	68fb      	ldr	r3, [r7, #12]
 8023bca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023bce:	f003 0301 	and.w	r3, r3, #1
 8023bd2:	b2db      	uxtb	r3, r3
 8023bd4:	2b00      	cmp	r3, #0
 8023bd6:	d02b      	beq.n	8023c30 <ip4_route+0x78>
 8023bd8:	68fb      	ldr	r3, [r7, #12]
 8023bda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023bde:	089b      	lsrs	r3, r3, #2
 8023be0:	f003 0301 	and.w	r3, r3, #1
 8023be4:	b2db      	uxtb	r3, r3
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d022      	beq.n	8023c30 <ip4_route+0x78>
 8023bea:	68fb      	ldr	r3, [r7, #12]
 8023bec:	3304      	adds	r3, #4
 8023bee:	681b      	ldr	r3, [r3, #0]
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	d01d      	beq.n	8023c30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8023bf4:	687b      	ldr	r3, [r7, #4]
 8023bf6:	681a      	ldr	r2, [r3, #0]
 8023bf8:	68fb      	ldr	r3, [r7, #12]
 8023bfa:	3304      	adds	r3, #4
 8023bfc:	681b      	ldr	r3, [r3, #0]
 8023bfe:	405a      	eors	r2, r3
 8023c00:	68fb      	ldr	r3, [r7, #12]
 8023c02:	3308      	adds	r3, #8
 8023c04:	681b      	ldr	r3, [r3, #0]
 8023c06:	4013      	ands	r3, r2
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	d101      	bne.n	8023c10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8023c0c:	68fb      	ldr	r3, [r7, #12]
 8023c0e:	e038      	b.n	8023c82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8023c10:	68fb      	ldr	r3, [r7, #12]
 8023c12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023c16:	f003 0302 	and.w	r3, r3, #2
 8023c1a:	2b00      	cmp	r3, #0
 8023c1c:	d108      	bne.n	8023c30 <ip4_route+0x78>
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	681a      	ldr	r2, [r3, #0]
 8023c22:	68fb      	ldr	r3, [r7, #12]
 8023c24:	330c      	adds	r3, #12
 8023c26:	681b      	ldr	r3, [r3, #0]
 8023c28:	429a      	cmp	r2, r3
 8023c2a:	d101      	bne.n	8023c30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8023c2c:	68fb      	ldr	r3, [r7, #12]
 8023c2e:	e028      	b.n	8023c82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8023c30:	68fb      	ldr	r3, [r7, #12]
 8023c32:	681b      	ldr	r3, [r3, #0]
 8023c34:	60fb      	str	r3, [r7, #12]
 8023c36:	68fb      	ldr	r3, [r7, #12]
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d1c5      	bne.n	8023bc8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8023c3c:	4b15      	ldr	r3, [pc, #84]	; (8023c94 <ip4_route+0xdc>)
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	2b00      	cmp	r3, #0
 8023c42:	d01a      	beq.n	8023c7a <ip4_route+0xc2>
 8023c44:	4b13      	ldr	r3, [pc, #76]	; (8023c94 <ip4_route+0xdc>)
 8023c46:	681b      	ldr	r3, [r3, #0]
 8023c48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023c4c:	f003 0301 	and.w	r3, r3, #1
 8023c50:	2b00      	cmp	r3, #0
 8023c52:	d012      	beq.n	8023c7a <ip4_route+0xc2>
 8023c54:	4b0f      	ldr	r3, [pc, #60]	; (8023c94 <ip4_route+0xdc>)
 8023c56:	681b      	ldr	r3, [r3, #0]
 8023c58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023c5c:	f003 0304 	and.w	r3, r3, #4
 8023c60:	2b00      	cmp	r3, #0
 8023c62:	d00a      	beq.n	8023c7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023c64:	4b0b      	ldr	r3, [pc, #44]	; (8023c94 <ip4_route+0xdc>)
 8023c66:	681b      	ldr	r3, [r3, #0]
 8023c68:	3304      	adds	r3, #4
 8023c6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8023c6c:	2b00      	cmp	r3, #0
 8023c6e:	d004      	beq.n	8023c7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	b2db      	uxtb	r3, r3
 8023c76:	2b7f      	cmp	r3, #127	; 0x7f
 8023c78:	d101      	bne.n	8023c7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8023c7a:	2300      	movs	r3, #0
 8023c7c:	e001      	b.n	8023c82 <ip4_route+0xca>
  }

  return netif_default;
 8023c7e:	4b05      	ldr	r3, [pc, #20]	; (8023c94 <ip4_route+0xdc>)
 8023c80:	681b      	ldr	r3, [r3, #0]
}
 8023c82:	4618      	mov	r0, r3
 8023c84:	3714      	adds	r7, #20
 8023c86:	46bd      	mov	sp, r7
 8023c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c8c:	4770      	bx	lr
 8023c8e:	bf00      	nop
 8023c90:	20014ad8 	.word	0x20014ad8
 8023c94:	20014adc 	.word	0x20014adc

08023c98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8023c98:	b580      	push	{r7, lr}
 8023c9a:	b082      	sub	sp, #8
 8023c9c:	af00      	add	r7, sp, #0
 8023c9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023ca0:	687b      	ldr	r3, [r7, #4]
 8023ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023ca6:	f003 0301 	and.w	r3, r3, #1
 8023caa:	b2db      	uxtb	r3, r3
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	d016      	beq.n	8023cde <ip4_input_accept+0x46>
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	3304      	adds	r3, #4
 8023cb4:	681b      	ldr	r3, [r3, #0]
 8023cb6:	2b00      	cmp	r3, #0
 8023cb8:	d011      	beq.n	8023cde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023cba:	4b0b      	ldr	r3, [pc, #44]	; (8023ce8 <ip4_input_accept+0x50>)
 8023cbc:	695a      	ldr	r2, [r3, #20]
 8023cbe:	687b      	ldr	r3, [r7, #4]
 8023cc0:	3304      	adds	r3, #4
 8023cc2:	681b      	ldr	r3, [r3, #0]
 8023cc4:	429a      	cmp	r2, r3
 8023cc6:	d008      	beq.n	8023cda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023cc8:	4b07      	ldr	r3, [pc, #28]	; (8023ce8 <ip4_input_accept+0x50>)
 8023cca:	695b      	ldr	r3, [r3, #20]
 8023ccc:	6879      	ldr	r1, [r7, #4]
 8023cce:	4618      	mov	r0, r3
 8023cd0:	f000 fa0c 	bl	80240ec <ip4_addr_isbroadcast_u32>
 8023cd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023cd6:	2b00      	cmp	r3, #0
 8023cd8:	d001      	beq.n	8023cde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8023cda:	2301      	movs	r3, #1
 8023cdc:	e000      	b.n	8023ce0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8023cde:	2300      	movs	r3, #0
}
 8023ce0:	4618      	mov	r0, r3
 8023ce2:	3708      	adds	r7, #8
 8023ce4:	46bd      	mov	sp, r7
 8023ce6:	bd80      	pop	{r7, pc}
 8023ce8:	200114c8 	.word	0x200114c8

08023cec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8023cec:	b580      	push	{r7, lr}
 8023cee:	b086      	sub	sp, #24
 8023cf0:	af00      	add	r7, sp, #0
 8023cf2:	6078      	str	r0, [r7, #4]
 8023cf4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8023cf6:	687b      	ldr	r3, [r7, #4]
 8023cf8:	685b      	ldr	r3, [r3, #4]
 8023cfa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8023cfc:	697b      	ldr	r3, [r7, #20]
 8023cfe:	781b      	ldrb	r3, [r3, #0]
 8023d00:	091b      	lsrs	r3, r3, #4
 8023d02:	b2db      	uxtb	r3, r3
 8023d04:	2b04      	cmp	r3, #4
 8023d06:	d004      	beq.n	8023d12 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8023d08:	6878      	ldr	r0, [r7, #4]
 8023d0a:	f7fd fdf1 	bl	80218f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8023d0e:	2300      	movs	r3, #0
 8023d10:	e0fd      	b.n	8023f0e <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023d12:	697b      	ldr	r3, [r7, #20]
 8023d14:	781b      	ldrb	r3, [r3, #0]
 8023d16:	f003 030f 	and.w	r3, r3, #15
 8023d1a:	b2db      	uxtb	r3, r3
 8023d1c:	009b      	lsls	r3, r3, #2
 8023d1e:	b2db      	uxtb	r3, r3
 8023d20:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023d22:	697b      	ldr	r3, [r7, #20]
 8023d24:	885b      	ldrh	r3, [r3, #2]
 8023d26:	b29b      	uxth	r3, r3
 8023d28:	4618      	mov	r0, r3
 8023d2a:	f7fc fa05 	bl	8020138 <lwip_htons>
 8023d2e:	4603      	mov	r3, r0
 8023d30:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8023d32:	687b      	ldr	r3, [r7, #4]
 8023d34:	891b      	ldrh	r3, [r3, #8]
 8023d36:	89ba      	ldrh	r2, [r7, #12]
 8023d38:	429a      	cmp	r2, r3
 8023d3a:	d204      	bcs.n	8023d46 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8023d3c:	89bb      	ldrh	r3, [r7, #12]
 8023d3e:	4619      	mov	r1, r3
 8023d40:	6878      	ldr	r0, [r7, #4]
 8023d42:	f7fd fc4f 	bl	80215e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8023d46:	687b      	ldr	r3, [r7, #4]
 8023d48:	895b      	ldrh	r3, [r3, #10]
 8023d4a:	89fa      	ldrh	r2, [r7, #14]
 8023d4c:	429a      	cmp	r2, r3
 8023d4e:	d807      	bhi.n	8023d60 <ip4_input+0x74>
 8023d50:	687b      	ldr	r3, [r7, #4]
 8023d52:	891b      	ldrh	r3, [r3, #8]
 8023d54:	89ba      	ldrh	r2, [r7, #12]
 8023d56:	429a      	cmp	r2, r3
 8023d58:	d802      	bhi.n	8023d60 <ip4_input+0x74>
 8023d5a:	89fb      	ldrh	r3, [r7, #14]
 8023d5c:	2b13      	cmp	r3, #19
 8023d5e:	d804      	bhi.n	8023d6a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8023d60:	6878      	ldr	r0, [r7, #4]
 8023d62:	f7fd fdc5 	bl	80218f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8023d66:	2300      	movs	r3, #0
 8023d68:	e0d1      	b.n	8023f0e <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023d6a:	697b      	ldr	r3, [r7, #20]
 8023d6c:	691b      	ldr	r3, [r3, #16]
 8023d6e:	4a6a      	ldr	r2, [pc, #424]	; (8023f18 <ip4_input+0x22c>)
 8023d70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023d72:	697b      	ldr	r3, [r7, #20]
 8023d74:	68db      	ldr	r3, [r3, #12]
 8023d76:	4a68      	ldr	r2, [pc, #416]	; (8023f18 <ip4_input+0x22c>)
 8023d78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023d7a:	4b67      	ldr	r3, [pc, #412]	; (8023f18 <ip4_input+0x22c>)
 8023d7c:	695b      	ldr	r3, [r3, #20]
 8023d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023d82:	2be0      	cmp	r3, #224	; 0xe0
 8023d84:	d112      	bne.n	8023dac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023d86:	683b      	ldr	r3, [r7, #0]
 8023d88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023d8c:	f003 0301 	and.w	r3, r3, #1
 8023d90:	b2db      	uxtb	r3, r3
 8023d92:	2b00      	cmp	r3, #0
 8023d94:	d007      	beq.n	8023da6 <ip4_input+0xba>
 8023d96:	683b      	ldr	r3, [r7, #0]
 8023d98:	3304      	adds	r3, #4
 8023d9a:	681b      	ldr	r3, [r3, #0]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	d002      	beq.n	8023da6 <ip4_input+0xba>
      netif = inp;
 8023da0:	683b      	ldr	r3, [r7, #0]
 8023da2:	613b      	str	r3, [r7, #16]
 8023da4:	e02a      	b.n	8023dfc <ip4_input+0x110>
    } else {
      netif = NULL;
 8023da6:	2300      	movs	r3, #0
 8023da8:	613b      	str	r3, [r7, #16]
 8023daa:	e027      	b.n	8023dfc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8023dac:	6838      	ldr	r0, [r7, #0]
 8023dae:	f7ff ff73 	bl	8023c98 <ip4_input_accept>
 8023db2:	4603      	mov	r3, r0
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	d002      	beq.n	8023dbe <ip4_input+0xd2>
      netif = inp;
 8023db8:	683b      	ldr	r3, [r7, #0]
 8023dba:	613b      	str	r3, [r7, #16]
 8023dbc:	e01e      	b.n	8023dfc <ip4_input+0x110>
    } else {
      netif = NULL;
 8023dbe:	2300      	movs	r3, #0
 8023dc0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023dc2:	4b55      	ldr	r3, [pc, #340]	; (8023f18 <ip4_input+0x22c>)
 8023dc4:	695b      	ldr	r3, [r3, #20]
 8023dc6:	b2db      	uxtb	r3, r3
 8023dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8023dca:	d017      	beq.n	8023dfc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8023dcc:	4b53      	ldr	r3, [pc, #332]	; (8023f1c <ip4_input+0x230>)
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	613b      	str	r3, [r7, #16]
 8023dd2:	e00e      	b.n	8023df2 <ip4_input+0x106>
          if (netif == inp) {
 8023dd4:	693a      	ldr	r2, [r7, #16]
 8023dd6:	683b      	ldr	r3, [r7, #0]
 8023dd8:	429a      	cmp	r2, r3
 8023dda:	d006      	beq.n	8023dea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8023ddc:	6938      	ldr	r0, [r7, #16]
 8023dde:	f7ff ff5b 	bl	8023c98 <ip4_input_accept>
 8023de2:	4603      	mov	r3, r0
 8023de4:	2b00      	cmp	r3, #0
 8023de6:	d108      	bne.n	8023dfa <ip4_input+0x10e>
 8023de8:	e000      	b.n	8023dec <ip4_input+0x100>
            continue;
 8023dea:	bf00      	nop
        NETIF_FOREACH(netif) {
 8023dec:	693b      	ldr	r3, [r7, #16]
 8023dee:	681b      	ldr	r3, [r3, #0]
 8023df0:	613b      	str	r3, [r7, #16]
 8023df2:	693b      	ldr	r3, [r7, #16]
 8023df4:	2b00      	cmp	r3, #0
 8023df6:	d1ed      	bne.n	8023dd4 <ip4_input+0xe8>
 8023df8:	e000      	b.n	8023dfc <ip4_input+0x110>
            break;
 8023dfa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023dfc:	4b46      	ldr	r3, [pc, #280]	; (8023f18 <ip4_input+0x22c>)
 8023dfe:	691b      	ldr	r3, [r3, #16]
 8023e00:	6839      	ldr	r1, [r7, #0]
 8023e02:	4618      	mov	r0, r3
 8023e04:	f000 f972 	bl	80240ec <ip4_addr_isbroadcast_u32>
 8023e08:	4603      	mov	r3, r0
 8023e0a:	2b00      	cmp	r3, #0
 8023e0c:	d105      	bne.n	8023e1a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8023e0e:	4b42      	ldr	r3, [pc, #264]	; (8023f18 <ip4_input+0x22c>)
 8023e10:	691b      	ldr	r3, [r3, #16]
 8023e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023e16:	2be0      	cmp	r3, #224	; 0xe0
 8023e18:	d104      	bne.n	8023e24 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8023e1a:	6878      	ldr	r0, [r7, #4]
 8023e1c:	f7fd fd68 	bl	80218f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8023e20:	2300      	movs	r3, #0
 8023e22:	e074      	b.n	8023f0e <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8023e24:	693b      	ldr	r3, [r7, #16]
 8023e26:	2b00      	cmp	r3, #0
 8023e28:	d104      	bne.n	8023e34 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8023e2a:	6878      	ldr	r0, [r7, #4]
 8023e2c:	f7fd fd60 	bl	80218f0 <pbuf_free>
    return ERR_OK;
 8023e30:	2300      	movs	r3, #0
 8023e32:	e06c      	b.n	8023f0e <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8023e34:	697b      	ldr	r3, [r7, #20]
 8023e36:	88db      	ldrh	r3, [r3, #6]
 8023e38:	b29b      	uxth	r3, r3
 8023e3a:	461a      	mov	r2, r3
 8023e3c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8023e40:	4013      	ands	r3, r2
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	d00b      	beq.n	8023e5e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8023e46:	6878      	ldr	r0, [r7, #4]
 8023e48:	f000 fd26 	bl	8024898 <ip4_reass>
 8023e4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8023e4e:	687b      	ldr	r3, [r7, #4]
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	d101      	bne.n	8023e58 <ip4_input+0x16c>
      return ERR_OK;
 8023e54:	2300      	movs	r3, #0
 8023e56:	e05a      	b.n	8023f0e <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	685b      	ldr	r3, [r3, #4]
 8023e5c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8023e5e:	4a2e      	ldr	r2, [pc, #184]	; (8023f18 <ip4_input+0x22c>)
 8023e60:	693b      	ldr	r3, [r7, #16]
 8023e62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8023e64:	4a2c      	ldr	r2, [pc, #176]	; (8023f18 <ip4_input+0x22c>)
 8023e66:	683b      	ldr	r3, [r7, #0]
 8023e68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8023e6a:	4a2b      	ldr	r2, [pc, #172]	; (8023f18 <ip4_input+0x22c>)
 8023e6c:	697b      	ldr	r3, [r7, #20]
 8023e6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023e70:	697b      	ldr	r3, [r7, #20]
 8023e72:	781b      	ldrb	r3, [r3, #0]
 8023e74:	f003 030f 	and.w	r3, r3, #15
 8023e78:	b2db      	uxtb	r3, r3
 8023e7a:	009b      	lsls	r3, r3, #2
 8023e7c:	b2db      	uxtb	r3, r3
 8023e7e:	b29a      	uxth	r2, r3
 8023e80:	4b25      	ldr	r3, [pc, #148]	; (8023f18 <ip4_input+0x22c>)
 8023e82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023e84:	89fb      	ldrh	r3, [r7, #14]
 8023e86:	4619      	mov	r1, r3
 8023e88:	6878      	ldr	r0, [r7, #4]
 8023e8a:	f7fd fcab 	bl	80217e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023e8e:	697b      	ldr	r3, [r7, #20]
 8023e90:	7a5b      	ldrb	r3, [r3, #9]
 8023e92:	2b01      	cmp	r3, #1
 8023e94:	d006      	beq.n	8023ea4 <ip4_input+0x1b8>
 8023e96:	2b11      	cmp	r3, #17
 8023e98:	d109      	bne.n	8023eae <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8023e9a:	6839      	ldr	r1, [r7, #0]
 8023e9c:	6878      	ldr	r0, [r7, #4]
 8023e9e:	f7fe f9b5 	bl	802220c <udp_input>
        break;
 8023ea2:	e021      	b.n	8023ee8 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8023ea4:	6839      	ldr	r1, [r7, #0]
 8023ea6:	6878      	ldr	r0, [r7, #4]
 8023ea8:	f7ff fcf8 	bl	802389c <icmp_input>
        break;
 8023eac:	e01c      	b.n	8023ee8 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023eae:	4b1a      	ldr	r3, [pc, #104]	; (8023f18 <ip4_input+0x22c>)
 8023eb0:	695b      	ldr	r3, [r3, #20]
 8023eb2:	6939      	ldr	r1, [r7, #16]
 8023eb4:	4618      	mov	r0, r3
 8023eb6:	f000 f919 	bl	80240ec <ip4_addr_isbroadcast_u32>
 8023eba:	4603      	mov	r3, r0
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	d10f      	bne.n	8023ee0 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023ec0:	4b15      	ldr	r3, [pc, #84]	; (8023f18 <ip4_input+0x22c>)
 8023ec2:	695b      	ldr	r3, [r3, #20]
 8023ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023ec8:	2be0      	cmp	r3, #224	; 0xe0
 8023eca:	d009      	beq.n	8023ee0 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8023ecc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8023ed0:	4619      	mov	r1, r3
 8023ed2:	6878      	ldr	r0, [r7, #4]
 8023ed4:	f7fd fcf9 	bl	80218ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023ed8:	2102      	movs	r1, #2
 8023eda:	6878      	ldr	r0, [r7, #4]
 8023edc:	f7ff fde2 	bl	8023aa4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8023ee0:	6878      	ldr	r0, [r7, #4]
 8023ee2:	f7fd fd05 	bl	80218f0 <pbuf_free>
        break;
 8023ee6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023ee8:	4b0b      	ldr	r3, [pc, #44]	; (8023f18 <ip4_input+0x22c>)
 8023eea:	2200      	movs	r2, #0
 8023eec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8023eee:	4b0a      	ldr	r3, [pc, #40]	; (8023f18 <ip4_input+0x22c>)
 8023ef0:	2200      	movs	r2, #0
 8023ef2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8023ef4:	4b08      	ldr	r3, [pc, #32]	; (8023f18 <ip4_input+0x22c>)
 8023ef6:	2200      	movs	r2, #0
 8023ef8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023efa:	4b07      	ldr	r3, [pc, #28]	; (8023f18 <ip4_input+0x22c>)
 8023efc:	2200      	movs	r2, #0
 8023efe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8023f00:	4b05      	ldr	r3, [pc, #20]	; (8023f18 <ip4_input+0x22c>)
 8023f02:	2200      	movs	r2, #0
 8023f04:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023f06:	4b04      	ldr	r3, [pc, #16]	; (8023f18 <ip4_input+0x22c>)
 8023f08:	2200      	movs	r2, #0
 8023f0a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8023f0c:	2300      	movs	r3, #0
}
 8023f0e:	4618      	mov	r0, r3
 8023f10:	3718      	adds	r7, #24
 8023f12:	46bd      	mov	sp, r7
 8023f14:	bd80      	pop	{r7, pc}
 8023f16:	bf00      	nop
 8023f18:	200114c8 	.word	0x200114c8
 8023f1c:	20014ad8 	.word	0x20014ad8

08023f20 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8023f20:	b580      	push	{r7, lr}
 8023f22:	b08a      	sub	sp, #40	; 0x28
 8023f24:	af04      	add	r7, sp, #16
 8023f26:	60f8      	str	r0, [r7, #12]
 8023f28:	60b9      	str	r1, [r7, #8]
 8023f2a:	607a      	str	r2, [r7, #4]
 8023f2c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8023f2e:	68bb      	ldr	r3, [r7, #8]
 8023f30:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d009      	beq.n	8023f4c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8023f38:	68bb      	ldr	r3, [r7, #8]
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d003      	beq.n	8023f46 <ip4_output_if+0x26>
 8023f3e:	68bb      	ldr	r3, [r7, #8]
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	2b00      	cmp	r3, #0
 8023f44:	d102      	bne.n	8023f4c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8023f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f48:	3304      	adds	r3, #4
 8023f4a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8023f4c:	78fa      	ldrb	r2, [r7, #3]
 8023f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f50:	9302      	str	r3, [sp, #8]
 8023f52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023f56:	9301      	str	r3, [sp, #4]
 8023f58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023f5c:	9300      	str	r3, [sp, #0]
 8023f5e:	4613      	mov	r3, r2
 8023f60:	687a      	ldr	r2, [r7, #4]
 8023f62:	6979      	ldr	r1, [r7, #20]
 8023f64:	68f8      	ldr	r0, [r7, #12]
 8023f66:	f000 f805 	bl	8023f74 <ip4_output_if_src>
 8023f6a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8023f6c:	4618      	mov	r0, r3
 8023f6e:	3718      	adds	r7, #24
 8023f70:	46bd      	mov	sp, r7
 8023f72:	bd80      	pop	{r7, pc}

08023f74 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8023f74:	b580      	push	{r7, lr}
 8023f76:	b088      	sub	sp, #32
 8023f78:	af00      	add	r7, sp, #0
 8023f7a:	60f8      	str	r0, [r7, #12]
 8023f7c:	60b9      	str	r1, [r7, #8]
 8023f7e:	607a      	str	r2, [r7, #4]
 8023f80:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023f82:	68fb      	ldr	r3, [r7, #12]
 8023f84:	7b9b      	ldrb	r3, [r3, #14]
 8023f86:	2b01      	cmp	r3, #1
 8023f88:	d006      	beq.n	8023f98 <ip4_output_if_src+0x24>
 8023f8a:	4b52      	ldr	r3, [pc, #328]	; (80240d4 <ip4_output_if_src+0x160>)
 8023f8c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8023f90:	4951      	ldr	r1, [pc, #324]	; (80240d8 <ip4_output_if_src+0x164>)
 8023f92:	4852      	ldr	r0, [pc, #328]	; (80240dc <ip4_output_if_src+0x168>)
 8023f94:	f001 f9e4 	bl	8025360 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	d060      	beq.n	8024060 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8023f9e:	2314      	movs	r3, #20
 8023fa0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8023fa2:	2114      	movs	r1, #20
 8023fa4:	68f8      	ldr	r0, [r7, #12]
 8023fa6:	f7fd fc0d 	bl	80217c4 <pbuf_add_header>
 8023faa:	4603      	mov	r3, r0
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d002      	beq.n	8023fb6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023fb0:	f06f 0301 	mvn.w	r3, #1
 8023fb4:	e089      	b.n	80240ca <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8023fb6:	68fb      	ldr	r3, [r7, #12]
 8023fb8:	685b      	ldr	r3, [r3, #4]
 8023fba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023fbc:	68fb      	ldr	r3, [r7, #12]
 8023fbe:	895b      	ldrh	r3, [r3, #10]
 8023fc0:	2b13      	cmp	r3, #19
 8023fc2:	d806      	bhi.n	8023fd2 <ip4_output_if_src+0x5e>
 8023fc4:	4b43      	ldr	r3, [pc, #268]	; (80240d4 <ip4_output_if_src+0x160>)
 8023fc6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8023fca:	4945      	ldr	r1, [pc, #276]	; (80240e0 <ip4_output_if_src+0x16c>)
 8023fcc:	4843      	ldr	r0, [pc, #268]	; (80240dc <ip4_output_if_src+0x168>)
 8023fce:	f001 f9c7 	bl	8025360 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8023fd2:	69fb      	ldr	r3, [r7, #28]
 8023fd4:	78fa      	ldrb	r2, [r7, #3]
 8023fd6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8023fd8:	69fb      	ldr	r3, [r7, #28]
 8023fda:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8023fde:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	681a      	ldr	r2, [r3, #0]
 8023fe4:	69fb      	ldr	r3, [r7, #28]
 8023fe6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8023fe8:	8b7b      	ldrh	r3, [r7, #26]
 8023fea:	089b      	lsrs	r3, r3, #2
 8023fec:	b29b      	uxth	r3, r3
 8023fee:	b2db      	uxtb	r3, r3
 8023ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023ff4:	b2da      	uxtb	r2, r3
 8023ff6:	69fb      	ldr	r3, [r7, #28]
 8023ff8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8023ffa:	69fb      	ldr	r3, [r7, #28]
 8023ffc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8024000:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8024002:	68fb      	ldr	r3, [r7, #12]
 8024004:	891b      	ldrh	r3, [r3, #8]
 8024006:	4618      	mov	r0, r3
 8024008:	f7fc f896 	bl	8020138 <lwip_htons>
 802400c:	4603      	mov	r3, r0
 802400e:	461a      	mov	r2, r3
 8024010:	69fb      	ldr	r3, [r7, #28]
 8024012:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8024014:	69fb      	ldr	r3, [r7, #28]
 8024016:	2200      	movs	r2, #0
 8024018:	719a      	strb	r2, [r3, #6]
 802401a:	2200      	movs	r2, #0
 802401c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802401e:	4b31      	ldr	r3, [pc, #196]	; (80240e4 <ip4_output_if_src+0x170>)
 8024020:	881b      	ldrh	r3, [r3, #0]
 8024022:	4618      	mov	r0, r3
 8024024:	f7fc f888 	bl	8020138 <lwip_htons>
 8024028:	4603      	mov	r3, r0
 802402a:	461a      	mov	r2, r3
 802402c:	69fb      	ldr	r3, [r7, #28]
 802402e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024030:	4b2c      	ldr	r3, [pc, #176]	; (80240e4 <ip4_output_if_src+0x170>)
 8024032:	881b      	ldrh	r3, [r3, #0]
 8024034:	3301      	adds	r3, #1
 8024036:	b29a      	uxth	r2, r3
 8024038:	4b2a      	ldr	r3, [pc, #168]	; (80240e4 <ip4_output_if_src+0x170>)
 802403a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 802403c:	68bb      	ldr	r3, [r7, #8]
 802403e:	2b00      	cmp	r3, #0
 8024040:	d104      	bne.n	802404c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024042:	4b29      	ldr	r3, [pc, #164]	; (80240e8 <ip4_output_if_src+0x174>)
 8024044:	681a      	ldr	r2, [r3, #0]
 8024046:	69fb      	ldr	r3, [r7, #28]
 8024048:	60da      	str	r2, [r3, #12]
 802404a:	e003      	b.n	8024054 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802404c:	68bb      	ldr	r3, [r7, #8]
 802404e:	681a      	ldr	r2, [r3, #0]
 8024050:	69fb      	ldr	r3, [r7, #28]
 8024052:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8024054:	69fb      	ldr	r3, [r7, #28]
 8024056:	2200      	movs	r2, #0
 8024058:	729a      	strb	r2, [r3, #10]
 802405a:	2200      	movs	r2, #0
 802405c:	72da      	strb	r2, [r3, #11]
 802405e:	e00f      	b.n	8024080 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8024060:	68fb      	ldr	r3, [r7, #12]
 8024062:	895b      	ldrh	r3, [r3, #10]
 8024064:	2b13      	cmp	r3, #19
 8024066:	d802      	bhi.n	802406e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024068:	f06f 0301 	mvn.w	r3, #1
 802406c:	e02d      	b.n	80240ca <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802406e:	68fb      	ldr	r3, [r7, #12]
 8024070:	685b      	ldr	r3, [r3, #4]
 8024072:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024074:	69fb      	ldr	r3, [r7, #28]
 8024076:	691b      	ldr	r3, [r3, #16]
 8024078:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802407a:	f107 0314 	add.w	r3, r7, #20
 802407e:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8024080:	687b      	ldr	r3, [r7, #4]
 8024082:	681a      	ldr	r2, [r3, #0]
 8024084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024086:	3304      	adds	r3, #4
 8024088:	681b      	ldr	r3, [r3, #0]
 802408a:	429a      	cmp	r2, r3
 802408c:	d105      	bne.n	802409a <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 802408e:	68f9      	ldr	r1, [r7, #12]
 8024090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024092:	f7fd f86f 	bl	8021174 <netif_loop_output>
 8024096:	4603      	mov	r3, r0
 8024098:	e017      	b.n	80240ca <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 802409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802409e:	2b00      	cmp	r3, #0
 80240a0:	d00c      	beq.n	80240bc <ip4_output_if_src+0x148>
 80240a2:	68fb      	ldr	r3, [r7, #12]
 80240a4:	891a      	ldrh	r2, [r3, #8]
 80240a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80240a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80240aa:	429a      	cmp	r2, r3
 80240ac:	d906      	bls.n	80240bc <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80240ae:	687a      	ldr	r2, [r7, #4]
 80240b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80240b2:	68f8      	ldr	r0, [r7, #12]
 80240b4:	f000 fde4 	bl	8024c80 <ip4_frag>
 80240b8:	4603      	mov	r3, r0
 80240ba:	e006      	b.n	80240ca <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80240bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80240be:	695b      	ldr	r3, [r3, #20]
 80240c0:	687a      	ldr	r2, [r7, #4]
 80240c2:	68f9      	ldr	r1, [r7, #12]
 80240c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80240c6:	4798      	blx	r3
 80240c8:	4603      	mov	r3, r0
}
 80240ca:	4618      	mov	r0, r3
 80240cc:	3720      	adds	r7, #32
 80240ce:	46bd      	mov	sp, r7
 80240d0:	bd80      	pop	{r7, pc}
 80240d2:	bf00      	nop
 80240d4:	0802bafc 	.word	0x0802bafc
 80240d8:	0802bb30 	.word	0x0802bb30
 80240dc:	0802bb3c 	.word	0x0802bb3c
 80240e0:	0802bb64 	.word	0x0802bb64
 80240e4:	20014fe2 	.word	0x20014fe2
 80240e8:	0802c308 	.word	0x0802c308

080240ec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80240ec:	b480      	push	{r7}
 80240ee:	b085      	sub	sp, #20
 80240f0:	af00      	add	r7, sp, #0
 80240f2:	6078      	str	r0, [r7, #4]
 80240f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80240f6:	687b      	ldr	r3, [r7, #4]
 80240f8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024100:	d002      	beq.n	8024108 <ip4_addr_isbroadcast_u32+0x1c>
 8024102:	687b      	ldr	r3, [r7, #4]
 8024104:	2b00      	cmp	r3, #0
 8024106:	d101      	bne.n	802410c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8024108:	2301      	movs	r3, #1
 802410a:	e02a      	b.n	8024162 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 802410c:	683b      	ldr	r3, [r7, #0]
 802410e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024112:	f003 0302 	and.w	r3, r3, #2
 8024116:	2b00      	cmp	r3, #0
 8024118:	d101      	bne.n	802411e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802411a:	2300      	movs	r3, #0
 802411c:	e021      	b.n	8024162 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802411e:	683b      	ldr	r3, [r7, #0]
 8024120:	3304      	adds	r3, #4
 8024122:	681b      	ldr	r3, [r3, #0]
 8024124:	687a      	ldr	r2, [r7, #4]
 8024126:	429a      	cmp	r2, r3
 8024128:	d101      	bne.n	802412e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802412a:	2300      	movs	r3, #0
 802412c:	e019      	b.n	8024162 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802412e:	68fa      	ldr	r2, [r7, #12]
 8024130:	683b      	ldr	r3, [r7, #0]
 8024132:	3304      	adds	r3, #4
 8024134:	681b      	ldr	r3, [r3, #0]
 8024136:	405a      	eors	r2, r3
 8024138:	683b      	ldr	r3, [r7, #0]
 802413a:	3308      	adds	r3, #8
 802413c:	681b      	ldr	r3, [r3, #0]
 802413e:	4013      	ands	r3, r2
 8024140:	2b00      	cmp	r3, #0
 8024142:	d10d      	bne.n	8024160 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024144:	683b      	ldr	r3, [r7, #0]
 8024146:	3308      	adds	r3, #8
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	43da      	mvns	r2, r3
 802414c:	687b      	ldr	r3, [r7, #4]
 802414e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8024150:	683b      	ldr	r3, [r7, #0]
 8024152:	3308      	adds	r3, #8
 8024154:	681b      	ldr	r3, [r3, #0]
 8024156:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024158:	429a      	cmp	r2, r3
 802415a:	d101      	bne.n	8024160 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 802415c:	2301      	movs	r3, #1
 802415e:	e000      	b.n	8024162 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8024160:	2300      	movs	r3, #0
  }
}
 8024162:	4618      	mov	r0, r3
 8024164:	3714      	adds	r7, #20
 8024166:	46bd      	mov	sp, r7
 8024168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802416c:	4770      	bx	lr
	...

08024170 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8024170:	b580      	push	{r7, lr}
 8024172:	b082      	sub	sp, #8
 8024174:	af00      	add	r7, sp, #0
 8024176:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8024178:	2210      	movs	r2, #16
 802417a:	4904      	ldr	r1, [pc, #16]	; (802418c <ip4addr_ntoa+0x1c>)
 802417c:	6878      	ldr	r0, [r7, #4]
 802417e:	f000 f807 	bl	8024190 <ip4addr_ntoa_r>
 8024182:	4603      	mov	r3, r0
}
 8024184:	4618      	mov	r0, r3
 8024186:	3708      	adds	r7, #8
 8024188:	46bd      	mov	sp, r7
 802418a:	bd80      	pop	{r7, pc}
 802418c:	20014fe4 	.word	0x20014fe4

08024190 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8024190:	b480      	push	{r7}
 8024192:	b08d      	sub	sp, #52	; 0x34
 8024194:	af00      	add	r7, sp, #0
 8024196:	60f8      	str	r0, [r7, #12]
 8024198:	60b9      	str	r1, [r7, #8]
 802419a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 802419c:	2300      	movs	r3, #0
 802419e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80241a0:	68fb      	ldr	r3, [r7, #12]
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80241a6:	68bb      	ldr	r3, [r7, #8]
 80241a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80241aa:	f107 0318 	add.w	r3, r7, #24
 80241ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80241b0:	2300      	movs	r3, #0
 80241b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80241b6:	e058      	b.n	802426a <ip4addr_ntoa_r+0xda>
    i = 0;
 80241b8:	2300      	movs	r3, #0
 80241ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80241be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241c0:	781a      	ldrb	r2, [r3, #0]
 80241c2:	4b32      	ldr	r3, [pc, #200]	; (802428c <ip4addr_ntoa_r+0xfc>)
 80241c4:	fba3 1302 	umull	r1, r3, r3, r2
 80241c8:	08d9      	lsrs	r1, r3, #3
 80241ca:	460b      	mov	r3, r1
 80241cc:	009b      	lsls	r3, r3, #2
 80241ce:	440b      	add	r3, r1
 80241d0:	005b      	lsls	r3, r3, #1
 80241d2:	1ad3      	subs	r3, r2, r3
 80241d4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80241d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241d8:	781b      	ldrb	r3, [r3, #0]
 80241da:	4a2c      	ldr	r2, [pc, #176]	; (802428c <ip4addr_ntoa_r+0xfc>)
 80241dc:	fba2 2303 	umull	r2, r3, r2, r3
 80241e0:	08db      	lsrs	r3, r3, #3
 80241e2:	b2da      	uxtb	r2, r3
 80241e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241e6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80241e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80241ec:	1c5a      	adds	r2, r3, #1
 80241ee:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80241f2:	4619      	mov	r1, r3
 80241f4:	7ffb      	ldrb	r3, [r7, #31]
 80241f6:	3330      	adds	r3, #48	; 0x30
 80241f8:	b2da      	uxtb	r2, r3
 80241fa:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80241fe:	443b      	add	r3, r7
 8024200:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8024204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024206:	781b      	ldrb	r3, [r3, #0]
 8024208:	2b00      	cmp	r3, #0
 802420a:	d1d8      	bne.n	80241be <ip4addr_ntoa_r+0x2e>
    while (i--) {
 802420c:	e011      	b.n	8024232 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 802420e:	6a3b      	ldr	r3, [r7, #32]
 8024210:	1c5a      	adds	r2, r3, #1
 8024212:	623a      	str	r2, [r7, #32]
 8024214:	687a      	ldr	r2, [r7, #4]
 8024216:	429a      	cmp	r2, r3
 8024218:	dc01      	bgt.n	802421e <ip4addr_ntoa_r+0x8e>
        return NULL;
 802421a:	2300      	movs	r3, #0
 802421c:	e030      	b.n	8024280 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 802421e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8024222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024224:	1c59      	adds	r1, r3, #1
 8024226:	62f9      	str	r1, [r7, #44]	; 0x2c
 8024228:	3230      	adds	r2, #48	; 0x30
 802422a:	443a      	add	r2, r7
 802422c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8024230:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8024232:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8024236:	1e5a      	subs	r2, r3, #1
 8024238:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 802423c:	2b00      	cmp	r3, #0
 802423e:	d1e6      	bne.n	802420e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8024240:	6a3b      	ldr	r3, [r7, #32]
 8024242:	1c5a      	adds	r2, r3, #1
 8024244:	623a      	str	r2, [r7, #32]
 8024246:	687a      	ldr	r2, [r7, #4]
 8024248:	429a      	cmp	r2, r3
 802424a:	dc01      	bgt.n	8024250 <ip4addr_ntoa_r+0xc0>
      return NULL;
 802424c:	2300      	movs	r3, #0
 802424e:	e017      	b.n	8024280 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8024250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024252:	1c5a      	adds	r2, r3, #1
 8024254:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024256:	222e      	movs	r2, #46	; 0x2e
 8024258:	701a      	strb	r2, [r3, #0]
    ap++;
 802425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802425c:	3301      	adds	r3, #1
 802425e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8024260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024264:	3301      	adds	r3, #1
 8024266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802426a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802426e:	2b03      	cmp	r3, #3
 8024270:	d9a2      	bls.n	80241b8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8024272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024274:	3b01      	subs	r3, #1
 8024276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802427a:	2200      	movs	r2, #0
 802427c:	701a      	strb	r2, [r3, #0]
  return buf;
 802427e:	68bb      	ldr	r3, [r7, #8]
}
 8024280:	4618      	mov	r0, r3
 8024282:	3734      	adds	r7, #52	; 0x34
 8024284:	46bd      	mov	sp, r7
 8024286:	f85d 7b04 	ldr.w	r7, [sp], #4
 802428a:	4770      	bx	lr
 802428c:	cccccccd 	.word	0xcccccccd

08024290 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8024290:	b580      	push	{r7, lr}
 8024292:	b084      	sub	sp, #16
 8024294:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8024296:	2300      	movs	r3, #0
 8024298:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802429a:	4b12      	ldr	r3, [pc, #72]	; (80242e4 <ip_reass_tmr+0x54>)
 802429c:	681b      	ldr	r3, [r3, #0]
 802429e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80242a0:	e018      	b.n	80242d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80242a2:	68fb      	ldr	r3, [r7, #12]
 80242a4:	7fdb      	ldrb	r3, [r3, #31]
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	d00b      	beq.n	80242c2 <ip_reass_tmr+0x32>
      r->timer--;
 80242aa:	68fb      	ldr	r3, [r7, #12]
 80242ac:	7fdb      	ldrb	r3, [r3, #31]
 80242ae:	3b01      	subs	r3, #1
 80242b0:	b2da      	uxtb	r2, r3
 80242b2:	68fb      	ldr	r3, [r7, #12]
 80242b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80242ba:	68fb      	ldr	r3, [r7, #12]
 80242bc:	681b      	ldr	r3, [r3, #0]
 80242be:	60fb      	str	r3, [r7, #12]
 80242c0:	e008      	b.n	80242d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80242c2:	68fb      	ldr	r3, [r7, #12]
 80242c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80242c6:	68fb      	ldr	r3, [r7, #12]
 80242c8:	681b      	ldr	r3, [r3, #0]
 80242ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80242cc:	68b9      	ldr	r1, [r7, #8]
 80242ce:	6878      	ldr	r0, [r7, #4]
 80242d0:	f000 f80a 	bl	80242e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80242d4:	68fb      	ldr	r3, [r7, #12]
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	d1e3      	bne.n	80242a2 <ip_reass_tmr+0x12>
    }
  }
}
 80242da:	bf00      	nop
 80242dc:	bf00      	nop
 80242de:	3710      	adds	r7, #16
 80242e0:	46bd      	mov	sp, r7
 80242e2:	bd80      	pop	{r7, pc}
 80242e4:	20014ff4 	.word	0x20014ff4

080242e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80242e8:	b580      	push	{r7, lr}
 80242ea:	b088      	sub	sp, #32
 80242ec:	af00      	add	r7, sp, #0
 80242ee:	6078      	str	r0, [r7, #4]
 80242f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80242f2:	2300      	movs	r3, #0
 80242f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80242f6:	683a      	ldr	r2, [r7, #0]
 80242f8:	687b      	ldr	r3, [r7, #4]
 80242fa:	429a      	cmp	r2, r3
 80242fc:	d105      	bne.n	802430a <ip_reass_free_complete_datagram+0x22>
 80242fe:	4b45      	ldr	r3, [pc, #276]	; (8024414 <ip_reass_free_complete_datagram+0x12c>)
 8024300:	22ab      	movs	r2, #171	; 0xab
 8024302:	4945      	ldr	r1, [pc, #276]	; (8024418 <ip_reass_free_complete_datagram+0x130>)
 8024304:	4845      	ldr	r0, [pc, #276]	; (802441c <ip_reass_free_complete_datagram+0x134>)
 8024306:	f001 f82b 	bl	8025360 <iprintf>
  if (prev != NULL) {
 802430a:	683b      	ldr	r3, [r7, #0]
 802430c:	2b00      	cmp	r3, #0
 802430e:	d00a      	beq.n	8024326 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8024310:	683b      	ldr	r3, [r7, #0]
 8024312:	681b      	ldr	r3, [r3, #0]
 8024314:	687a      	ldr	r2, [r7, #4]
 8024316:	429a      	cmp	r2, r3
 8024318:	d005      	beq.n	8024326 <ip_reass_free_complete_datagram+0x3e>
 802431a:	4b3e      	ldr	r3, [pc, #248]	; (8024414 <ip_reass_free_complete_datagram+0x12c>)
 802431c:	22ad      	movs	r2, #173	; 0xad
 802431e:	4940      	ldr	r1, [pc, #256]	; (8024420 <ip_reass_free_complete_datagram+0x138>)
 8024320:	483e      	ldr	r0, [pc, #248]	; (802441c <ip_reass_free_complete_datagram+0x134>)
 8024322:	f001 f81d 	bl	8025360 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8024326:	687b      	ldr	r3, [r7, #4]
 8024328:	685b      	ldr	r3, [r3, #4]
 802432a:	685b      	ldr	r3, [r3, #4]
 802432c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802432e:	697b      	ldr	r3, [r7, #20]
 8024330:	889b      	ldrh	r3, [r3, #4]
 8024332:	b29b      	uxth	r3, r3
 8024334:	2b00      	cmp	r3, #0
 8024336:	d12a      	bne.n	802438e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	685b      	ldr	r3, [r3, #4]
 802433c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802433e:	697b      	ldr	r3, [r7, #20]
 8024340:	681a      	ldr	r2, [r3, #0]
 8024342:	687b      	ldr	r3, [r7, #4]
 8024344:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024346:	69bb      	ldr	r3, [r7, #24]
 8024348:	6858      	ldr	r0, [r3, #4]
 802434a:	687b      	ldr	r3, [r7, #4]
 802434c:	3308      	adds	r3, #8
 802434e:	2214      	movs	r2, #20
 8024350:	4619      	mov	r1, r3
 8024352:	f000 fef5 	bl	8025140 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024356:	2101      	movs	r1, #1
 8024358:	69b8      	ldr	r0, [r7, #24]
 802435a:	f7ff fbb3 	bl	8023ac4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802435e:	69b8      	ldr	r0, [r7, #24]
 8024360:	f7fd fb4e 	bl	8021a00 <pbuf_clen>
 8024364:	4603      	mov	r3, r0
 8024366:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024368:	8bfa      	ldrh	r2, [r7, #30]
 802436a:	8a7b      	ldrh	r3, [r7, #18]
 802436c:	4413      	add	r3, r2
 802436e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024372:	db05      	blt.n	8024380 <ip_reass_free_complete_datagram+0x98>
 8024374:	4b27      	ldr	r3, [pc, #156]	; (8024414 <ip_reass_free_complete_datagram+0x12c>)
 8024376:	22bc      	movs	r2, #188	; 0xbc
 8024378:	492a      	ldr	r1, [pc, #168]	; (8024424 <ip_reass_free_complete_datagram+0x13c>)
 802437a:	4828      	ldr	r0, [pc, #160]	; (802441c <ip_reass_free_complete_datagram+0x134>)
 802437c:	f000 fff0 	bl	8025360 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024380:	8bfa      	ldrh	r2, [r7, #30]
 8024382:	8a7b      	ldrh	r3, [r7, #18]
 8024384:	4413      	add	r3, r2
 8024386:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8024388:	69b8      	ldr	r0, [r7, #24]
 802438a:	f7fd fab1 	bl	80218f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802438e:	687b      	ldr	r3, [r7, #4]
 8024390:	685b      	ldr	r3, [r3, #4]
 8024392:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8024394:	e01f      	b.n	80243d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8024396:	69bb      	ldr	r3, [r7, #24]
 8024398:	685b      	ldr	r3, [r3, #4]
 802439a:	617b      	str	r3, [r7, #20]
    pcur = p;
 802439c:	69bb      	ldr	r3, [r7, #24]
 802439e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80243a0:	697b      	ldr	r3, [r7, #20]
 80243a2:	681b      	ldr	r3, [r3, #0]
 80243a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80243a6:	68f8      	ldr	r0, [r7, #12]
 80243a8:	f7fd fb2a 	bl	8021a00 <pbuf_clen>
 80243ac:	4603      	mov	r3, r0
 80243ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80243b0:	8bfa      	ldrh	r2, [r7, #30]
 80243b2:	8a7b      	ldrh	r3, [r7, #18]
 80243b4:	4413      	add	r3, r2
 80243b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80243ba:	db05      	blt.n	80243c8 <ip_reass_free_complete_datagram+0xe0>
 80243bc:	4b15      	ldr	r3, [pc, #84]	; (8024414 <ip_reass_free_complete_datagram+0x12c>)
 80243be:	22cc      	movs	r2, #204	; 0xcc
 80243c0:	4918      	ldr	r1, [pc, #96]	; (8024424 <ip_reass_free_complete_datagram+0x13c>)
 80243c2:	4816      	ldr	r0, [pc, #88]	; (802441c <ip_reass_free_complete_datagram+0x134>)
 80243c4:	f000 ffcc 	bl	8025360 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80243c8:	8bfa      	ldrh	r2, [r7, #30]
 80243ca:	8a7b      	ldrh	r3, [r7, #18]
 80243cc:	4413      	add	r3, r2
 80243ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80243d0:	68f8      	ldr	r0, [r7, #12]
 80243d2:	f7fd fa8d 	bl	80218f0 <pbuf_free>
  while (p != NULL) {
 80243d6:	69bb      	ldr	r3, [r7, #24]
 80243d8:	2b00      	cmp	r3, #0
 80243da:	d1dc      	bne.n	8024396 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80243dc:	6839      	ldr	r1, [r7, #0]
 80243de:	6878      	ldr	r0, [r7, #4]
 80243e0:	f000 f8c2 	bl	8024568 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80243e4:	4b10      	ldr	r3, [pc, #64]	; (8024428 <ip_reass_free_complete_datagram+0x140>)
 80243e6:	881b      	ldrh	r3, [r3, #0]
 80243e8:	8bfa      	ldrh	r2, [r7, #30]
 80243ea:	429a      	cmp	r2, r3
 80243ec:	d905      	bls.n	80243fa <ip_reass_free_complete_datagram+0x112>
 80243ee:	4b09      	ldr	r3, [pc, #36]	; (8024414 <ip_reass_free_complete_datagram+0x12c>)
 80243f0:	22d2      	movs	r2, #210	; 0xd2
 80243f2:	490e      	ldr	r1, [pc, #56]	; (802442c <ip_reass_free_complete_datagram+0x144>)
 80243f4:	4809      	ldr	r0, [pc, #36]	; (802441c <ip_reass_free_complete_datagram+0x134>)
 80243f6:	f000 ffb3 	bl	8025360 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243fa:	4b0b      	ldr	r3, [pc, #44]	; (8024428 <ip_reass_free_complete_datagram+0x140>)
 80243fc:	881a      	ldrh	r2, [r3, #0]
 80243fe:	8bfb      	ldrh	r3, [r7, #30]
 8024400:	1ad3      	subs	r3, r2, r3
 8024402:	b29a      	uxth	r2, r3
 8024404:	4b08      	ldr	r3, [pc, #32]	; (8024428 <ip_reass_free_complete_datagram+0x140>)
 8024406:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8024408:	8bfb      	ldrh	r3, [r7, #30]
}
 802440a:	4618      	mov	r0, r3
 802440c:	3720      	adds	r7, #32
 802440e:	46bd      	mov	sp, r7
 8024410:	bd80      	pop	{r7, pc}
 8024412:	bf00      	nop
 8024414:	0802bb94 	.word	0x0802bb94
 8024418:	0802bbd0 	.word	0x0802bbd0
 802441c:	0802bbdc 	.word	0x0802bbdc
 8024420:	0802bc04 	.word	0x0802bc04
 8024424:	0802bc18 	.word	0x0802bc18
 8024428:	20014ff8 	.word	0x20014ff8
 802442c:	0802bc38 	.word	0x0802bc38

08024430 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8024430:	b580      	push	{r7, lr}
 8024432:	b08a      	sub	sp, #40	; 0x28
 8024434:	af00      	add	r7, sp, #0
 8024436:	6078      	str	r0, [r7, #4]
 8024438:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802443a:	2300      	movs	r3, #0
 802443c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802443e:	2300      	movs	r3, #0
 8024440:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8024442:	2300      	movs	r3, #0
 8024444:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8024446:	2300      	movs	r3, #0
 8024448:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802444a:	2300      	movs	r3, #0
 802444c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802444e:	4b28      	ldr	r3, [pc, #160]	; (80244f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8024450:	681b      	ldr	r3, [r3, #0]
 8024452:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8024454:	e030      	b.n	80244b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8024456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024458:	695a      	ldr	r2, [r3, #20]
 802445a:	687b      	ldr	r3, [r7, #4]
 802445c:	68db      	ldr	r3, [r3, #12]
 802445e:	429a      	cmp	r2, r3
 8024460:	d10c      	bne.n	802447c <ip_reass_remove_oldest_datagram+0x4c>
 8024462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024464:	699a      	ldr	r2, [r3, #24]
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	691b      	ldr	r3, [r3, #16]
 802446a:	429a      	cmp	r2, r3
 802446c:	d106      	bne.n	802447c <ip_reass_remove_oldest_datagram+0x4c>
 802446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024470:	899a      	ldrh	r2, [r3, #12]
 8024472:	687b      	ldr	r3, [r7, #4]
 8024474:	889b      	ldrh	r3, [r3, #4]
 8024476:	b29b      	uxth	r3, r3
 8024478:	429a      	cmp	r2, r3
 802447a:	d014      	beq.n	80244a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 802447c:	693b      	ldr	r3, [r7, #16]
 802447e:	3301      	adds	r3, #1
 8024480:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8024482:	6a3b      	ldr	r3, [r7, #32]
 8024484:	2b00      	cmp	r3, #0
 8024486:	d104      	bne.n	8024492 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8024488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802448a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802448c:	69fb      	ldr	r3, [r7, #28]
 802448e:	61bb      	str	r3, [r7, #24]
 8024490:	e009      	b.n	80244a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8024492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024494:	7fda      	ldrb	r2, [r3, #31]
 8024496:	6a3b      	ldr	r3, [r7, #32]
 8024498:	7fdb      	ldrb	r3, [r3, #31]
 802449a:	429a      	cmp	r2, r3
 802449c:	d803      	bhi.n	80244a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80244a2:	69fb      	ldr	r3, [r7, #28]
 80244a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80244a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244a8:	681b      	ldr	r3, [r3, #0]
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	d001      	beq.n	80244b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80244ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80244b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244b4:	681b      	ldr	r3, [r3, #0]
 80244b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80244b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d1cb      	bne.n	8024456 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80244be:	6a3b      	ldr	r3, [r7, #32]
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	d008      	beq.n	80244d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80244c4:	69b9      	ldr	r1, [r7, #24]
 80244c6:	6a38      	ldr	r0, [r7, #32]
 80244c8:	f7ff ff0e 	bl	80242e8 <ip_reass_free_complete_datagram>
 80244cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80244ce:	697a      	ldr	r2, [r7, #20]
 80244d0:	68fb      	ldr	r3, [r7, #12]
 80244d2:	4413      	add	r3, r2
 80244d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80244d6:	697a      	ldr	r2, [r7, #20]
 80244d8:	683b      	ldr	r3, [r7, #0]
 80244da:	429a      	cmp	r2, r3
 80244dc:	da02      	bge.n	80244e4 <ip_reass_remove_oldest_datagram+0xb4>
 80244de:	693b      	ldr	r3, [r7, #16]
 80244e0:	2b01      	cmp	r3, #1
 80244e2:	dcac      	bgt.n	802443e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80244e4:	697b      	ldr	r3, [r7, #20]
}
 80244e6:	4618      	mov	r0, r3
 80244e8:	3728      	adds	r7, #40	; 0x28
 80244ea:	46bd      	mov	sp, r7
 80244ec:	bd80      	pop	{r7, pc}
 80244ee:	bf00      	nop
 80244f0:	20014ff4 	.word	0x20014ff4

080244f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80244f4:	b580      	push	{r7, lr}
 80244f6:	b084      	sub	sp, #16
 80244f8:	af00      	add	r7, sp, #0
 80244fa:	6078      	str	r0, [r7, #4]
 80244fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80244fe:	2001      	movs	r0, #1
 8024500:	f7fc fa76 	bl	80209f0 <memp_malloc>
 8024504:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8024506:	68fb      	ldr	r3, [r7, #12]
 8024508:	2b00      	cmp	r3, #0
 802450a:	d110      	bne.n	802452e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802450c:	6839      	ldr	r1, [r7, #0]
 802450e:	6878      	ldr	r0, [r7, #4]
 8024510:	f7ff ff8e 	bl	8024430 <ip_reass_remove_oldest_datagram>
 8024514:	4602      	mov	r2, r0
 8024516:	683b      	ldr	r3, [r7, #0]
 8024518:	4293      	cmp	r3, r2
 802451a:	dc03      	bgt.n	8024524 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802451c:	2001      	movs	r0, #1
 802451e:	f7fc fa67 	bl	80209f0 <memp_malloc>
 8024522:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8024524:	68fb      	ldr	r3, [r7, #12]
 8024526:	2b00      	cmp	r3, #0
 8024528:	d101      	bne.n	802452e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802452a:	2300      	movs	r3, #0
 802452c:	e016      	b.n	802455c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802452e:	2220      	movs	r2, #32
 8024530:	2100      	movs	r1, #0
 8024532:	68f8      	ldr	r0, [r7, #12]
 8024534:	f000 fe2c 	bl	8025190 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8024538:	68fb      	ldr	r3, [r7, #12]
 802453a:	220f      	movs	r2, #15
 802453c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802453e:	4b09      	ldr	r3, [pc, #36]	; (8024564 <ip_reass_enqueue_new_datagram+0x70>)
 8024540:	681a      	ldr	r2, [r3, #0]
 8024542:	68fb      	ldr	r3, [r7, #12]
 8024544:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8024546:	4a07      	ldr	r2, [pc, #28]	; (8024564 <ip_reass_enqueue_new_datagram+0x70>)
 8024548:	68fb      	ldr	r3, [r7, #12]
 802454a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802454c:	68fb      	ldr	r3, [r7, #12]
 802454e:	3308      	adds	r3, #8
 8024550:	2214      	movs	r2, #20
 8024552:	6879      	ldr	r1, [r7, #4]
 8024554:	4618      	mov	r0, r3
 8024556:	f000 fdf3 	bl	8025140 <memcpy>
  return ipr;
 802455a:	68fb      	ldr	r3, [r7, #12]
}
 802455c:	4618      	mov	r0, r3
 802455e:	3710      	adds	r7, #16
 8024560:	46bd      	mov	sp, r7
 8024562:	bd80      	pop	{r7, pc}
 8024564:	20014ff4 	.word	0x20014ff4

08024568 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024568:	b580      	push	{r7, lr}
 802456a:	b082      	sub	sp, #8
 802456c:	af00      	add	r7, sp, #0
 802456e:	6078      	str	r0, [r7, #4]
 8024570:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8024572:	4b10      	ldr	r3, [pc, #64]	; (80245b4 <ip_reass_dequeue_datagram+0x4c>)
 8024574:	681b      	ldr	r3, [r3, #0]
 8024576:	687a      	ldr	r2, [r7, #4]
 8024578:	429a      	cmp	r2, r3
 802457a:	d104      	bne.n	8024586 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 802457c:	687b      	ldr	r3, [r7, #4]
 802457e:	681b      	ldr	r3, [r3, #0]
 8024580:	4a0c      	ldr	r2, [pc, #48]	; (80245b4 <ip_reass_dequeue_datagram+0x4c>)
 8024582:	6013      	str	r3, [r2, #0]
 8024584:	e00d      	b.n	80245a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024586:	683b      	ldr	r3, [r7, #0]
 8024588:	2b00      	cmp	r3, #0
 802458a:	d106      	bne.n	802459a <ip_reass_dequeue_datagram+0x32>
 802458c:	4b0a      	ldr	r3, [pc, #40]	; (80245b8 <ip_reass_dequeue_datagram+0x50>)
 802458e:	f240 1245 	movw	r2, #325	; 0x145
 8024592:	490a      	ldr	r1, [pc, #40]	; (80245bc <ip_reass_dequeue_datagram+0x54>)
 8024594:	480a      	ldr	r0, [pc, #40]	; (80245c0 <ip_reass_dequeue_datagram+0x58>)
 8024596:	f000 fee3 	bl	8025360 <iprintf>
    prev->next = ipr->next;
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	681a      	ldr	r2, [r3, #0]
 802459e:	683b      	ldr	r3, [r7, #0]
 80245a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80245a2:	6879      	ldr	r1, [r7, #4]
 80245a4:	2001      	movs	r0, #1
 80245a6:	f7fc fa93 	bl	8020ad0 <memp_free>
}
 80245aa:	bf00      	nop
 80245ac:	3708      	adds	r7, #8
 80245ae:	46bd      	mov	sp, r7
 80245b0:	bd80      	pop	{r7, pc}
 80245b2:	bf00      	nop
 80245b4:	20014ff4 	.word	0x20014ff4
 80245b8:	0802bb94 	.word	0x0802bb94
 80245bc:	0802bc5c 	.word	0x0802bc5c
 80245c0:	0802bbdc 	.word	0x0802bbdc

080245c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80245c4:	b580      	push	{r7, lr}
 80245c6:	b08c      	sub	sp, #48	; 0x30
 80245c8:	af00      	add	r7, sp, #0
 80245ca:	60f8      	str	r0, [r7, #12]
 80245cc:	60b9      	str	r1, [r7, #8]
 80245ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80245d0:	2300      	movs	r3, #0
 80245d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80245d4:	2301      	movs	r3, #1
 80245d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80245d8:	68bb      	ldr	r3, [r7, #8]
 80245da:	685b      	ldr	r3, [r3, #4]
 80245dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80245de:	69fb      	ldr	r3, [r7, #28]
 80245e0:	885b      	ldrh	r3, [r3, #2]
 80245e2:	b29b      	uxth	r3, r3
 80245e4:	4618      	mov	r0, r3
 80245e6:	f7fb fda7 	bl	8020138 <lwip_htons>
 80245ea:	4603      	mov	r3, r0
 80245ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80245ee:	69fb      	ldr	r3, [r7, #28]
 80245f0:	781b      	ldrb	r3, [r3, #0]
 80245f2:	f003 030f 	and.w	r3, r3, #15
 80245f6:	b2db      	uxtb	r3, r3
 80245f8:	009b      	lsls	r3, r3, #2
 80245fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80245fc:	7e7b      	ldrb	r3, [r7, #25]
 80245fe:	b29b      	uxth	r3, r3
 8024600:	8b7a      	ldrh	r2, [r7, #26]
 8024602:	429a      	cmp	r2, r3
 8024604:	d202      	bcs.n	802460c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024606:	f04f 33ff 	mov.w	r3, #4294967295
 802460a:	e135      	b.n	8024878 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 802460c:	7e7b      	ldrb	r3, [r7, #25]
 802460e:	b29b      	uxth	r3, r3
 8024610:	8b7a      	ldrh	r2, [r7, #26]
 8024612:	1ad3      	subs	r3, r2, r3
 8024614:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024616:	69fb      	ldr	r3, [r7, #28]
 8024618:	88db      	ldrh	r3, [r3, #6]
 802461a:	b29b      	uxth	r3, r3
 802461c:	4618      	mov	r0, r3
 802461e:	f7fb fd8b 	bl	8020138 <lwip_htons>
 8024622:	4603      	mov	r3, r0
 8024624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024628:	b29b      	uxth	r3, r3
 802462a:	00db      	lsls	r3, r3, #3
 802462c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802462e:	68bb      	ldr	r3, [r7, #8]
 8024630:	685b      	ldr	r3, [r3, #4]
 8024632:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8024634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024636:	2200      	movs	r2, #0
 8024638:	701a      	strb	r2, [r3, #0]
 802463a:	2200      	movs	r2, #0
 802463c:	705a      	strb	r2, [r3, #1]
 802463e:	2200      	movs	r2, #0
 8024640:	709a      	strb	r2, [r3, #2]
 8024642:	2200      	movs	r2, #0
 8024644:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8024646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024648:	8afa      	ldrh	r2, [r7, #22]
 802464a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 802464c:	8afa      	ldrh	r2, [r7, #22]
 802464e:	8b7b      	ldrh	r3, [r7, #26]
 8024650:	4413      	add	r3, r2
 8024652:	b29a      	uxth	r2, r3
 8024654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024656:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8024658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802465a:	88db      	ldrh	r3, [r3, #6]
 802465c:	b29b      	uxth	r3, r3
 802465e:	8afa      	ldrh	r2, [r7, #22]
 8024660:	429a      	cmp	r2, r3
 8024662:	d902      	bls.n	802466a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024664:	f04f 33ff 	mov.w	r3, #4294967295
 8024668:	e106      	b.n	8024878 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802466a:	68fb      	ldr	r3, [r7, #12]
 802466c:	685b      	ldr	r3, [r3, #4]
 802466e:	627b      	str	r3, [r7, #36]	; 0x24
 8024670:	e068      	b.n	8024744 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8024672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024674:	685b      	ldr	r3, [r3, #4]
 8024676:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8024678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802467a:	889b      	ldrh	r3, [r3, #4]
 802467c:	b29a      	uxth	r2, r3
 802467e:	693b      	ldr	r3, [r7, #16]
 8024680:	889b      	ldrh	r3, [r3, #4]
 8024682:	b29b      	uxth	r3, r3
 8024684:	429a      	cmp	r2, r3
 8024686:	d235      	bcs.n	80246f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8024688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802468c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 802468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024690:	2b00      	cmp	r3, #0
 8024692:	d020      	beq.n	80246d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8024694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024696:	889b      	ldrh	r3, [r3, #4]
 8024698:	b29a      	uxth	r2, r3
 802469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802469c:	88db      	ldrh	r3, [r3, #6]
 802469e:	b29b      	uxth	r3, r3
 80246a0:	429a      	cmp	r2, r3
 80246a2:	d307      	bcc.n	80246b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80246a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246a6:	88db      	ldrh	r3, [r3, #6]
 80246a8:	b29a      	uxth	r2, r3
 80246aa:	693b      	ldr	r3, [r7, #16]
 80246ac:	889b      	ldrh	r3, [r3, #4]
 80246ae:	b29b      	uxth	r3, r3
 80246b0:	429a      	cmp	r2, r3
 80246b2:	d902      	bls.n	80246ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80246b4:	f04f 33ff 	mov.w	r3, #4294967295
 80246b8:	e0de      	b.n	8024878 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80246ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80246bc:	68ba      	ldr	r2, [r7, #8]
 80246be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80246c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80246c2:	88db      	ldrh	r3, [r3, #6]
 80246c4:	b29a      	uxth	r2, r3
 80246c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246c8:	889b      	ldrh	r3, [r3, #4]
 80246ca:	b29b      	uxth	r3, r3
 80246cc:	429a      	cmp	r2, r3
 80246ce:	d03d      	beq.n	802474c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80246d0:	2300      	movs	r3, #0
 80246d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80246d4:	e03a      	b.n	802474c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80246d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246d8:	88db      	ldrh	r3, [r3, #6]
 80246da:	b29a      	uxth	r2, r3
 80246dc:	693b      	ldr	r3, [r7, #16]
 80246de:	889b      	ldrh	r3, [r3, #4]
 80246e0:	b29b      	uxth	r3, r3
 80246e2:	429a      	cmp	r2, r3
 80246e4:	d902      	bls.n	80246ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80246e6:	f04f 33ff 	mov.w	r3, #4294967295
 80246ea:	e0c5      	b.n	8024878 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80246ec:	68fb      	ldr	r3, [r7, #12]
 80246ee:	68ba      	ldr	r2, [r7, #8]
 80246f0:	605a      	str	r2, [r3, #4]
      break;
 80246f2:	e02b      	b.n	802474c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80246f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246f6:	889b      	ldrh	r3, [r3, #4]
 80246f8:	b29a      	uxth	r2, r3
 80246fa:	693b      	ldr	r3, [r7, #16]
 80246fc:	889b      	ldrh	r3, [r3, #4]
 80246fe:	b29b      	uxth	r3, r3
 8024700:	429a      	cmp	r2, r3
 8024702:	d102      	bne.n	802470a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024704:	f04f 33ff 	mov.w	r3, #4294967295
 8024708:	e0b6      	b.n	8024878 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802470c:	889b      	ldrh	r3, [r3, #4]
 802470e:	b29a      	uxth	r2, r3
 8024710:	693b      	ldr	r3, [r7, #16]
 8024712:	88db      	ldrh	r3, [r3, #6]
 8024714:	b29b      	uxth	r3, r3
 8024716:	429a      	cmp	r2, r3
 8024718:	d202      	bcs.n	8024720 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802471a:	f04f 33ff 	mov.w	r3, #4294967295
 802471e:	e0ab      	b.n	8024878 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8024720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024722:	2b00      	cmp	r3, #0
 8024724:	d009      	beq.n	802473a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8024726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024728:	88db      	ldrh	r3, [r3, #6]
 802472a:	b29a      	uxth	r2, r3
 802472c:	693b      	ldr	r3, [r7, #16]
 802472e:	889b      	ldrh	r3, [r3, #4]
 8024730:	b29b      	uxth	r3, r3
 8024732:	429a      	cmp	r2, r3
 8024734:	d001      	beq.n	802473a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024736:	2300      	movs	r3, #0
 8024738:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802473a:	693b      	ldr	r3, [r7, #16]
 802473c:	681b      	ldr	r3, [r3, #0]
 802473e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8024740:	693b      	ldr	r3, [r7, #16]
 8024742:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8024744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024746:	2b00      	cmp	r3, #0
 8024748:	d193      	bne.n	8024672 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802474a:	e000      	b.n	802474e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 802474c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 802474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024750:	2b00      	cmp	r3, #0
 8024752:	d12d      	bne.n	80247b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8024754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024756:	2b00      	cmp	r3, #0
 8024758:	d01c      	beq.n	8024794 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802475c:	88db      	ldrh	r3, [r3, #6]
 802475e:	b29a      	uxth	r2, r3
 8024760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024762:	889b      	ldrh	r3, [r3, #4]
 8024764:	b29b      	uxth	r3, r3
 8024766:	429a      	cmp	r2, r3
 8024768:	d906      	bls.n	8024778 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802476a:	4b45      	ldr	r3, [pc, #276]	; (8024880 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802476c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8024770:	4944      	ldr	r1, [pc, #272]	; (8024884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8024772:	4845      	ldr	r0, [pc, #276]	; (8024888 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024774:	f000 fdf4 	bl	8025360 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8024778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802477a:	68ba      	ldr	r2, [r7, #8]
 802477c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024780:	88db      	ldrh	r3, [r3, #6]
 8024782:	b29a      	uxth	r2, r3
 8024784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024786:	889b      	ldrh	r3, [r3, #4]
 8024788:	b29b      	uxth	r3, r3
 802478a:	429a      	cmp	r2, r3
 802478c:	d010      	beq.n	80247b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 802478e:	2300      	movs	r3, #0
 8024790:	623b      	str	r3, [r7, #32]
 8024792:	e00d      	b.n	80247b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8024794:	68fb      	ldr	r3, [r7, #12]
 8024796:	685b      	ldr	r3, [r3, #4]
 8024798:	2b00      	cmp	r3, #0
 802479a:	d006      	beq.n	80247aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 802479c:	4b38      	ldr	r3, [pc, #224]	; (8024880 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802479e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80247a2:	493a      	ldr	r1, [pc, #232]	; (802488c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80247a4:	4838      	ldr	r0, [pc, #224]	; (8024888 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80247a6:	f000 fddb 	bl	8025360 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80247aa:	68fb      	ldr	r3, [r7, #12]
 80247ac:	68ba      	ldr	r2, [r7, #8]
 80247ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	d105      	bne.n	80247c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80247b6:	68fb      	ldr	r3, [r7, #12]
 80247b8:	7f9b      	ldrb	r3, [r3, #30]
 80247ba:	f003 0301 	and.w	r3, r3, #1
 80247be:	2b00      	cmp	r3, #0
 80247c0:	d059      	beq.n	8024876 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80247c2:	6a3b      	ldr	r3, [r7, #32]
 80247c4:	2b00      	cmp	r3, #0
 80247c6:	d04f      	beq.n	8024868 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80247c8:	68fb      	ldr	r3, [r7, #12]
 80247ca:	685b      	ldr	r3, [r3, #4]
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d006      	beq.n	80247de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80247d0:	68fb      	ldr	r3, [r7, #12]
 80247d2:	685b      	ldr	r3, [r3, #4]
 80247d4:	685b      	ldr	r3, [r3, #4]
 80247d6:	889b      	ldrh	r3, [r3, #4]
 80247d8:	b29b      	uxth	r3, r3
 80247da:	2b00      	cmp	r3, #0
 80247dc:	d002      	beq.n	80247e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80247de:	2300      	movs	r3, #0
 80247e0:	623b      	str	r3, [r7, #32]
 80247e2:	e041      	b.n	8024868 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80247e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247e6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80247e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247ea:	681b      	ldr	r3, [r3, #0]
 80247ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80247ee:	e012      	b.n	8024816 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80247f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247f2:	685b      	ldr	r3, [r3, #4]
 80247f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80247f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80247f8:	88db      	ldrh	r3, [r3, #6]
 80247fa:	b29a      	uxth	r2, r3
 80247fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247fe:	889b      	ldrh	r3, [r3, #4]
 8024800:	b29b      	uxth	r3, r3
 8024802:	429a      	cmp	r2, r3
 8024804:	d002      	beq.n	802480c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8024806:	2300      	movs	r3, #0
 8024808:	623b      	str	r3, [r7, #32]
            break;
 802480a:	e007      	b.n	802481c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 802480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802480e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8024810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024812:	681b      	ldr	r3, [r3, #0]
 8024814:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8024816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024818:	2b00      	cmp	r3, #0
 802481a:	d1e9      	bne.n	80247f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 802481c:	6a3b      	ldr	r3, [r7, #32]
 802481e:	2b00      	cmp	r3, #0
 8024820:	d022      	beq.n	8024868 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8024822:	68fb      	ldr	r3, [r7, #12]
 8024824:	685b      	ldr	r3, [r3, #4]
 8024826:	2b00      	cmp	r3, #0
 8024828:	d106      	bne.n	8024838 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 802482a:	4b15      	ldr	r3, [pc, #84]	; (8024880 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802482c:	f240 12df 	movw	r2, #479	; 0x1df
 8024830:	4917      	ldr	r1, [pc, #92]	; (8024890 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8024832:	4815      	ldr	r0, [pc, #84]	; (8024888 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024834:	f000 fd94 	bl	8025360 <iprintf>
          LWIP_ASSERT("sanity check",
 8024838:	68fb      	ldr	r3, [r7, #12]
 802483a:	685b      	ldr	r3, [r3, #4]
 802483c:	685b      	ldr	r3, [r3, #4]
 802483e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024840:	429a      	cmp	r2, r3
 8024842:	d106      	bne.n	8024852 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8024844:	4b0e      	ldr	r3, [pc, #56]	; (8024880 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024846:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802484a:	4911      	ldr	r1, [pc, #68]	; (8024890 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802484c:	480e      	ldr	r0, [pc, #56]	; (8024888 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802484e:	f000 fd87 	bl	8025360 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8024852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024854:	681b      	ldr	r3, [r3, #0]
 8024856:	2b00      	cmp	r3, #0
 8024858:	d006      	beq.n	8024868 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 802485a:	4b09      	ldr	r3, [pc, #36]	; (8024880 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802485c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8024860:	490c      	ldr	r1, [pc, #48]	; (8024894 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8024862:	4809      	ldr	r0, [pc, #36]	; (8024888 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024864:	f000 fd7c 	bl	8025360 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8024868:	6a3b      	ldr	r3, [r7, #32]
 802486a:	2b00      	cmp	r3, #0
 802486c:	bf14      	ite	ne
 802486e:	2301      	movne	r3, #1
 8024870:	2300      	moveq	r3, #0
 8024872:	b2db      	uxtb	r3, r3
 8024874:	e000      	b.n	8024878 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8024876:	2300      	movs	r3, #0
}
 8024878:	4618      	mov	r0, r3
 802487a:	3730      	adds	r7, #48	; 0x30
 802487c:	46bd      	mov	sp, r7
 802487e:	bd80      	pop	{r7, pc}
 8024880:	0802bb94 	.word	0x0802bb94
 8024884:	0802bc78 	.word	0x0802bc78
 8024888:	0802bbdc 	.word	0x0802bbdc
 802488c:	0802bc98 	.word	0x0802bc98
 8024890:	0802bcd0 	.word	0x0802bcd0
 8024894:	0802bce0 	.word	0x0802bce0

08024898 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8024898:	b580      	push	{r7, lr}
 802489a:	b08e      	sub	sp, #56	; 0x38
 802489c:	af00      	add	r7, sp, #0
 802489e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80248a0:	687b      	ldr	r3, [r7, #4]
 80248a2:	685b      	ldr	r3, [r3, #4]
 80248a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80248a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248a8:	781b      	ldrb	r3, [r3, #0]
 80248aa:	f003 030f 	and.w	r3, r3, #15
 80248ae:	b2db      	uxtb	r3, r3
 80248b0:	009b      	lsls	r3, r3, #2
 80248b2:	b2db      	uxtb	r3, r3
 80248b4:	2b14      	cmp	r3, #20
 80248b6:	f040 8171 	bne.w	8024b9c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80248ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248bc:	88db      	ldrh	r3, [r3, #6]
 80248be:	b29b      	uxth	r3, r3
 80248c0:	4618      	mov	r0, r3
 80248c2:	f7fb fc39 	bl	8020138 <lwip_htons>
 80248c6:	4603      	mov	r3, r0
 80248c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80248cc:	b29b      	uxth	r3, r3
 80248ce:	00db      	lsls	r3, r3, #3
 80248d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80248d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248d4:	885b      	ldrh	r3, [r3, #2]
 80248d6:	b29b      	uxth	r3, r3
 80248d8:	4618      	mov	r0, r3
 80248da:	f7fb fc2d 	bl	8020138 <lwip_htons>
 80248de:	4603      	mov	r3, r0
 80248e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80248e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248e4:	781b      	ldrb	r3, [r3, #0]
 80248e6:	f003 030f 	and.w	r3, r3, #15
 80248ea:	b2db      	uxtb	r3, r3
 80248ec:	009b      	lsls	r3, r3, #2
 80248ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80248f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80248f6:	b29b      	uxth	r3, r3
 80248f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80248fa:	429a      	cmp	r2, r3
 80248fc:	f0c0 8150 	bcc.w	8024ba0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8024900:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024904:	b29b      	uxth	r3, r3
 8024906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8024908:	1ad3      	subs	r3, r2, r3
 802490a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 802490c:	6878      	ldr	r0, [r7, #4]
 802490e:	f7fd f877 	bl	8021a00 <pbuf_clen>
 8024912:	4603      	mov	r3, r0
 8024914:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024916:	4b8c      	ldr	r3, [pc, #560]	; (8024b48 <ip4_reass+0x2b0>)
 8024918:	881b      	ldrh	r3, [r3, #0]
 802491a:	461a      	mov	r2, r3
 802491c:	8c3b      	ldrh	r3, [r7, #32]
 802491e:	4413      	add	r3, r2
 8024920:	2b0a      	cmp	r3, #10
 8024922:	dd10      	ble.n	8024946 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8024924:	8c3b      	ldrh	r3, [r7, #32]
 8024926:	4619      	mov	r1, r3
 8024928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802492a:	f7ff fd81 	bl	8024430 <ip_reass_remove_oldest_datagram>
 802492e:	4603      	mov	r3, r0
 8024930:	2b00      	cmp	r3, #0
 8024932:	f000 8137 	beq.w	8024ba4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8024936:	4b84      	ldr	r3, [pc, #528]	; (8024b48 <ip4_reass+0x2b0>)
 8024938:	881b      	ldrh	r3, [r3, #0]
 802493a:	461a      	mov	r2, r3
 802493c:	8c3b      	ldrh	r3, [r7, #32]
 802493e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8024940:	2b0a      	cmp	r3, #10
 8024942:	f300 812f 	bgt.w	8024ba4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024946:	4b81      	ldr	r3, [pc, #516]	; (8024b4c <ip4_reass+0x2b4>)
 8024948:	681b      	ldr	r3, [r3, #0]
 802494a:	633b      	str	r3, [r7, #48]	; 0x30
 802494c:	e015      	b.n	802497a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024950:	695a      	ldr	r2, [r3, #20]
 8024952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024954:	68db      	ldr	r3, [r3, #12]
 8024956:	429a      	cmp	r2, r3
 8024958:	d10c      	bne.n	8024974 <ip4_reass+0xdc>
 802495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802495c:	699a      	ldr	r2, [r3, #24]
 802495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024960:	691b      	ldr	r3, [r3, #16]
 8024962:	429a      	cmp	r2, r3
 8024964:	d106      	bne.n	8024974 <ip4_reass+0xdc>
 8024966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024968:	899a      	ldrh	r2, [r3, #12]
 802496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802496c:	889b      	ldrh	r3, [r3, #4]
 802496e:	b29b      	uxth	r3, r3
 8024970:	429a      	cmp	r2, r3
 8024972:	d006      	beq.n	8024982 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024976:	681b      	ldr	r3, [r3, #0]
 8024978:	633b      	str	r3, [r7, #48]	; 0x30
 802497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802497c:	2b00      	cmp	r3, #0
 802497e:	d1e6      	bne.n	802494e <ip4_reass+0xb6>
 8024980:	e000      	b.n	8024984 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8024982:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8024984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024986:	2b00      	cmp	r3, #0
 8024988:	d109      	bne.n	802499e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802498a:	8c3b      	ldrh	r3, [r7, #32]
 802498c:	4619      	mov	r1, r3
 802498e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024990:	f7ff fdb0 	bl	80244f4 <ip_reass_enqueue_new_datagram>
 8024994:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8024996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024998:	2b00      	cmp	r3, #0
 802499a:	d11c      	bne.n	80249d6 <ip4_reass+0x13e>
      goto nullreturn;
 802499c:	e105      	b.n	8024baa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80249a0:	88db      	ldrh	r3, [r3, #6]
 80249a2:	b29b      	uxth	r3, r3
 80249a4:	4618      	mov	r0, r3
 80249a6:	f7fb fbc7 	bl	8020138 <lwip_htons>
 80249aa:	4603      	mov	r3, r0
 80249ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	d110      	bne.n	80249d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80249b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80249b6:	89db      	ldrh	r3, [r3, #14]
 80249b8:	4618      	mov	r0, r3
 80249ba:	f7fb fbbd 	bl	8020138 <lwip_htons>
 80249be:	4603      	mov	r3, r0
 80249c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	d006      	beq.n	80249d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80249c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80249ca:	3308      	adds	r3, #8
 80249cc:	2214      	movs	r2, #20
 80249ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80249d0:	4618      	mov	r0, r3
 80249d2:	f000 fbb5 	bl	8025140 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80249d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80249d8:	88db      	ldrh	r3, [r3, #6]
 80249da:	b29b      	uxth	r3, r3
 80249dc:	f003 0320 	and.w	r3, r3, #32
 80249e0:	2b00      	cmp	r3, #0
 80249e2:	bf0c      	ite	eq
 80249e4:	2301      	moveq	r3, #1
 80249e6:	2300      	movne	r3, #0
 80249e8:	b2db      	uxtb	r3, r3
 80249ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80249ec:	69fb      	ldr	r3, [r7, #28]
 80249ee:	2b00      	cmp	r3, #0
 80249f0:	d00e      	beq.n	8024a10 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80249f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80249f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80249f6:	4413      	add	r3, r2
 80249f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80249fa:	8b7a      	ldrh	r2, [r7, #26]
 80249fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80249fe:	429a      	cmp	r2, r3
 8024a00:	f0c0 80a0 	bcc.w	8024b44 <ip4_reass+0x2ac>
 8024a04:	8b7b      	ldrh	r3, [r7, #26]
 8024a06:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8024a0a:	4293      	cmp	r3, r2
 8024a0c:	f200 809a 	bhi.w	8024b44 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8024a10:	69fa      	ldr	r2, [r7, #28]
 8024a12:	6879      	ldr	r1, [r7, #4]
 8024a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024a16:	f7ff fdd5 	bl	80245c4 <ip_reass_chain_frag_into_datagram_and_validate>
 8024a1a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8024a1c:	697b      	ldr	r3, [r7, #20]
 8024a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024a22:	f000 809b 	beq.w	8024b5c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024a26:	4b48      	ldr	r3, [pc, #288]	; (8024b48 <ip4_reass+0x2b0>)
 8024a28:	881a      	ldrh	r2, [r3, #0]
 8024a2a:	8c3b      	ldrh	r3, [r7, #32]
 8024a2c:	4413      	add	r3, r2
 8024a2e:	b29a      	uxth	r2, r3
 8024a30:	4b45      	ldr	r3, [pc, #276]	; (8024b48 <ip4_reass+0x2b0>)
 8024a32:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8024a34:	69fb      	ldr	r3, [r7, #28]
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d00d      	beq.n	8024a56 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8024a3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024a3e:	4413      	add	r3, r2
 8024a40:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8024a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a44:	8a7a      	ldrh	r2, [r7, #18]
 8024a46:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a4a:	7f9b      	ldrb	r3, [r3, #30]
 8024a4c:	f043 0301 	orr.w	r3, r3, #1
 8024a50:	b2da      	uxtb	r2, r3
 8024a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a54:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8024a56:	697b      	ldr	r3, [r7, #20]
 8024a58:	2b01      	cmp	r3, #1
 8024a5a:	d171      	bne.n	8024b40 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8024a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a5e:	8b9b      	ldrh	r3, [r3, #28]
 8024a60:	3314      	adds	r3, #20
 8024a62:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8024a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a66:	685b      	ldr	r3, [r3, #4]
 8024a68:	685b      	ldr	r3, [r3, #4]
 8024a6a:	681b      	ldr	r3, [r3, #0]
 8024a6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8024a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a70:	685b      	ldr	r3, [r3, #4]
 8024a72:	685b      	ldr	r3, [r3, #4]
 8024a74:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8024a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a78:	3308      	adds	r3, #8
 8024a7a:	2214      	movs	r2, #20
 8024a7c:	4619      	mov	r1, r3
 8024a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024a80:	f000 fb5e 	bl	8025140 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8024a84:	8a3b      	ldrh	r3, [r7, #16]
 8024a86:	4618      	mov	r0, r3
 8024a88:	f7fb fb56 	bl	8020138 <lwip_htons>
 8024a8c:	4603      	mov	r3, r0
 8024a8e:	461a      	mov	r2, r3
 8024a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a92:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8024a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a96:	2200      	movs	r2, #0
 8024a98:	719a      	strb	r2, [r3, #6]
 8024a9a:	2200      	movs	r2, #0
 8024a9c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8024a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024aa0:	2200      	movs	r2, #0
 8024aa2:	729a      	strb	r2, [r3, #10]
 8024aa4:	2200      	movs	r2, #0
 8024aa6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8024aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024aaa:	685b      	ldr	r3, [r3, #4]
 8024aac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8024aae:	e00d      	b.n	8024acc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8024ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024ab2:	685b      	ldr	r3, [r3, #4]
 8024ab4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8024ab6:	2114      	movs	r1, #20
 8024ab8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024aba:	f7fc fe93 	bl	80217e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8024abe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024ac0:	6878      	ldr	r0, [r7, #4]
 8024ac2:	f7fc ffd7 	bl	8021a74 <pbuf_cat>
      r = iprh->next_pbuf;
 8024ac6:	68fb      	ldr	r3, [r7, #12]
 8024ac8:	681b      	ldr	r3, [r3, #0]
 8024aca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8024acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024ace:	2b00      	cmp	r3, #0
 8024ad0:	d1ee      	bne.n	8024ab0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8024ad2:	4b1e      	ldr	r3, [pc, #120]	; (8024b4c <ip4_reass+0x2b4>)
 8024ad4:	681b      	ldr	r3, [r3, #0]
 8024ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024ad8:	429a      	cmp	r2, r3
 8024ada:	d102      	bne.n	8024ae2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8024adc:	2300      	movs	r3, #0
 8024ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024ae0:	e010      	b.n	8024b04 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024ae2:	4b1a      	ldr	r3, [pc, #104]	; (8024b4c <ip4_reass+0x2b4>)
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024ae8:	e007      	b.n	8024afa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8024aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024aec:	681b      	ldr	r3, [r3, #0]
 8024aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024af0:	429a      	cmp	r2, r3
 8024af2:	d006      	beq.n	8024b02 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024af6:	681b      	ldr	r3, [r3, #0]
 8024af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024afc:	2b00      	cmp	r3, #0
 8024afe:	d1f4      	bne.n	8024aea <ip4_reass+0x252>
 8024b00:	e000      	b.n	8024b04 <ip4_reass+0x26c>
          break;
 8024b02:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8024b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024b08:	f7ff fd2e 	bl	8024568 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8024b0c:	6878      	ldr	r0, [r7, #4]
 8024b0e:	f7fc ff77 	bl	8021a00 <pbuf_clen>
 8024b12:	4603      	mov	r3, r0
 8024b14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024b16:	4b0c      	ldr	r3, [pc, #48]	; (8024b48 <ip4_reass+0x2b0>)
 8024b18:	881b      	ldrh	r3, [r3, #0]
 8024b1a:	8c3a      	ldrh	r2, [r7, #32]
 8024b1c:	429a      	cmp	r2, r3
 8024b1e:	d906      	bls.n	8024b2e <ip4_reass+0x296>
 8024b20:	4b0b      	ldr	r3, [pc, #44]	; (8024b50 <ip4_reass+0x2b8>)
 8024b22:	f240 229b 	movw	r2, #667	; 0x29b
 8024b26:	490b      	ldr	r1, [pc, #44]	; (8024b54 <ip4_reass+0x2bc>)
 8024b28:	480b      	ldr	r0, [pc, #44]	; (8024b58 <ip4_reass+0x2c0>)
 8024b2a:	f000 fc19 	bl	8025360 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8024b2e:	4b06      	ldr	r3, [pc, #24]	; (8024b48 <ip4_reass+0x2b0>)
 8024b30:	881a      	ldrh	r2, [r3, #0]
 8024b32:	8c3b      	ldrh	r3, [r7, #32]
 8024b34:	1ad3      	subs	r3, r2, r3
 8024b36:	b29a      	uxth	r2, r3
 8024b38:	4b03      	ldr	r3, [pc, #12]	; (8024b48 <ip4_reass+0x2b0>)
 8024b3a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	e038      	b.n	8024bb2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8024b40:	2300      	movs	r3, #0
 8024b42:	e036      	b.n	8024bb2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8024b44:	bf00      	nop
 8024b46:	e00a      	b.n	8024b5e <ip4_reass+0x2c6>
 8024b48:	20014ff8 	.word	0x20014ff8
 8024b4c:	20014ff4 	.word	0x20014ff4
 8024b50:	0802bb94 	.word	0x0802bb94
 8024b54:	0802bd04 	.word	0x0802bd04
 8024b58:	0802bbdc 	.word	0x0802bbdc
    goto nullreturn_ipr;
 8024b5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8024b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b60:	2b00      	cmp	r3, #0
 8024b62:	d106      	bne.n	8024b72 <ip4_reass+0x2da>
 8024b64:	4b15      	ldr	r3, [pc, #84]	; (8024bbc <ip4_reass+0x324>)
 8024b66:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8024b6a:	4915      	ldr	r1, [pc, #84]	; (8024bc0 <ip4_reass+0x328>)
 8024b6c:	4815      	ldr	r0, [pc, #84]	; (8024bc4 <ip4_reass+0x32c>)
 8024b6e:	f000 fbf7 	bl	8025360 <iprintf>
  if (ipr->p == NULL) {
 8024b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b74:	685b      	ldr	r3, [r3, #4]
 8024b76:	2b00      	cmp	r3, #0
 8024b78:	d116      	bne.n	8024ba8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8024b7a:	4b13      	ldr	r3, [pc, #76]	; (8024bc8 <ip4_reass+0x330>)
 8024b7c:	681b      	ldr	r3, [r3, #0]
 8024b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024b80:	429a      	cmp	r2, r3
 8024b82:	d006      	beq.n	8024b92 <ip4_reass+0x2fa>
 8024b84:	4b0d      	ldr	r3, [pc, #52]	; (8024bbc <ip4_reass+0x324>)
 8024b86:	f240 22ab 	movw	r2, #683	; 0x2ab
 8024b8a:	4910      	ldr	r1, [pc, #64]	; (8024bcc <ip4_reass+0x334>)
 8024b8c:	480d      	ldr	r0, [pc, #52]	; (8024bc4 <ip4_reass+0x32c>)
 8024b8e:	f000 fbe7 	bl	8025360 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8024b92:	2100      	movs	r1, #0
 8024b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024b96:	f7ff fce7 	bl	8024568 <ip_reass_dequeue_datagram>
 8024b9a:	e006      	b.n	8024baa <ip4_reass+0x312>
    goto nullreturn;
 8024b9c:	bf00      	nop
 8024b9e:	e004      	b.n	8024baa <ip4_reass+0x312>
    goto nullreturn;
 8024ba0:	bf00      	nop
 8024ba2:	e002      	b.n	8024baa <ip4_reass+0x312>
      goto nullreturn;
 8024ba4:	bf00      	nop
 8024ba6:	e000      	b.n	8024baa <ip4_reass+0x312>
  }

nullreturn:
 8024ba8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8024baa:	6878      	ldr	r0, [r7, #4]
 8024bac:	f7fc fea0 	bl	80218f0 <pbuf_free>
  return NULL;
 8024bb0:	2300      	movs	r3, #0
}
 8024bb2:	4618      	mov	r0, r3
 8024bb4:	3738      	adds	r7, #56	; 0x38
 8024bb6:	46bd      	mov	sp, r7
 8024bb8:	bd80      	pop	{r7, pc}
 8024bba:	bf00      	nop
 8024bbc:	0802bb94 	.word	0x0802bb94
 8024bc0:	0802bd20 	.word	0x0802bd20
 8024bc4:	0802bbdc 	.word	0x0802bbdc
 8024bc8:	20014ff4 	.word	0x20014ff4
 8024bcc:	0802bd2c 	.word	0x0802bd2c

08024bd0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8024bd0:	b580      	push	{r7, lr}
 8024bd2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024bd4:	2002      	movs	r0, #2
 8024bd6:	f7fb ff0b 	bl	80209f0 <memp_malloc>
 8024bda:	4603      	mov	r3, r0
}
 8024bdc:	4618      	mov	r0, r3
 8024bde:	bd80      	pop	{r7, pc}

08024be0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8024be0:	b580      	push	{r7, lr}
 8024be2:	b082      	sub	sp, #8
 8024be4:	af00      	add	r7, sp, #0
 8024be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8024be8:	687b      	ldr	r3, [r7, #4]
 8024bea:	2b00      	cmp	r3, #0
 8024bec:	d106      	bne.n	8024bfc <ip_frag_free_pbuf_custom_ref+0x1c>
 8024bee:	4b07      	ldr	r3, [pc, #28]	; (8024c0c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8024bf0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8024bf4:	4906      	ldr	r1, [pc, #24]	; (8024c10 <ip_frag_free_pbuf_custom_ref+0x30>)
 8024bf6:	4807      	ldr	r0, [pc, #28]	; (8024c14 <ip_frag_free_pbuf_custom_ref+0x34>)
 8024bf8:	f000 fbb2 	bl	8025360 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8024bfc:	6879      	ldr	r1, [r7, #4]
 8024bfe:	2002      	movs	r0, #2
 8024c00:	f7fb ff66 	bl	8020ad0 <memp_free>
}
 8024c04:	bf00      	nop
 8024c06:	3708      	adds	r7, #8
 8024c08:	46bd      	mov	sp, r7
 8024c0a:	bd80      	pop	{r7, pc}
 8024c0c:	0802bb94 	.word	0x0802bb94
 8024c10:	0802bd4c 	.word	0x0802bd4c
 8024c14:	0802bbdc 	.word	0x0802bbdc

08024c18 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8024c18:	b580      	push	{r7, lr}
 8024c1a:	b084      	sub	sp, #16
 8024c1c:	af00      	add	r7, sp, #0
 8024c1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8024c24:	68fb      	ldr	r3, [r7, #12]
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	d106      	bne.n	8024c38 <ipfrag_free_pbuf_custom+0x20>
 8024c2a:	4b11      	ldr	r3, [pc, #68]	; (8024c70 <ipfrag_free_pbuf_custom+0x58>)
 8024c2c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8024c30:	4910      	ldr	r1, [pc, #64]	; (8024c74 <ipfrag_free_pbuf_custom+0x5c>)
 8024c32:	4811      	ldr	r0, [pc, #68]	; (8024c78 <ipfrag_free_pbuf_custom+0x60>)
 8024c34:	f000 fb94 	bl	8025360 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8024c38:	68fa      	ldr	r2, [r7, #12]
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	429a      	cmp	r2, r3
 8024c3e:	d006      	beq.n	8024c4e <ipfrag_free_pbuf_custom+0x36>
 8024c40:	4b0b      	ldr	r3, [pc, #44]	; (8024c70 <ipfrag_free_pbuf_custom+0x58>)
 8024c42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8024c46:	490d      	ldr	r1, [pc, #52]	; (8024c7c <ipfrag_free_pbuf_custom+0x64>)
 8024c48:	480b      	ldr	r0, [pc, #44]	; (8024c78 <ipfrag_free_pbuf_custom+0x60>)
 8024c4a:	f000 fb89 	bl	8025360 <iprintf>
  if (pcr->original != NULL) {
 8024c4e:	68fb      	ldr	r3, [r7, #12]
 8024c50:	695b      	ldr	r3, [r3, #20]
 8024c52:	2b00      	cmp	r3, #0
 8024c54:	d004      	beq.n	8024c60 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8024c56:	68fb      	ldr	r3, [r7, #12]
 8024c58:	695b      	ldr	r3, [r3, #20]
 8024c5a:	4618      	mov	r0, r3
 8024c5c:	f7fc fe48 	bl	80218f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8024c60:	68f8      	ldr	r0, [r7, #12]
 8024c62:	f7ff ffbd 	bl	8024be0 <ip_frag_free_pbuf_custom_ref>
}
 8024c66:	bf00      	nop
 8024c68:	3710      	adds	r7, #16
 8024c6a:	46bd      	mov	sp, r7
 8024c6c:	bd80      	pop	{r7, pc}
 8024c6e:	bf00      	nop
 8024c70:	0802bb94 	.word	0x0802bb94
 8024c74:	0802bd58 	.word	0x0802bd58
 8024c78:	0802bbdc 	.word	0x0802bbdc
 8024c7c:	0802bd64 	.word	0x0802bd64

08024c80 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024c80:	b580      	push	{r7, lr}
 8024c82:	b094      	sub	sp, #80	; 0x50
 8024c84:	af02      	add	r7, sp, #8
 8024c86:	60f8      	str	r0, [r7, #12]
 8024c88:	60b9      	str	r1, [r7, #8]
 8024c8a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8024c8c:	2300      	movs	r3, #0
 8024c8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024c92:	68bb      	ldr	r3, [r7, #8]
 8024c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024c96:	3b14      	subs	r3, #20
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	da00      	bge.n	8024c9e <ip4_frag+0x1e>
 8024c9c:	3307      	adds	r3, #7
 8024c9e:	10db      	asrs	r3, r3, #3
 8024ca0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8024ca2:	2314      	movs	r3, #20
 8024ca4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8024ca6:	68fb      	ldr	r3, [r7, #12]
 8024ca8:	685b      	ldr	r3, [r3, #4]
 8024caa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8024cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024cae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8024cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024cb2:	781b      	ldrb	r3, [r3, #0]
 8024cb4:	f003 030f 	and.w	r3, r3, #15
 8024cb8:	b2db      	uxtb	r3, r3
 8024cba:	009b      	lsls	r3, r3, #2
 8024cbc:	b2db      	uxtb	r3, r3
 8024cbe:	2b14      	cmp	r3, #20
 8024cc0:	d002      	beq.n	8024cc8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8024cc2:	f06f 0305 	mvn.w	r3, #5
 8024cc6:	e110      	b.n	8024eea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8024cc8:	68fb      	ldr	r3, [r7, #12]
 8024cca:	895b      	ldrh	r3, [r3, #10]
 8024ccc:	2b13      	cmp	r3, #19
 8024cce:	d809      	bhi.n	8024ce4 <ip4_frag+0x64>
 8024cd0:	4b88      	ldr	r3, [pc, #544]	; (8024ef4 <ip4_frag+0x274>)
 8024cd2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8024cd6:	4988      	ldr	r1, [pc, #544]	; (8024ef8 <ip4_frag+0x278>)
 8024cd8:	4888      	ldr	r0, [pc, #544]	; (8024efc <ip4_frag+0x27c>)
 8024cda:	f000 fb41 	bl	8025360 <iprintf>
 8024cde:	f06f 0305 	mvn.w	r3, #5
 8024ce2:	e102      	b.n	8024eea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8024ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ce6:	88db      	ldrh	r3, [r3, #6]
 8024ce8:	b29b      	uxth	r3, r3
 8024cea:	4618      	mov	r0, r3
 8024cec:	f7fb fa24 	bl	8020138 <lwip_htons>
 8024cf0:	4603      	mov	r3, r0
 8024cf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8024cf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024cf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024cfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8024cfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024d04:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8024d06:	68fb      	ldr	r3, [r7, #12]
 8024d08:	891b      	ldrh	r3, [r3, #8]
 8024d0a:	3b14      	subs	r3, #20
 8024d0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8024d10:	e0e1      	b.n	8024ed6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024d12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8024d14:	00db      	lsls	r3, r3, #3
 8024d16:	b29b      	uxth	r3, r3
 8024d18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8024d1c:	4293      	cmp	r3, r2
 8024d1e:	bf28      	it	cs
 8024d20:	4613      	movcs	r3, r2
 8024d22:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8024d24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024d28:	2114      	movs	r1, #20
 8024d2a:	200e      	movs	r0, #14
 8024d2c:	f7fc fafe 	bl	802132c <pbuf_alloc>
 8024d30:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8024d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d34:	2b00      	cmp	r3, #0
 8024d36:	f000 80d5 	beq.w	8024ee4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d3c:	895b      	ldrh	r3, [r3, #10]
 8024d3e:	2b13      	cmp	r3, #19
 8024d40:	d806      	bhi.n	8024d50 <ip4_frag+0xd0>
 8024d42:	4b6c      	ldr	r3, [pc, #432]	; (8024ef4 <ip4_frag+0x274>)
 8024d44:	f44f 7249 	mov.w	r2, #804	; 0x324
 8024d48:	496d      	ldr	r1, [pc, #436]	; (8024f00 <ip4_frag+0x280>)
 8024d4a:	486c      	ldr	r0, [pc, #432]	; (8024efc <ip4_frag+0x27c>)
 8024d4c:	f000 fb08 	bl	8025360 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8024d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d52:	685b      	ldr	r3, [r3, #4]
 8024d54:	2214      	movs	r2, #20
 8024d56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024d58:	4618      	mov	r0, r3
 8024d5a:	f000 f9f1 	bl	8025140 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8024d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d60:	685b      	ldr	r3, [r3, #4]
 8024d62:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8024d64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024d66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8024d6a:	e064      	b.n	8024e36 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8024d6c:	68fb      	ldr	r3, [r7, #12]
 8024d6e:	895a      	ldrh	r2, [r3, #10]
 8024d70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8024d72:	1ad3      	subs	r3, r2, r3
 8024d74:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024d76:	68fb      	ldr	r3, [r7, #12]
 8024d78:	895b      	ldrh	r3, [r3, #10]
 8024d7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8024d7c:	429a      	cmp	r2, r3
 8024d7e:	d906      	bls.n	8024d8e <ip4_frag+0x10e>
 8024d80:	4b5c      	ldr	r3, [pc, #368]	; (8024ef4 <ip4_frag+0x274>)
 8024d82:	f240 322d 	movw	r2, #813	; 0x32d
 8024d86:	495f      	ldr	r1, [pc, #380]	; (8024f04 <ip4_frag+0x284>)
 8024d88:	485c      	ldr	r0, [pc, #368]	; (8024efc <ip4_frag+0x27c>)
 8024d8a:	f000 fae9 	bl	8025360 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8024d8e:	8bfa      	ldrh	r2, [r7, #30]
 8024d90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024d94:	4293      	cmp	r3, r2
 8024d96:	bf28      	it	cs
 8024d98:	4613      	movcs	r3, r2
 8024d9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8024d9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	d105      	bne.n	8024db2 <ip4_frag+0x132>
        poff = 0;
 8024da6:	2300      	movs	r3, #0
 8024da8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8024daa:	68fb      	ldr	r3, [r7, #12]
 8024dac:	681b      	ldr	r3, [r3, #0]
 8024dae:	60fb      	str	r3, [r7, #12]
        continue;
 8024db0:	e041      	b.n	8024e36 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8024db2:	f7ff ff0d 	bl	8024bd0 <ip_frag_alloc_pbuf_custom_ref>
 8024db6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8024db8:	69bb      	ldr	r3, [r7, #24]
 8024dba:	2b00      	cmp	r3, #0
 8024dbc:	d103      	bne.n	8024dc6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8024dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024dc0:	f7fc fd96 	bl	80218f0 <pbuf_free>
        goto memerr;
 8024dc4:	e08f      	b.n	8024ee6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024dc6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024dcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8024dce:	4413      	add	r3, r2
 8024dd0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8024dd4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8024dd8:	9201      	str	r2, [sp, #4]
 8024dda:	9300      	str	r3, [sp, #0]
 8024ddc:	4603      	mov	r3, r0
 8024dde:	2241      	movs	r2, #65	; 0x41
 8024de0:	2000      	movs	r0, #0
 8024de2:	f7fc fbcb 	bl	802157c <pbuf_alloced_custom>
 8024de6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8024de8:	697b      	ldr	r3, [r7, #20]
 8024dea:	2b00      	cmp	r3, #0
 8024dec:	d106      	bne.n	8024dfc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8024dee:	69b8      	ldr	r0, [r7, #24]
 8024df0:	f7ff fef6 	bl	8024be0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8024df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024df6:	f7fc fd7b 	bl	80218f0 <pbuf_free>
        goto memerr;
 8024dfa:	e074      	b.n	8024ee6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8024dfc:	68f8      	ldr	r0, [r7, #12]
 8024dfe:	f7fc fe17 	bl	8021a30 <pbuf_ref>
      pcr->original = p;
 8024e02:	69bb      	ldr	r3, [r7, #24]
 8024e04:	68fa      	ldr	r2, [r7, #12]
 8024e06:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024e08:	69bb      	ldr	r3, [r7, #24]
 8024e0a:	4a3f      	ldr	r2, [pc, #252]	; (8024f08 <ip4_frag+0x288>)
 8024e0c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8024e0e:	6979      	ldr	r1, [r7, #20]
 8024e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024e12:	f7fc fe2f 	bl	8021a74 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024e16:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8024e1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024e1e:	1ad3      	subs	r3, r2, r3
 8024e20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8024e24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024e28:	2b00      	cmp	r3, #0
 8024e2a:	d004      	beq.n	8024e36 <ip4_frag+0x1b6>
        poff = 0;
 8024e2c:	2300      	movs	r3, #0
 8024e2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8024e30:	68fb      	ldr	r3, [r7, #12]
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8024e36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024e3a:	2b00      	cmp	r3, #0
 8024e3c:	d196      	bne.n	8024d6c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8024e3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8024e40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024e44:	4413      	add	r3, r2
 8024e46:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8024e48:	68bb      	ldr	r3, [r7, #8]
 8024e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024e4c:	f1a3 0213 	sub.w	r2, r3, #19
 8024e50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8024e54:	429a      	cmp	r2, r3
 8024e56:	bfcc      	ite	gt
 8024e58:	2301      	movgt	r3, #1
 8024e5a:	2300      	movle	r3, #0
 8024e5c:	b2db      	uxtb	r3, r3
 8024e5e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8024e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8024e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024e68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8024e6a:	6a3b      	ldr	r3, [r7, #32]
 8024e6c:	2b00      	cmp	r3, #0
 8024e6e:	d002      	beq.n	8024e76 <ip4_frag+0x1f6>
 8024e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e72:	2b00      	cmp	r3, #0
 8024e74:	d003      	beq.n	8024e7e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8024e76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024e7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024e7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024e80:	4618      	mov	r0, r3
 8024e82:	f7fb f959 	bl	8020138 <lwip_htons>
 8024e86:	4603      	mov	r3, r0
 8024e88:	461a      	mov	r2, r3
 8024e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024e8c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024e8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024e90:	3314      	adds	r3, #20
 8024e92:	b29b      	uxth	r3, r3
 8024e94:	4618      	mov	r0, r3
 8024e96:	f7fb f94f 	bl	8020138 <lwip_htons>
 8024e9a:	4603      	mov	r3, r0
 8024e9c:	461a      	mov	r2, r3
 8024e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ea0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8024ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ea4:	2200      	movs	r2, #0
 8024ea6:	729a      	strb	r2, [r3, #10]
 8024ea8:	2200      	movs	r2, #0
 8024eaa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8024eac:	68bb      	ldr	r3, [r7, #8]
 8024eae:	695b      	ldr	r3, [r3, #20]
 8024eb0:	687a      	ldr	r2, [r7, #4]
 8024eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024eb4:	68b8      	ldr	r0, [r7, #8]
 8024eb6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8024eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024eba:	f7fc fd19 	bl	80218f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8024ebe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8024ec2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024ec4:	1ad3      	subs	r3, r2, r3
 8024ec6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8024eca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8024ece:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8024ed0:	4413      	add	r3, r2
 8024ed2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8024ed6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8024eda:	2b00      	cmp	r3, #0
 8024edc:	f47f af19 	bne.w	8024d12 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8024ee0:	2300      	movs	r3, #0
 8024ee2:	e002      	b.n	8024eea <ip4_frag+0x26a>
      goto memerr;
 8024ee4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8024ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8024eea:	4618      	mov	r0, r3
 8024eec:	3748      	adds	r7, #72	; 0x48
 8024eee:	46bd      	mov	sp, r7
 8024ef0:	bd80      	pop	{r7, pc}
 8024ef2:	bf00      	nop
 8024ef4:	0802bb94 	.word	0x0802bb94
 8024ef8:	0802bd70 	.word	0x0802bd70
 8024efc:	0802bbdc 	.word	0x0802bbdc
 8024f00:	0802bd8c 	.word	0x0802bd8c
 8024f04:	0802bdac 	.word	0x0802bdac
 8024f08:	08024c19 	.word	0x08024c19

08024f0c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8024f0c:	b580      	push	{r7, lr}
 8024f0e:	b086      	sub	sp, #24
 8024f10:	af00      	add	r7, sp, #0
 8024f12:	6078      	str	r0, [r7, #4]
 8024f14:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8024f16:	230e      	movs	r3, #14
 8024f18:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	895b      	ldrh	r3, [r3, #10]
 8024f1e:	2b0e      	cmp	r3, #14
 8024f20:	d96e      	bls.n	8025000 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	7bdb      	ldrb	r3, [r3, #15]
 8024f26:	2b00      	cmp	r3, #0
 8024f28:	d106      	bne.n	8024f38 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8024f2a:	683b      	ldr	r3, [r7, #0]
 8024f2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024f30:	3301      	adds	r3, #1
 8024f32:	b2da      	uxtb	r2, r3
 8024f34:	687b      	ldr	r3, [r7, #4]
 8024f36:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8024f38:	687b      	ldr	r3, [r7, #4]
 8024f3a:	685b      	ldr	r3, [r3, #4]
 8024f3c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8024f3e:	693b      	ldr	r3, [r7, #16]
 8024f40:	7b1a      	ldrb	r2, [r3, #12]
 8024f42:	7b5b      	ldrb	r3, [r3, #13]
 8024f44:	021b      	lsls	r3, r3, #8
 8024f46:	4313      	orrs	r3, r2
 8024f48:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8024f4a:	693b      	ldr	r3, [r7, #16]
 8024f4c:	781b      	ldrb	r3, [r3, #0]
 8024f4e:	f003 0301 	and.w	r3, r3, #1
 8024f52:	2b00      	cmp	r3, #0
 8024f54:	d023      	beq.n	8024f9e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8024f56:	693b      	ldr	r3, [r7, #16]
 8024f58:	781b      	ldrb	r3, [r3, #0]
 8024f5a:	2b01      	cmp	r3, #1
 8024f5c:	d10f      	bne.n	8024f7e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024f5e:	693b      	ldr	r3, [r7, #16]
 8024f60:	785b      	ldrb	r3, [r3, #1]
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	d11b      	bne.n	8024f9e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8024f66:	693b      	ldr	r3, [r7, #16]
 8024f68:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024f6a:	2b5e      	cmp	r3, #94	; 0x5e
 8024f6c:	d117      	bne.n	8024f9e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	7b5b      	ldrb	r3, [r3, #13]
 8024f72:	f043 0310 	orr.w	r3, r3, #16
 8024f76:	b2da      	uxtb	r2, r3
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	735a      	strb	r2, [r3, #13]
 8024f7c:	e00f      	b.n	8024f9e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8024f7e:	693b      	ldr	r3, [r7, #16]
 8024f80:	2206      	movs	r2, #6
 8024f82:	4928      	ldr	r1, [pc, #160]	; (8025024 <ethernet_input+0x118>)
 8024f84:	4618      	mov	r0, r3
 8024f86:	f000 f8cb 	bl	8025120 <memcmp>
 8024f8a:	4603      	mov	r3, r0
 8024f8c:	2b00      	cmp	r3, #0
 8024f8e:	d106      	bne.n	8024f9e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8024f90:	687b      	ldr	r3, [r7, #4]
 8024f92:	7b5b      	ldrb	r3, [r3, #13]
 8024f94:	f043 0308 	orr.w	r3, r3, #8
 8024f98:	b2da      	uxtb	r2, r3
 8024f9a:	687b      	ldr	r3, [r7, #4]
 8024f9c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8024f9e:	89fb      	ldrh	r3, [r7, #14]
 8024fa0:	2b08      	cmp	r3, #8
 8024fa2:	d003      	beq.n	8024fac <ethernet_input+0xa0>
 8024fa4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8024fa8:	d014      	beq.n	8024fd4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8024faa:	e032      	b.n	8025012 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024fac:	683b      	ldr	r3, [r7, #0]
 8024fae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024fb2:	f003 0308 	and.w	r3, r3, #8
 8024fb6:	2b00      	cmp	r3, #0
 8024fb8:	d024      	beq.n	8025004 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024fba:	8afb      	ldrh	r3, [r7, #22]
 8024fbc:	4619      	mov	r1, r3
 8024fbe:	6878      	ldr	r0, [r7, #4]
 8024fc0:	f7fc fc10 	bl	80217e4 <pbuf_remove_header>
 8024fc4:	4603      	mov	r3, r0
 8024fc6:	2b00      	cmp	r3, #0
 8024fc8:	d11e      	bne.n	8025008 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8024fca:	6839      	ldr	r1, [r7, #0]
 8024fcc:	6878      	ldr	r0, [r7, #4]
 8024fce:	f7fe fe8d 	bl	8023cec <ip4_input>
      break;
 8024fd2:	e013      	b.n	8024ffc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024fd4:	683b      	ldr	r3, [r7, #0]
 8024fd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024fda:	f003 0308 	and.w	r3, r3, #8
 8024fde:	2b00      	cmp	r3, #0
 8024fe0:	d014      	beq.n	802500c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024fe2:	8afb      	ldrh	r3, [r7, #22]
 8024fe4:	4619      	mov	r1, r3
 8024fe6:	6878      	ldr	r0, [r7, #4]
 8024fe8:	f7fc fbfc 	bl	80217e4 <pbuf_remove_header>
 8024fec:	4603      	mov	r3, r0
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	d10e      	bne.n	8025010 <ethernet_input+0x104>
        etharp_input(p, netif);
 8024ff2:	6839      	ldr	r1, [r7, #0]
 8024ff4:	6878      	ldr	r0, [r7, #4]
 8024ff6:	f7fe f82d 	bl	8023054 <etharp_input>
      break;
 8024ffa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8024ffc:	2300      	movs	r3, #0
 8024ffe:	e00c      	b.n	802501a <ethernet_input+0x10e>
    goto free_and_return;
 8025000:	bf00      	nop
 8025002:	e006      	b.n	8025012 <ethernet_input+0x106>
        goto free_and_return;
 8025004:	bf00      	nop
 8025006:	e004      	b.n	8025012 <ethernet_input+0x106>
        goto free_and_return;
 8025008:	bf00      	nop
 802500a:	e002      	b.n	8025012 <ethernet_input+0x106>
        goto free_and_return;
 802500c:	bf00      	nop
 802500e:	e000      	b.n	8025012 <ethernet_input+0x106>
        goto free_and_return;
 8025010:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8025012:	6878      	ldr	r0, [r7, #4]
 8025014:	f7fc fc6c 	bl	80218f0 <pbuf_free>
  return ERR_OK;
 8025018:	2300      	movs	r3, #0
}
 802501a:	4618      	mov	r0, r3
 802501c:	3718      	adds	r7, #24
 802501e:	46bd      	mov	sp, r7
 8025020:	bd80      	pop	{r7, pc}
 8025022:	bf00      	nop
 8025024:	0802c30c 	.word	0x0802c30c

08025028 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8025028:	b580      	push	{r7, lr}
 802502a:	b086      	sub	sp, #24
 802502c:	af00      	add	r7, sp, #0
 802502e:	60f8      	str	r0, [r7, #12]
 8025030:	60b9      	str	r1, [r7, #8]
 8025032:	607a      	str	r2, [r7, #4]
 8025034:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8025036:	8c3b      	ldrh	r3, [r7, #32]
 8025038:	4618      	mov	r0, r3
 802503a:	f7fb f87d 	bl	8020138 <lwip_htons>
 802503e:	4603      	mov	r3, r0
 8025040:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8025042:	210e      	movs	r1, #14
 8025044:	68b8      	ldr	r0, [r7, #8]
 8025046:	f7fc fbbd 	bl	80217c4 <pbuf_add_header>
 802504a:	4603      	mov	r3, r0
 802504c:	2b00      	cmp	r3, #0
 802504e:	d125      	bne.n	802509c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8025050:	68bb      	ldr	r3, [r7, #8]
 8025052:	685b      	ldr	r3, [r3, #4]
 8025054:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8025056:	693b      	ldr	r3, [r7, #16]
 8025058:	8afa      	ldrh	r2, [r7, #22]
 802505a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 802505c:	693b      	ldr	r3, [r7, #16]
 802505e:	2206      	movs	r2, #6
 8025060:	6839      	ldr	r1, [r7, #0]
 8025062:	4618      	mov	r0, r3
 8025064:	f000 f86c 	bl	8025140 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8025068:	693b      	ldr	r3, [r7, #16]
 802506a:	3306      	adds	r3, #6
 802506c:	2206      	movs	r2, #6
 802506e:	6879      	ldr	r1, [r7, #4]
 8025070:	4618      	mov	r0, r3
 8025072:	f000 f865 	bl	8025140 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8025076:	68fb      	ldr	r3, [r7, #12]
 8025078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802507c:	2b06      	cmp	r3, #6
 802507e:	d006      	beq.n	802508e <ethernet_output+0x66>
 8025080:	4b0a      	ldr	r3, [pc, #40]	; (80250ac <ethernet_output+0x84>)
 8025082:	f44f 7299 	mov.w	r2, #306	; 0x132
 8025086:	490a      	ldr	r1, [pc, #40]	; (80250b0 <ethernet_output+0x88>)
 8025088:	480a      	ldr	r0, [pc, #40]	; (80250b4 <ethernet_output+0x8c>)
 802508a:	f000 f969 	bl	8025360 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802508e:	68fb      	ldr	r3, [r7, #12]
 8025090:	699b      	ldr	r3, [r3, #24]
 8025092:	68b9      	ldr	r1, [r7, #8]
 8025094:	68f8      	ldr	r0, [r7, #12]
 8025096:	4798      	blx	r3
 8025098:	4603      	mov	r3, r0
 802509a:	e002      	b.n	80250a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 802509c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802509e:	f06f 0301 	mvn.w	r3, #1
}
 80250a2:	4618      	mov	r0, r3
 80250a4:	3718      	adds	r7, #24
 80250a6:	46bd      	mov	sp, r7
 80250a8:	bd80      	pop	{r7, pc}
 80250aa:	bf00      	nop
 80250ac:	0802bdbc 	.word	0x0802bdbc
 80250b0:	0802bdf4 	.word	0x0802bdf4
 80250b4:	0802be28 	.word	0x0802be28

080250b8 <__libc_init_array>:
 80250b8:	b570      	push	{r4, r5, r6, lr}
 80250ba:	4d0d      	ldr	r5, [pc, #52]	; (80250f0 <__libc_init_array+0x38>)
 80250bc:	4c0d      	ldr	r4, [pc, #52]	; (80250f4 <__libc_init_array+0x3c>)
 80250be:	1b64      	subs	r4, r4, r5
 80250c0:	10a4      	asrs	r4, r4, #2
 80250c2:	2600      	movs	r6, #0
 80250c4:	42a6      	cmp	r6, r4
 80250c6:	d109      	bne.n	80250dc <__libc_init_array+0x24>
 80250c8:	4d0b      	ldr	r5, [pc, #44]	; (80250f8 <__libc_init_array+0x40>)
 80250ca:	4c0c      	ldr	r4, [pc, #48]	; (80250fc <__libc_init_array+0x44>)
 80250cc:	f001 fbfe 	bl	80268cc <_init>
 80250d0:	1b64      	subs	r4, r4, r5
 80250d2:	10a4      	asrs	r4, r4, #2
 80250d4:	2600      	movs	r6, #0
 80250d6:	42a6      	cmp	r6, r4
 80250d8:	d105      	bne.n	80250e6 <__libc_init_array+0x2e>
 80250da:	bd70      	pop	{r4, r5, r6, pc}
 80250dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80250e0:	4798      	blx	r3
 80250e2:	3601      	adds	r6, #1
 80250e4:	e7ee      	b.n	80250c4 <__libc_init_array+0xc>
 80250e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80250ea:	4798      	blx	r3
 80250ec:	3601      	adds	r6, #1
 80250ee:	e7f2      	b.n	80250d6 <__libc_init_array+0x1e>
 80250f0:	0802c46c 	.word	0x0802c46c
 80250f4:	0802c46c 	.word	0x0802c46c
 80250f8:	0802c46c 	.word	0x0802c46c
 80250fc:	0802c470 	.word	0x0802c470

08025100 <malloc>:
 8025100:	4b02      	ldr	r3, [pc, #8]	; (802510c <malloc+0xc>)
 8025102:	4601      	mov	r1, r0
 8025104:	6818      	ldr	r0, [r3, #0]
 8025106:	f000 b8b7 	b.w	8025278 <_malloc_r>
 802510a:	bf00      	nop
 802510c:	20000140 	.word	0x20000140

08025110 <free>:
 8025110:	4b02      	ldr	r3, [pc, #8]	; (802511c <free+0xc>)
 8025112:	4601      	mov	r1, r0
 8025114:	6818      	ldr	r0, [r3, #0]
 8025116:	f000 b843 	b.w	80251a0 <_free_r>
 802511a:	bf00      	nop
 802511c:	20000140 	.word	0x20000140

08025120 <memcmp>:
 8025120:	b510      	push	{r4, lr}
 8025122:	3901      	subs	r1, #1
 8025124:	4402      	add	r2, r0
 8025126:	4290      	cmp	r0, r2
 8025128:	d101      	bne.n	802512e <memcmp+0xe>
 802512a:	2000      	movs	r0, #0
 802512c:	e005      	b.n	802513a <memcmp+0x1a>
 802512e:	7803      	ldrb	r3, [r0, #0]
 8025130:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025134:	42a3      	cmp	r3, r4
 8025136:	d001      	beq.n	802513c <memcmp+0x1c>
 8025138:	1b18      	subs	r0, r3, r4
 802513a:	bd10      	pop	{r4, pc}
 802513c:	3001      	adds	r0, #1
 802513e:	e7f2      	b.n	8025126 <memcmp+0x6>

08025140 <memcpy>:
 8025140:	440a      	add	r2, r1
 8025142:	4291      	cmp	r1, r2
 8025144:	f100 33ff 	add.w	r3, r0, #4294967295
 8025148:	d100      	bne.n	802514c <memcpy+0xc>
 802514a:	4770      	bx	lr
 802514c:	b510      	push	{r4, lr}
 802514e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025156:	4291      	cmp	r1, r2
 8025158:	d1f9      	bne.n	802514e <memcpy+0xe>
 802515a:	bd10      	pop	{r4, pc}

0802515c <memmove>:
 802515c:	4288      	cmp	r0, r1
 802515e:	b510      	push	{r4, lr}
 8025160:	eb01 0402 	add.w	r4, r1, r2
 8025164:	d902      	bls.n	802516c <memmove+0x10>
 8025166:	4284      	cmp	r4, r0
 8025168:	4623      	mov	r3, r4
 802516a:	d807      	bhi.n	802517c <memmove+0x20>
 802516c:	1e43      	subs	r3, r0, #1
 802516e:	42a1      	cmp	r1, r4
 8025170:	d008      	beq.n	8025184 <memmove+0x28>
 8025172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025176:	f803 2f01 	strb.w	r2, [r3, #1]!
 802517a:	e7f8      	b.n	802516e <memmove+0x12>
 802517c:	4402      	add	r2, r0
 802517e:	4601      	mov	r1, r0
 8025180:	428a      	cmp	r2, r1
 8025182:	d100      	bne.n	8025186 <memmove+0x2a>
 8025184:	bd10      	pop	{r4, pc}
 8025186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802518a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802518e:	e7f7      	b.n	8025180 <memmove+0x24>

08025190 <memset>:
 8025190:	4402      	add	r2, r0
 8025192:	4603      	mov	r3, r0
 8025194:	4293      	cmp	r3, r2
 8025196:	d100      	bne.n	802519a <memset+0xa>
 8025198:	4770      	bx	lr
 802519a:	f803 1b01 	strb.w	r1, [r3], #1
 802519e:	e7f9      	b.n	8025194 <memset+0x4>

080251a0 <_free_r>:
 80251a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80251a2:	2900      	cmp	r1, #0
 80251a4:	d044      	beq.n	8025230 <_free_r+0x90>
 80251a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80251aa:	9001      	str	r0, [sp, #4]
 80251ac:	2b00      	cmp	r3, #0
 80251ae:	f1a1 0404 	sub.w	r4, r1, #4
 80251b2:	bfb8      	it	lt
 80251b4:	18e4      	addlt	r4, r4, r3
 80251b6:	f000 fdbb 	bl	8025d30 <__malloc_lock>
 80251ba:	4a1e      	ldr	r2, [pc, #120]	; (8025234 <_free_r+0x94>)
 80251bc:	9801      	ldr	r0, [sp, #4]
 80251be:	6813      	ldr	r3, [r2, #0]
 80251c0:	b933      	cbnz	r3, 80251d0 <_free_r+0x30>
 80251c2:	6063      	str	r3, [r4, #4]
 80251c4:	6014      	str	r4, [r2, #0]
 80251c6:	b003      	add	sp, #12
 80251c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80251cc:	f000 bdb6 	b.w	8025d3c <__malloc_unlock>
 80251d0:	42a3      	cmp	r3, r4
 80251d2:	d908      	bls.n	80251e6 <_free_r+0x46>
 80251d4:	6825      	ldr	r5, [r4, #0]
 80251d6:	1961      	adds	r1, r4, r5
 80251d8:	428b      	cmp	r3, r1
 80251da:	bf01      	itttt	eq
 80251dc:	6819      	ldreq	r1, [r3, #0]
 80251de:	685b      	ldreq	r3, [r3, #4]
 80251e0:	1949      	addeq	r1, r1, r5
 80251e2:	6021      	streq	r1, [r4, #0]
 80251e4:	e7ed      	b.n	80251c2 <_free_r+0x22>
 80251e6:	461a      	mov	r2, r3
 80251e8:	685b      	ldr	r3, [r3, #4]
 80251ea:	b10b      	cbz	r3, 80251f0 <_free_r+0x50>
 80251ec:	42a3      	cmp	r3, r4
 80251ee:	d9fa      	bls.n	80251e6 <_free_r+0x46>
 80251f0:	6811      	ldr	r1, [r2, #0]
 80251f2:	1855      	adds	r5, r2, r1
 80251f4:	42a5      	cmp	r5, r4
 80251f6:	d10b      	bne.n	8025210 <_free_r+0x70>
 80251f8:	6824      	ldr	r4, [r4, #0]
 80251fa:	4421      	add	r1, r4
 80251fc:	1854      	adds	r4, r2, r1
 80251fe:	42a3      	cmp	r3, r4
 8025200:	6011      	str	r1, [r2, #0]
 8025202:	d1e0      	bne.n	80251c6 <_free_r+0x26>
 8025204:	681c      	ldr	r4, [r3, #0]
 8025206:	685b      	ldr	r3, [r3, #4]
 8025208:	6053      	str	r3, [r2, #4]
 802520a:	4421      	add	r1, r4
 802520c:	6011      	str	r1, [r2, #0]
 802520e:	e7da      	b.n	80251c6 <_free_r+0x26>
 8025210:	d902      	bls.n	8025218 <_free_r+0x78>
 8025212:	230c      	movs	r3, #12
 8025214:	6003      	str	r3, [r0, #0]
 8025216:	e7d6      	b.n	80251c6 <_free_r+0x26>
 8025218:	6825      	ldr	r5, [r4, #0]
 802521a:	1961      	adds	r1, r4, r5
 802521c:	428b      	cmp	r3, r1
 802521e:	bf04      	itt	eq
 8025220:	6819      	ldreq	r1, [r3, #0]
 8025222:	685b      	ldreq	r3, [r3, #4]
 8025224:	6063      	str	r3, [r4, #4]
 8025226:	bf04      	itt	eq
 8025228:	1949      	addeq	r1, r1, r5
 802522a:	6021      	streq	r1, [r4, #0]
 802522c:	6054      	str	r4, [r2, #4]
 802522e:	e7ca      	b.n	80251c6 <_free_r+0x26>
 8025230:	b003      	add	sp, #12
 8025232:	bd30      	pop	{r4, r5, pc}
 8025234:	20014ffc 	.word	0x20014ffc

08025238 <sbrk_aligned>:
 8025238:	b570      	push	{r4, r5, r6, lr}
 802523a:	4e0e      	ldr	r6, [pc, #56]	; (8025274 <sbrk_aligned+0x3c>)
 802523c:	460c      	mov	r4, r1
 802523e:	6831      	ldr	r1, [r6, #0]
 8025240:	4605      	mov	r5, r0
 8025242:	b911      	cbnz	r1, 802524a <sbrk_aligned+0x12>
 8025244:	f000 f96e 	bl	8025524 <_sbrk_r>
 8025248:	6030      	str	r0, [r6, #0]
 802524a:	4621      	mov	r1, r4
 802524c:	4628      	mov	r0, r5
 802524e:	f000 f969 	bl	8025524 <_sbrk_r>
 8025252:	1c43      	adds	r3, r0, #1
 8025254:	d00a      	beq.n	802526c <sbrk_aligned+0x34>
 8025256:	1cc4      	adds	r4, r0, #3
 8025258:	f024 0403 	bic.w	r4, r4, #3
 802525c:	42a0      	cmp	r0, r4
 802525e:	d007      	beq.n	8025270 <sbrk_aligned+0x38>
 8025260:	1a21      	subs	r1, r4, r0
 8025262:	4628      	mov	r0, r5
 8025264:	f000 f95e 	bl	8025524 <_sbrk_r>
 8025268:	3001      	adds	r0, #1
 802526a:	d101      	bne.n	8025270 <sbrk_aligned+0x38>
 802526c:	f04f 34ff 	mov.w	r4, #4294967295
 8025270:	4620      	mov	r0, r4
 8025272:	bd70      	pop	{r4, r5, r6, pc}
 8025274:	20015000 	.word	0x20015000

08025278 <_malloc_r>:
 8025278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802527c:	1ccd      	adds	r5, r1, #3
 802527e:	f025 0503 	bic.w	r5, r5, #3
 8025282:	3508      	adds	r5, #8
 8025284:	2d0c      	cmp	r5, #12
 8025286:	bf38      	it	cc
 8025288:	250c      	movcc	r5, #12
 802528a:	2d00      	cmp	r5, #0
 802528c:	4607      	mov	r7, r0
 802528e:	db01      	blt.n	8025294 <_malloc_r+0x1c>
 8025290:	42a9      	cmp	r1, r5
 8025292:	d905      	bls.n	80252a0 <_malloc_r+0x28>
 8025294:	230c      	movs	r3, #12
 8025296:	603b      	str	r3, [r7, #0]
 8025298:	2600      	movs	r6, #0
 802529a:	4630      	mov	r0, r6
 802529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80252a0:	4e2e      	ldr	r6, [pc, #184]	; (802535c <_malloc_r+0xe4>)
 80252a2:	f000 fd45 	bl	8025d30 <__malloc_lock>
 80252a6:	6833      	ldr	r3, [r6, #0]
 80252a8:	461c      	mov	r4, r3
 80252aa:	bb34      	cbnz	r4, 80252fa <_malloc_r+0x82>
 80252ac:	4629      	mov	r1, r5
 80252ae:	4638      	mov	r0, r7
 80252b0:	f7ff ffc2 	bl	8025238 <sbrk_aligned>
 80252b4:	1c43      	adds	r3, r0, #1
 80252b6:	4604      	mov	r4, r0
 80252b8:	d14d      	bne.n	8025356 <_malloc_r+0xde>
 80252ba:	6834      	ldr	r4, [r6, #0]
 80252bc:	4626      	mov	r6, r4
 80252be:	2e00      	cmp	r6, #0
 80252c0:	d140      	bne.n	8025344 <_malloc_r+0xcc>
 80252c2:	6823      	ldr	r3, [r4, #0]
 80252c4:	4631      	mov	r1, r6
 80252c6:	4638      	mov	r0, r7
 80252c8:	eb04 0803 	add.w	r8, r4, r3
 80252cc:	f000 f92a 	bl	8025524 <_sbrk_r>
 80252d0:	4580      	cmp	r8, r0
 80252d2:	d13a      	bne.n	802534a <_malloc_r+0xd2>
 80252d4:	6821      	ldr	r1, [r4, #0]
 80252d6:	3503      	adds	r5, #3
 80252d8:	1a6d      	subs	r5, r5, r1
 80252da:	f025 0503 	bic.w	r5, r5, #3
 80252de:	3508      	adds	r5, #8
 80252e0:	2d0c      	cmp	r5, #12
 80252e2:	bf38      	it	cc
 80252e4:	250c      	movcc	r5, #12
 80252e6:	4629      	mov	r1, r5
 80252e8:	4638      	mov	r0, r7
 80252ea:	f7ff ffa5 	bl	8025238 <sbrk_aligned>
 80252ee:	3001      	adds	r0, #1
 80252f0:	d02b      	beq.n	802534a <_malloc_r+0xd2>
 80252f2:	6823      	ldr	r3, [r4, #0]
 80252f4:	442b      	add	r3, r5
 80252f6:	6023      	str	r3, [r4, #0]
 80252f8:	e00e      	b.n	8025318 <_malloc_r+0xa0>
 80252fa:	6822      	ldr	r2, [r4, #0]
 80252fc:	1b52      	subs	r2, r2, r5
 80252fe:	d41e      	bmi.n	802533e <_malloc_r+0xc6>
 8025300:	2a0b      	cmp	r2, #11
 8025302:	d916      	bls.n	8025332 <_malloc_r+0xba>
 8025304:	1961      	adds	r1, r4, r5
 8025306:	42a3      	cmp	r3, r4
 8025308:	6025      	str	r5, [r4, #0]
 802530a:	bf18      	it	ne
 802530c:	6059      	strne	r1, [r3, #4]
 802530e:	6863      	ldr	r3, [r4, #4]
 8025310:	bf08      	it	eq
 8025312:	6031      	streq	r1, [r6, #0]
 8025314:	5162      	str	r2, [r4, r5]
 8025316:	604b      	str	r3, [r1, #4]
 8025318:	4638      	mov	r0, r7
 802531a:	f104 060b 	add.w	r6, r4, #11
 802531e:	f000 fd0d 	bl	8025d3c <__malloc_unlock>
 8025322:	f026 0607 	bic.w	r6, r6, #7
 8025326:	1d23      	adds	r3, r4, #4
 8025328:	1af2      	subs	r2, r6, r3
 802532a:	d0b6      	beq.n	802529a <_malloc_r+0x22>
 802532c:	1b9b      	subs	r3, r3, r6
 802532e:	50a3      	str	r3, [r4, r2]
 8025330:	e7b3      	b.n	802529a <_malloc_r+0x22>
 8025332:	6862      	ldr	r2, [r4, #4]
 8025334:	42a3      	cmp	r3, r4
 8025336:	bf0c      	ite	eq
 8025338:	6032      	streq	r2, [r6, #0]
 802533a:	605a      	strne	r2, [r3, #4]
 802533c:	e7ec      	b.n	8025318 <_malloc_r+0xa0>
 802533e:	4623      	mov	r3, r4
 8025340:	6864      	ldr	r4, [r4, #4]
 8025342:	e7b2      	b.n	80252aa <_malloc_r+0x32>
 8025344:	4634      	mov	r4, r6
 8025346:	6876      	ldr	r6, [r6, #4]
 8025348:	e7b9      	b.n	80252be <_malloc_r+0x46>
 802534a:	230c      	movs	r3, #12
 802534c:	603b      	str	r3, [r7, #0]
 802534e:	4638      	mov	r0, r7
 8025350:	f000 fcf4 	bl	8025d3c <__malloc_unlock>
 8025354:	e7a1      	b.n	802529a <_malloc_r+0x22>
 8025356:	6025      	str	r5, [r4, #0]
 8025358:	e7de      	b.n	8025318 <_malloc_r+0xa0>
 802535a:	bf00      	nop
 802535c:	20014ffc 	.word	0x20014ffc

08025360 <iprintf>:
 8025360:	b40f      	push	{r0, r1, r2, r3}
 8025362:	4b0a      	ldr	r3, [pc, #40]	; (802538c <iprintf+0x2c>)
 8025364:	b513      	push	{r0, r1, r4, lr}
 8025366:	681c      	ldr	r4, [r3, #0]
 8025368:	b124      	cbz	r4, 8025374 <iprintf+0x14>
 802536a:	69a3      	ldr	r3, [r4, #24]
 802536c:	b913      	cbnz	r3, 8025374 <iprintf+0x14>
 802536e:	4620      	mov	r0, r4
 8025370:	f000 fbc6 	bl	8025b00 <__sinit>
 8025374:	ab05      	add	r3, sp, #20
 8025376:	9a04      	ldr	r2, [sp, #16]
 8025378:	68a1      	ldr	r1, [r4, #8]
 802537a:	9301      	str	r3, [sp, #4]
 802537c:	4620      	mov	r0, r4
 802537e:	f000 fe69 	bl	8026054 <_vfiprintf_r>
 8025382:	b002      	add	sp, #8
 8025384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025388:	b004      	add	sp, #16
 802538a:	4770      	bx	lr
 802538c:	20000140 	.word	0x20000140

08025390 <putchar>:
 8025390:	4b09      	ldr	r3, [pc, #36]	; (80253b8 <putchar+0x28>)
 8025392:	b513      	push	{r0, r1, r4, lr}
 8025394:	681c      	ldr	r4, [r3, #0]
 8025396:	4601      	mov	r1, r0
 8025398:	b134      	cbz	r4, 80253a8 <putchar+0x18>
 802539a:	69a3      	ldr	r3, [r4, #24]
 802539c:	b923      	cbnz	r3, 80253a8 <putchar+0x18>
 802539e:	9001      	str	r0, [sp, #4]
 80253a0:	4620      	mov	r0, r4
 80253a2:	f000 fbad 	bl	8025b00 <__sinit>
 80253a6:	9901      	ldr	r1, [sp, #4]
 80253a8:	68a2      	ldr	r2, [r4, #8]
 80253aa:	4620      	mov	r0, r4
 80253ac:	b002      	add	sp, #8
 80253ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253b2:	f001 b913 	b.w	80265dc <_putc_r>
 80253b6:	bf00      	nop
 80253b8:	20000140 	.word	0x20000140

080253bc <_puts_r>:
 80253bc:	b570      	push	{r4, r5, r6, lr}
 80253be:	460e      	mov	r6, r1
 80253c0:	4605      	mov	r5, r0
 80253c2:	b118      	cbz	r0, 80253cc <_puts_r+0x10>
 80253c4:	6983      	ldr	r3, [r0, #24]
 80253c6:	b90b      	cbnz	r3, 80253cc <_puts_r+0x10>
 80253c8:	f000 fb9a 	bl	8025b00 <__sinit>
 80253cc:	69ab      	ldr	r3, [r5, #24]
 80253ce:	68ac      	ldr	r4, [r5, #8]
 80253d0:	b913      	cbnz	r3, 80253d8 <_puts_r+0x1c>
 80253d2:	4628      	mov	r0, r5
 80253d4:	f000 fb94 	bl	8025b00 <__sinit>
 80253d8:	4b2c      	ldr	r3, [pc, #176]	; (802548c <_puts_r+0xd0>)
 80253da:	429c      	cmp	r4, r3
 80253dc:	d120      	bne.n	8025420 <_puts_r+0x64>
 80253de:	686c      	ldr	r4, [r5, #4]
 80253e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80253e2:	07db      	lsls	r3, r3, #31
 80253e4:	d405      	bmi.n	80253f2 <_puts_r+0x36>
 80253e6:	89a3      	ldrh	r3, [r4, #12]
 80253e8:	0598      	lsls	r0, r3, #22
 80253ea:	d402      	bmi.n	80253f2 <_puts_r+0x36>
 80253ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80253ee:	f000 fc37 	bl	8025c60 <__retarget_lock_acquire_recursive>
 80253f2:	89a3      	ldrh	r3, [r4, #12]
 80253f4:	0719      	lsls	r1, r3, #28
 80253f6:	d51d      	bpl.n	8025434 <_puts_r+0x78>
 80253f8:	6923      	ldr	r3, [r4, #16]
 80253fa:	b1db      	cbz	r3, 8025434 <_puts_r+0x78>
 80253fc:	3e01      	subs	r6, #1
 80253fe:	68a3      	ldr	r3, [r4, #8]
 8025400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025404:	3b01      	subs	r3, #1
 8025406:	60a3      	str	r3, [r4, #8]
 8025408:	bb39      	cbnz	r1, 802545a <_puts_r+0x9e>
 802540a:	2b00      	cmp	r3, #0
 802540c:	da38      	bge.n	8025480 <_puts_r+0xc4>
 802540e:	4622      	mov	r2, r4
 8025410:	210a      	movs	r1, #10
 8025412:	4628      	mov	r0, r5
 8025414:	f000 f97c 	bl	8025710 <__swbuf_r>
 8025418:	3001      	adds	r0, #1
 802541a:	d011      	beq.n	8025440 <_puts_r+0x84>
 802541c:	250a      	movs	r5, #10
 802541e:	e011      	b.n	8025444 <_puts_r+0x88>
 8025420:	4b1b      	ldr	r3, [pc, #108]	; (8025490 <_puts_r+0xd4>)
 8025422:	429c      	cmp	r4, r3
 8025424:	d101      	bne.n	802542a <_puts_r+0x6e>
 8025426:	68ac      	ldr	r4, [r5, #8]
 8025428:	e7da      	b.n	80253e0 <_puts_r+0x24>
 802542a:	4b1a      	ldr	r3, [pc, #104]	; (8025494 <_puts_r+0xd8>)
 802542c:	429c      	cmp	r4, r3
 802542e:	bf08      	it	eq
 8025430:	68ec      	ldreq	r4, [r5, #12]
 8025432:	e7d5      	b.n	80253e0 <_puts_r+0x24>
 8025434:	4621      	mov	r1, r4
 8025436:	4628      	mov	r0, r5
 8025438:	f000 f9bc 	bl	80257b4 <__swsetup_r>
 802543c:	2800      	cmp	r0, #0
 802543e:	d0dd      	beq.n	80253fc <_puts_r+0x40>
 8025440:	f04f 35ff 	mov.w	r5, #4294967295
 8025444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025446:	07da      	lsls	r2, r3, #31
 8025448:	d405      	bmi.n	8025456 <_puts_r+0x9a>
 802544a:	89a3      	ldrh	r3, [r4, #12]
 802544c:	059b      	lsls	r3, r3, #22
 802544e:	d402      	bmi.n	8025456 <_puts_r+0x9a>
 8025450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025452:	f000 fc06 	bl	8025c62 <__retarget_lock_release_recursive>
 8025456:	4628      	mov	r0, r5
 8025458:	bd70      	pop	{r4, r5, r6, pc}
 802545a:	2b00      	cmp	r3, #0
 802545c:	da04      	bge.n	8025468 <_puts_r+0xac>
 802545e:	69a2      	ldr	r2, [r4, #24]
 8025460:	429a      	cmp	r2, r3
 8025462:	dc06      	bgt.n	8025472 <_puts_r+0xb6>
 8025464:	290a      	cmp	r1, #10
 8025466:	d004      	beq.n	8025472 <_puts_r+0xb6>
 8025468:	6823      	ldr	r3, [r4, #0]
 802546a:	1c5a      	adds	r2, r3, #1
 802546c:	6022      	str	r2, [r4, #0]
 802546e:	7019      	strb	r1, [r3, #0]
 8025470:	e7c5      	b.n	80253fe <_puts_r+0x42>
 8025472:	4622      	mov	r2, r4
 8025474:	4628      	mov	r0, r5
 8025476:	f000 f94b 	bl	8025710 <__swbuf_r>
 802547a:	3001      	adds	r0, #1
 802547c:	d1bf      	bne.n	80253fe <_puts_r+0x42>
 802547e:	e7df      	b.n	8025440 <_puts_r+0x84>
 8025480:	6823      	ldr	r3, [r4, #0]
 8025482:	250a      	movs	r5, #10
 8025484:	1c5a      	adds	r2, r3, #1
 8025486:	6022      	str	r2, [r4, #0]
 8025488:	701d      	strb	r5, [r3, #0]
 802548a:	e7db      	b.n	8025444 <_puts_r+0x88>
 802548c:	0802c3f0 	.word	0x0802c3f0
 8025490:	0802c410 	.word	0x0802c410
 8025494:	0802c3d0 	.word	0x0802c3d0

08025498 <puts>:
 8025498:	4b02      	ldr	r3, [pc, #8]	; (80254a4 <puts+0xc>)
 802549a:	4601      	mov	r1, r0
 802549c:	6818      	ldr	r0, [r3, #0]
 802549e:	f7ff bf8d 	b.w	80253bc <_puts_r>
 80254a2:	bf00      	nop
 80254a4:	20000140 	.word	0x20000140

080254a8 <rand>:
 80254a8:	4b16      	ldr	r3, [pc, #88]	; (8025504 <rand+0x5c>)
 80254aa:	b510      	push	{r4, lr}
 80254ac:	681c      	ldr	r4, [r3, #0]
 80254ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80254b0:	b9b3      	cbnz	r3, 80254e0 <rand+0x38>
 80254b2:	2018      	movs	r0, #24
 80254b4:	f7ff fe24 	bl	8025100 <malloc>
 80254b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80254ba:	b928      	cbnz	r0, 80254c8 <rand+0x20>
 80254bc:	4602      	mov	r2, r0
 80254be:	4b12      	ldr	r3, [pc, #72]	; (8025508 <rand+0x60>)
 80254c0:	4812      	ldr	r0, [pc, #72]	; (802550c <rand+0x64>)
 80254c2:	214e      	movs	r1, #78	; 0x4e
 80254c4:	f000 f9e4 	bl	8025890 <__assert_func>
 80254c8:	4a11      	ldr	r2, [pc, #68]	; (8025510 <rand+0x68>)
 80254ca:	4b12      	ldr	r3, [pc, #72]	; (8025514 <rand+0x6c>)
 80254cc:	e9c0 2300 	strd	r2, r3, [r0]
 80254d0:	4b11      	ldr	r3, [pc, #68]	; (8025518 <rand+0x70>)
 80254d2:	6083      	str	r3, [r0, #8]
 80254d4:	230b      	movs	r3, #11
 80254d6:	8183      	strh	r3, [r0, #12]
 80254d8:	2201      	movs	r2, #1
 80254da:	2300      	movs	r3, #0
 80254dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80254e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80254e2:	4a0e      	ldr	r2, [pc, #56]	; (802551c <rand+0x74>)
 80254e4:	6920      	ldr	r0, [r4, #16]
 80254e6:	6963      	ldr	r3, [r4, #20]
 80254e8:	490d      	ldr	r1, [pc, #52]	; (8025520 <rand+0x78>)
 80254ea:	4342      	muls	r2, r0
 80254ec:	fb01 2203 	mla	r2, r1, r3, r2
 80254f0:	fba0 0101 	umull	r0, r1, r0, r1
 80254f4:	1c43      	adds	r3, r0, #1
 80254f6:	eb42 0001 	adc.w	r0, r2, r1
 80254fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80254fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025502:	bd10      	pop	{r4, pc}
 8025504:	20000140 	.word	0x20000140
 8025508:	0802c320 	.word	0x0802c320
 802550c:	0802c337 	.word	0x0802c337
 8025510:	abcd330e 	.word	0xabcd330e
 8025514:	e66d1234 	.word	0xe66d1234
 8025518:	0005deec 	.word	0x0005deec
 802551c:	5851f42d 	.word	0x5851f42d
 8025520:	4c957f2d 	.word	0x4c957f2d

08025524 <_sbrk_r>:
 8025524:	b538      	push	{r3, r4, r5, lr}
 8025526:	4d06      	ldr	r5, [pc, #24]	; (8025540 <_sbrk_r+0x1c>)
 8025528:	2300      	movs	r3, #0
 802552a:	4604      	mov	r4, r0
 802552c:	4608      	mov	r0, r1
 802552e:	602b      	str	r3, [r5, #0]
 8025530:	f7f2 f876 	bl	8017620 <_sbrk>
 8025534:	1c43      	adds	r3, r0, #1
 8025536:	d102      	bne.n	802553e <_sbrk_r+0x1a>
 8025538:	682b      	ldr	r3, [r5, #0]
 802553a:	b103      	cbz	r3, 802553e <_sbrk_r+0x1a>
 802553c:	6023      	str	r3, [r4, #0]
 802553e:	bd38      	pop	{r3, r4, r5, pc}
 8025540:	20015004 	.word	0x20015004

08025544 <setvbuf>:
 8025544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025548:	461d      	mov	r5, r3
 802554a:	4b5d      	ldr	r3, [pc, #372]	; (80256c0 <setvbuf+0x17c>)
 802554c:	681f      	ldr	r7, [r3, #0]
 802554e:	4604      	mov	r4, r0
 8025550:	460e      	mov	r6, r1
 8025552:	4690      	mov	r8, r2
 8025554:	b127      	cbz	r7, 8025560 <setvbuf+0x1c>
 8025556:	69bb      	ldr	r3, [r7, #24]
 8025558:	b913      	cbnz	r3, 8025560 <setvbuf+0x1c>
 802555a:	4638      	mov	r0, r7
 802555c:	f000 fad0 	bl	8025b00 <__sinit>
 8025560:	4b58      	ldr	r3, [pc, #352]	; (80256c4 <setvbuf+0x180>)
 8025562:	429c      	cmp	r4, r3
 8025564:	d167      	bne.n	8025636 <setvbuf+0xf2>
 8025566:	687c      	ldr	r4, [r7, #4]
 8025568:	f1b8 0f02 	cmp.w	r8, #2
 802556c:	d006      	beq.n	802557c <setvbuf+0x38>
 802556e:	f1b8 0f01 	cmp.w	r8, #1
 8025572:	f200 809f 	bhi.w	80256b4 <setvbuf+0x170>
 8025576:	2d00      	cmp	r5, #0
 8025578:	f2c0 809c 	blt.w	80256b4 <setvbuf+0x170>
 802557c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802557e:	07db      	lsls	r3, r3, #31
 8025580:	d405      	bmi.n	802558e <setvbuf+0x4a>
 8025582:	89a3      	ldrh	r3, [r4, #12]
 8025584:	0598      	lsls	r0, r3, #22
 8025586:	d402      	bmi.n	802558e <setvbuf+0x4a>
 8025588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802558a:	f000 fb69 	bl	8025c60 <__retarget_lock_acquire_recursive>
 802558e:	4621      	mov	r1, r4
 8025590:	4638      	mov	r0, r7
 8025592:	f000 fa21 	bl	80259d8 <_fflush_r>
 8025596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025598:	b141      	cbz	r1, 80255ac <setvbuf+0x68>
 802559a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802559e:	4299      	cmp	r1, r3
 80255a0:	d002      	beq.n	80255a8 <setvbuf+0x64>
 80255a2:	4638      	mov	r0, r7
 80255a4:	f7ff fdfc 	bl	80251a0 <_free_r>
 80255a8:	2300      	movs	r3, #0
 80255aa:	6363      	str	r3, [r4, #52]	; 0x34
 80255ac:	2300      	movs	r3, #0
 80255ae:	61a3      	str	r3, [r4, #24]
 80255b0:	6063      	str	r3, [r4, #4]
 80255b2:	89a3      	ldrh	r3, [r4, #12]
 80255b4:	0619      	lsls	r1, r3, #24
 80255b6:	d503      	bpl.n	80255c0 <setvbuf+0x7c>
 80255b8:	6921      	ldr	r1, [r4, #16]
 80255ba:	4638      	mov	r0, r7
 80255bc:	f7ff fdf0 	bl	80251a0 <_free_r>
 80255c0:	89a3      	ldrh	r3, [r4, #12]
 80255c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80255c6:	f023 0303 	bic.w	r3, r3, #3
 80255ca:	f1b8 0f02 	cmp.w	r8, #2
 80255ce:	81a3      	strh	r3, [r4, #12]
 80255d0:	d06c      	beq.n	80256ac <setvbuf+0x168>
 80255d2:	ab01      	add	r3, sp, #4
 80255d4:	466a      	mov	r2, sp
 80255d6:	4621      	mov	r1, r4
 80255d8:	4638      	mov	r0, r7
 80255da:	f000 fb43 	bl	8025c64 <__swhatbuf_r>
 80255de:	89a3      	ldrh	r3, [r4, #12]
 80255e0:	4318      	orrs	r0, r3
 80255e2:	81a0      	strh	r0, [r4, #12]
 80255e4:	2d00      	cmp	r5, #0
 80255e6:	d130      	bne.n	802564a <setvbuf+0x106>
 80255e8:	9d00      	ldr	r5, [sp, #0]
 80255ea:	4628      	mov	r0, r5
 80255ec:	f7ff fd88 	bl	8025100 <malloc>
 80255f0:	4606      	mov	r6, r0
 80255f2:	2800      	cmp	r0, #0
 80255f4:	d155      	bne.n	80256a2 <setvbuf+0x15e>
 80255f6:	f8dd 9000 	ldr.w	r9, [sp]
 80255fa:	45a9      	cmp	r9, r5
 80255fc:	d14a      	bne.n	8025694 <setvbuf+0x150>
 80255fe:	f04f 35ff 	mov.w	r5, #4294967295
 8025602:	2200      	movs	r2, #0
 8025604:	60a2      	str	r2, [r4, #8]
 8025606:	f104 0247 	add.w	r2, r4, #71	; 0x47
 802560a:	6022      	str	r2, [r4, #0]
 802560c:	6122      	str	r2, [r4, #16]
 802560e:	2201      	movs	r2, #1
 8025610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025614:	6162      	str	r2, [r4, #20]
 8025616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025618:	f043 0302 	orr.w	r3, r3, #2
 802561c:	07d2      	lsls	r2, r2, #31
 802561e:	81a3      	strh	r3, [r4, #12]
 8025620:	d405      	bmi.n	802562e <setvbuf+0xea>
 8025622:	f413 7f00 	tst.w	r3, #512	; 0x200
 8025626:	d102      	bne.n	802562e <setvbuf+0xea>
 8025628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802562a:	f000 fb1a 	bl	8025c62 <__retarget_lock_release_recursive>
 802562e:	4628      	mov	r0, r5
 8025630:	b003      	add	sp, #12
 8025632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025636:	4b24      	ldr	r3, [pc, #144]	; (80256c8 <setvbuf+0x184>)
 8025638:	429c      	cmp	r4, r3
 802563a:	d101      	bne.n	8025640 <setvbuf+0xfc>
 802563c:	68bc      	ldr	r4, [r7, #8]
 802563e:	e793      	b.n	8025568 <setvbuf+0x24>
 8025640:	4b22      	ldr	r3, [pc, #136]	; (80256cc <setvbuf+0x188>)
 8025642:	429c      	cmp	r4, r3
 8025644:	bf08      	it	eq
 8025646:	68fc      	ldreq	r4, [r7, #12]
 8025648:	e78e      	b.n	8025568 <setvbuf+0x24>
 802564a:	2e00      	cmp	r6, #0
 802564c:	d0cd      	beq.n	80255ea <setvbuf+0xa6>
 802564e:	69bb      	ldr	r3, [r7, #24]
 8025650:	b913      	cbnz	r3, 8025658 <setvbuf+0x114>
 8025652:	4638      	mov	r0, r7
 8025654:	f000 fa54 	bl	8025b00 <__sinit>
 8025658:	f1b8 0f01 	cmp.w	r8, #1
 802565c:	bf08      	it	eq
 802565e:	89a3      	ldrheq	r3, [r4, #12]
 8025660:	6026      	str	r6, [r4, #0]
 8025662:	bf04      	itt	eq
 8025664:	f043 0301 	orreq.w	r3, r3, #1
 8025668:	81a3      	strheq	r3, [r4, #12]
 802566a:	89a2      	ldrh	r2, [r4, #12]
 802566c:	f012 0308 	ands.w	r3, r2, #8
 8025670:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8025674:	d01c      	beq.n	80256b0 <setvbuf+0x16c>
 8025676:	07d3      	lsls	r3, r2, #31
 8025678:	bf41      	itttt	mi
 802567a:	2300      	movmi	r3, #0
 802567c:	426d      	negmi	r5, r5
 802567e:	60a3      	strmi	r3, [r4, #8]
 8025680:	61a5      	strmi	r5, [r4, #24]
 8025682:	bf58      	it	pl
 8025684:	60a5      	strpl	r5, [r4, #8]
 8025686:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8025688:	f015 0501 	ands.w	r5, r5, #1
 802568c:	d115      	bne.n	80256ba <setvbuf+0x176>
 802568e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8025692:	e7c8      	b.n	8025626 <setvbuf+0xe2>
 8025694:	4648      	mov	r0, r9
 8025696:	f7ff fd33 	bl	8025100 <malloc>
 802569a:	4606      	mov	r6, r0
 802569c:	2800      	cmp	r0, #0
 802569e:	d0ae      	beq.n	80255fe <setvbuf+0xba>
 80256a0:	464d      	mov	r5, r9
 80256a2:	89a3      	ldrh	r3, [r4, #12]
 80256a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80256a8:	81a3      	strh	r3, [r4, #12]
 80256aa:	e7d0      	b.n	802564e <setvbuf+0x10a>
 80256ac:	2500      	movs	r5, #0
 80256ae:	e7a8      	b.n	8025602 <setvbuf+0xbe>
 80256b0:	60a3      	str	r3, [r4, #8]
 80256b2:	e7e8      	b.n	8025686 <setvbuf+0x142>
 80256b4:	f04f 35ff 	mov.w	r5, #4294967295
 80256b8:	e7b9      	b.n	802562e <setvbuf+0xea>
 80256ba:	2500      	movs	r5, #0
 80256bc:	e7b7      	b.n	802562e <setvbuf+0xea>
 80256be:	bf00      	nop
 80256c0:	20000140 	.word	0x20000140
 80256c4:	0802c3f0 	.word	0x0802c3f0
 80256c8:	0802c410 	.word	0x0802c410
 80256cc:	0802c3d0 	.word	0x0802c3d0

080256d0 <siprintf>:
 80256d0:	b40e      	push	{r1, r2, r3}
 80256d2:	b500      	push	{lr}
 80256d4:	b09c      	sub	sp, #112	; 0x70
 80256d6:	ab1d      	add	r3, sp, #116	; 0x74
 80256d8:	9002      	str	r0, [sp, #8]
 80256da:	9006      	str	r0, [sp, #24]
 80256dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80256e0:	4809      	ldr	r0, [pc, #36]	; (8025708 <siprintf+0x38>)
 80256e2:	9107      	str	r1, [sp, #28]
 80256e4:	9104      	str	r1, [sp, #16]
 80256e6:	4909      	ldr	r1, [pc, #36]	; (802570c <siprintf+0x3c>)
 80256e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80256ec:	9105      	str	r1, [sp, #20]
 80256ee:	6800      	ldr	r0, [r0, #0]
 80256f0:	9301      	str	r3, [sp, #4]
 80256f2:	a902      	add	r1, sp, #8
 80256f4:	f000 fb84 	bl	8025e00 <_svfiprintf_r>
 80256f8:	9b02      	ldr	r3, [sp, #8]
 80256fa:	2200      	movs	r2, #0
 80256fc:	701a      	strb	r2, [r3, #0]
 80256fe:	b01c      	add	sp, #112	; 0x70
 8025700:	f85d eb04 	ldr.w	lr, [sp], #4
 8025704:	b003      	add	sp, #12
 8025706:	4770      	bx	lr
 8025708:	20000140 	.word	0x20000140
 802570c:	ffff0208 	.word	0xffff0208

08025710 <__swbuf_r>:
 8025710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025712:	460e      	mov	r6, r1
 8025714:	4614      	mov	r4, r2
 8025716:	4605      	mov	r5, r0
 8025718:	b118      	cbz	r0, 8025722 <__swbuf_r+0x12>
 802571a:	6983      	ldr	r3, [r0, #24]
 802571c:	b90b      	cbnz	r3, 8025722 <__swbuf_r+0x12>
 802571e:	f000 f9ef 	bl	8025b00 <__sinit>
 8025722:	4b21      	ldr	r3, [pc, #132]	; (80257a8 <__swbuf_r+0x98>)
 8025724:	429c      	cmp	r4, r3
 8025726:	d12b      	bne.n	8025780 <__swbuf_r+0x70>
 8025728:	686c      	ldr	r4, [r5, #4]
 802572a:	69a3      	ldr	r3, [r4, #24]
 802572c:	60a3      	str	r3, [r4, #8]
 802572e:	89a3      	ldrh	r3, [r4, #12]
 8025730:	071a      	lsls	r2, r3, #28
 8025732:	d52f      	bpl.n	8025794 <__swbuf_r+0x84>
 8025734:	6923      	ldr	r3, [r4, #16]
 8025736:	b36b      	cbz	r3, 8025794 <__swbuf_r+0x84>
 8025738:	6923      	ldr	r3, [r4, #16]
 802573a:	6820      	ldr	r0, [r4, #0]
 802573c:	1ac0      	subs	r0, r0, r3
 802573e:	6963      	ldr	r3, [r4, #20]
 8025740:	b2f6      	uxtb	r6, r6
 8025742:	4283      	cmp	r3, r0
 8025744:	4637      	mov	r7, r6
 8025746:	dc04      	bgt.n	8025752 <__swbuf_r+0x42>
 8025748:	4621      	mov	r1, r4
 802574a:	4628      	mov	r0, r5
 802574c:	f000 f944 	bl	80259d8 <_fflush_r>
 8025750:	bb30      	cbnz	r0, 80257a0 <__swbuf_r+0x90>
 8025752:	68a3      	ldr	r3, [r4, #8]
 8025754:	3b01      	subs	r3, #1
 8025756:	60a3      	str	r3, [r4, #8]
 8025758:	6823      	ldr	r3, [r4, #0]
 802575a:	1c5a      	adds	r2, r3, #1
 802575c:	6022      	str	r2, [r4, #0]
 802575e:	701e      	strb	r6, [r3, #0]
 8025760:	6963      	ldr	r3, [r4, #20]
 8025762:	3001      	adds	r0, #1
 8025764:	4283      	cmp	r3, r0
 8025766:	d004      	beq.n	8025772 <__swbuf_r+0x62>
 8025768:	89a3      	ldrh	r3, [r4, #12]
 802576a:	07db      	lsls	r3, r3, #31
 802576c:	d506      	bpl.n	802577c <__swbuf_r+0x6c>
 802576e:	2e0a      	cmp	r6, #10
 8025770:	d104      	bne.n	802577c <__swbuf_r+0x6c>
 8025772:	4621      	mov	r1, r4
 8025774:	4628      	mov	r0, r5
 8025776:	f000 f92f 	bl	80259d8 <_fflush_r>
 802577a:	b988      	cbnz	r0, 80257a0 <__swbuf_r+0x90>
 802577c:	4638      	mov	r0, r7
 802577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025780:	4b0a      	ldr	r3, [pc, #40]	; (80257ac <__swbuf_r+0x9c>)
 8025782:	429c      	cmp	r4, r3
 8025784:	d101      	bne.n	802578a <__swbuf_r+0x7a>
 8025786:	68ac      	ldr	r4, [r5, #8]
 8025788:	e7cf      	b.n	802572a <__swbuf_r+0x1a>
 802578a:	4b09      	ldr	r3, [pc, #36]	; (80257b0 <__swbuf_r+0xa0>)
 802578c:	429c      	cmp	r4, r3
 802578e:	bf08      	it	eq
 8025790:	68ec      	ldreq	r4, [r5, #12]
 8025792:	e7ca      	b.n	802572a <__swbuf_r+0x1a>
 8025794:	4621      	mov	r1, r4
 8025796:	4628      	mov	r0, r5
 8025798:	f000 f80c 	bl	80257b4 <__swsetup_r>
 802579c:	2800      	cmp	r0, #0
 802579e:	d0cb      	beq.n	8025738 <__swbuf_r+0x28>
 80257a0:	f04f 37ff 	mov.w	r7, #4294967295
 80257a4:	e7ea      	b.n	802577c <__swbuf_r+0x6c>
 80257a6:	bf00      	nop
 80257a8:	0802c3f0 	.word	0x0802c3f0
 80257ac:	0802c410 	.word	0x0802c410
 80257b0:	0802c3d0 	.word	0x0802c3d0

080257b4 <__swsetup_r>:
 80257b4:	4b32      	ldr	r3, [pc, #200]	; (8025880 <__swsetup_r+0xcc>)
 80257b6:	b570      	push	{r4, r5, r6, lr}
 80257b8:	681d      	ldr	r5, [r3, #0]
 80257ba:	4606      	mov	r6, r0
 80257bc:	460c      	mov	r4, r1
 80257be:	b125      	cbz	r5, 80257ca <__swsetup_r+0x16>
 80257c0:	69ab      	ldr	r3, [r5, #24]
 80257c2:	b913      	cbnz	r3, 80257ca <__swsetup_r+0x16>
 80257c4:	4628      	mov	r0, r5
 80257c6:	f000 f99b 	bl	8025b00 <__sinit>
 80257ca:	4b2e      	ldr	r3, [pc, #184]	; (8025884 <__swsetup_r+0xd0>)
 80257cc:	429c      	cmp	r4, r3
 80257ce:	d10f      	bne.n	80257f0 <__swsetup_r+0x3c>
 80257d0:	686c      	ldr	r4, [r5, #4]
 80257d2:	89a3      	ldrh	r3, [r4, #12]
 80257d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80257d8:	0719      	lsls	r1, r3, #28
 80257da:	d42c      	bmi.n	8025836 <__swsetup_r+0x82>
 80257dc:	06dd      	lsls	r5, r3, #27
 80257de:	d411      	bmi.n	8025804 <__swsetup_r+0x50>
 80257e0:	2309      	movs	r3, #9
 80257e2:	6033      	str	r3, [r6, #0]
 80257e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80257e8:	81a3      	strh	r3, [r4, #12]
 80257ea:	f04f 30ff 	mov.w	r0, #4294967295
 80257ee:	e03e      	b.n	802586e <__swsetup_r+0xba>
 80257f0:	4b25      	ldr	r3, [pc, #148]	; (8025888 <__swsetup_r+0xd4>)
 80257f2:	429c      	cmp	r4, r3
 80257f4:	d101      	bne.n	80257fa <__swsetup_r+0x46>
 80257f6:	68ac      	ldr	r4, [r5, #8]
 80257f8:	e7eb      	b.n	80257d2 <__swsetup_r+0x1e>
 80257fa:	4b24      	ldr	r3, [pc, #144]	; (802588c <__swsetup_r+0xd8>)
 80257fc:	429c      	cmp	r4, r3
 80257fe:	bf08      	it	eq
 8025800:	68ec      	ldreq	r4, [r5, #12]
 8025802:	e7e6      	b.n	80257d2 <__swsetup_r+0x1e>
 8025804:	0758      	lsls	r0, r3, #29
 8025806:	d512      	bpl.n	802582e <__swsetup_r+0x7a>
 8025808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802580a:	b141      	cbz	r1, 802581e <__swsetup_r+0x6a>
 802580c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025810:	4299      	cmp	r1, r3
 8025812:	d002      	beq.n	802581a <__swsetup_r+0x66>
 8025814:	4630      	mov	r0, r6
 8025816:	f7ff fcc3 	bl	80251a0 <_free_r>
 802581a:	2300      	movs	r3, #0
 802581c:	6363      	str	r3, [r4, #52]	; 0x34
 802581e:	89a3      	ldrh	r3, [r4, #12]
 8025820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025824:	81a3      	strh	r3, [r4, #12]
 8025826:	2300      	movs	r3, #0
 8025828:	6063      	str	r3, [r4, #4]
 802582a:	6923      	ldr	r3, [r4, #16]
 802582c:	6023      	str	r3, [r4, #0]
 802582e:	89a3      	ldrh	r3, [r4, #12]
 8025830:	f043 0308 	orr.w	r3, r3, #8
 8025834:	81a3      	strh	r3, [r4, #12]
 8025836:	6923      	ldr	r3, [r4, #16]
 8025838:	b94b      	cbnz	r3, 802584e <__swsetup_r+0x9a>
 802583a:	89a3      	ldrh	r3, [r4, #12]
 802583c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025844:	d003      	beq.n	802584e <__swsetup_r+0x9a>
 8025846:	4621      	mov	r1, r4
 8025848:	4630      	mov	r0, r6
 802584a:	f000 fa31 	bl	8025cb0 <__smakebuf_r>
 802584e:	89a0      	ldrh	r0, [r4, #12]
 8025850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025854:	f010 0301 	ands.w	r3, r0, #1
 8025858:	d00a      	beq.n	8025870 <__swsetup_r+0xbc>
 802585a:	2300      	movs	r3, #0
 802585c:	60a3      	str	r3, [r4, #8]
 802585e:	6963      	ldr	r3, [r4, #20]
 8025860:	425b      	negs	r3, r3
 8025862:	61a3      	str	r3, [r4, #24]
 8025864:	6923      	ldr	r3, [r4, #16]
 8025866:	b943      	cbnz	r3, 802587a <__swsetup_r+0xc6>
 8025868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802586c:	d1ba      	bne.n	80257e4 <__swsetup_r+0x30>
 802586e:	bd70      	pop	{r4, r5, r6, pc}
 8025870:	0781      	lsls	r1, r0, #30
 8025872:	bf58      	it	pl
 8025874:	6963      	ldrpl	r3, [r4, #20]
 8025876:	60a3      	str	r3, [r4, #8]
 8025878:	e7f4      	b.n	8025864 <__swsetup_r+0xb0>
 802587a:	2000      	movs	r0, #0
 802587c:	e7f7      	b.n	802586e <__swsetup_r+0xba>
 802587e:	bf00      	nop
 8025880:	20000140 	.word	0x20000140
 8025884:	0802c3f0 	.word	0x0802c3f0
 8025888:	0802c410 	.word	0x0802c410
 802588c:	0802c3d0 	.word	0x0802c3d0

08025890 <__assert_func>:
 8025890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025892:	4614      	mov	r4, r2
 8025894:	461a      	mov	r2, r3
 8025896:	4b09      	ldr	r3, [pc, #36]	; (80258bc <__assert_func+0x2c>)
 8025898:	681b      	ldr	r3, [r3, #0]
 802589a:	4605      	mov	r5, r0
 802589c:	68d8      	ldr	r0, [r3, #12]
 802589e:	b14c      	cbz	r4, 80258b4 <__assert_func+0x24>
 80258a0:	4b07      	ldr	r3, [pc, #28]	; (80258c0 <__assert_func+0x30>)
 80258a2:	9100      	str	r1, [sp, #0]
 80258a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80258a8:	4906      	ldr	r1, [pc, #24]	; (80258c4 <__assert_func+0x34>)
 80258aa:	462b      	mov	r3, r5
 80258ac:	f000 f9a6 	bl	8025bfc <fiprintf>
 80258b0:	f000 ff32 	bl	8026718 <abort>
 80258b4:	4b04      	ldr	r3, [pc, #16]	; (80258c8 <__assert_func+0x38>)
 80258b6:	461c      	mov	r4, r3
 80258b8:	e7f3      	b.n	80258a2 <__assert_func+0x12>
 80258ba:	bf00      	nop
 80258bc:	20000140 	.word	0x20000140
 80258c0:	0802c392 	.word	0x0802c392
 80258c4:	0802c39f 	.word	0x0802c39f
 80258c8:	0802c3cd 	.word	0x0802c3cd

080258cc <__sflush_r>:
 80258cc:	898a      	ldrh	r2, [r1, #12]
 80258ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80258d2:	4605      	mov	r5, r0
 80258d4:	0710      	lsls	r0, r2, #28
 80258d6:	460c      	mov	r4, r1
 80258d8:	d458      	bmi.n	802598c <__sflush_r+0xc0>
 80258da:	684b      	ldr	r3, [r1, #4]
 80258dc:	2b00      	cmp	r3, #0
 80258de:	dc05      	bgt.n	80258ec <__sflush_r+0x20>
 80258e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80258e2:	2b00      	cmp	r3, #0
 80258e4:	dc02      	bgt.n	80258ec <__sflush_r+0x20>
 80258e6:	2000      	movs	r0, #0
 80258e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80258ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80258ee:	2e00      	cmp	r6, #0
 80258f0:	d0f9      	beq.n	80258e6 <__sflush_r+0x1a>
 80258f2:	2300      	movs	r3, #0
 80258f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80258f8:	682f      	ldr	r7, [r5, #0]
 80258fa:	602b      	str	r3, [r5, #0]
 80258fc:	d032      	beq.n	8025964 <__sflush_r+0x98>
 80258fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025900:	89a3      	ldrh	r3, [r4, #12]
 8025902:	075a      	lsls	r2, r3, #29
 8025904:	d505      	bpl.n	8025912 <__sflush_r+0x46>
 8025906:	6863      	ldr	r3, [r4, #4]
 8025908:	1ac0      	subs	r0, r0, r3
 802590a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802590c:	b10b      	cbz	r3, 8025912 <__sflush_r+0x46>
 802590e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025910:	1ac0      	subs	r0, r0, r3
 8025912:	2300      	movs	r3, #0
 8025914:	4602      	mov	r2, r0
 8025916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025918:	6a21      	ldr	r1, [r4, #32]
 802591a:	4628      	mov	r0, r5
 802591c:	47b0      	blx	r6
 802591e:	1c43      	adds	r3, r0, #1
 8025920:	89a3      	ldrh	r3, [r4, #12]
 8025922:	d106      	bne.n	8025932 <__sflush_r+0x66>
 8025924:	6829      	ldr	r1, [r5, #0]
 8025926:	291d      	cmp	r1, #29
 8025928:	d82c      	bhi.n	8025984 <__sflush_r+0xb8>
 802592a:	4a2a      	ldr	r2, [pc, #168]	; (80259d4 <__sflush_r+0x108>)
 802592c:	40ca      	lsrs	r2, r1
 802592e:	07d6      	lsls	r6, r2, #31
 8025930:	d528      	bpl.n	8025984 <__sflush_r+0xb8>
 8025932:	2200      	movs	r2, #0
 8025934:	6062      	str	r2, [r4, #4]
 8025936:	04d9      	lsls	r1, r3, #19
 8025938:	6922      	ldr	r2, [r4, #16]
 802593a:	6022      	str	r2, [r4, #0]
 802593c:	d504      	bpl.n	8025948 <__sflush_r+0x7c>
 802593e:	1c42      	adds	r2, r0, #1
 8025940:	d101      	bne.n	8025946 <__sflush_r+0x7a>
 8025942:	682b      	ldr	r3, [r5, #0]
 8025944:	b903      	cbnz	r3, 8025948 <__sflush_r+0x7c>
 8025946:	6560      	str	r0, [r4, #84]	; 0x54
 8025948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802594a:	602f      	str	r7, [r5, #0]
 802594c:	2900      	cmp	r1, #0
 802594e:	d0ca      	beq.n	80258e6 <__sflush_r+0x1a>
 8025950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025954:	4299      	cmp	r1, r3
 8025956:	d002      	beq.n	802595e <__sflush_r+0x92>
 8025958:	4628      	mov	r0, r5
 802595a:	f7ff fc21 	bl	80251a0 <_free_r>
 802595e:	2000      	movs	r0, #0
 8025960:	6360      	str	r0, [r4, #52]	; 0x34
 8025962:	e7c1      	b.n	80258e8 <__sflush_r+0x1c>
 8025964:	6a21      	ldr	r1, [r4, #32]
 8025966:	2301      	movs	r3, #1
 8025968:	4628      	mov	r0, r5
 802596a:	47b0      	blx	r6
 802596c:	1c41      	adds	r1, r0, #1
 802596e:	d1c7      	bne.n	8025900 <__sflush_r+0x34>
 8025970:	682b      	ldr	r3, [r5, #0]
 8025972:	2b00      	cmp	r3, #0
 8025974:	d0c4      	beq.n	8025900 <__sflush_r+0x34>
 8025976:	2b1d      	cmp	r3, #29
 8025978:	d001      	beq.n	802597e <__sflush_r+0xb2>
 802597a:	2b16      	cmp	r3, #22
 802597c:	d101      	bne.n	8025982 <__sflush_r+0xb6>
 802597e:	602f      	str	r7, [r5, #0]
 8025980:	e7b1      	b.n	80258e6 <__sflush_r+0x1a>
 8025982:	89a3      	ldrh	r3, [r4, #12]
 8025984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025988:	81a3      	strh	r3, [r4, #12]
 802598a:	e7ad      	b.n	80258e8 <__sflush_r+0x1c>
 802598c:	690f      	ldr	r7, [r1, #16]
 802598e:	2f00      	cmp	r7, #0
 8025990:	d0a9      	beq.n	80258e6 <__sflush_r+0x1a>
 8025992:	0793      	lsls	r3, r2, #30
 8025994:	680e      	ldr	r6, [r1, #0]
 8025996:	bf08      	it	eq
 8025998:	694b      	ldreq	r3, [r1, #20]
 802599a:	600f      	str	r7, [r1, #0]
 802599c:	bf18      	it	ne
 802599e:	2300      	movne	r3, #0
 80259a0:	eba6 0807 	sub.w	r8, r6, r7
 80259a4:	608b      	str	r3, [r1, #8]
 80259a6:	f1b8 0f00 	cmp.w	r8, #0
 80259aa:	dd9c      	ble.n	80258e6 <__sflush_r+0x1a>
 80259ac:	6a21      	ldr	r1, [r4, #32]
 80259ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80259b0:	4643      	mov	r3, r8
 80259b2:	463a      	mov	r2, r7
 80259b4:	4628      	mov	r0, r5
 80259b6:	47b0      	blx	r6
 80259b8:	2800      	cmp	r0, #0
 80259ba:	dc06      	bgt.n	80259ca <__sflush_r+0xfe>
 80259bc:	89a3      	ldrh	r3, [r4, #12]
 80259be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80259c2:	81a3      	strh	r3, [r4, #12]
 80259c4:	f04f 30ff 	mov.w	r0, #4294967295
 80259c8:	e78e      	b.n	80258e8 <__sflush_r+0x1c>
 80259ca:	4407      	add	r7, r0
 80259cc:	eba8 0800 	sub.w	r8, r8, r0
 80259d0:	e7e9      	b.n	80259a6 <__sflush_r+0xda>
 80259d2:	bf00      	nop
 80259d4:	20400001 	.word	0x20400001

080259d8 <_fflush_r>:
 80259d8:	b538      	push	{r3, r4, r5, lr}
 80259da:	690b      	ldr	r3, [r1, #16]
 80259dc:	4605      	mov	r5, r0
 80259de:	460c      	mov	r4, r1
 80259e0:	b913      	cbnz	r3, 80259e8 <_fflush_r+0x10>
 80259e2:	2500      	movs	r5, #0
 80259e4:	4628      	mov	r0, r5
 80259e6:	bd38      	pop	{r3, r4, r5, pc}
 80259e8:	b118      	cbz	r0, 80259f2 <_fflush_r+0x1a>
 80259ea:	6983      	ldr	r3, [r0, #24]
 80259ec:	b90b      	cbnz	r3, 80259f2 <_fflush_r+0x1a>
 80259ee:	f000 f887 	bl	8025b00 <__sinit>
 80259f2:	4b14      	ldr	r3, [pc, #80]	; (8025a44 <_fflush_r+0x6c>)
 80259f4:	429c      	cmp	r4, r3
 80259f6:	d11b      	bne.n	8025a30 <_fflush_r+0x58>
 80259f8:	686c      	ldr	r4, [r5, #4]
 80259fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80259fe:	2b00      	cmp	r3, #0
 8025a00:	d0ef      	beq.n	80259e2 <_fflush_r+0xa>
 8025a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025a04:	07d0      	lsls	r0, r2, #31
 8025a06:	d404      	bmi.n	8025a12 <_fflush_r+0x3a>
 8025a08:	0599      	lsls	r1, r3, #22
 8025a0a:	d402      	bmi.n	8025a12 <_fflush_r+0x3a>
 8025a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025a0e:	f000 f927 	bl	8025c60 <__retarget_lock_acquire_recursive>
 8025a12:	4628      	mov	r0, r5
 8025a14:	4621      	mov	r1, r4
 8025a16:	f7ff ff59 	bl	80258cc <__sflush_r>
 8025a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025a1c:	07da      	lsls	r2, r3, #31
 8025a1e:	4605      	mov	r5, r0
 8025a20:	d4e0      	bmi.n	80259e4 <_fflush_r+0xc>
 8025a22:	89a3      	ldrh	r3, [r4, #12]
 8025a24:	059b      	lsls	r3, r3, #22
 8025a26:	d4dd      	bmi.n	80259e4 <_fflush_r+0xc>
 8025a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025a2a:	f000 f91a 	bl	8025c62 <__retarget_lock_release_recursive>
 8025a2e:	e7d9      	b.n	80259e4 <_fflush_r+0xc>
 8025a30:	4b05      	ldr	r3, [pc, #20]	; (8025a48 <_fflush_r+0x70>)
 8025a32:	429c      	cmp	r4, r3
 8025a34:	d101      	bne.n	8025a3a <_fflush_r+0x62>
 8025a36:	68ac      	ldr	r4, [r5, #8]
 8025a38:	e7df      	b.n	80259fa <_fflush_r+0x22>
 8025a3a:	4b04      	ldr	r3, [pc, #16]	; (8025a4c <_fflush_r+0x74>)
 8025a3c:	429c      	cmp	r4, r3
 8025a3e:	bf08      	it	eq
 8025a40:	68ec      	ldreq	r4, [r5, #12]
 8025a42:	e7da      	b.n	80259fa <_fflush_r+0x22>
 8025a44:	0802c3f0 	.word	0x0802c3f0
 8025a48:	0802c410 	.word	0x0802c410
 8025a4c:	0802c3d0 	.word	0x0802c3d0

08025a50 <std>:
 8025a50:	2300      	movs	r3, #0
 8025a52:	b510      	push	{r4, lr}
 8025a54:	4604      	mov	r4, r0
 8025a56:	e9c0 3300 	strd	r3, r3, [r0]
 8025a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025a5e:	6083      	str	r3, [r0, #8]
 8025a60:	8181      	strh	r1, [r0, #12]
 8025a62:	6643      	str	r3, [r0, #100]	; 0x64
 8025a64:	81c2      	strh	r2, [r0, #14]
 8025a66:	6183      	str	r3, [r0, #24]
 8025a68:	4619      	mov	r1, r3
 8025a6a:	2208      	movs	r2, #8
 8025a6c:	305c      	adds	r0, #92	; 0x5c
 8025a6e:	f7ff fb8f 	bl	8025190 <memset>
 8025a72:	4b05      	ldr	r3, [pc, #20]	; (8025a88 <std+0x38>)
 8025a74:	6263      	str	r3, [r4, #36]	; 0x24
 8025a76:	4b05      	ldr	r3, [pc, #20]	; (8025a8c <std+0x3c>)
 8025a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8025a7a:	4b05      	ldr	r3, [pc, #20]	; (8025a90 <std+0x40>)
 8025a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025a7e:	4b05      	ldr	r3, [pc, #20]	; (8025a94 <std+0x44>)
 8025a80:	6224      	str	r4, [r4, #32]
 8025a82:	6323      	str	r3, [r4, #48]	; 0x30
 8025a84:	bd10      	pop	{r4, pc}
 8025a86:	bf00      	nop
 8025a88:	0802666d 	.word	0x0802666d
 8025a8c:	0802668f 	.word	0x0802668f
 8025a90:	080266c7 	.word	0x080266c7
 8025a94:	080266eb 	.word	0x080266eb

08025a98 <_cleanup_r>:
 8025a98:	4901      	ldr	r1, [pc, #4]	; (8025aa0 <_cleanup_r+0x8>)
 8025a9a:	f000 b8c1 	b.w	8025c20 <_fwalk_reent>
 8025a9e:	bf00      	nop
 8025aa0:	080259d9 	.word	0x080259d9

08025aa4 <__sfmoreglue>:
 8025aa4:	b570      	push	{r4, r5, r6, lr}
 8025aa6:	2268      	movs	r2, #104	; 0x68
 8025aa8:	1e4d      	subs	r5, r1, #1
 8025aaa:	4355      	muls	r5, r2
 8025aac:	460e      	mov	r6, r1
 8025aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025ab2:	f7ff fbe1 	bl	8025278 <_malloc_r>
 8025ab6:	4604      	mov	r4, r0
 8025ab8:	b140      	cbz	r0, 8025acc <__sfmoreglue+0x28>
 8025aba:	2100      	movs	r1, #0
 8025abc:	e9c0 1600 	strd	r1, r6, [r0]
 8025ac0:	300c      	adds	r0, #12
 8025ac2:	60a0      	str	r0, [r4, #8]
 8025ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025ac8:	f7ff fb62 	bl	8025190 <memset>
 8025acc:	4620      	mov	r0, r4
 8025ace:	bd70      	pop	{r4, r5, r6, pc}

08025ad0 <__sfp_lock_acquire>:
 8025ad0:	4801      	ldr	r0, [pc, #4]	; (8025ad8 <__sfp_lock_acquire+0x8>)
 8025ad2:	f000 b8c5 	b.w	8025c60 <__retarget_lock_acquire_recursive>
 8025ad6:	bf00      	nop
 8025ad8:	20015009 	.word	0x20015009

08025adc <__sfp_lock_release>:
 8025adc:	4801      	ldr	r0, [pc, #4]	; (8025ae4 <__sfp_lock_release+0x8>)
 8025ade:	f000 b8c0 	b.w	8025c62 <__retarget_lock_release_recursive>
 8025ae2:	bf00      	nop
 8025ae4:	20015009 	.word	0x20015009

08025ae8 <__sinit_lock_acquire>:
 8025ae8:	4801      	ldr	r0, [pc, #4]	; (8025af0 <__sinit_lock_acquire+0x8>)
 8025aea:	f000 b8b9 	b.w	8025c60 <__retarget_lock_acquire_recursive>
 8025aee:	bf00      	nop
 8025af0:	2001500a 	.word	0x2001500a

08025af4 <__sinit_lock_release>:
 8025af4:	4801      	ldr	r0, [pc, #4]	; (8025afc <__sinit_lock_release+0x8>)
 8025af6:	f000 b8b4 	b.w	8025c62 <__retarget_lock_release_recursive>
 8025afa:	bf00      	nop
 8025afc:	2001500a 	.word	0x2001500a

08025b00 <__sinit>:
 8025b00:	b510      	push	{r4, lr}
 8025b02:	4604      	mov	r4, r0
 8025b04:	f7ff fff0 	bl	8025ae8 <__sinit_lock_acquire>
 8025b08:	69a3      	ldr	r3, [r4, #24]
 8025b0a:	b11b      	cbz	r3, 8025b14 <__sinit+0x14>
 8025b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025b10:	f7ff bff0 	b.w	8025af4 <__sinit_lock_release>
 8025b14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025b18:	6523      	str	r3, [r4, #80]	; 0x50
 8025b1a:	4b13      	ldr	r3, [pc, #76]	; (8025b68 <__sinit+0x68>)
 8025b1c:	4a13      	ldr	r2, [pc, #76]	; (8025b6c <__sinit+0x6c>)
 8025b1e:	681b      	ldr	r3, [r3, #0]
 8025b20:	62a2      	str	r2, [r4, #40]	; 0x28
 8025b22:	42a3      	cmp	r3, r4
 8025b24:	bf04      	itt	eq
 8025b26:	2301      	moveq	r3, #1
 8025b28:	61a3      	streq	r3, [r4, #24]
 8025b2a:	4620      	mov	r0, r4
 8025b2c:	f000 f820 	bl	8025b70 <__sfp>
 8025b30:	6060      	str	r0, [r4, #4]
 8025b32:	4620      	mov	r0, r4
 8025b34:	f000 f81c 	bl	8025b70 <__sfp>
 8025b38:	60a0      	str	r0, [r4, #8]
 8025b3a:	4620      	mov	r0, r4
 8025b3c:	f000 f818 	bl	8025b70 <__sfp>
 8025b40:	2200      	movs	r2, #0
 8025b42:	60e0      	str	r0, [r4, #12]
 8025b44:	2104      	movs	r1, #4
 8025b46:	6860      	ldr	r0, [r4, #4]
 8025b48:	f7ff ff82 	bl	8025a50 <std>
 8025b4c:	68a0      	ldr	r0, [r4, #8]
 8025b4e:	2201      	movs	r2, #1
 8025b50:	2109      	movs	r1, #9
 8025b52:	f7ff ff7d 	bl	8025a50 <std>
 8025b56:	68e0      	ldr	r0, [r4, #12]
 8025b58:	2202      	movs	r2, #2
 8025b5a:	2112      	movs	r1, #18
 8025b5c:	f7ff ff78 	bl	8025a50 <std>
 8025b60:	2301      	movs	r3, #1
 8025b62:	61a3      	str	r3, [r4, #24]
 8025b64:	e7d2      	b.n	8025b0c <__sinit+0xc>
 8025b66:	bf00      	nop
 8025b68:	0802c31c 	.word	0x0802c31c
 8025b6c:	08025a99 	.word	0x08025a99

08025b70 <__sfp>:
 8025b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b72:	4607      	mov	r7, r0
 8025b74:	f7ff ffac 	bl	8025ad0 <__sfp_lock_acquire>
 8025b78:	4b1e      	ldr	r3, [pc, #120]	; (8025bf4 <__sfp+0x84>)
 8025b7a:	681e      	ldr	r6, [r3, #0]
 8025b7c:	69b3      	ldr	r3, [r6, #24]
 8025b7e:	b913      	cbnz	r3, 8025b86 <__sfp+0x16>
 8025b80:	4630      	mov	r0, r6
 8025b82:	f7ff ffbd 	bl	8025b00 <__sinit>
 8025b86:	3648      	adds	r6, #72	; 0x48
 8025b88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025b8c:	3b01      	subs	r3, #1
 8025b8e:	d503      	bpl.n	8025b98 <__sfp+0x28>
 8025b90:	6833      	ldr	r3, [r6, #0]
 8025b92:	b30b      	cbz	r3, 8025bd8 <__sfp+0x68>
 8025b94:	6836      	ldr	r6, [r6, #0]
 8025b96:	e7f7      	b.n	8025b88 <__sfp+0x18>
 8025b98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025b9c:	b9d5      	cbnz	r5, 8025bd4 <__sfp+0x64>
 8025b9e:	4b16      	ldr	r3, [pc, #88]	; (8025bf8 <__sfp+0x88>)
 8025ba0:	60e3      	str	r3, [r4, #12]
 8025ba2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025ba6:	6665      	str	r5, [r4, #100]	; 0x64
 8025ba8:	f000 f859 	bl	8025c5e <__retarget_lock_init_recursive>
 8025bac:	f7ff ff96 	bl	8025adc <__sfp_lock_release>
 8025bb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025bb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025bb8:	6025      	str	r5, [r4, #0]
 8025bba:	61a5      	str	r5, [r4, #24]
 8025bbc:	2208      	movs	r2, #8
 8025bbe:	4629      	mov	r1, r5
 8025bc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025bc4:	f7ff fae4 	bl	8025190 <memset>
 8025bc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025bcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025bd0:	4620      	mov	r0, r4
 8025bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025bd4:	3468      	adds	r4, #104	; 0x68
 8025bd6:	e7d9      	b.n	8025b8c <__sfp+0x1c>
 8025bd8:	2104      	movs	r1, #4
 8025bda:	4638      	mov	r0, r7
 8025bdc:	f7ff ff62 	bl	8025aa4 <__sfmoreglue>
 8025be0:	4604      	mov	r4, r0
 8025be2:	6030      	str	r0, [r6, #0]
 8025be4:	2800      	cmp	r0, #0
 8025be6:	d1d5      	bne.n	8025b94 <__sfp+0x24>
 8025be8:	f7ff ff78 	bl	8025adc <__sfp_lock_release>
 8025bec:	230c      	movs	r3, #12
 8025bee:	603b      	str	r3, [r7, #0]
 8025bf0:	e7ee      	b.n	8025bd0 <__sfp+0x60>
 8025bf2:	bf00      	nop
 8025bf4:	0802c31c 	.word	0x0802c31c
 8025bf8:	ffff0001 	.word	0xffff0001

08025bfc <fiprintf>:
 8025bfc:	b40e      	push	{r1, r2, r3}
 8025bfe:	b503      	push	{r0, r1, lr}
 8025c00:	4601      	mov	r1, r0
 8025c02:	ab03      	add	r3, sp, #12
 8025c04:	4805      	ldr	r0, [pc, #20]	; (8025c1c <fiprintf+0x20>)
 8025c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8025c0a:	6800      	ldr	r0, [r0, #0]
 8025c0c:	9301      	str	r3, [sp, #4]
 8025c0e:	f000 fa21 	bl	8026054 <_vfiprintf_r>
 8025c12:	b002      	add	sp, #8
 8025c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8025c18:	b003      	add	sp, #12
 8025c1a:	4770      	bx	lr
 8025c1c:	20000140 	.word	0x20000140

08025c20 <_fwalk_reent>:
 8025c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c24:	4606      	mov	r6, r0
 8025c26:	4688      	mov	r8, r1
 8025c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025c2c:	2700      	movs	r7, #0
 8025c2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025c32:	f1b9 0901 	subs.w	r9, r9, #1
 8025c36:	d505      	bpl.n	8025c44 <_fwalk_reent+0x24>
 8025c38:	6824      	ldr	r4, [r4, #0]
 8025c3a:	2c00      	cmp	r4, #0
 8025c3c:	d1f7      	bne.n	8025c2e <_fwalk_reent+0xe>
 8025c3e:	4638      	mov	r0, r7
 8025c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c44:	89ab      	ldrh	r3, [r5, #12]
 8025c46:	2b01      	cmp	r3, #1
 8025c48:	d907      	bls.n	8025c5a <_fwalk_reent+0x3a>
 8025c4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025c4e:	3301      	adds	r3, #1
 8025c50:	d003      	beq.n	8025c5a <_fwalk_reent+0x3a>
 8025c52:	4629      	mov	r1, r5
 8025c54:	4630      	mov	r0, r6
 8025c56:	47c0      	blx	r8
 8025c58:	4307      	orrs	r7, r0
 8025c5a:	3568      	adds	r5, #104	; 0x68
 8025c5c:	e7e9      	b.n	8025c32 <_fwalk_reent+0x12>

08025c5e <__retarget_lock_init_recursive>:
 8025c5e:	4770      	bx	lr

08025c60 <__retarget_lock_acquire_recursive>:
 8025c60:	4770      	bx	lr

08025c62 <__retarget_lock_release_recursive>:
 8025c62:	4770      	bx	lr

08025c64 <__swhatbuf_r>:
 8025c64:	b570      	push	{r4, r5, r6, lr}
 8025c66:	460e      	mov	r6, r1
 8025c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c6c:	2900      	cmp	r1, #0
 8025c6e:	b096      	sub	sp, #88	; 0x58
 8025c70:	4614      	mov	r4, r2
 8025c72:	461d      	mov	r5, r3
 8025c74:	da08      	bge.n	8025c88 <__swhatbuf_r+0x24>
 8025c76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025c7a:	2200      	movs	r2, #0
 8025c7c:	602a      	str	r2, [r5, #0]
 8025c7e:	061a      	lsls	r2, r3, #24
 8025c80:	d410      	bmi.n	8025ca4 <__swhatbuf_r+0x40>
 8025c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025c86:	e00e      	b.n	8025ca6 <__swhatbuf_r+0x42>
 8025c88:	466a      	mov	r2, sp
 8025c8a:	f000 fd5d 	bl	8026748 <_fstat_r>
 8025c8e:	2800      	cmp	r0, #0
 8025c90:	dbf1      	blt.n	8025c76 <__swhatbuf_r+0x12>
 8025c92:	9a01      	ldr	r2, [sp, #4]
 8025c94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025c98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025c9c:	425a      	negs	r2, r3
 8025c9e:	415a      	adcs	r2, r3
 8025ca0:	602a      	str	r2, [r5, #0]
 8025ca2:	e7ee      	b.n	8025c82 <__swhatbuf_r+0x1e>
 8025ca4:	2340      	movs	r3, #64	; 0x40
 8025ca6:	2000      	movs	r0, #0
 8025ca8:	6023      	str	r3, [r4, #0]
 8025caa:	b016      	add	sp, #88	; 0x58
 8025cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08025cb0 <__smakebuf_r>:
 8025cb0:	898b      	ldrh	r3, [r1, #12]
 8025cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025cb4:	079d      	lsls	r5, r3, #30
 8025cb6:	4606      	mov	r6, r0
 8025cb8:	460c      	mov	r4, r1
 8025cba:	d507      	bpl.n	8025ccc <__smakebuf_r+0x1c>
 8025cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025cc0:	6023      	str	r3, [r4, #0]
 8025cc2:	6123      	str	r3, [r4, #16]
 8025cc4:	2301      	movs	r3, #1
 8025cc6:	6163      	str	r3, [r4, #20]
 8025cc8:	b002      	add	sp, #8
 8025cca:	bd70      	pop	{r4, r5, r6, pc}
 8025ccc:	ab01      	add	r3, sp, #4
 8025cce:	466a      	mov	r2, sp
 8025cd0:	f7ff ffc8 	bl	8025c64 <__swhatbuf_r>
 8025cd4:	9900      	ldr	r1, [sp, #0]
 8025cd6:	4605      	mov	r5, r0
 8025cd8:	4630      	mov	r0, r6
 8025cda:	f7ff facd 	bl	8025278 <_malloc_r>
 8025cde:	b948      	cbnz	r0, 8025cf4 <__smakebuf_r+0x44>
 8025ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ce4:	059a      	lsls	r2, r3, #22
 8025ce6:	d4ef      	bmi.n	8025cc8 <__smakebuf_r+0x18>
 8025ce8:	f023 0303 	bic.w	r3, r3, #3
 8025cec:	f043 0302 	orr.w	r3, r3, #2
 8025cf0:	81a3      	strh	r3, [r4, #12]
 8025cf2:	e7e3      	b.n	8025cbc <__smakebuf_r+0xc>
 8025cf4:	4b0d      	ldr	r3, [pc, #52]	; (8025d2c <__smakebuf_r+0x7c>)
 8025cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8025cf8:	89a3      	ldrh	r3, [r4, #12]
 8025cfa:	6020      	str	r0, [r4, #0]
 8025cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025d00:	81a3      	strh	r3, [r4, #12]
 8025d02:	9b00      	ldr	r3, [sp, #0]
 8025d04:	6163      	str	r3, [r4, #20]
 8025d06:	9b01      	ldr	r3, [sp, #4]
 8025d08:	6120      	str	r0, [r4, #16]
 8025d0a:	b15b      	cbz	r3, 8025d24 <__smakebuf_r+0x74>
 8025d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025d10:	4630      	mov	r0, r6
 8025d12:	f000 fd2b 	bl	802676c <_isatty_r>
 8025d16:	b128      	cbz	r0, 8025d24 <__smakebuf_r+0x74>
 8025d18:	89a3      	ldrh	r3, [r4, #12]
 8025d1a:	f023 0303 	bic.w	r3, r3, #3
 8025d1e:	f043 0301 	orr.w	r3, r3, #1
 8025d22:	81a3      	strh	r3, [r4, #12]
 8025d24:	89a0      	ldrh	r0, [r4, #12]
 8025d26:	4305      	orrs	r5, r0
 8025d28:	81a5      	strh	r5, [r4, #12]
 8025d2a:	e7cd      	b.n	8025cc8 <__smakebuf_r+0x18>
 8025d2c:	08025a99 	.word	0x08025a99

08025d30 <__malloc_lock>:
 8025d30:	4801      	ldr	r0, [pc, #4]	; (8025d38 <__malloc_lock+0x8>)
 8025d32:	f7ff bf95 	b.w	8025c60 <__retarget_lock_acquire_recursive>
 8025d36:	bf00      	nop
 8025d38:	20015008 	.word	0x20015008

08025d3c <__malloc_unlock>:
 8025d3c:	4801      	ldr	r0, [pc, #4]	; (8025d44 <__malloc_unlock+0x8>)
 8025d3e:	f7ff bf90 	b.w	8025c62 <__retarget_lock_release_recursive>
 8025d42:	bf00      	nop
 8025d44:	20015008 	.word	0x20015008

08025d48 <__ssputs_r>:
 8025d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d4c:	688e      	ldr	r6, [r1, #8]
 8025d4e:	429e      	cmp	r6, r3
 8025d50:	4682      	mov	sl, r0
 8025d52:	460c      	mov	r4, r1
 8025d54:	4690      	mov	r8, r2
 8025d56:	461f      	mov	r7, r3
 8025d58:	d838      	bhi.n	8025dcc <__ssputs_r+0x84>
 8025d5a:	898a      	ldrh	r2, [r1, #12]
 8025d5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025d60:	d032      	beq.n	8025dc8 <__ssputs_r+0x80>
 8025d62:	6825      	ldr	r5, [r4, #0]
 8025d64:	6909      	ldr	r1, [r1, #16]
 8025d66:	eba5 0901 	sub.w	r9, r5, r1
 8025d6a:	6965      	ldr	r5, [r4, #20]
 8025d6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025d70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025d74:	3301      	adds	r3, #1
 8025d76:	444b      	add	r3, r9
 8025d78:	106d      	asrs	r5, r5, #1
 8025d7a:	429d      	cmp	r5, r3
 8025d7c:	bf38      	it	cc
 8025d7e:	461d      	movcc	r5, r3
 8025d80:	0553      	lsls	r3, r2, #21
 8025d82:	d531      	bpl.n	8025de8 <__ssputs_r+0xa0>
 8025d84:	4629      	mov	r1, r5
 8025d86:	f7ff fa77 	bl	8025278 <_malloc_r>
 8025d8a:	4606      	mov	r6, r0
 8025d8c:	b950      	cbnz	r0, 8025da4 <__ssputs_r+0x5c>
 8025d8e:	230c      	movs	r3, #12
 8025d90:	f8ca 3000 	str.w	r3, [sl]
 8025d94:	89a3      	ldrh	r3, [r4, #12]
 8025d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d9a:	81a3      	strh	r3, [r4, #12]
 8025d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8025da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025da4:	6921      	ldr	r1, [r4, #16]
 8025da6:	464a      	mov	r2, r9
 8025da8:	f7ff f9ca 	bl	8025140 <memcpy>
 8025dac:	89a3      	ldrh	r3, [r4, #12]
 8025dae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8025db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025db6:	81a3      	strh	r3, [r4, #12]
 8025db8:	6126      	str	r6, [r4, #16]
 8025dba:	6165      	str	r5, [r4, #20]
 8025dbc:	444e      	add	r6, r9
 8025dbe:	eba5 0509 	sub.w	r5, r5, r9
 8025dc2:	6026      	str	r6, [r4, #0]
 8025dc4:	60a5      	str	r5, [r4, #8]
 8025dc6:	463e      	mov	r6, r7
 8025dc8:	42be      	cmp	r6, r7
 8025dca:	d900      	bls.n	8025dce <__ssputs_r+0x86>
 8025dcc:	463e      	mov	r6, r7
 8025dce:	6820      	ldr	r0, [r4, #0]
 8025dd0:	4632      	mov	r2, r6
 8025dd2:	4641      	mov	r1, r8
 8025dd4:	f7ff f9c2 	bl	802515c <memmove>
 8025dd8:	68a3      	ldr	r3, [r4, #8]
 8025dda:	1b9b      	subs	r3, r3, r6
 8025ddc:	60a3      	str	r3, [r4, #8]
 8025dde:	6823      	ldr	r3, [r4, #0]
 8025de0:	4433      	add	r3, r6
 8025de2:	6023      	str	r3, [r4, #0]
 8025de4:	2000      	movs	r0, #0
 8025de6:	e7db      	b.n	8025da0 <__ssputs_r+0x58>
 8025de8:	462a      	mov	r2, r5
 8025dea:	f000 fce1 	bl	80267b0 <_realloc_r>
 8025dee:	4606      	mov	r6, r0
 8025df0:	2800      	cmp	r0, #0
 8025df2:	d1e1      	bne.n	8025db8 <__ssputs_r+0x70>
 8025df4:	6921      	ldr	r1, [r4, #16]
 8025df6:	4650      	mov	r0, sl
 8025df8:	f7ff f9d2 	bl	80251a0 <_free_r>
 8025dfc:	e7c7      	b.n	8025d8e <__ssputs_r+0x46>
	...

08025e00 <_svfiprintf_r>:
 8025e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e04:	4698      	mov	r8, r3
 8025e06:	898b      	ldrh	r3, [r1, #12]
 8025e08:	061b      	lsls	r3, r3, #24
 8025e0a:	b09d      	sub	sp, #116	; 0x74
 8025e0c:	4607      	mov	r7, r0
 8025e0e:	460d      	mov	r5, r1
 8025e10:	4614      	mov	r4, r2
 8025e12:	d50e      	bpl.n	8025e32 <_svfiprintf_r+0x32>
 8025e14:	690b      	ldr	r3, [r1, #16]
 8025e16:	b963      	cbnz	r3, 8025e32 <_svfiprintf_r+0x32>
 8025e18:	2140      	movs	r1, #64	; 0x40
 8025e1a:	f7ff fa2d 	bl	8025278 <_malloc_r>
 8025e1e:	6028      	str	r0, [r5, #0]
 8025e20:	6128      	str	r0, [r5, #16]
 8025e22:	b920      	cbnz	r0, 8025e2e <_svfiprintf_r+0x2e>
 8025e24:	230c      	movs	r3, #12
 8025e26:	603b      	str	r3, [r7, #0]
 8025e28:	f04f 30ff 	mov.w	r0, #4294967295
 8025e2c:	e0d1      	b.n	8025fd2 <_svfiprintf_r+0x1d2>
 8025e2e:	2340      	movs	r3, #64	; 0x40
 8025e30:	616b      	str	r3, [r5, #20]
 8025e32:	2300      	movs	r3, #0
 8025e34:	9309      	str	r3, [sp, #36]	; 0x24
 8025e36:	2320      	movs	r3, #32
 8025e38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025e3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8025e40:	2330      	movs	r3, #48	; 0x30
 8025e42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8025fec <_svfiprintf_r+0x1ec>
 8025e46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025e4a:	f04f 0901 	mov.w	r9, #1
 8025e4e:	4623      	mov	r3, r4
 8025e50:	469a      	mov	sl, r3
 8025e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025e56:	b10a      	cbz	r2, 8025e5c <_svfiprintf_r+0x5c>
 8025e58:	2a25      	cmp	r2, #37	; 0x25
 8025e5a:	d1f9      	bne.n	8025e50 <_svfiprintf_r+0x50>
 8025e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8025e60:	d00b      	beq.n	8025e7a <_svfiprintf_r+0x7a>
 8025e62:	465b      	mov	r3, fp
 8025e64:	4622      	mov	r2, r4
 8025e66:	4629      	mov	r1, r5
 8025e68:	4638      	mov	r0, r7
 8025e6a:	f7ff ff6d 	bl	8025d48 <__ssputs_r>
 8025e6e:	3001      	adds	r0, #1
 8025e70:	f000 80aa 	beq.w	8025fc8 <_svfiprintf_r+0x1c8>
 8025e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025e76:	445a      	add	r2, fp
 8025e78:	9209      	str	r2, [sp, #36]	; 0x24
 8025e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8025e7e:	2b00      	cmp	r3, #0
 8025e80:	f000 80a2 	beq.w	8025fc8 <_svfiprintf_r+0x1c8>
 8025e84:	2300      	movs	r3, #0
 8025e86:	f04f 32ff 	mov.w	r2, #4294967295
 8025e8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025e8e:	f10a 0a01 	add.w	sl, sl, #1
 8025e92:	9304      	str	r3, [sp, #16]
 8025e94:	9307      	str	r3, [sp, #28]
 8025e96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025e9a:	931a      	str	r3, [sp, #104]	; 0x68
 8025e9c:	4654      	mov	r4, sl
 8025e9e:	2205      	movs	r2, #5
 8025ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ea4:	4851      	ldr	r0, [pc, #324]	; (8025fec <_svfiprintf_r+0x1ec>)
 8025ea6:	f7da f9e3 	bl	8000270 <memchr>
 8025eaa:	9a04      	ldr	r2, [sp, #16]
 8025eac:	b9d8      	cbnz	r0, 8025ee6 <_svfiprintf_r+0xe6>
 8025eae:	06d0      	lsls	r0, r2, #27
 8025eb0:	bf44      	itt	mi
 8025eb2:	2320      	movmi	r3, #32
 8025eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025eb8:	0711      	lsls	r1, r2, #28
 8025eba:	bf44      	itt	mi
 8025ebc:	232b      	movmi	r3, #43	; 0x2b
 8025ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8025ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8025ec8:	d015      	beq.n	8025ef6 <_svfiprintf_r+0xf6>
 8025eca:	9a07      	ldr	r2, [sp, #28]
 8025ecc:	4654      	mov	r4, sl
 8025ece:	2000      	movs	r0, #0
 8025ed0:	f04f 0c0a 	mov.w	ip, #10
 8025ed4:	4621      	mov	r1, r4
 8025ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025eda:	3b30      	subs	r3, #48	; 0x30
 8025edc:	2b09      	cmp	r3, #9
 8025ede:	d94e      	bls.n	8025f7e <_svfiprintf_r+0x17e>
 8025ee0:	b1b0      	cbz	r0, 8025f10 <_svfiprintf_r+0x110>
 8025ee2:	9207      	str	r2, [sp, #28]
 8025ee4:	e014      	b.n	8025f10 <_svfiprintf_r+0x110>
 8025ee6:	eba0 0308 	sub.w	r3, r0, r8
 8025eea:	fa09 f303 	lsl.w	r3, r9, r3
 8025eee:	4313      	orrs	r3, r2
 8025ef0:	9304      	str	r3, [sp, #16]
 8025ef2:	46a2      	mov	sl, r4
 8025ef4:	e7d2      	b.n	8025e9c <_svfiprintf_r+0x9c>
 8025ef6:	9b03      	ldr	r3, [sp, #12]
 8025ef8:	1d19      	adds	r1, r3, #4
 8025efa:	681b      	ldr	r3, [r3, #0]
 8025efc:	9103      	str	r1, [sp, #12]
 8025efe:	2b00      	cmp	r3, #0
 8025f00:	bfbb      	ittet	lt
 8025f02:	425b      	neglt	r3, r3
 8025f04:	f042 0202 	orrlt.w	r2, r2, #2
 8025f08:	9307      	strge	r3, [sp, #28]
 8025f0a:	9307      	strlt	r3, [sp, #28]
 8025f0c:	bfb8      	it	lt
 8025f0e:	9204      	strlt	r2, [sp, #16]
 8025f10:	7823      	ldrb	r3, [r4, #0]
 8025f12:	2b2e      	cmp	r3, #46	; 0x2e
 8025f14:	d10c      	bne.n	8025f30 <_svfiprintf_r+0x130>
 8025f16:	7863      	ldrb	r3, [r4, #1]
 8025f18:	2b2a      	cmp	r3, #42	; 0x2a
 8025f1a:	d135      	bne.n	8025f88 <_svfiprintf_r+0x188>
 8025f1c:	9b03      	ldr	r3, [sp, #12]
 8025f1e:	1d1a      	adds	r2, r3, #4
 8025f20:	681b      	ldr	r3, [r3, #0]
 8025f22:	9203      	str	r2, [sp, #12]
 8025f24:	2b00      	cmp	r3, #0
 8025f26:	bfb8      	it	lt
 8025f28:	f04f 33ff 	movlt.w	r3, #4294967295
 8025f2c:	3402      	adds	r4, #2
 8025f2e:	9305      	str	r3, [sp, #20]
 8025f30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8025ffc <_svfiprintf_r+0x1fc>
 8025f34:	7821      	ldrb	r1, [r4, #0]
 8025f36:	2203      	movs	r2, #3
 8025f38:	4650      	mov	r0, sl
 8025f3a:	f7da f999 	bl	8000270 <memchr>
 8025f3e:	b140      	cbz	r0, 8025f52 <_svfiprintf_r+0x152>
 8025f40:	2340      	movs	r3, #64	; 0x40
 8025f42:	eba0 000a 	sub.w	r0, r0, sl
 8025f46:	fa03 f000 	lsl.w	r0, r3, r0
 8025f4a:	9b04      	ldr	r3, [sp, #16]
 8025f4c:	4303      	orrs	r3, r0
 8025f4e:	3401      	adds	r4, #1
 8025f50:	9304      	str	r3, [sp, #16]
 8025f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f56:	4826      	ldr	r0, [pc, #152]	; (8025ff0 <_svfiprintf_r+0x1f0>)
 8025f58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025f5c:	2206      	movs	r2, #6
 8025f5e:	f7da f987 	bl	8000270 <memchr>
 8025f62:	2800      	cmp	r0, #0
 8025f64:	d038      	beq.n	8025fd8 <_svfiprintf_r+0x1d8>
 8025f66:	4b23      	ldr	r3, [pc, #140]	; (8025ff4 <_svfiprintf_r+0x1f4>)
 8025f68:	bb1b      	cbnz	r3, 8025fb2 <_svfiprintf_r+0x1b2>
 8025f6a:	9b03      	ldr	r3, [sp, #12]
 8025f6c:	3307      	adds	r3, #7
 8025f6e:	f023 0307 	bic.w	r3, r3, #7
 8025f72:	3308      	adds	r3, #8
 8025f74:	9303      	str	r3, [sp, #12]
 8025f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f78:	4433      	add	r3, r6
 8025f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8025f7c:	e767      	b.n	8025e4e <_svfiprintf_r+0x4e>
 8025f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8025f82:	460c      	mov	r4, r1
 8025f84:	2001      	movs	r0, #1
 8025f86:	e7a5      	b.n	8025ed4 <_svfiprintf_r+0xd4>
 8025f88:	2300      	movs	r3, #0
 8025f8a:	3401      	adds	r4, #1
 8025f8c:	9305      	str	r3, [sp, #20]
 8025f8e:	4619      	mov	r1, r3
 8025f90:	f04f 0c0a 	mov.w	ip, #10
 8025f94:	4620      	mov	r0, r4
 8025f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025f9a:	3a30      	subs	r2, #48	; 0x30
 8025f9c:	2a09      	cmp	r2, #9
 8025f9e:	d903      	bls.n	8025fa8 <_svfiprintf_r+0x1a8>
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	d0c5      	beq.n	8025f30 <_svfiprintf_r+0x130>
 8025fa4:	9105      	str	r1, [sp, #20]
 8025fa6:	e7c3      	b.n	8025f30 <_svfiprintf_r+0x130>
 8025fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8025fac:	4604      	mov	r4, r0
 8025fae:	2301      	movs	r3, #1
 8025fb0:	e7f0      	b.n	8025f94 <_svfiprintf_r+0x194>
 8025fb2:	ab03      	add	r3, sp, #12
 8025fb4:	9300      	str	r3, [sp, #0]
 8025fb6:	462a      	mov	r2, r5
 8025fb8:	4b0f      	ldr	r3, [pc, #60]	; (8025ff8 <_svfiprintf_r+0x1f8>)
 8025fba:	a904      	add	r1, sp, #16
 8025fbc:	4638      	mov	r0, r7
 8025fbe:	f3af 8000 	nop.w
 8025fc2:	1c42      	adds	r2, r0, #1
 8025fc4:	4606      	mov	r6, r0
 8025fc6:	d1d6      	bne.n	8025f76 <_svfiprintf_r+0x176>
 8025fc8:	89ab      	ldrh	r3, [r5, #12]
 8025fca:	065b      	lsls	r3, r3, #25
 8025fcc:	f53f af2c 	bmi.w	8025e28 <_svfiprintf_r+0x28>
 8025fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025fd2:	b01d      	add	sp, #116	; 0x74
 8025fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fd8:	ab03      	add	r3, sp, #12
 8025fda:	9300      	str	r3, [sp, #0]
 8025fdc:	462a      	mov	r2, r5
 8025fde:	4b06      	ldr	r3, [pc, #24]	; (8025ff8 <_svfiprintf_r+0x1f8>)
 8025fe0:	a904      	add	r1, sp, #16
 8025fe2:	4638      	mov	r0, r7
 8025fe4:	f000 f9d4 	bl	8026390 <_printf_i>
 8025fe8:	e7eb      	b.n	8025fc2 <_svfiprintf_r+0x1c2>
 8025fea:	bf00      	nop
 8025fec:	0802c430 	.word	0x0802c430
 8025ff0:	0802c43a 	.word	0x0802c43a
 8025ff4:	00000000 	.word	0x00000000
 8025ff8:	08025d49 	.word	0x08025d49
 8025ffc:	0802c436 	.word	0x0802c436

08026000 <__sfputc_r>:
 8026000:	6893      	ldr	r3, [r2, #8]
 8026002:	3b01      	subs	r3, #1
 8026004:	2b00      	cmp	r3, #0
 8026006:	b410      	push	{r4}
 8026008:	6093      	str	r3, [r2, #8]
 802600a:	da08      	bge.n	802601e <__sfputc_r+0x1e>
 802600c:	6994      	ldr	r4, [r2, #24]
 802600e:	42a3      	cmp	r3, r4
 8026010:	db01      	blt.n	8026016 <__sfputc_r+0x16>
 8026012:	290a      	cmp	r1, #10
 8026014:	d103      	bne.n	802601e <__sfputc_r+0x1e>
 8026016:	f85d 4b04 	ldr.w	r4, [sp], #4
 802601a:	f7ff bb79 	b.w	8025710 <__swbuf_r>
 802601e:	6813      	ldr	r3, [r2, #0]
 8026020:	1c58      	adds	r0, r3, #1
 8026022:	6010      	str	r0, [r2, #0]
 8026024:	7019      	strb	r1, [r3, #0]
 8026026:	4608      	mov	r0, r1
 8026028:	f85d 4b04 	ldr.w	r4, [sp], #4
 802602c:	4770      	bx	lr

0802602e <__sfputs_r>:
 802602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026030:	4606      	mov	r6, r0
 8026032:	460f      	mov	r7, r1
 8026034:	4614      	mov	r4, r2
 8026036:	18d5      	adds	r5, r2, r3
 8026038:	42ac      	cmp	r4, r5
 802603a:	d101      	bne.n	8026040 <__sfputs_r+0x12>
 802603c:	2000      	movs	r0, #0
 802603e:	e007      	b.n	8026050 <__sfputs_r+0x22>
 8026040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026044:	463a      	mov	r2, r7
 8026046:	4630      	mov	r0, r6
 8026048:	f7ff ffda 	bl	8026000 <__sfputc_r>
 802604c:	1c43      	adds	r3, r0, #1
 802604e:	d1f3      	bne.n	8026038 <__sfputs_r+0xa>
 8026050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026054 <_vfiprintf_r>:
 8026054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026058:	460d      	mov	r5, r1
 802605a:	b09d      	sub	sp, #116	; 0x74
 802605c:	4614      	mov	r4, r2
 802605e:	4698      	mov	r8, r3
 8026060:	4606      	mov	r6, r0
 8026062:	b118      	cbz	r0, 802606c <_vfiprintf_r+0x18>
 8026064:	6983      	ldr	r3, [r0, #24]
 8026066:	b90b      	cbnz	r3, 802606c <_vfiprintf_r+0x18>
 8026068:	f7ff fd4a 	bl	8025b00 <__sinit>
 802606c:	4b89      	ldr	r3, [pc, #548]	; (8026294 <_vfiprintf_r+0x240>)
 802606e:	429d      	cmp	r5, r3
 8026070:	d11b      	bne.n	80260aa <_vfiprintf_r+0x56>
 8026072:	6875      	ldr	r5, [r6, #4]
 8026074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026076:	07d9      	lsls	r1, r3, #31
 8026078:	d405      	bmi.n	8026086 <_vfiprintf_r+0x32>
 802607a:	89ab      	ldrh	r3, [r5, #12]
 802607c:	059a      	lsls	r2, r3, #22
 802607e:	d402      	bmi.n	8026086 <_vfiprintf_r+0x32>
 8026080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026082:	f7ff fded 	bl	8025c60 <__retarget_lock_acquire_recursive>
 8026086:	89ab      	ldrh	r3, [r5, #12]
 8026088:	071b      	lsls	r3, r3, #28
 802608a:	d501      	bpl.n	8026090 <_vfiprintf_r+0x3c>
 802608c:	692b      	ldr	r3, [r5, #16]
 802608e:	b9eb      	cbnz	r3, 80260cc <_vfiprintf_r+0x78>
 8026090:	4629      	mov	r1, r5
 8026092:	4630      	mov	r0, r6
 8026094:	f7ff fb8e 	bl	80257b4 <__swsetup_r>
 8026098:	b1c0      	cbz	r0, 80260cc <_vfiprintf_r+0x78>
 802609a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802609c:	07dc      	lsls	r4, r3, #31
 802609e:	d50e      	bpl.n	80260be <_vfiprintf_r+0x6a>
 80260a0:	f04f 30ff 	mov.w	r0, #4294967295
 80260a4:	b01d      	add	sp, #116	; 0x74
 80260a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260aa:	4b7b      	ldr	r3, [pc, #492]	; (8026298 <_vfiprintf_r+0x244>)
 80260ac:	429d      	cmp	r5, r3
 80260ae:	d101      	bne.n	80260b4 <_vfiprintf_r+0x60>
 80260b0:	68b5      	ldr	r5, [r6, #8]
 80260b2:	e7df      	b.n	8026074 <_vfiprintf_r+0x20>
 80260b4:	4b79      	ldr	r3, [pc, #484]	; (802629c <_vfiprintf_r+0x248>)
 80260b6:	429d      	cmp	r5, r3
 80260b8:	bf08      	it	eq
 80260ba:	68f5      	ldreq	r5, [r6, #12]
 80260bc:	e7da      	b.n	8026074 <_vfiprintf_r+0x20>
 80260be:	89ab      	ldrh	r3, [r5, #12]
 80260c0:	0598      	lsls	r0, r3, #22
 80260c2:	d4ed      	bmi.n	80260a0 <_vfiprintf_r+0x4c>
 80260c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80260c6:	f7ff fdcc 	bl	8025c62 <__retarget_lock_release_recursive>
 80260ca:	e7e9      	b.n	80260a0 <_vfiprintf_r+0x4c>
 80260cc:	2300      	movs	r3, #0
 80260ce:	9309      	str	r3, [sp, #36]	; 0x24
 80260d0:	2320      	movs	r3, #32
 80260d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80260d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80260da:	2330      	movs	r3, #48	; 0x30
 80260dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80262a0 <_vfiprintf_r+0x24c>
 80260e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80260e4:	f04f 0901 	mov.w	r9, #1
 80260e8:	4623      	mov	r3, r4
 80260ea:	469a      	mov	sl, r3
 80260ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80260f0:	b10a      	cbz	r2, 80260f6 <_vfiprintf_r+0xa2>
 80260f2:	2a25      	cmp	r2, #37	; 0x25
 80260f4:	d1f9      	bne.n	80260ea <_vfiprintf_r+0x96>
 80260f6:	ebba 0b04 	subs.w	fp, sl, r4
 80260fa:	d00b      	beq.n	8026114 <_vfiprintf_r+0xc0>
 80260fc:	465b      	mov	r3, fp
 80260fe:	4622      	mov	r2, r4
 8026100:	4629      	mov	r1, r5
 8026102:	4630      	mov	r0, r6
 8026104:	f7ff ff93 	bl	802602e <__sfputs_r>
 8026108:	3001      	adds	r0, #1
 802610a:	f000 80aa 	beq.w	8026262 <_vfiprintf_r+0x20e>
 802610e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026110:	445a      	add	r2, fp
 8026112:	9209      	str	r2, [sp, #36]	; 0x24
 8026114:	f89a 3000 	ldrb.w	r3, [sl]
 8026118:	2b00      	cmp	r3, #0
 802611a:	f000 80a2 	beq.w	8026262 <_vfiprintf_r+0x20e>
 802611e:	2300      	movs	r3, #0
 8026120:	f04f 32ff 	mov.w	r2, #4294967295
 8026124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026128:	f10a 0a01 	add.w	sl, sl, #1
 802612c:	9304      	str	r3, [sp, #16]
 802612e:	9307      	str	r3, [sp, #28]
 8026130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026134:	931a      	str	r3, [sp, #104]	; 0x68
 8026136:	4654      	mov	r4, sl
 8026138:	2205      	movs	r2, #5
 802613a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802613e:	4858      	ldr	r0, [pc, #352]	; (80262a0 <_vfiprintf_r+0x24c>)
 8026140:	f7da f896 	bl	8000270 <memchr>
 8026144:	9a04      	ldr	r2, [sp, #16]
 8026146:	b9d8      	cbnz	r0, 8026180 <_vfiprintf_r+0x12c>
 8026148:	06d1      	lsls	r1, r2, #27
 802614a:	bf44      	itt	mi
 802614c:	2320      	movmi	r3, #32
 802614e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026152:	0713      	lsls	r3, r2, #28
 8026154:	bf44      	itt	mi
 8026156:	232b      	movmi	r3, #43	; 0x2b
 8026158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802615c:	f89a 3000 	ldrb.w	r3, [sl]
 8026160:	2b2a      	cmp	r3, #42	; 0x2a
 8026162:	d015      	beq.n	8026190 <_vfiprintf_r+0x13c>
 8026164:	9a07      	ldr	r2, [sp, #28]
 8026166:	4654      	mov	r4, sl
 8026168:	2000      	movs	r0, #0
 802616a:	f04f 0c0a 	mov.w	ip, #10
 802616e:	4621      	mov	r1, r4
 8026170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026174:	3b30      	subs	r3, #48	; 0x30
 8026176:	2b09      	cmp	r3, #9
 8026178:	d94e      	bls.n	8026218 <_vfiprintf_r+0x1c4>
 802617a:	b1b0      	cbz	r0, 80261aa <_vfiprintf_r+0x156>
 802617c:	9207      	str	r2, [sp, #28]
 802617e:	e014      	b.n	80261aa <_vfiprintf_r+0x156>
 8026180:	eba0 0308 	sub.w	r3, r0, r8
 8026184:	fa09 f303 	lsl.w	r3, r9, r3
 8026188:	4313      	orrs	r3, r2
 802618a:	9304      	str	r3, [sp, #16]
 802618c:	46a2      	mov	sl, r4
 802618e:	e7d2      	b.n	8026136 <_vfiprintf_r+0xe2>
 8026190:	9b03      	ldr	r3, [sp, #12]
 8026192:	1d19      	adds	r1, r3, #4
 8026194:	681b      	ldr	r3, [r3, #0]
 8026196:	9103      	str	r1, [sp, #12]
 8026198:	2b00      	cmp	r3, #0
 802619a:	bfbb      	ittet	lt
 802619c:	425b      	neglt	r3, r3
 802619e:	f042 0202 	orrlt.w	r2, r2, #2
 80261a2:	9307      	strge	r3, [sp, #28]
 80261a4:	9307      	strlt	r3, [sp, #28]
 80261a6:	bfb8      	it	lt
 80261a8:	9204      	strlt	r2, [sp, #16]
 80261aa:	7823      	ldrb	r3, [r4, #0]
 80261ac:	2b2e      	cmp	r3, #46	; 0x2e
 80261ae:	d10c      	bne.n	80261ca <_vfiprintf_r+0x176>
 80261b0:	7863      	ldrb	r3, [r4, #1]
 80261b2:	2b2a      	cmp	r3, #42	; 0x2a
 80261b4:	d135      	bne.n	8026222 <_vfiprintf_r+0x1ce>
 80261b6:	9b03      	ldr	r3, [sp, #12]
 80261b8:	1d1a      	adds	r2, r3, #4
 80261ba:	681b      	ldr	r3, [r3, #0]
 80261bc:	9203      	str	r2, [sp, #12]
 80261be:	2b00      	cmp	r3, #0
 80261c0:	bfb8      	it	lt
 80261c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80261c6:	3402      	adds	r4, #2
 80261c8:	9305      	str	r3, [sp, #20]
 80261ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80262b0 <_vfiprintf_r+0x25c>
 80261ce:	7821      	ldrb	r1, [r4, #0]
 80261d0:	2203      	movs	r2, #3
 80261d2:	4650      	mov	r0, sl
 80261d4:	f7da f84c 	bl	8000270 <memchr>
 80261d8:	b140      	cbz	r0, 80261ec <_vfiprintf_r+0x198>
 80261da:	2340      	movs	r3, #64	; 0x40
 80261dc:	eba0 000a 	sub.w	r0, r0, sl
 80261e0:	fa03 f000 	lsl.w	r0, r3, r0
 80261e4:	9b04      	ldr	r3, [sp, #16]
 80261e6:	4303      	orrs	r3, r0
 80261e8:	3401      	adds	r4, #1
 80261ea:	9304      	str	r3, [sp, #16]
 80261ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80261f0:	482c      	ldr	r0, [pc, #176]	; (80262a4 <_vfiprintf_r+0x250>)
 80261f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80261f6:	2206      	movs	r2, #6
 80261f8:	f7da f83a 	bl	8000270 <memchr>
 80261fc:	2800      	cmp	r0, #0
 80261fe:	d03f      	beq.n	8026280 <_vfiprintf_r+0x22c>
 8026200:	4b29      	ldr	r3, [pc, #164]	; (80262a8 <_vfiprintf_r+0x254>)
 8026202:	bb1b      	cbnz	r3, 802624c <_vfiprintf_r+0x1f8>
 8026204:	9b03      	ldr	r3, [sp, #12]
 8026206:	3307      	adds	r3, #7
 8026208:	f023 0307 	bic.w	r3, r3, #7
 802620c:	3308      	adds	r3, #8
 802620e:	9303      	str	r3, [sp, #12]
 8026210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026212:	443b      	add	r3, r7
 8026214:	9309      	str	r3, [sp, #36]	; 0x24
 8026216:	e767      	b.n	80260e8 <_vfiprintf_r+0x94>
 8026218:	fb0c 3202 	mla	r2, ip, r2, r3
 802621c:	460c      	mov	r4, r1
 802621e:	2001      	movs	r0, #1
 8026220:	e7a5      	b.n	802616e <_vfiprintf_r+0x11a>
 8026222:	2300      	movs	r3, #0
 8026224:	3401      	adds	r4, #1
 8026226:	9305      	str	r3, [sp, #20]
 8026228:	4619      	mov	r1, r3
 802622a:	f04f 0c0a 	mov.w	ip, #10
 802622e:	4620      	mov	r0, r4
 8026230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026234:	3a30      	subs	r2, #48	; 0x30
 8026236:	2a09      	cmp	r2, #9
 8026238:	d903      	bls.n	8026242 <_vfiprintf_r+0x1ee>
 802623a:	2b00      	cmp	r3, #0
 802623c:	d0c5      	beq.n	80261ca <_vfiprintf_r+0x176>
 802623e:	9105      	str	r1, [sp, #20]
 8026240:	e7c3      	b.n	80261ca <_vfiprintf_r+0x176>
 8026242:	fb0c 2101 	mla	r1, ip, r1, r2
 8026246:	4604      	mov	r4, r0
 8026248:	2301      	movs	r3, #1
 802624a:	e7f0      	b.n	802622e <_vfiprintf_r+0x1da>
 802624c:	ab03      	add	r3, sp, #12
 802624e:	9300      	str	r3, [sp, #0]
 8026250:	462a      	mov	r2, r5
 8026252:	4b16      	ldr	r3, [pc, #88]	; (80262ac <_vfiprintf_r+0x258>)
 8026254:	a904      	add	r1, sp, #16
 8026256:	4630      	mov	r0, r6
 8026258:	f3af 8000 	nop.w
 802625c:	4607      	mov	r7, r0
 802625e:	1c78      	adds	r0, r7, #1
 8026260:	d1d6      	bne.n	8026210 <_vfiprintf_r+0x1bc>
 8026262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026264:	07d9      	lsls	r1, r3, #31
 8026266:	d405      	bmi.n	8026274 <_vfiprintf_r+0x220>
 8026268:	89ab      	ldrh	r3, [r5, #12]
 802626a:	059a      	lsls	r2, r3, #22
 802626c:	d402      	bmi.n	8026274 <_vfiprintf_r+0x220>
 802626e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026270:	f7ff fcf7 	bl	8025c62 <__retarget_lock_release_recursive>
 8026274:	89ab      	ldrh	r3, [r5, #12]
 8026276:	065b      	lsls	r3, r3, #25
 8026278:	f53f af12 	bmi.w	80260a0 <_vfiprintf_r+0x4c>
 802627c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802627e:	e711      	b.n	80260a4 <_vfiprintf_r+0x50>
 8026280:	ab03      	add	r3, sp, #12
 8026282:	9300      	str	r3, [sp, #0]
 8026284:	462a      	mov	r2, r5
 8026286:	4b09      	ldr	r3, [pc, #36]	; (80262ac <_vfiprintf_r+0x258>)
 8026288:	a904      	add	r1, sp, #16
 802628a:	4630      	mov	r0, r6
 802628c:	f000 f880 	bl	8026390 <_printf_i>
 8026290:	e7e4      	b.n	802625c <_vfiprintf_r+0x208>
 8026292:	bf00      	nop
 8026294:	0802c3f0 	.word	0x0802c3f0
 8026298:	0802c410 	.word	0x0802c410
 802629c:	0802c3d0 	.word	0x0802c3d0
 80262a0:	0802c430 	.word	0x0802c430
 80262a4:	0802c43a 	.word	0x0802c43a
 80262a8:	00000000 	.word	0x00000000
 80262ac:	0802602f 	.word	0x0802602f
 80262b0:	0802c436 	.word	0x0802c436

080262b4 <_printf_common>:
 80262b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80262b8:	4616      	mov	r6, r2
 80262ba:	4699      	mov	r9, r3
 80262bc:	688a      	ldr	r2, [r1, #8]
 80262be:	690b      	ldr	r3, [r1, #16]
 80262c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80262c4:	4293      	cmp	r3, r2
 80262c6:	bfb8      	it	lt
 80262c8:	4613      	movlt	r3, r2
 80262ca:	6033      	str	r3, [r6, #0]
 80262cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80262d0:	4607      	mov	r7, r0
 80262d2:	460c      	mov	r4, r1
 80262d4:	b10a      	cbz	r2, 80262da <_printf_common+0x26>
 80262d6:	3301      	adds	r3, #1
 80262d8:	6033      	str	r3, [r6, #0]
 80262da:	6823      	ldr	r3, [r4, #0]
 80262dc:	0699      	lsls	r1, r3, #26
 80262de:	bf42      	ittt	mi
 80262e0:	6833      	ldrmi	r3, [r6, #0]
 80262e2:	3302      	addmi	r3, #2
 80262e4:	6033      	strmi	r3, [r6, #0]
 80262e6:	6825      	ldr	r5, [r4, #0]
 80262e8:	f015 0506 	ands.w	r5, r5, #6
 80262ec:	d106      	bne.n	80262fc <_printf_common+0x48>
 80262ee:	f104 0a19 	add.w	sl, r4, #25
 80262f2:	68e3      	ldr	r3, [r4, #12]
 80262f4:	6832      	ldr	r2, [r6, #0]
 80262f6:	1a9b      	subs	r3, r3, r2
 80262f8:	42ab      	cmp	r3, r5
 80262fa:	dc26      	bgt.n	802634a <_printf_common+0x96>
 80262fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026300:	1e13      	subs	r3, r2, #0
 8026302:	6822      	ldr	r2, [r4, #0]
 8026304:	bf18      	it	ne
 8026306:	2301      	movne	r3, #1
 8026308:	0692      	lsls	r2, r2, #26
 802630a:	d42b      	bmi.n	8026364 <_printf_common+0xb0>
 802630c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026310:	4649      	mov	r1, r9
 8026312:	4638      	mov	r0, r7
 8026314:	47c0      	blx	r8
 8026316:	3001      	adds	r0, #1
 8026318:	d01e      	beq.n	8026358 <_printf_common+0xa4>
 802631a:	6823      	ldr	r3, [r4, #0]
 802631c:	68e5      	ldr	r5, [r4, #12]
 802631e:	6832      	ldr	r2, [r6, #0]
 8026320:	f003 0306 	and.w	r3, r3, #6
 8026324:	2b04      	cmp	r3, #4
 8026326:	bf08      	it	eq
 8026328:	1aad      	subeq	r5, r5, r2
 802632a:	68a3      	ldr	r3, [r4, #8]
 802632c:	6922      	ldr	r2, [r4, #16]
 802632e:	bf0c      	ite	eq
 8026330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026334:	2500      	movne	r5, #0
 8026336:	4293      	cmp	r3, r2
 8026338:	bfc4      	itt	gt
 802633a:	1a9b      	subgt	r3, r3, r2
 802633c:	18ed      	addgt	r5, r5, r3
 802633e:	2600      	movs	r6, #0
 8026340:	341a      	adds	r4, #26
 8026342:	42b5      	cmp	r5, r6
 8026344:	d11a      	bne.n	802637c <_printf_common+0xc8>
 8026346:	2000      	movs	r0, #0
 8026348:	e008      	b.n	802635c <_printf_common+0xa8>
 802634a:	2301      	movs	r3, #1
 802634c:	4652      	mov	r2, sl
 802634e:	4649      	mov	r1, r9
 8026350:	4638      	mov	r0, r7
 8026352:	47c0      	blx	r8
 8026354:	3001      	adds	r0, #1
 8026356:	d103      	bne.n	8026360 <_printf_common+0xac>
 8026358:	f04f 30ff 	mov.w	r0, #4294967295
 802635c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026360:	3501      	adds	r5, #1
 8026362:	e7c6      	b.n	80262f2 <_printf_common+0x3e>
 8026364:	18e1      	adds	r1, r4, r3
 8026366:	1c5a      	adds	r2, r3, #1
 8026368:	2030      	movs	r0, #48	; 0x30
 802636a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802636e:	4422      	add	r2, r4
 8026370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026378:	3302      	adds	r3, #2
 802637a:	e7c7      	b.n	802630c <_printf_common+0x58>
 802637c:	2301      	movs	r3, #1
 802637e:	4622      	mov	r2, r4
 8026380:	4649      	mov	r1, r9
 8026382:	4638      	mov	r0, r7
 8026384:	47c0      	blx	r8
 8026386:	3001      	adds	r0, #1
 8026388:	d0e6      	beq.n	8026358 <_printf_common+0xa4>
 802638a:	3601      	adds	r6, #1
 802638c:	e7d9      	b.n	8026342 <_printf_common+0x8e>
	...

08026390 <_printf_i>:
 8026390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026394:	7e0f      	ldrb	r7, [r1, #24]
 8026396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026398:	2f78      	cmp	r7, #120	; 0x78
 802639a:	4691      	mov	r9, r2
 802639c:	4680      	mov	r8, r0
 802639e:	460c      	mov	r4, r1
 80263a0:	469a      	mov	sl, r3
 80263a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80263a6:	d807      	bhi.n	80263b8 <_printf_i+0x28>
 80263a8:	2f62      	cmp	r7, #98	; 0x62
 80263aa:	d80a      	bhi.n	80263c2 <_printf_i+0x32>
 80263ac:	2f00      	cmp	r7, #0
 80263ae:	f000 80d8 	beq.w	8026562 <_printf_i+0x1d2>
 80263b2:	2f58      	cmp	r7, #88	; 0x58
 80263b4:	f000 80a3 	beq.w	80264fe <_printf_i+0x16e>
 80263b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80263bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80263c0:	e03a      	b.n	8026438 <_printf_i+0xa8>
 80263c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80263c6:	2b15      	cmp	r3, #21
 80263c8:	d8f6      	bhi.n	80263b8 <_printf_i+0x28>
 80263ca:	a101      	add	r1, pc, #4	; (adr r1, 80263d0 <_printf_i+0x40>)
 80263cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80263d0:	08026429 	.word	0x08026429
 80263d4:	0802643d 	.word	0x0802643d
 80263d8:	080263b9 	.word	0x080263b9
 80263dc:	080263b9 	.word	0x080263b9
 80263e0:	080263b9 	.word	0x080263b9
 80263e4:	080263b9 	.word	0x080263b9
 80263e8:	0802643d 	.word	0x0802643d
 80263ec:	080263b9 	.word	0x080263b9
 80263f0:	080263b9 	.word	0x080263b9
 80263f4:	080263b9 	.word	0x080263b9
 80263f8:	080263b9 	.word	0x080263b9
 80263fc:	08026549 	.word	0x08026549
 8026400:	0802646d 	.word	0x0802646d
 8026404:	0802652b 	.word	0x0802652b
 8026408:	080263b9 	.word	0x080263b9
 802640c:	080263b9 	.word	0x080263b9
 8026410:	0802656b 	.word	0x0802656b
 8026414:	080263b9 	.word	0x080263b9
 8026418:	0802646d 	.word	0x0802646d
 802641c:	080263b9 	.word	0x080263b9
 8026420:	080263b9 	.word	0x080263b9
 8026424:	08026533 	.word	0x08026533
 8026428:	682b      	ldr	r3, [r5, #0]
 802642a:	1d1a      	adds	r2, r3, #4
 802642c:	681b      	ldr	r3, [r3, #0]
 802642e:	602a      	str	r2, [r5, #0]
 8026430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026438:	2301      	movs	r3, #1
 802643a:	e0a3      	b.n	8026584 <_printf_i+0x1f4>
 802643c:	6820      	ldr	r0, [r4, #0]
 802643e:	6829      	ldr	r1, [r5, #0]
 8026440:	0606      	lsls	r6, r0, #24
 8026442:	f101 0304 	add.w	r3, r1, #4
 8026446:	d50a      	bpl.n	802645e <_printf_i+0xce>
 8026448:	680e      	ldr	r6, [r1, #0]
 802644a:	602b      	str	r3, [r5, #0]
 802644c:	2e00      	cmp	r6, #0
 802644e:	da03      	bge.n	8026458 <_printf_i+0xc8>
 8026450:	232d      	movs	r3, #45	; 0x2d
 8026452:	4276      	negs	r6, r6
 8026454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026458:	485e      	ldr	r0, [pc, #376]	; (80265d4 <_printf_i+0x244>)
 802645a:	230a      	movs	r3, #10
 802645c:	e019      	b.n	8026492 <_printf_i+0x102>
 802645e:	680e      	ldr	r6, [r1, #0]
 8026460:	602b      	str	r3, [r5, #0]
 8026462:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026466:	bf18      	it	ne
 8026468:	b236      	sxthne	r6, r6
 802646a:	e7ef      	b.n	802644c <_printf_i+0xbc>
 802646c:	682b      	ldr	r3, [r5, #0]
 802646e:	6820      	ldr	r0, [r4, #0]
 8026470:	1d19      	adds	r1, r3, #4
 8026472:	6029      	str	r1, [r5, #0]
 8026474:	0601      	lsls	r1, r0, #24
 8026476:	d501      	bpl.n	802647c <_printf_i+0xec>
 8026478:	681e      	ldr	r6, [r3, #0]
 802647a:	e002      	b.n	8026482 <_printf_i+0xf2>
 802647c:	0646      	lsls	r6, r0, #25
 802647e:	d5fb      	bpl.n	8026478 <_printf_i+0xe8>
 8026480:	881e      	ldrh	r6, [r3, #0]
 8026482:	4854      	ldr	r0, [pc, #336]	; (80265d4 <_printf_i+0x244>)
 8026484:	2f6f      	cmp	r7, #111	; 0x6f
 8026486:	bf0c      	ite	eq
 8026488:	2308      	moveq	r3, #8
 802648a:	230a      	movne	r3, #10
 802648c:	2100      	movs	r1, #0
 802648e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026492:	6865      	ldr	r5, [r4, #4]
 8026494:	60a5      	str	r5, [r4, #8]
 8026496:	2d00      	cmp	r5, #0
 8026498:	bfa2      	ittt	ge
 802649a:	6821      	ldrge	r1, [r4, #0]
 802649c:	f021 0104 	bicge.w	r1, r1, #4
 80264a0:	6021      	strge	r1, [r4, #0]
 80264a2:	b90e      	cbnz	r6, 80264a8 <_printf_i+0x118>
 80264a4:	2d00      	cmp	r5, #0
 80264a6:	d04d      	beq.n	8026544 <_printf_i+0x1b4>
 80264a8:	4615      	mov	r5, r2
 80264aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80264ae:	fb03 6711 	mls	r7, r3, r1, r6
 80264b2:	5dc7      	ldrb	r7, [r0, r7]
 80264b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80264b8:	4637      	mov	r7, r6
 80264ba:	42bb      	cmp	r3, r7
 80264bc:	460e      	mov	r6, r1
 80264be:	d9f4      	bls.n	80264aa <_printf_i+0x11a>
 80264c0:	2b08      	cmp	r3, #8
 80264c2:	d10b      	bne.n	80264dc <_printf_i+0x14c>
 80264c4:	6823      	ldr	r3, [r4, #0]
 80264c6:	07de      	lsls	r6, r3, #31
 80264c8:	d508      	bpl.n	80264dc <_printf_i+0x14c>
 80264ca:	6923      	ldr	r3, [r4, #16]
 80264cc:	6861      	ldr	r1, [r4, #4]
 80264ce:	4299      	cmp	r1, r3
 80264d0:	bfde      	ittt	le
 80264d2:	2330      	movle	r3, #48	; 0x30
 80264d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80264d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80264dc:	1b52      	subs	r2, r2, r5
 80264de:	6122      	str	r2, [r4, #16]
 80264e0:	f8cd a000 	str.w	sl, [sp]
 80264e4:	464b      	mov	r3, r9
 80264e6:	aa03      	add	r2, sp, #12
 80264e8:	4621      	mov	r1, r4
 80264ea:	4640      	mov	r0, r8
 80264ec:	f7ff fee2 	bl	80262b4 <_printf_common>
 80264f0:	3001      	adds	r0, #1
 80264f2:	d14c      	bne.n	802658e <_printf_i+0x1fe>
 80264f4:	f04f 30ff 	mov.w	r0, #4294967295
 80264f8:	b004      	add	sp, #16
 80264fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264fe:	4835      	ldr	r0, [pc, #212]	; (80265d4 <_printf_i+0x244>)
 8026500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026504:	6829      	ldr	r1, [r5, #0]
 8026506:	6823      	ldr	r3, [r4, #0]
 8026508:	f851 6b04 	ldr.w	r6, [r1], #4
 802650c:	6029      	str	r1, [r5, #0]
 802650e:	061d      	lsls	r5, r3, #24
 8026510:	d514      	bpl.n	802653c <_printf_i+0x1ac>
 8026512:	07df      	lsls	r7, r3, #31
 8026514:	bf44      	itt	mi
 8026516:	f043 0320 	orrmi.w	r3, r3, #32
 802651a:	6023      	strmi	r3, [r4, #0]
 802651c:	b91e      	cbnz	r6, 8026526 <_printf_i+0x196>
 802651e:	6823      	ldr	r3, [r4, #0]
 8026520:	f023 0320 	bic.w	r3, r3, #32
 8026524:	6023      	str	r3, [r4, #0]
 8026526:	2310      	movs	r3, #16
 8026528:	e7b0      	b.n	802648c <_printf_i+0xfc>
 802652a:	6823      	ldr	r3, [r4, #0]
 802652c:	f043 0320 	orr.w	r3, r3, #32
 8026530:	6023      	str	r3, [r4, #0]
 8026532:	2378      	movs	r3, #120	; 0x78
 8026534:	4828      	ldr	r0, [pc, #160]	; (80265d8 <_printf_i+0x248>)
 8026536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802653a:	e7e3      	b.n	8026504 <_printf_i+0x174>
 802653c:	0659      	lsls	r1, r3, #25
 802653e:	bf48      	it	mi
 8026540:	b2b6      	uxthmi	r6, r6
 8026542:	e7e6      	b.n	8026512 <_printf_i+0x182>
 8026544:	4615      	mov	r5, r2
 8026546:	e7bb      	b.n	80264c0 <_printf_i+0x130>
 8026548:	682b      	ldr	r3, [r5, #0]
 802654a:	6826      	ldr	r6, [r4, #0]
 802654c:	6961      	ldr	r1, [r4, #20]
 802654e:	1d18      	adds	r0, r3, #4
 8026550:	6028      	str	r0, [r5, #0]
 8026552:	0635      	lsls	r5, r6, #24
 8026554:	681b      	ldr	r3, [r3, #0]
 8026556:	d501      	bpl.n	802655c <_printf_i+0x1cc>
 8026558:	6019      	str	r1, [r3, #0]
 802655a:	e002      	b.n	8026562 <_printf_i+0x1d2>
 802655c:	0670      	lsls	r0, r6, #25
 802655e:	d5fb      	bpl.n	8026558 <_printf_i+0x1c8>
 8026560:	8019      	strh	r1, [r3, #0]
 8026562:	2300      	movs	r3, #0
 8026564:	6123      	str	r3, [r4, #16]
 8026566:	4615      	mov	r5, r2
 8026568:	e7ba      	b.n	80264e0 <_printf_i+0x150>
 802656a:	682b      	ldr	r3, [r5, #0]
 802656c:	1d1a      	adds	r2, r3, #4
 802656e:	602a      	str	r2, [r5, #0]
 8026570:	681d      	ldr	r5, [r3, #0]
 8026572:	6862      	ldr	r2, [r4, #4]
 8026574:	2100      	movs	r1, #0
 8026576:	4628      	mov	r0, r5
 8026578:	f7d9 fe7a 	bl	8000270 <memchr>
 802657c:	b108      	cbz	r0, 8026582 <_printf_i+0x1f2>
 802657e:	1b40      	subs	r0, r0, r5
 8026580:	6060      	str	r0, [r4, #4]
 8026582:	6863      	ldr	r3, [r4, #4]
 8026584:	6123      	str	r3, [r4, #16]
 8026586:	2300      	movs	r3, #0
 8026588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802658c:	e7a8      	b.n	80264e0 <_printf_i+0x150>
 802658e:	6923      	ldr	r3, [r4, #16]
 8026590:	462a      	mov	r2, r5
 8026592:	4649      	mov	r1, r9
 8026594:	4640      	mov	r0, r8
 8026596:	47d0      	blx	sl
 8026598:	3001      	adds	r0, #1
 802659a:	d0ab      	beq.n	80264f4 <_printf_i+0x164>
 802659c:	6823      	ldr	r3, [r4, #0]
 802659e:	079b      	lsls	r3, r3, #30
 80265a0:	d413      	bmi.n	80265ca <_printf_i+0x23a>
 80265a2:	68e0      	ldr	r0, [r4, #12]
 80265a4:	9b03      	ldr	r3, [sp, #12]
 80265a6:	4298      	cmp	r0, r3
 80265a8:	bfb8      	it	lt
 80265aa:	4618      	movlt	r0, r3
 80265ac:	e7a4      	b.n	80264f8 <_printf_i+0x168>
 80265ae:	2301      	movs	r3, #1
 80265b0:	4632      	mov	r2, r6
 80265b2:	4649      	mov	r1, r9
 80265b4:	4640      	mov	r0, r8
 80265b6:	47d0      	blx	sl
 80265b8:	3001      	adds	r0, #1
 80265ba:	d09b      	beq.n	80264f4 <_printf_i+0x164>
 80265bc:	3501      	adds	r5, #1
 80265be:	68e3      	ldr	r3, [r4, #12]
 80265c0:	9903      	ldr	r1, [sp, #12]
 80265c2:	1a5b      	subs	r3, r3, r1
 80265c4:	42ab      	cmp	r3, r5
 80265c6:	dcf2      	bgt.n	80265ae <_printf_i+0x21e>
 80265c8:	e7eb      	b.n	80265a2 <_printf_i+0x212>
 80265ca:	2500      	movs	r5, #0
 80265cc:	f104 0619 	add.w	r6, r4, #25
 80265d0:	e7f5      	b.n	80265be <_printf_i+0x22e>
 80265d2:	bf00      	nop
 80265d4:	0802c441 	.word	0x0802c441
 80265d8:	0802c452 	.word	0x0802c452

080265dc <_putc_r>:
 80265dc:	b570      	push	{r4, r5, r6, lr}
 80265de:	460d      	mov	r5, r1
 80265e0:	4614      	mov	r4, r2
 80265e2:	4606      	mov	r6, r0
 80265e4:	b118      	cbz	r0, 80265ee <_putc_r+0x12>
 80265e6:	6983      	ldr	r3, [r0, #24]
 80265e8:	b90b      	cbnz	r3, 80265ee <_putc_r+0x12>
 80265ea:	f7ff fa89 	bl	8025b00 <__sinit>
 80265ee:	4b1c      	ldr	r3, [pc, #112]	; (8026660 <_putc_r+0x84>)
 80265f0:	429c      	cmp	r4, r3
 80265f2:	d124      	bne.n	802663e <_putc_r+0x62>
 80265f4:	6874      	ldr	r4, [r6, #4]
 80265f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80265f8:	07d8      	lsls	r0, r3, #31
 80265fa:	d405      	bmi.n	8026608 <_putc_r+0x2c>
 80265fc:	89a3      	ldrh	r3, [r4, #12]
 80265fe:	0599      	lsls	r1, r3, #22
 8026600:	d402      	bmi.n	8026608 <_putc_r+0x2c>
 8026602:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026604:	f7ff fb2c 	bl	8025c60 <__retarget_lock_acquire_recursive>
 8026608:	68a3      	ldr	r3, [r4, #8]
 802660a:	3b01      	subs	r3, #1
 802660c:	2b00      	cmp	r3, #0
 802660e:	60a3      	str	r3, [r4, #8]
 8026610:	da05      	bge.n	802661e <_putc_r+0x42>
 8026612:	69a2      	ldr	r2, [r4, #24]
 8026614:	4293      	cmp	r3, r2
 8026616:	db1c      	blt.n	8026652 <_putc_r+0x76>
 8026618:	b2eb      	uxtb	r3, r5
 802661a:	2b0a      	cmp	r3, #10
 802661c:	d019      	beq.n	8026652 <_putc_r+0x76>
 802661e:	6823      	ldr	r3, [r4, #0]
 8026620:	1c5a      	adds	r2, r3, #1
 8026622:	6022      	str	r2, [r4, #0]
 8026624:	701d      	strb	r5, [r3, #0]
 8026626:	b2ed      	uxtb	r5, r5
 8026628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802662a:	07da      	lsls	r2, r3, #31
 802662c:	d405      	bmi.n	802663a <_putc_r+0x5e>
 802662e:	89a3      	ldrh	r3, [r4, #12]
 8026630:	059b      	lsls	r3, r3, #22
 8026632:	d402      	bmi.n	802663a <_putc_r+0x5e>
 8026634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026636:	f7ff fb14 	bl	8025c62 <__retarget_lock_release_recursive>
 802663a:	4628      	mov	r0, r5
 802663c:	bd70      	pop	{r4, r5, r6, pc}
 802663e:	4b09      	ldr	r3, [pc, #36]	; (8026664 <_putc_r+0x88>)
 8026640:	429c      	cmp	r4, r3
 8026642:	d101      	bne.n	8026648 <_putc_r+0x6c>
 8026644:	68b4      	ldr	r4, [r6, #8]
 8026646:	e7d6      	b.n	80265f6 <_putc_r+0x1a>
 8026648:	4b07      	ldr	r3, [pc, #28]	; (8026668 <_putc_r+0x8c>)
 802664a:	429c      	cmp	r4, r3
 802664c:	bf08      	it	eq
 802664e:	68f4      	ldreq	r4, [r6, #12]
 8026650:	e7d1      	b.n	80265f6 <_putc_r+0x1a>
 8026652:	4629      	mov	r1, r5
 8026654:	4622      	mov	r2, r4
 8026656:	4630      	mov	r0, r6
 8026658:	f7ff f85a 	bl	8025710 <__swbuf_r>
 802665c:	4605      	mov	r5, r0
 802665e:	e7e3      	b.n	8026628 <_putc_r+0x4c>
 8026660:	0802c3f0 	.word	0x0802c3f0
 8026664:	0802c410 	.word	0x0802c410
 8026668:	0802c3d0 	.word	0x0802c3d0

0802666c <__sread>:
 802666c:	b510      	push	{r4, lr}
 802666e:	460c      	mov	r4, r1
 8026670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026674:	f000 f8cc 	bl	8026810 <_read_r>
 8026678:	2800      	cmp	r0, #0
 802667a:	bfab      	itete	ge
 802667c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802667e:	89a3      	ldrhlt	r3, [r4, #12]
 8026680:	181b      	addge	r3, r3, r0
 8026682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026686:	bfac      	ite	ge
 8026688:	6563      	strge	r3, [r4, #84]	; 0x54
 802668a:	81a3      	strhlt	r3, [r4, #12]
 802668c:	bd10      	pop	{r4, pc}

0802668e <__swrite>:
 802668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026692:	461f      	mov	r7, r3
 8026694:	898b      	ldrh	r3, [r1, #12]
 8026696:	05db      	lsls	r3, r3, #23
 8026698:	4605      	mov	r5, r0
 802669a:	460c      	mov	r4, r1
 802669c:	4616      	mov	r6, r2
 802669e:	d505      	bpl.n	80266ac <__swrite+0x1e>
 80266a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266a4:	2302      	movs	r3, #2
 80266a6:	2200      	movs	r2, #0
 80266a8:	f000 f870 	bl	802678c <_lseek_r>
 80266ac:	89a3      	ldrh	r3, [r4, #12]
 80266ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80266b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80266b6:	81a3      	strh	r3, [r4, #12]
 80266b8:	4632      	mov	r2, r6
 80266ba:	463b      	mov	r3, r7
 80266bc:	4628      	mov	r0, r5
 80266be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80266c2:	f000 b817 	b.w	80266f4 <_write_r>

080266c6 <__sseek>:
 80266c6:	b510      	push	{r4, lr}
 80266c8:	460c      	mov	r4, r1
 80266ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266ce:	f000 f85d 	bl	802678c <_lseek_r>
 80266d2:	1c43      	adds	r3, r0, #1
 80266d4:	89a3      	ldrh	r3, [r4, #12]
 80266d6:	bf15      	itete	ne
 80266d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80266da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80266de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80266e2:	81a3      	strheq	r3, [r4, #12]
 80266e4:	bf18      	it	ne
 80266e6:	81a3      	strhne	r3, [r4, #12]
 80266e8:	bd10      	pop	{r4, pc}

080266ea <__sclose>:
 80266ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266ee:	f000 b81b 	b.w	8026728 <_close_r>
	...

080266f4 <_write_r>:
 80266f4:	b538      	push	{r3, r4, r5, lr}
 80266f6:	4d07      	ldr	r5, [pc, #28]	; (8026714 <_write_r+0x20>)
 80266f8:	4604      	mov	r4, r0
 80266fa:	4608      	mov	r0, r1
 80266fc:	4611      	mov	r1, r2
 80266fe:	2200      	movs	r2, #0
 8026700:	602a      	str	r2, [r5, #0]
 8026702:	461a      	mov	r2, r3
 8026704:	f7f0 ff3b 	bl	801757e <_write>
 8026708:	1c43      	adds	r3, r0, #1
 802670a:	d102      	bne.n	8026712 <_write_r+0x1e>
 802670c:	682b      	ldr	r3, [r5, #0]
 802670e:	b103      	cbz	r3, 8026712 <_write_r+0x1e>
 8026710:	6023      	str	r3, [r4, #0]
 8026712:	bd38      	pop	{r3, r4, r5, pc}
 8026714:	20015004 	.word	0x20015004

08026718 <abort>:
 8026718:	b508      	push	{r3, lr}
 802671a:	2006      	movs	r0, #6
 802671c:	f000 f8b2 	bl	8026884 <raise>
 8026720:	2001      	movs	r0, #1
 8026722:	f7f0 ff05 	bl	8017530 <_exit>
	...

08026728 <_close_r>:
 8026728:	b538      	push	{r3, r4, r5, lr}
 802672a:	4d06      	ldr	r5, [pc, #24]	; (8026744 <_close_r+0x1c>)
 802672c:	2300      	movs	r3, #0
 802672e:	4604      	mov	r4, r0
 8026730:	4608      	mov	r0, r1
 8026732:	602b      	str	r3, [r5, #0]
 8026734:	f7f0 ff3f 	bl	80175b6 <_close>
 8026738:	1c43      	adds	r3, r0, #1
 802673a:	d102      	bne.n	8026742 <_close_r+0x1a>
 802673c:	682b      	ldr	r3, [r5, #0]
 802673e:	b103      	cbz	r3, 8026742 <_close_r+0x1a>
 8026740:	6023      	str	r3, [r4, #0]
 8026742:	bd38      	pop	{r3, r4, r5, pc}
 8026744:	20015004 	.word	0x20015004

08026748 <_fstat_r>:
 8026748:	b538      	push	{r3, r4, r5, lr}
 802674a:	4d07      	ldr	r5, [pc, #28]	; (8026768 <_fstat_r+0x20>)
 802674c:	2300      	movs	r3, #0
 802674e:	4604      	mov	r4, r0
 8026750:	4608      	mov	r0, r1
 8026752:	4611      	mov	r1, r2
 8026754:	602b      	str	r3, [r5, #0]
 8026756:	f7f0 ff3a 	bl	80175ce <_fstat>
 802675a:	1c43      	adds	r3, r0, #1
 802675c:	d102      	bne.n	8026764 <_fstat_r+0x1c>
 802675e:	682b      	ldr	r3, [r5, #0]
 8026760:	b103      	cbz	r3, 8026764 <_fstat_r+0x1c>
 8026762:	6023      	str	r3, [r4, #0]
 8026764:	bd38      	pop	{r3, r4, r5, pc}
 8026766:	bf00      	nop
 8026768:	20015004 	.word	0x20015004

0802676c <_isatty_r>:
 802676c:	b538      	push	{r3, r4, r5, lr}
 802676e:	4d06      	ldr	r5, [pc, #24]	; (8026788 <_isatty_r+0x1c>)
 8026770:	2300      	movs	r3, #0
 8026772:	4604      	mov	r4, r0
 8026774:	4608      	mov	r0, r1
 8026776:	602b      	str	r3, [r5, #0]
 8026778:	f7f0 ff39 	bl	80175ee <_isatty>
 802677c:	1c43      	adds	r3, r0, #1
 802677e:	d102      	bne.n	8026786 <_isatty_r+0x1a>
 8026780:	682b      	ldr	r3, [r5, #0]
 8026782:	b103      	cbz	r3, 8026786 <_isatty_r+0x1a>
 8026784:	6023      	str	r3, [r4, #0]
 8026786:	bd38      	pop	{r3, r4, r5, pc}
 8026788:	20015004 	.word	0x20015004

0802678c <_lseek_r>:
 802678c:	b538      	push	{r3, r4, r5, lr}
 802678e:	4d07      	ldr	r5, [pc, #28]	; (80267ac <_lseek_r+0x20>)
 8026790:	4604      	mov	r4, r0
 8026792:	4608      	mov	r0, r1
 8026794:	4611      	mov	r1, r2
 8026796:	2200      	movs	r2, #0
 8026798:	602a      	str	r2, [r5, #0]
 802679a:	461a      	mov	r2, r3
 802679c:	f7f0 ff32 	bl	8017604 <_lseek>
 80267a0:	1c43      	adds	r3, r0, #1
 80267a2:	d102      	bne.n	80267aa <_lseek_r+0x1e>
 80267a4:	682b      	ldr	r3, [r5, #0]
 80267a6:	b103      	cbz	r3, 80267aa <_lseek_r+0x1e>
 80267a8:	6023      	str	r3, [r4, #0]
 80267aa:	bd38      	pop	{r3, r4, r5, pc}
 80267ac:	20015004 	.word	0x20015004

080267b0 <_realloc_r>:
 80267b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267b4:	4680      	mov	r8, r0
 80267b6:	4614      	mov	r4, r2
 80267b8:	460e      	mov	r6, r1
 80267ba:	b921      	cbnz	r1, 80267c6 <_realloc_r+0x16>
 80267bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80267c0:	4611      	mov	r1, r2
 80267c2:	f7fe bd59 	b.w	8025278 <_malloc_r>
 80267c6:	b92a      	cbnz	r2, 80267d4 <_realloc_r+0x24>
 80267c8:	f7fe fcea 	bl	80251a0 <_free_r>
 80267cc:	4625      	mov	r5, r4
 80267ce:	4628      	mov	r0, r5
 80267d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267d4:	f000 f872 	bl	80268bc <_malloc_usable_size_r>
 80267d8:	4284      	cmp	r4, r0
 80267da:	4607      	mov	r7, r0
 80267dc:	d802      	bhi.n	80267e4 <_realloc_r+0x34>
 80267de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80267e2:	d812      	bhi.n	802680a <_realloc_r+0x5a>
 80267e4:	4621      	mov	r1, r4
 80267e6:	4640      	mov	r0, r8
 80267e8:	f7fe fd46 	bl	8025278 <_malloc_r>
 80267ec:	4605      	mov	r5, r0
 80267ee:	2800      	cmp	r0, #0
 80267f0:	d0ed      	beq.n	80267ce <_realloc_r+0x1e>
 80267f2:	42bc      	cmp	r4, r7
 80267f4:	4622      	mov	r2, r4
 80267f6:	4631      	mov	r1, r6
 80267f8:	bf28      	it	cs
 80267fa:	463a      	movcs	r2, r7
 80267fc:	f7fe fca0 	bl	8025140 <memcpy>
 8026800:	4631      	mov	r1, r6
 8026802:	4640      	mov	r0, r8
 8026804:	f7fe fccc 	bl	80251a0 <_free_r>
 8026808:	e7e1      	b.n	80267ce <_realloc_r+0x1e>
 802680a:	4635      	mov	r5, r6
 802680c:	e7df      	b.n	80267ce <_realloc_r+0x1e>
	...

08026810 <_read_r>:
 8026810:	b538      	push	{r3, r4, r5, lr}
 8026812:	4d07      	ldr	r5, [pc, #28]	; (8026830 <_read_r+0x20>)
 8026814:	4604      	mov	r4, r0
 8026816:	4608      	mov	r0, r1
 8026818:	4611      	mov	r1, r2
 802681a:	2200      	movs	r2, #0
 802681c:	602a      	str	r2, [r5, #0]
 802681e:	461a      	mov	r2, r3
 8026820:	f7f0 fe90 	bl	8017544 <_read>
 8026824:	1c43      	adds	r3, r0, #1
 8026826:	d102      	bne.n	802682e <_read_r+0x1e>
 8026828:	682b      	ldr	r3, [r5, #0]
 802682a:	b103      	cbz	r3, 802682e <_read_r+0x1e>
 802682c:	6023      	str	r3, [r4, #0]
 802682e:	bd38      	pop	{r3, r4, r5, pc}
 8026830:	20015004 	.word	0x20015004

08026834 <_raise_r>:
 8026834:	291f      	cmp	r1, #31
 8026836:	b538      	push	{r3, r4, r5, lr}
 8026838:	4604      	mov	r4, r0
 802683a:	460d      	mov	r5, r1
 802683c:	d904      	bls.n	8026848 <_raise_r+0x14>
 802683e:	2316      	movs	r3, #22
 8026840:	6003      	str	r3, [r0, #0]
 8026842:	f04f 30ff 	mov.w	r0, #4294967295
 8026846:	bd38      	pop	{r3, r4, r5, pc}
 8026848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802684a:	b112      	cbz	r2, 8026852 <_raise_r+0x1e>
 802684c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026850:	b94b      	cbnz	r3, 8026866 <_raise_r+0x32>
 8026852:	4620      	mov	r0, r4
 8026854:	f000 f830 	bl	80268b8 <_getpid_r>
 8026858:	462a      	mov	r2, r5
 802685a:	4601      	mov	r1, r0
 802685c:	4620      	mov	r0, r4
 802685e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026862:	f000 b817 	b.w	8026894 <_kill_r>
 8026866:	2b01      	cmp	r3, #1
 8026868:	d00a      	beq.n	8026880 <_raise_r+0x4c>
 802686a:	1c59      	adds	r1, r3, #1
 802686c:	d103      	bne.n	8026876 <_raise_r+0x42>
 802686e:	2316      	movs	r3, #22
 8026870:	6003      	str	r3, [r0, #0]
 8026872:	2001      	movs	r0, #1
 8026874:	e7e7      	b.n	8026846 <_raise_r+0x12>
 8026876:	2400      	movs	r4, #0
 8026878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802687c:	4628      	mov	r0, r5
 802687e:	4798      	blx	r3
 8026880:	2000      	movs	r0, #0
 8026882:	e7e0      	b.n	8026846 <_raise_r+0x12>

08026884 <raise>:
 8026884:	4b02      	ldr	r3, [pc, #8]	; (8026890 <raise+0xc>)
 8026886:	4601      	mov	r1, r0
 8026888:	6818      	ldr	r0, [r3, #0]
 802688a:	f7ff bfd3 	b.w	8026834 <_raise_r>
 802688e:	bf00      	nop
 8026890:	20000140 	.word	0x20000140

08026894 <_kill_r>:
 8026894:	b538      	push	{r3, r4, r5, lr}
 8026896:	4d07      	ldr	r5, [pc, #28]	; (80268b4 <_kill_r+0x20>)
 8026898:	2300      	movs	r3, #0
 802689a:	4604      	mov	r4, r0
 802689c:	4608      	mov	r0, r1
 802689e:	4611      	mov	r1, r2
 80268a0:	602b      	str	r3, [r5, #0]
 80268a2:	f7f0 fe33 	bl	801750c <_kill>
 80268a6:	1c43      	adds	r3, r0, #1
 80268a8:	d102      	bne.n	80268b0 <_kill_r+0x1c>
 80268aa:	682b      	ldr	r3, [r5, #0]
 80268ac:	b103      	cbz	r3, 80268b0 <_kill_r+0x1c>
 80268ae:	6023      	str	r3, [r4, #0]
 80268b0:	bd38      	pop	{r3, r4, r5, pc}
 80268b2:	bf00      	nop
 80268b4:	20015004 	.word	0x20015004

080268b8 <_getpid_r>:
 80268b8:	f7f0 be20 	b.w	80174fc <_getpid>

080268bc <_malloc_usable_size_r>:
 80268bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80268c0:	1f18      	subs	r0, r3, #4
 80268c2:	2b00      	cmp	r3, #0
 80268c4:	bfbc      	itt	lt
 80268c6:	580b      	ldrlt	r3, [r1, r0]
 80268c8:	18c0      	addlt	r0, r0, r3
 80268ca:	4770      	bx	lr

080268cc <_init>:
 80268cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268ce:	bf00      	nop
 80268d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80268d2:	bc08      	pop	{r3}
 80268d4:	469e      	mov	lr, r3
 80268d6:	4770      	bx	lr

080268d8 <_fini>:
 80268d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268da:	bf00      	nop
 80268dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80268de:	bc08      	pop	{r3}
 80268e0:	469e      	mov	lr, r3
 80268e2:	4770      	bx	lr
